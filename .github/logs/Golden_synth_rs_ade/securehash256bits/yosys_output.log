
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys-Verific 0.0.13
 Yosys 0.16+65 (git sha1 051517d61, gcc 9.1.0 -fPIC -Os)


-- Executing script file `yosys.ys' --
echo on

yosys> plugin -i synth-rs

yosys> read -verific

yosys> read -incdir .

yosys> verific -vlog-incdir .

1. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Mar22_SW_Release, released at Fri Apr  1 00:31:54 2022.

yosys> verilog_defaults -add -I.

yosys> read -vhdl sha256_control.vhd sha256_hash_core.vhd sha256_Ki_rom.vhd sha256_Kt_rom.vhd sha256_msg_sch.vhd sha256_padding.vhd sha256_regs.vhd gv_sha256.vhd

yosys> verific -vhdl sha256_control.vhd sha256_hash_core.vhd sha256_Ki_rom.vhd sha256_Kt_rom.vhd sha256_msg_sch.vhd sha256_padding.vhd sha256_regs.vhd gv_sha256.vhd

2. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Mar22_SW_Release, released at Fri Apr  1 00:31:54 2022.
VERIFIC-INFO [VHDL-1504] default VHDL library search path is now "/home/users/aram/Workspace/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008"
VERIFIC-COMMENT [VHDL-1481] Analyzing VHDL file 'sha256_control.vhd'
VERIFIC-COMMENT [VHDL-1493] Restoring VHDL unit 'ieee.std_logic_1164' from file '/home/users/aram/Workspace/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008/ieee/std_logic_1164.vdb'
VERIFIC-COMMENT [VHDL-1493] Restoring VHDL unit 'std.standard' from file '/home/users/aram/Workspace/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008/std/standard.vdb'
VERIFIC-COMMENT [VHDL-1493] Restoring VHDL unit 'std.textio' from file '/home/users/aram/Workspace/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008/std/textio.vdb'
VERIFIC-COMMENT [VHDL-1493] Restoring VHDL unit 'ieee.numeric_std' from file '/home/users/aram/Workspace/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008/ieee/numeric_std.vdb'
VERIFIC-INFO [VHDL-1012] sha256_control.vhd:250: analyzing entity 'sha256_control'
VERIFIC-INFO [VHDL-1010] sha256_control.vhd:278: analyzing architecture 'rtl'
VERIFIC-COMMENT [VHDL-1481] Analyzing VHDL file 'sha256_hash_core.vhd'
VERIFIC-INFO [VHDL-1012] sha256_hash_core.vhd:60: analyzing entity 'sha256_hash_core'
VERIFIC-INFO [VHDL-1010] sha256_hash_core.vhd:86: analyzing architecture 'rtl'
VERIFIC-COMMENT [VHDL-1481] Analyzing VHDL file 'sha256_Ki_rom.vhd'
VERIFIC-INFO [VHDL-1012] sha256_Ki_rom.vhd:56: analyzing entity 'sha256_ki_rom'
VERIFIC-INFO [VHDL-1010] sha256_Ki_rom.vhd:69: analyzing architecture 'behavioral'
VERIFIC-COMMENT [VHDL-1481] Analyzing VHDL file 'sha256_Kt_rom.vhd'
VERIFIC-INFO [VHDL-1012] sha256_Kt_rom.vhd:59: analyzing entity 'sha256_kt_rom'
VERIFIC-INFO [VHDL-1010] sha256_Kt_rom.vhd:66: analyzing architecture 'behavioral'
VERIFIC-COMMENT [VHDL-1481] Analyzing VHDL file 'sha256_msg_sch.vhd'
VERIFIC-INFO [VHDL-1012] sha256_msg_sch.vhd:54: analyzing entity 'sha256_msg_sch'
VERIFIC-INFO [VHDL-1010] sha256_msg_sch.vhd:64: analyzing architecture 'rtl'
VERIFIC-COMMENT [VHDL-1481] Analyzing VHDL file 'sha256_padding.vhd'
VERIFIC-INFO [VHDL-1012] sha256_padding.vhd:58: analyzing entity 'sha256_padding'
VERIFIC-INFO [VHDL-1010] sha256_padding.vhd:70: analyzing architecture 'rtl'
VERIFIC-COMMENT [VHDL-1481] Analyzing VHDL file 'sha256_regs.vhd'
VERIFIC-INFO [VHDL-1012] sha256_regs.vhd:55: analyzing entity 'sha256_regs'
VERIFIC-INFO [VHDL-1010] sha256_regs.vhd:95: analyzing architecture 'rtl'
VERIFIC-COMMENT [VHDL-1481] Analyzing VHDL file 'gv_sha256.vhd'
VERIFIC-INFO [VHDL-1012] gv_sha256.vhd:80: analyzing entity 'gv_sha256'
VERIFIC-INFO [VHDL-1010] gv_sha256.vhd:108: analyzing architecture 'rtl'

yosys> synth_rs -top gv_sha256 -tech genesis -goal area -de -no_dsp -no_bram -verilog synthesized.v

3. Executing synth_rs pass: v0.2.41

yosys> read_verilog -lib -specify -nomem2reg +/rapidsilicon/common/cells_sim.v +/rapidsilicon/genesis/cells_sim.v

3.1. Executing Verilog-2005 frontend: /home/users/aram/Workspace/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v
Parsing Verilog input from `/home/users/aram/Workspace/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\inv'.
Generating RTLIL representation for module `\buff'.
Generating RTLIL representation for module `\logic_0'.
Generating RTLIL representation for module `\logic_1'.
Generating RTLIL representation for module `\gclkbuff'.
Successfully finished Verilog frontend.

3.2. Executing Verilog-2005 frontend: /home/users/aram/Workspace/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/cells_sim.v
Parsing Verilog input from `/home/users/aram/Workspace/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\dffsre'.
Generating RTLIL representation for module `\dffnsre'.
Generating RTLIL representation for module `\latchsre'.
Generating RTLIL representation for module `\latchnsre'.
Generating RTLIL representation for module `\io_scff'.
Generating RTLIL representation for module `\scff'.
Generating RTLIL representation for module `\sh_dff'.
Generating RTLIL representation for module `\adder_carry'.
Generating RTLIL representation for module `\sdffr'.
Generating RTLIL representation for module `\sdffs'.
Successfully finished Verilog frontend.

yosys> hierarchy -check -top gv_sha256

3.3. Executing HIERARCHY pass (managing design hierarchy).
VERIFIC-INFO [VHDL-1067] gv_sha256.vhd:80: processing 'gv_sha256(rtl)'
VERIFIC-INFO [VHDL-1067] sha256_control.vhd:250: processing 'sha256_control(rtl)'
VERIFIC-INFO [VHDL-1172] sha256_control.vhd:553: 'others' clause is never selected
VERIFIC-INFO [VHDL-1067] sha256_padding.vhd:58: processing 'sha256_padding(rtl)'
VERIFIC-INFO [VHDL-1067] sha256_msg_sch.vhd:54: processing 'sha256_msg_sch(rtl)'
VERIFIC-INFO [VHDL-1067] sha256_hash_core.vhd:60: processing 'sha256_hash_core(rtl)'
VERIFIC-INFO [VHDL-1067] sha256_regs.vhd:55: processing 'sha256_regs(rtl)'
VERIFIC-INFO [VHDL-1067] sha256_Kt_rom.vhd:59: processing 'sha256_kt_rom(behavioral)'
VERIFIC-INFO [VHDL-1067] sha256_Ki_rom.vhd:56: processing 'sha256_ki_rom(behavioral)'
Importing module gv_sha256.
Importing module sha256_control(rtl).
Importing module sha256_hash_core(rtl).
Importing module sha256_ki_rom(behavioral).
Importing module sha256_kt_rom(behavioral).
Importing module sha256_msg_sch(rtl).
Importing module sha256_padding(rtl).
Importing module sha256_regs(rtl).

3.3.1. Analyzing design hierarchy..
Top module:  \gv_sha256
Used module:     \sha256_ki_rom(behavioral)
Used module:     \sha256_kt_rom(behavioral)
Used module:     \sha256_regs(rtl)
Used module:     \sha256_hash_core(rtl)
Used module:     \sha256_msg_sch(rtl)
Used module:     \sha256_padding(rtl)
Used module:     \sha256_control(rtl)

3.3.2. Analyzing design hierarchy..
Top module:  \gv_sha256
Used module:     \sha256_ki_rom(behavioral)
Used module:     \sha256_kt_rom(behavioral)
Used module:     \sha256_regs(rtl)
Used module:     \sha256_hash_core(rtl)
Used module:     \sha256_msg_sch(rtl)
Used module:     \sha256_padding(rtl)
Used module:     \sha256_control(rtl)
Removed 0 unused modules.

yosys> proc

3.4. Executing PROC pass (convert processes to netlists).

yosys> proc_clean

3.4.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> proc_rmdead

3.4.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

yosys> proc_prune

3.4.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

yosys> proc_init

3.4.4. Executing PROC_INIT pass (extract init attributes).

yosys> proc_arst

3.4.5. Executing PROC_ARST pass (detect async resets in processes).

yosys> proc_mux

3.4.6. Executing PROC_MUX pass (convert decision trees to multiplexers).

yosys> proc_dlatch

3.4.7. Executing PROC_DLATCH pass (convert process syncs to latches).

yosys> proc_dff

3.4.8. Executing PROC_DFF pass (convert process syncs to FFs).

yosys> proc_memwr

3.4.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

yosys> proc_clean

3.4.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> opt_expr -keepdc

3.4.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module sha256_regs(rtl).
Optimizing module sha256_padding(rtl).
Optimizing module sha256_msg_sch(rtl).
Optimizing module sha256_kt_rom(behavioral).
<suppressed ~1 debug messages>
Optimizing module sha256_ki_rom(behavioral).
<suppressed ~8 debug messages>
Optimizing module sha256_hash_core(rtl).
Optimizing module sha256_control(rtl).
<suppressed ~16 debug messages>
Optimizing module gv_sha256.

yosys> flatten

3.5. Executing FLATTEN pass (flatten design).
Deleting now unused module sha256_regs(rtl).
Deleting now unused module sha256_padding(rtl).
Deleting now unused module sha256_msg_sch(rtl).
Deleting now unused module sha256_kt_rom(behavioral).
Deleting now unused module sha256_ki_rom(behavioral).
Deleting now unused module sha256_hash_core(rtl).
Deleting now unused module sha256_control(rtl).
<suppressed ~7 debug messages>

yosys> tribuf -logic

3.6. Executing TRIBUF pass.

yosys> deminout

3.7. Executing DEMINOUT pass (demote inout ports to input or output).

yosys> opt_expr

3.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module gv_sha256.

yosys> opt_clean

3.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gv_sha256..
Removed 0 unused cells and 265 unused wires.
<suppressed ~202 debug messages>

yosys> check

3.10. Executing CHECK pass (checking for obvious problems).
Checking module gv_sha256...
Found and reported 0 problems.

yosys> opt -nodffe -nosdff

3.11. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module gv_sha256.

yosys> opt_merge -nomux

3.11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gv_sha256'.
<suppressed ~12 debug messages>
Removed a total of 4 cells.

yosys> opt_muxtree

3.11.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \gv_sha256..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~57 debug messages>

yosys> opt_reduce

3.11.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \gv_sha256.
Performed a total of 0 changes.

yosys> opt_merge

3.11.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gv_sha256'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

yosys> opt_dff -nodffe -nosdff

3.11.6. Executing OPT_DFF pass (perform DFF optimizations).
Removing never-active async load on $flatten\Inst_sha256_regs.$verific$reg_H7_reg$sha256_regs.vhd:144$1048 ($aldff) from module gv_sha256.
Removing never-active async load on $flatten\Inst_sha256_regs.$verific$reg_H6_reg$sha256_regs.vhd:144$1047 ($aldff) from module gv_sha256.
Removing never-active async load on $flatten\Inst_sha256_regs.$verific$reg_H5_reg$sha256_regs.vhd:144$1046 ($aldff) from module gv_sha256.
Removing never-active async load on $flatten\Inst_sha256_regs.$verific$reg_H4_reg$sha256_regs.vhd:144$1045 ($aldff) from module gv_sha256.
Removing never-active async load on $flatten\Inst_sha256_regs.$verific$reg_H3_reg$sha256_regs.vhd:144$1044 ($aldff) from module gv_sha256.
Removing never-active async load on $flatten\Inst_sha256_regs.$verific$reg_H2_reg$sha256_regs.vhd:144$1043 ($aldff) from module gv_sha256.
Removing never-active async load on $flatten\Inst_sha256_regs.$verific$reg_H1_reg$sha256_regs.vhd:144$1042 ($aldff) from module gv_sha256.
Removing never-active async load on $flatten\Inst_sha256_regs.$verific$reg_H0_reg$sha256_regs.vhd:144$1041 ($aldff) from module gv_sha256.
Removing never-active async load on $flatten\Inst_sha256_msg_sch.$verific$r9_reg$sha256_msg_sch.vhd:141$865 ($aldff) from module gv_sha256.
Removing never-active async load on $flatten\Inst_sha256_msg_sch.$verific$r8_reg$sha256_msg_sch.vhd:141$864 ($aldff) from module gv_sha256.
Removing never-active async load on $flatten\Inst_sha256_msg_sch.$verific$r7_reg$sha256_msg_sch.vhd:141$863 ($aldff) from module gv_sha256.
Removing never-active async load on $flatten\Inst_sha256_msg_sch.$verific$r6_reg$sha256_msg_sch.vhd:141$862 ($aldff) from module gv_sha256.
Removing never-active async load on $flatten\Inst_sha256_msg_sch.$verific$r5_reg$sha256_msg_sch.vhd:141$861 ($aldff) from module gv_sha256.
Removing never-active async load on $flatten\Inst_sha256_msg_sch.$verific$r4_reg$sha256_msg_sch.vhd:141$860 ($aldff) from module gv_sha256.
Removing never-active async load on $flatten\Inst_sha256_msg_sch.$verific$r3_reg$sha256_msg_sch.vhd:141$859 ($aldff) from module gv_sha256.
Removing never-active async load on $flatten\Inst_sha256_msg_sch.$verific$r2_reg$sha256_msg_sch.vhd:141$858 ($aldff) from module gv_sha256.
Removing never-active async load on $flatten\Inst_sha256_msg_sch.$verific$r1_reg$sha256_msg_sch.vhd:141$857 ($aldff) from module gv_sha256.
Removing never-active async load on $flatten\Inst_sha256_msg_sch.$verific$r15_reg$sha256_msg_sch.vhd:141$871 ($aldff) from module gv_sha256.
Removing never-active async load on $flatten\Inst_sha256_msg_sch.$verific$r14_reg$sha256_msg_sch.vhd:141$870 ($aldff) from module gv_sha256.
Removing never-active async load on $flatten\Inst_sha256_msg_sch.$verific$r13_reg$sha256_msg_sch.vhd:141$869 ($aldff) from module gv_sha256.
Removing never-active async load on $flatten\Inst_sha256_msg_sch.$verific$r12_reg$sha256_msg_sch.vhd:141$868 ($aldff) from module gv_sha256.
Removing never-active async load on $flatten\Inst_sha256_msg_sch.$verific$r11_reg$sha256_msg_sch.vhd:141$867 ($aldff) from module gv_sha256.
Removing never-active async load on $flatten\Inst_sha256_msg_sch.$verific$r10_reg$sha256_msg_sch.vhd:141$866 ($aldff) from module gv_sha256.
Removing never-active async load on $flatten\Inst_sha256_msg_sch.$verific$r0_reg$sha256_msg_sch.vhd:141$856 ($aldff) from module gv_sha256.
Removing never-active async load on $flatten\Inst_sha256_hash_core.$verific$reg_h_reg$sha256_hash_core.vhd:142$441 ($aldff) from module gv_sha256.
Removing never-active async load on $flatten\Inst_sha256_hash_core.$verific$reg_g_reg$sha256_hash_core.vhd:142$440 ($aldff) from module gv_sha256.
Removing never-active async load on $flatten\Inst_sha256_hash_core.$verific$reg_f_reg$sha256_hash_core.vhd:142$439 ($aldff) from module gv_sha256.
Removing never-active async load on $flatten\Inst_sha256_hash_core.$verific$reg_e_reg$sha256_hash_core.vhd:142$438 ($aldff) from module gv_sha256.
Removing never-active async load on $flatten\Inst_sha256_hash_core.$verific$reg_d_reg$sha256_hash_core.vhd:142$437 ($aldff) from module gv_sha256.
Removing never-active async load on $flatten\Inst_sha256_hash_core.$verific$reg_c_reg$sha256_hash_core.vhd:142$436 ($aldff) from module gv_sha256.
Removing never-active async load on $flatten\Inst_sha256_hash_core.$verific$reg_b_reg$sha256_hash_core.vhd:142$435 ($aldff) from module gv_sha256.
Removing never-active async load on $flatten\Inst_sha256_hash_core.$verific$reg_a_reg$sha256_hash_core.vhd:142$434 ($aldff) from module gv_sha256.
Removing never-active async load on $flatten\Inst_sha256_control.$verific$st_cnt_reg_reg$sha256_control.vhd:403$243 ($aldff) from module gv_sha256.
Removing never-active async load on $flatten\Inst_sha256_control.$verific$msg_bit_cnt_reg_reg$sha256_control.vhd:390$236 ($aldff) from module gv_sha256.
Removing never-active async load on $flatten\Inst_sha256_control.$verific$hash_control_st_reg_reg$sha256_control.vhd:365$221 ($aldff) from module gv_sha256.

yosys> opt_clean

3.11.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gv_sha256..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.11.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module gv_sha256.

3.11.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.11.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \gv_sha256..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~58 debug messages>

yosys> opt_reduce

3.11.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \gv_sha256.
Performed a total of 0 changes.

yosys> opt_merge

3.11.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gv_sha256'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.11.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.11.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gv_sha256..

yosys> opt_expr

3.11.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module gv_sha256.

3.11.16. Finished OPT passes. (There is nothing left to do.)

yosys> fsm -encoding binary

3.12. Executing FSM pass (extract and optimize FSM).

yosys> fsm_detect

3.12.1. Executing FSM_DETECT pass (finding FSMs in design).

yosys> fsm_extract

3.12.2. Executing FSM_EXTRACT pass (extracting FSM from design).

yosys> fsm_opt

3.12.3. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> opt_clean

3.12.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gv_sha256..

yosys> fsm_opt

3.12.5. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> fsm_recode -encoding binary

3.12.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

yosys> fsm_info

3.12.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

yosys> fsm_map

3.12.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

yosys> opt -sat

3.13. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module gv_sha256.

yosys> opt_merge -nomux

3.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gv_sha256'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \gv_sha256..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~58 debug messages>

yosys> opt_reduce

3.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \gv_sha256.
Performed a total of 0 changes.

yosys> opt_merge

3.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gv_sha256'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.13.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $flatten\Inst_sha256_regs.$verific$reg_H7_reg$sha256_regs.vhd:144$1048 ($dff) from module gv_sha256 (D = \Inst_sha256_hash_core.H_i, Q = \Inst_sha256_regs.reg_H7).
Adding EN signal on $flatten\Inst_sha256_regs.$verific$reg_H6_reg$sha256_regs.vhd:144$1047 ($dff) from module gv_sha256 (D = \Inst_sha256_hash_core.G_i, Q = \Inst_sha256_regs.reg_H6).
Adding EN signal on $flatten\Inst_sha256_regs.$verific$reg_H5_reg$sha256_regs.vhd:144$1046 ($dff) from module gv_sha256 (D = \Inst_sha256_hash_core.F_i, Q = \Inst_sha256_regs.reg_H5).
Adding EN signal on $flatten\Inst_sha256_regs.$verific$reg_H4_reg$sha256_regs.vhd:144$1045 ($dff) from module gv_sha256 (D = \Inst_sha256_hash_core.E_i, Q = \Inst_sha256_regs.reg_H4).
Adding EN signal on $flatten\Inst_sha256_regs.$verific$reg_H3_reg$sha256_regs.vhd:144$1044 ($dff) from module gv_sha256 (D = \Inst_sha256_hash_core.D_i, Q = \Inst_sha256_regs.reg_H3).
Adding EN signal on $flatten\Inst_sha256_regs.$verific$reg_H2_reg$sha256_regs.vhd:144$1043 ($dff) from module gv_sha256 (D = \Inst_sha256_hash_core.C_i, Q = \Inst_sha256_regs.reg_H2).
Adding EN signal on $flatten\Inst_sha256_regs.$verific$reg_H1_reg$sha256_regs.vhd:144$1042 ($dff) from module gv_sha256 (D = \Inst_sha256_hash_core.B_i, Q = \Inst_sha256_regs.reg_H1).
Adding EN signal on $flatten\Inst_sha256_regs.$verific$reg_H0_reg$sha256_regs.vhd:144$1041 ($dff) from module gv_sha256 (D = \Inst_sha256_hash_core.A_i, Q = \Inst_sha256_regs.reg_H0).
Adding EN signal on $flatten\Inst_sha256_msg_sch.$verific$r9_reg$sha256_msg_sch.vhd:141$865 ($dff) from module gv_sha256 (D = \Inst_sha256_msg_sch.r10, Q = \Inst_sha256_msg_sch.r9).
Adding EN signal on $flatten\Inst_sha256_msg_sch.$verific$r8_reg$sha256_msg_sch.vhd:141$864 ($dff) from module gv_sha256 (D = \Inst_sha256_msg_sch.r9, Q = \Inst_sha256_msg_sch.r8).
Adding EN signal on $flatten\Inst_sha256_msg_sch.$verific$r7_reg$sha256_msg_sch.vhd:141$863 ($dff) from module gv_sha256 (D = \Inst_sha256_msg_sch.r8, Q = \Inst_sha256_msg_sch.r7).
Adding EN signal on $flatten\Inst_sha256_msg_sch.$verific$r6_reg$sha256_msg_sch.vhd:141$862 ($dff) from module gv_sha256 (D = \Inst_sha256_msg_sch.r7, Q = \Inst_sha256_msg_sch.r6).
Adding EN signal on $flatten\Inst_sha256_msg_sch.$verific$r5_reg$sha256_msg_sch.vhd:141$861 ($dff) from module gv_sha256 (D = \Inst_sha256_msg_sch.r6, Q = \Inst_sha256_msg_sch.r5).
Adding EN signal on $flatten\Inst_sha256_msg_sch.$verific$r4_reg$sha256_msg_sch.vhd:141$860 ($dff) from module gv_sha256 (D = \Inst_sha256_msg_sch.r5, Q = \Inst_sha256_msg_sch.r4).
Adding EN signal on $flatten\Inst_sha256_msg_sch.$verific$r3_reg$sha256_msg_sch.vhd:141$859 ($dff) from module gv_sha256 (D = \Inst_sha256_msg_sch.r4, Q = \Inst_sha256_msg_sch.r3).
Adding EN signal on $flatten\Inst_sha256_msg_sch.$verific$r2_reg$sha256_msg_sch.vhd:141$858 ($dff) from module gv_sha256 (D = \Inst_sha256_msg_sch.r3, Q = \Inst_sha256_msg_sch.r2).
Adding EN signal on $flatten\Inst_sha256_msg_sch.$verific$r1_reg$sha256_msg_sch.vhd:141$857 ($dff) from module gv_sha256 (D = \Inst_sha256_msg_sch.r2, Q = \Inst_sha256_msg_sch.r1).
Adding EN signal on $flatten\Inst_sha256_msg_sch.$verific$r15_reg$sha256_msg_sch.vhd:141$871 ($dff) from module gv_sha256 (D = \Inst_sha256_msg_sch.r0, Q = \Inst_sha256_msg_sch.r15).
Adding EN signal on $flatten\Inst_sha256_msg_sch.$verific$r14_reg$sha256_msg_sch.vhd:141$870 ($dff) from module gv_sha256 (D = \Inst_sha256_msg_sch.r15, Q = \Inst_sha256_msg_sch.r14).
Adding EN signal on $flatten\Inst_sha256_msg_sch.$verific$r13_reg$sha256_msg_sch.vhd:141$869 ($dff) from module gv_sha256 (D = \Inst_sha256_msg_sch.r14, Q = \Inst_sha256_msg_sch.r13).
Adding EN signal on $flatten\Inst_sha256_msg_sch.$verific$r12_reg$sha256_msg_sch.vhd:141$868 ($dff) from module gv_sha256 (D = \Inst_sha256_msg_sch.r13, Q = \Inst_sha256_msg_sch.r12).
Adding EN signal on $flatten\Inst_sha256_msg_sch.$verific$r11_reg$sha256_msg_sch.vhd:141$867 ($dff) from module gv_sha256 (D = \Inst_sha256_msg_sch.r12, Q = \Inst_sha256_msg_sch.r11).
Adding EN signal on $flatten\Inst_sha256_msg_sch.$verific$r10_reg$sha256_msg_sch.vhd:141$866 ($dff) from module gv_sha256 (D = \Inst_sha256_msg_sch.r11, Q = \Inst_sha256_msg_sch.r10).
Adding EN signal on $flatten\Inst_sha256_msg_sch.$verific$r0_reg$sha256_msg_sch.vhd:141$856 ($dff) from module gv_sha256 (D = \Inst_sha256_hash_core.Wt_i, Q = \Inst_sha256_msg_sch.r0).
Adding EN signal on $flatten\Inst_sha256_hash_core.$verific$reg_h_reg$sha256_hash_core.vhd:142$441 ($dff) from module gv_sha256 (D = \Inst_sha256_hash_core.next_reg_h, Q = \Inst_sha256_hash_core.reg_h).
Adding EN signal on $flatten\Inst_sha256_hash_core.$verific$reg_g_reg$sha256_hash_core.vhd:142$440 ($dff) from module gv_sha256 (D = \Inst_sha256_hash_core.next_reg_g, Q = \Inst_sha256_hash_core.reg_g).
Adding EN signal on $flatten\Inst_sha256_hash_core.$verific$reg_f_reg$sha256_hash_core.vhd:142$439 ($dff) from module gv_sha256 (D = \Inst_sha256_hash_core.next_reg_f, Q = \Inst_sha256_hash_core.reg_f).
Adding EN signal on $flatten\Inst_sha256_hash_core.$verific$reg_e_reg$sha256_hash_core.vhd:142$438 ($dff) from module gv_sha256 (D = \Inst_sha256_hash_core.next_reg_e, Q = \Inst_sha256_hash_core.reg_e).
Adding EN signal on $flatten\Inst_sha256_hash_core.$verific$reg_d_reg$sha256_hash_core.vhd:142$437 ($dff) from module gv_sha256 (D = \Inst_sha256_hash_core.next_reg_d, Q = \Inst_sha256_hash_core.reg_d).
Adding EN signal on $flatten\Inst_sha256_hash_core.$verific$reg_c_reg$sha256_hash_core.vhd:142$436 ($dff) from module gv_sha256 (D = \Inst_sha256_hash_core.next_reg_c, Q = \Inst_sha256_hash_core.reg_c).
Adding EN signal on $flatten\Inst_sha256_hash_core.$verific$reg_b_reg$sha256_hash_core.vhd:142$435 ($dff) from module gv_sha256 (D = \Inst_sha256_hash_core.next_reg_b, Q = \Inst_sha256_hash_core.reg_b).
Adding EN signal on $flatten\Inst_sha256_hash_core.$verific$reg_a_reg$sha256_hash_core.vhd:142$434 ($dff) from module gv_sha256 (D = \Inst_sha256_hash_core.next_reg_a, Q = \Inst_sha256_hash_core.reg_a).
Adding SRST signal on $flatten\Inst_sha256_control.$verific$st_cnt_reg_reg$sha256_control.vhd:403$243 ($dff) from module gv_sha256 (D = $flatten\Inst_sha256_control.$verific$n386$171, Q = \Inst_sha256_control.st_cnt_reg, rval = 7'0000000).
Adding EN signal on $auto$ff.cc:262:slice$1129 ($sdff) from module gv_sha256 (D = \Inst_sha256_control.st_cnt_next, Q = \Inst_sha256_control.st_cnt_reg).
Adding SRST signal on $flatten\Inst_sha256_control.$verific$sha_last_blk_reg_reg$sha256_control.vhd:377$229 ($dff) from module gv_sha256 (D = $flatten\Inst_sha256_control.$verific$n36$115, Q = \Inst_sha256_control.sha_last_blk_reg, rval = 1'0).
Adding EN signal on $auto$ff.cc:262:slice$1131 ($sdff) from module gv_sha256 (D = \Inst_sha256_control.sha_last_blk_next, Q = \Inst_sha256_control.sha_last_blk_reg).
Adding SRST signal on $flatten\Inst_sha256_control.$verific$padding_reg_reg$sha256_control.vhd:377$230 ($dff) from module gv_sha256 (D = $flatten\Inst_sha256_control.$verific$n38$117, Q = \Inst_sha256_control.padding_reg, rval = 1'0).
Adding EN signal on $auto$ff.cc:262:slice$1133 ($sdff) from module gv_sha256 (D = \Inst_sha256_control.padding_next, Q = \Inst_sha256_control.padding_reg).
Adding SRST signal on $flatten\Inst_sha256_control.$verific$pad_one_reg_reg$sha256_control.vhd:417$249 ($dff) from module gv_sha256 (D = $flatten\Inst_sha256_control.$verific$n413$124, Q = \Inst_sha256_control.pad_one_reg, rval = 1'1).
Adding EN signal on $auto$ff.cc:262:slice$1135 ($sdff) from module gv_sha256 (D = 1'0, Q = \Inst_sha256_control.pad_one_reg).
Adding SRST signal on $flatten\Inst_sha256_control.$verific$msg_bit_cnt_reg_reg$sha256_control.vhd:390$236 ($dff) from module gv_sha256 (D = $flatten\Inst_sha256_control.$verific$n173$167, Q = \Inst_sha256_control.msg_bit_cnt_reg, rval = 64'0000000000000000000000000000000000000000000000000000000000000000).
Adding EN signal on $auto$ff.cc:262:slice$1139 ($sdff) from module gv_sha256 (D = \Inst_sha256_control.msg_bit_cnt_next, Q = \Inst_sha256_control.msg_bit_cnt_reg).
Adding SRST signal on $flatten\Inst_sha256_control.$verific$hash_control_st_reg_reg$sha256_control.vhd:365$221 ($dff) from module gv_sha256 (D = $flatten\Inst_sha256_control.$verific$n20$163 [2:1], Q = \Inst_sha256_control.hash_control_st_reg [2:1], rval = 2'00).
Adding SRST signal on $flatten\Inst_sha256_control.$verific$hash_control_st_reg_reg$sha256_control.vhd:365$221 ($dff) from module gv_sha256 (D = $flatten\Inst_sha256_control.$verific$n16$162 [0], Q = \Inst_sha256_control.hash_control_st_reg [0], rval = 1'0).
Adding EN signal on $auto$ff.cc:262:slice$1142 ($sdff) from module gv_sha256 (D = \Inst_sha256_control.hash_control_st_next [0], Q = \Inst_sha256_control.hash_control_st_reg [0]).
Adding EN signal on $auto$ff.cc:262:slice$1141 ($sdff) from module gv_sha256 (D = $flatten\Inst_sha256_control.$verific$n20$163 [2:1], Q = \Inst_sha256_control.hash_control_st_reg [2:1]).
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$1140 ($sdffe) from module gv_sha256.
Setting constant 0-bit at position 1 on $auto$ff.cc:262:slice$1140 ($sdffe) from module gv_sha256.
Setting constant 0-bit at position 2 on $auto$ff.cc:262:slice$1140 ($sdffe) from module gv_sha256.

yosys> opt_clean

3.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gv_sha256..
Removed 44 unused cells and 44 unused wires.
<suppressed ~46 debug messages>

yosys> opt_expr

3.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module gv_sha256.
<suppressed ~1 debug messages>

3.13.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.13.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \gv_sha256..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~29 debug messages>

yosys> opt_reduce

3.13.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \gv_sha256.
Performed a total of 0 changes.

yosys> opt_merge

3.13.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gv_sha256'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.13.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.13.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gv_sha256..

yosys> opt_expr

3.13.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module gv_sha256.

3.13.16. Finished OPT passes. (There is nothing left to do.)

yosys> wreduce -keepdc

3.14. Executing WREDUCE pass (reducing word size of cells).
Removed top 6 bits (of 7) from port B of cell gv_sha256.$flatten\Inst_sha256_control.$verific$add_184$../vhdl_packages/vhdl_2008/src/numeric_std-body.vhdl:482$327 ($add).
Removed top 58 bits (of 64) from port B of cell gv_sha256.$flatten\Inst_sha256_control.$verific$add_175$sha256_control.vhd:607$321 ($add).
Removed top 1 bits (of 2) from mux cell gv_sha256.$flatten\Inst_sha256_control.$verific$mux_114$sha256_control.vhd:537$276 ($mux).
Removed top 3 bits (of 7) from port B of cell gv_sha256.$flatten\Inst_sha256_control.$verific$equal_112$sha256_control.vhd:535$275 ($eq).
Removed top 3 bits (of 7) from port B of cell gv_sha256.$flatten\Inst_sha256_control.$verific$equal_108$sha256_control.vhd:532$272 ($eq).
Removed top 2 bits (of 7) from port B of cell gv_sha256.$flatten\Inst_sha256_control.$verific$equal_93$sha256_control.vhd:513$267 ($eq).
Removed top 1 bits (of 7) from port B of cell gv_sha256.$flatten\Inst_sha256_control.$verific$equal_79$sha256_control.vhd:490$261 ($eq).
Removed top 3 bits (of 7) from port B of cell gv_sha256.$flatten\Inst_sha256_control.$verific$equal_70$sha256_control.vhd:478$256 ($eq).
Removed top 1 bits (of 2) from port A of cell gv_sha256.$flatten\Inst_sha256_padding.$verific$equal_35$sha256_padding.vhd:138$968 ($eq).
Removed top 10 bits (of 32) from port A of cell gv_sha256.$flatten\Inst_sha256_msg_sch.$verific$xor_80$../vhdl_packages/vhdl_2008/src/numeric_std-body.vhdl:3548$901 ($xor).
Removed top 3 bits (of 32) from port A of cell gv_sha256.$flatten\Inst_sha256_msg_sch.$verific$xor_75$../vhdl_packages/vhdl_2008/src/numeric_std-body.vhdl:3548$896 ($xor).
Removed top 1 bits (of 32) from mux cell gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$mux_68$sha256_Kt_rom.vhd:139$712 ($mux).
Removed top 1 bits (of 6) from port A of cell gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$equal_35$sha256_Kt_rom.vhd:109$680 ($eq).
Removed top 1 bits (of 6) from port A of cell gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$equal_34$sha256_Kt_rom.vhd:108$679 ($eq).
Removed top 1 bits (of 6) from port A of cell gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$equal_33$sha256_Kt_rom.vhd:107$678 ($eq).
Removed top 1 bits (of 6) from port A of cell gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$equal_32$sha256_Kt_rom.vhd:106$677 ($eq).
Removed top 1 bits (of 6) from port A of cell gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$equal_31$sha256_Kt_rom.vhd:105$676 ($eq).
Removed top 1 bits (of 6) from port A of cell gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$equal_30$sha256_Kt_rom.vhd:104$675 ($eq).
Removed top 1 bits (of 6) from port A of cell gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$equal_29$sha256_Kt_rom.vhd:103$674 ($eq).
Removed top 1 bits (of 6) from port A of cell gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$equal_28$sha256_Kt_rom.vhd:102$673 ($eq).
Removed top 1 bits (of 6) from port A of cell gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$equal_27$sha256_Kt_rom.vhd:101$672 ($eq).
Removed top 1 bits (of 6) from port A of cell gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$equal_26$sha256_Kt_rom.vhd:100$671 ($eq).
Removed top 1 bits (of 6) from port A of cell gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$equal_25$sha256_Kt_rom.vhd:99$670 ($eq).
Removed top 1 bits (of 6) from port A of cell gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$equal_24$sha256_Kt_rom.vhd:98$669 ($eq).
Removed top 1 bits (of 6) from port A of cell gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$equal_23$sha256_Kt_rom.vhd:97$668 ($eq).
Removed top 1 bits (of 6) from port A of cell gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$equal_22$sha256_Kt_rom.vhd:96$667 ($eq).
Removed top 1 bits (of 6) from port A of cell gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$equal_21$sha256_Kt_rom.vhd:95$666 ($eq).
Removed top 1 bits (of 6) from port A of cell gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$equal_20$sha256_Kt_rom.vhd:94$665 ($eq).
Removed top 2 bits (of 6) from port A of cell gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$equal_19$sha256_Kt_rom.vhd:93$664 ($eq).
Removed top 2 bits (of 6) from port A of cell gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$equal_18$sha256_Kt_rom.vhd:92$663 ($eq).
Removed top 2 bits (of 6) from port A of cell gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$equal_17$sha256_Kt_rom.vhd:91$662 ($eq).
Removed top 2 bits (of 6) from port A of cell gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$equal_16$sha256_Kt_rom.vhd:90$661 ($eq).
Removed top 2 bits (of 6) from port A of cell gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$equal_15$sha256_Kt_rom.vhd:89$660 ($eq).
Removed top 2 bits (of 6) from port A of cell gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$equal_14$sha256_Kt_rom.vhd:88$659 ($eq).
Removed top 2 bits (of 6) from port A of cell gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$equal_13$sha256_Kt_rom.vhd:87$658 ($eq).
Removed top 2 bits (of 6) from port A of cell gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$equal_12$sha256_Kt_rom.vhd:86$657 ($eq).
Removed top 3 bits (of 6) from port A of cell gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$equal_11$sha256_Kt_rom.vhd:85$656 ($eq).
Removed top 3 bits (of 6) from port A of cell gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$equal_10$sha256_Kt_rom.vhd:84$655 ($eq).
Removed top 3 bits (of 6) from port A of cell gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$equal_9$sha256_Kt_rom.vhd:83$654 ($eq).
Removed top 3 bits (of 6) from port A of cell gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$equal_8$sha256_Kt_rom.vhd:82$653 ($eq).
Removed top 4 bits (of 6) from port A of cell gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$equal_7$sha256_Kt_rom.vhd:81$652 ($eq).
Removed top 4 bits (of 6) from port A of cell gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$equal_6$sha256_Kt_rom.vhd:80$651 ($eq).
Removed top 5 bits (of 6) from port A of cell gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$equal_5$sha256_Kt_rom.vhd:79$650 ($eq).
Removed top 1 bits (of 2) from wire gv_sha256.$flatten\Inst_sha256_control.$verific$n547$192.
Removed top 1 bits (of 32) from wire gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$n107$583.
Removed top 8 bits (of 32) from wire gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$n140$584.
Removed top 17 bits (of 32) from wire gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$n74$582.

yosys> peepopt

3.15. Executing PEEPOPT pass (run peephole optimizers).

yosys> pmuxtree

3.16. Executing PMUXTREE pass.

yosys> opt_clean

3.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gv_sha256..
Removed 0 unused cells and 4 unused wires.
<suppressed ~1 debug messages>

yosys> alumacc

3.18. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module gv_sha256:
  creating $macc model for $flatten\Inst_sha256_control.$verific$add_175$sha256_control.vhd:607$321 ($add).
  creating $macc model for $flatten\Inst_sha256_control.$verific$add_184$../vhdl_packages/vhdl_2008/src/numeric_std-body.vhdl:482$327 ($add).
  creating $macc model for $flatten\Inst_sha256_hash_core.$verific$add_43$sha256_hash_core.vhd:161$458 ($add).
  creating $macc model for $flatten\Inst_sha256_hash_core.$verific$add_45$sha256_hash_core.vhd:162$460 ($add).
  creating $macc model for $flatten\Inst_sha256_hash_core.$verific$add_47$sha256_hash_core.vhd:163$462 ($add).
  creating $macc model for $flatten\Inst_sha256_hash_core.$verific$add_49$sha256_hash_core.vhd:164$464 ($add).
  creating $macc model for $flatten\Inst_sha256_hash_core.$verific$add_51$sha256_hash_core.vhd:165$466 ($add).
  creating $macc model for $flatten\Inst_sha256_hash_core.$verific$add_53$sha256_hash_core.vhd:166$468 ($add).
  creating $macc model for $flatten\Inst_sha256_hash_core.$verific$add_55$sha256_hash_core.vhd:167$470 ($add).
  creating $macc model for $flatten\Inst_sha256_msg_sch.$verific$add_69$sha256_msg_sch.vhd:166$890 ($add).
  creating $macc model for $flatten\Inst_sha256_msg_sch.$verific$add_71$sha256_msg_sch.vhd:167$892 ($add).
  creating $macc model for $flatten\Inst_sha256_msg_sch.$verific$add_73$sha256_msg_sch.vhd:168$894 ($add).
  creating $macc model for $flatten\Inst_sha256_regs.$verific$add_43$sha256_regs.vhd:158$1065 ($add).
  creating $macc model for $flatten\Inst_sha256_regs.$verific$add_45$sha256_regs.vhd:159$1067 ($add).
  creating $macc model for $flatten\Inst_sha256_regs.$verific$add_47$sha256_regs.vhd:160$1069 ($add).
  creating $macc model for $flatten\Inst_sha256_regs.$verific$add_49$sha256_regs.vhd:161$1071 ($add).
  creating $macc model for $flatten\Inst_sha256_regs.$verific$add_51$sha256_regs.vhd:162$1073 ($add).
  creating $macc model for $flatten\Inst_sha256_regs.$verific$add_53$sha256_regs.vhd:163$1075 ($add).
  creating $macc model for $flatten\Inst_sha256_regs.$verific$add_55$sha256_regs.vhd:164$1077 ($add).
  creating $macc model for $flatten\Inst_sha256_regs.$verific$add_57$sha256_regs.vhd:165$1079 ($add).
  merging $macc model for $flatten\Inst_sha256_msg_sch.$verific$add_73$sha256_msg_sch.vhd:168$894 into $flatten\Inst_sha256_msg_sch.$verific$add_71$sha256_msg_sch.vhd:167$892.
  merging $macc model for $flatten\Inst_sha256_msg_sch.$verific$add_71$sha256_msg_sch.vhd:167$892 into $flatten\Inst_sha256_msg_sch.$verific$add_69$sha256_msg_sch.vhd:166$890.
  merging $macc model for $flatten\Inst_sha256_hash_core.$verific$add_55$sha256_hash_core.vhd:167$470 into $flatten\Inst_sha256_hash_core.$verific$add_53$sha256_hash_core.vhd:166$468.
  merging $macc model for $flatten\Inst_sha256_hash_core.$verific$add_53$sha256_hash_core.vhd:166$468 into $flatten\Inst_sha256_hash_core.$verific$add_51$sha256_hash_core.vhd:165$466.
  merging $macc model for $flatten\Inst_sha256_hash_core.$verific$add_51$sha256_hash_core.vhd:165$466 into $flatten\Inst_sha256_hash_core.$verific$add_49$sha256_hash_core.vhd:164$464.
  merging $macc model for $flatten\Inst_sha256_hash_core.$verific$add_45$sha256_hash_core.vhd:162$460 into $flatten\Inst_sha256_hash_core.$verific$add_43$sha256_hash_core.vhd:161$458.
  creating $alu model for $macc $flatten\Inst_sha256_regs.$verific$add_45$sha256_regs.vhd:159$1067.
  creating $alu model for $macc $flatten\Inst_sha256_regs.$verific$add_43$sha256_regs.vhd:158$1065.
  creating $alu model for $macc $flatten\Inst_sha256_regs.$verific$add_47$sha256_regs.vhd:160$1069.
  creating $alu model for $macc $flatten\Inst_sha256_regs.$verific$add_49$sha256_regs.vhd:161$1071.
  creating $alu model for $macc $flatten\Inst_sha256_regs.$verific$add_51$sha256_regs.vhd:162$1073.
  creating $alu model for $macc $flatten\Inst_sha256_regs.$verific$add_53$sha256_regs.vhd:163$1075.
  creating $alu model for $macc $flatten\Inst_sha256_regs.$verific$add_55$sha256_regs.vhd:164$1077.
  creating $alu model for $macc $flatten\Inst_sha256_hash_core.$verific$add_47$sha256_hash_core.vhd:163$462.
  creating $alu model for $macc $flatten\Inst_sha256_regs.$verific$add_57$sha256_regs.vhd:165$1079.
  creating $alu model for $macc $flatten\Inst_sha256_control.$verific$add_184$../vhdl_packages/vhdl_2008/src/numeric_std-body.vhdl:482$327.
  creating $alu model for $macc $flatten\Inst_sha256_control.$verific$add_175$sha256_control.vhd:607$321.
  creating $macc cell for $flatten\Inst_sha256_hash_core.$verific$add_43$sha256_hash_core.vhd:161$458: $auto$alumacc.cc:365:replace_macc$1154
  creating $macc cell for $flatten\Inst_sha256_msg_sch.$verific$add_69$sha256_msg_sch.vhd:166$890: $auto$alumacc.cc:365:replace_macc$1155
  creating $macc cell for $flatten\Inst_sha256_hash_core.$verific$add_49$sha256_hash_core.vhd:164$464: $auto$alumacc.cc:365:replace_macc$1156
  creating $alu cell for $flatten\Inst_sha256_control.$verific$add_175$sha256_control.vhd:607$321: $auto$alumacc.cc:485:replace_alu$1157
  creating $alu cell for $flatten\Inst_sha256_control.$verific$add_184$../vhdl_packages/vhdl_2008/src/numeric_std-body.vhdl:482$327: $auto$alumacc.cc:485:replace_alu$1160
  creating $alu cell for $flatten\Inst_sha256_regs.$verific$add_57$sha256_regs.vhd:165$1079: $auto$alumacc.cc:485:replace_alu$1163
  creating $alu cell for $flatten\Inst_sha256_hash_core.$verific$add_47$sha256_hash_core.vhd:163$462: $auto$alumacc.cc:485:replace_alu$1166
  creating $alu cell for $flatten\Inst_sha256_regs.$verific$add_55$sha256_regs.vhd:164$1077: $auto$alumacc.cc:485:replace_alu$1169
  creating $alu cell for $flatten\Inst_sha256_regs.$verific$add_53$sha256_regs.vhd:163$1075: $auto$alumacc.cc:485:replace_alu$1172
  creating $alu cell for $flatten\Inst_sha256_regs.$verific$add_51$sha256_regs.vhd:162$1073: $auto$alumacc.cc:485:replace_alu$1175
  creating $alu cell for $flatten\Inst_sha256_regs.$verific$add_49$sha256_regs.vhd:161$1071: $auto$alumacc.cc:485:replace_alu$1178
  creating $alu cell for $flatten\Inst_sha256_regs.$verific$add_47$sha256_regs.vhd:160$1069: $auto$alumacc.cc:485:replace_alu$1181
  creating $alu cell for $flatten\Inst_sha256_regs.$verific$add_43$sha256_regs.vhd:158$1065: $auto$alumacc.cc:485:replace_alu$1184
  creating $alu cell for $flatten\Inst_sha256_regs.$verific$add_45$sha256_regs.vhd:159$1067: $auto$alumacc.cc:485:replace_alu$1187
  created 11 $alu and 3 $macc cells.

yosys> opt

3.19. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module gv_sha256.

yosys> opt_merge -nomux

3.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gv_sha256'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \gv_sha256..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~29 debug messages>

yosys> opt_reduce

3.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \gv_sha256.
Performed a total of 0 changes.

yosys> opt_merge

3.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gv_sha256'.
Removed a total of 0 cells.

yosys> opt_dff

3.19.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.19.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gv_sha256..
Removed 6 unused cells and 6 unused wires.
<suppressed ~12 debug messages>

yosys> opt_expr

3.19.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module gv_sha256.

3.19.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.19.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \gv_sha256..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~29 debug messages>

yosys> opt_reduce

3.19.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \gv_sha256.
Performed a total of 0 changes.

yosys> opt_merge

3.19.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gv_sha256'.
Removed a total of 0 cells.

yosys> opt_dff

3.19.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.19.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gv_sha256..

yosys> opt_expr

3.19.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module gv_sha256.

3.19.16. Finished OPT passes. (There is nothing left to do.)

yosys> memory -nomap

3.20. Executing MEMORY pass.

yosys> opt_mem

3.20.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

yosys> opt_mem_priority

3.20.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

yosys> opt_mem_feedback

3.20.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

yosys> memory_dff

3.20.4. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

yosys> opt_clean

3.20.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gv_sha256..

yosys> memory_share

3.20.6. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

yosys> opt_mem_widen

3.20.7. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

yosys> opt_clean

3.20.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gv_sha256..

yosys> memory_collect

3.20.9. Executing MEMORY_COLLECT pass (generating $mem cells).

yosys> opt_clean

3.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gv_sha256..

yosys> stat

3.22. Printing statistics.

=== gv_sha256 ===

   Number of wires:                523
   Number of wire bits:           9992
   Number of public wires:         304
   Number of public wire bits:    6755
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                304
     $alu                           11
     $and                           24
     $bmux                          16
     $dffe                          32
     $eq                            70
     $logic_not                      1
     $macc                           3
     $mux                          107
     $ne                             1
     $not                            9
     $or                             8
     $reduce_and                     1
     $reduce_bool                    2
     $reduce_or                      1
     $sdffe                          7
     $xor                           11


yosys> techmap -map +/techmap.v -map +/rapidsilicon/genesis/arith_map.v

3.23. Executing TECHMAP pass (map to technology primitives).

3.23.1. Executing Verilog-2005 frontend: /home/users/aram/Workspace/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/aram/Workspace/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.23.2. Executing Verilog-2005 frontend: /home/users/aram/Workspace/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/arith_map.v
Parsing Verilog input from `/home/users/aram/Workspace/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_rs_alu'.
Successfully finished Verilog frontend.

3.23.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $dffe.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $reduce_bool.
Using template $paramod$be80489e44a49c29884f59fd81c31ed03229cfc1\_80_rs_alu for cells of type $alu.
Using template $paramod$103b4016182df467cceab67bcf3e18e6361ec0fd\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $bmux.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $sdffe.
Using extmapper simplemap for cells of type $xor.
Using extmapper maccmap for cells of type $macc.
  add \Inst_sha256_hash_core.reg_h (32 bits, unsigned)
  add \Inst_sha256_hash_core.SIG1 (32 bits, unsigned)
  add \Inst_sha256_hash_core.Wt_i (32 bits, unsigned)
  add \Inst_sha256_hash_core.Kt_i (32 bits, unsigned)
  add \Inst_sha256_hash_core.Ch (32 bits, unsigned)
Using template $paramod$e598a152554f0e84fd1ae44a5db9971b90dff028\_90_alu for cells of type $alu.
  add \Inst_sha256_msg_sch.r10 (32 bits, unsigned)
  add \Inst_sha256_msg_sch.r1 (32 bits, unsigned)
  add \Inst_sha256_msg_sch.s0 (32 bits, unsigned)
  add \Inst_sha256_msg_sch.s1 (32 bits, unsigned)
  add \Inst_sha256_hash_core.SIG0 (32 bits, unsigned)
  add \Inst_sha256_hash_core.sum3 (32 bits, unsigned)
  add \Inst_sha256_hash_core.Maj (32 bits, unsigned)
Using extmapper simplemap for cells of type $logic_not.
Using template $paramod\_90_fa\WIDTH=32'00000000000000000000000000100000 for cells of type $fa.
Using template $paramod$fbc7873bff55778c0b3173955b7e4bce1d9d6834\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000111 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000001000000 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000100000 for cells of type $lcu.
No more expansions possible.
<suppressed ~2119 debug messages>

yosys> stat

3.24. Printing statistics.

=== gv_sha256 ===

   Number of wires:               1923
   Number of wire bits:          27475
   Number of public wires:         304
   Number of public wire bits:    6755
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               9140
     $_AND_                       1174
     $_DFFE_PP_                   1024
     $_MUX_                       3358
     $_NOT_                        566
     $_OR_                         858
     $_SDFFE_PP0P_                  73
     $_SDFFE_PP1P_                   1
     $_XOR_                       1798
     adder_carry                   288


yosys> opt

3.25. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.25.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module gv_sha256.
<suppressed ~3487 debug messages>

yosys> opt_merge -nomux

3.25.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gv_sha256'.
<suppressed ~1611 debug messages>
Removed a total of 537 cells.

yosys> opt_muxtree

3.25.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \gv_sha256..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.25.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \gv_sha256.
Performed a total of 0 changes.

yosys> opt_merge

3.25.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gv_sha256'.
Removed a total of 0 cells.

yosys> opt_dff

3.25.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $auto$ff.cc:262:slice$1770 ($_SDFFE_PP0P_) from module gv_sha256 (D = $flatten\Inst_sha256_control.$verific$n20$163 [2], Q = \Inst_sha256_control.hash_control_st_reg [2]).
Adding EN signal on $auto$ff.cc:262:slice$1769 ($_SDFFE_PP0P_) from module gv_sha256 (D = $flatten\Inst_sha256_control.$verific$n20$163 [1], Q = \Inst_sha256_control.hash_control_st_reg [1]).

yosys> opt_clean

3.25.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gv_sha256..
Removed 589 unused cells and 1180 unused wires.
<suppressed ~590 debug messages>

yosys> opt_expr

3.25.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module gv_sha256.
<suppressed ~47 debug messages>

3.25.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.25.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \gv_sha256..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.25.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \gv_sha256.
Performed a total of 0 changes.

yosys> opt_merge

3.25.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gv_sha256'.
<suppressed ~126 debug messages>
Removed a total of 42 cells.

yosys> opt_dff

3.25.13. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $auto$ff.cc:262:slice$1783 ($_SDFFE_PP0P_) from module gv_sha256 (D = \Inst_sha256_control.hash_control_st_next [0], Q = \Inst_sha256_control.hash_control_st_reg [0]).
Adding EN signal on $auto$ff.cc:262:slice$1781 ($_SDFFE_PP0P_) from module gv_sha256 (D = $auto$simplemap.cc:309:simplemap_bmux$1510 [1], Q = \Inst_sha256_control.padding_reg).

yosys> opt_clean

3.25.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gv_sha256..
Removed 1 unused cells and 50 unused wires.
<suppressed ~3 debug messages>

yosys> opt_expr

3.25.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module gv_sha256.
<suppressed ~20 debug messages>

3.25.16. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.25.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \gv_sha256..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.25.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \gv_sha256.
Performed a total of 0 changes.

yosys> opt_merge

3.25.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gv_sha256'.
<suppressed ~45 debug messages>
Removed a total of 15 cells.

yosys> opt_dff

3.25.20. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.25.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gv_sha256..
Removed 0 unused cells and 17 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.25.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module gv_sha256.

3.25.23. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.25.24. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \gv_sha256..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.25.25. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \gv_sha256.
Performed a total of 0 changes.

yosys> opt_merge

3.25.26. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gv_sha256'.
Removed a total of 0 cells.

yosys> opt_dff

3.25.27. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.25.28. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gv_sha256..

yosys> opt_expr

3.25.29. Executing OPT_EXPR pass (perform const folding).
Optimizing module gv_sha256.

3.25.30. Finished OPT passes. (There is nothing left to do.)

yosys> opt -fast -full

3.26. Executing OPT pass (performing simple optimizations).

yosys> opt_expr -full

3.26.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module gv_sha256.
<suppressed ~1203 debug messages>

yosys> opt_merge

3.26.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gv_sha256'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

yosys> opt_dff

3.26.3. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.26.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gv_sha256..
Removed 0 unused cells and 7 unused wires.
<suppressed ~1 debug messages>

3.26.5. Finished fast OPT passes.

yosys> memory_map

3.27. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

yosys> opt -full

3.28. Executing OPT pass (performing simple optimizations).

yosys> opt_expr -full

3.28.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module gv_sha256.
<suppressed ~2 debug messages>

yosys> opt_merge -nomux

3.28.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gv_sha256'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.28.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \gv_sha256..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce -full

3.28.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \gv_sha256.
Performed a total of 0 changes.

yosys> opt_merge

3.28.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gv_sha256'.
Removed a total of 0 cells.

yosys> opt_share

3.28.6. Executing OPT_SHARE pass.
    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$1561 in front of them:
        $auto$simplemap.cc:312:simplemap_bmux$1551
        $auto$simplemap.cc:312:simplemap_bmux$1548


yosys> opt_dff

3.28.7. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.28.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gv_sha256..

yosys> opt_expr -full

3.28.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module gv_sha256.
<suppressed ~1 debug messages>

3.28.10. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.28.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \gv_sha256..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

yosys> opt_reduce -full

3.28.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \gv_sha256.
Performed a total of 0 changes.

yosys> opt_merge

3.28.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gv_sha256'.
Removed a total of 0 cells.

yosys> opt_share

3.28.14. Executing OPT_SHARE pass.

yosys> opt_dff

3.28.15. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.28.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gv_sha256..

yosys> opt_expr -full

3.28.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module gv_sha256.

3.28.18. Finished OPT passes. (There is nothing left to do.)

yosys> abc -dff

3.29. Executing ABC pass (technology mapping using ABC).

3.29.1. Summary of detected clock domains:
  366 cells in clk=\clk_i, en=$flatten\Inst_sha256_control.$verific$n107$119, arst={ }, srst=\Inst_sha256_control.oregs_ld
  4310 cells in clk=\clk_i, en=\Inst_sha256_control.core_ce, arst={ }, srst={ }
  1186 cells in clk=\clk_i, en=\Inst_sha256_control.sch_ce, arst={ }, srst={ }
  16 cells in clk=\clk_i, en=\ce_i, arst={ }, srst=\Inst_sha256_control.oregs_ld
  41 cells in clk=\clk_i, en=$flatten\Inst_sha256_control.$verific$n377$121, arst={ }, srst=$flatten\Inst_sha256_control.$verific$n368$120
  18 cells in clk=\clk_i, en=$auto$opt_dff.cc:219:make_patterns_logic$1137, arst={ }, srst=\Inst_sha256_control.oregs_ld
  753 cells in clk=\clk_i, en=\Inst_sha256_control.core_ld, arst={ }, srst={ }
  4 cells in clk=\clk_i, en=$auto$opt_dff.cc:219:make_patterns_logic$12093, arst={ }, srst=\Inst_sha256_control.oregs_ld
  41 cells in clk=\clk_i, en=$auto$opt_dff.cc:219:make_patterns_logic$12065, arst={ }, srst=$auto$opt_dff.cc:253:combine_resets$1143
  77 cells in clk=\clk_i, en=$auto$opt_dff.cc:219:make_patterns_logic$11877, arst={ }, srst=\start_i

3.29.2. Extracting gate netlist of module `\gv_sha256' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk_i, enabled by $flatten\Inst_sha256_control.$verific$n107$119, synchronously reset by \Inst_sha256_control.oregs_ld
Extracted 366 gates and 413 wires to a netlist network with 46 inputs and 41 outputs.

3.29.2.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.29.2.2. Re-integrating ABC results.
ABC RESULTS:               DFF cells:       61
ABC RESULTS:               NOT cells:        3
ABC RESULTS:             ORNOT cells:        3
ABC RESULTS:               MUX cells:       62
ABC RESULTS:            ANDNOT cells:        6
ABC RESULTS:                OR cells:        7
ABC RESULTS:               AND cells:       92
ABC RESULTS:              NAND cells:        7
ABC RESULTS:               XOR cells:       60
ABC RESULTS:              XNOR cells:        3
ABC RESULTS:               BUF cells:        1
ABC RESULTS:        internal signals:      326
ABC RESULTS:           input signals:       46
ABC RESULTS:          output signals:       41
Removing temp directory.

3.29.3. Extracting gate netlist of module `\gv_sha256' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk_i, enabled by \Inst_sha256_control.core_ce
Extracted 4022 gates and 4409 wires to a netlist network with 386 inputs and 355 outputs.

3.29.3.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.29.3.2. Re-integrating ABC results.
ABC RESULTS:               DFF cells:      256
ABC RESULTS:               NOT cells:       31
ABC RESULTS:             ORNOT cells:       62
ABC RESULTS:               XOR cells:      278
ABC RESULTS:            ANDNOT cells:       16
ABC RESULTS:                OR cells:      245
ABC RESULTS:              NAND cells:     1220
ABC RESULTS:               AND cells:      369
ABC RESULTS:              XNOR cells:      278
ABC RESULTS:               MUX cells:      296
ABC RESULTS:               BUF cells:      254
ABC RESULTS:        internal signals:     3668
ABC RESULTS:           input signals:      386
ABC RESULTS:          output signals:      355
Removing temp directory.

3.29.4. Extracting gate netlist of module `\gv_sha256' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk_i, enabled by \Inst_sha256_control.sch_ce
Extracted 1186 gates and 1222 wires to a netlist network with 36 inputs and 33 outputs.

3.29.4.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.29.4.2. Re-integrating ABC results.
ABC RESULTS:               DFF cells:      512
ABC RESULTS:            ANDNOT cells:        2
ABC RESULTS:                OR cells:       88
ABC RESULTS:               AND cells:       94
ABC RESULTS:              NAND cells:      110
ABC RESULTS:               XOR cells:      154
ABC RESULTS:              XNOR cells:      138
ABC RESULTS:               MUX cells:       65
ABC RESULTS:               BUF cells:      480
ABC RESULTS:        internal signals:     1153
ABC RESULTS:           input signals:       36
ABC RESULTS:          output signals:       33
Removing temp directory.

3.29.5. Extracting gate netlist of module `\gv_sha256' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk_i, enabled by \ce_i, synchronously reset by $abc$12121$Inst_sha256_control.oregs_ld
Extracted 16 gates and 29 wires to a netlist network with 12 inputs and 6 outputs.

3.29.5.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.29.5.2. Re-integrating ABC results.
ABC RESULTS:               DFF cells:        1
ABC RESULTS:               NOT cells:        1
ABC RESULTS:              NAND cells:        1
ABC RESULTS:            ANDNOT cells:        3
ABC RESULTS:               AND cells:        3
ABC RESULTS:               NOR cells:        1
ABC RESULTS:                OR cells:        7
ABC RESULTS:        internal signals:       11
ABC RESULTS:           input signals:       12
ABC RESULTS:          output signals:        6
Removing temp directory.

3.29.6. Extracting gate netlist of module `\gv_sha256' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk_i, enabled by $flatten\Inst_sha256_control.$verific$n377$121, synchronously reset by $flatten\Inst_sha256_control.$verific$n368$120
Extracted 41 gates and 45 wires to a netlist network with 4 inputs and 19 outputs.

3.29.6.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.29.6.2. Re-integrating ABC results.
ABC RESULTS:               DFF cells:        7
ABC RESULTS:                OR cells:        7
ABC RESULTS:               AND cells:        4
ABC RESULTS:              NAND cells:        3
ABC RESULTS:               XOR cells:        1
ABC RESULTS:             ORNOT cells:        7
ABC RESULTS:              XNOR cells:        4
ABC RESULTS:               NOT cells:        5
ABC RESULTS:        internal signals:       22
ABC RESULTS:           input signals:        4
ABC RESULTS:          output signals:       19
Removing temp directory.

3.29.7. Extracting gate netlist of module `\gv_sha256' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk_i, enabled by $auto$opt_dff.cc:219:make_patterns_logic$1137, synchronously reset by $abc$12121$Inst_sha256_control.oregs_ld
Extracted 18 gates and 25 wires to a netlist network with 6 inputs and 10 outputs.

3.29.7.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.29.7.2. Re-integrating ABC results.
ABC RESULTS:               DFF cells:        1
ABC RESULTS:               NOT cells:        3
ABC RESULTS:              NAND cells:        2
ABC RESULTS:                OR cells:        1
ABC RESULTS:               AND cells:        2
ABC RESULTS:               NOR cells:        1
ABC RESULTS:            ANDNOT cells:        6
ABC RESULTS:               ONE cells:        1
ABC RESULTS:               BUF cells:        1
ABC RESULTS:        internal signals:        9
ABC RESULTS:           input signals:        6
ABC RESULTS:          output signals:       10
Removing temp directory.

3.29.8. Extracting gate netlist of module `\gv_sha256' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk_i, enabled by \Inst_sha256_control.core_ld
Extracted 753 gates and 1239 wires to a netlist network with 485 inputs and 730 outputs.

3.29.8.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.29.8.2. Re-integrating ABC results.
ABC RESULTS:               DFF cells:      256
ABC RESULTS:              XNOR cells:        9
ABC RESULTS:               XOR cells:      224
ABC RESULTS:               BUF cells:      256
ABC RESULTS:               NOR cells:       26
ABC RESULTS:              NAND cells:       13
ABC RESULTS:            ANDNOT cells:      221
ABC RESULTS:                OR cells:      266
ABC RESULTS:               AND cells:        8
ABC RESULTS:        internal signals:       24
ABC RESULTS:           input signals:      485
ABC RESULTS:          output signals:      730
Removing temp directory.

3.29.9. Extracting gate netlist of module `\gv_sha256' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk_i, enabled by $auto$opt_dff.cc:219:make_patterns_logic$12093, synchronously reset by $abc$12121$Inst_sha256_control.oregs_ld
Extracted 4 gates and 8 wires to a netlist network with 3 inputs and 3 outputs.

3.29.9.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.29.9.2. Re-integrating ABC results.
ABC RESULTS:               DFF cells:        1
ABC RESULTS:               NOT cells:        1
ABC RESULTS:               AND cells:        2
ABC RESULTS:               ONE cells:        1
ABC RESULTS:               BUF cells:        1
ABC RESULTS:        internal signals:        2
ABC RESULTS:           input signals:        3
ABC RESULTS:          output signals:        3
Removing temp directory.

3.29.10. Extracting gate netlist of module `\gv_sha256' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk_i, enabled by $auto$opt_dff.cc:219:make_patterns_logic$12065, synchronously reset by $auto$opt_dff.cc:253:combine_resets$1143
Extracted 41 gates and 67 wires to a netlist network with 24 inputs and 23 outputs.

3.29.10.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.29.10.2. Re-integrating ABC results.
ABC RESULTS:               DFF cells:        1
ABC RESULTS:               NOT cells:        2
ABC RESULTS:               NOR cells:        1
ABC RESULTS:              XNOR cells:        1
ABC RESULTS:                OR cells:        8
ABC RESULTS:            ANDNOT cells:        3
ABC RESULTS:             ORNOT cells:        6
ABC RESULTS:               AND cells:       11
ABC RESULTS:              NAND cells:        6
ABC RESULTS:               BUF cells:        1
ABC RESULTS:        internal signals:       20
ABC RESULTS:           input signals:       24
ABC RESULTS:          output signals:       23
Removing temp directory.

3.29.11. Extracting gate netlist of module `\gv_sha256' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk_i, enabled by $auto$opt_dff.cc:219:make_patterns_logic$11877, synchronously reset by \start_i
Extracted 76 gates and 116 wires to a netlist network with 38 inputs and 26 outputs.

3.29.11.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.29.11.2. Re-integrating ABC results.
ABC RESULTS:               DFF cells:        2
ABC RESULTS:               NOT cells:        3
ABC RESULTS:               NOR cells:        2
ABC RESULTS:               MUX cells:        3
ABC RESULTS:             ORNOT cells:        3
ABC RESULTS:            ANDNOT cells:        4
ABC RESULTS:                OR cells:       16
ABC RESULTS:               AND cells:       16
ABC RESULTS:              NAND cells:       16
ABC RESULTS:               BUF cells:        2
ABC RESULTS:        internal signals:       52
ABC RESULTS:           input signals:       38
ABC RESULTS:          output signals:       26
Removing temp directory.

yosys> abc -script abc_tmp.scr

3.30. Executing ABC pass (technology mapping using ABC).

3.30.1. Extracting gate netlist of module `\gv_sha256' to `<abc-temp-dir>/input.blif'..
Extracted 4622 gates and 5654 wires to a netlist network with 1032 inputs and 933 outputs.

3.30.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + source /home/users/aram/Workspace/yosys_verific_rs/result_10-05-2022T23-40-15/Golden_synth_rs_ade.json/securehash256bits/abc_tmp.scr 
ABC:   #Luts =  1601  Max Lvl =  42  Avg Lvl =   5.66  [   0.94 sec. at Pass 0]
ABC:   #Luts =  1572  Max Lvl =  39  Avg Lvl =   4.79  [  38.21 sec. at Pass 1]
ABC:   #Luts =  1530  Max Lvl =  35  Avg Lvl =   4.25  [   5.11 sec. at Pass 2]
ABC:   #Luts =  1515  Max Lvl =  35  Avg Lvl =   4.37  [  12.46 sec. at Pass 3]
ABC:   #Luts =  1514  Max Lvl =  37  Avg Lvl =   4.42  [   5.02 sec. at Pass 4]
ABC:   #Luts =  1514  Max Lvl =  37  Avg Lvl =   4.42  [  18.74 sec. at Pass 5]
ABC:   #Luts =  1510  Max Lvl =  35  Avg Lvl =   4.52  [   6.13 sec. at Pass 6]
ABC:   #Luts =  1510  Max Lvl =  35  Avg Lvl =   4.52  [  16.32 sec. at Pass 7]
ABC:   #Luts =  1510  Max Lvl =  35  Avg Lvl =   4.52  [   5.73 sec. at Pass 8]
ABC:   #Luts =  1510  Max Lvl =  35  Avg Lvl =   4.52  [  20.26 sec. at Pass 9]
ABC: + write_blif <abc-temp-dir>/output.blif 

3.30.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:     1510
ABC RESULTS:        internal signals:     3689
ABC RESULTS:           input signals:     1032
ABC RESULTS:          output signals:      933
Removing temp directory.

yosys> opt

3.31. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.31.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module gv_sha256.

yosys> opt_merge -nomux

3.31.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gv_sha256'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

yosys> opt_muxtree

3.31.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \gv_sha256..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

yosys> opt_reduce

3.31.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \gv_sha256.
Performed a total of 0 changes.

yosys> opt_merge

3.31.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gv_sha256'.
Removed a total of 0 cells.

yosys> opt_dff

3.31.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.31.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gv_sha256..
Removed 0 unused cells and 9308 unused wires.
<suppressed ~135 debug messages>

yosys> opt_expr

3.31.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module gv_sha256.

3.31.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.31.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \gv_sha256..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

yosys> opt_reduce

3.31.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \gv_sha256.
Performed a total of 0 changes.

yosys> opt_merge

3.31.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gv_sha256'.
Removed a total of 0 cells.

yosys> opt_dff

3.31.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.31.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gv_sha256..

yosys> opt_expr

3.31.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module gv_sha256.

3.31.16. Finished OPT passes. (There is nothing left to do.)

yosys> stat

3.32. Printing statistics.

=== gv_sha256 ===

   Number of wires:               1983
   Number of wire bits:           6079
   Number of public wires:         169
   Number of public wire bits:    3698
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               2896
     $_DFFE_PP_                   1024
     $_SDFFE_PP0P_                  74
     $lut                         1509
     $mux                            1
     adder_carry                   288


yosys> shregmap -minlen 8 -maxlen 20

3.33. Executing SHREGMAP pass (map shift registers).
Converted 0 dff cells into 0 shift registers.

yosys> dfflegalize -cell $_DFF_?_ 0 -cell $_DFF_???_ 0 -cell $_DFFE_????_ 0 -cell $_DFFSR_???_ 0 -cell $_DFFSRE_????_ 0 -cell $_DLATCHSR_PPP_ 0

3.34. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

yosys> stat

3.35. Printing statistics.

=== gv_sha256 ===

   Number of wires:               2131
   Number of wire bits:           6227
   Number of public wires:         169
   Number of public wire bits:    3698
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               3044
     $_DFFE_PP0P_                 1024
     $_DFF_P_                       74
     $_MUX_                        148
     $lut                         1509
     $mux                            1
     adder_carry                   288


yosys> techmap -map +/techmap.v -map +/rapidsilicon/genesis/ffs_map.v

3.36. Executing TECHMAP pass (map to technology primitives).

3.36.1. Executing Verilog-2005 frontend: /home/users/aram/Workspace/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/aram/Workspace/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.36.2. Executing Verilog-2005 frontend: /home/users/aram/Workspace/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/ffs_map.v
Parsing Verilog input from `/home/users/aram/Workspace/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/ffs_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP0N_'.
Generating RTLIL representation for module `\$_DFFE_PN0P_'.
Generating RTLIL representation for module `\$_DFFE_PN0N_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP1N_'.
Generating RTLIL representation for module `\$_DFFE_PN1P_'.
Generating RTLIL representation for module `\$_DFFE_PN1N_'.
Generating RTLIL representation for module `\$_DFFSR_PPP_'.
Generating RTLIL representation for module `\$_DFFSR_PNP_'.
Generating RTLIL representation for module `\$_DFFSR_PNN_'.
Generating RTLIL representation for module `\$_DFFSR_PPN_'.
Generating RTLIL representation for module `\$_DFFSR_NPP_'.
Generating RTLIL representation for module `\$_DFFSR_NNP_'.
Generating RTLIL representation for module `\$_DFFSR_NNN_'.
Generating RTLIL representation for module `\$_DFFSR_NPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PNPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPNP_'.
Generating RTLIL representation for module `\$_DFFSRE_PNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PNPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PPNN_'.
Generating RTLIL representation for module `\$_DFFSRE_PNNN_'.
Generating RTLIL representation for module `\$_DLATCHSR_PPP_'.
Generating RTLIL representation for module `\$_DLATCHSR_NPP_'.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP0N_'.
Generating RTLIL representation for module `\$_DFFE_NN0P_'.
Generating RTLIL representation for module `\$_DFFE_NN0N_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_NP1N_'.
Generating RTLIL representation for module `\$_DFFE_NN1P_'.
Generating RTLIL representation for module `\$_DFFE_NN1N_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNPP_'.
Generating RTLIL representation for module `\$_DFFSRE_NPNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPN_'.
Generating RTLIL representation for module `\$_DFFSRE_NNPN_'.
Generating RTLIL representation for module `\$_DFFSRE_NPNN_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNN_'.
Generating RTLIL representation for module `\$__SHREG_DFF_P_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PN0_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NN0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFF_PN1_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_NN1_'.
Successfully finished Verilog frontend.

3.36.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $lut.
Using template \$_DFFE_PP0P_ for cells of type $_DFFE_PP0P_.
Using template \$_DFF_P_ for cells of type $_DFF_P_.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $logic_not.
No more expansions possible.
<suppressed ~3768 debug messages>

yosys> opt_expr -mux_undef

3.37. Executing OPT_EXPR pass (perform const folding).
Optimizing module gv_sha256.
<suppressed ~15387 debug messages>

yosys> simplemap

3.38. Executing SIMPLEMAP pass (map simple cells to gate primitives).

yosys> opt_expr

3.39. Executing OPT_EXPR pass (perform const folding).
Optimizing module gv_sha256.

yosys> opt_merge

3.40. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gv_sha256'.
<suppressed ~18405 debug messages>
Removed a total of 6135 cells.

yosys> opt_dff -nodffe -nosdff

3.41. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.42. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gv_sha256..
Removed 0 unused cells and 9103 unused wires.
<suppressed ~1 debug messages>

yosys> opt -nodffe -nosdff

3.43. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.43.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module gv_sha256.
<suppressed ~170 debug messages>

yosys> opt_merge -nomux

3.43.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gv_sha256'.
<suppressed ~9 debug messages>
Removed a total of 3 cells.

yosys> opt_muxtree

3.43.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \gv_sha256..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.43.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \gv_sha256.
Performed a total of 0 changes.

yosys> opt_merge

3.43.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gv_sha256'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.43.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.43.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gv_sha256..
Removed 0 unused cells and 9 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.43.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module gv_sha256.

3.43.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.43.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \gv_sha256..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.43.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \gv_sha256.
Performed a total of 0 changes.

yosys> opt_merge

3.43.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gv_sha256'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.43.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.43.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gv_sha256..

yosys> opt_expr

3.43.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module gv_sha256.

3.43.16. Finished OPT passes. (There is nothing left to do.)

yosys> abc -script abc_tmp.scr

3.44. Executing ABC pass (technology mapping using ABC).

3.44.1. Extracting gate netlist of module `\gv_sha256' to `<abc-temp-dir>/input.blif'..
Extracted 6399 gates and 7432 wires to a netlist network with 1031 inputs and 924 outputs.

3.44.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + source /home/users/aram/Workspace/yosys_verific_rs/result_10-05-2022T23-40-15/Golden_synth_rs_ade.json/securehash256bits/abc_tmp.scr 
ABC:   #Luts =  1536  Max Lvl =  35  Avg Lvl =   4.58  [   0.81 sec. at Pass 0]
ABC:   #Luts =  1536  Max Lvl =  35  Avg Lvl =   4.58  [  34.15 sec. at Pass 1]
ABC:   #Luts =  1525  Max Lvl =  34  Avg Lvl =   4.58  [   3.79 sec. at Pass 2]
ABC:   #Luts =  1524  Max Lvl =  34  Avg Lvl =   4.39  [  13.06 sec. at Pass 3]
ABC:   #Luts =  1515  Max Lvl =  31  Avg Lvl =   4.27  [   7.15 sec. at Pass 4]
ABC:   #Luts =  1515  Max Lvl =  31  Avg Lvl =   4.27  [  23.59 sec. at Pass 5]
ABC:   #Luts =  1513  Max Lvl =  34  Avg Lvl =   4.68  [   5.09 sec. at Pass 6]
ABC:   #Luts =  1513  Max Lvl =  33  Avg Lvl =   4.31  [  22.06 sec. at Pass 7]
ABC:   #Luts =  1512  Max Lvl =  31  Avg Lvl =   4.22  [   5.76 sec. at Pass 8]
ABC:   #Luts =  1509  Max Lvl =  30  Avg Lvl =   4.47  [  20.98 sec. at Pass 9]
ABC:   #Luts =  1507  Max Lvl =  30  Avg Lvl =   4.43  [   6.09 sec. at Pass 10]
ABC:   #Luts =  1507  Max Lvl =  30  Avg Lvl =   4.43  [  19.68 sec. at Pass 11]
ABC:   #Luts =  1507  Max Lvl =  30  Avg Lvl =   4.43  [   5.97 sec. at Pass 12]
ABC:   #Luts =  1507  Max Lvl =  29  Avg Lvl =   4.29  [  19.87 sec. at Pass 13]
ABC:   #Luts =  1505  Max Lvl =  31  Avg Lvl =   4.34  [   7.07 sec. at Pass 14]
ABC:   #Luts =  1503  Max Lvl =  31  Avg Lvl =   4.44  [  18.05 sec. at Pass 15]
ABC:   #Luts =  1503  Max Lvl =  31  Avg Lvl =   4.44  [   5.64 sec. at Pass 16]
ABC:   #Luts =  1503  Max Lvl =  31  Avg Lvl =   4.44  [  20.03 sec. at Pass 17]
ABC:   #Luts =  1503  Max Lvl =  31  Avg Lvl =   4.44  [   5.88 sec. at Pass 18]
ABC: + write_blif <abc-temp-dir>/output.blif 

3.44.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:     1503
ABC RESULTS:        internal signals:     5477
ABC RESULTS:           input signals:     1031
ABC RESULTS:          output signals:      924
Removing temp directory.

yosys> opt

3.45. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.45.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module gv_sha256.

yosys> opt_merge -nomux

3.45.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gv_sha256'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.45.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \gv_sha256..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.45.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \gv_sha256.
Performed a total of 0 changes.

yosys> opt_merge

3.45.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gv_sha256'.
Removed a total of 0 cells.

yosys> opt_dff

3.45.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.45.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gv_sha256..
Removed 0 unused cells and 5139 unused wires.
<suppressed ~6 debug messages>

yosys> opt_expr

3.45.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module gv_sha256.

3.45.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.45.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \gv_sha256..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.45.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \gv_sha256.
Performed a total of 0 changes.

yosys> opt_merge

3.45.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gv_sha256'.
Removed a total of 0 cells.

yosys> opt_dff

3.45.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.45.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gv_sha256..

yosys> opt_expr

3.45.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module gv_sha256.

3.45.16. Finished OPT passes. (There is nothing left to do.)

yosys> hierarchy -check

3.46. Executing HIERARCHY pass (managing design hierarchy).

3.46.1. Analyzing design hierarchy..
Top module:  \gv_sha256

3.46.2. Analyzing design hierarchy..
Top module:  \gv_sha256
Removed 0 unused modules.

yosys> stat

3.47. Printing statistics.

=== gv_sha256 ===

   Number of wires:               1972
   Number of wire bits:           6068
   Number of public wires:         164
   Number of public wire bits:    3693
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               2889
     $lut                         1503
     adder_carry                   288
     dffsre                       1098


yosys> opt_clean -purge

3.48. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gv_sha256..
Removed 0 unused cells and 123 unused wires.
<suppressed ~123 debug messages>

yosys> write_verilog -noattr -nohex synthesized.v

3.49. Executing Verilog backend.

yosys> bmuxmap

3.49.1. Executing BMUXMAP pass.

yosys> demuxmap

3.49.2. Executing DEMUXMAP pass.

yosys> clean_zerowidth
Dumping module `\gv_sha256'.

End of script. Logfile hash: 6a995f4fcb, CPU: user 33.92s system 0.46s, MEM: 85.86 MB peak
Yosys 0.16+65 (git sha1 051517d61, gcc 9.1.0 -fPIC -Os)
Time spent: 98% 3x abc (2471 sec), 0% 37x opt_expr (10 sec), ...
real 443.68
user 2341.07
sys 163.30
