
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys-Verific 0.0.20
 Yosys 0.16+65 (git sha1 91803ad5c, gcc 9.1.0 -fPIC -Os)


-- Executing script file `yosys.ys' --
echo on

yosys> plugin -i synth-rs

yosys> read -verific

yosys> read -incdir .

yosys> verific -vlog-incdir .

1. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Mar22_SW_Release, released at Fri Apr  1 00:31:54 2022.

yosys> verilog_defaults -add -I.

yosys> read -vhdl aes_package.vhd key_expander.vhd aes128_fast.vhd

yosys> verific -vhdl aes_package.vhd key_expander.vhd aes128_fast.vhd

2. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Mar22_SW_Release, released at Fri Apr  1 00:31:54 2022.
VERIFIC-INFO [VHDL-1504] default VHDL library search path is now "/home/users/aram/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008"
VERIFIC-COMMENT [VHDL-1481] Analyzing VHDL file 'aes_package.vhd'
VERIFIC-COMMENT [VHDL-1493] Restoring VHDL unit 'ieee.std_logic_1164' from file '/home/users/aram/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008/ieee/std_logic_1164.vdb'
VERIFIC-COMMENT [VHDL-1493] Restoring VHDL unit 'std.standard' from file '/home/users/aram/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008/std/standard.vdb'
VERIFIC-COMMENT [VHDL-1493] Restoring VHDL unit 'std.textio' from file '/home/users/aram/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008/std/textio.vdb'
VERIFIC-COMMENT [VHDL-1493] Restoring VHDL unit 'ieee.std_logic_unsigned' from file '/home/users/aram/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008/ieee/std_logic_unsigned.vdb'
VERIFIC-COMMENT [VHDL-1493] Restoring VHDL unit 'ieee.std_logic_arith' from file '/home/users/aram/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008/ieee/std_logic_arith.vdb'
VERIFIC-INFO [VHDL-1014] aes_package.vhd:53: analyzing package 'aes_package'
VERIFIC-INFO [VHDL-1013] aes_package.vhd:80: analyzing package body 'aes_package'
VERIFIC-COMMENT [VHDL-1481] Analyzing VHDL file 'key_expander.vhd'
VERIFIC-INFO [VHDL-1012] key_expander.vhd:55: analyzing entity 'key_expander'
VERIFIC-INFO [VHDL-1010] key_expander.vhd:72: analyzing architecture 'expansion'
VERIFIC-COMMENT [VHDL-1481] Analyzing VHDL file 'aes128_fast.vhd'
VERIFIC-INFO [VHDL-1012] aes128_fast.vhd:54: analyzing entity 'aes128_fast'
VERIFIC-INFO [VHDL-1010] aes128_fast.vhd:69: analyzing architecture 'mapping'

yosys> synth_rs -top aes128_fast -tech genesis -goal area -de -no_dsp -no_bram -verilog synthesized.v

3. Executing synth_rs pass: v0.4.44

yosys> read_verilog -lib -specify -nomem2reg +/rapidsilicon/common/cells_sim.v +/rapidsilicon/genesis/cells_sim.v

3.1. Executing Verilog-2005 frontend: /home/users/aram/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v
Parsing Verilog input from `/home/users/aram/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\inv'.
Generating RTLIL representation for module `\buff'.
Generating RTLIL representation for module `\logic_0'.
Generating RTLIL representation for module `\logic_1'.
Generating RTLIL representation for module `\gclkbuff'.
Successfully finished Verilog frontend.

3.2. Executing Verilog-2005 frontend: /home/users/aram/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/cells_sim.v
Parsing Verilog input from `/home/users/aram/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\dffsre'.
Generating RTLIL representation for module `\dffnsre'.
Generating RTLIL representation for module `\latchsre'.
Generating RTLIL representation for module `\latchnsre'.
Generating RTLIL representation for module `\io_scff'.
Generating RTLIL representation for module `\scff'.
Generating RTLIL representation for module `\sh_dff'.
Generating RTLIL representation for module `\adder_carry'.
Generating RTLIL representation for module `\sdffr'.
Generating RTLIL representation for module `\sdffs'.
Generating RTLIL representation for module `\TDP_BRAM18'.
Generating RTLIL representation for module `\TDP36K'.
Generating RTLIL representation for module `\RS_DSP1'.
Generating RTLIL representation for module `\RS_DSP2'.
Generating RTLIL representation for module `\dsp_t1_sim'.
Generating RTLIL representation for module `\dsp_t1_20x18x64'.
Generating RTLIL representation for module `\dsp_t1_10x9x32'.
Successfully finished Verilog frontend.

yosys> hierarchy -check -top aes128_fast

3.3. Executing HIERARCHY pass (managing design hierarchy).
VERIFIC-INFO [VHDL-1067] aes128_fast.vhd:54: processing 'aes128_fast(mapping)'
VERIFIC-INFO [VHDL-1172] aes_package.vhd:344: 'others' clause is never selected
VERIFIC-INFO [VHDL-1172] aes_package.vhd:344: 'others' clause is never selected
VERIFIC-INFO [VHDL-1172] aes_package.vhd:344: 'others' clause is never selected
VERIFIC-INFO [VHDL-1172] aes_package.vhd:344: 'others' clause is never selected
VERIFIC-INFO [VHDL-1172] aes_package.vhd:344: 'others' clause is never selected
VERIFIC-INFO [VHDL-1172] aes_package.vhd:344: 'others' clause is never selected
VERIFIC-INFO [VHDL-1172] aes_package.vhd:344: 'others' clause is never selected
VERIFIC-INFO [VHDL-1172] aes_package.vhd:344: 'others' clause is never selected
VERIFIC-INFO [VHDL-1172] aes_package.vhd:344: 'others' clause is never selected
VERIFIC-INFO [VHDL-1172] aes_package.vhd:344: 'others' clause is never selected
VERIFIC-INFO [VHDL-1172] aes_package.vhd:344: 'others' clause is never selected
VERIFIC-INFO [VHDL-1172] aes_package.vhd:344: 'others' clause is never selected
VERIFIC-INFO [VHDL-1172] aes_package.vhd:344: 'others' clause is never selected
VERIFIC-INFO [VHDL-1172] aes_package.vhd:344: 'others' clause is never selected
VERIFIC-INFO [VHDL-1172] aes_package.vhd:344: 'others' clause is never selected
VERIFIC-INFO [VHDL-1172] aes_package.vhd:344: 'others' clause is never selected
VERIFIC-INFO [VHDL-1172] aes_package.vhd:612: 'others' clause is never selected
VERIFIC-INFO [VHDL-1172] aes_package.vhd:612: 'others' clause is never selected
VERIFIC-INFO [VHDL-1172] aes_package.vhd:612: 'others' clause is never selected
VERIFIC-INFO [VHDL-1172] aes_package.vhd:612: 'others' clause is never selected
VERIFIC-INFO [VHDL-1172] aes_package.vhd:612: 'others' clause is never selected
VERIFIC-INFO [VHDL-1172] aes_package.vhd:612: 'others' clause is never selected
VERIFIC-INFO [VHDL-1172] aes_package.vhd:612: 'others' clause is never selected
VERIFIC-INFO [VHDL-1172] aes_package.vhd:612: 'others' clause is never selected
VERIFIC-INFO [VHDL-1172] aes_package.vhd:612: 'others' clause is never selected
VERIFIC-INFO [VHDL-1172] aes_package.vhd:612: 'others' clause is never selected
VERIFIC-INFO [VHDL-1172] aes_package.vhd:612: 'others' clause is never selected
VERIFIC-INFO [VHDL-1172] aes_package.vhd:612: 'others' clause is never selected
VERIFIC-INFO [VHDL-1172] aes_package.vhd:612: 'others' clause is never selected
VERIFIC-INFO [VHDL-1172] aes_package.vhd:612: 'others' clause is never selected
VERIFIC-INFO [VHDL-1172] aes_package.vhd:612: 'others' clause is never selected
VERIFIC-INFO [VHDL-1172] aes_package.vhd:612: 'others' clause is never selected
VERIFIC-INFO [VHDL-1067] key_expander.vhd:55: processing 'key_expander(expansion)'
VERIFIC-INFO [VHDL-1172] aes_package.vhd:344: 'others' clause is never selected
VERIFIC-INFO [VHDL-1172] aes_package.vhd:344: 'others' clause is never selected
VERIFIC-INFO [VHDL-1172] aes_package.vhd:344: 'others' clause is never selected
VERIFIC-INFO [VHDL-1172] aes_package.vhd:344: 'others' clause is never selected
VERIFIC-INFO [VHDL-1172] aes_package.vhd:344: 'others' clause is never selected
VERIFIC-INFO [VHDL-1172] aes_package.vhd:344: 'others' clause is never selected
VERIFIC-INFO [VHDL-1172] aes_package.vhd:344: 'others' clause is never selected
VERIFIC-INFO [VHDL-1172] aes_package.vhd:344: 'others' clause is never selected
Importing module aes128_fast.
Importing module key_expander(expansion).

3.3.1. Analyzing design hierarchy..
Top module:  \aes128_fast
Used module:     \key_expander(expansion)

3.3.2. Analyzing design hierarchy..
Top module:  \aes128_fast
Used module:     \key_expander(expansion)
Removed 0 unused modules.

yosys> proc

3.4. Executing PROC pass (convert processes to netlists).

yosys> proc_clean

3.4.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> proc_rmdead

3.4.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

yosys> proc_prune

3.4.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

yosys> proc_init

3.4.4. Executing PROC_INIT pass (extract init attributes).

yosys> proc_arst

3.4.5. Executing PROC_ARST pass (detect async resets in processes).

yosys> proc_mux

3.4.6. Executing PROC_MUX pass (convert decision trees to multiplexers).

yosys> proc_dlatch

3.4.7. Executing PROC_DLATCH pass (convert process syncs to latches).

yosys> proc_dff

3.4.8. Executing PROC_DFF pass (convert process syncs to FFs).

yosys> proc_memwr

3.4.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

yosys> proc_clean

3.4.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> opt_expr -keepdc

3.4.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_expander(expansion).
<suppressed ~3 debug messages>
Optimizing module aes128_fast.
<suppressed ~4 debug messages>

yosys> flatten

3.5. Executing FLATTEN pass (flatten design).
Deleting now unused module key_expander(expansion).
<suppressed ~1 debug messages>

yosys> tribuf -logic

3.6. Executing TRIBUF pass.

yosys> deminout

3.7. Executing DEMINOUT pass (demote inout ports to input or output).

yosys> opt_expr

3.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes128_fast.

yosys> opt_clean

3.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes128_fast..
Removed 0 unused cells and 3164 unused wires.
<suppressed ~1306 debug messages>

yosys> check

3.10. Executing CHECK pass (checking for obvious problems).
Checking module aes128_fast...
Warning: found logic loop in module aes128_fast:
    cell $flatten\expand_key.$verific$mux_165$key_expander.vhd:118$6752 ($mux)
    cell $flatten\expand_key.$verific$mux_166$key_expander.vhd:118$6753 ($mux)
    cell $flatten\expand_key.$verific$mux_167$key_expander.vhd:118$6754 ($mux)
    cell $flatten\expand_key.$verific$mux_168$key_expander.vhd:118$6755 ($mux)
    cell $flatten\expand_key.$verific$mux_169$key_expander.vhd:118$6756 ($mux)
    cell $flatten\expand_key.$verific$mux_170$key_expander.vhd:118$6757 ($mux)
    cell $flatten\expand_key.$verific$mux_171$key_expander.vhd:118$6758 ($mux)
    cell $flatten\expand_key.$verific$mux_172$key_expander.vhd:118$6759 ($mux)
    cell $flatten\expand_key.$verific$mux_173$key_expander.vhd:118$6760 ($mux)
    cell $flatten\expand_key.$verific$mux_174$key_expander.vhd:118$6761 ($mux)
    cell $flatten\expand_key.$verific$mux_175$key_expander.vhd:118$6762 ($mux)
    cell $flatten\expand_key.$verific$mux_176$key_expander.vhd:118$6763 ($mux)
    cell $flatten\expand_key.$verific$mux_177$key_expander.vhd:118$6764 ($mux)
    cell $flatten\expand_key.$verific$mux_178$key_expander.vhd:118$6765 ($mux)
    cell $flatten\expand_key.$verific$mux_179$key_expander.vhd:118$6766 ($mux)
    cell $flatten\expand_key.$verific$mux_180$key_expander.vhd:118$6767 ($mux)
    cell $flatten\expand_key.$verific$mux_181$key_expander.vhd:118$6768 ($mux)
    cell $flatten\expand_key.$verific$mux_182$key_expander.vhd:118$6769 ($mux)
    cell $flatten\expand_key.$verific$mux_183$key_expander.vhd:118$6770 ($mux)
    cell $flatten\expand_key.$verific$mux_184$key_expander.vhd:118$6771 ($mux)
    cell $flatten\expand_key.$verific$mux_185$key_expander.vhd:118$6772 ($mux)
    cell $flatten\expand_key.$verific$mux_186$key_expander.vhd:118$6773 ($mux)
    cell $flatten\expand_key.$verific$mux_187$key_expander.vhd:118$6774 ($mux)
    cell $flatten\expand_key.$verific$mux_188$key_expander.vhd:118$6775 ($mux)
    cell $flatten\expand_key.$verific$mux_189$key_expander.vhd:118$6776 ($mux)
    cell $flatten\expand_key.$verific$mux_190$key_expander.vhd:118$6777 ($mux)
    cell $flatten\expand_key.$verific$mux_191$key_expander.vhd:118$6778 ($mux)
    cell $flatten\expand_key.$verific$mux_192$key_expander.vhd:118$6779 ($mux)
    cell $flatten\expand_key.$verific$mux_417$aes_package.vhd:345$6738 ($bmux)
    cell $flatten\expand_key.$verific$mux_420$aes_package.vhd:345$6741 ($bmux)
    cell $flatten\expand_key.$verific$mux_423$aes_package.vhd:345$6744 ($bmux)
    cell $flatten\expand_key.$verific$mux_426$aes_package.vhd:345$6747 ($bmux)
    cell $flatten\expand_key.$verific$xor_368$key_expander.vhd:109$6721 ($xor)
    cell $flatten\expand_key.$verific$xor_370$key_expander.vhd:109$6722 ($xor)
    cell $flatten\expand_key.$verific$xor_372$key_expander.vhd:109$6723 ($xor)
    cell $flatten\expand_key.$verific$xor_374$key_expander.vhd:109$6724 ($xor)
    cell $flatten\expand_key.$verific$xor_376$key_expander.vhd:108$6713 ($xor)
    cell $flatten\expand_key.$verific$xor_378$key_expander.vhd:108$6714 ($xor)
    cell $flatten\expand_key.$verific$xor_380$key_expander.vhd:108$6715 ($xor)
    cell $flatten\expand_key.$verific$xor_382$key_expander.vhd:108$6716 ($xor)
    cell $flatten\expand_key.$verific$xor_384$key_expander.vhd:107$6705 ($xor)
    cell $flatten\expand_key.$verific$xor_386$key_expander.vhd:107$6706 ($xor)
    cell $flatten\expand_key.$verific$xor_388$key_expander.vhd:107$6707 ($xor)
    cell $flatten\expand_key.$verific$xor_390$key_expander.vhd:107$6708 ($xor)
    cell $flatten\expand_key.$verific$xor_434$key_expander.vhd:110$6700 ($xor)
    cell $flatten\expand_key.$verific$xor_435$key_expander.vhd:110$6729 ($xor)
    cell $flatten\expand_key.$verific$xor_436$key_expander.vhd:110$6730 ($xor)
    cell $flatten\expand_key.$verific$xor_437$key_expander.vhd:110$6731 ($xor)
    cell $flatten\expand_key.$verific$xor_438$key_expander.vhd:117$6732 ($xor)
    wire $flatten\expand_key.$verific$n100$6535 [0]
    wire $flatten\expand_key.$verific$n126$6537 [0]
    wire $flatten\expand_key.$verific$n153$6539 [0]
    wire $flatten\expand_key.$verific$n225$6543 [0]
    wire $flatten\expand_key.$verific$n234$6544 [0]
    wire $flatten\expand_key.$verific$n243$6545 [0]
    wire $flatten\expand_key.$verific$n252$6546 [0]
    wire $flatten\expand_key.$verific$n2570$6694 [0]
    wire $flatten\expand_key.$verific$n2573$6695 [0]
    wire $flatten\expand_key.$verific$n261$6547 [0]
    wire $flatten\expand_key.$verific$n270$6548 [0]
    wire $flatten\expand_key.$verific$n279$6549 [0]
    wire $flatten\expand_key.$verific$n288$6550 [0]
    wire $flatten\expand_key.$verific$n333$6555 [0]
    wire $flatten\expand_key.$verific$n342$6556 [0]
    wire $flatten\expand_key.$verific$n351$6557 [0]
    wire $flatten\expand_key.$verific$n360$6558 [0]
    wire $flatten\expand_key.$verific$n405$6563 [0]
    wire $flatten\expand_key.$verific$n414$6564 [0]
    wire $flatten\expand_key.$verific$n423$6565 [0]
    wire $flatten\expand_key.$verific$n432$6566 [0]
    wire \expand_key.X0[0] [0]
    wire \expand_key.X0[1] [0]
    wire \expand_key.X0[2] [0]
    wire \expand_key.X0[3] [0]
    wire \expand_key.X1[0] [0]
    wire \expand_key.X1[1] [0]
    wire \expand_key.X1[2] [0]
    wire \expand_key.X1[3] [0]
    wire \expand_key.X2[0] [0]
    wire \expand_key.X2[1] [0]
    wire \expand_key.X2[2] [0]
    wire \expand_key.X2[3] [0]
    wire \expand_key.X3[0] [0]
    wire \expand_key.X3[1] [0]
    wire \expand_key.X3[2] [0]
    wire \expand_key.X3[3] [0]
    wire \expand_key.k_rot[0] [0]
    wire \expand_key.k_rot[1] [0]
    wire \expand_key.k_rot[2] [0]
    wire \expand_key.k_rot[3] [0]
    wire \expand_key.key_sub[0] [0]
    wire \expand_key.key_sub[1] [0]
    wire \expand_key.key_sub[2] [0]
    wire \expand_key.key_sub[3] [0]
    wire \expand_key.key_xor_rcon[0] [0]
    wire \expand_key.key_xor_rcon[1] [0]
    wire \expand_key.key_xor_rcon[2] [0]
    wire \expand_key.key_xor_rcon[3] [0]
Warning: found logic loop in module aes128_fast:
    cell $flatten\expand_key.$verific$mux_165$key_expander.vhd:118$6752 ($mux)
    cell $flatten\expand_key.$verific$mux_166$key_expander.vhd:118$6753 ($mux)
    cell $flatten\expand_key.$verific$mux_167$key_expander.vhd:118$6754 ($mux)
    cell $flatten\expand_key.$verific$mux_168$key_expander.vhd:118$6755 ($mux)
    cell $flatten\expand_key.$verific$mux_169$key_expander.vhd:118$6756 ($mux)
    cell $flatten\expand_key.$verific$mux_170$key_expander.vhd:118$6757 ($mux)
    cell $flatten\expand_key.$verific$mux_171$key_expander.vhd:118$6758 ($mux)
    cell $flatten\expand_key.$verific$mux_172$key_expander.vhd:118$6759 ($mux)
    cell $flatten\expand_key.$verific$mux_173$key_expander.vhd:118$6760 ($mux)
    cell $flatten\expand_key.$verific$mux_174$key_expander.vhd:118$6761 ($mux)
    cell $flatten\expand_key.$verific$mux_175$key_expander.vhd:118$6762 ($mux)
    cell $flatten\expand_key.$verific$mux_176$key_expander.vhd:118$6763 ($mux)
    cell $flatten\expand_key.$verific$mux_177$key_expander.vhd:118$6764 ($mux)
    cell $flatten\expand_key.$verific$mux_178$key_expander.vhd:118$6765 ($mux)
    cell $flatten\expand_key.$verific$mux_179$key_expander.vhd:118$6766 ($mux)
    cell $flatten\expand_key.$verific$mux_180$key_expander.vhd:118$6767 ($mux)
    cell $flatten\expand_key.$verific$mux_181$key_expander.vhd:118$6768 ($mux)
    cell $flatten\expand_key.$verific$mux_182$key_expander.vhd:118$6769 ($mux)
    cell $flatten\expand_key.$verific$mux_183$key_expander.vhd:118$6770 ($mux)
    cell $flatten\expand_key.$verific$mux_184$key_expander.vhd:118$6771 ($mux)
    cell $flatten\expand_key.$verific$mux_185$key_expander.vhd:118$6772 ($mux)
    cell $flatten\expand_key.$verific$mux_186$key_expander.vhd:118$6773 ($mux)
    cell $flatten\expand_key.$verific$mux_187$key_expander.vhd:118$6774 ($mux)
    cell $flatten\expand_key.$verific$mux_188$key_expander.vhd:118$6775 ($mux)
    cell $flatten\expand_key.$verific$mux_189$key_expander.vhd:118$6776 ($mux)
    cell $flatten\expand_key.$verific$mux_190$key_expander.vhd:118$6777 ($mux)
    cell $flatten\expand_key.$verific$mux_191$key_expander.vhd:118$6778 ($mux)
    cell $flatten\expand_key.$verific$mux_192$key_expander.vhd:118$6779 ($mux)
    cell $flatten\expand_key.$verific$mux_417$aes_package.vhd:345$6738 ($bmux)
    cell $flatten\expand_key.$verific$mux_420$aes_package.vhd:345$6741 ($bmux)
    cell $flatten\expand_key.$verific$mux_423$aes_package.vhd:345$6744 ($bmux)
    cell $flatten\expand_key.$verific$mux_426$aes_package.vhd:345$6747 ($bmux)
    cell $flatten\expand_key.$verific$xor_368$key_expander.vhd:109$6721 ($xor)
    cell $flatten\expand_key.$verific$xor_370$key_expander.vhd:109$6722 ($xor)
    cell $flatten\expand_key.$verific$xor_372$key_expander.vhd:109$6723 ($xor)
    cell $flatten\expand_key.$verific$xor_374$key_expander.vhd:109$6724 ($xor)
    cell $flatten\expand_key.$verific$xor_376$key_expander.vhd:108$6713 ($xor)
    cell $flatten\expand_key.$verific$xor_378$key_expander.vhd:108$6714 ($xor)
    cell $flatten\expand_key.$verific$xor_380$key_expander.vhd:108$6715 ($xor)
    cell $flatten\expand_key.$verific$xor_382$key_expander.vhd:108$6716 ($xor)
    cell $flatten\expand_key.$verific$xor_384$key_expander.vhd:107$6705 ($xor)
    cell $flatten\expand_key.$verific$xor_386$key_expander.vhd:107$6706 ($xor)
    cell $flatten\expand_key.$verific$xor_388$key_expander.vhd:107$6707 ($xor)
    cell $flatten\expand_key.$verific$xor_390$key_expander.vhd:107$6708 ($xor)
    cell $flatten\expand_key.$verific$xor_434$key_expander.vhd:110$6700 ($xor)
    cell $flatten\expand_key.$verific$xor_435$key_expander.vhd:110$6729 ($xor)
    cell $flatten\expand_key.$verific$xor_436$key_expander.vhd:110$6730 ($xor)
    cell $flatten\expand_key.$verific$xor_437$key_expander.vhd:110$6731 ($xor)
    cell $flatten\expand_key.$verific$xor_438$key_expander.vhd:117$6732 ($xor)
    wire $flatten\expand_key.$verific$n100$6535 [0]
    wire $flatten\expand_key.$verific$n126$6537 [0]
    wire $flatten\expand_key.$verific$n153$6539 [0]
    wire $flatten\expand_key.$verific$n225$6543 [0]
    wire $flatten\expand_key.$verific$n234$6544 [0]
    wire $flatten\expand_key.$verific$n243$6545 [0]
    wire $flatten\expand_key.$verific$n252$6546 [0]
    wire $flatten\expand_key.$verific$n2570$6694 [0]
    wire $flatten\expand_key.$verific$n2573$6695 [0]
    wire $flatten\expand_key.$verific$n261$6547 [0]
    wire $flatten\expand_key.$verific$n270$6548 [0]
    wire $flatten\expand_key.$verific$n279$6549 [0]
    wire $flatten\expand_key.$verific$n288$6550 [0]
    wire $flatten\expand_key.$verific$n333$6555 [0]
    wire $flatten\expand_key.$verific$n342$6556 [0]
    wire $flatten\expand_key.$verific$n351$6557 [0]
    wire $flatten\expand_key.$verific$n360$6558 [0]
    wire $flatten\expand_key.$verific$n405$6563 [0]
    wire $flatten\expand_key.$verific$n414$6564 [0]
    wire $flatten\expand_key.$verific$n423$6565 [0]
    wire $flatten\expand_key.$verific$n432$6566 [0]
    wire \expand_key.X0[0] [0]
    wire \expand_key.X0[1] [0]
    wire \expand_key.X0[2] [0]
    wire \expand_key.X0[3] [0]
    wire \expand_key.X1[0] [0]
    wire \expand_key.X1[1] [0]
    wire \expand_key.X1[2] [0]
    wire \expand_key.X1[3] [0]
    wire \expand_key.X2[0] [0]
    wire \expand_key.X2[1] [0]
    wire \expand_key.X2[2] [0]
    wire \expand_key.X2[3] [0]
    wire \expand_key.X3[0] [0]
    wire \expand_key.X3[1] [0]
    wire \expand_key.X3[2] [0]
    wire \expand_key.X3[3] [0]
    wire \expand_key.k_rot[0] [1]
    wire \expand_key.k_rot[1] [0]
    wire \expand_key.k_rot[2] [0]
    wire \expand_key.k_rot[3] [0]
    wire \expand_key.key_sub[0] [0]
    wire \expand_key.key_sub[1] [0]
    wire \expand_key.key_sub[2] [0]
    wire \expand_key.key_sub[3] [0]
    wire \expand_key.key_xor_rcon[0] [0]
    wire \expand_key.key_xor_rcon[1] [0]
    wire \expand_key.key_xor_rcon[2] [0]
    wire \expand_key.key_xor_rcon[3] [0]
Warning: found logic loop in module aes128_fast:
    cell $flatten\expand_key.$verific$mux_165$key_expander.vhd:118$6752 ($mux)
    cell $flatten\expand_key.$verific$mux_166$key_expander.vhd:118$6753 ($mux)
    cell $flatten\expand_key.$verific$mux_167$key_expander.vhd:118$6754 ($mux)
    cell $flatten\expand_key.$verific$mux_168$key_expander.vhd:118$6755 ($mux)
    cell $flatten\expand_key.$verific$mux_169$key_expander.vhd:118$6756 ($mux)
    cell $flatten\expand_key.$verific$mux_170$key_expander.vhd:118$6757 ($mux)
    cell $flatten\expand_key.$verific$mux_171$key_expander.vhd:118$6758 ($mux)
    cell $flatten\expand_key.$verific$mux_172$key_expander.vhd:118$6759 ($mux)
    cell $flatten\expand_key.$verific$mux_173$key_expander.vhd:118$6760 ($mux)
    cell $flatten\expand_key.$verific$mux_174$key_expander.vhd:118$6761 ($mux)
    cell $flatten\expand_key.$verific$mux_175$key_expander.vhd:118$6762 ($mux)
    cell $flatten\expand_key.$verific$mux_176$key_expander.vhd:118$6763 ($mux)
    cell $flatten\expand_key.$verific$mux_177$key_expander.vhd:118$6764 ($mux)
    cell $flatten\expand_key.$verific$mux_178$key_expander.vhd:118$6765 ($mux)
    cell $flatten\expand_key.$verific$mux_179$key_expander.vhd:118$6766 ($mux)
    cell $flatten\expand_key.$verific$mux_180$key_expander.vhd:118$6767 ($mux)
    cell $flatten\expand_key.$verific$mux_181$key_expander.vhd:118$6768 ($mux)
    cell $flatten\expand_key.$verific$mux_182$key_expander.vhd:118$6769 ($mux)
    cell $flatten\expand_key.$verific$mux_183$key_expander.vhd:118$6770 ($mux)
    cell $flatten\expand_key.$verific$mux_184$key_expander.vhd:118$6771 ($mux)
    cell $flatten\expand_key.$verific$mux_185$key_expander.vhd:118$6772 ($mux)
    cell $flatten\expand_key.$verific$mux_186$key_expander.vhd:118$6773 ($mux)
    cell $flatten\expand_key.$verific$mux_187$key_expander.vhd:118$6774 ($mux)
    cell $flatten\expand_key.$verific$mux_188$key_expander.vhd:118$6775 ($mux)
    cell $flatten\expand_key.$verific$mux_189$key_expander.vhd:118$6776 ($mux)
    cell $flatten\expand_key.$verific$mux_190$key_expander.vhd:118$6777 ($mux)
    cell $flatten\expand_key.$verific$mux_191$key_expander.vhd:118$6778 ($mux)
    cell $flatten\expand_key.$verific$mux_192$key_expander.vhd:118$6779 ($mux)
    cell $flatten\expand_key.$verific$mux_417$aes_package.vhd:345$6738 ($bmux)
    cell $flatten\expand_key.$verific$mux_420$aes_package.vhd:345$6741 ($bmux)
    cell $flatten\expand_key.$verific$mux_423$aes_package.vhd:345$6744 ($bmux)
    cell $flatten\expand_key.$verific$mux_426$aes_package.vhd:345$6747 ($bmux)
    cell $flatten\expand_key.$verific$xor_368$key_expander.vhd:109$6721 ($xor)
    cell $flatten\expand_key.$verific$xor_370$key_expander.vhd:109$6722 ($xor)
    cell $flatten\expand_key.$verific$xor_372$key_expander.vhd:109$6723 ($xor)
    cell $flatten\expand_key.$verific$xor_374$key_expander.vhd:109$6724 ($xor)
    cell $flatten\expand_key.$verific$xor_376$key_expander.vhd:108$6713 ($xor)
    cell $flatten\expand_key.$verific$xor_378$key_expander.vhd:108$6714 ($xor)
    cell $flatten\expand_key.$verific$xor_380$key_expander.vhd:108$6715 ($xor)
    cell $flatten\expand_key.$verific$xor_382$key_expander.vhd:108$6716 ($xor)
    cell $flatten\expand_key.$verific$xor_384$key_expander.vhd:107$6705 ($xor)
    cell $flatten\expand_key.$verific$xor_386$key_expander.vhd:107$6706 ($xor)
    cell $flatten\expand_key.$verific$xor_388$key_expander.vhd:107$6707 ($xor)
    cell $flatten\expand_key.$verific$xor_390$key_expander.vhd:107$6708 ($xor)
    cell $flatten\expand_key.$verific$xor_434$key_expander.vhd:110$6700 ($xor)
    cell $flatten\expand_key.$verific$xor_435$key_expander.vhd:110$6729 ($xor)
    cell $flatten\expand_key.$verific$xor_436$key_expander.vhd:110$6730 ($xor)
    cell $flatten\expand_key.$verific$xor_437$key_expander.vhd:110$6731 ($xor)
    cell $flatten\expand_key.$verific$xor_438$key_expander.vhd:117$6732 ($xor)
    wire $flatten\expand_key.$verific$n100$6535 [0]
    wire $flatten\expand_key.$verific$n126$6537 [0]
    wire $flatten\expand_key.$verific$n153$6539 [0]
    wire $flatten\expand_key.$verific$n225$6543 [0]
    wire $flatten\expand_key.$verific$n234$6544 [0]
    wire $flatten\expand_key.$verific$n243$6545 [0]
    wire $flatten\expand_key.$verific$n252$6546 [0]
    wire $flatten\expand_key.$verific$n2570$6694 [0]
    wire $flatten\expand_key.$verific$n2573$6695 [0]
    wire $flatten\expand_key.$verific$n261$6547 [0]
    wire $flatten\expand_key.$verific$n270$6548 [0]
    wire $flatten\expand_key.$verific$n279$6549 [0]
    wire $flatten\expand_key.$verific$n288$6550 [0]
    wire $flatten\expand_key.$verific$n333$6555 [0]
    wire $flatten\expand_key.$verific$n342$6556 [0]
    wire $flatten\expand_key.$verific$n351$6557 [0]
    wire $flatten\expand_key.$verific$n360$6558 [0]
    wire $flatten\expand_key.$verific$n405$6563 [0]
    wire $flatten\expand_key.$verific$n414$6564 [0]
    wire $flatten\expand_key.$verific$n423$6565 [0]
    wire $flatten\expand_key.$verific$n432$6566 [0]
    wire \expand_key.X0[0] [0]
    wire \expand_key.X0[1] [0]
    wire \expand_key.X0[2] [0]
    wire \expand_key.X0[3] [0]
    wire \expand_key.X1[0] [0]
    wire \expand_key.X1[1] [0]
    wire \expand_key.X1[2] [0]
    wire \expand_key.X1[3] [0]
    wire \expand_key.X2[0] [0]
    wire \expand_key.X2[1] [0]
    wire \expand_key.X2[2] [0]
    wire \expand_key.X2[3] [0]
    wire \expand_key.X3[0] [0]
    wire \expand_key.X3[1] [0]
    wire \expand_key.X3[2] [0]
    wire \expand_key.X3[3] [0]
    wire \expand_key.k_rot[0] [2]
    wire \expand_key.k_rot[1] [0]
    wire \expand_key.k_rot[2] [0]
    wire \expand_key.k_rot[3] [0]
    wire \expand_key.key_sub[0] [0]
    wire \expand_key.key_sub[1] [0]
    wire \expand_key.key_sub[2] [0]
    wire \expand_key.key_sub[3] [0]
    wire \expand_key.key_xor_rcon[0] [0]
    wire \expand_key.key_xor_rcon[1] [0]
    wire \expand_key.key_xor_rcon[2] [0]
    wire \expand_key.key_xor_rcon[3] [0]
Warning: found logic loop in module aes128_fast:
    cell $flatten\expand_key.$verific$mux_165$key_expander.vhd:118$6752 ($mux)
    cell $flatten\expand_key.$verific$mux_166$key_expander.vhd:118$6753 ($mux)
    cell $flatten\expand_key.$verific$mux_167$key_expander.vhd:118$6754 ($mux)
    cell $flatten\expand_key.$verific$mux_168$key_expander.vhd:118$6755 ($mux)
    cell $flatten\expand_key.$verific$mux_169$key_expander.vhd:118$6756 ($mux)
    cell $flatten\expand_key.$verific$mux_170$key_expander.vhd:118$6757 ($mux)
    cell $flatten\expand_key.$verific$mux_171$key_expander.vhd:118$6758 ($mux)
    cell $flatten\expand_key.$verific$mux_172$key_expander.vhd:118$6759 ($mux)
    cell $flatten\expand_key.$verific$mux_173$key_expander.vhd:118$6760 ($mux)
    cell $flatten\expand_key.$verific$mux_174$key_expander.vhd:118$6761 ($mux)
    cell $flatten\expand_key.$verific$mux_175$key_expander.vhd:118$6762 ($mux)
    cell $flatten\expand_key.$verific$mux_176$key_expander.vhd:118$6763 ($mux)
    cell $flatten\expand_key.$verific$mux_177$key_expander.vhd:118$6764 ($mux)
    cell $flatten\expand_key.$verific$mux_178$key_expander.vhd:118$6765 ($mux)
    cell $flatten\expand_key.$verific$mux_179$key_expander.vhd:118$6766 ($mux)
    cell $flatten\expand_key.$verific$mux_180$key_expander.vhd:118$6767 ($mux)
    cell $flatten\expand_key.$verific$mux_181$key_expander.vhd:118$6768 ($mux)
    cell $flatten\expand_key.$verific$mux_182$key_expander.vhd:118$6769 ($mux)
    cell $flatten\expand_key.$verific$mux_183$key_expander.vhd:118$6770 ($mux)
    cell $flatten\expand_key.$verific$mux_184$key_expander.vhd:118$6771 ($mux)
    cell $flatten\expand_key.$verific$mux_185$key_expander.vhd:118$6772 ($mux)
    cell $flatten\expand_key.$verific$mux_186$key_expander.vhd:118$6773 ($mux)
    cell $flatten\expand_key.$verific$mux_187$key_expander.vhd:118$6774 ($mux)
    cell $flatten\expand_key.$verific$mux_188$key_expander.vhd:118$6775 ($mux)
    cell $flatten\expand_key.$verific$mux_189$key_expander.vhd:118$6776 ($mux)
    cell $flatten\expand_key.$verific$mux_190$key_expander.vhd:118$6777 ($mux)
    cell $flatten\expand_key.$verific$mux_191$key_expander.vhd:118$6778 ($mux)
    cell $flatten\expand_key.$verific$mux_192$key_expander.vhd:118$6779 ($mux)
    cell $flatten\expand_key.$verific$mux_417$aes_package.vhd:345$6738 ($bmux)
    cell $flatten\expand_key.$verific$mux_420$aes_package.vhd:345$6741 ($bmux)
    cell $flatten\expand_key.$verific$mux_423$aes_package.vhd:345$6744 ($bmux)
    cell $flatten\expand_key.$verific$mux_426$aes_package.vhd:345$6747 ($bmux)
    cell $flatten\expand_key.$verific$xor_368$key_expander.vhd:109$6721 ($xor)
    cell $flatten\expand_key.$verific$xor_370$key_expander.vhd:109$6722 ($xor)
    cell $flatten\expand_key.$verific$xor_372$key_expander.vhd:109$6723 ($xor)
    cell $flatten\expand_key.$verific$xor_374$key_expander.vhd:109$6724 ($xor)
    cell $flatten\expand_key.$verific$xor_376$key_expander.vhd:108$6713 ($xor)
    cell $flatten\expand_key.$verific$xor_378$key_expander.vhd:108$6714 ($xor)
    cell $flatten\expand_key.$verific$xor_380$key_expander.vhd:108$6715 ($xor)
    cell $flatten\expand_key.$verific$xor_382$key_expander.vhd:108$6716 ($xor)
    cell $flatten\expand_key.$verific$xor_384$key_expander.vhd:107$6705 ($xor)
    cell $flatten\expand_key.$verific$xor_386$key_expander.vhd:107$6706 ($xor)
    cell $flatten\expand_key.$verific$xor_388$key_expander.vhd:107$6707 ($xor)
    cell $flatten\expand_key.$verific$xor_390$key_expander.vhd:107$6708 ($xor)
    cell $flatten\expand_key.$verific$xor_434$key_expander.vhd:110$6700 ($xor)
    cell $flatten\expand_key.$verific$xor_435$key_expander.vhd:110$6729 ($xor)
    cell $flatten\expand_key.$verific$xor_436$key_expander.vhd:110$6730 ($xor)
    cell $flatten\expand_key.$verific$xor_437$key_expander.vhd:110$6731 ($xor)
    cell $flatten\expand_key.$verific$xor_438$key_expander.vhd:117$6732 ($xor)
    wire $flatten\expand_key.$verific$n100$6535 [0]
    wire $flatten\expand_key.$verific$n126$6537 [0]
    wire $flatten\expand_key.$verific$n153$6539 [0]
    wire $flatten\expand_key.$verific$n225$6543 [0]
    wire $flatten\expand_key.$verific$n234$6544 [0]
    wire $flatten\expand_key.$verific$n243$6545 [0]
    wire $flatten\expand_key.$verific$n252$6546 [0]
    wire $flatten\expand_key.$verific$n2570$6694 [0]
    wire $flatten\expand_key.$verific$n2573$6695 [0]
    wire $flatten\expand_key.$verific$n261$6547 [0]
    wire $flatten\expand_key.$verific$n270$6548 [0]
    wire $flatten\expand_key.$verific$n279$6549 [0]
    wire $flatten\expand_key.$verific$n288$6550 [0]
    wire $flatten\expand_key.$verific$n333$6555 [0]
    wire $flatten\expand_key.$verific$n342$6556 [0]
    wire $flatten\expand_key.$verific$n351$6557 [0]
    wire $flatten\expand_key.$verific$n360$6558 [0]
    wire $flatten\expand_key.$verific$n405$6563 [0]
    wire $flatten\expand_key.$verific$n414$6564 [0]
    wire $flatten\expand_key.$verific$n423$6565 [0]
    wire $flatten\expand_key.$verific$n432$6566 [0]
    wire \expand_key.X0[0] [0]
    wire \expand_key.X0[1] [0]
    wire \expand_key.X0[2] [0]
    wire \expand_key.X0[3] [0]
    wire \expand_key.X1[0] [0]
    wire \expand_key.X1[1] [0]
    wire \expand_key.X1[2] [0]
    wire \expand_key.X1[3] [0]
    wire \expand_key.X2[0] [0]
    wire \expand_key.X2[1] [0]
    wire \expand_key.X2[2] [0]
    wire \expand_key.X2[3] [0]
    wire \expand_key.X3[0] [0]
    wire \expand_key.X3[1] [0]
    wire \expand_key.X3[2] [0]
    wire \expand_key.X3[3] [0]
    wire \expand_key.k_rot[0] [3]
    wire \expand_key.k_rot[1] [0]
    wire \expand_key.k_rot[2] [0]
    wire \expand_key.k_rot[3] [0]
    wire \expand_key.key_sub[0] [0]
    wire \expand_key.key_sub[1] [0]
    wire \expand_key.key_sub[2] [0]
    wire \expand_key.key_sub[3] [0]
    wire \expand_key.key_xor_rcon[0] [0]
    wire \expand_key.key_xor_rcon[1] [0]
    wire \expand_key.key_xor_rcon[2] [0]
    wire \expand_key.key_xor_rcon[3] [0]
Warning: found logic loop in module aes128_fast:
    cell $flatten\expand_key.$verific$mux_165$key_expander.vhd:118$6752 ($mux)
    cell $flatten\expand_key.$verific$mux_166$key_expander.vhd:118$6753 ($mux)
    cell $flatten\expand_key.$verific$mux_167$key_expander.vhd:118$6754 ($mux)
    cell $flatten\expand_key.$verific$mux_168$key_expander.vhd:118$6755 ($mux)
    cell $flatten\expand_key.$verific$mux_169$key_expander.vhd:118$6756 ($mux)
    cell $flatten\expand_key.$verific$mux_170$key_expander.vhd:118$6757 ($mux)
    cell $flatten\expand_key.$verific$mux_171$key_expander.vhd:118$6758 ($mux)
    cell $flatten\expand_key.$verific$mux_172$key_expander.vhd:118$6759 ($mux)
    cell $flatten\expand_key.$verific$mux_173$key_expander.vhd:118$6760 ($mux)
    cell $flatten\expand_key.$verific$mux_174$key_expander.vhd:118$6761 ($mux)
    cell $flatten\expand_key.$verific$mux_175$key_expander.vhd:118$6762 ($mux)
    cell $flatten\expand_key.$verific$mux_176$key_expander.vhd:118$6763 ($mux)
    cell $flatten\expand_key.$verific$mux_177$key_expander.vhd:118$6764 ($mux)
    cell $flatten\expand_key.$verific$mux_178$key_expander.vhd:118$6765 ($mux)
    cell $flatten\expand_key.$verific$mux_179$key_expander.vhd:118$6766 ($mux)
    cell $flatten\expand_key.$verific$mux_180$key_expander.vhd:118$6767 ($mux)
    cell $flatten\expand_key.$verific$mux_181$key_expander.vhd:118$6768 ($mux)
    cell $flatten\expand_key.$verific$mux_182$key_expander.vhd:118$6769 ($mux)
    cell $flatten\expand_key.$verific$mux_183$key_expander.vhd:118$6770 ($mux)
    cell $flatten\expand_key.$verific$mux_184$key_expander.vhd:118$6771 ($mux)
    cell $flatten\expand_key.$verific$mux_185$key_expander.vhd:118$6772 ($mux)
    cell $flatten\expand_key.$verific$mux_186$key_expander.vhd:118$6773 ($mux)
    cell $flatten\expand_key.$verific$mux_187$key_expander.vhd:118$6774 ($mux)
    cell $flatten\expand_key.$verific$mux_188$key_expander.vhd:118$6775 ($mux)
    cell $flatten\expand_key.$verific$mux_189$key_expander.vhd:118$6776 ($mux)
    cell $flatten\expand_key.$verific$mux_190$key_expander.vhd:118$6777 ($mux)
    cell $flatten\expand_key.$verific$mux_191$key_expander.vhd:118$6778 ($mux)
    cell $flatten\expand_key.$verific$mux_192$key_expander.vhd:118$6779 ($mux)
    cell $flatten\expand_key.$verific$mux_417$aes_package.vhd:345$6738 ($bmux)
    cell $flatten\expand_key.$verific$mux_420$aes_package.vhd:345$6741 ($bmux)
    cell $flatten\expand_key.$verific$mux_423$aes_package.vhd:345$6744 ($bmux)
    cell $flatten\expand_key.$verific$mux_426$aes_package.vhd:345$6747 ($bmux)
    cell $flatten\expand_key.$verific$xor_368$key_expander.vhd:109$6721 ($xor)
    cell $flatten\expand_key.$verific$xor_370$key_expander.vhd:109$6722 ($xor)
    cell $flatten\expand_key.$verific$xor_372$key_expander.vhd:109$6723 ($xor)
    cell $flatten\expand_key.$verific$xor_374$key_expander.vhd:109$6724 ($xor)
    cell $flatten\expand_key.$verific$xor_376$key_expander.vhd:108$6713 ($xor)
    cell $flatten\expand_key.$verific$xor_378$key_expander.vhd:108$6714 ($xor)
    cell $flatten\expand_key.$verific$xor_380$key_expander.vhd:108$6715 ($xor)
    cell $flatten\expand_key.$verific$xor_382$key_expander.vhd:108$6716 ($xor)
    cell $flatten\expand_key.$verific$xor_384$key_expander.vhd:107$6705 ($xor)
    cell $flatten\expand_key.$verific$xor_386$key_expander.vhd:107$6706 ($xor)
    cell $flatten\expand_key.$verific$xor_388$key_expander.vhd:107$6707 ($xor)
    cell $flatten\expand_key.$verific$xor_390$key_expander.vhd:107$6708 ($xor)
    cell $flatten\expand_key.$verific$xor_434$key_expander.vhd:110$6700 ($xor)
    cell $flatten\expand_key.$verific$xor_435$key_expander.vhd:110$6729 ($xor)
    cell $flatten\expand_key.$verific$xor_436$key_expander.vhd:110$6730 ($xor)
    cell $flatten\expand_key.$verific$xor_437$key_expander.vhd:110$6731 ($xor)
    cell $flatten\expand_key.$verific$xor_438$key_expander.vhd:117$6732 ($xor)
    wire $flatten\expand_key.$verific$n100$6535 [0]
    wire $flatten\expand_key.$verific$n126$6537 [0]
    wire $flatten\expand_key.$verific$n153$6539 [0]
    wire $flatten\expand_key.$verific$n225$6543 [0]
    wire $flatten\expand_key.$verific$n234$6544 [0]
    wire $flatten\expand_key.$verific$n243$6545 [0]
    wire $flatten\expand_key.$verific$n252$6546 [0]
    wire $flatten\expand_key.$verific$n2570$6694 [0]
    wire $flatten\expand_key.$verific$n2573$6695 [0]
    wire $flatten\expand_key.$verific$n261$6547 [0]
    wire $flatten\expand_key.$verific$n270$6548 [0]
    wire $flatten\expand_key.$verific$n279$6549 [0]
    wire $flatten\expand_key.$verific$n288$6550 [0]
    wire $flatten\expand_key.$verific$n333$6555 [0]
    wire $flatten\expand_key.$verific$n342$6556 [0]
    wire $flatten\expand_key.$verific$n351$6557 [0]
    wire $flatten\expand_key.$verific$n360$6558 [0]
    wire $flatten\expand_key.$verific$n405$6563 [0]
    wire $flatten\expand_key.$verific$n414$6564 [0]
    wire $flatten\expand_key.$verific$n423$6565 [0]
    wire $flatten\expand_key.$verific$n432$6566 [0]
    wire \expand_key.X0[0] [0]
    wire \expand_key.X0[1] [0]
    wire \expand_key.X0[2] [0]
    wire \expand_key.X0[3] [0]
    wire \expand_key.X1[0] [0]
    wire \expand_key.X1[1] [0]
    wire \expand_key.X1[2] [0]
    wire \expand_key.X1[3] [0]
    wire \expand_key.X2[0] [0]
    wire \expand_key.X2[1] [0]
    wire \expand_key.X2[2] [0]
    wire \expand_key.X2[3] [0]
    wire \expand_key.X3[0] [0]
    wire \expand_key.X3[1] [0]
    wire \expand_key.X3[2] [0]
    wire \expand_key.X3[3] [0]
    wire \expand_key.k_rot[0] [4]
    wire \expand_key.k_rot[1] [0]
    wire \expand_key.k_rot[2] [0]
    wire \expand_key.k_rot[3] [0]
    wire \expand_key.key_sub[0] [0]
    wire \expand_key.key_sub[1] [0]
    wire \expand_key.key_sub[2] [0]
    wire \expand_key.key_sub[3] [0]
    wire \expand_key.key_xor_rcon[0] [0]
    wire \expand_key.key_xor_rcon[1] [0]
    wire \expand_key.key_xor_rcon[2] [0]
    wire \expand_key.key_xor_rcon[3] [0]
Warning: found logic loop in module aes128_fast:
    cell $flatten\expand_key.$verific$mux_165$key_expander.vhd:118$6752 ($mux)
    cell $flatten\expand_key.$verific$mux_166$key_expander.vhd:118$6753 ($mux)
    cell $flatten\expand_key.$verific$mux_167$key_expander.vhd:118$6754 ($mux)
    cell $flatten\expand_key.$verific$mux_168$key_expander.vhd:118$6755 ($mux)
    cell $flatten\expand_key.$verific$mux_169$key_expander.vhd:118$6756 ($mux)
    cell $flatten\expand_key.$verific$mux_170$key_expander.vhd:118$6757 ($mux)
    cell $flatten\expand_key.$verific$mux_171$key_expander.vhd:118$6758 ($mux)
    cell $flatten\expand_key.$verific$mux_172$key_expander.vhd:118$6759 ($mux)
    cell $flatten\expand_key.$verific$mux_173$key_expander.vhd:118$6760 ($mux)
    cell $flatten\expand_key.$verific$mux_174$key_expander.vhd:118$6761 ($mux)
    cell $flatten\expand_key.$verific$mux_175$key_expander.vhd:118$6762 ($mux)
    cell $flatten\expand_key.$verific$mux_176$key_expander.vhd:118$6763 ($mux)
    cell $flatten\expand_key.$verific$mux_177$key_expander.vhd:118$6764 ($mux)
    cell $flatten\expand_key.$verific$mux_178$key_expander.vhd:118$6765 ($mux)
    cell $flatten\expand_key.$verific$mux_179$key_expander.vhd:118$6766 ($mux)
    cell $flatten\expand_key.$verific$mux_180$key_expander.vhd:118$6767 ($mux)
    cell $flatten\expand_key.$verific$mux_181$key_expander.vhd:118$6768 ($mux)
    cell $flatten\expand_key.$verific$mux_182$key_expander.vhd:118$6769 ($mux)
    cell $flatten\expand_key.$verific$mux_183$key_expander.vhd:118$6770 ($mux)
    cell $flatten\expand_key.$verific$mux_184$key_expander.vhd:118$6771 ($mux)
    cell $flatten\expand_key.$verific$mux_185$key_expander.vhd:118$6772 ($mux)
    cell $flatten\expand_key.$verific$mux_186$key_expander.vhd:118$6773 ($mux)
    cell $flatten\expand_key.$verific$mux_187$key_expander.vhd:118$6774 ($mux)
    cell $flatten\expand_key.$verific$mux_188$key_expander.vhd:118$6775 ($mux)
    cell $flatten\expand_key.$verific$mux_189$key_expander.vhd:118$6776 ($mux)
    cell $flatten\expand_key.$verific$mux_190$key_expander.vhd:118$6777 ($mux)
    cell $flatten\expand_key.$verific$mux_191$key_expander.vhd:118$6778 ($mux)
    cell $flatten\expand_key.$verific$mux_192$key_expander.vhd:118$6779 ($mux)
    cell $flatten\expand_key.$verific$mux_417$aes_package.vhd:345$6738 ($bmux)
    cell $flatten\expand_key.$verific$mux_420$aes_package.vhd:345$6741 ($bmux)
    cell $flatten\expand_key.$verific$mux_423$aes_package.vhd:345$6744 ($bmux)
    cell $flatten\expand_key.$verific$mux_426$aes_package.vhd:345$6747 ($bmux)
    cell $flatten\expand_key.$verific$xor_368$key_expander.vhd:109$6721 ($xor)
    cell $flatten\expand_key.$verific$xor_370$key_expander.vhd:109$6722 ($xor)
    cell $flatten\expand_key.$verific$xor_372$key_expander.vhd:109$6723 ($xor)
    cell $flatten\expand_key.$verific$xor_374$key_expander.vhd:109$6724 ($xor)
    cell $flatten\expand_key.$verific$xor_376$key_expander.vhd:108$6713 ($xor)
    cell $flatten\expand_key.$verific$xor_378$key_expander.vhd:108$6714 ($xor)
    cell $flatten\expand_key.$verific$xor_380$key_expander.vhd:108$6715 ($xor)
    cell $flatten\expand_key.$verific$xor_382$key_expander.vhd:108$6716 ($xor)
    cell $flatten\expand_key.$verific$xor_384$key_expander.vhd:107$6705 ($xor)
    cell $flatten\expand_key.$verific$xor_386$key_expander.vhd:107$6706 ($xor)
    cell $flatten\expand_key.$verific$xor_388$key_expander.vhd:107$6707 ($xor)
    cell $flatten\expand_key.$verific$xor_390$key_expander.vhd:107$6708 ($xor)
    cell $flatten\expand_key.$verific$xor_434$key_expander.vhd:110$6700 ($xor)
    cell $flatten\expand_key.$verific$xor_435$key_expander.vhd:110$6729 ($xor)
    cell $flatten\expand_key.$verific$xor_436$key_expander.vhd:110$6730 ($xor)
    cell $flatten\expand_key.$verific$xor_437$key_expander.vhd:110$6731 ($xor)
    cell $flatten\expand_key.$verific$xor_438$key_expander.vhd:117$6732 ($xor)
    wire $flatten\expand_key.$verific$n100$6535 [0]
    wire $flatten\expand_key.$verific$n126$6537 [0]
    wire $flatten\expand_key.$verific$n153$6539 [0]
    wire $flatten\expand_key.$verific$n225$6543 [0]
    wire $flatten\expand_key.$verific$n234$6544 [0]
    wire $flatten\expand_key.$verific$n243$6545 [0]
    wire $flatten\expand_key.$verific$n252$6546 [0]
    wire $flatten\expand_key.$verific$n2570$6694 [0]
    wire $flatten\expand_key.$verific$n2573$6695 [0]
    wire $flatten\expand_key.$verific$n261$6547 [0]
    wire $flatten\expand_key.$verific$n270$6548 [0]
    wire $flatten\expand_key.$verific$n279$6549 [0]
    wire $flatten\expand_key.$verific$n288$6550 [0]
    wire $flatten\expand_key.$verific$n333$6555 [0]
    wire $flatten\expand_key.$verific$n342$6556 [0]
    wire $flatten\expand_key.$verific$n351$6557 [0]
    wire $flatten\expand_key.$verific$n360$6558 [0]
    wire $flatten\expand_key.$verific$n405$6563 [0]
    wire $flatten\expand_key.$verific$n414$6564 [0]
    wire $flatten\expand_key.$verific$n423$6565 [0]
    wire $flatten\expand_key.$verific$n432$6566 [0]
    wire \expand_key.X0[0] [0]
    wire \expand_key.X0[1] [0]
    wire \expand_key.X0[2] [0]
    wire \expand_key.X0[3] [0]
    wire \expand_key.X1[0] [0]
    wire \expand_key.X1[1] [0]
    wire \expand_key.X1[2] [0]
    wire \expand_key.X1[3] [0]
    wire \expand_key.X2[0] [0]
    wire \expand_key.X2[1] [0]
    wire \expand_key.X2[2] [0]
    wire \expand_key.X2[3] [0]
    wire \expand_key.X3[0] [0]
    wire \expand_key.X3[1] [0]
    wire \expand_key.X3[2] [0]
    wire \expand_key.X3[3] [0]
    wire \expand_key.k_rot[0] [5]
    wire \expand_key.k_rot[1] [0]
    wire \expand_key.k_rot[2] [0]
    wire \expand_key.k_rot[3] [0]
    wire \expand_key.key_sub[0] [0]
    wire \expand_key.key_sub[1] [0]
    wire \expand_key.key_sub[2] [0]
    wire \expand_key.key_sub[3] [0]
    wire \expand_key.key_xor_rcon[0] [0]
    wire \expand_key.key_xor_rcon[1] [0]
    wire \expand_key.key_xor_rcon[2] [0]
    wire \expand_key.key_xor_rcon[3] [0]
Warning: found logic loop in module aes128_fast:
    cell $flatten\expand_key.$verific$mux_165$key_expander.vhd:118$6752 ($mux)
    cell $flatten\expand_key.$verific$mux_166$key_expander.vhd:118$6753 ($mux)
    cell $flatten\expand_key.$verific$mux_167$key_expander.vhd:118$6754 ($mux)
    cell $flatten\expand_key.$verific$mux_168$key_expander.vhd:118$6755 ($mux)
    cell $flatten\expand_key.$verific$mux_169$key_expander.vhd:118$6756 ($mux)
    cell $flatten\expand_key.$verific$mux_170$key_expander.vhd:118$6757 ($mux)
    cell $flatten\expand_key.$verific$mux_171$key_expander.vhd:118$6758 ($mux)
    cell $flatten\expand_key.$verific$mux_172$key_expander.vhd:118$6759 ($mux)
    cell $flatten\expand_key.$verific$mux_173$key_expander.vhd:118$6760 ($mux)
    cell $flatten\expand_key.$verific$mux_174$key_expander.vhd:118$6761 ($mux)
    cell $flatten\expand_key.$verific$mux_175$key_expander.vhd:118$6762 ($mux)
    cell $flatten\expand_key.$verific$mux_176$key_expander.vhd:118$6763 ($mux)
    cell $flatten\expand_key.$verific$mux_177$key_expander.vhd:118$6764 ($mux)
    cell $flatten\expand_key.$verific$mux_178$key_expander.vhd:118$6765 ($mux)
    cell $flatten\expand_key.$verific$mux_179$key_expander.vhd:118$6766 ($mux)
    cell $flatten\expand_key.$verific$mux_180$key_expander.vhd:118$6767 ($mux)
    cell $flatten\expand_key.$verific$mux_181$key_expander.vhd:118$6768 ($mux)
    cell $flatten\expand_key.$verific$mux_182$key_expander.vhd:118$6769 ($mux)
    cell $flatten\expand_key.$verific$mux_183$key_expander.vhd:118$6770 ($mux)
    cell $flatten\expand_key.$verific$mux_184$key_expander.vhd:118$6771 ($mux)
    cell $flatten\expand_key.$verific$mux_185$key_expander.vhd:118$6772 ($mux)
    cell $flatten\expand_key.$verific$mux_186$key_expander.vhd:118$6773 ($mux)
    cell $flatten\expand_key.$verific$mux_187$key_expander.vhd:118$6774 ($mux)
    cell $flatten\expand_key.$verific$mux_188$key_expander.vhd:118$6775 ($mux)
    cell $flatten\expand_key.$verific$mux_189$key_expander.vhd:118$6776 ($mux)
    cell $flatten\expand_key.$verific$mux_190$key_expander.vhd:118$6777 ($mux)
    cell $flatten\expand_key.$verific$mux_191$key_expander.vhd:118$6778 ($mux)
    cell $flatten\expand_key.$verific$mux_192$key_expander.vhd:118$6779 ($mux)
    cell $flatten\expand_key.$verific$mux_417$aes_package.vhd:345$6738 ($bmux)
    cell $flatten\expand_key.$verific$mux_420$aes_package.vhd:345$6741 ($bmux)
    cell $flatten\expand_key.$verific$mux_423$aes_package.vhd:345$6744 ($bmux)
    cell $flatten\expand_key.$verific$mux_426$aes_package.vhd:345$6747 ($bmux)
    cell $flatten\expand_key.$verific$xor_368$key_expander.vhd:109$6721 ($xor)
    cell $flatten\expand_key.$verific$xor_370$key_expander.vhd:109$6722 ($xor)
    cell $flatten\expand_key.$verific$xor_372$key_expander.vhd:109$6723 ($xor)
    cell $flatten\expand_key.$verific$xor_374$key_expander.vhd:109$6724 ($xor)
    cell $flatten\expand_key.$verific$xor_376$key_expander.vhd:108$6713 ($xor)
    cell $flatten\expand_key.$verific$xor_378$key_expander.vhd:108$6714 ($xor)
    cell $flatten\expand_key.$verific$xor_380$key_expander.vhd:108$6715 ($xor)
    cell $flatten\expand_key.$verific$xor_382$key_expander.vhd:108$6716 ($xor)
    cell $flatten\expand_key.$verific$xor_384$key_expander.vhd:107$6705 ($xor)
    cell $flatten\expand_key.$verific$xor_386$key_expander.vhd:107$6706 ($xor)
    cell $flatten\expand_key.$verific$xor_388$key_expander.vhd:107$6707 ($xor)
    cell $flatten\expand_key.$verific$xor_390$key_expander.vhd:107$6708 ($xor)
    cell $flatten\expand_key.$verific$xor_434$key_expander.vhd:110$6700 ($xor)
    cell $flatten\expand_key.$verific$xor_435$key_expander.vhd:110$6729 ($xor)
    cell $flatten\expand_key.$verific$xor_436$key_expander.vhd:110$6730 ($xor)
    cell $flatten\expand_key.$verific$xor_437$key_expander.vhd:110$6731 ($xor)
    cell $flatten\expand_key.$verific$xor_438$key_expander.vhd:117$6732 ($xor)
    wire $flatten\expand_key.$verific$n100$6535 [0]
    wire $flatten\expand_key.$verific$n126$6537 [0]
    wire $flatten\expand_key.$verific$n153$6539 [0]
    wire $flatten\expand_key.$verific$n225$6543 [0]
    wire $flatten\expand_key.$verific$n234$6544 [0]
    wire $flatten\expand_key.$verific$n243$6545 [0]
    wire $flatten\expand_key.$verific$n252$6546 [0]
    wire $flatten\expand_key.$verific$n2570$6694 [0]
    wire $flatten\expand_key.$verific$n2573$6695 [0]
    wire $flatten\expand_key.$verific$n261$6547 [0]
    wire $flatten\expand_key.$verific$n270$6548 [0]
    wire $flatten\expand_key.$verific$n279$6549 [0]
    wire $flatten\expand_key.$verific$n288$6550 [0]
    wire $flatten\expand_key.$verific$n333$6555 [0]
    wire $flatten\expand_key.$verific$n342$6556 [0]
    wire $flatten\expand_key.$verific$n351$6557 [0]
    wire $flatten\expand_key.$verific$n360$6558 [0]
    wire $flatten\expand_key.$verific$n405$6563 [0]
    wire $flatten\expand_key.$verific$n414$6564 [0]
    wire $flatten\expand_key.$verific$n423$6565 [0]
    wire $flatten\expand_key.$verific$n432$6566 [0]
    wire \expand_key.X0[0] [0]
    wire \expand_key.X0[1] [0]
    wire \expand_key.X0[2] [0]
    wire \expand_key.X0[3] [0]
    wire \expand_key.X1[0] [0]
    wire \expand_key.X1[1] [0]
    wire \expand_key.X1[2] [0]
    wire \expand_key.X1[3] [0]
    wire \expand_key.X2[0] [0]
    wire \expand_key.X2[1] [0]
    wire \expand_key.X2[2] [0]
    wire \expand_key.X2[3] [0]
    wire \expand_key.X3[0] [0]
    wire \expand_key.X3[1] [0]
    wire \expand_key.X3[2] [0]
    wire \expand_key.X3[3] [0]
    wire \expand_key.k_rot[0] [6]
    wire \expand_key.k_rot[1] [0]
    wire \expand_key.k_rot[2] [0]
    wire \expand_key.k_rot[3] [0]
    wire \expand_key.key_sub[0] [0]
    wire \expand_key.key_sub[1] [0]
    wire \expand_key.key_sub[2] [0]
    wire \expand_key.key_sub[3] [0]
    wire \expand_key.key_xor_rcon[0] [0]
    wire \expand_key.key_xor_rcon[1] [0]
    wire \expand_key.key_xor_rcon[2] [0]
    wire \expand_key.key_xor_rcon[3] [0]
Warning: found logic loop in module aes128_fast:
    cell $flatten\expand_key.$verific$mux_165$key_expander.vhd:118$6752 ($mux)
    cell $flatten\expand_key.$verific$mux_166$key_expander.vhd:118$6753 ($mux)
    cell $flatten\expand_key.$verific$mux_167$key_expander.vhd:118$6754 ($mux)
    cell $flatten\expand_key.$verific$mux_168$key_expander.vhd:118$6755 ($mux)
    cell $flatten\expand_key.$verific$mux_169$key_expander.vhd:118$6756 ($mux)
    cell $flatten\expand_key.$verific$mux_170$key_expander.vhd:118$6757 ($mux)
    cell $flatten\expand_key.$verific$mux_171$key_expander.vhd:118$6758 ($mux)
    cell $flatten\expand_key.$verific$mux_172$key_expander.vhd:118$6759 ($mux)
    cell $flatten\expand_key.$verific$mux_173$key_expander.vhd:118$6760 ($mux)
    cell $flatten\expand_key.$verific$mux_174$key_expander.vhd:118$6761 ($mux)
    cell $flatten\expand_key.$verific$mux_175$key_expander.vhd:118$6762 ($mux)
    cell $flatten\expand_key.$verific$mux_176$key_expander.vhd:118$6763 ($mux)
    cell $flatten\expand_key.$verific$mux_177$key_expander.vhd:118$6764 ($mux)
    cell $flatten\expand_key.$verific$mux_178$key_expander.vhd:118$6765 ($mux)
    cell $flatten\expand_key.$verific$mux_179$key_expander.vhd:118$6766 ($mux)
    cell $flatten\expand_key.$verific$mux_180$key_expander.vhd:118$6767 ($mux)
    cell $flatten\expand_key.$verific$mux_181$key_expander.vhd:118$6768 ($mux)
    cell $flatten\expand_key.$verific$mux_182$key_expander.vhd:118$6769 ($mux)
    cell $flatten\expand_key.$verific$mux_183$key_expander.vhd:118$6770 ($mux)
    cell $flatten\expand_key.$verific$mux_184$key_expander.vhd:118$6771 ($mux)
    cell $flatten\expand_key.$verific$mux_185$key_expander.vhd:118$6772 ($mux)
    cell $flatten\expand_key.$verific$mux_186$key_expander.vhd:118$6773 ($mux)
    cell $flatten\expand_key.$verific$mux_187$key_expander.vhd:118$6774 ($mux)
    cell $flatten\expand_key.$verific$mux_188$key_expander.vhd:118$6775 ($mux)
    cell $flatten\expand_key.$verific$mux_189$key_expander.vhd:118$6776 ($mux)
    cell $flatten\expand_key.$verific$mux_190$key_expander.vhd:118$6777 ($mux)
    cell $flatten\expand_key.$verific$mux_191$key_expander.vhd:118$6778 ($mux)
    cell $flatten\expand_key.$verific$mux_192$key_expander.vhd:118$6779 ($mux)
    cell $flatten\expand_key.$verific$mux_417$aes_package.vhd:345$6738 ($bmux)
    cell $flatten\expand_key.$verific$mux_420$aes_package.vhd:345$6741 ($bmux)
    cell $flatten\expand_key.$verific$mux_423$aes_package.vhd:345$6744 ($bmux)
    cell $flatten\expand_key.$verific$mux_426$aes_package.vhd:345$6747 ($bmux)
    cell $flatten\expand_key.$verific$xor_368$key_expander.vhd:109$6721 ($xor)
    cell $flatten\expand_key.$verific$xor_370$key_expander.vhd:109$6722 ($xor)
    cell $flatten\expand_key.$verific$xor_372$key_expander.vhd:109$6723 ($xor)
    cell $flatten\expand_key.$verific$xor_374$key_expander.vhd:109$6724 ($xor)
    cell $flatten\expand_key.$verific$xor_376$key_expander.vhd:108$6713 ($xor)
    cell $flatten\expand_key.$verific$xor_378$key_expander.vhd:108$6714 ($xor)
    cell $flatten\expand_key.$verific$xor_380$key_expander.vhd:108$6715 ($xor)
    cell $flatten\expand_key.$verific$xor_382$key_expander.vhd:108$6716 ($xor)
    cell $flatten\expand_key.$verific$xor_384$key_expander.vhd:107$6705 ($xor)
    cell $flatten\expand_key.$verific$xor_386$key_expander.vhd:107$6706 ($xor)
    cell $flatten\expand_key.$verific$xor_388$key_expander.vhd:107$6707 ($xor)
    cell $flatten\expand_key.$verific$xor_390$key_expander.vhd:107$6708 ($xor)
    cell $flatten\expand_key.$verific$xor_434$key_expander.vhd:110$6700 ($xor)
    cell $flatten\expand_key.$verific$xor_435$key_expander.vhd:110$6729 ($xor)
    cell $flatten\expand_key.$verific$xor_436$key_expander.vhd:110$6730 ($xor)
    cell $flatten\expand_key.$verific$xor_437$key_expander.vhd:110$6731 ($xor)
    cell $flatten\expand_key.$verific$xor_438$key_expander.vhd:117$6732 ($xor)
    wire $flatten\expand_key.$verific$n100$6535 [0]
    wire $flatten\expand_key.$verific$n126$6537 [0]
    wire $flatten\expand_key.$verific$n153$6539 [0]
    wire $flatten\expand_key.$verific$n225$6543 [0]
    wire $flatten\expand_key.$verific$n234$6544 [0]
    wire $flatten\expand_key.$verific$n243$6545 [0]
    wire $flatten\expand_key.$verific$n252$6546 [0]
    wire $flatten\expand_key.$verific$n2570$6694 [0]
    wire $flatten\expand_key.$verific$n2573$6695 [0]
    wire $flatten\expand_key.$verific$n261$6547 [0]
    wire $flatten\expand_key.$verific$n270$6548 [0]
    wire $flatten\expand_key.$verific$n279$6549 [0]
    wire $flatten\expand_key.$verific$n288$6550 [0]
    wire $flatten\expand_key.$verific$n333$6555 [0]
    wire $flatten\expand_key.$verific$n342$6556 [0]
    wire $flatten\expand_key.$verific$n351$6557 [0]
    wire $flatten\expand_key.$verific$n360$6558 [0]
    wire $flatten\expand_key.$verific$n405$6563 [0]
    wire $flatten\expand_key.$verific$n414$6564 [0]
    wire $flatten\expand_key.$verific$n423$6565 [0]
    wire $flatten\expand_key.$verific$n432$6566 [0]
    wire \expand_key.X0[0] [0]
    wire \expand_key.X0[1] [0]
    wire \expand_key.X0[2] [0]
    wire \expand_key.X0[3] [0]
    wire \expand_key.X1[0] [0]
    wire \expand_key.X1[1] [0]
    wire \expand_key.X1[2] [0]
    wire \expand_key.X1[3] [0]
    wire \expand_key.X2[0] [0]
    wire \expand_key.X2[1] [0]
    wire \expand_key.X2[2] [0]
    wire \expand_key.X2[3] [0]
    wire \expand_key.X3[0] [0]
    wire \expand_key.X3[1] [0]
    wire \expand_key.X3[2] [0]
    wire \expand_key.X3[3] [0]
    wire \expand_key.k_rot[0] [7]
    wire \expand_key.k_rot[1] [0]
    wire \expand_key.k_rot[2] [0]
    wire \expand_key.k_rot[3] [0]
    wire \expand_key.key_sub[0] [0]
    wire \expand_key.key_sub[1] [0]
    wire \expand_key.key_sub[2] [0]
    wire \expand_key.key_sub[3] [0]
    wire \expand_key.key_xor_rcon[0] [0]
    wire \expand_key.key_xor_rcon[1] [0]
    wire \expand_key.key_xor_rcon[2] [0]
    wire \expand_key.key_xor_rcon[3] [0]
Found and reported 8 problems.

yosys> opt -nodffe -nosdff

3.11. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes128_fast.
<suppressed ~16 debug messages>

yosys> opt_merge -nomux

3.11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes128_fast'.
<suppressed ~111 debug messages>
Removed a total of 37 cells.

yosys> opt_muxtree

3.11.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes128_fast..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux $verific$mux_6607$aes_package.vhd:879$4636.
Removed 1 multiplexer ports.
<suppressed ~467 debug messages>

yosys> opt_reduce

3.11.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes128_fast.
    New ctrl vector for $pmux cell $flatten\expand_key.$verific$select_439$key_expander.vhd:172$6826: { $flatten\expand_key.$verific$n1391$6516 $verific$n31382$2032 $flatten\expand_key.$verific$n2033$6518 $flatten\expand_key.$verific$n2034$6519 $flatten\expand_key.$verific$n2035$6520 $flatten\expand_key.$verific$n2036$6521 $flatten\expand_key.$verific$n2037$6522 $flatten\expand_key.$verific$n2038$6523 $flatten\expand_key.$verific$n2039$6524 $flatten\expand_key.$verific$n2040$6525 }
  Optimizing cells in module \aes128_fast.
Performed a total of 1 changes.

yosys> opt_merge

3.11.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes128_fast'.
<suppressed ~960 debug messages>
Removed a total of 320 cells.

yosys> opt_dff -nodffe -nosdff

3.11.6. Executing OPT_DFF pass (perform DFF optimizations).
Changing const-value async load to async reset on $flatten\expand_key.$verific$w_i_nk1_reg$key_expander.vhd:174$6840 ($aldff) from module aes128_fast.
Changing const-value async load to async reset on $flatten\expand_key.$verific$w_i_nk0_reg_4$key_expander.vhd:174$6835 ($aldff) from module aes128_fast.
Changing const-value async load to async reset on $flatten\expand_key.$verific$w_i_nk0_reg_3$key_expander.vhd:174$6834 ($aldff) from module aes128_fast.
Changing const-value async load to async reset on $flatten\expand_key.$verific$w_i_nk2_reg_4$key_expander.vhd:174$6843 ($aldff) from module aes128_fast.
Changing const-value async load to async reset on $flatten\expand_key.$verific$w_i_nk0_reg_2$key_expander.vhd:174$6833 ($aldff) from module aes128_fast.
Changing const-value async load to async reset on $flatten\expand_key.$verific$w_i_nk0_reg$key_expander.vhd:174$6836 ($aldff) from module aes128_fast.
Changing const-value async load to async reset on $flatten\expand_key.$verific$w_i_nk2_reg_3$key_expander.vhd:174$6842 ($aldff) from module aes128_fast.
Changing const-value async load to async reset on $flatten\expand_key.$verific$w_i_nk2_reg_2$key_expander.vhd:174$6841 ($aldff) from module aes128_fast.
Changing const-value async load to async reset on $flatten\expand_key.$verific$temp0_reg_4$key_expander.vhd:174$6831 ($aldff) from module aes128_fast.
Changing const-value async load to async reset on $verific$load_d1_reg$aes128_fast.vhd:353$6434 ($aldff) from module aes128_fast.
Changing const-value async load to async reset on $verific$key_reg3_reg_4$aes128_fast.vhd:182$4311 ($aldff) from module aes128_fast.
Changing const-value async load to async reset on $verific$key_reg3_reg_3$aes128_fast.vhd:182$4310 ($aldff) from module aes128_fast.
Changing const-value async load to async reset on $flatten\expand_key.$verific$temp0_reg_3$key_expander.vhd:174$6830 ($aldff) from module aes128_fast.
Changing const-value async load to async reset on $verific$key_reg3_reg_2$aes128_fast.vhd:182$4309 ($aldff) from module aes128_fast.
Changing const-value async load to async reset on $verific$key_reg3_reg$aes128_fast.vhd:182$4312 ($aldff) from module aes128_fast.
Changing const-value async load to async reset on $verific$key_reg2_reg_4$aes128_fast.vhd:182$4307 ($aldff) from module aes128_fast.
Changing const-value async load to async reset on $verific$key_reg2_reg_3$aes128_fast.vhd:182$4306 ($aldff) from module aes128_fast.
Changing const-value async load to async reset on $verific$key_reg2_reg_2$aes128_fast.vhd:182$4305 ($aldff) from module aes128_fast.
Changing const-value async load to async reset on $flatten\expand_key.$verific$temp0_reg_2$key_expander.vhd:174$6829 ($aldff) from module aes128_fast.
Changing const-value async load to async reset on $verific$key_reg2_reg$aes128_fast.vhd:182$4308 ($aldff) from module aes128_fast.
Changing const-value async load to async reset on $verific$key_reg1_reg_4$aes128_fast.vhd:182$4303 ($aldff) from module aes128_fast.
Changing const-value async load to async reset on $verific$key_reg1_reg_3$aes128_fast.vhd:182$4302 ($aldff) from module aes128_fast.
Changing const-value async load to async reset on $flatten\expand_key.$verific$temp0_reg$key_expander.vhd:174$6832 ($aldff) from module aes128_fast.
Changing const-value async load to async reset on $verific$key_reg1_reg_2$aes128_fast.vhd:182$4301 ($aldff) from module aes128_fast.
Changing const-value async load to async reset on $verific$key_reg1_reg$aes128_fast.vhd:182$4304 ($aldff) from module aes128_fast.
Changing const-value async load to async reset on $verific$key_reg0_reg_4$aes128_fast.vhd:182$4299 ($aldff) from module aes128_fast.
Changing const-value async load to async reset on $verific$key_reg0_reg_3$aes128_fast.vhd:182$4298 ($aldff) from module aes128_fast.
Changing const-value async load to async reset on $verific$key_reg0_reg_2$aes128_fast.vhd:182$4297 ($aldff) from module aes128_fast.
Changing const-value async load to async reset on $verific$key_reg0_reg$aes128_fast.vhd:182$4300 ($aldff) from module aes128_fast.
Changing const-value async load to async reset on $flatten\expand_key.$verific$w_i_nk2_reg$key_expander.vhd:174$6844 ($aldff) from module aes128_fast.
Changing const-value async load to async reset on $flatten\expand_key.$verific$rcon_reg$key_expander.vhd:174$6849 ($aldff) from module aes128_fast.
Changing const-value async load to async reset on $flatten\expand_key.$verific$w_i_nk1_reg_4$key_expander.vhd:174$6839 ($aldff) from module aes128_fast.
Changing const-value async load to async reset on $verific$flag_cnt_reg$aes128_fast.vhd:395$6500 ($aldff) from module aes128_fast.
Changing const-value async load to async reset on $verific$done_d2_reg$aes128_fast.vhd:412$6506 ($aldff) from module aes128_fast.
Changing const-value async load to async reset on $flatten\expand_key.$verific$w_i_nk1_reg_3$key_expander.vhd:174$6838 ($aldff) from module aes128_fast.
Changing const-value async load to async reset on $verific$done_d1_reg$aes128_fast.vhd:412$6505 ($aldff) from module aes128_fast.
Changing const-value async load to async reset on $verific$data_out_reg$aes128_fast.vhd:427$6512 ($aldff) from module aes128_fast.
Changing const-value async load to async reset on $verific$start_d2_reg$aes128_fast.vhd:353$6436 ($aldff) from module aes128_fast.
Changing const-value async load to async reset on $verific$start_d1_reg$aes128_fast.vhd:353$6435 ($aldff) from module aes128_fast.
Changing const-value async load to async reset on $verific$s3_buf_reg_4$aes128_fast.vhd:376$6486 ($aldff) from module aes128_fast.
Changing const-value async load to async reset on $verific$s3_buf_reg_3$aes128_fast.vhd:376$6485 ($aldff) from module aes128_fast.
Changing const-value async load to async reset on $verific$s3_buf_reg_2$aes128_fast.vhd:376$6484 ($aldff) from module aes128_fast.
Changing const-value async load to async reset on $verific$s3_buf_reg$aes128_fast.vhd:376$6487 ($aldff) from module aes128_fast.
Changing const-value async load to async reset on $verific$s2_buf_reg_4$aes128_fast.vhd:376$6482 ($aldff) from module aes128_fast.
Changing const-value async load to async reset on $verific$s2_buf_reg_3$aes128_fast.vhd:376$6481 ($aldff) from module aes128_fast.
Changing const-value async load to async reset on $verific$s2_buf_reg_2$aes128_fast.vhd:376$6480 ($aldff) from module aes128_fast.
Changing const-value async load to async reset on $verific$s2_buf_reg$aes128_fast.vhd:376$6483 ($aldff) from module aes128_fast.
Changing const-value async load to async reset on $verific$s1_buf_reg_4$aes128_fast.vhd:376$6478 ($aldff) from module aes128_fast.
Changing const-value async load to async reset on $verific$s1_buf_reg_3$aes128_fast.vhd:376$6477 ($aldff) from module aes128_fast.
Changing const-value async load to async reset on $verific$s1_buf_reg_2$aes128_fast.vhd:376$6476 ($aldff) from module aes128_fast.
Changing const-value async load to async reset on $verific$s1_buf_reg$aes128_fast.vhd:376$6479 ($aldff) from module aes128_fast.
Changing const-value async load to async reset on $verific$s0_buf_reg_4$aes128_fast.vhd:376$6474 ($aldff) from module aes128_fast.
Changing const-value async load to async reset on $verific$s0_buf_reg_3$aes128_fast.vhd:376$6473 ($aldff) from module aes128_fast.
Changing const-value async load to async reset on $verific$s0_buf_reg_2$aes128_fast.vhd:376$6472 ($aldff) from module aes128_fast.
Changing const-value async load to async reset on $verific$s0_buf_reg$aes128_fast.vhd:376$6475 ($aldff) from module aes128_fast.
Changing const-value async load to async reset on $verific$round_cnt_reg$aes128_fast.vhd:395$6499 ($aldff) from module aes128_fast.
Changing const-value async load to async reset on $verific$new_key3_d1_reg_4$aes128_fast.vhd:309$6311 ($aldff) from module aes128_fast.
Changing const-value async load to async reset on $verific$new_key3_d1_reg_3$aes128_fast.vhd:309$6310 ($aldff) from module aes128_fast.
Changing const-value async load to async reset on $verific$new_key3_d1_reg_2$aes128_fast.vhd:309$6309 ($aldff) from module aes128_fast.
Changing const-value async load to async reset on $verific$new_key3_d1_reg$aes128_fast.vhd:309$6312 ($aldff) from module aes128_fast.
Changing const-value async load to async reset on $verific$new_key2_d1_reg_4$aes128_fast.vhd:309$6307 ($aldff) from module aes128_fast.
Changing const-value async load to async reset on $verific$new_key2_d1_reg_3$aes128_fast.vhd:309$6306 ($aldff) from module aes128_fast.
Changing const-value async load to async reset on $verific$new_key2_d1_reg_2$aes128_fast.vhd:309$6305 ($aldff) from module aes128_fast.
Changing const-value async load to async reset on $verific$new_key2_d1_reg$aes128_fast.vhd:309$6308 ($aldff) from module aes128_fast.
Changing const-value async load to async reset on $verific$new_key1_d1_reg_4$aes128_fast.vhd:309$6303 ($aldff) from module aes128_fast.
Changing const-value async load to async reset on $verific$new_key1_d1_reg_3$aes128_fast.vhd:309$6302 ($aldff) from module aes128_fast.
Changing const-value async load to async reset on $verific$new_key1_d1_reg_2$aes128_fast.vhd:309$6301 ($aldff) from module aes128_fast.
Changing const-value async load to async reset on $verific$new_key1_d1_reg$aes128_fast.vhd:309$6304 ($aldff) from module aes128_fast.
Changing const-value async load to async reset on $verific$new_key0_d1_reg_4$aes128_fast.vhd:309$6299 ($aldff) from module aes128_fast.
Changing const-value async load to async reset on $verific$new_key0_d1_reg_3$aes128_fast.vhd:309$6298 ($aldff) from module aes128_fast.
Changing const-value async load to async reset on $verific$new_key0_d1_reg_2$aes128_fast.vhd:309$6297 ($aldff) from module aes128_fast.
Changing const-value async load to async reset on $verific$new_key0_d1_reg$aes128_fast.vhd:309$6300 ($aldff) from module aes128_fast.
Changing const-value async load to async reset on $verific$data_in_reg3_reg_4$aes128_fast.vhd:182$4327 ($aldff) from module aes128_fast.
Changing const-value async load to async reset on $verific$data_in_reg3_reg_3$aes128_fast.vhd:182$4326 ($aldff) from module aes128_fast.
Changing const-value async load to async reset on $verific$data_in_reg3_reg_2$aes128_fast.vhd:182$4325 ($aldff) from module aes128_fast.
Changing const-value async load to async reset on $verific$data_in_reg3_reg$aes128_fast.vhd:182$4328 ($aldff) from module aes128_fast.
Changing const-value async load to async reset on $verific$data_in_reg2_reg_4$aes128_fast.vhd:182$4323 ($aldff) from module aes128_fast.
Changing const-value async load to async reset on $verific$data_in_reg2_reg_3$aes128_fast.vhd:182$4322 ($aldff) from module aes128_fast.
Changing const-value async load to async reset on $verific$data_in_reg2_reg_2$aes128_fast.vhd:182$4321 ($aldff) from module aes128_fast.
Changing const-value async load to async reset on $verific$data_in_reg2_reg$aes128_fast.vhd:182$4324 ($aldff) from module aes128_fast.
Changing const-value async load to async reset on $verific$data_in_reg1_reg_4$aes128_fast.vhd:182$4319 ($aldff) from module aes128_fast.
Changing const-value async load to async reset on $verific$data_in_reg1_reg_3$aes128_fast.vhd:182$4318 ($aldff) from module aes128_fast.
Changing const-value async load to async reset on $verific$data_in_reg1_reg_2$aes128_fast.vhd:182$4317 ($aldff) from module aes128_fast.
Changing const-value async load to async reset on $verific$data_in_reg1_reg$aes128_fast.vhd:182$4320 ($aldff) from module aes128_fast.
Changing const-value async load to async reset on $verific$data_in_reg0_reg_4$aes128_fast.vhd:182$4315 ($aldff) from module aes128_fast.
Changing const-value async load to async reset on $verific$data_in_reg0_reg_3$aes128_fast.vhd:182$4314 ($aldff) from module aes128_fast.
Changing const-value async load to async reset on $verific$data_in_reg0_reg_2$aes128_fast.vhd:182$4313 ($aldff) from module aes128_fast.
Changing const-value async load to async reset on $verific$data_in_reg0_reg$aes128_fast.vhd:182$4316 ($aldff) from module aes128_fast.
Changing const-value async load to async reset on $flatten\expand_key.$verific$w_i_nk1_reg_2$key_expander.vhd:174$6837 ($aldff) from module aes128_fast.

yosys> opt_clean

3.11.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes128_fast..
Removed 2 unused cells and 385 unused wires.
<suppressed ~3 debug messages>

yosys> opt_expr

3.11.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes128_fast.

3.11.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.11.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes128_fast..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~274 debug messages>

yosys> opt_reduce

3.11.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes128_fast.
Performed a total of 0 changes.

yosys> opt_merge

3.11.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes128_fast'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.11.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.11.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes128_fast..

yosys> opt_expr

3.11.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes128_fast.

3.11.16. Finished OPT passes. (There is nothing left to do.)

yosys> fsm -encoding binary

3.12. Executing FSM pass (extract and optimize FSM).

yosys> fsm_detect

3.12.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking aes128_fast.expand_key.rcon as FSM state register:
    Users of register don't seem to benefit from recoding.

yosys> fsm_extract

3.12.2. Executing FSM_EXTRACT pass (extracting FSM from design).

yosys> fsm_opt

3.12.3. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> opt_clean

3.12.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes128_fast..

yosys> fsm_opt

3.12.5. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> fsm_recode -encoding binary

3.12.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

yosys> fsm_info

3.12.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

yosys> fsm_map

3.12.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

yosys> opt -sat

3.13. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes128_fast.

yosys> opt_merge -nomux

3.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes128_fast'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes128_fast..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~274 debug messages>

yosys> opt_reduce

3.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes128_fast.
Performed a total of 0 changes.

yosys> opt_merge

3.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes128_fast'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.13.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $verific$round_cnt_reg$aes128_fast.vhd:395$6499 ($adff) from module aes128_fast (D = $verific$n32048$4205, Q = \round_cnt).
Adding EN signal on $verific$key_reg3_reg_4$aes128_fast.vhd:182$4311 ($adff) from module aes128_fast (D = \key [15:8], Q = \key_reg3[2]).
Adding EN signal on $verific$key_reg3_reg_3$aes128_fast.vhd:182$4310 ($adff) from module aes128_fast (D = \key [23:16], Q = \key_reg3[1]).
Adding EN signal on $verific$key_reg3_reg_2$aes128_fast.vhd:182$4309 ($adff) from module aes128_fast (D = \key [31:24], Q = \key_reg3[0]).
Adding EN signal on $verific$key_reg3_reg$aes128_fast.vhd:182$4312 ($adff) from module aes128_fast (D = \key [7:0], Q = \key_reg3[3]).
Adding EN signal on $verific$key_reg2_reg_4$aes128_fast.vhd:182$4307 ($adff) from module aes128_fast (D = \key [47:40], Q = \key_reg2[2]).
Adding EN signal on $verific$key_reg2_reg_3$aes128_fast.vhd:182$4306 ($adff) from module aes128_fast (D = \key [55:48], Q = \key_reg2[1]).
Adding EN signal on $verific$key_reg2_reg_2$aes128_fast.vhd:182$4305 ($adff) from module aes128_fast (D = \key [63:56], Q = \key_reg2[0]).
Adding EN signal on $verific$key_reg2_reg$aes128_fast.vhd:182$4308 ($adff) from module aes128_fast (D = \key [39:32], Q = \key_reg2[3]).
Adding EN signal on $verific$key_reg1_reg_4$aes128_fast.vhd:182$4303 ($adff) from module aes128_fast (D = \key [15:8], Q = \key_reg1[2]).
Adding EN signal on $verific$key_reg1_reg_3$aes128_fast.vhd:182$4302 ($adff) from module aes128_fast (D = \key [23:16], Q = \key_reg1[1]).
Adding EN signal on $verific$key_reg1_reg_2$aes128_fast.vhd:182$4301 ($adff) from module aes128_fast (D = \key [31:24], Q = \key_reg1[0]).
Adding EN signal on $verific$key_reg1_reg$aes128_fast.vhd:182$4304 ($adff) from module aes128_fast (D = \key [7:0], Q = \key_reg1[3]).
Adding EN signal on $verific$key_reg0_reg_4$aes128_fast.vhd:182$4299 ($adff) from module aes128_fast (D = \key [47:40], Q = \key_reg0[2]).
Adding EN signal on $verific$key_reg0_reg_3$aes128_fast.vhd:182$4298 ($adff) from module aes128_fast (D = \key [55:48], Q = \key_reg0[1]).
Adding EN signal on $verific$key_reg0_reg_2$aes128_fast.vhd:182$4297 ($adff) from module aes128_fast (D = \key [63:56], Q = \key_reg0[0]).
Adding EN signal on $verific$key_reg0_reg$aes128_fast.vhd:182$4300 ($adff) from module aes128_fast (D = \key [39:32], Q = \key_reg0[3]).
Adding EN signal on $verific$flag_cnt_reg$aes128_fast.vhd:395$6500 ($adff) from module aes128_fast (D = $verific$n32053$2038, Q = \flag_cnt).
Adding EN signal on $verific$done_d1_reg$aes128_fast.vhd:412$6505 ($adff) from module aes128_fast (D = $verific$n32078$2042, Q = \done_d1).
Adding EN signal on $verific$data_out_reg$aes128_fast.vhd:427$6512 ($adff) from module aes128_fast (D = { \next_round_data_0[0] \next_round_data_0[1] \next_round_data_0[2] \next_round_data_0[3] \next_round_data_1[0] \next_round_data_1[1] \next_round_data_1[2] \next_round_data_1[3] \next_round_data_2[0] \next_round_data_2[1] \next_round_data_2[2] \next_round_data_2[3] \next_round_data_3[0] \next_round_data_3[1] \next_round_data_3[2] \next_round_data_3[3] }, Q = \data_out).
Adding EN signal on $verific$data_in_reg3_reg_4$aes128_fast.vhd:182$4327 ($adff) from module aes128_fast (D = \data_in [15:8], Q = \data_in_reg3[2]).
Adding EN signal on $verific$data_in_reg3_reg_3$aes128_fast.vhd:182$4326 ($adff) from module aes128_fast (D = \data_in [23:16], Q = \data_in_reg3[1]).
Adding EN signal on $verific$data_in_reg3_reg_2$aes128_fast.vhd:182$4325 ($adff) from module aes128_fast (D = \data_in [31:24], Q = \data_in_reg3[0]).
Adding EN signal on $verific$data_in_reg3_reg$aes128_fast.vhd:182$4328 ($adff) from module aes128_fast (D = \data_in [7:0], Q = \data_in_reg3[3]).
Adding EN signal on $verific$data_in_reg2_reg_4$aes128_fast.vhd:182$4323 ($adff) from module aes128_fast (D = \data_in [47:40], Q = \data_in_reg2[2]).
Adding EN signal on $verific$data_in_reg2_reg_3$aes128_fast.vhd:182$4322 ($adff) from module aes128_fast (D = \data_in [55:48], Q = \data_in_reg2[1]).
Adding EN signal on $verific$data_in_reg2_reg_2$aes128_fast.vhd:182$4321 ($adff) from module aes128_fast (D = \data_in [63:56], Q = \data_in_reg2[0]).
Adding EN signal on $verific$data_in_reg2_reg$aes128_fast.vhd:182$4324 ($adff) from module aes128_fast (D = \data_in [39:32], Q = \data_in_reg2[3]).
Adding EN signal on $verific$data_in_reg1_reg_4$aes128_fast.vhd:182$4319 ($adff) from module aes128_fast (D = \data_in [15:8], Q = \data_in_reg1[2]).
Adding EN signal on $verific$data_in_reg1_reg_3$aes128_fast.vhd:182$4318 ($adff) from module aes128_fast (D = \data_in [23:16], Q = \data_in_reg1[1]).
Adding EN signal on $verific$data_in_reg1_reg_2$aes128_fast.vhd:182$4317 ($adff) from module aes128_fast (D = \data_in [31:24], Q = \data_in_reg1[0]).
Adding EN signal on $verific$data_in_reg1_reg$aes128_fast.vhd:182$4320 ($adff) from module aes128_fast (D = \data_in [7:0], Q = \data_in_reg1[3]).
Adding EN signal on $verific$data_in_reg0_reg_4$aes128_fast.vhd:182$4315 ($adff) from module aes128_fast (D = \data_in [47:40], Q = \data_in_reg0[2]).
Adding EN signal on $verific$data_in_reg0_reg_3$aes128_fast.vhd:182$4314 ($adff) from module aes128_fast (D = \data_in [55:48], Q = \data_in_reg0[1]).
Adding EN signal on $verific$data_in_reg0_reg_2$aes128_fast.vhd:182$4313 ($adff) from module aes128_fast (D = \data_in [63:56], Q = \data_in_reg0[0]).
Adding EN signal on $verific$data_in_reg0_reg$aes128_fast.vhd:182$4316 ($adff) from module aes128_fast (D = \data_in [39:32], Q = \data_in_reg0[3]).

yosys> opt_clean

3.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes128_fast..
Removed 51 unused cells and 51 unused wires.
<suppressed ~52 debug messages>

yosys> opt_expr

3.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes128_fast.
<suppressed ~1 debug messages>

3.13.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.13.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes128_fast..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~241 debug messages>

yosys> opt_reduce

3.13.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes128_fast.
Performed a total of 0 changes.

yosys> opt_merge

3.13.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes128_fast'.
<suppressed ~90 debug messages>
Removed a total of 30 cells.

yosys> opt_dff -sat

3.13.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.13.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes128_fast..
Removed 0 unused cells and 30 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.13.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes128_fast.

3.13.16. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.13.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes128_fast..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~241 debug messages>

yosys> opt_reduce

3.13.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes128_fast.
Performed a total of 0 changes.

yosys> opt_merge

3.13.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes128_fast'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.13.20. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.13.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes128_fast..

yosys> opt_expr

3.13.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes128_fast.

3.13.23. Finished OPT passes. (There is nothing left to do.)

yosys> wreduce -keepdc

3.14. Executing WREDUCE pass (reducing word size of cells).
Removed top 3 bits (of 8) from port B of cell aes128_fast.$verific$xor_1007$aes_package.vhd:662$4565 ($xor).
Removed top 3 bits (of 8) from port B of cell aes128_fast.$verific$xor_1017$aes_package.vhd:667$4568 ($xor).
Removed top 3 bits (of 8) from port B of cell aes128_fast.$verific$xor_1027$aes_package.vhd:672$4571 ($xor).
Removed top 3 bits (of 8) from port B of cell aes128_fast.$verific$xor_1050$aes_package.vhd:684$4583 ($xor).
Removed top 3 bits (of 8) from port B of cell aes128_fast.$verific$xor_1060$aes_package.vhd:689$4593 ($xor).
Removed top 3 bits (of 8) from port B of cell aes128_fast.$verific$xor_1083$aes_package.vhd:701$4615 ($xor).
Removed top 3 bits (of 8) from port B of cell aes128_fast.$verific$xor_1093$aes_package.vhd:706$4625 ($xor).
Removed top 3 bits (of 8) from port B of cell aes128_fast.$verific$xor_1124$aes_package.vhd:650$4644 ($xor).
Removed top 3 bits (of 8) from port B of cell aes128_fast.$verific$xor_1134$aes_package.vhd:655$4647 ($xor).
Removed top 3 bits (of 8) from port B of cell aes128_fast.$verific$xor_1147$aes_package.vhd:662$4650 ($xor).
Removed top 3 bits (of 8) from port B of cell aes128_fast.$verific$xor_1157$aes_package.vhd:667$4653 ($xor).
Removed top 3 bits (of 8) from port B of cell aes128_fast.$verific$xor_1167$aes_package.vhd:672$4656 ($xor).
Removed top 3 bits (of 8) from port B of cell aes128_fast.$verific$xor_1190$aes_package.vhd:684$4668 ($xor).
Removed top 3 bits (of 8) from port B of cell aes128_fast.$verific$xor_1200$aes_package.vhd:689$4678 ($xor).
Removed top 3 bits (of 8) from port B of cell aes128_fast.$verific$xor_1223$aes_package.vhd:701$4699 ($xor).
Removed top 3 bits (of 8) from port B of cell aes128_fast.$verific$xor_1233$aes_package.vhd:706$4709 ($xor).
Removed top 3 bits (of 8) from port B of cell aes128_fast.$verific$xor_1264$aes_package.vhd:650$4722 ($xor).
Removed top 3 bits (of 8) from port B of cell aes128_fast.$verific$xor_1274$aes_package.vhd:655$4725 ($xor).
Removed top 3 bits (of 8) from port B of cell aes128_fast.$verific$xor_1287$aes_package.vhd:662$4728 ($xor).
Removed top 3 bits (of 8) from port B of cell aes128_fast.$verific$xor_1297$aes_package.vhd:667$4731 ($xor).
Removed top 3 bits (of 8) from port B of cell aes128_fast.$verific$xor_1307$aes_package.vhd:672$4734 ($xor).
Removed top 3 bits (of 8) from port B of cell aes128_fast.$verific$xor_1330$aes_package.vhd:684$4746 ($xor).
Removed top 3 bits (of 8) from port B of cell aes128_fast.$verific$xor_1340$aes_package.vhd:689$4756 ($xor).
Removed top 3 bits (of 8) from port B of cell aes128_fast.$verific$xor_1363$aes_package.vhd:701$4777 ($xor).
Removed top 3 bits (of 8) from port B of cell aes128_fast.$verific$xor_1373$aes_package.vhd:706$4787 ($xor).
Removed top 3 bits (of 8) from port B of cell aes128_fast.$verific$xor_1404$aes_package.vhd:650$4800 ($xor).
Removed top 3 bits (of 8) from port B of cell aes128_fast.$verific$xor_1414$aes_package.vhd:655$4803 ($xor).
Removed top 3 bits (of 8) from port B of cell aes128_fast.$verific$xor_1427$aes_package.vhd:662$4806 ($xor).
Removed top 3 bits (of 8) from port B of cell aes128_fast.$verific$xor_1437$aes_package.vhd:667$4809 ($xor).
Removed top 3 bits (of 8) from port B of cell aes128_fast.$verific$xor_1447$aes_package.vhd:672$4812 ($xor).
Removed top 3 bits (of 8) from port B of cell aes128_fast.$verific$xor_1470$aes_package.vhd:684$4824 ($xor).
Removed top 3 bits (of 8) from port B of cell aes128_fast.$verific$xor_1480$aes_package.vhd:689$4834 ($xor).
Removed top 3 bits (of 8) from port B of cell aes128_fast.$verific$xor_1503$aes_package.vhd:701$4855 ($xor).
Removed top 3 bits (of 8) from port B of cell aes128_fast.$verific$xor_1513$aes_package.vhd:706$4865 ($xor).
Removed top 3 bits (of 8) from port B of cell aes128_fast.$verific$xor_1567$aes_package.vhd:662$4883 ($xor).
Removed top 3 bits (of 8) from port B of cell aes128_fast.$verific$xor_1643$aes_package.vhd:701$4903 ($xor).
Removed top 3 bits (of 8) from port B of cell aes128_fast.$verific$xor_1653$aes_package.vhd:706$4913 ($xor).
Removed top 3 bits (of 8) from port B of cell aes128_fast.$verific$xor_1707$aes_package.vhd:662$4931 ($xor).
Removed top 3 bits (of 8) from port B of cell aes128_fast.$verific$xor_1847$aes_package.vhd:662$4979 ($xor).
Removed top 3 bits (of 8) from port B of cell aes128_fast.$verific$xor_1987$aes_package.vhd:662$5027 ($xor).
Removed top 3 bits (of 8) from port B of cell aes128_fast.$verific$xor_2127$aes_package.vhd:662$5075 ($xor).
Removed top 3 bits (of 8) from port B of cell aes128_fast.$verific$xor_2267$aes_package.vhd:662$5123 ($xor).
Removed top 3 bits (of 8) from port B of cell aes128_fast.$verific$xor_2407$aes_package.vhd:662$5171 ($xor).
Removed top 3 bits (of 8) from port B of cell aes128_fast.$verific$xor_2547$aes_package.vhd:662$5219 ($xor).
Removed top 3 bits (of 8) from port B of cell aes128_fast.$verific$xor_2687$aes_package.vhd:662$5266 ($xor).
Removed top 3 bits (of 8) from port B of cell aes128_fast.$verific$xor_2827$aes_package.vhd:662$5284 ($xor).
Removed top 3 bits (of 8) from port B of cell aes128_fast.$verific$xor_2967$aes_package.vhd:662$5302 ($xor).
Removed top 3 bits (of 8) from port B of cell aes128_fast.$verific$xor_3107$aes_package.vhd:662$5321 ($xor).
Removed top 3 bits (of 8) from port B of cell aes128_fast.$verific$xor_3322$aes_package.vhd:628$5354 ($xor).
Removed top 3 bits (of 8) from port B of cell aes128_fast.$verific$xor_3347$aes_package.vhd:628$5360 ($xor).
Removed top 3 bits (of 8) from port B of cell aes128_fast.$verific$xor_3372$aes_package.vhd:628$5366 ($xor).
Removed top 3 bits (of 8) from port B of cell aes128_fast.$verific$xor_3397$aes_package.vhd:628$5372 ($xor).
Removed top 3 bits (of 8) from port B of cell aes128_fast.$verific$xor_3422$aes_package.vhd:628$5378 ($xor).
Removed top 3 bits (of 8) from port B of cell aes128_fast.$verific$xor_3447$aes_package.vhd:628$5384 ($xor).
Removed top 3 bits (of 8) from port B of cell aes128_fast.$verific$xor_3472$aes_package.vhd:628$5390 ($xor).
Removed top 3 bits (of 8) from port B of cell aes128_fast.$verific$xor_3497$aes_package.vhd:628$5396 ($xor).
Removed top 3 bits (of 8) from port B of cell aes128_fast.$verific$xor_3522$aes_package.vhd:628$5402 ($xor).
Removed top 3 bits (of 8) from port B of cell aes128_fast.$verific$xor_3547$aes_package.vhd:628$5408 ($xor).
Removed top 3 bits (of 8) from port B of cell aes128_fast.$verific$xor_3572$aes_package.vhd:628$5414 ($xor).
Removed top 3 bits (of 8) from port B of cell aes128_fast.$verific$xor_3597$aes_package.vhd:628$5420 ($xor).
Removed top 3 bits (of 8) from port B of cell aes128_fast.$verific$xor_3622$aes_package.vhd:628$5426 ($xor).
Removed top 3 bits (of 8) from port B of cell aes128_fast.$verific$xor_3647$aes_package.vhd:628$5432 ($xor).
Removed top 3 bits (of 8) from port B of cell aes128_fast.$verific$xor_3672$aes_package.vhd:628$5438 ($xor).
Removed top 3 bits (of 8) from port B of cell aes128_fast.$verific$xor_3697$aes_package.vhd:628$5444 ($xor).
Removed top 3 bits (of 8) from port B of cell aes128_fast.$verific$xor_3722$aes_package.vhd:650$5451 ($xor).
Removed top 3 bits (of 8) from port B of cell aes128_fast.$verific$xor_3732$aes_package.vhd:655$5454 ($xor).
Removed top 3 bits (of 8) from port B of cell aes128_fast.$verific$xor_3755$aes_package.vhd:667$5462 ($xor).
Removed top 3 bits (of 8) from port B of cell aes128_fast.$verific$xor_3765$aes_package.vhd:672$5465 ($xor).
Removed top 3 bits (of 8) from port B of cell aes128_fast.$verific$xor_3788$aes_package.vhd:684$5477 ($xor).
Removed top 3 bits (of 8) from port B of cell aes128_fast.$verific$xor_3798$aes_package.vhd:689$5487 ($xor).
Removed top 3 bits (of 8) from port B of cell aes128_fast.$verific$xor_3821$aes_package.vhd:701$5509 ($xor).
Removed top 3 bits (of 8) from port B of cell aes128_fast.$verific$xor_3831$aes_package.vhd:706$5519 ($xor).
Removed top 3 bits (of 8) from port B of cell aes128_fast.$verific$xor_3862$aes_package.vhd:650$5537 ($xor).
Removed top 3 bits (of 8) from port B of cell aes128_fast.$verific$xor_3872$aes_package.vhd:655$5540 ($xor).
Removed top 3 bits (of 8) from port B of cell aes128_fast.$verific$xor_3895$aes_package.vhd:667$5546 ($xor).
Removed top 3 bits (of 8) from port B of cell aes128_fast.$verific$xor_3905$aes_package.vhd:672$5549 ($xor).
Removed top 3 bits (of 8) from port B of cell aes128_fast.$verific$xor_3928$aes_package.vhd:684$5561 ($xor).
Removed top 3 bits (of 8) from port B of cell aes128_fast.$verific$xor_3938$aes_package.vhd:689$5571 ($xor).
Removed top 3 bits (of 8) from port B of cell aes128_fast.$verific$xor_3961$aes_package.vhd:701$5592 ($xor).
Removed top 3 bits (of 8) from port B of cell aes128_fast.$verific$xor_3971$aes_package.vhd:706$5602 ($xor).
Removed top 3 bits (of 8) from port B of cell aes128_fast.$verific$xor_4002$aes_package.vhd:650$5615 ($xor).
Removed top 3 bits (of 8) from port B of cell aes128_fast.$verific$xor_4012$aes_package.vhd:655$5618 ($xor).
Removed top 3 bits (of 8) from port B of cell aes128_fast.$verific$xor_4035$aes_package.vhd:667$5624 ($xor).
Removed top 3 bits (of 8) from port B of cell aes128_fast.$verific$xor_4045$aes_package.vhd:672$5627 ($xor).
Removed top 3 bits (of 8) from port B of cell aes128_fast.$verific$xor_4068$aes_package.vhd:684$5639 ($xor).
Removed top 3 bits (of 8) from port B of cell aes128_fast.$verific$xor_4078$aes_package.vhd:689$5649 ($xor).
Removed top 3 bits (of 8) from port B of cell aes128_fast.$verific$xor_4101$aes_package.vhd:701$5670 ($xor).
Removed top 3 bits (of 8) from port B of cell aes128_fast.$verific$xor_4111$aes_package.vhd:706$5680 ($xor).
Removed top 3 bits (of 8) from port B of cell aes128_fast.$verific$xor_4142$aes_package.vhd:650$5693 ($xor).
Removed top 3 bits (of 8) from port B of cell aes128_fast.$verific$xor_4152$aes_package.vhd:655$5696 ($xor).
Removed top 3 bits (of 8) from port B of cell aes128_fast.$verific$xor_4175$aes_package.vhd:667$5702 ($xor).
Removed top 3 bits (of 8) from port B of cell aes128_fast.$verific$xor_4185$aes_package.vhd:672$5705 ($xor).
Removed top 3 bits (of 8) from port B of cell aes128_fast.$verific$xor_4208$aes_package.vhd:684$5717 ($xor).
Removed top 3 bits (of 8) from port B of cell aes128_fast.$verific$xor_4218$aes_package.vhd:689$5727 ($xor).
Removed top 3 bits (of 8) from port B of cell aes128_fast.$verific$xor_4241$aes_package.vhd:701$5748 ($xor).
Removed top 3 bits (of 8) from port B of cell aes128_fast.$verific$xor_4251$aes_package.vhd:706$5758 ($xor).
Removed top 3 bits (of 4) from port A of cell aes128_fast.$verific$equal_6258$aes128_fast.vhd:365$6438 ($eq).
Removed top 3 bits (of 4) from port B of cell aes128_fast.$verific$add_6333$aes128_fast.vhd:388$6493 ($add).
Removed top 1 bits (of 4) from port A of cell aes128_fast.$flatten\expand_key.$verific$equal_293$key_expander.vhd:154$6820 ($eq).
Removed top 1 bits (of 4) from port A of cell aes128_fast.$flatten\expand_key.$verific$equal_292$key_expander.vhd:153$6819 ($eq).
Removed top 1 bits (of 4) from port A of cell aes128_fast.$flatten\expand_key.$verific$equal_291$key_expander.vhd:152$6818 ($eq).
Removed top 1 bits (of 4) from port A of cell aes128_fast.$flatten\expand_key.$verific$equal_290$key_expander.vhd:151$6817 ($eq).
Removed top 2 bits (of 4) from port A of cell aes128_fast.$flatten\expand_key.$verific$equal_289$key_expander.vhd:150$6816 ($eq).
Removed top 2 bits (of 4) from port A of cell aes128_fast.$flatten\expand_key.$verific$equal_288$key_expander.vhd:149$6815 ($eq).
Removed top 1 bits (of 8) from wire aes128_fast.$verific$n10472$2829.
Removed top 1 bits (of 8) from wire aes128_fast.$verific$n11060$2871.
Removed top 1 bits (of 8) from wire aes128_fast.$verific$n11648$2913.

yosys> peepopt

3.15. Executing PEEPOPT pass (run peephole optimizers).

yosys> pmuxtree

3.16. Executing PMUXTREE pass.

yosys> opt_clean

3.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes128_fast..
Removed 2 unused cells and 7 unused wires.
<suppressed ~3 debug messages>

yosys> alumacc

3.18. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module aes128_fast:
  creating $macc model for $verific$add_6333$aes128_fast.vhd:388$6493 ($add).
  creating $alu model for $macc $verific$add_6333$aes128_fast.vhd:388$6493.
  creating $alu model for $verific$LessThan_6166$aes128_fast.vhd:329$6379 ($lt): new $alu
  creating $alu model for $verific$equal_6129$aes128_fast.vhd:319$6345 ($eq): merged with $verific$LessThan_6166$aes128_fast.vhd:329$6379.
  creating $alu cell for $verific$LessThan_6166$aes128_fast.vhd:329$6379, $verific$equal_6129$aes128_fast.vhd:319$6345: $auto$alumacc.cc:485:replace_alu$7003
  creating $alu cell for $verific$add_6333$aes128_fast.vhd:388$6493: $auto$alumacc.cc:485:replace_alu$7010
  created 2 $alu and 0 $macc cells.

yosys> opt

3.19. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes128_fast.
<suppressed ~2 debug messages>

yosys> opt_merge -nomux

3.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes128_fast'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes128_fast..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~241 debug messages>

yosys> opt_reduce

3.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes128_fast.
Performed a total of 0 changes.

yosys> opt_merge

3.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes128_fast'.
Removed a total of 0 cells.

yosys> opt_dff

3.19.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.19.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes128_fast..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.19.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes128_fast.

3.19.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.19.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes128_fast..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~241 debug messages>

yosys> opt_reduce

3.19.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes128_fast.
Performed a total of 0 changes.

yosys> opt_merge

3.19.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes128_fast'.
Removed a total of 0 cells.

yosys> opt_dff

3.19.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.19.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes128_fast..

yosys> opt_expr

3.19.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes128_fast.

3.19.16. Finished OPT passes. (There is nothing left to do.)

yosys> stat

3.20. Printing statistics.

=== aes128_fast ===

   Number of wires:               1177
   Number of wire bits:           9642
   Number of public wires:         311
   Number of public wire bits:    2875
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                694
     $adff                          53
     $adffe                         36
     $alu                            2
     $and                            5
     $bmux                          20
     $eq                            10
     $logic_not                      2
     $mux                          268
     $not                            7
     $or                             3
     $reduce_and                     2
     $reduce_bool                    1
     $reduce_or                      2
     $xor                          283


yosys> memory -nomap

3.21. Executing MEMORY pass.

yosys> opt_mem

3.21.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

yosys> opt_mem_priority

3.21.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

yosys> opt_mem_feedback

3.21.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

yosys> memory_dff

3.21.4. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

yosys> opt_clean

3.21.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes128_fast..

yosys> memory_share

3.21.6. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

yosys> opt_mem_widen

3.21.7. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

yosys> opt_clean

3.21.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes128_fast..

yosys> memory_collect

3.21.9. Executing MEMORY_COLLECT pass (generating $mem cells).

yosys> stat

3.22. Printing statistics.

=== aes128_fast ===

   Number of wires:               1177
   Number of wire bits:           9642
   Number of public wires:         311
   Number of public wire bits:    2875
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                694
     $adff                          53
     $adffe                         36
     $alu                            2
     $and                            5
     $bmux                          20
     $eq                            10
     $logic_not                      2
     $mux                          268
     $not                            7
     $or                             3
     $reduce_and                     2
     $reduce_bool                    1
     $reduce_or                      2
     $xor                          283


yosys> opt_clean

3.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes128_fast..

yosys> stat

3.24. Printing statistics.

=== aes128_fast ===

   Number of wires:               1177
   Number of wire bits:           9642
   Number of public wires:         311
   Number of public wire bits:    2875
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                694
     $adff                          53
     $adffe                         36
     $alu                            2
     $and                            5
     $bmux                          20
     $eq                            10
     $logic_not                      2
     $mux                          268
     $not                            7
     $or                             3
     $reduce_and                     2
     $reduce_bool                    1
     $reduce_or                      2
     $xor                          283


yosys> techmap -map +/techmap.v -map +/rapidsilicon/genesis/arith_map.v

3.25. Executing TECHMAP pass (map to technology primitives).

3.25.1. Executing Verilog-2005 frontend: /home/users/aram/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/aram/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.25.2. Executing Verilog-2005 frontend: /home/users/aram/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/arith_map.v
Parsing Verilog input from `/home/users/aram/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_rs_alu'.
Successfully finished Verilog frontend.

3.25.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $mux.
Using template $paramod$740b056ede97228d3eae64ea2fdc81f0a33e0fe7\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $adffe.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $bmux.
Using extmapper simplemap for cells of type $adff.
Using template $paramod$32a7b7b86c07519b7537abc18e96f0331f97914d\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $eq.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000100 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
No more expansions possible.
<suppressed ~1056 debug messages>

yosys> stat

3.26. Printing statistics.

=== aes128_fast ===

   Number of wires:               1456
   Number of wire bits:          93713
   Number of public wires:         311
   Number of public wire bits:    2875
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:              90006
     $_AND_                         29
     $_DFFE_PP0P_                  390
     $_DFF_PP0_                    396
     $_MUX_                      83927
     $_NOT_                         27
     $_OR_                          83
     $_XOR_                       5154


yosys> opt

3.27. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.27.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes128_fast.
<suppressed ~38920 debug messages>

yosys> opt_merge -nomux

3.27.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes128_fast'.
<suppressed ~95229 debug messages>
Removed a total of 31743 cells.

yosys> opt_muxtree

3.27.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes128_fast..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.27.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes128_fast.
Performed a total of 0 changes.

yosys> opt_merge

3.27.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes128_fast'.
Removed a total of 0 cells.

yosys> opt_dff

3.27.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.27.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes128_fast..
Removed 613 unused cells and 376 unused wires.
<suppressed ~614 debug messages>

yosys> opt_expr

3.27.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes128_fast.
<suppressed ~292 debug messages>

3.27.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.27.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes128_fast..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.27.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes128_fast.
Performed a total of 0 changes.

yosys> opt_merge

3.27.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes128_fast'.
Removed a total of 0 cells.

yosys> opt_dff

3.27.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.27.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes128_fast..
Removed 0 unused cells and 5 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.27.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes128_fast.

3.27.16. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.27.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes128_fast..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.27.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes128_fast.
Performed a total of 0 changes.

yosys> opt_merge

3.27.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes128_fast'.
Removed a total of 0 cells.

yosys> opt_dff

3.27.20. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.27.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes128_fast..

yosys> opt_expr

3.27.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes128_fast.

3.27.23. Finished OPT passes. (There is nothing left to do.)

yosys> opt -fast -full

3.28. Executing OPT pass (performing simple optimizations).

yosys> opt_expr -full

3.28.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes128_fast.
<suppressed ~674 debug messages>

yosys> opt_merge

3.28.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes128_fast'.
Removed a total of 0 cells.

yosys> opt_dff

3.28.3. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.28.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes128_fast..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

3.28.5. Finished fast OPT passes.

yosys> memory_map

3.29. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

yosys> opt -full

3.30. Executing OPT pass (performing simple optimizations).

yosys> opt_expr -full

3.30.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes128_fast.

yosys> opt_merge -nomux

3.30.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes128_fast'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.30.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes128_fast..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce -full

3.30.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes128_fast.
Performed a total of 0 changes.

yosys> opt_merge

3.30.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes128_fast'.
Removed a total of 0 cells.

yosys> opt_share

3.30.6. Executing OPT_SHARE pass.
    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$73260 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$73244
        $auto$simplemap.cc:86:simplemap_bitop$73252

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$73262 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$73246
        $auto$simplemap.cc:86:simplemap_bitop$73254

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$73263 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$73247
        $auto$simplemap.cc:86:simplemap_bitop$73255

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$73284 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$73268
        $auto$simplemap.cc:86:simplemap_bitop$73276

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$73286 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$73270
        $auto$simplemap.cc:86:simplemap_bitop$73278

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$73287 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$73271
        $auto$simplemap.cc:86:simplemap_bitop$73279

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$73308 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$73292
        $auto$simplemap.cc:86:simplemap_bitop$73300

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$73310 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$73294
        $auto$simplemap.cc:86:simplemap_bitop$73302

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$73311 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$73295
        $auto$simplemap.cc:86:simplemap_bitop$73303

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$73332 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$73316
        $auto$simplemap.cc:86:simplemap_bitop$73324

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$73334 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$73318
        $auto$simplemap.cc:86:simplemap_bitop$73326

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$73335 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$73319
        $auto$simplemap.cc:86:simplemap_bitop$73327

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$73356 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$73340
        $auto$simplemap.cc:86:simplemap_bitop$73348

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$73358 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$73342
        $auto$simplemap.cc:86:simplemap_bitop$73350

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$73359 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$73343
        $auto$simplemap.cc:86:simplemap_bitop$73351

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$73380 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$73364
        $auto$simplemap.cc:86:simplemap_bitop$73372

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$73382 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$73366
        $auto$simplemap.cc:86:simplemap_bitop$73374

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$73383 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$73367
        $auto$simplemap.cc:86:simplemap_bitop$73375

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$73404 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$73388
        $auto$simplemap.cc:86:simplemap_bitop$73396

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$73406 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$73390
        $auto$simplemap.cc:86:simplemap_bitop$73398

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$73407 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$73391
        $auto$simplemap.cc:86:simplemap_bitop$73399

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$73428 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$73412
        $auto$simplemap.cc:86:simplemap_bitop$73420

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$73430 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$73414
        $auto$simplemap.cc:86:simplemap_bitop$73422

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$73431 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$73415
        $auto$simplemap.cc:86:simplemap_bitop$73423

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$73452 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$73436
        $auto$simplemap.cc:86:simplemap_bitop$73444

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$73454 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$73438
        $auto$simplemap.cc:86:simplemap_bitop$73446

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$73455 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$73439
        $auto$simplemap.cc:86:simplemap_bitop$73447

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$73476 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$73460
        $auto$simplemap.cc:86:simplemap_bitop$73468

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$73478 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$73462
        $auto$simplemap.cc:86:simplemap_bitop$73470

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$73479 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$73463
        $auto$simplemap.cc:86:simplemap_bitop$73471

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$73500 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$73484
        $auto$simplemap.cc:86:simplemap_bitop$73492

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$73502 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$73486
        $auto$simplemap.cc:86:simplemap_bitop$73494

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$73503 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$73487
        $auto$simplemap.cc:86:simplemap_bitop$73495

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$73524 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$73508
        $auto$simplemap.cc:86:simplemap_bitop$73516

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$73526 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$73510
        $auto$simplemap.cc:86:simplemap_bitop$73518

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$73527 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$73511
        $auto$simplemap.cc:86:simplemap_bitop$73519

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$73548 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$73532
        $auto$simplemap.cc:86:simplemap_bitop$73540

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$73550 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$73534
        $auto$simplemap.cc:86:simplemap_bitop$73542

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$73551 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$73535
        $auto$simplemap.cc:86:simplemap_bitop$73543

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$73572 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$73556
        $auto$simplemap.cc:86:simplemap_bitop$73564

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$73574 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$73558
        $auto$simplemap.cc:86:simplemap_bitop$73566

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$73575 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$73559
        $auto$simplemap.cc:86:simplemap_bitop$73567

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$73596 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$73580
        $auto$simplemap.cc:86:simplemap_bitop$73588

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$73598 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$73582
        $auto$simplemap.cc:86:simplemap_bitop$73590

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$73599 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$73583
        $auto$simplemap.cc:86:simplemap_bitop$73591

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$73620 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$73604
        $auto$simplemap.cc:86:simplemap_bitop$73612

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$73622 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$73606
        $auto$simplemap.cc:86:simplemap_bitop$73614

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$73623 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$73607
        $auto$simplemap.cc:86:simplemap_bitop$73615

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$80564 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$97236
        $auto$simplemap.cc:86:simplemap_bitop$97244

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$80565 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$97237
        $auto$simplemap.cc:86:simplemap_bitop$97245

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$80566 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$97238
        $auto$simplemap.cc:86:simplemap_bitop$97246

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$80567 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$97239
        $auto$simplemap.cc:86:simplemap_bitop$97247

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$80568 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$97240
        $auto$simplemap.cc:86:simplemap_bitop$97248

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$80569 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$97241
        $auto$simplemap.cc:86:simplemap_bitop$97249

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$80570 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$97242
        $auto$simplemap.cc:86:simplemap_bitop$97250

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$80571 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$97243
        $auto$simplemap.cc:86:simplemap_bitop$97251

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$80572 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$97252
        $auto$simplemap.cc:86:simplemap_bitop$97260

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$80573 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$97253
        $auto$simplemap.cc:86:simplemap_bitop$97261

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$80574 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$97254
        $auto$simplemap.cc:86:simplemap_bitop$97262

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$80575 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$97255
        $auto$simplemap.cc:86:simplemap_bitop$97263

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$80576 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$97256
        $auto$simplemap.cc:86:simplemap_bitop$97264

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$80577 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$97257
        $auto$simplemap.cc:86:simplemap_bitop$97265

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$80578 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$97258
        $auto$simplemap.cc:86:simplemap_bitop$97266

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$80579 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$97259
        $auto$simplemap.cc:86:simplemap_bitop$97267

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$80580 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$97268
        $auto$simplemap.cc:86:simplemap_bitop$97276

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$80581 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$97269
        $auto$simplemap.cc:86:simplemap_bitop$97277

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$80582 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$97270
        $auto$simplemap.cc:86:simplemap_bitop$97278

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$80583 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$97271
        $auto$simplemap.cc:86:simplemap_bitop$97279

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$80584 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$97272
        $auto$simplemap.cc:86:simplemap_bitop$97280

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$80585 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$97273
        $auto$simplemap.cc:86:simplemap_bitop$97281

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$80586 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$97274
        $auto$simplemap.cc:86:simplemap_bitop$97282

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$80587 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$97275
        $auto$simplemap.cc:86:simplemap_bitop$97283

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$80588 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$97284
        $auto$simplemap.cc:86:simplemap_bitop$97292

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$80589 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$97285
        $auto$simplemap.cc:86:simplemap_bitop$97293

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$80590 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$97286
        $auto$simplemap.cc:86:simplemap_bitop$97294

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$80591 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$97287
        $auto$simplemap.cc:86:simplemap_bitop$97295

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$80592 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$97288
        $auto$simplemap.cc:86:simplemap_bitop$97296

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$80593 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$97289
        $auto$simplemap.cc:86:simplemap_bitop$97297

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$80594 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$97290
        $auto$simplemap.cc:86:simplemap_bitop$97298

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$80595 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$97291
        $auto$simplemap.cc:86:simplemap_bitop$97299

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$80596 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$97172
        $auto$simplemap.cc:86:simplemap_bitop$97180

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$80597 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$97173
        $auto$simplemap.cc:86:simplemap_bitop$97181

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$80598 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$97174
        $auto$simplemap.cc:86:simplemap_bitop$97182

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$80599 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$97175
        $auto$simplemap.cc:86:simplemap_bitop$97183

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$80600 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$97176
        $auto$simplemap.cc:86:simplemap_bitop$97184

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$80601 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$97177
        $auto$simplemap.cc:86:simplemap_bitop$97185

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$80602 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$97178
        $auto$simplemap.cc:86:simplemap_bitop$97186

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$80603 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$97179
        $auto$simplemap.cc:86:simplemap_bitop$97187

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$80604 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$97188
        $auto$simplemap.cc:86:simplemap_bitop$97196

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$80605 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$97189
        $auto$simplemap.cc:86:simplemap_bitop$97197

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$80606 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$97190
        $auto$simplemap.cc:86:simplemap_bitop$97198

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$80607 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$97191
        $auto$simplemap.cc:86:simplemap_bitop$97199

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$80608 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$97192
        $auto$simplemap.cc:86:simplemap_bitop$97200

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$80609 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$97193
        $auto$simplemap.cc:86:simplemap_bitop$97201

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$80610 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$97194
        $auto$simplemap.cc:86:simplemap_bitop$97202

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$80611 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$97195
        $auto$simplemap.cc:86:simplemap_bitop$97203

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$80612 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$97204
        $auto$simplemap.cc:86:simplemap_bitop$97212

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$80613 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$97205
        $auto$simplemap.cc:86:simplemap_bitop$97213

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$80614 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$97206
        $auto$simplemap.cc:86:simplemap_bitop$97214

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$80615 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$97207
        $auto$simplemap.cc:86:simplemap_bitop$97215

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$80616 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$97208
        $auto$simplemap.cc:86:simplemap_bitop$97216

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$80617 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$97209
        $auto$simplemap.cc:86:simplemap_bitop$97217

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$80618 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$97210
        $auto$simplemap.cc:86:simplemap_bitop$97218

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$80619 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$97211
        $auto$simplemap.cc:86:simplemap_bitop$97219

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$80620 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$97220
        $auto$simplemap.cc:86:simplemap_bitop$97228

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$80621 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$97221
        $auto$simplemap.cc:86:simplemap_bitop$97229

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$80622 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$97222
        $auto$simplemap.cc:86:simplemap_bitop$97230

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$80623 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$97223
        $auto$simplemap.cc:86:simplemap_bitop$97231

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$80624 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$97224
        $auto$simplemap.cc:86:simplemap_bitop$97232

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$80625 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$97225
        $auto$simplemap.cc:86:simplemap_bitop$97233

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$80626 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$97226
        $auto$simplemap.cc:86:simplemap_bitop$97234

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$80627 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$97227
        $auto$simplemap.cc:86:simplemap_bitop$97235

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$80628 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$97108
        $auto$simplemap.cc:86:simplemap_bitop$97116

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$80629 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$97109
        $auto$simplemap.cc:86:simplemap_bitop$97117

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$80630 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$97110
        $auto$simplemap.cc:86:simplemap_bitop$97118

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$80631 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$97111
        $auto$simplemap.cc:86:simplemap_bitop$97119

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$80632 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$97112
        $auto$simplemap.cc:86:simplemap_bitop$97120

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$80633 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$97113
        $auto$simplemap.cc:86:simplemap_bitop$97121

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$80634 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$97114
        $auto$simplemap.cc:86:simplemap_bitop$97122

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$80635 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$97115
        $auto$simplemap.cc:86:simplemap_bitop$97123

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$80636 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$97124
        $auto$simplemap.cc:86:simplemap_bitop$97132

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$80637 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$97125
        $auto$simplemap.cc:86:simplemap_bitop$97133

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$80638 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$97126
        $auto$simplemap.cc:86:simplemap_bitop$97134

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$80639 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$97127
        $auto$simplemap.cc:86:simplemap_bitop$97135

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$80640 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$97128
        $auto$simplemap.cc:86:simplemap_bitop$97136

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$80641 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$97129
        $auto$simplemap.cc:86:simplemap_bitop$97137

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$80642 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$97130
        $auto$simplemap.cc:86:simplemap_bitop$97138

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$80643 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$97131
        $auto$simplemap.cc:86:simplemap_bitop$97139

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$80644 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$97140
        $auto$simplemap.cc:86:simplemap_bitop$97148

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$80645 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$97141
        $auto$simplemap.cc:86:simplemap_bitop$97149

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$80646 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$97142
        $auto$simplemap.cc:86:simplemap_bitop$97150

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$80647 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$97143
        $auto$simplemap.cc:86:simplemap_bitop$97151

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$80648 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$97144
        $auto$simplemap.cc:86:simplemap_bitop$97152

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$80649 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$97145
        $auto$simplemap.cc:86:simplemap_bitop$97153

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$80650 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$97146
        $auto$simplemap.cc:86:simplemap_bitop$97154

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$80651 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$97147
        $auto$simplemap.cc:86:simplemap_bitop$97155

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$80652 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$97156
        $auto$simplemap.cc:86:simplemap_bitop$97164

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$80653 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$97157
        $auto$simplemap.cc:86:simplemap_bitop$97165

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$80654 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$97158
        $auto$simplemap.cc:86:simplemap_bitop$97166

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$80655 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$97159
        $auto$simplemap.cc:86:simplemap_bitop$97167

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$80656 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$97160
        $auto$simplemap.cc:86:simplemap_bitop$97168

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$80657 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$97161
        $auto$simplemap.cc:86:simplemap_bitop$97169

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$80658 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$97162
        $auto$simplemap.cc:86:simplemap_bitop$97170

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$80659 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$97163
        $auto$simplemap.cc:86:simplemap_bitop$97171

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$84428 in front of them:
        $auto$simplemap.cc:312:simplemap_bmux$84043
        $auto$simplemap.cc:312:simplemap_bmux$84027

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$88524 in front of them:
        $auto$simplemap.cc:312:simplemap_bmux$88131
        $auto$simplemap.cc:312:simplemap_bmux$88123

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$92604 in front of them:
        $auto$simplemap.cc:312:simplemap_bmux$92227
        $auto$simplemap.cc:312:simplemap_bmux$92211

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$96700 in front of them:
        $auto$simplemap.cc:312:simplemap_bmux$96307
        $auto$simplemap.cc:312:simplemap_bmux$96299


yosys> opt_dff

3.30.7. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.30.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes128_fast..
Removed 0 unused cells and 40 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr -full

3.30.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes128_fast.
<suppressed ~148 debug messages>

3.30.10. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.30.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes128_fast..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~148 debug messages>

yosys> opt_reduce -full

3.30.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes128_fast.
Performed a total of 0 changes.

yosys> opt_merge

3.30.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes128_fast'.
Removed a total of 0 cells.

yosys> opt_share

3.30.14. Executing OPT_SHARE pass.

yosys> opt_dff

3.30.15. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.30.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes128_fast..
Removed 0 unused cells and 112 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr -full

3.30.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes128_fast.

3.30.18. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.30.19. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes128_fast..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~148 debug messages>

yosys> opt_reduce -full

3.30.20. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes128_fast.
Performed a total of 0 changes.

yosys> opt_merge

3.30.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes128_fast'.
Removed a total of 0 cells.

yosys> opt_share

3.30.22. Executing OPT_SHARE pass.

yosys> opt_dff

3.30.23. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.30.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes128_fast..

yosys> opt_expr -full

3.30.25. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes128_fast.

3.30.26. Finished OPT passes. (There is nothing left to do.)

yosys> abc -dff

3.31. Executing ABC pass (technology mapping using ABC).

3.31.1. Summary of detected clock domains:
  2690 cells in clk=\clk, en=$verific$n32216$2045, arst=\reset, srst={ }
  5 cells in clk=\clk, en=$auto$opt_dff.cc:194:make_patterns_logic$6918, arst=\reset, srst={ }
  15759 cells in clk=\clk, en={ }, arst=\reset, srst={ }
  194 cells in clk=\clk, en=$auto$opt_dff.cc:219:make_patterns_logic$6871, arst=\reset, srst={ }
  29 cells in clk=\clk, en=$verific$n31999$2036, arst=\reset, srst={ }
  193 cells in clk=\clk, en=$verific$n296$4, arst=\reset, srst={ }

3.31.2. Extracting gate netlist of module `\aes128_fast' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $verific$n32216$2045, asynchronously reset by \reset
Extracted 2642 gates and 3079 wires to a netlist network with 437 inputs and 370 outputs.

3.31.2.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.31.2.2. Re-integrating ABC results.
ABC RESULTS:               DFF cells:      128
ABC RESULTS:               NOT cells:       50
ABC RESULTS:               MUX cells:      132
ABC RESULTS:             ORNOT cells:       11
ABC RESULTS:            ANDNOT cells:        4
ABC RESULTS:                OR cells:      210
ABC RESULTS:              NAND cells:      568
ABC RESULTS:               AND cells:      224
ABC RESULTS:               BUF cells:      128
ABC RESULTS:               XOR cells:      291
ABC RESULTS:              XNOR cells:     1361
ABC RESULTS:        internal signals:     2272
ABC RESULTS:           input signals:      437
ABC RESULTS:          output signals:      370
Removing temp directory.

3.31.3. Extracting gate netlist of module `\aes128_fast' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:194:make_patterns_logic$6918, asynchronously reset by \reset
Extracted 5 gates and 8 wires to a netlist network with 3 inputs and 2 outputs.

3.31.3.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.31.3.2. Re-integrating ABC results.
ABC RESULTS:               DFF cells:        1
ABC RESULTS:               NOT cells:        1
ABC RESULTS:                OR cells:        1
ABC RESULTS:              NAND cells:        1
ABC RESULTS:               BUF cells:        1
ABC RESULTS:        internal signals:        3
ABC RESULTS:           input signals:        3
ABC RESULTS:          output signals:        2
Removing temp directory.

3.31.4. Extracting gate netlist of module `\aes128_fast' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, asynchronously reset by \reset
Extracted 15659 gates and 16158 wires to a netlist network with 497 inputs and 593 outputs.

3.31.4.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.31.4.2. Re-integrating ABC results.
ABC RESULTS:               DFF cells:      396
ABC RESULTS:               NOT cells:      101
ABC RESULTS:            ANDNOT cells:      946
ABC RESULTS:                OR cells:     1558
ABC RESULTS:               NOR cells:      455
ABC RESULTS:              NAND cells:     8727
ABC RESULTS:             ORNOT cells:     1089
ABC RESULTS:               AND cells:     4411
ABC RESULTS:               MUX cells:     2370
ABC RESULTS:              XNOR cells:      890
ABC RESULTS:               XOR cells:      383
ABC RESULTS:               BUF cells:      101
ABC RESULTS:        internal signals:    15068
ABC RESULTS:           input signals:      497
ABC RESULTS:          output signals:      593
Removing temp directory.

3.31.5. Extracting gate netlist of module `\aes128_fast' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:219:make_patterns_logic$6871, asynchronously reset by \reset
Extracted 194 gates and 324 wires to a netlist network with 130 inputs and 129 outputs.

3.31.5.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.31.5.2. Re-integrating ABC results.
ABC RESULTS:               DFF cells:      128
ABC RESULTS:            ANDNOT cells:        1
ABC RESULTS:               XOR cells:       64
ABC RESULTS:               BUF cells:      192
ABC RESULTS:        internal signals:       65
ABC RESULTS:           input signals:      130
ABC RESULTS:          output signals:      129
Removing temp directory.

3.31.6. Extracting gate netlist of module `\aes128_fast' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $verific$n31999$2036, asynchronously reset by \reset
Extracted 29 gates and 32 wires to a netlist network with 2 inputs and 12 outputs.

3.31.6.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.31.6.2. Re-integrating ABC results.
ABC RESULTS:               DFF cells:        5
ABC RESULTS:               NOT cells:        3
ABC RESULTS:             ORNOT cells:        4
ABC RESULTS:              NAND cells:        1
ABC RESULTS:               XOR cells:        1
ABC RESULTS:                OR cells:        4
ABC RESULTS:               AND cells:        7
ABC RESULTS:               NOR cells:        2
ABC RESULTS:        internal signals:       18
ABC RESULTS:           input signals:        2
ABC RESULTS:          output signals:       12
Removing temp directory.

3.31.7. Extracting gate netlist of module `\aes128_fast' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $verific$n296$4, asynchronously reset by \reset
Extracted 193 gates and 323 wires to a netlist network with 130 inputs and 129 outputs.

3.31.7.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.31.7.2. Re-integrating ABC results.
ABC RESULTS:               DFF cells:      128
ABC RESULTS:               AND cells:        1
ABC RESULTS:               XOR cells:       64
ABC RESULTS:               BUF cells:      192
ABC RESULTS:        internal signals:       64
ABC RESULTS:           input signals:      130
ABC RESULTS:          output signals:      129
Removing temp directory.

yosys> abc -dff

3.32. Executing ABC pass (technology mapping using ABC).

3.32.1. Summary of detected clock domains:
  4 cells in clk=\clk, en=$abc$101619$auto$opt_dff.cc:194:make_patterns_logic$6918, arst=\reset, srst={ }
  27 cells in clk=\clk, en=$abc$123439$verific$n31999$2036, arst=\reset, srst={ }
  2954 cells in clk=\clk, en=$abc$98511$verific$n32216$2045, arst=\reset, srst={ }
  257 cells in clk=\clk, en=$abc$123053$auto$opt_dff.cc:219:make_patterns_logic$6871, arst=\reset, srst={ }
  21435 cells in clk=\clk, en={ }, arst=\reset, srst={ }
  193 cells in clk=\clk, en=$abc$123467$verific$n296$4, arst=\reset, srst={ }

3.32.2. Extracting gate netlist of module `\aes128_fast' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$101619$auto$opt_dff.cc:194:make_patterns_logic$6918, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.32.2.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.32.2.2. Re-integrating ABC results.
ABC RESULTS:               DFF cells:        1
ABC RESULTS:               NOT cells:        1
ABC RESULTS:                OR cells:        1
ABC RESULTS:              NAND cells:        1
ABC RESULTS:               BUF cells:        1
ABC RESULTS:        internal signals:        2
ABC RESULTS:           input signals:        3
ABC RESULTS:          output signals:        2
Removing temp directory.

3.32.3. Extracting gate netlist of module `\aes128_fast' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$123439$verific$n31999$2036, asynchronously reset by \reset
Extracted 27 gates and 29 wires to a netlist network with 2 inputs and 12 outputs.

3.32.3.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.32.3.2. Re-integrating ABC results.
ABC RESULTS:               DFF cells:        5
ABC RESULTS:               NOT cells:        3
ABC RESULTS:              NAND cells:        1
ABC RESULTS:             ORNOT cells:        4
ABC RESULTS:            ANDNOT cells:        1
ABC RESULTS:               XOR cells:        1
ABC RESULTS:                OR cells:        4
ABC RESULTS:               AND cells:        8
ABC RESULTS:        internal signals:       15
ABC RESULTS:           input signals:        2
ABC RESULTS:          output signals:       12
Removing temp directory.

3.32.4. Extracting gate netlist of module `\aes128_fast' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$98511$verific$n32216$2045, asynchronously reset by \reset
Extracted 2906 gates and 3401 wires to a netlist network with 495 inputs and 370 outputs.

3.32.4.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.32.4.2. Re-integrating ABC results.
ABC RESULTS:               DFF cells:      128
ABC RESULTS:               NOT cells:       85
ABC RESULTS:            ANDNOT cells:        9
ABC RESULTS:             ORNOT cells:       23
ABC RESULTS:                OR cells:      254
ABC RESULTS:               NOR cells:       30
ABC RESULTS:              NAND cells:      416
ABC RESULTS:               AND cells:      243
ABC RESULTS:               MUX cells:      194
ABC RESULTS:               XOR cells:      314
ABC RESULTS:              XNOR cells:     1161
ABC RESULTS:               BUF cells:      128
ABC RESULTS:        internal signals:     2536
ABC RESULTS:           input signals:      495
ABC RESULTS:          output signals:      370
Removing temp directory.

3.32.5. Extracting gate netlist of module `\aes128_fast' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$123053$auto$opt_dff.cc:219:make_patterns_logic$6871, asynchronously reset by \reset
Extracted 257 gates and 452 wires to a netlist network with 195 inputs and 129 outputs.

3.32.5.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.32.5.2. Re-integrating ABC results.
ABC RESULTS:               DFF cells:      128
ABC RESULTS:            ANDNOT cells:        1
ABC RESULTS:               XOR cells:       64
ABC RESULTS:               MUX cells:       64
ABC RESULTS:               BUF cells:      128
ABC RESULTS:        internal signals:      128
ABC RESULTS:           input signals:      195
ABC RESULTS:          output signals:      129
Removing temp directory.

3.32.6. Extracting gate netlist of module `\aes128_fast' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, asynchronously reset by \reset
Extracted 21335 gates and 21832 wires to a netlist network with 497 inputs and 683 outputs.

3.32.6.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.32.6.2. Re-integrating ABC results.
ABC RESULTS:               DFF cells:      396
ABC RESULTS:               NOT cells:       97
ABC RESULTS:                OR cells:     1550
ABC RESULTS:            ANDNOT cells:      922
ABC RESULTS:               NOR cells:      411
ABC RESULTS:              NAND cells:     9118
ABC RESULTS:             ORNOT cells:     1219
ABC RESULTS:               AND cells:     4921
ABC RESULTS:               MUX cells:     1683
ABC RESULTS:              XNOR cells:      946
ABC RESULTS:               BUF cells:      165
ABC RESULTS:               XOR cells:      465
ABC RESULTS:        internal signals:    20652
ABC RESULTS:           input signals:      497
ABC RESULTS:          output signals:      683
Removing temp directory.

3.32.7. Extracting gate netlist of module `\aes128_fast' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$123467$verific$n296$4, asynchronously reset by \reset
Extracted 193 gates and 323 wires to a netlist network with 130 inputs and 129 outputs.

3.32.7.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.32.7.2. Re-integrating ABC results.
ABC RESULTS:               DFF cells:      128
ABC RESULTS:               AND cells:        1
ABC RESULTS:               XOR cells:       64
ABC RESULTS:               BUF cells:      192
ABC RESULTS:        internal signals:       64
ABC RESULTS:           input signals:      130
ABC RESULTS:          output signals:      129
Removing temp directory.

yosys> abc -dff

3.33. Executing ABC pass (technology mapping using ABC).

3.33.1. Summary of detected clock domains:
  4 cells in clk=\clk, en=$abc$123853$abc$101619$auto$opt_dff.cc:194:make_patterns_logic$6918, arst=\reset, srst={ }
  27 cells in clk=\clk, en=$abc$123859$abc$123439$verific$n31999$2036, arst=\reset, srst={ }
  3093 cells in clk=\clk, en=$abc$123887$abc$98511$verific$n32216$2045, arst=\reset, srst={ }
  230 cells in clk=\clk, en=$abc$126873$abc$123053$auto$opt_dff.cc:219:make_patterns_logic$6871, arst=\reset, srst={ }
  21667 cells in clk=\clk, en={ }, arst=\reset, srst={ }
  193 cells in clk=\clk, en=$abc$149153$abc$123467$verific$n296$4, arst=\reset, srst={ }

3.33.2. Extracting gate netlist of module `\aes128_fast' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$123853$abc$101619$auto$opt_dff.cc:194:make_patterns_logic$6918, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.33.2.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.33.2.2. Re-integrating ABC results.
ABC RESULTS:               DFF cells:        1
ABC RESULTS:               NOT cells:        1
ABC RESULTS:                OR cells:        1
ABC RESULTS:              NAND cells:        1
ABC RESULTS:               BUF cells:        1
ABC RESULTS:        internal signals:        2
ABC RESULTS:           input signals:        3
ABC RESULTS:          output signals:        2
Removing temp directory.

3.33.3. Extracting gate netlist of module `\aes128_fast' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$123859$abc$123439$verific$n31999$2036, asynchronously reset by \reset
Extracted 27 gates and 28 wires to a netlist network with 1 inputs and 11 outputs.

3.33.3.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.33.3.2. Re-integrating ABC results.
ABC RESULTS:               DFF cells:        5
ABC RESULTS:                OR cells:        2
ABC RESULTS:             ORNOT cells:        2
ABC RESULTS:               NOR cells:        1
ABC RESULTS:               XOR cells:        1
ABC RESULTS:               MUX cells:        1
ABC RESULTS:              XNOR cells:        1
ABC RESULTS:               AND cells:        2
ABC RESULTS:              NAND cells:        3
ABC RESULTS:               NOT cells:        6
ABC RESULTS:        internal signals:       16
ABC RESULTS:           input signals:        1
ABC RESULTS:          output signals:       11
Removing temp directory.

3.33.4. Extracting gate netlist of module `\aes128_fast' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$123887$abc$98511$verific$n32216$2045, asynchronously reset by \reset
Extracted 3045 gates and 3707 wires to a netlist network with 662 inputs and 369 outputs.

3.33.4.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.33.4.2. Re-integrating ABC results.
ABC RESULTS:               DFF cells:      128
ABC RESULTS:               NOR cells:        1
ABC RESULTS:               NOT cells:       74
ABC RESULTS:            ANDNOT cells:        6
ABC RESULTS:             ORNOT cells:       42
ABC RESULTS:               MUX cells:      195
ABC RESULTS:                OR cells:      167
ABC RESULTS:               AND cells:      250
ABC RESULTS:              NAND cells:      629
ABC RESULTS:               XOR cells:      291
ABC RESULTS:              XNOR cells:     1182
ABC RESULTS:               BUF cells:      128
ABC RESULTS:        internal signals:     2676
ABC RESULTS:           input signals:      662
ABC RESULTS:          output signals:      369
Removing temp directory.

3.33.5. Extracting gate netlist of module `\aes128_fast' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$126873$abc$123053$auto$opt_dff.cc:219:make_patterns_logic$6871, asynchronously reset by \reset
Extracted 230 gates and 398 wires to a netlist network with 168 inputs and 129 outputs.

3.33.5.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.33.5.2. Re-integrating ABC results.
ABC RESULTS:               DFF cells:      128
ABC RESULTS:            ANDNOT cells:        1
ABC RESULTS:               MUX cells:       37
ABC RESULTS:               XOR cells:       64
ABC RESULTS:               BUF cells:      155
ABC RESULTS:        internal signals:      101
ABC RESULTS:           input signals:      168
ABC RESULTS:          output signals:      129
Removing temp directory.

3.33.6. Extracting gate netlist of module `\aes128_fast' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, asynchronously reset by \reset
Extracted 21567 gates and 22064 wires to a netlist network with 497 inputs and 845 outputs.

3.33.6.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.33.6.2. Re-integrating ABC results.
ABC RESULTS:               DFF cells:      396
ABC RESULTS:               NOT cells:       99
ABC RESULTS:                OR cells:     1548
ABC RESULTS:            ANDNOT cells:      953
ABC RESULTS:               NOR cells:      428
ABC RESULTS:              NAND cells:     8856
ABC RESULTS:             ORNOT cells:     1331
ABC RESULTS:               AND cells:     5164
ABC RESULTS:               MUX cells:     1513
ABC RESULTS:              XNOR cells:      984
ABC RESULTS:               XOR cells:      412
ABC RESULTS:               BUF cells:      138
ABC RESULTS:        internal signals:    20722
ABC RESULTS:           input signals:      497
ABC RESULTS:          output signals:      845
Removing temp directory.

3.33.7. Extracting gate netlist of module `\aes128_fast' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$149153$abc$123467$verific$n296$4, asynchronously reset by \reset
Extracted 193 gates and 323 wires to a netlist network with 130 inputs and 129 outputs.

3.33.7.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.33.7.2. Re-integrating ABC results.
ABC RESULTS:               DFF cells:      128
ABC RESULTS:               AND cells:        1
ABC RESULTS:               XOR cells:       64
ABC RESULTS:               BUF cells:      192
ABC RESULTS:        internal signals:       64
ABC RESULTS:           input signals:      130
ABC RESULTS:          output signals:      129
Removing temp directory.

yosys> opt_ffinv

3.34. Executing OPT_FFINV pass (push inverters through FFs).
Discovering LUTs.
Pushed 0 inverters.

yosys> opt -sat

3.35. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.35.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes128_fast.
<suppressed ~148 debug messages>

yosys> opt_merge -nomux

3.35.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes128_fast'.
<suppressed ~375 debug messages>
Removed a total of 125 cells.

yosys> opt_muxtree

3.35.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes128_fast..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~148 debug messages>

yosys> opt_reduce

3.35.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes128_fast.
Performed a total of 0 changes.

yosys> opt_merge

3.35.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes128_fast'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.35.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $abc$149545$auto$blifparse.cc:362:parse_blif$149548 ($_DFFE_PP0P_) from module aes128_fast (D = $abc$149545$new_n38_, Q = $abc$149545$lo2).

yosys> opt_clean

3.35.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes128_fast..
Removed 1 unused cells and 57719 unused wires.
<suppressed ~173 debug messages>

yosys> opt_expr

3.35.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes128_fast.

3.35.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.35.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes128_fast..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~148 debug messages>

yosys> opt_reduce

3.35.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes128_fast.
Performed a total of 0 changes.

yosys> opt_merge

3.35.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes128_fast'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.35.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.35.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes128_fast..

yosys> opt_expr

3.35.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes128_fast.

3.35.16. Finished OPT passes. (There is nothing left to do.)

yosys> abc -dff

3.36. Executing ABC pass (technology mapping using ABC).

3.36.1. Summary of detected clock domains:
  4 cells in clk=\clk, en=$auto$opt_dff.cc:219:make_patterns_logic$175260, arst=\reset, srst={ }
  257 cells in clk=\clk, en=$abc$123053$verific$n296$4, arst=\reset, srst={ }
  21440 cells in clk=\clk, en={ }, arst=\reset, srst={ }
  193 cells in clk=\clk, en=$abc$123053$auto$opt_dff.cc:219:make_patterns_logic$6871, arst=\reset, srst={ }
  3208 cells in clk=\clk, en=$abc$123887$abc$98511$verific$n32216$2045, arst=\reset, srst={ }
  17 cells in clk=\clk, en=$abc$123439$verific$n31999$2036, arst=\reset, srst={ }
  4 cells in clk=\clk, en=$abc$101619$auto$opt_dff.cc:194:make_patterns_logic$6918, arst=\reset, srst={ }

3.36.2. Extracting gate netlist of module `\aes128_fast' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:219:make_patterns_logic$175260, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 3 outputs.

3.36.2.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.36.2.2. Re-integrating ABC results.
ABC RESULTS:               DFF cells:        1
ABC RESULTS:               NOT cells:        1
ABC RESULTS:               AND cells:        1
ABC RESULTS:               NOR cells:        2
ABC RESULTS:        internal signals:        1
ABC RESULTS:           input signals:        3
ABC RESULTS:          output signals:        3
Removing temp directory.

3.36.3. Extracting gate netlist of module `\aes128_fast' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$123053$verific$n296$4, asynchronously reset by \reset
Extracted 257 gates and 452 wires to a netlist network with 195 inputs and 129 outputs.

3.36.3.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.36.3.2. Re-integrating ABC results.
ABC RESULTS:               DFF cells:      128
ABC RESULTS:               AND cells:        1
ABC RESULTS:               XOR cells:       64
ABC RESULTS:               MUX cells:       64
ABC RESULTS:               BUF cells:      128
ABC RESULTS:        internal signals:      128
ABC RESULTS:           input signals:      195
ABC RESULTS:          output signals:      129
Removing temp directory.

3.36.4. Extracting gate netlist of module `\aes128_fast' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, asynchronously reset by \reset
Extracted 21340 gates and 21837 wires to a netlist network with 497 inputs and 973 outputs.

3.36.4.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.36.4.2. Re-integrating ABC results.
ABC RESULTS:               DFF cells:      396
ABC RESULTS:               NOT cells:      117
ABC RESULTS:                OR cells:     1470
ABC RESULTS:            ANDNOT cells:      896
ABC RESULTS:               NOR cells:      368
ABC RESULTS:              NAND cells:     8807
ABC RESULTS:             ORNOT cells:     1311
ABC RESULTS:               AND cells:     5268
ABC RESULTS:               MUX cells:     1436
ABC RESULTS:              XNOR cells:      959
ABC RESULTS:               XOR cells:      402
ABC RESULTS:               BUF cells:      165
ABC RESULTS:        internal signals:    20367
ABC RESULTS:           input signals:      497
ABC RESULTS:          output signals:      973
Removing temp directory.

3.36.5. Extracting gate netlist of module `\aes128_fast' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$123053$auto$opt_dff.cc:219:make_patterns_logic$6871, asynchronously reset by \reset
Extracted 193 gates and 323 wires to a netlist network with 130 inputs and 129 outputs.

3.36.5.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.36.5.2. Re-integrating ABC results.
ABC RESULTS:               DFF cells:      128
ABC RESULTS:            ANDNOT cells:        1
ABC RESULTS:               XOR cells:       64
ABC RESULTS:               BUF cells:      192
ABC RESULTS:        internal signals:       64
ABC RESULTS:           input signals:      130
ABC RESULTS:          output signals:      129
Removing temp directory.

3.36.6. Extracting gate netlist of module `\aes128_fast' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$123887$abc$98511$verific$n32216$2045, asynchronously reset by \reset
Extracted 3160 gates and 3975 wires to a netlist network with 815 inputs and 369 outputs.

3.36.6.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.36.6.2. Re-integrating ABC results.
ABC RESULTS:               DFF cells:      128
ABC RESULTS:               NOT cells:       63
ABC RESULTS:            ANDNOT cells:       19
ABC RESULTS:               NOR cells:        4
ABC RESULTS:             ORNOT cells:       57
ABC RESULTS:               XOR cells:      326
ABC RESULTS:               MUX cells:      159
ABC RESULTS:                OR cells:      306
ABC RESULTS:               AND cells:      326
ABC RESULTS:              NAND cells:      716
ABC RESULTS:               BUF cells:      128
ABC RESULTS:              XNOR cells:     1115
ABC RESULTS:        internal signals:     2791
ABC RESULTS:           input signals:      815
ABC RESULTS:          output signals:      369
Removing temp directory.

3.36.7. Extracting gate netlist of module `\aes128_fast' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$123439$verific$n31999$2036, asynchronously reset by \reset
Extracted 17 gates and 19 wires to a netlist network with 2 inputs and 11 outputs.

3.36.7.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.36.7.2. Re-integrating ABC results.
ABC RESULTS:               DFF cells:        4
ABC RESULTS:             ORNOT cells:        2
ABC RESULTS:                OR cells:        3
ABC RESULTS:               AND cells:        3
ABC RESULTS:               BUF cells:        1
ABC RESULTS:              NAND cells:        3
ABC RESULTS:               NOT cells:        5
ABC RESULTS:        internal signals:        6
ABC RESULTS:           input signals:        2
ABC RESULTS:          output signals:       11
Removing temp directory.

3.36.8. Extracting gate netlist of module `\aes128_fast' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$101619$auto$opt_dff.cc:194:make_patterns_logic$6918, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.36.8.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.36.8.2. Re-integrating ABC results.
ABC RESULTS:               DFF cells:        1
ABC RESULTS:               NOT cells:        1
ABC RESULTS:                OR cells:        1
ABC RESULTS:              NAND cells:        1
ABC RESULTS:               BUF cells:        1
ABC RESULTS:        internal signals:        2
ABC RESULTS:           input signals:        3
ABC RESULTS:          output signals:        2
Removing temp directory.

yosys> opt_ffinv

3.37. Executing OPT_FFINV pass (push inverters through FFs).
Discovering LUTs.
Pushed 0 inverters.

yosys> abc -script /tmp/yosys_WCa2hy/abc_tmp_1.scr

3.38. Executing ABC pass (technology mapping using ABC).

3.38.1. Extracting gate netlist of module `\aes128_fast' to `<abc-temp-dir>/input.blif'..
Extracted 24342 gates and 25150 wires to a netlist network with 808 inputs and 752 outputs.

3.38.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + source /tmp/yosys_WCa2hy/abc_tmp_1.scr 
ABC:   #Luts =  4398  Max Lvl =  15  Avg Lvl =   5.84  [   1.21 sec. at Pass 0]
ABC:   #Luts =  3331  Max Lvl =  13  Avg Lvl =   5.18  [  68.24 sec. at Pass 1]
ABC:   #Luts =  3244  Max Lvl =  13  Avg Lvl =   5.08  [  10.31 sec. at Pass 2]
ABC:   #Luts =  3229  Max Lvl =  12  Avg Lvl =   5.04  [  26.16 sec. at Pass 3]
ABC:   #Luts =  3178  Max Lvl =  12  Avg Lvl =   4.90  [  12.00 sec. at Pass 4]
ABC:   #Luts =  3178  Max Lvl =  12  Avg Lvl =   4.90  [  28.92 sec. at Pass 5]
ABC:   #Luts =  3161  Max Lvl =  12  Avg Lvl =   4.92  [  15.34 sec. at Pass 6]
ABC:   #Luts =  3161  Max Lvl =  12  Avg Lvl =   4.92  [  29.14 sec. at Pass 7]
ABC:   #Luts =  3152  Max Lvl =  12  Avg Lvl =   4.94  [  13.22 sec. at Pass 8]
ABC:   #Luts =  3152  Max Lvl =  12  Avg Lvl =   4.94  [  27.04 sec. at Pass 9]
ABC:   #Luts =  3143  Max Lvl =  12  Avg Lvl =   4.93  [  12.59 sec. at Pass 10]
ABC:   #Luts =  3143  Max Lvl =  12  Avg Lvl =   4.93  [  28.56 sec. at Pass 11]
ABC:   #Luts =  3136  Max Lvl =  12  Avg Lvl =   4.91  [  13.02 sec. at Pass 12]
ABC:   #Luts =  3136  Max Lvl =  12  Avg Lvl =   4.91  [  26.76 sec. at Pass 13]
ABC:   #Luts =  3136  Max Lvl =  12  Avg Lvl =   4.91  [   0.86 sec. at Pass 14]
ABC: + write_blif <abc-temp-dir>/output.blif 

3.38.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:     3136
ABC RESULTS:        internal signals:    23590
ABC RESULTS:           input signals:      808
ABC RESULTS:          output signals:      752
Removing temp directory.

yosys> opt

3.39. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.39.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes128_fast.

yosys> opt_merge -nomux

3.39.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes128_fast'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.39.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes128_fast..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~148 debug messages>

yosys> opt_reduce

3.39.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes128_fast.
Performed a total of 0 changes.

yosys> opt_merge

3.39.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes128_fast'.
Removed a total of 0 cells.

yosys> opt_dff

3.39.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.39.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes128_fast..
Removed 0 unused cells and 52209 unused wires.
<suppressed ~49 debug messages>

yosys> opt_expr

3.39.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes128_fast.

3.39.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.39.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes128_fast..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~148 debug messages>

yosys> opt_reduce

3.39.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes128_fast.
Performed a total of 0 changes.

yosys> opt_merge

3.39.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes128_fast'.
Removed a total of 0 cells.

yosys> opt_dff

3.39.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.39.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes128_fast..

yosys> opt_expr

3.39.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes128_fast.

3.39.16. Finished OPT passes. (There is nothing left to do.)

yosys> opt_ffinv

3.40. Executing OPT_FFINV pass (push inverters through FFs).
Discovering LUTs.
Pushed 1 inverters.

yosys> stat

3.41. Printing statistics.

=== aes128_fast ===

   Number of wires:               3676
   Number of wire bits:           4495
   Number of public wires:          92
   Number of public wire bits:     911
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               3973
     $_DFFE_PP0P_                  389
     $_DFFE_PP1P_                    1
     $_DFF_PP0_                    396
     $lut                         3039
     $mux                          148


yosys> shregmap -minlen 8 -maxlen 20

3.42. Executing SHREGMAP pass (map shift registers).
Converted 0 dff cells into 0 shift registers.

yosys> dfflegalize -cell $_DFF_?_ 0 -cell $_DFF_???_ 0 -cell $_DFFE_????_ 0 -cell $_DFFSR_???_ 0 -cell $_DFFSRE_????_ 0 -cell $_DLATCHSR_PPP_ 0

3.43. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

yosys> stat

3.44. Printing statistics.

=== aes128_fast ===

   Number of wires:               3676
   Number of wire bits:           4495
   Number of public wires:          92
   Number of public wire bits:     911
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               3973
     $_DFFE_PP0P_                  389
     $_DFFE_PP1P_                    1
     $_DFF_PP0_                    396
     $lut                         3039
     $mux                          148


yosys> techmap -map +/techmap.v -map +/rapidsilicon/genesis/ffs_map.v

3.45. Executing TECHMAP pass (map to technology primitives).

3.45.1. Executing Verilog-2005 frontend: /home/users/aram/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/aram/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.45.2. Executing Verilog-2005 frontend: /home/users/aram/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/ffs_map.v
Parsing Verilog input from `/home/users/aram/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/ffs_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP0N_'.
Generating RTLIL representation for module `\$_DFFE_PN0P_'.
Generating RTLIL representation for module `\$_DFFE_PN0N_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP1N_'.
Generating RTLIL representation for module `\$_DFFE_PN1P_'.
Generating RTLIL representation for module `\$_DFFE_PN1N_'.
Generating RTLIL representation for module `\$_DFFSR_PPP_'.
Generating RTLIL representation for module `\$_DFFSR_PNP_'.
Generating RTLIL representation for module `\$_DFFSR_PNN_'.
Generating RTLIL representation for module `\$_DFFSR_PPN_'.
Generating RTLIL representation for module `\$_DFFSR_NPP_'.
Generating RTLIL representation for module `\$_DFFSR_NNP_'.
Generating RTLIL representation for module `\$_DFFSR_NNN_'.
Generating RTLIL representation for module `\$_DFFSR_NPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PNPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPNP_'.
Generating RTLIL representation for module `\$_DFFSRE_PNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PNPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PPNN_'.
Generating RTLIL representation for module `\$_DFFSRE_PNNN_'.
Generating RTLIL representation for module `\$_DLATCHSR_PPP_'.
Generating RTLIL representation for module `\$_DLATCHSR_NPP_'.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP0N_'.
Generating RTLIL representation for module `\$_DFFE_NN0P_'.
Generating RTLIL representation for module `\$_DFFE_NN0N_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_NP1N_'.
Generating RTLIL representation for module `\$_DFFE_NN1P_'.
Generating RTLIL representation for module `\$_DFFE_NN1N_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNPP_'.
Generating RTLIL representation for module `\$_DFFSRE_NPNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPN_'.
Generating RTLIL representation for module `\$_DFFSRE_NNPN_'.
Generating RTLIL representation for module `\$_DFFSRE_NPNN_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNN_'.
Generating RTLIL representation for module `\$__SHREG_DFF_P_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PN0_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NN0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFF_PN1_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_NN1_'.
Successfully finished Verilog frontend.

3.45.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $lut.
Using extmapper simplemap for cells of type $mux.
Using template \$_DFFE_PP0P_ for cells of type $_DFFE_PP0P_.
Using template \$_DFF_PP0_ for cells of type $_DFF_PP0_.
Using template \$_DFFE_PP1P_ for cells of type $_DFFE_PP1P_.
Using extmapper simplemap for cells of type $logic_not.
No more expansions possible.
<suppressed ~4895 debug messages>

yosys> opt_expr -mux_undef

3.46. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes128_fast.
<suppressed ~63439 debug messages>

yosys> simplemap

3.47. Executing SIMPLEMAP pass (map simple cells to gate primitives).

yosys> opt_expr

3.48. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes128_fast.

yosys> opt_merge

3.49. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes128_fast'.
<suppressed ~90165 debug messages>
Removed a total of 30055 cells.

yosys> opt_dff -nodffe -nosdff

3.50. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.51. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes128_fast..
Removed 0 unused cells and 10028 unused wires.
<suppressed ~1 debug messages>

yosys> opt -nodffe -nosdff

3.52. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.52.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes128_fast.
<suppressed ~2148 debug messages>

yosys> opt_merge -nomux

3.52.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes128_fast'.
<suppressed ~558 debug messages>
Removed a total of 186 cells.

yosys> opt_muxtree

3.52.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes128_fast..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.52.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes128_fast.
Performed a total of 0 changes.

yosys> opt_merge

3.52.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes128_fast'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.52.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.52.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes128_fast..
Removed 0 unused cells and 346 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.52.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes128_fast.

3.52.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.52.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes128_fast..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.52.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes128_fast.
Performed a total of 0 changes.

yosys> opt_merge

3.52.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes128_fast'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.52.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.52.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes128_fast..

yosys> opt_expr

3.52.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes128_fast.

3.52.16. Finished OPT passes. (There is nothing left to do.)

yosys> abc -script /tmp/yosys_WCa2hy/abc_tmp_2.scr

3.53. Executing ABC pass (technology mapping using ABC).

3.53.1. Extracting gate netlist of module `\aes128_fast' to `<abc-temp-dir>/input.blif'..
Breaking loop using new signal $abcloop$343533: \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$314473 [3]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$314473 [2]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$314473 [1]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$314473 [0]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$307091 [7]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$307091 [6]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$307091 [4]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$307091 [3]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$307091 [2]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$307091 [1]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$307091 [0]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$306293 [3]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$306293 [2]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$306293 [1]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$306293 [0]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$241223 [3]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$241223 [2]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$241223 [1]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$241223 [0]
                                                \expand_key.k_rot[0] [3] -> $abc$201014$new_new_n4443__
                                                \expand_key.k_rot[0] [3] -> $abc$201014$new_new_n4441__
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$240927 [7]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$240927 [6]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$240927 [5]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$240927 [4]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$240927 [3]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$240927 [2]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$240927 [1]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$240927 [0]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$240872 [1]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$240872 [0]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$240772 [15]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$240772 [13]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$240772 [8]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$240772 [1]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$239638 [3]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$239638 [2]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$239638 [1]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$239638 [0]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$239569 [3]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$239569 [2]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$239569 [1]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$239569 [0]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$239500 [3]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$239500 [2]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$239500 [1]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$239500 [0]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$239422 [2]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$239405 [11]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$239405 [9]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$239405 [8]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$239405 [7]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$239405 [1]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$239405 [0]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$239255 [2]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$239186 [3]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$239186 [2]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$239186 [1]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$239186 [0]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$239150 [3]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$239150 [2]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$239150 [1]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$239150 [0]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$239081 [3]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$239081 [2]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$239081 [1]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$239081 [0]
                                                \expand_key.k_rot[0] [3] -> $abc$201014$new_new_n4395__
                                                \expand_key.k_rot[0] [3] -> $abc$201014$new_new_n4376__
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$238048 [3]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$238048 [2]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$238048 [1]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$238048 [0]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$237969 [7]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$237952 [15]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$237952 [9]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$237952 [5]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$237952 [3]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$237952 [2]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$237952 [0]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$236249 [7]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$236249 [6]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$236249 [5]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$236249 [3]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$236249 [2]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$236249 [1]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$236249 [0]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$236180 [1]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$236180 [6]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$236180 [5]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$236180 [4]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$236180 [2]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$236180 [0]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$236111 [2]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$236094 [3]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$236094 [15]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$236094 [12]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$236094 [2]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$236094 [0]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$236025 [4]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$236042 [1]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$236025 [13]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$236025 [8]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$236025 [5]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$233393 [1]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$233393 [0]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$233310 [7]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$233293 [12]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$233293 [7]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$233293 [1]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$233241 [4]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$233224 [14]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$233186 [1]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$233186 [0]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$232382 [6]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$232365 [14]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$232365 [6]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$232382 [0]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$232365 [11]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$232365 [7]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$232332 [12]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$232317 [1]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$232317 [0]
                                                \expand_key.k_rot[0] [3] -> $abc$201014$new_new_n4226__
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$232159 [1]
                                                \expand_key.k_rot[0] [3] -> $auto$simplemap.cc:333:simplemap_lut$232159 [0]
                                                \expand_key.k_rot[0] [3] -> $abc$101625$auto$rtlil.cc:2464:Mux$98510
Breaking loop using new signal $abcloop$343534: \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$324858 [2]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$324858 [1]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$324849 [5]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$323428 [2]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$323411 [8]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$319636 [6]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$317094 [3]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$317094 [2]
                                                \expand_key.k_rot[3] [3] -> $abc$201014$new_new_n4471__
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$312571 [1]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$312571 [0]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$306424 [7]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$306424 [0]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$306407 [6]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$306229 [1]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$306229 [0]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$238400 [6]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$238400 [5]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$238400 [4]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$238400 [3]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$238400 [2]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$238400 [1]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$238400 [0]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$238331 [7]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$238331 [6]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$238331 [5]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$238331 [4]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$238331 [1]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$238331 [0]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$238271 [3]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$238271 [2]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$238271 [1]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$238271 [0]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$238207 [1]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$238207 [0]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$237190 [3]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$237190 [2]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$237190 [1]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$237190 [0]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$237112 [7]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$237112 [6]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$237112 [5]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$237112 [4]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$237112 [3]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$237112 [2]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$237112 [1]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$237112 [0]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$237057 [1]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$237057 [0]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$236974 [7]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$236974 [6]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$236974 [5]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$236974 [4]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$236974 [2]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$236974 [1]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$236974 [0]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$236544 [3]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$236544 [2]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$236544 [1]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$236544 [0]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$236480 [1]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$236480 [0]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$236406 [3]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$236406 [2]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$236406 [1]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$236406 [0]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$235308 [1]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$235308 [0]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$235239 [1]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$235239 [0]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$235156 [1]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$235139 [14]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$235139 [11]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$235139 [9]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$235139 [1]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$235101 [1]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$235101 [0]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$234425 [3]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$234425 [2]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$234425 [1]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$234425 [0]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$234347 [7]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$234347 [6]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$234347 [5]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$234347 [4]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$234347 [3]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$234347 [2]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$234347 [1]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$234347 [0]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$234292 [1]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$234292 [0]
                                                \expand_key.k_rot[3] [3] -> $abc$201014$new_new_n4254__
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$232959 [3]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$232959 [2]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$232959 [1]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$232959 [0]
                                                \expand_key.k_rot[3] [3] -> $abc$201014$new_new_n4252__
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$232807 [6]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$232790 [9]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$232790 [11]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$232790 [8]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$232652 [10]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$232652 [15]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$232652 [11]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$232652 [9]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$232652 [8]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$232652 [7]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$232652 [2]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$232652 [1]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$232583 [15]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$232600 [4]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$232583 [3]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$232583 [14]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$232583 [12]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$232583 [11]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$232583 [10]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$232583 [7]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$232583 [5]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$232583 [4]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$232540 [3]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$232540 [2]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$232540 [1]
                                                \expand_key.k_rot[3] [3] -> $auto$simplemap.cc:333:simplemap_lut$232540 [0]
                                                \expand_key.k_rot[3] [3] -> $abc$101625$auto$rtlil.cc:2464:Mux$98501
Breaking loop using new signal $abcloop$343535: \expand_key.k_rot[2] [3] -> $auto$simplemap.cc:333:simplemap_lut$325879 [4]
                                                \expand_key.k_rot[2] [3] -> $auto$simplemap.cc:333:simplemap_lut$322438 [3]
                                                \expand_key.k_rot[2] [3] -> $auto$simplemap.cc:333:simplemap_lut$322438 [2]
                                                \expand_key.k_rot[2] [3] -> $auto$simplemap.cc:333:simplemap_lut$322438 [1]
                                                \expand_key.k_rot[2] [3] -> $auto$simplemap.cc:333:simplemap_lut$322438 [0]
                                                \expand_key.k_rot[2] [3] -> $auto$simplemap.cc:333:simplemap_lut$321027 [1]
                                                \expand_key.k_rot[2] [3] -> $auto$simplemap.cc:333:simplemap_lut$321027 [0]
                                                \expand_key.k_rot[2] [3] -> $auto$simplemap.cc:333:simplemap_lut$310271 [4]
                                                \expand_key.k_rot[2] [3] -> $auto$simplemap.cc:333:simplemap_lut$310254 [5]
                                                \expand_key.k_rot[2] [3] -> $auto$simplemap.cc:333:simplemap_lut$242180 [10]
                                                \expand_key.k_rot[2] [3] -> $auto$simplemap.cc:333:simplemap_lut$242180 [14]
                                                \expand_key.k_rot[2] [3] -> $auto$simplemap.cc:333:simplemap_lut$242180 [13]
                                                \expand_key.k_rot[2] [3] -> $abc$201014$new_new_n4460__
                                                \expand_key.k_rot[2] [3] -> $auto$simplemap.cc:333:simplemap_lut$241588 [7]
                                                \expand_key.k_rot[2] [3] -> $auto$simplemap.cc:333:simplemap_lut$241588 [6]
                                                \expand_key.k_rot[2] [3] -> $auto$simplemap.cc:333:simplemap_lut$241588 [5]
                                                \expand_key.k_rot[2] [3] -> $auto$simplemap.cc:333:simplemap_lut$241588 [4]
                                                \expand_key.k_rot[2] [3] -> $auto$simplemap.cc:333:simplemap_lut$241588 [2]
                                                \expand_key.k_rot[2] [3] -> $auto$simplemap.cc:333:simplemap_lut$241588 [1]
                                                \expand_key.k_rot[2] [3] -> $auto$simplemap.cc:333:simplemap_lut$241588 [0]
                                                \expand_key.k_rot[2] [3] -> $auto$simplemap.cc:333:simplemap_lut$241533 [1]
                                                \expand_key.k_rot[2] [3] -> $auto$simplemap.cc:333:simplemap_lut$241533 [0]
                                                \expand_key.k_rot[2] [3] -> $auto$simplemap.cc:333:simplemap_lut$241431 [2]
                                                \expand_key.k_rot[2] [3] -> $auto$simplemap.cc:333:simplemap_lut$241414 [14]
                                                \expand_key.k_rot[2] [3] -> $auto$simplemap.cc:333:simplemap_lut$241414 [13]
                                                \expand_key.k_rot[2] [3] -> $auto$simplemap.cc:333:simplemap_lut$241414 [10]
                                                \expand_key.k_rot[2] [3] -> $auto$simplemap.cc:333:simplemap_lut$241376 [1]
                                                \expand_key.k_rot[2] [3] -> $auto$simplemap.cc:333:simplemap_lut$241376 [0]
                                                \expand_key.k_rot[2] [3] -> $auto$simplemap.cc:333:simplemap_lut$240275 [0]
                                                \expand_key.k_rot[2] [3] -> $auto$simplemap.cc:333:simplemap_lut$240258 [5]
                                                \expand_key.k_rot[2] [3] -> $auto$simplemap.cc:333:simplemap_lut$240220 [1]
                                                \expand_key.k_rot[2] [3] -> $auto$simplemap.cc:333:simplemap_lut$240220 [0]
                                                \expand_key.k_rot[2] [3] -> $abc$201014$new_new_n4422__
                                                \expand_key.k_rot[2] [3] -> $auto$simplemap.cc:333:simplemap_lut$240077 [3]
                                                \expand_key.k_rot[2] [3] -> $auto$simplemap.cc:333:simplemap_lut$240077 [2]
                                                \expand_key.k_rot[2] [3] -> $auto$simplemap.cc:333:simplemap_lut$240077 [1]
                                                \expand_key.k_rot[2] [3] -> $auto$simplemap.cc:333:simplemap_lut$240077 [0]
                                                \expand_key.k_rot[2] [3] -> $auto$simplemap.cc:333:simplemap_lut$238829 [6]
                                                \expand_key.k_rot[2] [3] -> $auto$simplemap.cc:333:simplemap_lut$238769 [3]
                                                \expand_key.k_rot[2] [3] -> $auto$simplemap.cc:333:simplemap_lut$238769 [2]
                                                \expand_key.k_rot[2] [3] -> $auto$simplemap.cc:333:simplemap_lut$238769 [1]
                                                \expand_key.k_rot[2] [3] -> $auto$simplemap.cc:333:simplemap_lut$238622 [2]
                                                \expand_key.k_rot[2] [3] -> $auto$simplemap.cc:333:simplemap_lut$238622 [0]
                                                \expand_key.k_rot[2] [3] -> $auto$simplemap.cc:333:simplemap_lut$238567 [1]
                                                \expand_key.k_rot[2] [3] -> $auto$simplemap.cc:333:simplemap_lut$238567 [0]
                                                \expand_key.k_rot[2] [3] -> $auto$simplemap.cc:333:simplemap_lut$237476 [7]
                                                \expand_key.k_rot[2] [3] -> $auto$simplemap.cc:333:simplemap_lut$237476 [6]
                                                \expand_key.k_rot[2] [3] -> $auto$simplemap.cc:333:simplemap_lut$237476 [4]
                                                \expand_key.k_rot[2] [3] -> $auto$simplemap.cc:333:simplemap_lut$237476 [3]
                                                \expand_key.k_rot[2] [3] -> $auto$simplemap.cc:333:simplemap_lut$237476 [2]
                                                \expand_key.k_rot[2] [3] -> $auto$simplemap.cc:333:simplemap_lut$237476 [1]
                                                \expand_key.k_rot[2] [3] -> $auto$simplemap.cc:333:simplemap_lut$237476 [0]
                                                \expand_key.k_rot[2] [3] -> $auto$simplemap.cc:333:simplemap_lut$237416 [3]
                                                \expand_key.k_rot[2] [3] -> $auto$simplemap.cc:333:simplemap_lut$237416 [2]
                                                \expand_key.k_rot[2] [3] -> $auto$simplemap.cc:333:simplemap_lut$237416 [1]
                                                \expand_key.k_rot[2] [3] -> $auto$simplemap.cc:333:simplemap_lut$237416 [0]
                                                \expand_key.k_rot[2] [3] -> $auto$simplemap.cc:333:simplemap_lut$237338 [6]
                                                \expand_key.k_rot[2] [3] -> $auto$simplemap.cc:333:simplemap_lut$237321 [15]
                                                \expand_key.k_rot[2] [3] -> $auto$simplemap.cc:333:simplemap_lut$237321 [10]
                                                \expand_key.k_rot[2] [3] -> $auto$simplemap.cc:333:simplemap_lut$237321 [8]
                                                \expand_key.k_rot[2] [3] -> $auto$simplemap.cc:333:simplemap_lut$237321 [7]
                                                \expand_key.k_rot[2] [3] -> $auto$simplemap.cc:333:simplemap_lut$237321 [6]
                                                \expand_key.k_rot[2] [3] -> $auto$simplemap.cc:333:simplemap_lut$237321 [4]
                                                \expand_key.k_rot[2] [3] -> $auto$simplemap.cc:333:simplemap_lut$235668 [3]
                                                \expand_key.k_rot[2] [3] -> $auto$simplemap.cc:333:simplemap_lut$235651 [14]
                                                \expand_key.k_rot[2] [3] -> $auto$simplemap.cc:333:simplemap_lut$235651 [9]
                                                \expand_key.k_rot[2] [3] -> $auto$simplemap.cc:333:simplemap_lut$235651 [3]
                                                \expand_key.k_rot[2] [3] -> $auto$simplemap.cc:333:simplemap_lut$235613 [1]
                                                \expand_key.k_rot[2] [3] -> $auto$simplemap.cc:333:simplemap_lut$235613 [0]
                                                \expand_key.k_rot[2] [3] -> $abc$201014$new_new_n4326__
                                                \expand_key.k_rot[2] [3] -> $auto$simplemap.cc:333:simplemap_lut$235461 [6]
                                                \expand_key.k_rot[2] [3] -> $auto$simplemap.cc:333:simplemap_lut$235461 [4]
                                                \expand_key.k_rot[2] [3] -> $auto$simplemap.cc:333:simplemap_lut$235461 [3]
                                                \expand_key.k_rot[2] [3] -> $auto$simplemap.cc:333:simplemap_lut$235461 [2]
                                                \expand_key.k_rot[2] [3] -> $auto$simplemap.cc:333:simplemap_lut$235461 [1]
                                                \expand_key.k_rot[2] [3] -> $auto$simplemap.cc:333:simplemap_lut$235017 [3]
                                                \expand_key.k_rot[2] [3] -> $auto$simplemap.cc:333:simplemap_lut$235017 [2]
                                                \expand_key.k_rot[2] [3] -> $auto$simplemap.cc:333:simplemap_lut$235017 [1]
                                                \expand_key.k_rot[2] [3] -> $auto$simplemap.cc:333:simplemap_lut$235017 [0]
                                                \expand_key.k_rot[2] [3] -> $auto$simplemap.cc:333:simplemap_lut$234922 [10]
                                                \expand_key.k_rot[2] [3] -> $auto$simplemap.cc:333:simplemap_lut$234922 [9]
                                                \expand_key.k_rot[2] [3] -> $auto$simplemap.cc:333:simplemap_lut$234922 [15]
                                                \expand_key.k_rot[2] [3] -> $auto$simplemap.cc:333:simplemap_lut$234922 [11]
                                                \expand_key.k_rot[2] [3] -> $auto$simplemap.cc:333:simplemap_lut$234922 [8]
                                                \expand_key.k_rot[2] [3] -> $auto$simplemap.cc:333:simplemap_lut$234922 [7]
                                                \expand_key.k_rot[2] [3] -> $auto$simplemap.cc:333:simplemap_lut$234922 [2]
                                                \expand_key.k_rot[2] [3] -> $auto$simplemap.cc:333:simplemap_lut$234922 [1]
                                                \expand_key.k_rot[2] [3] -> $auto$simplemap.cc:333:simplemap_lut$234123 [10]
                                                \expand_key.k_rot[2] [3] -> $auto$simplemap.cc:333:simplemap_lut$234123 [8]
                                                \expand_key.k_rot[2] [3] -> $auto$simplemap.cc:333:simplemap_lut$234140 [2]
                                                \expand_key.k_rot[2] [3] -> $auto$simplemap.cc:333:simplemap_lut$234123 [4]
                                                \expand_key.k_rot[2] [3] -> $auto$simplemap.cc:333:simplemap_lut$234140 [1]
                                                \expand_key.k_rot[2] [3] -> $auto$simplemap.cc:333:simplemap_lut$234123 [6]
                                                \expand_key.k_rot[2] [3] -> $auto$simplemap.cc:333:simplemap_lut$234090 [31]
                                                \expand_key.k_rot[2] [3] -> $auto$simplemap.cc:333:simplemap_lut$234071 [7]
                                                \expand_key.k_rot[2] [3] -> $auto$simplemap.cc:333:simplemap_lut$234071 [5]
                                                \expand_key.k_rot[2] [3] -> $auto$simplemap.cc:333:simplemap_lut$234071 [4]
                                                \expand_key.k_rot[2] [3] -> $auto$simplemap.cc:333:simplemap_lut$234071 [3]
                                                \expand_key.k_rot[2] [3] -> $auto$simplemap.cc:333:simplemap_lut$234071 [2]
                                                \expand_key.k_rot[2] [3] -> $auto$simplemap.cc:333:simplemap_lut$234071 [1]
                                                \expand_key.k_rot[2] [3] -> $auto$simplemap.cc:333:simplemap_lut$234071 [0]
                                                \expand_key.k_rot[2] [3] -> $auto$simplemap.cc:333:simplemap_lut$234016 [1]
                                                \expand_key.k_rot[2] [3] -> $auto$simplemap.cc:333:simplemap_lut$234016 [0]
                                                \expand_key.k_rot[2] [3] -> $abc$201014$new_new_n4288__
                                                \expand_key.k_rot[2] [3] -> $abc$101625$auto$rtlil.cc:2464:Mux$98504
Breaking loop using new signal $abcloop$343536: \expand_key.k_rot[1] [3] -> $auto$simplemap.cc:333:simplemap_lut$317361 [3]
                                                \expand_key.k_rot[1] [3] -> $auto$simplemap.cc:333:simplemap_lut$310490 [1]
                                                \expand_key.k_rot[1] [3] -> $auto$simplemap.cc:333:simplemap_lut$310490 [0]
                                                \expand_key.k_rot[1] [3] -> $auto$simplemap.cc:333:simplemap_lut$241948 [1]
                                                \expand_key.k_rot[1] [3] -> $auto$simplemap.cc:333:simplemap_lut$241948 [0]
                                                \expand_key.k_rot[1] [3] -> $abc$201014$new_new_n4455__
                                                \expand_key.k_rot[1] [3] -> $abc$201014$new_new_n4454__
                                                \expand_key.k_rot[1] [3] -> $auto$simplemap.cc:333:simplemap_lut$240665 [1]
                                                \expand_key.k_rot[1] [3] -> $auto$simplemap.cc:333:simplemap_lut$240665 [0]
                                                \expand_key.k_rot[1] [3] -> $auto$simplemap.cc:333:simplemap_lut$240591 [3]
                                                \expand_key.k_rot[1] [3] -> $auto$simplemap.cc:333:simplemap_lut$240591 [2]
                                                \expand_key.k_rot[1] [3] -> $auto$simplemap.cc:333:simplemap_lut$240591 [1]
                                                \expand_key.k_rot[1] [3] -> $auto$simplemap.cc:333:simplemap_lut$240591 [0]
                                                \expand_key.k_rot[1] [3] -> $abc$201014$new_new_n4430__
                                                \expand_key.k_rot[1] [3] -> $auto$simplemap.cc:333:simplemap_lut$240434 [4]
                                                \expand_key.k_rot[1] [3] -> $auto$simplemap.cc:333:simplemap_lut$240434 [2]
                                                \expand_key.k_rot[1] [3] -> $auto$simplemap.cc:333:simplemap_lut$240417 [15]
                                                \expand_key.k_rot[1] [3] -> $abc$201014$new_new_n4414__
                                                \expand_key.k_rot[1] [3] -> $auto$simplemap.cc:333:simplemap_lut$239915 [6]
                                                \expand_key.k_rot[1] [3] -> $auto$simplemap.cc:333:simplemap_lut$239915 [5]
                                                \expand_key.k_rot[1] [3] -> $auto$simplemap.cc:333:simplemap_lut$239915 [4]
                                                \expand_key.k_rot[1] [3] -> $auto$simplemap.cc:333:simplemap_lut$239915 [3]
                                                \expand_key.k_rot[1] [3] -> $auto$simplemap.cc:333:simplemap_lut$239915 [2]
                                                \expand_key.k_rot[1] [3] -> $auto$simplemap.cc:333:simplemap_lut$239915 [1]
                                                \expand_key.k_rot[1] [3] -> $auto$simplemap.cc:333:simplemap_lut$239915 [0]
                                                \expand_key.k_rot[1] [3] -> $auto$simplemap.cc:333:simplemap_lut$239855 [3]
                                                \expand_key.k_rot[1] [3] -> $auto$simplemap.cc:333:simplemap_lut$239855 [2]
                                                \expand_key.k_rot[1] [3] -> $auto$simplemap.cc:333:simplemap_lut$239855 [1]
                                                \expand_key.k_rot[1] [3] -> $auto$simplemap.cc:333:simplemap_lut$239855 [0]
                                                \expand_key.k_rot[1] [3] -> $auto$simplemap.cc:333:simplemap_lut$239791 [1]
                                                \expand_key.k_rot[1] [3] -> $auto$simplemap.cc:333:simplemap_lut$239791 [0]
                                                \expand_key.k_rot[1] [3] -> $auto$simplemap.cc:333:simplemap_lut$237821 [3]
                                                \expand_key.k_rot[1] [3] -> $auto$simplemap.cc:333:simplemap_lut$237804 [12]
                                                \expand_key.k_rot[1] [3] -> $auto$simplemap.cc:333:simplemap_lut$237752 [7]
                                                \expand_key.k_rot[1] [3] -> $auto$simplemap.cc:333:simplemap_lut$237752 [6]
                                                \expand_key.k_rot[1] [3] -> $auto$simplemap.cc:333:simplemap_lut$237752 [5]
                                                \expand_key.k_rot[1] [3] -> $auto$simplemap.cc:333:simplemap_lut$237752 [3]
                                                \expand_key.k_rot[1] [3] -> $auto$simplemap.cc:333:simplemap_lut$237752 [2]
                                                \expand_key.k_rot[1] [3] -> $auto$simplemap.cc:333:simplemap_lut$237752 [1]
                                                \expand_key.k_rot[1] [3] -> $auto$simplemap.cc:333:simplemap_lut$237683 [7]
                                                \expand_key.k_rot[1] [3] -> $auto$simplemap.cc:333:simplemap_lut$237683 [5]
                                                \expand_key.k_rot[1] [3] -> $auto$simplemap.cc:333:simplemap_lut$237683 [4]
                                                \expand_key.k_rot[1] [3] -> $auto$simplemap.cc:333:simplemap_lut$237683 [3]
                                                \expand_key.k_rot[1] [3] -> $auto$simplemap.cc:333:simplemap_lut$237683 [2]
                                                \expand_key.k_rot[1] [3] -> $auto$simplemap.cc:333:simplemap_lut$237683 [1]
                                                \expand_key.k_rot[1] [3] -> $auto$simplemap.cc:333:simplemap_lut$237683 [0]
                                                \expand_key.k_rot[1] [3] -> $auto$simplemap.cc:333:simplemap_lut$237628 [1]
                                                \expand_key.k_rot[1] [3] -> $auto$simplemap.cc:333:simplemap_lut$237628 [0]
                                                \expand_key.k_rot[1] [3] -> $abc$201014$new_new_n4353__
                                                \expand_key.k_rot[1] [3] -> $auto$simplemap.cc:333:simplemap_lut$236840 [1]
                                                \expand_key.k_rot[1] [3] -> $auto$simplemap.cc:333:simplemap_lut$236840 [0]
                                                \expand_key.k_rot[1] [3] -> $auto$simplemap.cc:333:simplemap_lut$236740 [1]
                                                \expand_key.k_rot[1] [3] -> $auto$simplemap.cc:333:simplemap_lut$236740 [14]
                                                \expand_key.k_rot[1] [3] -> $auto$simplemap.cc:333:simplemap_lut$236757 [6]
                                                \expand_key.k_rot[1] [3] -> $auto$simplemap.cc:333:simplemap_lut$236740 [11]
                                                \expand_key.k_rot[1] [3] -> $auto$simplemap.cc:333:simplemap_lut$236740 [9]
                                                \expand_key.k_rot[1] [3] -> $auto$simplemap.cc:333:simplemap_lut$236757 [1]
                                                \expand_key.k_rot[1] [3] -> $auto$simplemap.cc:333:simplemap_lut$236702 [1]
                                                \expand_key.k_rot[1] [3] -> $auto$simplemap.cc:333:simplemap_lut$236702 [0]
                                                \expand_key.k_rot[1] [3] -> $auto$simplemap.cc:333:simplemap_lut$235968 [1]
                                                \expand_key.k_rot[1] [3] -> $auto$simplemap.cc:333:simplemap_lut$235968 [0]
                                                \expand_key.k_rot[1] [3] -> $auto$simplemap.cc:333:simplemap_lut$235894 [3]
                                                \expand_key.k_rot[1] [3] -> $auto$simplemap.cc:333:simplemap_lut$235894 [2]
                                                \expand_key.k_rot[1] [3] -> $auto$simplemap.cc:333:simplemap_lut$235894 [1]
                                                \expand_key.k_rot[1] [3] -> $auto$simplemap.cc:333:simplemap_lut$235894 [0]
                                                \expand_key.k_rot[1] [3] -> $abc$201014$new_new_n4331__
                                                \expand_key.k_rot[1] [3] -> $abc$201014$new_new_n4305__
                                                \expand_key.k_rot[1] [3] -> $auto$simplemap.cc:333:simplemap_lut$234712 [5]
                                                \expand_key.k_rot[1] [3] -> $auto$simplemap.cc:333:simplemap_lut$234695 [15]
                                                \expand_key.k_rot[1] [3] -> $auto$simplemap.cc:333:simplemap_lut$234695 [14]
                                                \expand_key.k_rot[1] [3] -> $auto$simplemap.cc:333:simplemap_lut$234695 [13]
                                                \expand_key.k_rot[1] [3] -> $auto$simplemap.cc:333:simplemap_lut$234695 [12]
                                                \expand_key.k_rot[1] [3] -> $auto$simplemap.cc:333:simplemap_lut$234695 [9]
                                                \expand_key.k_rot[1] [3] -> $auto$simplemap.cc:333:simplemap_lut$234695 [8]
                                                \expand_key.k_rot[1] [3] -> $auto$simplemap.cc:333:simplemap_lut$234695 [2]
                                                \expand_key.k_rot[1] [3] -> $auto$simplemap.cc:333:simplemap_lut$234643 [7]
                                                \expand_key.k_rot[1] [3] -> $auto$simplemap.cc:333:simplemap_lut$234643 [6]
                                                \expand_key.k_rot[1] [3] -> $auto$simplemap.cc:333:simplemap_lut$234643 [5]
                                                \expand_key.k_rot[1] [3] -> $auto$simplemap.cc:333:simplemap_lut$234643 [4]
                                                \expand_key.k_rot[1] [3] -> $auto$simplemap.cc:333:simplemap_lut$234643 [3]
                                                \expand_key.k_rot[1] [3] -> $auto$simplemap.cc:333:simplemap_lut$234643 [2]
                                                \expand_key.k_rot[1] [3] -> $auto$simplemap.cc:333:simplemap_lut$234643 [1]
                                                \expand_key.k_rot[1] [3] -> $auto$simplemap.cc:333:simplemap_lut$234643 [0]
                                                \expand_key.k_rot[1] [3] -> $auto$simplemap.cc:333:simplemap_lut$234574 [6]
                                                \expand_key.k_rot[1] [3] -> $auto$simplemap.cc:333:simplemap_lut$234574 [4]
                                                \expand_key.k_rot[1] [3] -> $auto$simplemap.cc:333:simplemap_lut$234557 [15]
                                                \expand_key.k_rot[1] [3] -> $auto$simplemap.cc:333:simplemap_lut$234557 [14]
                                                \expand_key.k_rot[1] [3] -> $auto$simplemap.cc:333:simplemap_lut$234557 [11]
                                                \expand_key.k_rot[1] [3] -> $auto$simplemap.cc:333:simplemap_lut$234557 [10]
                                                \expand_key.k_rot[1] [3] -> $auto$simplemap.cc:333:simplemap_lut$233739 [1]
                                                \expand_key.k_rot[1] [3] -> $auto$simplemap.cc:333:simplemap_lut$233739 [0]
                                                \expand_key.k_rot[1] [3] -> $auto$simplemap.cc:333:simplemap_lut$233665 [3]
                                                \expand_key.k_rot[1] [3] -> $auto$simplemap.cc:333:simplemap_lut$233665 [2]
                                                \expand_key.k_rot[1] [3] -> $auto$simplemap.cc:333:simplemap_lut$233665 [1]
                                                \expand_key.k_rot[1] [3] -> $auto$simplemap.cc:333:simplemap_lut$233665 [0]
                                                \expand_key.k_rot[1] [3] -> $auto$simplemap.cc:333:simplemap_lut$233537 [31]
                                                \expand_key.k_rot[1] [3] -> $auto$simplemap.cc:333:simplemap_lut$233570 [9]
                                                \expand_key.k_rot[1] [3] -> $auto$simplemap.cc:333:simplemap_lut$233570 [13]
                                                \expand_key.k_rot[1] [3] -> $auto$simplemap.cc:333:simplemap_lut$233570 [6]
                                                \expand_key.k_rot[1] [3] -> $auto$simplemap.cc:333:simplemap_lut$233570 [11]
                                                \expand_key.k_rot[1] [3] -> $auto$simplemap.cc:333:simplemap_lut$233570 [14]
                                                \expand_key.k_rot[1] [3] -> $abc$101625$auto$rtlil.cc:2464:Mux$98507
Breaking loop using new signal $abcloop$343537: \expand_key.X0[0] [0] -> $abc$153050$li364_li364
                                                \expand_key.X0[0] [0] -> $abc$101625$auto$rtlil.cc:2464:Mux$98477
Breaking loop using new signal $abcloop$343538: \expand_key.X0[0] [1] -> $abc$153050$li205_li205
                                                \expand_key.X0[0] [1] -> $abc$101625$auto$rtlil.cc:2464:Mux$98480
Breaking loop using new signal $abcloop$343539: \expand_key.X0[0] [2] -> $abc$153050$li223_li223
                                                \expand_key.X0[0] [2] -> $abc$101625$auto$rtlil.cc:2464:Mux$98483
Breaking loop using new signal $abcloop$343540: \expand_key.X0[0] [3] -> $abc$153050$li247_li247
                                                \expand_key.X0[0] [3] -> $abc$101625$auto$rtlil.cc:2464:Mux$98486
Breaking loop using new signal $abcloop$343541: \expand_key.X0[0] [4] -> $abc$153050$li237_li237
                                                \expand_key.X0[0] [4] -> $abc$101625$auto$rtlil.cc:2464:Mux$98489
Breaking loop using new signal $abcloop$343542: \expand_key.X0[0] [5] -> $abc$153050$li330_li330
                                                \expand_key.X0[0] [5] -> $abc$101625$auto$rtlil.cc:2464:Mux$98492
Breaking loop using new signal $abcloop$343543: \expand_key.X0[0] [6] -> $abc$153050$li243_li243
                                                \expand_key.X0[0] [6] -> $abc$101625$auto$rtlil.cc:2464:Mux$98495
Breaking loop using new signal $abcloop$343544: \expand_key.X0[0] [7] -> $abc$153050$li214_li214
                                                \expand_key.X0[0] [7] -> $abc$101625$auto$rtlil.cc:2464:Mux$98498
Extracted 28035 gates and 28710 wires to a netlist network with 673 inputs and 536 outputs.

3.53.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + source /tmp/yosys_WCa2hy/abc_tmp_2.scr 
ABC:   #Luts =  3026  Max Lvl =  27  Avg Lvl =  10.63  [   1.51 sec. at Pass 0]
ABC:   #Luts =  3009  Max Lvl =  16  Avg Lvl =   8.54  [  84.39 sec. at Pass 1]
ABC:   #Luts =  2980  Max Lvl =  12  Avg Lvl =   6.65  [  14.46 sec. at Pass 2]
ABC:   #Luts =  2980  Max Lvl =  12  Avg Lvl =   6.65  [  30.72 sec. at Pass 3]
ABC:   #Luts =  2969  Max Lvl =  12  Avg Lvl =   6.74  [  13.57 sec. at Pass 4]
ABC:   #Luts =  2969  Max Lvl =  12  Avg Lvl =   6.74  [  36.60 sec. at Pass 5]
ABC:   #Luts =  2956  Max Lvl =  11  Avg Lvl =   6.60  [  14.11 sec. at Pass 6]
ABC:   #Luts =  2956  Max Lvl =  11  Avg Lvl =   6.60  [  35.26 sec. at Pass 7]
ABC:   #Luts =  2946  Max Lvl =  12  Avg Lvl =   6.63  [  16.49 sec. at Pass 8]
ABC:   #Luts =  2946  Max Lvl =  12  Avg Lvl =   6.63  [  33.69 sec. at Pass 9]
ABC:   #Luts =  2946  Max Lvl =  12  Avg Lvl =   6.63  [  12.03 sec. at Pass 10]
ABC:   #Luts =  2946  Max Lvl =  12  Avg Lvl =   6.63  [  29.78 sec. at Pass 11]
ABC:   #Luts =  2946  Max Lvl =  12  Avg Lvl =   6.63  [   0.74 sec. at Pass 12]
ABC: + write_blif <abc-temp-dir>/output.blif 

3.53.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:     2946
ABC RESULTS:        internal signals:    27501
ABC RESULTS:           input signals:      673
ABC RESULTS:          output signals:      536
Removing temp directory.

yosys> opt

3.54. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.54.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes128_fast.

yosys> opt_merge -nomux

3.54.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes128_fast'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.54.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes128_fast..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.54.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes128_fast.
Performed a total of 0 changes.

yosys> opt_merge

3.54.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes128_fast'.
Removed a total of 0 cells.

yosys> opt_dff

3.54.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.54.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes128_fast..
Removed 0 unused cells and 12372 unused wires.
<suppressed ~25 debug messages>

yosys> opt_expr

3.54.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes128_fast.

3.54.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.54.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes128_fast..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.54.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes128_fast.
Performed a total of 0 changes.

yosys> opt_merge

3.54.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes128_fast'.
Removed a total of 0 cells.

yosys> opt_dff

3.54.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.54.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes128_fast..

yosys> opt_expr

3.54.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes128_fast.

3.54.16. Finished OPT passes. (There is nothing left to do.)

yosys> hierarchy -check

3.55. Executing HIERARCHY pass (managing design hierarchy).

3.55.1. Analyzing design hierarchy..
Top module:  \aes128_fast

3.55.2. Analyzing design hierarchy..
Top module:  \aes128_fast
Removed 0 unused modules.

yosys> stat

3.56. Printing statistics.

=== aes128_fast ===

   Number of wires:               3474
   Number of wire bits:           4125
   Number of public wires:          68
   Number of public wire bits:     719
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               3732
     $lut                         2946
     dffsre                        786


yosys> opt_clean -purge

3.57. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes128_fast..
Removed 0 unused cells and 30 unused wires.
<suppressed ~30 debug messages>

yosys> write_verilog -noattr -nohex synthesized.v

3.58. Executing Verilog backend.

yosys> bmuxmap

3.58.1. Executing BMUXMAP pass.

yosys> demuxmap

3.58.2. Executing DEMUXMAP pass.

yosys> clean_zerowidth
Dumping module `\aes128_fast'.

Warnings: 8 unique messages, 8 total
End of script. Logfile hash: b3de0ebe7f, CPU: user 164.90s system 1.47s, MEM: 391.84 MB peak
Yosys 0.16+65 (git sha1 91803ad5c, gcc 9.1.0 -fPIC -Os)
Time spent: 97% 6x abc (6225 sec), 1% 24x opt_dff (79 sec), ...
real 841.67
user 6054.20
sys 327.66
