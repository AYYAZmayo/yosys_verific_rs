
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys-Verific 0.0.8
 Yosys 0.16+6 (git sha1 7f5477eb1, gcc 9.1.0 -fPIC -Os)


-- Executing script file `yosys.ys' --
echo on

yosys> plugin -i synth-rs

yosys> read -verific

yosys> read -incdir .

yosys> verific -vlog-incdir .

1. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Mar22_SW_Release, released at Fri Apr  1 00:31:54 2022.

yosys> verilog_defaults -add -I.

yosys> read -vhdl b12.vhd

yosys> verific -vhdl b12.vhd

2. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Mar22_SW_Release, released at Fri Apr  1 00:31:54 2022.
VERIFIC-INFO [VHDL-1504] default VHDL library search path is now "/home/users/aram/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008"
VERIFIC-COMMENT [VHDL-1481] Analyzing VHDL file 'b12.vhd'
VERIFIC-COMMENT [VHDL-1493] Restoring VHDL unit 'std.standard' from file '/home/users/aram/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008/std/standard.vdb'
VERIFIC-INFO [VHDL-1012] b12.vhd:1: analyzing entity 'b12'
VERIFIC-INFO [VHDL-1010] b12.vhd:12: analyzing architecture 'behav'

yosys> synth_rs -top b12 -tech genesis -goal area -de -no_dsp -no_bram -verilog synthesized.v

3. Executing synth_rs pass: v0.2.37

yosys> read_verilog -lib -specify -nomem2reg +/rapidsilicon/common/cells_sim.v +/rapidsilicon/genesis/cells_sim.v

3.1. Executing Verilog-2005 frontend: /home/users/aram/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v
Parsing Verilog input from `/home/users/aram/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\inv'.
Generating RTLIL representation for module `\buff'.
Generating RTLIL representation for module `\logic_0'.
Generating RTLIL representation for module `\logic_1'.
Generating RTLIL representation for module `\gclkbuff'.
Successfully finished Verilog frontend.

3.2. Executing Verilog-2005 frontend: /home/users/aram/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/cells_sim.v
Parsing Verilog input from `/home/users/aram/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\dffsre'.
Generating RTLIL representation for module `\dffnsre'.
Generating RTLIL representation for module `\latchsre'.
Generating RTLIL representation for module `\latchnsre'.
Generating RTLIL representation for module `\io_scff'.
Generating RTLIL representation for module `\scff'.
Generating RTLIL representation for module `\sh_dff'.
Generating RTLIL representation for module `\adder_carry'.
Generating RTLIL representation for module `\sdffr'.
Generating RTLIL representation for module `\sdffs'.
Successfully finished Verilog frontend.

yosys> hierarchy -check -top b12

3.3. Executing HIERARCHY pass (managing design hierarchy).
VERIFIC-INFO [VHDL-1067] b12.vhd:1: processing 'b12(BEHAV)'
Importing module b12.

3.3.1. Analyzing design hierarchy..
Top module:  \b12

3.3.2. Analyzing design hierarchy..
Top module:  \b12
Removed 0 unused modules.

yosys> proc

3.4. Executing PROC pass (convert processes to netlists).

yosys> proc_clean

3.4.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> proc_rmdead

3.4.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

yosys> proc_prune

3.4.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

yosys> proc_init

3.4.4. Executing PROC_INIT pass (extract init attributes).

yosys> proc_arst

3.4.5. Executing PROC_ARST pass (detect async resets in processes).

yosys> proc_mux

3.4.6. Executing PROC_MUX pass (convert decision trees to multiplexers).

yosys> proc_dlatch

3.4.7. Executing PROC_DLATCH pass (convert process syncs to latches).

yosys> proc_dff

3.4.8. Executing PROC_DFF pass (convert process syncs to FFs).

yosys> proc_memwr

3.4.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

yosys> proc_clean

3.4.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> opt_expr -keepdc

3.4.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.
<suppressed ~9 debug messages>

yosys> flatten

3.5. Executing FLATTEN pass (flatten design).

yosys> tribuf -logic

3.6. Executing TRIBUF pass.

yosys> deminout

3.7. Executing DEMINOUT pass (demote inout ports to input or output).

yosys> opt_expr

3.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.

yosys> opt_clean

3.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..
Removed 0 unused cells and 46 unused wires.
<suppressed ~19 debug messages>

yosys> check

3.10. Executing CHECK pass (checking for obvious problems).
Checking module b12...
Found and reported 0 problems.

yosys> opt -nodffe -nosdff

3.11. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.

yosys> opt_merge -nomux

3.11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

yosys> opt_muxtree

3.11.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~76 debug messages>

yosys> opt_reduce

3.11.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

yosys> opt_merge

3.11.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.11.6. Executing OPT_DFF pass (perform DFF optimizations).
Changing const-value async load to async reset on $verific$wr_reg$b12.vhd:564$542 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$timebase_reg$b12.vhd:564$546 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$speaker_reg$b12.vhd:144$304 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$sound_reg$b12.vhd:564$548 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$scan_reg$b12.vhd:564$543 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$s_reg$b12.vhd:144$303 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$play_reg$b12.vhd:564$541 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$nloss_reg$b12.vhd:564$539 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$nl_reg$b12.vhd:564$540 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_9$b12.vhd:184$391 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_8$b12.vhd:184$390 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_7$b12.vhd:184$389 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_6$b12.vhd:184$388 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_5$b12.vhd:184$387 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_4$b12.vhd:184$386 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_32$b12.vhd:184$414 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_31$b12.vhd:184$413 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_30$b12.vhd:184$412 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_3$b12.vhd:184$385 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_29$b12.vhd:184$411 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_28$b12.vhd:184$410 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_27$b12.vhd:184$409 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_26$b12.vhd:184$408 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_25$b12.vhd:184$407 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_24$b12.vhd:184$406 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_23$b12.vhd:184$405 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_22$b12.vhd:184$404 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_21$b12.vhd:184$403 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_20$b12.vhd:184$402 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_2$b12.vhd:184$384 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_19$b12.vhd:184$401 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_18$b12.vhd:184$400 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_17$b12.vhd:184$399 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_16$b12.vhd:184$398 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_15$b12.vhd:184$397 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_14$b12.vhd:184$396 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_13$b12.vhd:184$395 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_12$b12.vhd:184$394 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_11$b12.vhd:184$393 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_10$b12.vhd:184$392 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg$b12.vhd:184$415 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$max_reg$b12.vhd:564$544 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$ind_reg$b12.vhd:564$545 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$gamma_reg$b12.vhd:564$551 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$data_out_reg$b12.vhd:184$383 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$data_in_reg$b12.vhd:564$550 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$counter_reg$b12.vhd:144$305 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$count_reg_2$b12.vhd:164$311 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$count_reg$b12.vhd:564$547 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$address_reg$b12.vhd:564$549 ($aldff) from module b12.

yosys> opt_clean

3.11.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..

yosys> opt_expr

3.11.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.

3.11.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.11.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~76 debug messages>

yosys> opt_reduce

3.11.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

yosys> opt_merge

3.11.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.11.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.11.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..

yosys> opt_expr

3.11.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.

3.11.16. Finished OPT passes. (There is nothing left to do.)

yosys> fsm -encoding binary

3.12. Executing FSM pass (extract and optimize FSM).

yosys> fsm_detect

3.12.1. Executing FSM_DETECT pass (finding FSMs in design).

yosys> fsm_extract

3.12.2. Executing FSM_EXTRACT pass (extracting FSM from design).

yosys> fsm_opt

3.12.3. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> opt_clean

3.12.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..

yosys> fsm_opt

3.12.5. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> fsm_recode -encoding binary

3.12.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

yosys> fsm_info

3.12.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

yosys> fsm_map

3.12.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

yosys> opt -sat

3.13. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.

yosys> opt_merge -nomux

3.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~76 debug messages>

yosys> opt_reduce

3.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

yosys> opt_merge

3.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.13.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $verific$s_reg$b12.vhd:144$303 ($adff) from module b12 (D = $verific$n125$27, Q = \s).
Adding EN signal on $verific$memory_reg_9$b12.vhd:184$391 ($adff) from module b12 (D = \data_in, Q = \memory[24]).
Adding EN signal on $verific$memory_reg_8$b12.vhd:184$390 ($adff) from module b12 (D = \data_in, Q = \memory[25]).
Adding EN signal on $verific$memory_reg_7$b12.vhd:184$389 ($adff) from module b12 (D = \data_in, Q = \memory[26]).
Adding EN signal on $verific$memory_reg_6$b12.vhd:184$388 ($adff) from module b12 (D = \data_in, Q = \memory[27]).
Adding EN signal on $verific$memory_reg_5$b12.vhd:184$387 ($adff) from module b12 (D = \data_in, Q = \memory[28]).
Adding EN signal on $verific$memory_reg_4$b12.vhd:184$386 ($adff) from module b12 (D = \data_in, Q = \memory[29]).
Adding EN signal on $verific$memory_reg_32$b12.vhd:184$414 ($adff) from module b12 (D = \data_in, Q = \memory[1]).
Adding EN signal on $verific$memory_reg_31$b12.vhd:184$413 ($adff) from module b12 (D = \data_in, Q = \memory[2]).
Adding EN signal on $verific$memory_reg_30$b12.vhd:184$412 ($adff) from module b12 (D = \data_in, Q = \memory[3]).
Adding EN signal on $verific$memory_reg_3$b12.vhd:184$385 ($adff) from module b12 (D = \data_in, Q = \memory[30]).
Adding EN signal on $verific$memory_reg_29$b12.vhd:184$411 ($adff) from module b12 (D = \data_in, Q = \memory[4]).
Adding EN signal on $verific$memory_reg_28$b12.vhd:184$410 ($adff) from module b12 (D = \data_in, Q = \memory[5]).
Adding EN signal on $verific$memory_reg_27$b12.vhd:184$409 ($adff) from module b12 (D = \data_in, Q = \memory[6]).
Adding EN signal on $verific$memory_reg_26$b12.vhd:184$408 ($adff) from module b12 (D = \data_in, Q = \memory[7]).
Adding EN signal on $verific$memory_reg_25$b12.vhd:184$407 ($adff) from module b12 (D = \data_in, Q = \memory[8]).
Adding EN signal on $verific$memory_reg_24$b12.vhd:184$406 ($adff) from module b12 (D = \data_in, Q = \memory[9]).
Adding EN signal on $verific$memory_reg_23$b12.vhd:184$405 ($adff) from module b12 (D = \data_in, Q = \memory[10]).
Adding EN signal on $verific$memory_reg_22$b12.vhd:184$404 ($adff) from module b12 (D = \data_in, Q = \memory[11]).
Adding EN signal on $verific$memory_reg_21$b12.vhd:184$403 ($adff) from module b12 (D = \data_in, Q = \memory[12]).
Adding EN signal on $verific$memory_reg_20$b12.vhd:184$402 ($adff) from module b12 (D = \data_in, Q = \memory[13]).
Adding EN signal on $verific$memory_reg_2$b12.vhd:184$384 ($adff) from module b12 (D = \data_in, Q = \memory[31]).
Adding EN signal on $verific$memory_reg_19$b12.vhd:184$401 ($adff) from module b12 (D = \data_in, Q = \memory[14]).
Adding EN signal on $verific$memory_reg_18$b12.vhd:184$400 ($adff) from module b12 (D = \data_in, Q = \memory[15]).
Adding EN signal on $verific$memory_reg_17$b12.vhd:184$399 ($adff) from module b12 (D = \data_in, Q = \memory[16]).
Adding EN signal on $verific$memory_reg_16$b12.vhd:184$398 ($adff) from module b12 (D = \data_in, Q = \memory[17]).
Adding EN signal on $verific$memory_reg_15$b12.vhd:184$397 ($adff) from module b12 (D = \data_in, Q = \memory[18]).
Adding EN signal on $verific$memory_reg_14$b12.vhd:184$396 ($adff) from module b12 (D = \data_in, Q = \memory[19]).
Adding EN signal on $verific$memory_reg_13$b12.vhd:184$395 ($adff) from module b12 (D = \data_in, Q = \memory[20]).
Adding EN signal on $verific$memory_reg_12$b12.vhd:184$394 ($adff) from module b12 (D = \data_in, Q = \memory[21]).
Adding EN signal on $verific$memory_reg_11$b12.vhd:184$393 ($adff) from module b12 (D = \data_in, Q = \memory[22]).
Adding EN signal on $verific$memory_reg_10$b12.vhd:184$392 ($adff) from module b12 (D = \data_in, Q = \memory[23]).
Adding EN signal on $verific$memory_reg$b12.vhd:184$415 ($adff) from module b12 (D = \data_in, Q = \memory[0]).

yosys> opt_clean

3.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..
Removed 65 unused cells and 65 unused wires.
<suppressed ~66 debug messages>

yosys> opt_expr

3.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.

3.13.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.13.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~43 debug messages>

yosys> opt_reduce

3.13.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

yosys> opt_merge

3.13.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.13.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.13.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..

yosys> opt_expr

3.13.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.

3.13.16. Finished OPT passes. (There is nothing left to do.)

yosys> wreduce -keepdc

3.14. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 3) from port A of cell b12.$verific$LessThan_4$b12.vhd:80$267 ($lt).
Removed top 2 bits (of 3) from port B of cell b12.$verific$add_8$b12.vhd:85$271 ($add).
Removed top 1 bits (of 4) from port Y of cell b12.$verific$add_8$b12.vhd:85$271 ($add).
Removed top 1 bits (of 3) from port A of cell b12.$verific$LessThan_13$b12.vhd:88$277 ($lt).
Removed top 2 bits (of 3) from port A of cell b12.$verific$LessThan_49$b12.vhd:125$293 ($lt).
Removed top 1 bits (of 2) from port B of cell b12.$verific$add_69$b12.vhd:159$308 ($add).
Removed top 31 bits (of 32) from port A of cell b12.$verific$Decoder_79$b12.vhd:182$318 ($shl).
Removed top 3 bits (of 4) from port A of cell b12.$verific$Decoder_195$b12.vhd:284$420 ($shl).
Removed top 1 bits (of 7) from port A of cell b12.$verific$sub_207$b12.vhd:298$427 ($sub).
Removed top 6 bits (of 7) from port B of cell b12.$verific$sub_207$b12.vhd:298$427 ($sub).
Removed top 1 bits (of 7) from port Y of cell b12.$verific$sub_207$b12.vhd:298$427 ($sub).
Removed top 4 bits (of 5) from port B of cell b12.$verific$add_215$b12.vhd:306$432 ($add).
Removed top 1 bits (of 6) from port Y of cell b12.$verific$add_215$b12.vhd:306$432 ($add).
Removed top 1 bits (of 2) from port A of cell b12.$verific$equal_239$b12.vhd:358$442 ($eq).
Removed top 1 bits (of 4) from mux cell b12.$verific$mux_273$b12.vhd:394$471 ($mux).
Removed top 1 bits (of 4) from mux cell b12.$verific$mux_274$b12.vhd:394$472 ($mux).
Removed top 1 bits (of 4) from mux cell b12.$verific$mux_275$b12.vhd:394$473 ($mux).
Removed top 1 bits (of 4) from mux cell b12.$verific$mux_276$b12.vhd:394$474 ($mux).
Removed top 3 bits (of 4) from port A of cell b12.$verific$Decoder_289$b12.vhd:400$482 ($shl).
Removed top 4 bits (of 5) from port B of cell b12.$verific$add_309$b12.vhd:423$488 ($add).
Removed top 1 bits (of 6) from port Y of cell b12.$verific$add_309$b12.vhd:423$488 ($add).
Removed top 1 bits (of 7) from port A of cell b12.$verific$sub_311$b12.vhd:424$491 ($sub).
Removed top 6 bits (of 7) from port B of cell b12.$verific$sub_311$b12.vhd:424$491 ($sub).
Removed top 1 bits (of 7) from port Y of cell b12.$verific$sub_311$b12.vhd:424$491 ($sub).
Removed top 2 bits (of 19) from mux cell b12.$verific$mux_503$b12.vhd:510$494 ($mux).
Removed top 1 bits (of 4) from wire b12.$verific$n1024$184.
Removed top 1 bits (of 4) from wire b12.$verific$n1073$186.
Removed top 1 bits (of 4) from wire b12.$verific$n1139$199.
Removed top 1 bits (of 4) from wire b12.$verific$n1144$200.
Removed top 1 bits (of 4) from wire b12.$verific$n1149$201.
Removed top 1 bits (of 4) from wire b12.$verific$n1154$202.
Removed top 1 bits (of 7) from wire b12.$verific$n1280$211.
Removed top 1 bits (of 5) from wire b12.$verific$n1336$215.
Removed top 3 bits (of 5) from wire b12.$verific$n1688$237.
Removed top 2 bits (of 5) from wire b12.$verific$n1733$242.
Removed top 4 bits (of 5) from wire b12.$verific$n1997$252.
Removed top 1 bits (of 7) from wire b12.$verific$n765$167.
Removed top 1 bits (of 4) from wire b12.$verific$n926$180.
Removed top 1 bits (of 4) from wire b12.$verific$n975$182.

yosys> peepopt

3.15. Executing PEEPOPT pass (run peephole optimizers).

yosys> pmuxtree

3.16. Executing PMUXTREE pass.

yosys> opt_clean

3.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..
Removed 0 unused cells and 19 unused wires.
<suppressed ~1 debug messages>

yosys> alumacc

3.18. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module b12:
  creating $macc model for $verific$add_215$b12.vhd:306$432 ($add).
  creating $macc model for $verific$add_309$b12.vhd:423$488 ($add).
  creating $macc model for $verific$add_69$b12.vhd:159$308 ($add).
  creating $macc model for $verific$add_8$b12.vhd:85$271 ($add).
  creating $macc model for $verific$sub_207$b12.vhd:298$427 ($sub).
  creating $macc model for $verific$sub_311$b12.vhd:424$491 ($sub).
  creating $alu model for $macc $verific$sub_311$b12.vhd:424$491.
  creating $alu model for $macc $verific$sub_207$b12.vhd:298$427.
  creating $alu model for $macc $verific$add_8$b12.vhd:85$271.
  creating $alu model for $macc $verific$add_69$b12.vhd:159$308.
  creating $alu model for $macc $verific$add_309$b12.vhd:423$488.
  creating $alu model for $macc $verific$add_215$b12.vhd:306$432.
  creating $alu model for $verific$LessThan_13$b12.vhd:88$277 ($lt): new $alu
  creating $alu model for $verific$LessThan_22$b12.vhd:98$281 ($lt): new $alu
  creating $alu model for $verific$LessThan_31$b12.vhd:107$285 ($lt): new $alu
  creating $alu model for $verific$LessThan_4$b12.vhd:80$267 ($lt): new $alu
  creating $alu model for $verific$LessThan_40$b12.vhd:116$289 ($lt): new $alu
  creating $alu model for $verific$LessThan_49$b12.vhd:125$293 ($lt): new $alu
  creating $alu cell for $verific$LessThan_40$b12.vhd:116$289: $auto$alumacc.cc:485:replace_alu$670
  creating $alu cell for $verific$LessThan_4$b12.vhd:80$267: $auto$alumacc.cc:485:replace_alu$675
  creating $alu cell for $verific$LessThan_31$b12.vhd:107$285: $auto$alumacc.cc:485:replace_alu$680
  creating $alu cell for $verific$LessThan_22$b12.vhd:98$281: $auto$alumacc.cc:485:replace_alu$685
  creating $alu cell for $verific$LessThan_13$b12.vhd:88$277: $auto$alumacc.cc:485:replace_alu$690
  creating $alu cell for $verific$add_215$b12.vhd:306$432: $auto$alumacc.cc:485:replace_alu$695
  creating $alu cell for $verific$add_309$b12.vhd:423$488: $auto$alumacc.cc:485:replace_alu$698
  creating $alu cell for $verific$add_69$b12.vhd:159$308: $auto$alumacc.cc:485:replace_alu$701
  creating $alu cell for $verific$LessThan_49$b12.vhd:125$293: $auto$alumacc.cc:485:replace_alu$704
  creating $alu cell for $verific$add_8$b12.vhd:85$271: $auto$alumacc.cc:485:replace_alu$709
  creating $alu cell for $verific$sub_207$b12.vhd:298$427: $auto$alumacc.cc:485:replace_alu$712
  creating $alu cell for $verific$sub_311$b12.vhd:424$491: $auto$alumacc.cc:485:replace_alu$715
  created 12 $alu and 0 $macc cells.

yosys> opt

3.19. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.
<suppressed ~18 debug messages>

yosys> opt_merge -nomux

3.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~43 debug messages>

yosys> opt_reduce

3.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

yosys> opt_merge

3.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_dff

3.19.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.19.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..
Removed 6 unused cells and 12 unused wires.
<suppressed ~7 debug messages>

yosys> opt_expr

3.19.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.

3.19.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.19.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~43 debug messages>

yosys> opt_reduce

3.19.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

yosys> opt_merge

3.19.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_dff

3.19.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.19.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..

yosys> opt_expr

3.19.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.

3.19.16. Finished OPT passes. (There is nothing left to do.)

yosys> memory -nomap

3.20. Executing MEMORY pass.

yosys> opt_mem

3.20.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

yosys> opt_mem_priority

3.20.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

yosys> opt_mem_feedback

3.20.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

yosys> memory_dff

3.20.4. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

yosys> opt_clean

3.20.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..

yosys> memory_share

3.20.6. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

yosys> opt_mem_widen

3.20.7. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

yosys> opt_clean

3.20.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..

yosys> memory_collect

3.20.9. Executing MEMORY_COLLECT pass (generating $mem cells).

yosys> opt_clean

3.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..

yosys> stat

3.22. Printing statistics.

=== b12 ===

   Number of wires:                268
   Number of wire bits:            759
   Number of public wires:          56
   Number of public wire bits:     133
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                218
     $adff                          17
     $adffe                         33
     $alu                           12
     $bmux                          17
     $eq                             3
     $logic_not                      2
     $mux                           88
     $ne                             3
     $not                            8
     $reduce_and                    32
     $shl                            3


yosys> techmap -map +/techmap.v -map +/rapidsilicon/genesis/arith_map.v

3.23. Executing TECHMAP pass (map to technology primitives).

3.23.1. Executing Verilog-2005 frontend: /home/users/aram/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/aram/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.23.2. Executing Verilog-2005 frontend: /home/users/aram/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/arith_map.v
Parsing Verilog input from `/home/users/aram/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_rs_alu'.
Successfully finished Verilog frontend.

3.23.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $reduce_and.
Using template $paramod$78e969f2586efcf3a5b0b0440bcca0db83d5cca2\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $not.
Using template $paramod$a04dd9d4d8b430140c4ff94b50470fb380fda2a0\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $mux.
Using template $paramod$672a140277c71df8314410f22acc08d55222c3c7\_90_alu for cells of type $alu.
Using template $paramod$79fc7abbb3333dbd5736999d565fd903198fb1eb\_90_alu for cells of type $alu.
Using template $paramod$3ef7d3dd227da7627a99c5e5a6a4deb817573e39\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $bmux.
Using extmapper simplemap for cells of type $adffe.
Using extmapper simplemap for cells of type $adff.
Using template $paramod$constmap:dbcddb7b4524c1c5fa25e15435f3b9049e3d7d7a$paramod$3bf4391c2edcd7fdc564361d03ba2cf3a33c67d4\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using template $paramod$constmap:66d421c313e4e958be776b99540ac2de3b59fdbc$paramod$77562a466236eb4a6d905351a0995599b75075cb\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $eq.
Using template $paramod$175e67c02b86e96b1288b9dc100122520d7240d8\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $and.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000011 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000110 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000101 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000010 for cells of type $lcu.
Using extmapper simplemap for cells of type $or.
No more expansions possible.
<suppressed ~2142 debug messages>

yosys> stat

3.24. Printing statistics.

=== b12 ===

   Number of wires:                788
   Number of wire bits:          22688
   Number of public wires:          56
   Number of public wire bits:     133
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               2460
     $_AND_                        134
     $_DFFE_PP0P_                   65
     $_DFF_PP0_                     54
     $_MUX_                       1950
     $_NOT_                         62
     $_OR_                          72
     $_XOR_                        123


yosys> opt

3.25. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.25.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.
<suppressed ~1084 debug messages>

yosys> opt_merge -nomux

3.25.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
<suppressed ~303 debug messages>
Removed a total of 101 cells.

yosys> opt_muxtree

3.25.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.25.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

yosys> opt_merge

3.25.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_dff

3.25.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $auto$ff.cc:262:slice$1010 ($_DFF_PP0_) from module b12 (D = $verific$n133$30, Q = \speaker).

yosys> opt_clean

3.25.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..
Removed 26 unused cells and 491 unused wires.
<suppressed ~27 debug messages>

yosys> opt_expr

3.25.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.
<suppressed ~34 debug messages>

3.25.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.25.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.25.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

yosys> opt_merge

3.25.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
<suppressed ~57 debug messages>
Removed a total of 19 cells.

yosys> opt_dff

3.25.13. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $auto$ff.cc:262:slice$1025 ($_DFFE_PP0P_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$968, Q = \s).
Adding EN signal on $auto$ff.cc:262:slice$3475 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$3076 [1], Q = \data_in [1]).
Adding EN signal on $auto$ff.cc:262:slice$3474 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$3076 [0], Q = \data_in [0]).
Adding EN signal on $auto$ff.cc:262:slice$3473 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$3006 [4], Q = \address [4]).
Adding EN signal on $auto$ff.cc:262:slice$3472 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$3006 [3], Q = \address [3]).
Adding EN signal on $auto$ff.cc:262:slice$3471 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$3006 [2], Q = \address [2]).
Adding EN signal on $auto$ff.cc:262:slice$3470 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$3006 [1], Q = \address [1]).
Adding EN signal on $auto$ff.cc:262:slice$3469 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$3006 [0], Q = \address [0]).
Adding EN signal on $auto$ff.cc:262:slice$3468 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$3364 [2], Q = \sound [2]).
Adding EN signal on $auto$ff.cc:262:slice$3467 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$3364 [1], Q = \sound [1]).
Adding EN signal on $auto$ff.cc:262:slice$3466 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$3364 [0], Q = \sound [0]).
Adding EN signal on $auto$ff.cc:262:slice$3465 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$3263 [5], Q = \count [5]).
Adding EN signal on $auto$ff.cc:262:slice$3464 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$3263 [4], Q = \count [4]).
Adding EN signal on $auto$ff.cc:262:slice$3463 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$3263 [3], Q = \count [3]).
Adding EN signal on $auto$ff.cc:262:slice$3462 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$3263 [2], Q = \count [2]).
Adding EN signal on $auto$ff.cc:262:slice$3461 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$3263 [1], Q = \count [1]).
Adding EN signal on $auto$ff.cc:262:slice$3460 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$3263 [0], Q = \count [0]).
Adding EN signal on $auto$ff.cc:262:slice$3459 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$2685 [5], Q = \timebase [5]).
Adding EN signal on $auto$ff.cc:262:slice$3458 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$2685 [4], Q = \timebase [4]).
Adding EN signal on $auto$ff.cc:262:slice$3457 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$2685 [3], Q = \timebase [3]).
Adding EN signal on $auto$ff.cc:262:slice$3456 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$2685 [2], Q = \timebase [2]).
Adding EN signal on $auto$ff.cc:262:slice$3455 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$2685 [1], Q = \timebase [1]).
Adding EN signal on $auto$ff.cc:262:slice$3454 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$2685 [0], Q = \timebase [0]).
Adding EN signal on $auto$ff.cc:262:slice$3453 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$3432 [1], Q = \ind [1]).
Adding EN signal on $auto$ff.cc:262:slice$3452 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$3432 [0], Q = \ind [0]).
Adding EN signal on $auto$ff.cc:262:slice$3451 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$2495 [4], Q = \max [4]).
Adding EN signal on $auto$ff.cc:262:slice$3450 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$2495 [3], Q = \max [3]).
Adding EN signal on $auto$ff.cc:262:slice$3449 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$2495 [2], Q = \max [2]).
Adding EN signal on $auto$ff.cc:262:slice$3448 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$2495 [1], Q = \max [1]).
Adding EN signal on $auto$ff.cc:262:slice$3447 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$2495 [0], Q = \max [0]).
Adding EN signal on $auto$ff.cc:262:slice$3446 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$2846 [4], Q = \scan [4]).
Adding EN signal on $auto$ff.cc:262:slice$3445 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$2846 [3], Q = \scan [3]).
Adding EN signal on $auto$ff.cc:262:slice$3444 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$2846 [2], Q = \scan [2]).
Adding EN signal on $auto$ff.cc:262:slice$3443 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$2846 [1], Q = \scan [1]).
Adding EN signal on $auto$ff.cc:262:slice$3442 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$2846 [0], Q = \scan [0]).
Adding EN signal on $auto$ff.cc:262:slice$3441 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$2339, Q = \wr).
Adding EN signal on $auto$ff.cc:262:slice$3440 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$2303, Q = \play).
Adding EN signal on $auto$ff.cc:262:slice$3439 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$2264 [3], Q = \nl [3]).
Adding EN signal on $auto$ff.cc:262:slice$3438 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$2264 [2], Q = \nl [2]).
Adding EN signal on $auto$ff.cc:262:slice$3437 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$2264 [1], Q = \nl [1]).
Adding EN signal on $auto$ff.cc:262:slice$3436 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$2264 [0], Q = \nl [0]).
Adding EN signal on $auto$ff.cc:262:slice$3435 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$2138, Q = \nloss).

yosys> opt_clean

3.25.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..
Removed 0 unused cells and 515 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.25.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.
<suppressed ~2289 debug messages>

3.25.16. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.25.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.25.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

yosys> opt_merge

3.25.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
<suppressed ~9105 debug messages>
Removed a total of 3035 cells.

yosys> opt_dff

3.25.20. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.25.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..
Removed 0 unused cells and 2592 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.25.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.

3.25.23. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.25.24. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.25.25. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

yosys> opt_merge

3.25.26. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_dff

3.25.27. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.25.28. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..

yosys> opt_expr

3.25.29. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.

3.25.30. Finished OPT passes. (There is nothing left to do.)

yosys> opt -fast -full

3.26. Executing OPT pass (performing simple optimizations).

yosys> opt_expr -full

3.26.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.
<suppressed ~497 debug messages>

yosys> opt_merge

3.26.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
<suppressed ~81 debug messages>
Removed a total of 27 cells.

yosys> opt_dff

3.26.3. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.26.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..
Removed 0 unused cells and 94 unused wires.
<suppressed ~1 debug messages>

3.26.5. Finished fast OPT passes.

yosys> memory_map

3.27. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

yosys> opt -full

3.28. Executing OPT pass (performing simple optimizations).

yosys> opt_expr -full

3.28.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.
<suppressed ~37 debug messages>

yosys> opt_merge -nomux

3.28.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
<suppressed ~18 debug messages>
Removed a total of 6 cells.

yosys> opt_muxtree

3.28.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce -full

3.28.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

yosys> opt_merge

3.28.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_share

3.28.6. Executing OPT_SHARE pass.
    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$2045 in front of them:
        $auto$simplemap.cc:312:simplemap_bmux$1984
        $auto$simplemap.cc:312:simplemap_bmux$1979

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$984 in front of them:
        $auto$simplemap.cc:278:simplemap_mux$928
        $auto$simplemap.cc:278:simplemap_mux$916

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$985 in front of them:
        $auto$simplemap.cc:278:simplemap_mux$929
        $auto$simplemap.cc:278:simplemap_mux$917

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$986 in front of them:
        $auto$simplemap.cc:278:simplemap_mux$930
        $auto$simplemap.cc:278:simplemap_mux$918

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$987 in front of them:
        $auto$simplemap.cc:278:simplemap_mux$957
        $auto$simplemap.cc:278:simplemap_mux$940

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$988 in front of them:
        $auto$simplemap.cc:278:simplemap_mux$958
        $auto$simplemap.cc:278:simplemap_mux$941

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$989 in front of them:
        $auto$simplemap.cc:278:simplemap_mux$959
        $auto$simplemap.cc:278:simplemap_mux$942


yosys> opt_dff

3.28.7. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.28.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..
Removed 0 unused cells and 6 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr -full

3.28.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.
<suppressed ~7 debug messages>

3.28.10. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.28.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~7 debug messages>

yosys> opt_reduce -full

3.28.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

yosys> opt_merge

3.28.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
<suppressed ~12 debug messages>
Removed a total of 4 cells.

yosys> opt_share

3.28.14. Executing OPT_SHARE pass.

yosys> opt_dff

3.28.15. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.28.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..
Removed 0 unused cells and 4 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr -full

3.28.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.

3.28.18. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.28.19. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

yosys> opt_reduce -full

3.28.20. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

yosys> opt_merge

3.28.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_share

3.28.22. Executing OPT_SHARE pass.

yosys> opt_dff

3.28.23. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.28.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..

yosys> opt_expr -full

3.28.25. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.

3.28.26. Finished OPT passes. (There is nothing left to do.)

yosys> abc -script abc_tmp.scr

3.29. Executing ABC pass (technology mapping using ABC).

3.29.1. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Extracted 958 gates and 1083 wires to a netlist network with 123 inputs and 107 outputs.

3.29.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + source /home/users/aram/yosys_verific_rs/result_04-05-2022T15-08-45/Golden_synth_rs_ade.json/b12/abc_tmp.scr 
ABC:   #Luts =   293  Max Lvl =   8  Avg Lvl =   2.51  [   0.17 sec. at Pass 0]
ABC:   #Luts =   234  Max Lvl =   8  Avg Lvl =   2.73  [   2.15 sec. at Pass 1]
ABC:   #Luts =   225  Max Lvl =   8  Avg Lvl =   2.64  [   0.53 sec. at Pass 2]
ABC:   #Luts =   221  Max Lvl =   9  Avg Lvl =   2.86  [   4.09 sec. at Pass 3]
ABC:   #Luts =   221  Max Lvl =   9  Avg Lvl =   2.86  [   0.39 sec. at Pass 4]
ABC:   #Luts =   220  Max Lvl =   7  Avg Lvl =   2.50  [   3.36 sec. at Pass 5]
ABC:   #Luts =   220  Max Lvl =   7  Avg Lvl =   2.50  [   0.53 sec. at Pass 6]
ABC:   #Luts =   216  Max Lvl =   7  Avg Lvl =   2.45  [   3.67 sec. at Pass 7]
ABC:   #Luts =   215  Max Lvl =   8  Avg Lvl =   2.80  [   0.46 sec. at Pass 8]
ABC:   #Luts =   214  Max Lvl =   7  Avg Lvl =   2.46  [   4.29 sec. at Pass 9]
ABC:   #Luts =   214  Max Lvl =   7  Avg Lvl =   2.46  [   0.52 sec. at Pass 10]
ABC:   #Luts =   214  Max Lvl =   7  Avg Lvl =   2.46  [   4.60 sec. at Pass 11]
ABC:   #Luts =   214  Max Lvl =   7  Avg Lvl =   2.46  [   0.79 sec. at Pass 12]
ABC: + write_blif <abc-temp-dir>/output.blif 

3.29.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:      214
ABC RESULTS:        internal signals:      853
ABC RESULTS:           input signals:      123
ABC RESULTS:          output signals:      107
Removing temp directory.

yosys> opt

3.30. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.30.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.

yosys> opt_merge -nomux

3.30.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.30.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

yosys> opt_reduce

3.30.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

yosys> opt_merge

3.30.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_dff

3.30.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.30.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..
Removed 0 unused cells and 499 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.30.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.

3.30.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.30.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

yosys> opt_reduce

3.30.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

yosys> opt_merge

3.30.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_dff

3.30.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.30.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..

yosys> opt_expr

3.30.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.

3.30.16. Finished OPT passes. (There is nothing left to do.)

yosys> stat

3.31. Printing statistics.

=== b12 ===

   Number of wires:                273
   Number of wire bits:            360
   Number of public wires:          56
   Number of public wire bits:     133
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                336
     $_DFFE_PP0P_                  107
     $_DFF_PP0_                     12
     $lut                          214
     $mux                            3


yosys> shregmap -minlen 8 -maxlen 20

3.32. Executing SHREGMAP pass (map shift registers).
Converted 0 dff cells into 0 shift registers.

yosys> dfflegalize -cell $_DFF_?_ 0 -cell $_DFF_???_ 0 -cell $_DFFE_????_ 0 -cell $_DFFSR_???_ 0 -cell $_DFFSRE_????_ 0 -cell $_DLATCHSR_PPP_ 0

3.33. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

yosys> stat

3.34. Printing statistics.

=== b12 ===

   Number of wires:                273
   Number of wire bits:            360
   Number of public wires:          56
   Number of public wire bits:     133
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                336
     $_DFFE_PP0P_                  107
     $_DFF_PP0_                     12
     $lut                          214
     $mux                            3


yosys> techmap -map +/techmap.v -map +/rapidsilicon/genesis/ffs_map.v

3.35. Executing TECHMAP pass (map to technology primitives).

3.35.1. Executing Verilog-2005 frontend: /home/users/aram/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/aram/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.35.2. Executing Verilog-2005 frontend: /home/users/aram/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/ffs_map.v
Parsing Verilog input from `/home/users/aram/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/ffs_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP0N_'.
Generating RTLIL representation for module `\$_DFFE_PN0P_'.
Generating RTLIL representation for module `\$_DFFE_PN0N_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP1N_'.
Generating RTLIL representation for module `\$_DFFE_PN1P_'.
Generating RTLIL representation for module `\$_DFFE_PN1N_'.
Generating RTLIL representation for module `\$_DFFSR_PPP_'.
Generating RTLIL representation for module `\$_DFFSR_PNP_'.
Generating RTLIL representation for module `\$_DFFSR_PNN_'.
Generating RTLIL representation for module `\$_DFFSR_PPN_'.
Generating RTLIL representation for module `\$_DFFSR_NPP_'.
Generating RTLIL representation for module `\$_DFFSR_NNP_'.
Generating RTLIL representation for module `\$_DFFSR_NNN_'.
Generating RTLIL representation for module `\$_DFFSR_NPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PNPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPNP_'.
Generating RTLIL representation for module `\$_DFFSRE_PNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PNPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PPNN_'.
Generating RTLIL representation for module `\$_DFFSRE_PNNN_'.
Generating RTLIL representation for module `\$_DLATCHSR_PPP_'.
Generating RTLIL representation for module `\$_DLATCHSR_NPP_'.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP0N_'.
Generating RTLIL representation for module `\$_DFFE_NN0P_'.
Generating RTLIL representation for module `\$_DFFE_NN0N_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_NP1N_'.
Generating RTLIL representation for module `\$_DFFE_NN1P_'.
Generating RTLIL representation for module `\$_DFFE_NN1N_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNPP_'.
Generating RTLIL representation for module `\$_DFFSRE_NPNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPN_'.
Generating RTLIL representation for module `\$_DFFSRE_NNPN_'.
Generating RTLIL representation for module `\$_DFFSRE_NPNN_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNN_'.
Generating RTLIL representation for module `\$__SHREG_DFF_P_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PN0_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NN0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFF_PN1_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_NN1_'.
Successfully finished Verilog frontend.

3.35.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $lut.
Using template \$_DFF_PP0_ for cells of type $_DFF_PP0_.
Using template \$_DFFE_PP0P_ for cells of type $_DFFE_PP0P_.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $logic_not.
No more expansions possible.
<suppressed ~591 debug messages>

yosys> opt_expr -mux_undef

3.36. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.
<suppressed ~7010 debug messages>

yosys> simplemap

3.37. Executing SIMPLEMAP pass (map simple cells to gate primitives).

yosys> opt_expr

3.38. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.

yosys> opt_merge

3.39. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
<suppressed ~2406 debug messages>
Removed a total of 802 cells.

yosys> opt_dff -nodffe -nosdff

3.40. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.41. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..
Removed 0 unused cells and 1140 unused wires.
<suppressed ~1 debug messages>

yosys> opt -nodffe -nosdff

3.42. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.42.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.
<suppressed ~139 debug messages>

yosys> opt_merge -nomux

3.42.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
<suppressed ~9 debug messages>
Removed a total of 3 cells.

yosys> opt_muxtree

3.42.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.42.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

yosys> opt_merge

3.42.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.42.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.42.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..
Removed 0 unused cells and 16 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.42.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.

3.42.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.42.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.42.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

yosys> opt_merge

3.42.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.42.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.42.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..

yosys> opt_expr

3.42.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.

3.42.16. Finished OPT passes. (There is nothing left to do.)

yosys> abc -script abc_tmp.scr

3.43. Executing ABC pass (technology mapping using ABC).

3.43.1. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Extracted 1170 gates and 1293 wires to a netlist network with 121 inputs and 101 outputs.

3.43.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + source /home/users/aram/yosys_verific_rs/result_04-05-2022T15-08-45/Golden_synth_rs_ade.json/b12/abc_tmp.scr 
ABC:   #Luts =   219  Max Lvl =   7  Avg Lvl =   2.57  [   0.09 sec. at Pass 0]
ABC:   #Luts =   217  Max Lvl =   7  Avg Lvl =   2.61  [   1.85 sec. at Pass 1]
ABC:   #Luts =   213  Max Lvl =   7  Avg Lvl =   2.60  [   0.64 sec. at Pass 2]
ABC:   #Luts =   213  Max Lvl =   7  Avg Lvl =   2.60  [   3.90 sec. at Pass 3]
ABC:   #Luts =   213  Max Lvl =   7  Avg Lvl =   2.60  [   0.52 sec. at Pass 4]
ABC:   #Luts =   213  Max Lvl =   7  Avg Lvl =   2.60  [   5.07 sec. at Pass 5]
ABC: + write_blif <abc-temp-dir>/output.blif 

3.43.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:      213
ABC RESULTS:        internal signals:     1071
ABC RESULTS:           input signals:      121
ABC RESULTS:          output signals:      101
Removing temp directory.

yosys> opt

3.44. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.44.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.

yosys> opt_merge -nomux

3.44.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.44.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.44.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

yosys> opt_merge

3.44.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_dff

3.44.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.44.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..
Removed 0 unused cells and 943 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.44.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.

3.44.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.44.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.44.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

yosys> opt_merge

3.44.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_dff

3.44.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.44.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..

yosys> opt_expr

3.44.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.

3.44.16. Finished OPT passes. (There is nothing left to do.)

yosys> hierarchy -check

3.45. Executing HIERARCHY pass (managing design hierarchy).

3.45.1. Analyzing design hierarchy..
Top module:  \b12

3.45.2. Analyzing design hierarchy..
Top module:  \b12
Removed 0 unused modules.

yosys> stat

3.46. Printing statistics.

=== b12 ===

   Number of wires:                269
   Number of wire bits:            348
   Number of public wires:          56
   Number of public wire bits:     133
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                332
     $lut                          213
     dffsre                        119


yosys> opt_clean -purge

3.47. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..
Removed 0 unused cells and 2 unused wires.
<suppressed ~2 debug messages>

yosys> write_verilog -noattr -nohex synthesized.v

3.48. Executing Verilog backend.

yosys> bmuxmap

3.48.1. Executing BMUXMAP pass.

yosys> demuxmap

3.48.2. Executing DEMUXMAP pass.

yosys> clean_zerowidth
Dumping module `\b12'.

End of script. Logfile hash: 9e6c2f6c6c, CPU: user 6.37s system 0.06s, MEM: 32.52 MB peak
Yosys 0.16+6 (git sha1 7f5477eb1, gcc 9.1.0 -fPIC -Os)
Time spent: 97% 2x abc (251 sec), 0% 44x opt_expr (2 sec), ...
real 46.80
user 238.05
sys 19.81
