
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys-Verific 0.0.19
 Yosys 0.16+65 (git sha1 91803ad5c, gcc 9.1.0 -fPIC -Os)


-- Executing script file `yosys.ys' --
echo on

yosys> plugin -i synth-rs

yosys> read -verific

yosys> read -incdir .

yosys> verific -vlog-incdir .

1. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Mar22_SW_Release, released at Fri Apr  1 00:31:54 2022.

yosys> verilog_defaults -add -I.

yosys> read -vhdl dual_mem.vhd key_schedule.vhd tb_key_schedule.vhd

yosys> verific -vhdl dual_mem.vhd key_schedule.vhd tb_key_schedule.vhd

2. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Mar22_SW_Release, released at Fri Apr  1 00:31:54 2022.
VERIFIC-INFO [VHDL-1504] default VHDL library search path is now "/home/users/aram/Workspace/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008"
VERIFIC-COMMENT [VHDL-1481] Analyzing VHDL file 'dual_mem.vhd'
VERIFIC-COMMENT [VHDL-1493] Restoring VHDL unit 'ieee.std_logic_1164' from file '/home/users/aram/Workspace/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008/ieee/std_logic_1164.vdb'
VERIFIC-COMMENT [VHDL-1493] Restoring VHDL unit 'std.standard' from file '/home/users/aram/Workspace/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008/std/standard.vdb'
VERIFIC-COMMENT [VHDL-1493] Restoring VHDL unit 'std.textio' from file '/home/users/aram/Workspace/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008/std/textio.vdb'
VERIFIC-COMMENT [VHDL-1493] Restoring VHDL unit 'ieee.std_logic_unsigned' from file '/home/users/aram/Workspace/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008/ieee/std_logic_unsigned.vdb'
VERIFIC-COMMENT [VHDL-1493] Restoring VHDL unit 'ieee.std_logic_arith' from file '/home/users/aram/Workspace/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008/ieee/std_logic_arith.vdb'
VERIFIC-INFO [VHDL-1012] dual_mem.vhd:20: analyzing entity 'dual_mem'
VERIFIC-INFO [VHDL-1010] dual_mem.vhd:33: analyzing architecture 'rtl'
VERIFIC-COMMENT [VHDL-1481] Analyzing VHDL file 'key_schedule.vhd'
VERIFIC-INFO [VHDL-1012] key_schedule.vhd:22: analyzing entity 'key_schedule'
VERIFIC-INFO [VHDL-1010] key_schedule.vhd:35: analyzing architecture 'behavioral'
VERIFIC-COMMENT [VHDL-1481] Analyzing VHDL file 'tb_key_schedule.vhd'
VERIFIC-INFO [VHDL-1012] tb_key_schedule.vhd:20: analyzing entity 'tb_key_schedule'
VERIFIC-INFO [VHDL-1010] tb_key_schedule.vhd:23: analyzing architecture 'behavior'

yosys> synth_rs -top key_schedule -tech genesis -goal area -de -no_dsp -no_bram -verilog synthesized.v

3. Executing synth_rs pass: v0.4.44

yosys> read_verilog -lib -specify -nomem2reg +/rapidsilicon/common/cells_sim.v +/rapidsilicon/genesis/cells_sim.v

3.1. Executing Verilog-2005 frontend: /home/users/aram/Workspace/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v
Parsing Verilog input from `/home/users/aram/Workspace/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\inv'.
Generating RTLIL representation for module `\buff'.
Generating RTLIL representation for module `\logic_0'.
Generating RTLIL representation for module `\logic_1'.
Generating RTLIL representation for module `\gclkbuff'.
Successfully finished Verilog frontend.

3.2. Executing Verilog-2005 frontend: /home/users/aram/Workspace/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/cells_sim.v
Parsing Verilog input from `/home/users/aram/Workspace/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\dffsre'.
Generating RTLIL representation for module `\dffnsre'.
Generating RTLIL representation for module `\latchsre'.
Generating RTLIL representation for module `\latchnsre'.
Generating RTLIL representation for module `\io_scff'.
Generating RTLIL representation for module `\scff'.
Generating RTLIL representation for module `\sh_dff'.
Generating RTLIL representation for module `\adder_carry'.
Generating RTLIL representation for module `\sdffr'.
Generating RTLIL representation for module `\sdffs'.
Generating RTLIL representation for module `\TDP_BRAM18'.
Generating RTLIL representation for module `\TDP36K'.
Generating RTLIL representation for module `\RS_DSP1'.
Generating RTLIL representation for module `\RS_DSP2'.
Generating RTLIL representation for module `\dsp_t1_sim'.
Generating RTLIL representation for module `\dsp_t1_20x18x64'.
Generating RTLIL representation for module `\dsp_t1_10x9x32'.
Successfully finished Verilog frontend.

yosys> hierarchy -check -top key_schedule

3.3. Executing HIERARCHY pass (managing design hierarchy).
VERIFIC-INFO [VHDL-1067] key_schedule.vhd:22: processing 'key_schedule(Behavioral)'
VERIFIC-INFO [VHDL-1067] dual_mem.vhd:20: processing 'dual_mem(rtl)'
VERIFIC-INFO [VHDL-1754] dual_mem.vhd:36: extracting RAM for identifier 'RAM'
Importing module key_schedule.
Importing module dual_mem(rtl).

3.3.1. Analyzing design hierarchy..
Top module:  \key_schedule
Used module:     \dual_mem(rtl)

3.3.2. Analyzing design hierarchy..
Top module:  \key_schedule
Used module:     \dual_mem(rtl)
Removed 0 unused modules.

yosys> proc

3.4. Executing PROC pass (convert processes to netlists).

yosys> proc_clean

3.4.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> proc_rmdead

3.4.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

yosys> proc_prune

3.4.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

yosys> proc_init

3.4.4. Executing PROC_INIT pass (extract init attributes).

yosys> proc_arst

3.4.5. Executing PROC_ARST pass (detect async resets in processes).

yosys> proc_mux

3.4.6. Executing PROC_MUX pass (convert decision trees to multiplexers).

yosys> proc_dlatch

3.4.7. Executing PROC_DLATCH pass (convert process syncs to latches).

yosys> proc_dff

3.4.8. Executing PROC_DFF pass (convert process syncs to FFs).

yosys> proc_memwr

3.4.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

yosys> proc_clean

3.4.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> opt_expr -keepdc

3.4.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module dual_mem(rtl).
Optimizing module key_schedule.
<suppressed ~1 debug messages>

yosys> flatten

3.5. Executing FLATTEN pass (flatten design).
Deleting now unused module dual_mem(rtl).
<suppressed ~2 debug messages>

yosys> tribuf -logic

3.6. Executing TRIBUF pass.

yosys> deminout

3.7. Executing DEMINOUT pass (demote inout ports to input or output).

yosys> opt_expr

3.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.
<suppressed ~2 debug messages>

yosys> opt_clean

3.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..
Removed 0 unused cells and 57 unused wires.
<suppressed ~30 debug messages>

yosys> check

3.10. Executing CHECK pass (checking for obvious problems).
Checking module key_schedule...
Found and reported 0 problems.

yosys> opt -nodffe -nosdff

3.11. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.

yosys> opt_merge -nomux

3.11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.11.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \key_schedule..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~10 debug messages>

yosys> opt_reduce

3.11.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \key_schedule.
Performed a total of 0 changes.

yosys> opt_merge

3.11.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.11.6. Executing OPT_DFF pass (perform DFF optimizations).
Removing never-active async load on $verific$gen_sub_keys.w_3_i_tmp_old_reg$key_schedule.vhd:117$187 ($aldff) from module key_schedule.
Removing never-active async load on $verific$gen_sub_keys.w_2_i_tmp_old_reg$key_schedule.vhd:117$186 ($aldff) from module key_schedule.
Removing never-active async load on $verific$gen_sub_keys.w_1_i_tmp_old_reg$key_schedule.vhd:117$185 ($aldff) from module key_schedule.
Removing never-active async load on $verific$gen_sub_keys.w_0_i_tmp_old_reg$key_schedule.vhd:117$184 ($aldff) from module key_schedule.
Removing never-active async load on $verific$gen_sub_keys.tmp_3_reg$key_schedule.vhd:117$191 ($aldff) from module key_schedule.
Removing never-active async load on $verific$gen_sub_keys.tmp_2_reg$key_schedule.vhd:117$190 ($aldff) from module key_schedule.
Removing never-active async load on $verific$gen_sub_keys.tmp_1_reg$key_schedule.vhd:117$189 ($aldff) from module key_schedule.
Removing never-active async load on $verific$gen_sub_keys.tmp_0_reg$key_schedule.vhd:117$188 ($aldff) from module key_schedule.
Removing never-active async load on $verific$count_5_reg$key_schedule.vhd:62$104 ($aldff) from module key_schedule.
Removing never-active async load on $verific$count_10_reg$key_schedule.vhd:77$111 ($aldff) from module key_schedule.
Removing never-active async load on $flatten\S_BOX_DUAL_2.$verific$read_dpra_reg$dual_mem.vhd:52$230 ($aldff) from module key_schedule.
Removing never-active async load on $flatten\S_BOX_DUAL_2.$verific$read_a_reg$dual_mem.vhd:52$229 ($aldff) from module key_schedule.
Removing never-active async load on $flatten\S_BOX_DUAL_1.$verific$read_dpra_reg$dual_mem.vhd:52$230 ($aldff) from module key_schedule.
Removing never-active async load on $flatten\S_BOX_DUAL_1.$verific$read_a_reg$dual_mem.vhd:52$229 ($aldff) from module key_schedule.

yosys> opt_clean

3.11.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..

yosys> opt_expr

3.11.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.

3.11.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.11.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \key_schedule..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~10 debug messages>

yosys> opt_reduce

3.11.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \key_schedule.
Performed a total of 0 changes.

yosys> opt_merge

3.11.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.11.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.11.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..

yosys> opt_expr

3.11.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.

3.11.16. Finished OPT passes. (There is nothing left to do.)

yosys> fsm -encoding binary

3.12. Executing FSM pass (extract and optimize FSM).

yosys> fsm_detect

3.12.1. Executing FSM_DETECT pass (finding FSMs in design).

yosys> fsm_extract

3.12.2. Executing FSM_EXTRACT pass (extracting FSM from design).

yosys> fsm_opt

3.12.3. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> opt_clean

3.12.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..

yosys> fsm_opt

3.12.5. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> fsm_recode -encoding binary

3.12.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

yosys> fsm_info

3.12.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

yosys> fsm_map

3.12.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

yosys> opt -sat

3.13. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.

yosys> opt_merge -nomux

3.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \key_schedule..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~10 debug messages>

yosys> opt_reduce

3.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \key_schedule.
Performed a total of 0 changes.

yosys> opt_merge

3.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.13.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $verific$gen_sub_keys.w_3_i_tmp_old_reg$key_schedule.vhd:117$187 ($dff) from module key_schedule (D = $verific$n1746$80, Q = \gen_sub_keys.w_3_i_tmp_old, rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$237 ($sdff) from module key_schedule (D = $verific$n1746$80, Q = \gen_sub_keys.w_3_i_tmp_old).
Adding SRST signal on $verific$gen_sub_keys.w_2_i_tmp_old_reg$key_schedule.vhd:117$186 ($dff) from module key_schedule (D = $verific$n1647$77, Q = \gen_sub_keys.w_2_i_tmp_old, rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$251 ($sdff) from module key_schedule (D = $verific$n1647$77, Q = \gen_sub_keys.w_2_i_tmp_old).
Adding SRST signal on $verific$gen_sub_keys.w_1_i_tmp_old_reg$key_schedule.vhd:117$185 ($dff) from module key_schedule (D = $verific$n1548$74, Q = \gen_sub_keys.w_1_i_tmp_old, rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$263 ($sdff) from module key_schedule (D = $verific$n1548$74, Q = \gen_sub_keys.w_1_i_tmp_old).
Adding SRST signal on $verific$gen_sub_keys.w_0_i_tmp_old_reg$key_schedule.vhd:117$184 ($dff) from module key_schedule (D = $verific$n1449$71, Q = \gen_sub_keys.w_0_i_tmp_old, rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$273 ($sdff) from module key_schedule (D = $verific$n1449$71, Q = \gen_sub_keys.w_0_i_tmp_old).
Adding EN signal on $verific$gen_sub_keys.tmp_3_reg$key_schedule.vhd:117$191 ($dff) from module key_schedule (D = $verific$n657$47, Q = \gen_sub_keys.tmp_3).
Adding EN signal on $verific$gen_sub_keys.tmp_2_reg$key_schedule.vhd:117$190 ($dff) from module key_schedule (D = $verific$n557$44, Q = \gen_sub_keys.tmp_2).
Adding EN signal on $verific$gen_sub_keys.tmp_1_reg$key_schedule.vhd:117$189 ($dff) from module key_schedule (D = $verific$n457$41, Q = \gen_sub_keys.tmp_1).
Adding EN signal on $verific$gen_sub_keys.tmp_0_reg$key_schedule.vhd:117$188 ($dff) from module key_schedule (D = $verific$n357$38, Q = \gen_sub_keys.tmp_0).
Adding SRST signal on $verific$count_5_reg$key_schedule.vhd:62$104 ($dff) from module key_schedule (D = $verific$n88$24, Q = \count_5, rval = 3'000).
Adding EN signal on $auto$ff.cc:262:slice$321 ($sdff) from module key_schedule (D = $verific$n84$23, Q = \count_5).
Adding SRST signal on $verific$count_10_reg$key_schedule.vhd:77$111 ($dff) from module key_schedule (D = $verific$n189$31, Q = \count_10, rval = 4'0000).
Adding EN signal on $auto$ff.cc:262:slice$323 ($sdff) from module key_schedule (D = $verific$n184$30, Q = \count_10).

yosys> opt_clean

3.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..
Removed 30 unused cells and 30 unused wires.
<suppressed ~31 debug messages>

yosys> opt_expr

3.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.
<suppressed ~4 debug messages>

3.13.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.13.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \key_schedule..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~6 debug messages>

yosys> opt_reduce

3.13.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \key_schedule.
Performed a total of 0 changes.

yosys> opt_merge

3.13.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
<suppressed ~45 debug messages>
Removed a total of 15 cells.

yosys> opt_dff -sat

3.13.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.13.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..
Removed 0 unused cells and 15 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.13.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.

3.13.16. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.13.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \key_schedule..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~6 debug messages>

yosys> opt_reduce

3.13.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \key_schedule.
Performed a total of 0 changes.

yosys> opt_merge

3.13.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.13.20. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.13.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..

yosys> opt_expr

3.13.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.

3.13.23. Finished OPT passes. (There is nothing left to do.)

yosys> wreduce -keepdc

3.14. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 3) from port B of cell key_schedule.$auto$opt_dff.cc:195:make_patterns_logic$278 ($ne).
Removed top 2 bits (of 3) from port B of cell key_schedule.$verific$add_9$key_schedule.vhd:59$100 ($add).
Removed top 3 bits (of 4) from port B of cell key_schedule.$verific$add_23$key_schedule.vhd:74$107 ($add).
Removed top 2 bits (of 3) from port A of cell key_schedule.$verific$equal_36$key_schedule.vhd:103$116 ($eq).
Removed top 1 bits (of 3) from port A of cell key_schedule.$verific$equal_49$key_schedule.vhd:106$129 ($eq).
Removed top 1 bits (of 3) from port A of cell key_schedule.$verific$equal_53$key_schedule.vhd:109$133 ($eq).
Removed top 2 bits (of 4) from port B of cell key_schedule.$auto$opt_dff.cc:195:make_patterns_logic$268 ($ne).
Removed top 3 bits (of 5) from port B of cell key_schedule.$auto$opt_dff.cc:195:make_patterns_logic$256 ($ne).
Removed top 4 bits (of 6) from port B of cell key_schedule.$auto$opt_dff.cc:195:make_patterns_logic$242 ($ne).

yosys> peepopt

3.15. Executing PEEPOPT pass (run peephole optimizers).

yosys> pmuxtree

3.16. Executing PMUXTREE pass.

yosys> opt_clean

3.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..

yosys> alumacc

3.18. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module key_schedule:
  creating $macc model for $verific$add_23$key_schedule.vhd:74$107 ($add).
  creating $macc model for $verific$add_9$key_schedule.vhd:59$100 ($add).
  creating $alu model for $macc $verific$add_9$key_schedule.vhd:59$100.
  creating $alu model for $macc $verific$add_23$key_schedule.vhd:74$107.
  creating $alu cell for $verific$add_23$key_schedule.vhd:74$107: $auto$alumacc.cc:485:replace_alu$325
  creating $alu cell for $verific$add_9$key_schedule.vhd:59$100: $auto$alumacc.cc:485:replace_alu$328
  created 2 $alu and 0 $macc cells.

yosys> opt

3.19. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.

yosys> opt_merge -nomux

3.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \key_schedule..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~6 debug messages>

yosys> opt_reduce

3.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \key_schedule.
Performed a total of 0 changes.

yosys> opt_merge

3.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
Removed a total of 0 cells.

yosys> opt_dff

3.19.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.19.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..

yosys> opt_expr

3.19.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.

3.19.9. Finished OPT passes. (There is nothing left to do.)

yosys> stat

3.20. Printing statistics.

=== key_schedule ===

   Number of wires:                106
   Number of wire bits:           1479
   Number of public wires:          40
   Number of public wire bits:     704
   Number of memories:               2
   Number of memory bits:         4096
   Number of processes:              0
   Number of cells:                 83
     $alu                            2
     $and                            2
     $bmux                           8
     $dff                            4
     $dffe                           4
     $eq                             5
     $memrd                          4
     $memwr                          2
     $mux                           20
     $ne                             7
     $not                            5
     $reduce_and                     8
     $reduce_bool                    1
     $sdffe                          6
     $xor                            5


yosys> memory -nomap

3.21. Executing MEMORY pass.

yosys> opt_mem

3.21.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 4 transformations.

yosys> opt_mem_priority

3.21.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

yosys> opt_mem_feedback

3.21.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

yosys> memory_dff

3.21.4. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

yosys> opt_clean

3.21.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..
Removed 4 unused cells and 4 unused wires.
<suppressed ~8 debug messages>

yosys> memory_share

3.21.6. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

yosys> opt_mem_widen

3.21.7. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

yosys> opt_clean

3.21.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..

yosys> memory_collect

3.21.9. Executing MEMORY_COLLECT pass (generating $mem cells).

yosys> stat

3.22. Printing statistics.

=== key_schedule ===

   Number of wires:                102
   Number of wire bits:           1447
   Number of public wires:          36
   Number of public wire bits:     672
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 73
     $alu                            2
     $and                            2
     $bmux                           8
     $dffe                           4
     $eq                             5
     $mux                           20
     $ne                             7
     $not                            5
     $reduce_and                     8
     $reduce_bool                    1
     $sdffe                          6
     $xor                            5


yosys> opt_clean

3.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..

yosys> stat

3.24. Printing statistics.

=== key_schedule ===

   Number of wires:                102
   Number of wire bits:           1447
   Number of public wires:          36
   Number of public wire bits:     672
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 73
     $alu                            2
     $and                            2
     $bmux                           8
     $dffe                           4
     $eq                             5
     $mux                           20
     $ne                             7
     $not                            5
     $reduce_and                     8
     $reduce_bool                    1
     $sdffe                          6
     $xor                            5


yosys> techmap -map +/techmap.v -map +/rapidsilicon/genesis/arith_map.v

3.25. Executing TECHMAP pass (map to technology primitives).

3.25.1. Executing Verilog-2005 frontend: /home/users/aram/Workspace/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/aram/Workspace/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.25.2. Executing Verilog-2005 frontend: /home/users/aram/Workspace/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/arith_map.v
Parsing Verilog input from `/home/users/aram/Workspace/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_rs_alu'.
Successfully finished Verilog frontend.

3.25.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $sdffe.
Using extmapper simplemap for cells of type $and.
Using template $paramod$3ef7d3dd227da7627a99c5e5a6a4deb817573e39\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $bmux.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $dffe.
Using template $paramod$32a7b7b86c07519b7537abc18e96f0331f97914d\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_bool.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000011 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000100 for cells of type $lcu.
Using extmapper simplemap for cells of type $or.
No more expansions possible.
<suppressed ~585 debug messages>

yosys> stat

3.26. Printing statistics.

=== key_schedule ===

   Number of wires:                255
   Number of wire bits:           3979
   Number of public wires:          36
   Number of public wire bits:     672
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1253
     $_AND_                         46
     $_DFFE_PP_                    128
     $_MUX_                        686
     $_NOT_                         17
     $_OR_                          43
     $_SDFFE_PP0P_                 135
     $_XOR_                        198


yosys> opt

3.27. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.27.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.
<suppressed ~515 debug messages>

yosys> opt_merge -nomux

3.27.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
<suppressed ~333 debug messages>
Removed a total of 111 cells.

yosys> opt_muxtree

3.27.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \key_schedule..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.27.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \key_schedule.
Performed a total of 0 changes.

yosys> opt_merge

3.27.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
Removed a total of 0 cells.

yosys> opt_dff

3.27.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $auto$ff.cc:262:slice$1387 ($_SDFFE_PP0P_) from module key_schedule (D = $verific$n1449$71 [0], Q = \gen_sub_keys.w_0_i_tmp_old [0]).
Adding EN signal on $auto$ff.cc:262:slice$1388 ($_SDFFE_PP0P_) from module key_schedule (D = $verific$n1449$71 [1], Q = \gen_sub_keys.w_0_i_tmp_old [1]).
Adding EN signal on $auto$ff.cc:262:slice$1389 ($_SDFFE_PP0P_) from module key_schedule (D = $verific$n1449$71 [2], Q = \gen_sub_keys.w_0_i_tmp_old [2]).
Adding EN signal on $auto$ff.cc:262:slice$1390 ($_SDFFE_PP0P_) from module key_schedule (D = $verific$n1449$71 [3], Q = \gen_sub_keys.w_0_i_tmp_old [3]).
Adding EN signal on $auto$ff.cc:262:slice$1391 ($_SDFFE_PP0P_) from module key_schedule (D = $verific$n1449$71 [4], Q = \gen_sub_keys.w_0_i_tmp_old [4]).
Adding EN signal on $auto$ff.cc:262:slice$1392 ($_SDFFE_PP0P_) from module key_schedule (D = $verific$n1449$71 [5], Q = \gen_sub_keys.w_0_i_tmp_old [5]).
Adding EN signal on $auto$ff.cc:262:slice$1393 ($_SDFFE_PP0P_) from module key_schedule (D = $verific$n1449$71 [6], Q = \gen_sub_keys.w_0_i_tmp_old [6]).
Adding EN signal on $auto$ff.cc:262:slice$1394 ($_SDFFE_PP0P_) from module key_schedule (D = $verific$n1449$71 [7], Q = \gen_sub_keys.w_0_i_tmp_old [7]).
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$1545 ($_DFFE_PP_) from module key_schedule.

yosys> opt_clean

3.27.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..
Removed 47 unused cells and 183 unused wires.
<suppressed ~49 debug messages>

yosys> opt_expr

3.27.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.
<suppressed ~40 debug messages>

3.27.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.27.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \key_schedule..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.27.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \key_schedule.
Performed a total of 0 changes.

yosys> opt_merge

3.27.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
<suppressed ~93 debug messages>
Removed a total of 31 cells.

yosys> opt_dff

3.27.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.27.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..
Removed 0 unused cells and 39 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.27.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.

3.27.16. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.27.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \key_schedule..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.27.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \key_schedule.
Performed a total of 0 changes.

yosys> opt_merge

3.27.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
Removed a total of 0 cells.

yosys> opt_dff

3.27.20. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.27.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..

yosys> opt_expr

3.27.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.

3.27.23. Finished OPT passes. (There is nothing left to do.)

yosys> opt -fast -full

3.28. Executing OPT pass (performing simple optimizations).

yosys> opt_expr -full

3.28.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.
<suppressed ~397 debug messages>

yosys> opt_merge

3.28.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
Removed a total of 0 cells.

yosys> opt_dff

3.28.3. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.28.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..
Removed 0 unused cells and 14 unused wires.
<suppressed ~1 debug messages>

3.28.5. Finished fast OPT passes.

yosys> memory_map

3.29. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

yosys> opt -full

3.30. Executing OPT pass (performing simple optimizations).

yosys> opt_expr -full

3.30.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.
<suppressed ~24 debug messages>

yosys> opt_merge -nomux

3.30.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.30.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \key_schedule..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce -full

3.30.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \key_schedule.
Performed a total of 0 changes.

yosys> opt_merge

3.30.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
Removed a total of 0 cells.

yosys> opt_share

3.30.6. Executing OPT_SHARE pass.

yosys> opt_dff

3.30.7. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.30.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..

yosys> opt_expr -full

3.30.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.

3.30.10. Finished OPT passes. (There is nothing left to do.)

yosys> abc -dff

3.31. Executing ABC pass (technology mapping using ABC).

3.31.1. Summary of detected clock domains:
  20 cells in clk=\clk, en=\start, arst={ }, srst=\rst
  20 cells in clk=\clk, en=$auto$opt_dff.cc:219:make_patterns_logic$1889, arst={ }, srst=\rst
  71 cells in clk=\clk, en=$auto$opt_dff.cc:219:make_patterns_logic$292, arst={ }, srst={ }
  68 cells in clk=\clk, en=$auto$opt_dff.cc:219:make_patterns_logic$303, arst={ }, srst={ }
  61 cells in clk=\clk, en=$auto$opt_dff.cc:219:make_patterns_logic$312, arst={ }, srst={ }
  13 cells in clk=\clk, en=$auto$opt_dff.cc:219:make_patterns_logic$319, arst={ }, srst={ }
  73 cells in clk=\clk, en=$auto$opt_dff.cc:219:make_patterns_logic$249, arst={ }, srst=\rst
  71 cells in clk=\clk, en=$auto$opt_dff.cc:219:make_patterns_logic$261, arst={ }, srst=\rst
  68 cells in clk=\clk, en=$auto$opt_dff.cc:219:make_patterns_logic$271, arst={ }, srst=\rst
  51 cells in clk=\clk, en=$auto$opt_dff.cc:219:make_patterns_logic$279, arst={ }, srst=\rst

3.31.2. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by \start, synchronously reset by \rst
Extracted 20 gates and 20 wires to a netlist network with 0 inputs and 4 outputs.

3.31.2.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.31.2.2. Re-integrating ABC results.
ABC RESULTS:               DFF cells:        3
ABC RESULTS:               NOT cells:        1
ABC RESULTS:               AND cells:        1
ABC RESULTS:              NAND cells:        1
ABC RESULTS:             ORNOT cells:        2
ABC RESULTS:               NOR cells:        1
ABC RESULTS:               XOR cells:        1
ABC RESULTS:        internal signals:       16
ABC RESULTS:           input signals:        0
ABC RESULTS:          output signals:        4
Removing temp directory.

3.31.3. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:219:make_patterns_logic$1889, synchronously reset by \rst
Extracted 20 gates and 40 wires to a netlist network with 20 inputs and 19 outputs.

3.31.3.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.31.3.2. Re-integrating ABC results.
ABC RESULTS:               DFF cells:        8
ABC RESULTS:             ORNOT cells:        1
ABC RESULTS:                OR cells:        1
ABC RESULTS:               AND cells:        1
ABC RESULTS:               XOR cells:        8
ABC RESULTS:               BUF cells:       16
ABC RESULTS:        internal signals:        1
ABC RESULTS:           input signals:       20
ABC RESULTS:          output signals:       19
Removing temp directory.

3.31.4. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:219:make_patterns_logic$292
Extracted 71 gates and 142 wires to a netlist network with 71 inputs and 67 outputs.

3.31.4.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.31.4.2. Re-integrating ABC results.
ABC RESULTS:               DFF cells:       32
ABC RESULTS:               NOT cells:        1
ABC RESULTS:               AND cells:        6
ABC RESULTS:               BUF cells:       32
ABC RESULTS:               XOR cells:       64
ABC RESULTS:        internal signals:        4
ABC RESULTS:           input signals:       71
ABC RESULTS:          output signals:       67
Removing temp directory.

3.31.5. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:219:make_patterns_logic$303
Extracted 68 gates and 137 wires to a netlist network with 69 inputs and 65 outputs.

3.31.5.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.31.5.2. Re-integrating ABC results.
ABC RESULTS:               DFF cells:       32
ABC RESULTS:               AND cells:        4
ABC RESULTS:               BUF cells:       32
ABC RESULTS:               XOR cells:       64
ABC RESULTS:        internal signals:        3
ABC RESULTS:           input signals:       69
ABC RESULTS:          output signals:       65
Removing temp directory.

3.31.6. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:219:make_patterns_logic$312
Extracted 61 gates and 121 wires to a netlist network with 60 inputs and 59 outputs.

3.31.6.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.31.6.2. Re-integrating ABC results.
ABC RESULTS:               DFF cells:       32
ABC RESULTS:               NOT cells:        2
ABC RESULTS:            ANDNOT cells:        2
ABC RESULTS:               AND cells:        1
ABC RESULTS:               BUF cells:       40
ABC RESULTS:               XOR cells:       48
ABC RESULTS:        internal signals:        2
ABC RESULTS:           input signals:       60
ABC RESULTS:          output signals:       59
Removing temp directory.

3.31.7. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:219:make_patterns_logic$319
Extracted 13 gates and 25 wires to a netlist network with 12 inputs and 13 outputs.

3.31.7.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.31.7.2. Re-integrating ABC results.
ABC RESULTS:               DFF cells:        8
ABC RESULTS:               NOT cells:        2
ABC RESULTS:            ANDNOT cells:        2
ABC RESULTS:               AND cells:        1
ABC RESULTS:               BUF cells:       16
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:       12
ABC RESULTS:          output signals:       13
Removing temp directory.

3.31.8. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:219:make_patterns_logic$249, synchronously reset by \rst
Extracted 73 gates and 148 wires to a netlist network with 75 inputs and 33 outputs.

3.31.8.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.31.8.2. Re-integrating ABC results.
ABC RESULTS:               DFF cells:       32
ABC RESULTS:               NOR cells:        2
ABC RESULTS:              NAND cells:        1
ABC RESULTS:                OR cells:        2
ABC RESULTS:               AND cells:        4
ABC RESULTS:               MUX cells:       32
ABC RESULTS:               BUF cells:       32
ABC RESULTS:        internal signals:       40
ABC RESULTS:           input signals:       75
ABC RESULTS:          output signals:       33
Removing temp directory.

3.31.9. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:219:make_patterns_logic$261, synchronously reset by \rst
Extracted 71 gates and 143 wires to a netlist network with 72 inputs and 35 outputs.

3.31.9.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.31.9.2. Re-integrating ABC results.
ABC RESULTS:               DFF cells:       32
ABC RESULTS:               NOT cells:        1
ABC RESULTS:                OR cells:        2
ABC RESULTS:             ORNOT cells:        1
ABC RESULTS:               AND cells:        3
ABC RESULTS:               MUX cells:       32
ABC RESULTS:               BUF cells:       32
ABC RESULTS:        internal signals:       36
ABC RESULTS:           input signals:       72
ABC RESULTS:          output signals:       35
Removing temp directory.

3.31.10. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:219:make_patterns_logic$271, synchronously reset by \rst
Extracted 68 gates and 138 wires to a netlist network with 70 inputs and 34 outputs.

3.31.10.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.31.10.2. Re-integrating ABC results.
ABC RESULTS:               DFF cells:       32
ABC RESULTS:                OR cells:        2
ABC RESULTS:               AND cells:        2
ABC RESULTS:               MUX cells:       32
ABC RESULTS:               BUF cells:       32
ABC RESULTS:        internal signals:       34
ABC RESULTS:           input signals:       70
ABC RESULTS:          output signals:       34
Removing temp directory.

3.31.11. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:219:make_patterns_logic$279, synchronously reset by \rst
Extracted 51 gates and 79 wires to a netlist network with 28 inputs and 26 outputs.

3.31.11.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.31.11.2. Re-integrating ABC results.
ABC RESULTS:               DFF cells:       24
ABC RESULTS:                OR cells:        2
ABC RESULTS:               AND cells:       25
ABC RESULTS:               BUF cells:       24
ABC RESULTS:        internal signals:       25
ABC RESULTS:           input signals:       28
ABC RESULTS:          output signals:       26
Removing temp directory.

yosys> abc -script /tmp/yosys_t9FnAj/abc_tmp_1.scr

3.32. Executing ABC pass (technology mapping using ABC).

3.32.1. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Extracted 358 gates and 612 wires to a netlist network with 254 inputs and 229 outputs.

3.32.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + source /tmp/yosys_t9FnAj/abc_tmp_1.scr 
ABC:   #Luts =   229  Max Lvl =   2  Avg Lvl =   1.42  [   0.24 sec. at Pass 0]
ABC:   #Luts =   229  Max Lvl =   2  Avg Lvl =   1.42  [   0.74 sec. at Pass 1]
ABC:   #Luts =   229  Max Lvl =   2  Avg Lvl =   1.42  [   0.39 sec. at Pass 2]
ABC:   #Luts =   229  Max Lvl =   2  Avg Lvl =   1.42  [   0.60 sec. at Pass 3]
ABC:   #Luts =   229  Max Lvl =   2  Avg Lvl =   1.42  [   0.50 sec. at Pass 4]
ABC:   #Luts =   229  Max Lvl =   2  Avg Lvl =   1.42  [   0.71 sec. at Pass 5]
ABC: + write_blif <abc-temp-dir>/output.blif 

3.32.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:      229
ABC RESULTS:        internal signals:      129
ABC RESULTS:           input signals:      254
ABC RESULTS:          output signals:      229
Removing temp directory.

yosys> opt

3.33. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.33.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.

yosys> opt_merge -nomux

3.33.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.33.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \key_schedule..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.33.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \key_schedule.
Performed a total of 0 changes.

yosys> opt_merge

3.33.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
Removed a total of 0 cells.

yosys> opt_dff

3.33.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.33.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..
Removed 0 unused cells and 1639 unused wires.
<suppressed ~2 debug messages>

yosys> opt_expr

3.33.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.

3.33.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.33.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \key_schedule..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.33.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \key_schedule.
Performed a total of 0 changes.

yosys> opt_merge

3.33.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
Removed a total of 0 cells.

yosys> opt_dff

3.33.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.33.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..

yosys> opt_expr

3.33.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.

3.33.16. Finished OPT passes. (There is nothing left to do.)

yosys> stat

3.34. Printing statistics.

=== key_schedule ===

   Number of wires:                265
   Number of wire bits:            896
   Number of public wires:          34
   Number of public wire bits:     665
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                464
     $_DFFE_PP_                    104
     $_SDFFE_PP0P_                 131
     $lut                          229


yosys> shregmap -minlen 8 -maxlen 20

3.35. Executing SHREGMAP pass (map shift registers).
Converted 0 dff cells into 0 shift registers.

yosys> dfflegalize -cell $_DFF_?_ 0 -cell $_DFF_???_ 0 -cell $_DFFE_????_ 0 -cell $_DFFSR_???_ 0 -cell $_DFFSRE_????_ 0 -cell $_DLATCHSR_PPP_ 0

3.36. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

yosys> stat

3.37. Printing statistics.

=== key_schedule ===

   Number of wires:                527
   Number of wire bits:           1158
   Number of public wires:          34
   Number of public wire bits:     665
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                726
     $_DFFE_PP0P_                  104
     $_DFF_P_                      131
     $_MUX_                        262
     $lut                          229


yosys> techmap -map +/techmap.v -map +/rapidsilicon/genesis/ffs_map.v

3.38. Executing TECHMAP pass (map to technology primitives).

3.38.1. Executing Verilog-2005 frontend: /home/users/aram/Workspace/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/aram/Workspace/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.38.2. Executing Verilog-2005 frontend: /home/users/aram/Workspace/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/ffs_map.v
Parsing Verilog input from `/home/users/aram/Workspace/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/ffs_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP0N_'.
Generating RTLIL representation for module `\$_DFFE_PN0P_'.
Generating RTLIL representation for module `\$_DFFE_PN0N_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP1N_'.
Generating RTLIL representation for module `\$_DFFE_PN1P_'.
Generating RTLIL representation for module `\$_DFFE_PN1N_'.
Generating RTLIL representation for module `\$_DFFSR_PPP_'.
Generating RTLIL representation for module `\$_DFFSR_PNP_'.
Generating RTLIL representation for module `\$_DFFSR_PNN_'.
Generating RTLIL representation for module `\$_DFFSR_PPN_'.
Generating RTLIL representation for module `\$_DFFSR_NPP_'.
Generating RTLIL representation for module `\$_DFFSR_NNP_'.
Generating RTLIL representation for module `\$_DFFSR_NNN_'.
Generating RTLIL representation for module `\$_DFFSR_NPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PNPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPNP_'.
Generating RTLIL representation for module `\$_DFFSRE_PNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PNPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PPNN_'.
Generating RTLIL representation for module `\$_DFFSRE_PNNN_'.
Generating RTLIL representation for module `\$_DLATCHSR_PPP_'.
Generating RTLIL representation for module `\$_DLATCHSR_NPP_'.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP0N_'.
Generating RTLIL representation for module `\$_DFFE_NN0P_'.
Generating RTLIL representation for module `\$_DFFE_NN0N_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_NP1N_'.
Generating RTLIL representation for module `\$_DFFE_NN1P_'.
Generating RTLIL representation for module `\$_DFFE_NN1N_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNPP_'.
Generating RTLIL representation for module `\$_DFFSRE_NPNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPN_'.
Generating RTLIL representation for module `\$_DFFSRE_NNPN_'.
Generating RTLIL representation for module `\$_DFFSRE_NPNN_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNN_'.
Generating RTLIL representation for module `\$__SHREG_DFF_P_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PN0_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NN0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFF_PN1_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_NN1_'.
Successfully finished Verilog frontend.

3.38.3. Continuing TECHMAP pass.
Using template \$_DFF_P_ for cells of type $_DFF_P_.
Using template \$_DFFE_PP0P_ for cells of type $_DFFE_PP0P_.
Using extmapper simplemap for cells of type $lut.
Using extmapper simplemap for cells of type $logic_not.
No more expansions possible.
<suppressed ~704 debug messages>

yosys> opt_expr -mux_undef

3.39. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.
<suppressed ~1020 debug messages>

yosys> simplemap

3.40. Executing SIMPLEMAP pass (map simple cells to gate primitives).

yosys> opt_expr

3.41. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.

yosys> opt_merge

3.42. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
<suppressed ~123 debug messages>
Removed a total of 41 cells.

yosys> opt_dff -nodffe -nosdff

3.43. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.44. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..
Removed 0 unused cells and 1509 unused wires.
<suppressed ~1 debug messages>

yosys> opt -nodffe -nosdff

3.45. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.45.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.

yosys> opt_merge -nomux

3.45.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.45.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \key_schedule..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.45.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \key_schedule.
Performed a total of 0 changes.

yosys> opt_merge

3.45.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.45.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.45.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..

yosys> opt_expr

3.45.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.

3.45.9. Finished OPT passes. (There is nothing left to do.)

yosys> abc -script /tmp/yosys_t9FnAj/abc_tmp_2.scr

3.46. Executing ABC pass (technology mapping using ABC).

3.46.1. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Extracted 576 gates and 840 wires to a netlist network with 262 inputs and 232 outputs.

3.46.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + source /tmp/yosys_t9FnAj/abc_tmp_2.scr 
ABC:   #Luts =   235  Max Lvl =   2  Avg Lvl =   1.52  [   0.10 sec. at Pass 0]
ABC:   #Luts =   235  Max Lvl =   2  Avg Lvl =   1.52  [   1.75 sec. at Pass 1]
ABC:   #Luts =   235  Max Lvl =   2  Avg Lvl =   1.52  [   0.41 sec. at Pass 2]
ABC:   #Luts =   235  Max Lvl =   2  Avg Lvl =   1.52  [   0.76 sec. at Pass 3]
ABC:   #Luts =   235  Max Lvl =   2  Avg Lvl =   1.52  [   0.58 sec. at Pass 4]
ABC:   #Luts =   235  Max Lvl =   2  Avg Lvl =   1.52  [   1.22 sec. at Pass 5]
ABC: + write_blif <abc-temp-dir>/output.blif 

3.46.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:      235
ABC RESULTS:        internal signals:      346
ABC RESULTS:           input signals:      262
ABC RESULTS:          output signals:      232
Removing temp directory.

yosys> opt

3.47. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.47.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.

yosys> opt_merge -nomux

3.47.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.47.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \key_schedule..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.47.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \key_schedule.
Performed a total of 0 changes.

yosys> opt_merge

3.47.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
Removed a total of 0 cells.

yosys> opt_dff

3.47.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.47.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..
Removed 0 unused cells and 838 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.47.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.

3.47.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.47.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \key_schedule..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.47.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \key_schedule.
Performed a total of 0 changes.

yosys> opt_merge

3.47.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
Removed a total of 0 cells.

yosys> opt_dff

3.47.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.47.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..

yosys> opt_expr

3.47.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.

3.47.16. Finished OPT passes. (There is nothing left to do.)

yosys> hierarchy -check

3.48. Executing HIERARCHY pass (managing design hierarchy).

3.48.1. Analyzing design hierarchy..
Top module:  \key_schedule

3.48.2. Analyzing design hierarchy..
Top module:  \key_schedule
Removed 0 unused modules.

yosys> stat

3.49. Printing statistics.

=== key_schedule ===

   Number of wires:                271
   Number of wire bits:            902
   Number of public wires:          34
   Number of public wire bits:     665
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                470
     $lut                          235
     dffsre                        235


yosys> opt_clean -purge

3.50. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..
Removed 0 unused cells and 20 unused wires.
<suppressed ~20 debug messages>

yosys> write_verilog -noattr -nohex synthesized.v

3.51. Executing Verilog backend.

yosys> bmuxmap

3.51.1. Executing BMUXMAP pass.

yosys> demuxmap

3.51.2. Executing DEMUXMAP pass.

yosys> clean_zerowidth
Dumping module `\key_schedule'.

End of script. Logfile hash: 3fa2333fad, CPU: user 3.33s system 0.08s, MEM: 25.66 MB peak
Yosys 0.16+65 (git sha1 91803ad5c, gcc 9.1.0 -fPIC -Os)
Time spent: 89% 3x abc (26 sec), 2% 32x opt_expr (0 sec), ...
real 15.63
user 23.98
sys 5.89
