
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys-Verific 0.0.45
 Yosys 0.17+103 (git sha1 a1babadd5, gcc 9.1.0 -fPIC -Os)


-- Executing script file `yosys.ys' --
echo on

yosys> plugin -i synth-rs

yosys> read -verific

yosys> read -incdir .

yosys> verific -vlog-incdir .

1. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Apr22_SW_Release, released at Thu Apr 28 20:08:21 2022.

yosys> verilog_defaults -add -I.

yosys> read -vhdl rtea.vhdl

yosys> verific -vhdl rtea.vhdl

2. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Apr22_SW_Release, released at Thu Apr 28 20:08:21 2022.
VERIFIC-INFO [VHDL-1504] default VHDL library search path is now "/home/users/aram/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008"
VERIFIC-COMMENT [VHDL-1481] Analyzing VHDL file 'rtea.vhdl'
VERIFIC-COMMENT [VHDL-1493] Restoring VHDL unit 'ieee.std_logic_1164' from file '/home/users/aram/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008/ieee/std_logic_1164.vdb'
VERIFIC-COMMENT [VHDL-1493] Restoring VHDL unit 'std.standard' from file '/home/users/aram/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008/std/standard.vdb'
VERIFIC-COMMENT [VHDL-1493] Restoring VHDL unit 'std.textio' from file '/home/users/aram/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008/std/textio.vdb'
VERIFIC-COMMENT [VHDL-1493] Restoring VHDL unit 'ieee.numeric_std' from file '/home/users/aram/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008/ieee/numeric_std.vdb'
VERIFIC-INFO [VHDL-1012] rtea.vhdl:20: analyzing entity 'rtea'
VERIFIC-INFO [VHDL-1010] rtea.vhdl:34: analyzing architecture 'behave'

yosys> synth_rs -top rtea -tech genesis -goal area -de -no_dsp -no_bram -verilog synthesized.v

3. Executing synth_rs pass: v0.4.56

yosys> read_verilog -lib -specify -nomem2reg +/rapidsilicon/common/cells_sim.v +/rapidsilicon/genesis/cells_sim.v

3.1. Executing Verilog-2005 frontend: /home/users/aram/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v
Parsing Verilog input from `/home/users/aram/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\inv'.
Generating RTLIL representation for module `\buff'.
Generating RTLIL representation for module `\logic_0'.
Generating RTLIL representation for module `\logic_1'.
Generating RTLIL representation for module `\gclkbuff'.
Successfully finished Verilog frontend.

3.2. Executing Verilog-2005 frontend: /home/users/aram/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/cells_sim.v
Parsing Verilog input from `/home/users/aram/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\dffsre'.
Generating RTLIL representation for module `\dffnsre'.
Generating RTLIL representation for module `\latchsre'.
Generating RTLIL representation for module `\latchnsre'.
Generating RTLIL representation for module `\io_scff'.
Generating RTLIL representation for module `\scff'.
Generating RTLIL representation for module `\sh_dff'.
Generating RTLIL representation for module `\adder_carry'.
Generating RTLIL representation for module `\sdffr'.
Generating RTLIL representation for module `\sdffs'.
Generating RTLIL representation for module `\TDP_BRAM18'.
Generating RTLIL representation for module `\TDP36K'.
Generating RTLIL representation for module `\RS_DSP1'.
Generating RTLIL representation for module `\RS_DSP2'.
Generating RTLIL representation for module `\RS_DSP2_MULT'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGIN_REGOUT'.
Generating RTLIL representation for module `\dsp_t1_sim'.
Generating RTLIL representation for module `\dsp_t1_20x18x64'.
Generating RTLIL representation for module `\dsp_t1_10x9x32'.
Successfully finished Verilog frontend.

yosys> hierarchy -check -top rtea

3.3. Executing HIERARCHY pass (managing design hierarchy).
VERIFIC-INFO [VHDL-1067] rtea.vhdl:20: processing 'rtea(behave)'
Importing module rtea.

3.3.1. Analyzing design hierarchy..
Top module:  \rtea

3.3.2. Analyzing design hierarchy..
Top module:  \rtea
Removed 0 unused modules.

yosys> proc

3.4. Executing PROC pass (convert processes to netlists).

yosys> proc_clean

3.4.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> proc_rmdead

3.4.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

yosys> proc_prune

3.4.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

yosys> proc_init

3.4.4. Executing PROC_INIT pass (extract init attributes).

yosys> proc_arst

3.4.5. Executing PROC_ARST pass (detect async resets in processes).

yosys> proc_rom

3.4.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

yosys> proc_mux

3.4.7. Executing PROC_MUX pass (convert decision trees to multiplexers).

yosys> proc_dlatch

3.4.8. Executing PROC_DLATCH pass (convert process syncs to latches).

yosys> proc_dff

3.4.9. Executing PROC_DFF pass (convert process syncs to FFs).

yosys> proc_memwr

3.4.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

yosys> proc_clean

3.4.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> opt_expr -keepdc

3.4.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module rtea.
<suppressed ~14 debug messages>

yosys> flatten

3.5. Executing FLATTEN pass (flatten design).

yosys> tribuf -logic

3.6. Executing TRIBUF pass.

yosys> deminout

3.7. Executing DEMINOUT pass (demote inout ports to input or output).

yosys> opt_expr

3.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module rtea.

yosys> opt_clean

3.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rtea..
Removed 2 unused cells and 25 unused wires.
<suppressed ~19 debug messages>

yosys> check

3.10. Executing CHECK pass (checking for obvious problems).
Checking module rtea...
Found and reported 0 problems.

yosys> opt -nodffe -nosdff

3.11. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module rtea.

yosys> opt_merge -nomux

3.11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rtea'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.11.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \rtea..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~7 debug messages>

yosys> opt_reduce

3.11.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \rtea.
Performed a total of 0 changes.

yosys> opt_merge

3.11.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rtea'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.11.6. Executing OPT_DFF pass (perform DFF optimizations).
Removing never-active async load on $verific$round_reg$rtea.vhdl:118$127 ($aldff) from module rtea.
Removing never-active async load on $verific$r_reg$rtea.vhdl:118$124 ($aldff) from module rtea.
Removing never-active async load on $verific$l_reg$rtea.vhdl:118$123 ($aldff) from module rtea.
Removing never-active async load on $verific$dout_reg$rtea.vhdl:118$128 ($aldff) from module rtea.

yosys> opt_clean

3.11.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rtea..

yosys> opt_expr

3.11.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module rtea.

3.11.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.11.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \rtea..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~7 debug messages>

yosys> opt_reduce

3.11.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \rtea.
Performed a total of 0 changes.

yosys> opt_merge

3.11.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rtea'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.11.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.11.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rtea..

yosys> opt_expr

3.11.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module rtea.

3.11.16. Finished OPT passes. (There is nothing left to do.)

yosys> fsm -encoding binary

3.12. Executing FSM pass (extract and optimize FSM).

yosys> fsm_detect

3.12.1. Executing FSM_DETECT pass (finding FSMs in design).

yosys> fsm_extract

3.12.2. Executing FSM_EXTRACT pass (extracting FSM from design).

yosys> fsm_opt

3.12.3. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> opt_clean

3.12.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rtea..

yosys> fsm_opt

3.12.5. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> fsm_recode -encoding binary

3.12.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

yosys> fsm_info

3.12.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

yosys> fsm_map

3.12.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

yosys> opt -sat

3.13. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module rtea.

yosys> opt_merge -nomux

3.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rtea'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \rtea..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~7 debug messages>

yosys> opt_reduce

3.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \rtea.
Performed a total of 0 changes.

yosys> opt_merge

3.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rtea'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.13.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $verific$run_reg$rtea.vhdl:118$126 ($dff) from module rtea (D = $verific$n1158$16, Q = \run, rval = 1'1).
Adding EN signal on $auto$ff.cc:262:slice$130 ($sdff) from module rtea (D = $verific$n1158$16, Q = \run).
Adding EN signal on $verific$round_reg$rtea.vhdl:118$127 ($dff) from module rtea (D = $verific$n1234$59, Q = \round).
Adding EN signal on $verific$r_reg$rtea.vhdl:118$124 ($dff) from module rtea (D = $verific$n1199$58, Q = \r).
Adding EN signal on $verific$mode_reg_reg$rtea.vhdl:118$125 ($dff) from module rtea (D = \mode, Q = \mode_reg).
Adding EN signal on $verific$l_reg$rtea.vhdl:118$123 ($dff) from module rtea (D = $verific$n1166$57, Q = \l).
Adding EN signal on $verific$dout_reg$rtea.vhdl:118$128 ($dff) from module rtea (D = { \r \l }, Q = \dout).

yosys> opt_clean

3.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rtea..
Removed 4 unused cells and 4 unused wires.
<suppressed ~5 debug messages>

yosys> opt_expr

3.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module rtea.
<suppressed ~1 debug messages>

3.13.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.13.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \rtea..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

yosys> opt_reduce

3.13.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \rtea.
Performed a total of 0 changes.

yosys> opt_merge

3.13.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rtea'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

yosys> opt_dff -sat

3.13.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.13.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rtea..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.13.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module rtea.

3.13.16. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.13.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \rtea..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

yosys> opt_reduce

3.13.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \rtea.
Performed a total of 0 changes.

yosys> opt_merge

3.13.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rtea'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.13.20. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.13.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rtea..

yosys> opt_expr

3.13.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module rtea.

3.13.23. Finished OPT passes. (There is nothing left to do.)

yosys> wreduce -keepdc

3.14. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 2) from port B of cell rtea.$auto$opt_dff.cc:195:make_patterns_logic$147 ($ne).
Removed top 1 bits (of 2) from port B of cell rtea.$auto$opt_dff.cc:195:make_patterns_logic$135 ($ne).
Removed top 1 bits (of 2) from port B of cell rtea.$verific$equal_5$rtea.vhdl:67$66 ($eq).
Removed top 26 bits (of 32) from port B of cell rtea.$verific$add_12$rtea.vhdl:74$73 ($add).
Removed top 8 bits (of 32) from port B of cell rtea.$verific$xor_14$../vhdl_packages/vhdl_2008/src/numeric_std-body.vhdl:3548$75 ($xor).
Removed top 26 bits (of 32) from port B of cell rtea.$verific$add_18$rtea.vhdl:75$79 ($add).
Removed top 8 bits (of 32) from port B of cell rtea.$verific$xor_20$../vhdl_packages/vhdl_2008/src/numeric_std-body.vhdl:3548$81 ($xor).
Removed top 1 bits (of 33) from port A of cell rtea.$verific$sub_40$rtea.vhdl:96$94 ($sub).
Removed top 1 bits (of 33) from port B of cell rtea.$verific$sub_40$rtea.vhdl:96$94 ($sub).
Removed top 1 bits (of 33) from port Y of cell rtea.$verific$sub_40$rtea.vhdl:96$94 ($sub).
Removed top 5 bits (of 6) from port B of cell rtea.$verific$add_53$../vhdl_packages/vhdl_2008/src/numeric_std-body.vhdl:482$105 ($add).
Removed top 1 bits (of 7) from port A of cell rtea.$verific$sub_59$../vhdl_packages/vhdl_2008/src/numeric_std-body.vhdl:593$110 ($sub).
Removed top 6 bits (of 7) from port B of cell rtea.$verific$sub_59$../vhdl_packages/vhdl_2008/src/numeric_std-body.vhdl:593$110 ($sub).
Removed top 1 bits (of 7) from port Y of cell rtea.$verific$sub_59$../vhdl_packages/vhdl_2008/src/numeric_std-body.vhdl:593$110 ($sub).
Removed top 1 bits (of 7) from wire rtea.$verific$n1135$53.
Removed top 1 bits (of 33) from wire rtea.$verific$n744$40.

yosys> peepopt

3.15. Executing PEEPOPT pass (run peephole optimizers).

yosys> pmuxtree

3.16. Executing PMUXTREE pass.

yosys> opt_clean

3.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rtea..
Removed 0 unused cells and 4 unused wires.
<suppressed ~1 debug messages>

yosys> alumacc

3.18. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module rtea:
  creating $macc model for $verific$add_12$rtea.vhdl:74$73 ($add).
  creating $macc model for $verific$add_13$rtea.vhdl:74$74 ($add).
  creating $macc model for $verific$add_16$rtea.vhdl:74$77 ($add).
  creating $macc model for $verific$add_18$rtea.vhdl:75$79 ($add).
  creating $macc model for $verific$add_19$rtea.vhdl:75$80 ($add).
  creating $macc model for $verific$add_22$rtea.vhdl:75$83 ($add).
  creating $macc model for $verific$add_37$rtea.vhdl:93$93 ($add).
  creating $macc model for $verific$add_53$../vhdl_packages/vhdl_2008/src/numeric_std-body.vhdl:482$105 ($add).
  creating $macc model for $verific$sub_40$rtea.vhdl:96$94 ($sub).
  creating $macc model for $verific$sub_59$../vhdl_packages/vhdl_2008/src/numeric_std-body.vhdl:593$110 ($sub).
  merging $macc model for $verific$add_22$rtea.vhdl:75$83 into $verific$sub_40$rtea.vhdl:96$94.
  merging $macc model for $verific$add_19$rtea.vhdl:75$80 into $verific$sub_40$rtea.vhdl:96$94.
  merging $macc model for $verific$add_18$rtea.vhdl:75$79 into $verific$sub_40$rtea.vhdl:96$94.
  merging $macc model for $verific$add_16$rtea.vhdl:74$77 into $verific$add_37$rtea.vhdl:93$93.
  merging $macc model for $verific$add_13$rtea.vhdl:74$74 into $verific$add_37$rtea.vhdl:93$93.
  merging $macc model for $verific$add_12$rtea.vhdl:74$73 into $verific$add_37$rtea.vhdl:93$93.
  creating $alu model for $macc $verific$add_53$../vhdl_packages/vhdl_2008/src/numeric_std-body.vhdl:482$105.
  creating $alu model for $macc $verific$sub_59$../vhdl_packages/vhdl_2008/src/numeric_std-body.vhdl:593$110.
  creating $macc cell for $verific$sub_40$rtea.vhdl:96$94: $auto$alumacc.cc:365:replace_macc$159
  creating $macc cell for $verific$add_37$rtea.vhdl:93$93: $auto$alumacc.cc:365:replace_macc$160
  creating $alu cell for $verific$sub_59$../vhdl_packages/vhdl_2008/src/numeric_std-body.vhdl:593$110: $auto$alumacc.cc:485:replace_alu$161
  creating $alu cell for $verific$add_53$../vhdl_packages/vhdl_2008/src/numeric_std-body.vhdl:482$105: $auto$alumacc.cc:485:replace_alu$164
  created 2 $alu and 2 $macc cells.

yosys> opt

3.19. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module rtea.

yosys> opt_merge -nomux

3.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rtea'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \rtea..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

yosys> opt_reduce

3.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \rtea.
Performed a total of 0 changes.

yosys> opt_merge

3.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rtea'.
Removed a total of 0 cells.

yosys> opt_dff

3.19.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.19.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rtea..
Removed 6 unused cells and 6 unused wires.
<suppressed ~9 debug messages>

yosys> opt_expr

3.19.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module rtea.

3.19.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.19.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \rtea..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

yosys> opt_reduce

3.19.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \rtea.
Performed a total of 0 changes.

yosys> opt_merge

3.19.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rtea'.
Removed a total of 0 cells.

yosys> opt_dff

3.19.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.19.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rtea..

yosys> opt_expr

3.19.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module rtea.

3.19.16. Finished OPT passes. (There is nothing left to do.)

yosys> stat

3.20. Printing statistics.

=== rtea ===

   Number of wires:                 54
   Number of wire bits:            839
   Number of public wires:          14
   Number of public wire bits:     370
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 43
     $alu                            2
     $dffe                           5
     $eq                             3
     $logic_not                      2
     $macc                           2
     $mux                           17
     $ne                             4
     $not                            1
     $reduce_and                     3
     $reduce_bool                    1
     $sdffe                          1
     $xor                            2


yosys> memory -nomap

3.21. Executing MEMORY pass.

yosys> opt_mem

3.21.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

yosys> opt_mem_priority

3.21.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

yosys> opt_mem_feedback

3.21.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

yosys> memory_bmux2rom

3.21.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

yosys> memory_dff

3.21.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

yosys> opt_clean

3.21.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rtea..

yosys> memory_share

3.21.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

yosys> opt_mem_widen

3.21.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

yosys> opt_clean

3.21.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rtea..

yosys> memory_collect

3.21.10. Executing MEMORY_COLLECT pass (generating $mem cells).

yosys> stat

3.22. Printing statistics.

=== rtea ===

   Number of wires:                 54
   Number of wire bits:            839
   Number of public wires:          14
   Number of public wire bits:     370
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 43
     $alu                            2
     $dffe                           5
     $eq                             3
     $logic_not                      2
     $macc                           2
     $mux                           17
     $ne                             4
     $not                            1
     $reduce_and                     3
     $reduce_bool                    1
     $sdffe                          1
     $xor                            2


yosys> opt_clean

3.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rtea..

yosys> stat

3.24. Printing statistics.

=== rtea ===

   Number of wires:                 54
   Number of wire bits:            839
   Number of public wires:          14
   Number of public wire bits:     370
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 43
     $alu                            2
     $dffe                           5
     $eq                             3
     $logic_not                      2
     $macc                           2
     $mux                           17
     $ne                             4
     $not                            1
     $reduce_and                     3
     $reduce_bool                    1
     $sdffe                          1
     $xor                            2


yosys> techmap -map +/techmap.v -map +/rapidsilicon/genesis/arith_map.v

3.25. Executing TECHMAP pass (map to technology primitives).

3.25.1. Executing Verilog-2005 frontend: /home/users/aram/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/aram/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.25.2. Executing Verilog-2005 frontend: /home/users/aram/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/arith_map.v
Parsing Verilog input from `/home/users/aram/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_rs_alu'.
Successfully finished Verilog frontend.

3.25.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $ne.
Using extmapper maccmap for cells of type $macc.
  add \r (32 bits, unsigned)
  sub \l (32 bits, unsigned)
  sub $verific$n416$29 (32 bits, unsigned)
  sub \key_slice (32 bits, unsigned)
  sub \round (6 bits, unsigned)
  packed 4 (1) bits / 1 words into adder tree
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $dffe.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $xor.
Using template $paramod$a04dd9d4d8b430140c4ff94b50470fb380fda2a0\_90_alu for cells of type $alu.
  add \l (32 bits, unsigned)
  add \r (32 bits, unsigned)
  add $verific$n215$24 (32 bits, unsigned)
  add \key_slice (32 bits, unsigned)
  add \round (6 bits, unsigned)
Using template $paramod$32efbfac1c4dc57230cf86180788fdfd12e3b511\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $sdffe.
Using template $paramod\_90_fa\WIDTH=32'00000000000000000000000000100000 for cells of type $fa.
Using template $paramod$61e2435132e1ce40c0d75c6c88e4344ff37fc23f\_80_rs_alu for cells of type $alu.
Using extmapper simplemap for cells of type $and.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000110 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod$fbc7873bff55778c0b3173955b7e4bce1d9d6834\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $or.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000100000 for cells of type $lcu.
No more expansions possible.
<suppressed ~947 debug messages>

yosys> stat

3.26. Printing statistics.

=== rtea ===

   Number of wires:                414
   Number of wire bits:           8778
   Number of public wires:          14
   Number of public wire bits:     370
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               2191
     $_AND_                        535
     $_DFFE_PN_                      1
     $_DFFE_PP_                    134
     $_MUX_                        399
     $_NOT_                        210
     $_OR_                         286
     $_SDFFE_PN1P_                   1
     $_XOR_                        593
     adder_carry                    32


yosys> opt

3.27. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.27.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module rtea.
<suppressed ~464 debug messages>

yosys> opt_merge -nomux

3.27.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rtea'.
<suppressed ~114 debug messages>
Removed a total of 38 cells.

yosys> opt_muxtree

3.27.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \rtea..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.27.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \rtea.
Performed a total of 0 changes.

yosys> opt_merge

3.27.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rtea'.
Removed a total of 0 cells.

yosys> opt_dff

3.27.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $auto$ff.cc:262:slice$319 ($_DFFE_PP_) from module rtea (D = $verific$n1159$56 [4], Q = \round [4], rval = 1'0).

yosys> opt_clean

3.27.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rtea..
Removed 104 unused cells and 257 unused wires.
<suppressed ~105 debug messages>

yosys> opt_expr

3.27.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module rtea.

3.27.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.27.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \rtea..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.27.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \rtea.
Performed a total of 0 changes.

yosys> opt_merge

3.27.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rtea'.
Removed a total of 0 cells.

yosys> opt_dff

3.27.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.27.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rtea..

yosys> opt_expr

3.27.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module rtea.

3.27.16. Finished OPT passes. (There is nothing left to do.)

yosys> opt -fast -full

3.28. Executing OPT pass (performing simple optimizations).

yosys> opt_expr -full

3.28.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module rtea.
<suppressed ~80 debug messages>

yosys> opt_merge

3.28.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rtea'.
Removed a total of 0 cells.

yosys> opt_dff

3.28.3. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.28.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rtea..
Removed 0 unused cells and 7 unused wires.
<suppressed ~1 debug messages>

3.28.5. Finished fast OPT passes.

yosys> memory_map

3.29. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

yosys> opt -full

3.30. Executing OPT pass (performing simple optimizations).

yosys> opt_expr -full

3.30.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module rtea.

yosys> opt_merge -nomux

3.30.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rtea'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.30.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \rtea..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce -full

3.30.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \rtea.
Performed a total of 0 changes.

yosys> opt_merge

3.30.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rtea'.
Removed a total of 0 cells.

yosys> opt_share

3.30.6. Executing OPT_SHARE pass.
    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$720 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$1066
        $auto$simplemap.cc:86:simplemap_bitop$1133


yosys> opt_dff

3.30.7. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.30.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rtea..

yosys> opt_expr -full

3.30.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module rtea.
<suppressed ~1 debug messages>

3.30.10. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.30.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \rtea..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

yosys> opt_reduce -full

3.30.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \rtea.
Performed a total of 0 changes.

yosys> opt_merge

3.30.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rtea'.
Removed a total of 0 cells.

yosys> opt_share

3.30.14. Executing OPT_SHARE pass.

yosys> opt_dff

3.30.15. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.30.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rtea..

yosys> opt_expr -full

3.30.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module rtea.

3.30.18. Finished OPT passes. (There is nothing left to do.)

yosys> techmap -map +/techmap.v

3.31. Executing TECHMAP pass (map to technology primitives).

3.31.1. Executing Verilog-2005 frontend: /home/users/aram/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/aram/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.31.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $mux.
No more expansions possible.
<suppressed ~72 debug messages>

yosys> opt -sat

3.32. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.32.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module rtea.

yosys> opt_merge -nomux

3.32.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rtea'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.32.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \rtea..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.32.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \rtea.
Performed a total of 0 changes.

yosys> opt_merge

3.32.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rtea'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.32.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.32.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rtea..

yosys> opt_expr

3.32.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module rtea.

3.32.9. Finished OPT passes. (There is nothing left to do.)

yosys> abc -dff

3.33. Executing ABC pass (technology mapping using ABC).

3.33.1. Summary of detected clock domains:
  5 cells in clk=\clk, en=$auto$opt_dff.cc:219:make_patterns_logic$136, arst={ }, srst=!\start
  1523 cells in clk=\clk, en=$auto$opt_dff.cc:194:make_patterns_logic$146, arst={ }, srst={ }
  22 cells in clk=\clk, en=!\start, arst={ }, srst={ }
  65 cells in clk=\clk, en=$auto$opt_dff.cc:219:make_patterns_logic$155, arst={ }, srst={ }
  39 cells in clk=\clk, en=$auto$opt_dff.cc:219:make_patterns_logic$143, arst={ }, srst={ }
  8 cells in clk=\clk, en=$auto$opt_dff.cc:219:make_patterns_logic$143, arst={ }, srst=!\start

3.33.2. Extracting gate netlist of module `\rtea' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:219:make_patterns_logic$136, synchronously reset by !\start
Extracted 4 gates and 8 wires to a netlist network with 4 inputs and 2 outputs.

3.33.2.1. Executing ABC.

3.33.3. Extracting gate netlist of module `\rtea' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:194:make_patterns_logic$146
Extracted 1491 gates and 1733 wires to a netlist network with 242 inputs and 125 outputs.

3.33.3.1. Executing ABC.

3.33.4. Extracting gate netlist of module `\rtea' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by !\start
Extracted 22 gates and 40 wires to a netlist network with 18 inputs and 12 outputs.

3.33.4.1. Executing ABC.

3.33.5. Extracting gate netlist of module `\rtea' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:219:make_patterns_logic$155
Extracted 65 gates and 131 wires to a netlist network with 66 inputs and 65 outputs.

3.33.5.1. Executing ABC.

3.33.6. Extracting gate netlist of module `\rtea' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:219:make_patterns_logic$143
Extracted 39 gates and 51 wires to a netlist network with 12 inputs and 23 outputs.

3.33.6.1. Executing ABC.

3.33.7. Extracting gate netlist of module `\rtea' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$4632$auto$opt_dff.cc:219:make_patterns_logic$143, synchronously reset by !\start
Extracted 8 gates and 13 wires to a netlist network with 5 inputs and 6 outputs.

3.33.7.1. Executing ABC.

yosys> abc -dff

3.34. Executing ABC pass (technology mapping using ABC).

3.34.1. Summary of detected clock domains:
  129 cells in clk=\clk, en=!\start, arst={ }, srst={ }
  5 cells in clk=\clk, en=$abc$2914$auto$opt_dff.cc:219:make_patterns_logic$136, arst={ }, srst=!\start
  41 cells in clk=\clk, en=$abc$4632$auto$opt_dff.cc:219:make_patterns_logic$143, arst={ }, srst={ }
  1346 cells in clk=\clk, en=$abc$2918$auto$opt_dff.cc:194:make_patterns_logic$146, arst={ }, srst={ }
  65 cells in clk=\clk, en=$abc$4438$auto$opt_dff.cc:219:make_patterns_logic$155, arst={ }, srst={ }
  9 cells in clk=\clk, en=$abc$4632$auto$opt_dff.cc:219:make_patterns_logic$143, arst={ }, srst=!\start

3.34.2. Extracting gate netlist of module `\rtea' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by !\start
Extracted 123 gates and 231 wires to a netlist network with 108 inputs and 52 outputs.

3.34.2.1. Executing ABC.

3.34.3. Extracting gate netlist of module `\rtea' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$2914$auto$opt_dff.cc:219:make_patterns_logic$136, synchronously reset by !\start
Extracted 4 gates and 8 wires to a netlist network with 4 inputs and 2 outputs.

3.34.3.1. Executing ABC.

3.34.4. Extracting gate netlist of module `\rtea' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$4632$auto$opt_dff.cc:219:make_patterns_logic$143
Extracted 41 gates and 55 wires to a netlist network with 14 inputs and 25 outputs.

3.34.4.1. Executing ABC.

3.34.5. Extracting gate netlist of module `\rtea' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$2918$auto$opt_dff.cc:194:make_patterns_logic$146
Extracted 1320 gates and 1575 wires to a netlist network with 255 inputs and 176 outputs.

3.34.5.1. Executing ABC.

3.34.6. Extracting gate netlist of module `\rtea' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$4438$auto$opt_dff.cc:219:make_patterns_logic$155
Extracted 65 gates and 131 wires to a netlist network with 66 inputs and 65 outputs.

3.34.6.1. Executing ABC.

3.34.7. Extracting gate netlist of module `\rtea' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$4815$abc$4632$auto$opt_dff.cc:219:make_patterns_logic$143, synchronously reset by !\start
Extracted 9 gates and 17 wires to a netlist network with 8 inputs and 7 outputs.

3.34.7.1. Executing ABC.

yosys> abc -dff

3.35. Executing ABC pass (technology mapping using ABC).

3.35.1. Summary of detected clock domains:
  364 cells in clk=\clk, en=!\start, arst={ }, srst={ }
  8 cells in clk=\clk, en=$abc$4811$abc$2914$auto$opt_dff.cc:219:make_patterns_logic$136, arst={ }, srst=!\start
  38 cells in clk=\clk, en=$abc$4815$abc$4632$auto$opt_dff.cc:219:make_patterns_logic$143, arst={ }, srst={ }
  1110 cells in clk=\clk, en=$abc$4858$abc$2918$auto$opt_dff.cc:194:make_patterns_logic$146, arst={ }, srst={ }
  65 cells in clk=\clk, en=$abc$6244$abc$4438$auto$opt_dff.cc:219:make_patterns_logic$155, arst={ }, srst={ }
  10 cells in clk=\clk, en=$abc$4815$abc$4632$auto$opt_dff.cc:219:make_patterns_logic$143, arst={ }, srst=!\start

3.35.2. Extracting gate netlist of module `\rtea' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by !\start
Extracted 342 gates and 590 wires to a netlist network with 248 inputs and 142 outputs.

3.35.2.1. Executing ABC.

3.35.3. Extracting gate netlist of module `\rtea' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$4811$abc$2914$auto$opt_dff.cc:219:make_patterns_logic$136, synchronously reset by !\start
Extracted 7 gates and 15 wires to a netlist network with 8 inputs and 4 outputs.

3.35.3.1. Executing ABC.

3.35.4. Extracting gate netlist of module `\rtea' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$4815$abc$4632$auto$opt_dff.cc:219:make_patterns_logic$143
Extracted 38 gates and 52 wires to a netlist network with 14 inputs and 24 outputs.

3.35.4.1. Executing ABC.

3.35.5. Extracting gate netlist of module `\rtea' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$4858$abc$2918$auto$opt_dff.cc:194:make_patterns_logic$146
Extracted 1100 gates and 1363 wires to a netlist network with 263 inputs and 201 outputs.

3.35.5.1. Executing ABC.

3.35.6. Extracting gate netlist of module `\rtea' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$6244$abc$4438$auto$opt_dff.cc:219:make_patterns_logic$155
Extracted 65 gates and 131 wires to a netlist network with 66 inputs and 65 outputs.

3.35.6.1. Executing ABC.

3.35.7. Extracting gate netlist of module `\rtea' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$6800$abc$4815$abc$4632$auto$opt_dff.cc:219:make_patterns_logic$143, synchronously reset by !\start
Extracted 10 gates and 18 wires to a netlist network with 8 inputs and 7 outputs.

3.35.7.1. Executing ABC.

yosys> abc -dff

3.36. Executing ABC pass (technology mapping using ABC).

3.36.1. Summary of detected clock domains:
  451 cells in clk=\clk, en=!\start, arst={ }, srst={ }
  7 cells in clk=\clk, en=$abc$6791$abc$4811$abc$2914$auto$opt_dff.cc:219:make_patterns_logic$136, arst={ }, srst=!\start
  37 cells in clk=\clk, en=$abc$6800$abc$4815$abc$4632$auto$opt_dff.cc:219:make_patterns_logic$143, arst={ }, srst={ }
  1011 cells in clk=\clk, en=$abc$6841$abc$4858$abc$2918$auto$opt_dff.cc:194:make_patterns_logic$146, arst={ }, srst={ }
  65 cells in clk=\clk, en=$abc$7996$abc$6244$abc$4438$auto$opt_dff.cc:219:make_patterns_logic$155, arst={ }, srst={ }
  10 cells in clk=\clk, en=$abc$6800$abc$4815$abc$4632$auto$opt_dff.cc:219:make_patterns_logic$143, arst={ }, srst=!\start

3.36.2. Extracting gate netlist of module `\rtea' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by !\start
Extracted 423 gates and 708 wires to a netlist network with 285 inputs and 152 outputs.

3.36.2.1. Executing ABC.

3.36.3. Extracting gate netlist of module `\rtea' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$6791$abc$4811$abc$2914$auto$opt_dff.cc:219:make_patterns_logic$136, synchronously reset by !\start
Extracted 6 gates and 14 wires to a netlist network with 8 inputs and 4 outputs.

3.36.3.1. Executing ABC.

3.36.4. Extracting gate netlist of module `\rtea' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$6800$abc$4815$abc$4632$auto$opt_dff.cc:219:make_patterns_logic$143
Extracted 37 gates and 50 wires to a netlist network with 13 inputs and 23 outputs.

3.36.4.1. Executing ABC.

3.36.5. Extracting gate netlist of module `\rtea' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$6841$abc$4858$abc$2918$auto$opt_dff.cc:194:make_patterns_logic$146
Extracted 1007 gates and 1243 wires to a netlist network with 236 inputs and 194 outputs.

3.36.5.1. Executing ABC.

3.36.6. Extracting gate netlist of module `\rtea' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$7996$abc$6244$abc$4438$auto$opt_dff.cc:219:make_patterns_logic$155
Extracted 65 gates and 131 wires to a netlist network with 66 inputs and 65 outputs.

3.36.6.1. Executing ABC.

3.36.7. Extracting gate netlist of module `\rtea' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$8628$abc$6800$abc$4815$abc$4632$auto$opt_dff.cc:219:make_patterns_logic$143, synchronously reset by !\start
Extracted 10 gates and 18 wires to a netlist network with 8 inputs and 7 outputs.

3.36.7.1. Executing ABC.

yosys> opt_ffinv

3.37. Executing OPT_FFINV pass (push inverters through FFs).
Discovering LUTs.
Pushed 0 inverters.

yosys> opt -sat

3.38. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.38.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module rtea.
<suppressed ~2 debug messages>

yosys> opt_merge -nomux

3.38.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rtea'.
<suppressed ~9 debug messages>
Removed a total of 3 cells.

yosys> opt_muxtree

3.38.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \rtea..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.38.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \rtea.
Performed a total of 0 changes.

yosys> opt_merge

3.38.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rtea'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.38.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.38.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rtea..
Removed 0 unused cells and 7881 unused wires.
<suppressed ~2 debug messages>

yosys> opt_expr

3.38.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module rtea.

3.38.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.38.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \rtea..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.38.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \rtea.
Performed a total of 0 changes.

yosys> opt_merge

3.38.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rtea'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.38.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.38.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rtea..

yosys> opt_expr

3.38.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module rtea.

3.38.16. Finished OPT passes. (There is nothing left to do.)

yosys> abc -script /home/users/temp_dir/yosys_tUL7kz/abc_tmp_1.scr

3.39. Executing ABC pass (technology mapping using ABC).

3.39.1. Extracting gate netlist of module `\rtea' to `<abc-temp-dir>/input.blif'..
Extracted 1408 gates and 1705 wires to a netlist network with 297 inputs and 135 outputs.

3.39.1.1. Executing ABC.
DE:   #PIs = 297  #Luts =   444  Max Lvl =  33  Avg Lvl =   6.21  [   0.14 sec. at Pass 0]
DE:   #PIs = 297  #Luts =   427  Max Lvl =  27  Avg Lvl =   5.43  [   4.62 sec. at Pass 1]
DE:   #PIs = 297  #Luts =   413  Max Lvl =  20  Avg Lvl =   4.83  [   0.88 sec. at Pass 2]
DE:   #PIs = 297  #Luts =   413  Max Lvl =  20  Avg Lvl =   4.83  [   1.67 sec. at Pass 3]
DE:   #PIs = 297  #Luts =   412  Max Lvl =  22  Avg Lvl =   4.99  [   1.08 sec. at Pass 4]
DE:   #PIs = 297  #Luts =   412  Max Lvl =  22  Avg Lvl =   4.99  [   1.76 sec. at Pass 5]
DE:   #PIs = 297  #Luts =   412  Max Lvl =  22  Avg Lvl =   4.99  [   1.34 sec. at Pass 6]
DE:   #PIs = 297  #Luts =   408  Max Lvl =  22  Avg Lvl =   4.99  [   2.55 sec. at Pass 7]
DE:   #PIs = 297  #Luts =   406  Max Lvl =  22  Avg Lvl =   5.07  [   1.49 sec. at Pass 8]
DE:   #PIs = 297  #Luts =   406  Max Lvl =  22  Avg Lvl =   5.07  [   3.60 sec. at Pass 9]
DE:   #PIs = 297  #Luts =   406  Max Lvl =  21  Avg Lvl =   5.01  [   1.52 sec. at Pass 10]
DE:   #PIs = 297  #Luts =   406  Max Lvl =  21  Avg Lvl =   5.01  [   2.53 sec. at Pass 11]
DE:   #PIs = 297  #Luts =   401  Max Lvl =  23  Avg Lvl =   5.09  [   3.12 sec. at Pass 12]
DE:   #PIs = 297  #Luts =   401  Max Lvl =  23  Avg Lvl =   5.09  [   2.38 sec. at Pass 13]
DE:   #PIs = 297  #Luts =   401  Max Lvl =  23  Avg Lvl =   5.09  [   1.58 sec. at Pass 14]
DE:   #PIs = 297  #Luts =   401  Max Lvl =  23  Avg Lvl =   5.09  [   2.82 sec. at Pass 15]
DE:   #PIs = 297  #Luts =   398  Max Lvl =  22  Avg Lvl =   5.25  [  10.94 sec. at Pass 16]
DE:   #PIs = 297  #Luts =   398  Max Lvl =  22  Avg Lvl =   5.25  [   1.52 sec. at Pass 17]
DE:   #PIs = 297  #Luts =   398  Max Lvl =  22  Avg Lvl =   5.25  [   2.36 sec. at Pass 18]
DE:   #PIs = 297  #Luts =   398  Max Lvl =  22  Avg Lvl =   5.25  [   1.26 sec. at Pass 19]
DE:   #PIs = 297  #Luts =   398  Max Lvl =  22  Avg Lvl =   5.25  [  11.37 sec. at Pass 20]
DE:   #PIs = 297  #Luts =   397  Max Lvl =  24  Avg Lvl =   5.27  [   0.43 sec. at Pass 21]

yosys> opt

3.40. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.40.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module rtea.

yosys> opt_merge -nomux

3.40.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rtea'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.40.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \rtea..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.40.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \rtea.
Performed a total of 0 changes.

yosys> opt_merge

3.40.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rtea'.
Removed a total of 0 cells.

yosys> opt_dff

3.40.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.40.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rtea..
Removed 0 unused cells and 1697 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.40.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module rtea.

3.40.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.40.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \rtea..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.40.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \rtea.
Performed a total of 0 changes.

yosys> opt_merge

3.40.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rtea'.
Removed a total of 0 cells.

yosys> opt_dff

3.40.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.40.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rtea..

yosys> opt_expr

3.40.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module rtea.

3.40.16. Finished OPT passes. (There is nothing left to do.)

yosys> opt_ffinv

3.41. Executing OPT_FFINV pass (push inverters through FFs).
Discovering LUTs.
Pushed 0 inverters.

yosys> stat

3.42. Printing statistics.

=== rtea ===

   Number of wires:                357
   Number of wire bits:            812
   Number of public wires:          13
   Number of public wire bits:     338
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                565
     $_DFFE_PN_                      1
     $_DFFE_PP_                    133
     $_SDFFE_PN0P_                   1
     $_SDFFE_PN1P_                   1
     $lut                          397
     adder_carry                    32


yosys> shregmap -minlen 8 -maxlen 20

3.43. Executing SHREGMAP pass (map shift registers).
Converted 0 dff cells into 0 shift registers.

yosys> dfflegalize -cell $_DFF_?_ 0 -cell $_DFF_???_ 0 -cell $_DFFE_????_ 0 -cell $_DFFSR_???_ 0 -cell $_DFFSRE_????_ 0 -cell $_DLATCHSR_PPP_ 0

3.44. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

yosys> stat

3.45. Printing statistics.

=== rtea ===

   Number of wires:                361
   Number of wire bits:            816
   Number of public wires:          13
   Number of public wire bits:     338
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                569
     $_DFFE_PP0N_                    1
     $_DFFE_PP0P_                  133
     $_DFF_P_                        2
     $_MUX_                          4
     $lut                          397
     adder_carry                    32


yosys> techmap -map +/rapidsilicon/genesis/ffs_map.v

3.46. Executing TECHMAP pass (map to technology primitives).

3.46.1. Executing Verilog-2005 frontend: /home/users/aram/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/ffs_map.v
Parsing Verilog input from `/home/users/aram/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/ffs_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP0N_'.
Generating RTLIL representation for module `\$_DFFE_PN0P_'.
Generating RTLIL representation for module `\$_DFFE_PN0N_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP1N_'.
Generating RTLIL representation for module `\$_DFFE_PN1P_'.
Generating RTLIL representation for module `\$_DFFE_PN1N_'.
Generating RTLIL representation for module `\$_DFFSR_PPP_'.
Generating RTLIL representation for module `\$_DFFSR_PNP_'.
Generating RTLIL representation for module `\$_DFFSR_PNN_'.
Generating RTLIL representation for module `\$_DFFSR_PPN_'.
Generating RTLIL representation for module `\$_DFFSR_NPP_'.
Generating RTLIL representation for module `\$_DFFSR_NNP_'.
Generating RTLIL representation for module `\$_DFFSR_NNN_'.
Generating RTLIL representation for module `\$_DFFSR_NPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PNPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPNP_'.
Generating RTLIL representation for module `\$_DFFSRE_PNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PNPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PPNN_'.
Generating RTLIL representation for module `\$_DFFSRE_PNNN_'.
Generating RTLIL representation for module `\$_DLATCHSR_PPP_'.
Generating RTLIL representation for module `\$_DLATCHSR_NPP_'.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP0N_'.
Generating RTLIL representation for module `\$_DFFE_NN0P_'.
Generating RTLIL representation for module `\$_DFFE_NN0N_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_NP1N_'.
Generating RTLIL representation for module `\$_DFFE_NN1P_'.
Generating RTLIL representation for module `\$_DFFE_NN1N_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNPP_'.
Generating RTLIL representation for module `\$_DFFSRE_NPNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPN_'.
Generating RTLIL representation for module `\$_DFFSRE_NNPN_'.
Generating RTLIL representation for module `\$_DFFSRE_NPNN_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNN_'.
Generating RTLIL representation for module `\$__SHREG_DFF_P_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PN0_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NN0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFF_PN1_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_NN1_'.
Successfully finished Verilog frontend.

3.46.2. Continuing TECHMAP pass.
Using template \$_DFFE_PP0P_ for cells of type $_DFFE_PP0P_.
Using template \$_DFF_P_ for cells of type $_DFF_P_.
Using template \$_DFFE_PP0N_ for cells of type $_DFFE_PP0N_.
No more expansions possible.
<suppressed ~203 debug messages>

yosys> techmap -map +/techmap.v

3.47. Executing TECHMAP pass (map to technology primitives).

3.47.1. Executing Verilog-2005 frontend: /home/users/aram/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/aram/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.47.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $lut.
No more expansions possible.
<suppressed ~603 debug messages>

yosys> opt_expr -mux_undef

3.48. Executing OPT_EXPR pass (perform const folding).
Optimizing module rtea.
<suppressed ~7662 debug messages>

yosys> simplemap

3.49. Executing SIMPLEMAP pass (map simple cells to gate primitives).

yosys> opt_expr

3.50. Executing OPT_EXPR pass (perform const folding).
Optimizing module rtea.

yosys> opt_merge

3.51. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rtea'.
<suppressed ~10572 debug messages>
Removed a total of 3524 cells.

yosys> opt_dff -nodffe -nosdff

3.52. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.53. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rtea..
Removed 0 unused cells and 1524 unused wires.
<suppressed ~1 debug messages>

yosys> opt -nodffe -nosdff

3.54. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.54.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module rtea.
<suppressed ~264 debug messages>

yosys> opt_merge -nomux

3.54.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rtea'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.54.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \rtea..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.54.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \rtea.
Performed a total of 0 changes.

yosys> opt_merge

3.54.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rtea'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.54.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.54.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rtea..
Removed 0 unused cells and 19 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.54.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module rtea.

3.54.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.54.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \rtea..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.54.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \rtea.
Performed a total of 0 changes.

yosys> opt_merge

3.54.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rtea'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.54.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.54.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rtea..

yosys> opt_expr

3.54.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module rtea.

3.54.16. Finished OPT passes. (There is nothing left to do.)

yosys> abc -script /home/users/temp_dir/yosys_tUL7kz/abc_tmp_2.scr

3.55. Executing ABC pass (technology mapping using ABC).

3.55.1. Extracting gate netlist of module `\rtea' to `<abc-temp-dir>/input.blif'..
Extracted 2704 gates and 3003 wires to a netlist network with 297 inputs and 136 outputs.

3.55.1.1. Executing ABC.
DE:   #PIs = 297  #Luts =   400  Max Lvl =  25  Avg Lvl =   5.46  [   0.23 sec. at Pass 0]
DE:   #PIs = 297  #Luts =   400  Max Lvl =  25  Avg Lvl =   5.46  [   7.18 sec. at Pass 1]
DE:   #PIs = 297  #Luts =   400  Max Lvl =  25  Avg Lvl =   5.46  [   1.66 sec. at Pass 2]
DE:   #PIs = 297  #Luts =   400  Max Lvl =  25  Avg Lvl =   5.46  [   2.60 sec. at Pass 3]
DE:   #PIs = 297  #Luts =   400  Max Lvl =  25  Avg Lvl =   5.46  [   1.76 sec. at Pass 4]
DE:   #PIs = 297  #Luts =   400  Max Lvl =  25  Avg Lvl =   5.46  [   2.86 sec. at Pass 5]
DE:   #PIs = 297  #Luts =   397  Max Lvl =  24  Avg Lvl =   5.24  [  13.43 sec. at Pass 6]
DE:   #PIs = 297  #Luts =   397  Max Lvl =  24  Avg Lvl =   5.24  [   2.39 sec. at Pass 7]
DE:   #PIs = 297  #Luts =   397  Max Lvl =  24  Avg Lvl =   5.24  [   2.88 sec. at Pass 8]
DE:   #PIs = 297  #Luts =   397  Max Lvl =  24  Avg Lvl =   5.24  [   1.48 sec. at Pass 9]
DE:   #PIs = 297  #Luts =   394  Max Lvl =  25  Avg Lvl =   5.24  [  13.40 sec. at Pass 10]
DE:   #PIs = 297  #Luts =   394  Max Lvl =  25  Avg Lvl =   5.24  [   3.25 sec. at Pass 11]
DE:   #PIs = 297  #Luts =   394  Max Lvl =  25  Avg Lvl =   5.24  [   2.19 sec. at Pass 12]
DE:   #PIs = 297  #Luts =   394  Max Lvl =  25  Avg Lvl =   5.24  [   2.66 sec. at Pass 13]
DE:   #PIs = 297  #Luts =   394  Max Lvl =  25  Avg Lvl =   5.24  [  11.98 sec. at Pass 14]
DE:   #PIs = 297  #Luts =   394  Max Lvl =  25  Avg Lvl =   5.24  [   0.20 sec. at Pass 15]

yosys> opt

3.56. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.56.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module rtea.

yosys> opt_merge -nomux

3.56.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rtea'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.56.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \rtea..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.56.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \rtea.
Performed a total of 0 changes.

yosys> opt_merge

3.56.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rtea'.
Removed a total of 0 cells.

yosys> opt_dff

3.56.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.56.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rtea..
Removed 0 unused cells and 1880 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.56.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module rtea.

3.56.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.56.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \rtea..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.56.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \rtea.
Performed a total of 0 changes.

yosys> opt_merge

3.56.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rtea'.
Removed a total of 0 cells.

yosys> opt_dff

3.56.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.56.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rtea..

yosys> opt_expr

3.56.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module rtea.

3.56.16. Finished OPT passes. (There is nothing left to do.)

yosys> hierarchy -check

3.57. Executing HIERARCHY pass (managing design hierarchy).

3.57.1. Analyzing design hierarchy..
Top module:  \rtea

3.57.2. Analyzing design hierarchy..
Top module:  \rtea
Removed 0 unused modules.

yosys> stat

3.58. Printing statistics.

=== rtea ===

   Number of wires:                354
   Number of wire bits:            809
   Number of public wires:          13
   Number of public wire bits:     338
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                562
     $lut                          394
     adder_carry                    32
     dffsre                        136


yosys> opt_clean -purge

3.59. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rtea..
Removed 0 unused cells and 2 unused wires.
<suppressed ~2 debug messages>

yosys> write_verilog -noattr -nohex synthesized.v

3.60. Executing Verilog backend.
Dumping module `\rtea'.

End of script. Logfile hash: 7d9d9d16c1, CPU: user 7.83s system 0.22s, MEM: 44.32 MB peak
Yosys 0.17+103 (git sha1 a1babadd5, gcc 9.1.0 -fPIC -Os)
Time spent: 99% 6x abc (1289 sec), 0% 39x opt_expr (3 sec), ...
real 151.72
user 1217.53
sys 78.82
