
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys-Verific 0.0.49
 Yosys 0.18+10 (git sha1 7a7a25778, gcc 9.1.0 -fPIC -Os)


-- Executing script file `yosys.ys' --
echo on

yosys> plugin -i synth-rs

yosys> read -verific

yosys> read -incdir .

yosys> verific -vlog-incdir .

1. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific May22_SW_Release, released at Wed Jun  1 05:39:28 2022.

yosys> verilog_defaults -add -I.

yosys> read -vhdl rtea.vhdl

yosys> verific -vhdl rtea.vhdl

2. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific May22_SW_Release, released at Wed Jun  1 05:39:28 2022.
VERIFIC-INFO [VHDL-1504] default VHDL library search path is now "/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008"
VERIFIC-COMMENT [VHDL-1481] Analyzing VHDL file 'rtea.vhdl'
VERIFIC-COMMENT [VHDL-1493] Restoring VHDL unit 'ieee.std_logic_1164' from file '/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008/ieee/std_logic_1164.vdb'
VERIFIC-COMMENT [VHDL-1493] Restoring VHDL unit 'std.standard' from file '/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008/std/standard.vdb'
VERIFIC-COMMENT [VHDL-1493] Restoring VHDL unit 'std.textio' from file '/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008/std/textio.vdb'
VERIFIC-COMMENT [VHDL-1493] Restoring VHDL unit 'ieee.numeric_std' from file '/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008/ieee/numeric_std.vdb'
VERIFIC-INFO [VHDL-1012] rtea.vhdl:20: analyzing entity 'rtea'
VERIFIC-INFO [VHDL-1010] rtea.vhdl:34: analyzing architecture 'behave'

yosys> synth_rs -top rtea -tech genesis -goal area -de -no_dsp -no_bram -verilog synthesized.v

3. Executing synth_rs pass: v0.4.58

yosys> read_verilog -lib -specify -nomem2reg +/rapidsilicon/common/cells_sim.v +/rapidsilicon/genesis/cells_sim.v

3.1. Executing Verilog-2005 frontend: /home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v
Parsing Verilog input from `/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\inv'.
Generating RTLIL representation for module `\buff'.
Generating RTLIL representation for module `\logic_0'.
Generating RTLIL representation for module `\logic_1'.
Generating RTLIL representation for module `\gclkbuff'.
Successfully finished Verilog frontend.

3.2. Executing Verilog-2005 frontend: /home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/cells_sim.v
Parsing Verilog input from `/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\dffsre'.
Generating RTLIL representation for module `\dffnsre'.
Generating RTLIL representation for module `\latchsre'.
Generating RTLIL representation for module `\latchnsre'.
Generating RTLIL representation for module `\io_scff'.
Generating RTLIL representation for module `\scff'.
Generating RTLIL representation for module `\sh_dff'.
Generating RTLIL representation for module `\adder_carry'.
Generating RTLIL representation for module `\sdffr'.
Generating RTLIL representation for module `\sdffs'.
Generating RTLIL representation for module `\TDP_BRAM18'.
Generating RTLIL representation for module `\TDP36K'.
Generating RTLIL representation for module `\RS_DSP1'.
Generating RTLIL representation for module `\RS_DSP2'.
Generating RTLIL representation for module `\RS_DSP2_MULT'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGIN_REGOUT'.
Generating RTLIL representation for module `\dsp_t1_sim'.
Generating RTLIL representation for module `\dsp_t1_20x18x64'.
Generating RTLIL representation for module `\dsp_t1_10x9x32'.
Successfully finished Verilog frontend.

yosys> hierarchy -check -top rtea

3.3. Executing HIERARCHY pass (managing design hierarchy).
VERIFIC-INFO [VHDL-1067] rtea.vhdl:20: processing 'rtea(behave)'
Importing module rtea.

3.3.1. Analyzing design hierarchy..
Top module:  \rtea

3.3.2. Analyzing design hierarchy..
Top module:  \rtea
Removed 0 unused modules.

yosys> proc

3.4. Executing PROC pass (convert processes to netlists).

yosys> proc_clean

3.4.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> proc_rmdead

3.4.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

yosys> proc_prune

3.4.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

yosys> proc_init

3.4.4. Executing PROC_INIT pass (extract init attributes).

yosys> proc_arst

3.4.5. Executing PROC_ARST pass (detect async resets in processes).

yosys> proc_rom

3.4.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

yosys> proc_mux

3.4.7. Executing PROC_MUX pass (convert decision trees to multiplexers).

yosys> proc_dlatch

3.4.8. Executing PROC_DLATCH pass (convert process syncs to latches).

yosys> proc_dff

3.4.9. Executing PROC_DFF pass (convert process syncs to FFs).

yosys> proc_memwr

3.4.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

yosys> proc_clean

3.4.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> opt_expr -keepdc

3.4.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module rtea.
<suppressed ~14 debug messages>

yosys> bmuxmap

3.5. Executing BMUXMAP pass.

yosys> demuxmap

3.6. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> flatten

3.7. Executing FLATTEN pass (flatten design).

yosys> bmuxmap

3.8. Executing BMUXMAP pass.

yosys> demuxmap

3.9. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> tribuf -logic

3.10. Executing TRIBUF pass.

yosys> deminout

3.11. Executing DEMINOUT pass (demote inout ports to input or output).

yosys> opt_expr

3.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module rtea.

yosys> opt_clean

3.13. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rtea..
Removed 2 unused cells and 25 unused wires.
<suppressed ~19 debug messages>

yosys> check

3.14. Executing CHECK pass (checking for obvious problems).
Checking module rtea...
Found and reported 0 problems.

yosys> opt -nodffe -nosdff

3.15. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module rtea.

yosys> opt_merge -nomux

3.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rtea'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.15.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \rtea..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~7 debug messages>

yosys> opt_reduce

3.15.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \rtea.
Performed a total of 0 changes.

yosys> opt_merge

3.15.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rtea'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.15.6. Executing OPT_DFF pass (perform DFF optimizations).
Removing never-active async load on $verific$round_reg$rtea.vhdl:118$127 ($aldff) from module rtea.
Removing never-active async load on $verific$r_reg$rtea.vhdl:118$124 ($aldff) from module rtea.
Removing never-active async load on $verific$l_reg$rtea.vhdl:118$123 ($aldff) from module rtea.
Removing never-active async load on $verific$dout_reg$rtea.vhdl:118$128 ($aldff) from module rtea.

yosys> opt_clean

3.15.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rtea..

yosys> opt_expr

3.15.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module rtea.

3.15.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.15.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \rtea..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~7 debug messages>

yosys> opt_reduce

3.15.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \rtea.
Performed a total of 0 changes.

yosys> opt_merge

3.15.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rtea'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.15.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.15.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rtea..

yosys> opt_expr

3.15.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module rtea.

3.15.16. Finished OPT passes. (There is nothing left to do.)

yosys> fsm -encoding binary

3.16. Executing FSM pass (extract and optimize FSM).

yosys> fsm_detect

3.16.1. Executing FSM_DETECT pass (finding FSMs in design).

yosys> fsm_extract

3.16.2. Executing FSM_EXTRACT pass (extracting FSM from design).

yosys> fsm_opt

3.16.3. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> opt_clean

3.16.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rtea..

yosys> fsm_opt

3.16.5. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> fsm_recode -encoding binary

3.16.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

yosys> fsm_info

3.16.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

yosys> fsm_map

3.16.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

yosys> opt -sat

3.17. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.17.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module rtea.

yosys> opt_merge -nomux

3.17.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rtea'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.17.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \rtea..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~7 debug messages>

yosys> opt_reduce

3.17.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \rtea.
Performed a total of 0 changes.

yosys> opt_merge

3.17.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rtea'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.17.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $verific$run_reg$rtea.vhdl:118$126 ($dff) from module rtea (D = $verific$n1156$16, Q = \run, rval = 1'1).
Adding EN signal on $auto$ff.cc:262:slice$130 ($sdff) from module rtea (D = $verific$n1156$16, Q = \run).
Adding EN signal on $verific$round_reg$rtea.vhdl:118$127 ($dff) from module rtea (D = $verific$n1232$59, Q = \round).
Adding EN signal on $verific$r_reg$rtea.vhdl:118$124 ($dff) from module rtea (D = $verific$n1197$58, Q = \r).
Adding EN signal on $verific$mode_reg_reg$rtea.vhdl:118$125 ($dff) from module rtea (D = \mode, Q = \mode_reg).
Adding EN signal on $verific$l_reg$rtea.vhdl:118$123 ($dff) from module rtea (D = $verific$n1164$57, Q = \l).
Adding EN signal on $verific$dout_reg$rtea.vhdl:118$128 ($dff) from module rtea (D = { \r \l }, Q = \dout).

yosys> opt_clean

3.17.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rtea..
Removed 4 unused cells and 4 unused wires.
<suppressed ~5 debug messages>

yosys> opt_expr

3.17.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module rtea.
<suppressed ~1 debug messages>

3.17.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.17.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \rtea..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

yosys> opt_reduce

3.17.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \rtea.
Performed a total of 0 changes.

yosys> opt_merge

3.17.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rtea'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

yosys> opt_dff -sat

3.17.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.17.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rtea..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.17.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module rtea.

3.17.16. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.17.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \rtea..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

yosys> opt_reduce

3.17.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \rtea.
Performed a total of 0 changes.

yosys> opt_merge

3.17.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rtea'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.17.20. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.17.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rtea..

yosys> opt_expr

3.17.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module rtea.

3.17.23. Finished OPT passes. (There is nothing left to do.)

yosys> wreduce -keepdc

3.18. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 2) from port B of cell rtea.$auto$opt_dff.cc:195:make_patterns_logic$135 ($ne).
Removed top 1 bits (of 2) from port B of cell rtea.$auto$opt_dff.cc:195:make_patterns_logic$147 ($ne).
Removed top 1 bits (of 2) from port B of cell rtea.$verific$equal_5$rtea.vhdl:67$66 ($eq).
Removed top 26 bits (of 32) from port B of cell rtea.$verific$add_12$rtea.vhdl:74$73 ($add).
Removed top 8 bits (of 32) from port B of cell rtea.$verific$xor_14$../vhdl_packages/vhdl_2008/src/numeric_std-body.vhdl:3548$75 ($xor).
Removed top 26 bits (of 32) from port B of cell rtea.$verific$add_18$rtea.vhdl:75$79 ($add).
Removed top 8 bits (of 32) from port B of cell rtea.$verific$xor_20$../vhdl_packages/vhdl_2008/src/numeric_std-body.vhdl:3548$81 ($xor).
Removed top 1 bits (of 33) from port A of cell rtea.$verific$sub_38$rtea.vhdl:96$94 ($sub).
Removed top 1 bits (of 33) from port B of cell rtea.$verific$sub_38$rtea.vhdl:96$94 ($sub).
Removed top 1 bits (of 33) from port Y of cell rtea.$verific$sub_38$rtea.vhdl:96$94 ($sub).
Removed top 5 bits (of 6) from port B of cell rtea.$verific$add_51$../vhdl_packages/vhdl_2008/src/numeric_std-body.vhdl:482$105 ($add).
Removed top 1 bits (of 7) from port A of cell rtea.$verific$sub_57$../vhdl_packages/vhdl_2008/src/numeric_std-body.vhdl:593$110 ($sub).
Removed top 6 bits (of 7) from port B of cell rtea.$verific$sub_57$../vhdl_packages/vhdl_2008/src/numeric_std-body.vhdl:593$110 ($sub).
Removed top 1 bits (of 7) from port Y of cell rtea.$verific$sub_57$../vhdl_packages/vhdl_2008/src/numeric_std-body.vhdl:593$110 ($sub).
Removed top 1 bits (of 7) from wire rtea.$verific$n1133$53.
Removed top 1 bits (of 33) from wire rtea.$verific$n742$40.

yosys> peepopt

3.19. Executing PEEPOPT pass (run peephole optimizers).

yosys> opt_clean

3.20. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rtea..
Removed 0 unused cells and 4 unused wires.
<suppressed ~1 debug messages>

yosys> bmuxmap

3.21. Executing BMUXMAP pass.

yosys> demuxmap

3.22. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> alumacc

3.23. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module rtea:
  creating $macc model for $verific$add_12$rtea.vhdl:74$73 ($add).
  creating $macc model for $verific$add_13$rtea.vhdl:74$74 ($add).
  creating $macc model for $verific$add_16$rtea.vhdl:74$77 ($add).
  creating $macc model for $verific$add_18$rtea.vhdl:75$79 ($add).
  creating $macc model for $verific$add_19$rtea.vhdl:75$80 ($add).
  creating $macc model for $verific$add_22$rtea.vhdl:75$83 ($add).
  creating $macc model for $verific$add_35$rtea.vhdl:93$93 ($add).
  creating $macc model for $verific$add_51$../vhdl_packages/vhdl_2008/src/numeric_std-body.vhdl:482$105 ($add).
  creating $macc model for $verific$sub_38$rtea.vhdl:96$94 ($sub).
  creating $macc model for $verific$sub_57$../vhdl_packages/vhdl_2008/src/numeric_std-body.vhdl:593$110 ($sub).
  merging $macc model for $verific$add_22$rtea.vhdl:75$83 into $verific$sub_38$rtea.vhdl:96$94.
  merging $macc model for $verific$add_19$rtea.vhdl:75$80 into $verific$sub_38$rtea.vhdl:96$94.
  merging $macc model for $verific$add_18$rtea.vhdl:75$79 into $verific$sub_38$rtea.vhdl:96$94.
  merging $macc model for $verific$add_16$rtea.vhdl:74$77 into $verific$add_35$rtea.vhdl:93$93.
  merging $macc model for $verific$add_13$rtea.vhdl:74$74 into $verific$add_35$rtea.vhdl:93$93.
  merging $macc model for $verific$add_12$rtea.vhdl:74$73 into $verific$add_35$rtea.vhdl:93$93.
  creating $alu model for $macc $verific$add_51$../vhdl_packages/vhdl_2008/src/numeric_std-body.vhdl:482$105.
  creating $alu model for $macc $verific$sub_57$../vhdl_packages/vhdl_2008/src/numeric_std-body.vhdl:593$110.
  creating $macc cell for $verific$sub_38$rtea.vhdl:96$94: $auto$alumacc.cc:365:replace_macc$159
  creating $macc cell for $verific$add_35$rtea.vhdl:93$93: $auto$alumacc.cc:365:replace_macc$160
  creating $alu cell for $verific$sub_57$../vhdl_packages/vhdl_2008/src/numeric_std-body.vhdl:593$110: $auto$alumacc.cc:485:replace_alu$161
  creating $alu cell for $verific$add_51$../vhdl_packages/vhdl_2008/src/numeric_std-body.vhdl:482$105: $auto$alumacc.cc:485:replace_alu$164
  created 2 $alu and 2 $macc cells.

yosys> opt_expr

3.24. Executing OPT_EXPR pass (perform const folding).
Optimizing module rtea.

yosys> opt_merge -nomux

3.25. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rtea'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.26. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \rtea..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

yosys> opt_reduce

3.27. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \rtea.
Performed a total of 0 changes.

yosys> opt_merge

3.28. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rtea'.
Removed a total of 0 cells.

yosys> opt_share

3.29. Executing OPT_SHARE pass.

yosys> opt_dff

3.30. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.31. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rtea..
Removed 6 unused cells and 6 unused wires.
<suppressed ~9 debug messages>

yosys> opt_expr

3.32. Executing OPT_EXPR pass (perform const folding).
Optimizing module rtea.

yosys> opt_muxtree

3.33. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \rtea..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

yosys> opt_reduce

3.34. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \rtea.
Performed a total of 0 changes.

yosys> opt_merge

3.35. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rtea'.
Removed a total of 0 cells.

yosys> opt_share

3.36. Executing OPT_SHARE pass.

yosys> opt_dff

3.37. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.38. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rtea..

yosys> opt_expr

3.39. Executing OPT_EXPR pass (perform const folding).
Optimizing module rtea.
MAX OPT ITERATION = 2

yosys> stat

3.40. Printing statistics.

=== rtea ===

   Number of wires:                 54
   Number of wire bits:            839
   Number of public wires:          14
   Number of public wire bits:     370
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 43
     $alu                            2
     $dffe                           5
     $eq                             3
     $logic_not                      2
     $macc                           2
     $mux                           17
     $ne                             4
     $not                            1
     $reduce_and                     3
     $reduce_bool                    1
     $sdffe                          1
     $xor                            2


yosys> memory -nomap

3.41. Executing MEMORY pass.

yosys> opt_mem

3.41.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

yosys> opt_mem_priority

3.41.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

yosys> opt_mem_feedback

3.41.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

yosys> memory_bmux2rom

3.41.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

yosys> memory_dff

3.41.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

yosys> opt_clean

3.41.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rtea..

yosys> memory_share

3.41.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

yosys> opt_mem_widen

3.41.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

yosys> opt_clean

3.41.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rtea..

yosys> memory_collect

3.41.10. Executing MEMORY_COLLECT pass (generating $mem cells).

yosys> stat

3.42. Printing statistics.

=== rtea ===

   Number of wires:                 54
   Number of wire bits:            839
   Number of public wires:          14
   Number of public wire bits:     370
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 43
     $alu                            2
     $dffe                           5
     $eq                             3
     $logic_not                      2
     $macc                           2
     $mux                           17
     $ne                             4
     $not                            1
     $reduce_and                     3
     $reduce_bool                    1
     $sdffe                          1
     $xor                            2


yosys> muxpack

3.43. Executing MUXPACK pass ($mux cell cascades to $pmux).
Converting rtea.$verific$mux_7$rtea.vhdl:68$68 ... rtea.$verific$mux_9$rtea.vhdl:69$70 to a pmux with 3 cases.
Converted 3 (p)mux cells into 1 pmux cells.
<suppressed ~16 debug messages>

yosys> opt_clean

3.44. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rtea..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

yosys> pmuxtree

3.45. Executing PMUXTREE pass.

yosys> muxpack

3.46. Executing MUXPACK pass ($mux cell cascades to $pmux).
Converted 0 (p)mux cells into 0 pmux cells.
<suppressed ~16 debug messages>

yosys> memory_map

3.47. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

yosys> stat

3.48. Printing statistics.

=== rtea ===

   Number of wires:                 58
   Number of wire bits:            874
   Number of public wires:          14
   Number of public wire bits:     370
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 46
     $alu                            2
     $dffe                           5
     $eq                             3
     $logic_not                      2
     $macc                           2
     $mux                           17
     $ne                             4
     $not                            2
     $or                             1
     $reduce_and                     3
     $reduce_bool                    1
     $reduce_or                      1
     $sdffe                          1
     $xor                            2


yosys> techmap -map +/techmap.v -map +/rapidsilicon/genesis/arith_map.v

3.49. Executing TECHMAP pass (map to technology primitives).

3.49.1. Executing Verilog-2005 frontend: /home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.49.2. Executing Verilog-2005 frontend: /home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/arith_map.v
Parsing Verilog input from `/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_rs_alu'.
Successfully finished Verilog frontend.

3.49.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $dffe.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper maccmap for cells of type $macc.
  add \r (32 bits, unsigned)
  sub \l (32 bits, unsigned)
  sub $verific$n416$29 (32 bits, unsigned)
  sub \key_slice (32 bits, unsigned)
  sub \round (6 bits, unsigned)
  packed 4 (1) bits / 1 words into adder tree
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $xor.
Using template $paramod$a04dd9d4d8b430140c4ff94b50470fb380fda2a0\_90_alu for cells of type $alu.
  add \l (32 bits, unsigned)
  add \r (32 bits, unsigned)
  add $verific$n215$24 (32 bits, unsigned)
  add \key_slice (32 bits, unsigned)
  add \round (6 bits, unsigned)
Using template $paramod$32efbfac1c4dc57230cf86180788fdfd12e3b511\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $sdffe.
Using template $paramod\_90_fa\WIDTH=32'00000000000000000000000000100000 for cells of type $fa.
Using template $paramod$61e2435132e1ce40c0d75c6c88e4344ff37fc23f\_80_rs_alu for cells of type $alu.
Using extmapper simplemap for cells of type $and.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000110 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod$fbc7873bff55778c0b3173955b7e4bce1d9d6834\_90_alu for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000100000 for cells of type $lcu.
No more expansions possible.
<suppressed ~950 debug messages>

yosys> stat

3.50. Printing statistics.

=== rtea ===

   Number of wires:                420
   Number of wire bits:           8815
   Number of public wires:          14
   Number of public wire bits:     370
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               2195
     $_AND_                        535
     $_DFFE_PN_                      1
     $_DFFE_PP_                    134
     $_MUX_                        399
     $_NOT_                        211
     $_OR_                         289
     $_SDFFE_PN1P_                   1
     $_XOR_                        593
     adder_carry                    32


yosys> opt_expr

3.51. Executing OPT_EXPR pass (perform const folding).
Optimizing module rtea.
<suppressed ~432 debug messages>

yosys> opt_merge -nomux

3.52. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rtea'.
<suppressed ~117 debug messages>
Removed a total of 39 cells.

yosys> opt_muxtree

3.53. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \rtea..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.54. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \rtea.
Performed a total of 0 changes.

yosys> opt_merge

3.55. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rtea'.
Removed a total of 0 cells.

yosys> opt_share

3.56. Executing OPT_SHARE pass.

yosys> opt_dff

3.57. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $auto$ff.cc:262:slice$267 ($_DFFE_PP_) from module rtea (D = $verific$n1157$56 [4], Q = \round [4], rval = 1'0).

yosys> opt_clean

3.58. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rtea..
Removed 104 unused cells and 260 unused wires.
<suppressed ~105 debug messages>

yosys> opt_expr

3.59. Executing OPT_EXPR pass (perform const folding).
Optimizing module rtea.

yosys> opt_muxtree

3.60. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \rtea..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.61. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \rtea.
Performed a total of 0 changes.

yosys> opt_merge

3.62. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rtea'.
Removed a total of 0 cells.

yosys> opt_share

3.63. Executing OPT_SHARE pass.

yosys> opt_dff

3.64. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.65. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rtea..

yosys> opt_expr

3.66. Executing OPT_EXPR pass (perform const folding).
Optimizing module rtea.
MAX OPT ITERATION = 2

yosys> opt -fast -full

3.67. Executing OPT pass (performing simple optimizations).

yosys> opt_expr -full

3.67.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module rtea.
<suppressed ~80 debug messages>

yosys> opt_merge

3.67.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rtea'.
Removed a total of 0 cells.

yosys> opt_dff

3.67.3. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.67.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rtea..
Removed 0 unused cells and 7 unused wires.
<suppressed ~1 debug messages>

3.67.5. Finished fast OPT passes.

yosys> techmap -map +/techmap.v

3.68. Executing TECHMAP pass (map to technology primitives).

3.68.1. Executing Verilog-2005 frontend: /home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.68.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~71 debug messages>

yosys> opt -sat

3.69. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.69.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module rtea.

yosys> opt_merge -nomux

3.69.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rtea'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.69.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \rtea..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.69.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \rtea.
Performed a total of 0 changes.

yosys> opt_merge

3.69.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rtea'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.69.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.69.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rtea..

yosys> opt_expr

3.69.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module rtea.

3.69.9. Finished OPT passes. (There is nothing left to do.)

yosys> abc -dff

3.70. Executing ABC pass (technology mapping using ABC).

3.70.1. Summary of detected clock domains:
  5 cells in clk=\clk, en=$auto$opt_dff.cc:219:make_patterns_logic$136, arst={ }, srst=!\start
  1526 cells in clk=\clk, en=$auto$opt_dff.cc:194:make_patterns_logic$146, arst={ }, srst={ }
  22 cells in clk=\clk, en=!\start, arst={ }, srst={ }
  65 cells in clk=\clk, en=$auto$opt_dff.cc:219:make_patterns_logic$155, arst={ }, srst={ }
  15 cells in clk=\clk, en=$auto$opt_dff.cc:219:make_patterns_logic$143, arst={ }, srst=!\start
  33 cells in clk=\clk, en=$auto$opt_dff.cc:219:make_patterns_logic$143, arst={ }, srst={ }

3.70.2. Extracting gate netlist of module `\rtea' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:219:make_patterns_logic$136, synchronously reset by !\start
Extracted 4 gates and 8 wires to a netlist network with 4 inputs and 2 outputs.

3.70.2.1. Executing ABC.

3.70.3. Extracting gate netlist of module `\rtea' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:194:make_patterns_logic$146
Extracted 1494 gates and 1736 wires to a netlist network with 242 inputs and 125 outputs.

3.70.3.1. Executing ABC.

3.70.4. Extracting gate netlist of module `\rtea' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by !\start
Extracted 22 gates and 41 wires to a netlist network with 19 inputs and 12 outputs.

3.70.4.1. Executing ABC.

3.70.5. Extracting gate netlist of module `\rtea' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:219:make_patterns_logic$155
Extracted 65 gates and 131 wires to a netlist network with 66 inputs and 65 outputs.

3.70.5.1. Executing ABC.

3.70.6. Extracting gate netlist of module `\rtea' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:219:make_patterns_logic$143, synchronously reset by !\start
Extracted 15 gates and 27 wires to a netlist network with 12 inputs and 8 outputs.

3.70.6.1. Executing ABC.

3.70.7. Extracting gate netlist of module `\rtea' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$4709$auto$opt_dff.cc:219:make_patterns_logic$143
Extracted 33 gates and 40 wires to a netlist network with 7 inputs and 24 outputs.

3.70.7.1. Executing ABC.

yosys> abc -dff

3.71. Executing ABC pass (technology mapping using ABC).

3.71.1. Summary of detected clock domains:
  24 cells in clk=\clk, en=$abc$4709$auto$opt_dff.cc:219:make_patterns_logic$143, arst={ }, srst=!\start
  288 cells in clk=\clk, en=!\start, arst={ }, srst={ }
  5 cells in clk=\clk, en=$abc$2928$auto$opt_dff.cc:219:make_patterns_logic$136, arst={ }, srst=!\start
  1251 cells in clk=\clk, en=$abc$2932$auto$opt_dff.cc:194:make_patterns_logic$146, arst={ }, srst={ }
  65 cells in clk=\clk, en=$abc$4515$auto$opt_dff.cc:219:make_patterns_logic$155, arst={ }, srst={ }
  27 cells in clk=\clk, en=$abc$4709$auto$opt_dff.cc:219:make_patterns_logic$143, arst={ }, srst={ }

3.71.2. Extracting gate netlist of module `\rtea' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$4709$auto$opt_dff.cc:219:make_patterns_logic$143, synchronously reset by !\start
Extracted 24 gates and 40 wires to a netlist network with 16 inputs and 8 outputs.

3.71.2.1. Executing ABC.

3.71.3. Extracting gate netlist of module `\rtea' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by !\start
Extracted 274 gates and 482 wires to a netlist network with 208 inputs and 113 outputs.

3.71.3.1. Executing ABC.

3.71.4. Extracting gate netlist of module `\rtea' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$2928$auto$opt_dff.cc:219:make_patterns_logic$136, synchronously reset by !\start
Extracted 4 gates and 8 wires to a netlist network with 4 inputs and 2 outputs.

3.71.4.1. Executing ABC.

3.71.5. Extracting gate netlist of module `\rtea' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$2932$auto$opt_dff.cc:194:make_patterns_logic$146
Extracted 1233 gates and 1505 wires to a netlist network with 272 inputs and 215 outputs.

3.71.5.1. Executing ABC.

3.71.6. Extracting gate netlist of module `\rtea' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$4515$auto$opt_dff.cc:219:make_patterns_logic$155
Extracted 65 gates and 131 wires to a netlist network with 66 inputs and 65 outputs.

3.71.6.1. Executing ABC.

3.71.7. Extracting gate netlist of module `\rtea' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$4762$abc$4709$auto$opt_dff.cc:219:make_patterns_logic$143
Extracted 27 gates and 34 wires to a netlist network with 7 inputs and 22 outputs.

3.71.7.1. Executing ABC.

yosys> abc -dff

3.72. Executing ABC pass (technology mapping using ABC).

3.72.1. Summary of detected clock domains:
  511 cells in clk=\clk, en=!\start, arst={ }, srst={ }
  22 cells in clk=\clk, en=$abc$4762$abc$4709$auto$opt_dff.cc:219:make_patterns_logic$143, arst={ }, srst=!\start
  4 cells in clk=\clk, en=$abc$5046$abc$2928$auto$opt_dff.cc:219:make_patterns_logic$136, arst={ }, srst=!\start
  1048 cells in clk=\clk, en=$abc$5050$abc$2932$auto$opt_dff.cc:194:make_patterns_logic$146, arst={ }, srst={ }
  65 cells in clk=\clk, en=$abc$6385$abc$4515$auto$opt_dff.cc:219:make_patterns_logic$155, arst={ }, srst={ }
  28 cells in clk=\clk, en=$abc$4762$abc$4709$auto$opt_dff.cc:219:make_patterns_logic$143, arst={ }, srst={ }

3.72.2. Extracting gate netlist of module `\rtea' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by !\start
Extracted 481 gates and 765 wires to a netlist network with 284 inputs and 157 outputs.

3.72.2.1. Executing ABC.

3.72.3. Extracting gate netlist of module `\rtea' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$4762$abc$4709$auto$opt_dff.cc:219:make_patterns_logic$143, synchronously reset by !\start
Extracted 22 gates and 37 wires to a netlist network with 15 inputs and 9 outputs.

3.72.3.1. Executing ABC.

3.72.4. Extracting gate netlist of module `\rtea' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$5046$abc$2928$auto$opt_dff.cc:219:make_patterns_logic$136, synchronously reset by !\start
Extracted 3 gates and 7 wires to a netlist network with 4 inputs and 2 outputs.

3.72.4.1. Executing ABC.

3.72.5. Extracting gate netlist of module `\rtea' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$5050$abc$2932$auto$opt_dff.cc:194:make_patterns_logic$146
Extracted 1046 gates and 1278 wires to a netlist network with 232 inputs and 186 outputs.

3.72.5.1. Executing ABC.

3.72.6. Extracting gate netlist of module `\rtea' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$6385$abc$4515$auto$opt_dff.cc:219:make_patterns_logic$155
Extracted 65 gates and 131 wires to a netlist network with 66 inputs and 65 outputs.

3.72.6.1. Executing ABC.

3.72.7. Extracting gate netlist of module `\rtea' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$7062$abc$4762$abc$4709$auto$opt_dff.cc:219:make_patterns_logic$143
Extracted 28 gates and 35 wires to a netlist network with 7 inputs and 21 outputs.

3.72.7.1. Executing ABC.

yosys> abc -dff

3.73. Executing ABC pass (technology mapping using ABC).

3.73.1. Summary of detected clock domains:
  478 cells in clk=\clk, en=!\start, arst={ }, srst={ }
  10 cells in clk=\clk, en=$abc$7085$abc$5046$abc$2928$auto$opt_dff.cc:219:make_patterns_logic$136, arst={ }, srst=!\start
  18 cells in clk=\clk, en=$abc$7062$abc$4762$abc$4709$auto$opt_dff.cc:219:make_patterns_logic$143, arst={ }, srst=!\start
  1047 cells in clk=\clk, en=$abc$7089$abc$5050$abc$2932$auto$opt_dff.cc:194:make_patterns_logic$146, arst={ }, srst={ }
  65 cells in clk=\clk, en=$abc$8203$abc$6385$abc$4515$auto$opt_dff.cc:219:make_patterns_logic$155, arst={ }, srst={ }
  28 cells in clk=\clk, en=$abc$7062$abc$4762$abc$4709$auto$opt_dff.cc:219:make_patterns_logic$143, arst={ }, srst={ }

3.73.2. Extracting gate netlist of module `\rtea' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by !\start
Extracted 449 gates and 738 wires to a netlist network with 289 inputs and 161 outputs.

3.73.2.1. Executing ABC.

3.73.3. Extracting gate netlist of module `\rtea' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$7085$abc$5046$abc$2928$auto$opt_dff.cc:219:make_patterns_logic$136, synchronously reset by !\start
Extracted 9 gates and 18 wires to a netlist network with 9 inputs and 4 outputs.

3.73.3.1. Executing ABC.

3.73.4. Extracting gate netlist of module `\rtea' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$7062$abc$4762$abc$4709$auto$opt_dff.cc:219:make_patterns_logic$143, synchronously reset by !\start
Extracted 18 gates and 34 wires to a netlist network with 16 inputs and 11 outputs.

3.73.4.1. Executing ABC.

3.73.5. Extracting gate netlist of module `\rtea' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$7089$abc$5050$abc$2932$auto$opt_dff.cc:194:make_patterns_logic$146
Extracted 1044 gates and 1285 wires to a netlist network with 241 inputs and 193 outputs.

3.73.5.1. Executing ABC.

3.73.6. Extracting gate netlist of module `\rtea' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$8203$abc$6385$abc$4515$auto$opt_dff.cc:219:make_patterns_logic$155
Extracted 65 gates and 131 wires to a netlist network with 66 inputs and 65 outputs.

3.73.6.1. Executing ABC.

3.73.7. Extracting gate netlist of module `\rtea' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$8882$abc$7062$abc$4762$abc$4709$auto$opt_dff.cc:219:make_patterns_logic$143
Extracted 28 gates and 35 wires to a netlist network with 7 inputs and 21 outputs.

3.73.7.1. Executing ABC.

yosys> opt_ffinv

3.74. Executing OPT_FFINV pass (push inverters through FFs).
Discovering LUTs.
Pushed 0 inverters.

yosys> opt -sat

3.75. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.75.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module rtea.
<suppressed ~2 debug messages>

yosys> opt_merge -nomux

3.75.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rtea'.
<suppressed ~9 debug messages>
Removed a total of 3 cells.

yosys> opt_muxtree

3.75.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \rtea..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.75.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \rtea.
Performed a total of 0 changes.

yosys> opt_merge

3.75.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rtea'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.75.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.75.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rtea..
Removed 0 unused cells and 8231 unused wires.
<suppressed ~2 debug messages>

yosys> opt_expr

3.75.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module rtea.

3.75.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.75.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \rtea..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.75.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \rtea.
Performed a total of 0 changes.

yosys> opt_merge

3.75.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rtea'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.75.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.75.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rtea..

yosys> opt_expr

3.75.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module rtea.

3.75.16. Finished OPT passes. (There is nothing left to do.)

yosys> bmuxmap

3.76. Executing BMUXMAP pass.

yosys> demuxmap

3.77. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> abc -script /home/users/temp_dir/yosys_TJiI5z/abc_tmp_1.scr

3.78. Executing ABC pass (technology mapping using ABC).

3.78.1. Extracting gate netlist of module `\rtea' to `<abc-temp-dir>/input.blif'..
Extracted 1460 gates and 1757 wires to a netlist network with 297 inputs and 135 outputs.

3.78.1.1. Executing ABC.
DE:   #PIs = 297  #Luts =   467  Max Lvl =  33  Avg Lvl =   6.27  [   0.26 sec. at Pass 0]
DE:   #PIs = 297  #Luts =   432  Max Lvl =  27  Avg Lvl =   5.25  [   6.49 sec. at Pass 1]
DE:   #PIs = 297  #Luts =   417  Max Lvl =  24  Avg Lvl =   4.94  [   2.03 sec. at Pass 2]
DE:   #PIs = 297  #Luts =   417  Max Lvl =  24  Avg Lvl =   4.94  [   2.81 sec. at Pass 3]
DE:   #PIs = 297  #Luts =   404  Max Lvl =  24  Avg Lvl =   4.96  [   2.01 sec. at Pass 4]
DE:   #PIs = 297  #Luts =   404  Max Lvl =  24  Avg Lvl =   4.96  [   4.93 sec. at Pass 5]
DE:   #PIs = 297  #Luts =   403  Max Lvl =  23  Avg Lvl =   4.77  [   2.27 sec. at Pass 6]
DE:   #PIs = 297  #Luts =   403  Max Lvl =  23  Avg Lvl =   4.77  [   3.13 sec. at Pass 7]
DE:   #PIs = 297  #Luts =   403  Max Lvl =  23  Avg Lvl =   4.77  [   3.13 sec. at Pass 8]
DE:   #PIs = 297  #Luts =   403  Max Lvl =  23  Avg Lvl =   4.77  [   3.37 sec. at Pass 9]
DE:   #PIs = 297  #Luts =   399  Max Lvl =  24  Avg Lvl =   5.10  [  17.15 sec. at Pass 10]
DE:   #PIs = 297  #Luts =   399  Max Lvl =  23  Avg Lvl =   4.79  [   2.19 sec. at Pass 11]
DE:   #PIs = 297  #Luts =   399  Max Lvl =  23  Avg Lvl =   4.79  [   4.95 sec. at Pass 12]
DE:   #PIs = 297  #Luts =   399  Max Lvl =  23  Avg Lvl =   4.79  [   2.20 sec. at Pass 13]
DE:   #PIs = 297  #Luts =   399  Max Lvl =  23  Avg Lvl =   4.79  [   4.95 sec. at Pass 14]
DE:   #PIs = 297  #Luts =   399  Max Lvl =  23  Avg Lvl =   4.79  [  16.34 sec. at Pass 15]
DE:   #PIs = 297  #Luts =   398  Max Lvl =  23  Avg Lvl =   4.84  [   0.53 sec. at Pass 16]

yosys> opt_expr

3.79. Executing OPT_EXPR pass (perform const folding).
Optimizing module rtea.

yosys> opt_merge -nomux

3.80. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rtea'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.81. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \rtea..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.82. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \rtea.
Performed a total of 0 changes.

yosys> opt_merge

3.83. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rtea'.
Removed a total of 0 cells.

yosys> opt_share

3.84. Executing OPT_SHARE pass.

yosys> opt_dff

3.85. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.86. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rtea..
Removed 0 unused cells and 1750 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.87. Executing OPT_EXPR pass (perform const folding).
Optimizing module rtea.
MAX OPT ITERATION = 1

yosys> opt_ffinv

3.88. Executing OPT_FFINV pass (push inverters through FFs).
Discovering LUTs.
Pushed 0 inverters.

yosys> stat

3.89. Printing statistics.

=== rtea ===

   Number of wires:                357
   Number of wire bits:            812
   Number of public wires:          13
   Number of public wire bits:     338
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                566
     $_DFFE_PN_                      1
     $_DFFE_PP_                    133
     $_SDFFE_PN0P_                   1
     $_SDFFE_PN1P_                   1
     $lut                          398
     adder_carry                    32


yosys> shregmap -minlen 8 -maxlen 20

3.90. Executing SHREGMAP pass (map shift registers).
Converted 0 dff cells into 0 shift registers.

yosys> dfflegalize -cell $_DFF_?_ 0 -cell $_DFF_???_ 0 -cell $_DFFE_????_ 0 -cell $_DFFSR_???_ 0 -cell $_DFFSRE_????_ 0 -cell $_DLATCHSR_PPP_ 0

3.91. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

yosys> stat

3.92. Printing statistics.

=== rtea ===

   Number of wires:                361
   Number of wire bits:            816
   Number of public wires:          13
   Number of public wire bits:     338
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                570
     $_DFFE_PP0N_                    1
     $_DFFE_PP0P_                  133
     $_DFF_P_                        2
     $_MUX_                          4
     $lut                          398
     adder_carry                    32


yosys> techmap -map +/techmap.v -map +/rapidsilicon/genesis/ffs_map.v

3.93. Executing TECHMAP pass (map to technology primitives).

3.93.1. Executing Verilog-2005 frontend: /home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.93.2. Executing Verilog-2005 frontend: /home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/ffs_map.v
Parsing Verilog input from `/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/ffs_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP0N_'.
Generating RTLIL representation for module `\$_DFFE_PN0P_'.
Generating RTLIL representation for module `\$_DFFE_PN0N_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP1N_'.
Generating RTLIL representation for module `\$_DFFE_PN1P_'.
Generating RTLIL representation for module `\$_DFFE_PN1N_'.
Generating RTLIL representation for module `\$_DFFSR_PPP_'.
Generating RTLIL representation for module `\$_DFFSR_PNP_'.
Generating RTLIL representation for module `\$_DFFSR_PNN_'.
Generating RTLIL representation for module `\$_DFFSR_PPN_'.
Generating RTLIL representation for module `\$_DFFSR_NPP_'.
Generating RTLIL representation for module `\$_DFFSR_NNP_'.
Generating RTLIL representation for module `\$_DFFSR_NNN_'.
Generating RTLIL representation for module `\$_DFFSR_NPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PNPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPNP_'.
Generating RTLIL representation for module `\$_DFFSRE_PNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PNPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PPNN_'.
Generating RTLIL representation for module `\$_DFFSRE_PNNN_'.
Generating RTLIL representation for module `\$_DLATCHSR_PPP_'.
Generating RTLIL representation for module `\$_DLATCHSR_NPP_'.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP0N_'.
Generating RTLIL representation for module `\$_DFFE_NN0P_'.
Generating RTLIL representation for module `\$_DFFE_NN0N_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_NP1N_'.
Generating RTLIL representation for module `\$_DFFE_NN1P_'.
Generating RTLIL representation for module `\$_DFFE_NN1N_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNPP_'.
Generating RTLIL representation for module `\$_DFFSRE_NPNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPN_'.
Generating RTLIL representation for module `\$_DFFSRE_NNPN_'.
Generating RTLIL representation for module `\$_DFFSRE_NPNN_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNN_'.
Generating RTLIL representation for module `\$__SHREG_DFF_P_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PN0_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NN0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFF_PN1_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_NN1_'.
Successfully finished Verilog frontend.

3.93.3. Continuing TECHMAP pass.
Using template \$_DFF_P_ for cells of type $_DFF_P_.
Using template \$_DFFE_PP0P_ for cells of type $_DFFE_PP0P_.
Using template \$_DFFE_PP0N_ for cells of type $_DFFE_PP0N_.
Using extmapper simplemap for cells of type $lut.
Using extmapper simplemap for cells of type $logic_not.
No more expansions possible.
<suppressed ~805 debug messages>

yosys> opt_expr -mux_undef

3.94. Executing OPT_EXPR pass (perform const folding).
Optimizing module rtea.
<suppressed ~8615 debug messages>

yosys> simplemap

3.95. Executing SIMPLEMAP pass (map simple cells to gate primitives).

yosys> opt_expr

3.96. Executing OPT_EXPR pass (perform const folding).
Optimizing module rtea.

yosys> opt_merge

3.97. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rtea'.
<suppressed ~8694 debug messages>
Removed a total of 2898 cells.

yosys> opt_dff -nodffe -nosdff

3.98. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.99. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rtea..
Removed 0 unused cells and 1674 unused wires.
<suppressed ~1 debug messages>

yosys> opt -nodffe -nosdff

3.100. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.100.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module rtea.
<suppressed ~81 debug messages>

yosys> opt_merge -nomux

3.100.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rtea'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.100.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \rtea..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.100.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \rtea.
Performed a total of 0 changes.

yosys> opt_merge

3.100.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rtea'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.100.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.100.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rtea..
Removed 0 unused cells and 19 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.100.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module rtea.

3.100.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.100.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \rtea..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.100.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \rtea.
Performed a total of 0 changes.

yosys> opt_merge

3.100.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rtea'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.100.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.100.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rtea..

yosys> opt_expr

3.100.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module rtea.

3.100.16. Finished OPT passes. (There is nothing left to do.)

yosys> abc -script /home/users/temp_dir/yosys_TJiI5z/abc_tmp_2.scr

3.101. Executing ABC pass (technology mapping using ABC).

3.101.1. Extracting gate netlist of module `\rtea' to `<abc-temp-dir>/input.blif'..
Extracted 2575 gates and 2874 wires to a netlist network with 297 inputs and 136 outputs.

3.101.1.1. Executing ABC.
DE:   #PIs = 297  #Luts =   403  Max Lvl =  23  Avg Lvl =   4.80  [   0.43 sec. at Pass 0]
DE:   #PIs = 297  #Luts =   403  Max Lvl =  23  Avg Lvl =   4.80  [  11.24 sec. at Pass 1]
DE:   #PIs = 297  #Luts =   402  Max Lvl =  24  Avg Lvl =   4.79  [   3.04 sec. at Pass 2]
DE:   #PIs = 297  #Luts =   402  Max Lvl =  24  Avg Lvl =   4.79  [   5.85 sec. at Pass 3]
DE:   #PIs = 297  #Luts =   400  Max Lvl =  23  Avg Lvl =   4.82  [   2.69 sec. at Pass 4]
DE:   #PIs = 297  #Luts =   400  Max Lvl =  23  Avg Lvl =   4.82  [   5.23 sec. at Pass 5]
DE:   #PIs = 297  #Luts =   398  Max Lvl =  24  Avg Lvl =   4.89  [   3.43 sec. at Pass 6]
DE:   #PIs = 297  #Luts =   398  Max Lvl =  24  Avg Lvl =   4.89  [   4.94 sec. at Pass 7]
DE:   #PIs = 297  #Luts =   398  Max Lvl =  24  Avg Lvl =   4.89  [   2.89 sec. at Pass 8]
DE:   #PIs = 297  #Luts =   398  Max Lvl =  24  Avg Lvl =   4.89  [   5.41 sec. at Pass 9]
DE:   #PIs = 297  #Luts =   394  Max Lvl =  23  Avg Lvl =   4.82  [  18.70 sec. at Pass 10]
DE:   #PIs = 297  #Luts =   394  Max Lvl =  23  Avg Lvl =   4.82  [   2.94 sec. at Pass 11]
DE:   #PIs = 297  #Luts =   394  Max Lvl =  23  Avg Lvl =   4.82  [   5.05 sec. at Pass 12]
DE:   #PIs = 297  #Luts =   394  Max Lvl =  23  Avg Lvl =   4.82  [   2.65 sec. at Pass 13]
DE:   #PIs = 297  #Luts =   394  Max Lvl =  23  Avg Lvl =   4.82  [  20.35 sec. at Pass 14]
DE:   #PIs = 297  #Luts =   394  Max Lvl =  23  Avg Lvl =   4.82  [   0.52 sec. at Pass 15]

yosys> opt_expr

3.102. Executing OPT_EXPR pass (perform const folding).
Optimizing module rtea.

yosys> opt_merge -nomux

3.103. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rtea'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.104. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \rtea..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.105. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \rtea.
Performed a total of 0 changes.

yosys> opt_merge

3.106. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rtea'.
Removed a total of 0 cells.

yosys> opt_share

3.107. Executing OPT_SHARE pass.

yosys> opt_dff

3.108. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.109. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rtea..
Removed 0 unused cells and 1741 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.110. Executing OPT_EXPR pass (perform const folding).
Optimizing module rtea.
MAX OPT ITERATION = 1

yosys> hierarchy -check

3.111. Executing HIERARCHY pass (managing design hierarchy).

3.111.1. Analyzing design hierarchy..
Top module:  \rtea

3.111.2. Analyzing design hierarchy..
Top module:  \rtea
Removed 0 unused modules.

yosys> stat

3.112. Printing statistics.

=== rtea ===

   Number of wires:                353
   Number of wire bits:            808
   Number of public wires:          13
   Number of public wire bits:     338
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                562
     $lut                          394
     adder_carry                    32
     dffsre                        136


yosys> opt_clean -purge

3.113. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rtea..
Removed 0 unused cells and 2 unused wires.
<suppressed ~2 debug messages>

yosys> write_verilog -noattr -nohex synthesized.v

3.114. Executing Verilog backend.
Dumping module `\rtea'.

End of script. Logfile hash: 3a89e2c5f5, CPU: user 7.79s system 0.31s, MEM: 46.13 MB peak
Yosys 0.18+10 (git sha1 7a7a25778, gcc 9.1.0 -fPIC -Os)
Time spent: 99% 6x abc (1051 sec), 0% 34x opt_expr (2 sec), ...
real 206.71
user 993.40
sys 64.99
