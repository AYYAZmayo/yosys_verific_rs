
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys-Verific 0.0.32
 Yosys 0.16+65 (git sha1 7987105a9, gcc 9.1.0 -fPIC -Os)


-- Executing script file `yosys.ys' --
echo on

yosys> plugin -i synth-rs

yosys> read -verific

yosys> read -incdir .

yosys> verific -vlog-incdir .

1. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Apr22_SW_Release, released at Thu Apr 28 20:08:21 2022.

yosys> verilog_defaults -add -I.

yosys> read -vhdl b13.vhd

yosys> verific -vhdl b13.vhd

2. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Apr22_SW_Release, released at Thu Apr 28 20:08:21 2022.
VERIFIC-INFO [VHDL-1504] default VHDL library search path is now "/home/users/meri/Documents/workspace/de-issue/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008"
VERIFIC-COMMENT [VHDL-1481] Analyzing VHDL file 'b13.vhd'
VERIFIC-COMMENT [VHDL-1493] Restoring VHDL unit 'std.standard' from file '/home/users/meri/Documents/workspace/de-issue/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008/std/standard.vdb'
VERIFIC-INFO [VHDL-1012] b13.vhd:1: analyzing entity 'b13'
VERIFIC-INFO [VHDL-1010] b13.vhd:21: analyzing architecture 'behav'

yosys> synth_rs -top b13 -tech genesis -goal area -de -no_dsp -no_bram -verilog synthesized.v

3. Executing synth_rs pass: v0.4.50

yosys> read_verilog -lib -specify -nomem2reg +/rapidsilicon/common/cells_sim.v +/rapidsilicon/genesis/cells_sim.v

3.1. Executing Verilog-2005 frontend: /home/users/meri/Documents/workspace/de-issue/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v
Parsing Verilog input from `/home/users/meri/Documents/workspace/de-issue/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\inv'.
Generating RTLIL representation for module `\buff'.
Generating RTLIL representation for module `\logic_0'.
Generating RTLIL representation for module `\logic_1'.
Generating RTLIL representation for module `\gclkbuff'.
Successfully finished Verilog frontend.

3.2. Executing Verilog-2005 frontend: /home/users/meri/Documents/workspace/de-issue/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/cells_sim.v
Parsing Verilog input from `/home/users/meri/Documents/workspace/de-issue/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\dffsre'.
Generating RTLIL representation for module `\dffnsre'.
Generating RTLIL representation for module `\latchsre'.
Generating RTLIL representation for module `\latchnsre'.
Generating RTLIL representation for module `\io_scff'.
Generating RTLIL representation for module `\scff'.
Generating RTLIL representation for module `\sh_dff'.
Generating RTLIL representation for module `\adder_carry'.
Generating RTLIL representation for module `\sdffr'.
Generating RTLIL representation for module `\sdffs'.
Generating RTLIL representation for module `\TDP_BRAM18'.
Generating RTLIL representation for module `\TDP36K'.
Generating RTLIL representation for module `\RS_DSP1'.
Generating RTLIL representation for module `\RS_DSP2'.
Generating RTLIL representation for module `\dsp_t1_sim'.
Generating RTLIL representation for module `\dsp_t1_20x18x64'.
Generating RTLIL representation for module `\dsp_t1_10x9x32'.
Successfully finished Verilog frontend.

yosys> hierarchy -check -top b13

3.3. Executing HIERARCHY pass (managing design hierarchy).
VERIFIC-INFO [VHDL-1067] b13.vhd:1: processing 'b13(BEHAV)'
VERIFIC-INFO [VHDL-1172] b13.vhd:125: 'others' clause is never selected
VERIFIC-INFO [VHDL-1172] b13.vhd:167: 'others' clause is never selected
VERIFIC-INFO [VHDL-1172] b13.vhd:203: 'others' clause is never selected
Importing module b13.

3.3.1. Analyzing design hierarchy..
Top module:  \b13

3.3.2. Analyzing design hierarchy..
Top module:  \b13
Removed 0 unused modules.

yosys> proc

3.4. Executing PROC pass (convert processes to netlists).

yosys> proc_clean

3.4.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> proc_rmdead

3.4.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

yosys> proc_prune

3.4.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

yosys> proc_init

3.4.4. Executing PROC_INIT pass (extract init attributes).

yosys> proc_arst

3.4.5. Executing PROC_ARST pass (detect async resets in processes).

yosys> proc_mux

3.4.6. Executing PROC_MUX pass (convert decision trees to multiplexers).

yosys> proc_dlatch

3.4.7. Executing PROC_DLATCH pass (convert process syncs to latches).

yosys> proc_dff

3.4.8. Executing PROC_DFF pass (convert process syncs to FFs).

yosys> proc_memwr

3.4.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

yosys> proc_clean

3.4.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> opt_expr -keepdc

3.4.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.
<suppressed ~25 debug messages>

yosys> flatten

3.5. Executing FLATTEN pass (flatten design).

yosys> tribuf -logic

3.6. Executing TRIBUF pass.

yosys> deminout

3.7. Executing DEMINOUT pass (demote inout ports to input or output).

yosys> opt_expr

3.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.

yosys> opt_clean

3.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b13..
Removed 3 unused cells and 57 unused wires.
<suppressed ~18 debug messages>

yosys> check

3.10. Executing CHECK pass (checking for obvious problems).
Checking module b13...
Found and reported 0 problems.

yosys> opt -nodffe -nosdff

3.11. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.

yosys> opt_merge -nomux

3.11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b13'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.11.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b13..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~27 debug messages>

yosys> opt_reduce

3.11.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b13.
Performed a total of 0 changes.

yosys> opt_merge

3.11.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b13'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.11.6. Executing OPT_DFF pass (perform DFF optimizations).
Changing const-value async load to async reset on $verific$tx_end_reg$b13.vhd:294$235 ($aldff) from module b13.
Changing const-value async load to async reset on $verific$tx_conta_reg$b13.vhd:294$238 ($aldff) from module b13.
Changing const-value async load to async reset on $verific$tre_reg$b13.vhd:239$212 ($aldff) from module b13.
Changing const-value async load to async reset on $verific$soc_reg$b13.vhd:127$150 ($aldff) from module b13.
Changing const-value async load to async reset on $verific$shot_reg$b13.vhd:169$180 ($aldff) from module b13.
Changing const-value async load to async reset on $verific$send_reg$b13.vhd:205$190 ($aldff) from module b13.
Changing const-value async load to async reset on $verific$send_en_reg$b13.vhd:239$210 ($aldff) from module b13.
Changing const-value async load to async reset on $verific$send_data_reg$b13.vhd:127$153 ($aldff) from module b13.
Changing const-value async load to async reset on $verific$rdy_reg$b13.vhd:169$177 ($aldff) from module b13.
Changing const-value async load to async reset on $verific$out_reg_reg$b13.vhd:239$211 ($aldff) from module b13.
Changing const-value async load to async reset on $verific$next_bit_reg$b13.vhd:294$237 ($aldff) from module b13.
Changing const-value async load to async reset on $verific$mux_en_reg$b13.vhd:127$155 ($aldff) from module b13.
Changing const-value async load to async reset on $verific$mpx_reg$b13.vhd:169$179 ($aldff) from module b13.
Changing const-value async load to async reset on $verific$load_reg$b13.vhd:205$189 ($aldff) from module b13.
Changing const-value async load to async reset on $verific$load_dato_reg$b13.vhd:127$154 ($aldff) from module b13.
Changing const-value async load to async reset on $verific$itfc_state_reg$b13.vhd:205$192 ($aldff) from module b13.
Changing const-value async load to async reset on $verific$error_reg$b13.vhd:239$213 ($aldff) from module b13.
Changing const-value async load to async reset on $verific$data_out_reg$b13.vhd:294$236 ($aldff) from module b13.
Changing const-value async load to async reset on $verific$conta_tmp_reg$b13.vhd:127$152 ($aldff) from module b13.
Changing const-value async load to async reset on $verific$confirm_reg$b13.vhd:205$191 ($aldff) from module b13.
Changing const-value async load to async reset on $verific$canale_reg$b13.vhd:127$151 ($aldff) from module b13.
Changing const-value async load to async reset on $verific$add_mpx2_reg$b13.vhd:169$178 ($aldff) from module b13.
Changing const-value async load to async reset on $verific$S2_reg$b13.vhd:169$176 ($aldff) from module b13.
Changing const-value async load to async reset on $verific$S1_reg$b13.vhd:127$149 ($aldff) from module b13.

yosys> opt_clean

3.11.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b13..

yosys> opt_expr

3.11.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.

3.11.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.11.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b13..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~27 debug messages>

yosys> opt_reduce

3.11.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b13.
Performed a total of 0 changes.

yosys> opt_merge

3.11.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b13'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.11.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.11.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b13..

yosys> opt_expr

3.11.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.

3.11.16. Finished OPT passes. (There is nothing left to do.)

yosys> fsm -encoding binary

3.12. Executing FSM pass (extract and optimize FSM).

yosys> fsm_detect

3.12.1. Executing FSM_DETECT pass (finding FSMs in design).

yosys> fsm_extract

3.12.2. Executing FSM_EXTRACT pass (extracting FSM from design).

yosys> fsm_opt

3.12.3. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> opt_clean

3.12.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b13..

yosys> fsm_opt

3.12.5. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> fsm_recode -encoding binary

3.12.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

yosys> fsm_info

3.12.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

yosys> fsm_map

3.12.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

yosys> opt -sat

3.13. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.

yosys> opt_merge -nomux

3.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b13'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b13..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~27 debug messages>

yosys> opt_reduce

3.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b13.
Performed a total of 0 changes.

yosys> opt_merge

3.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b13'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.13.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $verific$tx_conta_reg$b13.vhd:294$238 ($adff) from module b13 (D = $verific$n1576$120, Q = \tx_conta).
Adding EN signal on $verific$out_reg_reg$b13.vhd:239$211 ($adff) from module b13 (D = \data_in, Q = \out_reg).
Adding EN signal on $verific$next_bit_reg$b13.vhd:294$237 ($adff) from module b13 (D = $verific$n1506$115, Q = \next_bit).
Adding EN signal on $verific$error_reg$b13.vhd:239$213 ($adff) from module b13 (D = $verific$n1079$46, Q = \error).
Setting constant 0-bit at position 3 on $verific$conta_tmp_reg$b13.vhd:127$152 ($adff) from module b13.
Setting constant 0-bit at position 7 on $auto$ff.cc:262:slice$248 ($adffe) from module b13.
Setting constant 0-bit at position 8 on $auto$ff.cc:262:slice$248 ($adffe) from module b13.
Setting constant 0-bit at position 9 on $auto$ff.cc:262:slice$248 ($adffe) from module b13.

yosys> opt_clean

3.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b13..
Removed 5 unused cells and 5 unused wires.
<suppressed ~6 debug messages>

yosys> opt_expr

3.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.
<suppressed ~1 debug messages>

3.13.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.13.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b13..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~25 debug messages>

yosys> opt_reduce

3.13.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b13.
Performed a total of 0 changes.

yosys> opt_merge

3.13.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b13'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

yosys> opt_dff -sat

3.13.13. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 3 on $verific$canale_reg$b13.vhd:127$151 ($adff) from module b13.

yosys> opt_clean

3.13.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b13..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.13.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.

3.13.16. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.13.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b13..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~25 debug messages>

yosys> opt_reduce

3.13.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b13.
Performed a total of 0 changes.

yosys> opt_merge

3.13.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b13'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.13.20. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.13.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b13..

yosys> opt_expr

3.13.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.

3.13.23. Finished OPT passes. (There is nothing left to do.)

yosys> wreduce -keepdc

3.14. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 3) from mux cell b13.$verific$mux_18$b13.vhd:103$130 ($mux).
Removed top 1 bits (of 4) from port A of cell b13.$verific$add_23$b13.vhd:107$133 ($add).
Removed top 3 bits (of 4) from port B of cell b13.$verific$add_23$b13.vhd:107$133 ($add).
Removed top 1 bits (of 5) from port Y of cell b13.$verific$add_23$b13.vhd:107$133 ($add).
Removed top 1 bits (of 3) from mux cell b13.$verific$mux_36$b13.vhd:124$140 ($mux).
Removed top 1 bits (of 2) from mux cell b13.$verific$mux_61$b13.vhd:146$157 ($mux).
Removed top 1 bits (of 2) from mux cell b13.$verific$mux_105$b13.vhd:190$182 ($mux).
Removed top 3 bits (of 10) from port A of cell b13.$verific$LessThan_162$b13.vhd:255$214 ($lt).
Removed top 3 bits (of 10) from port B of cell b13.$verific$LessThan_162$b13.vhd:255$214 ($lt).
Removed top 3 bits (of 10) from port A of cell b13.$verific$add_188$b13.vhd:291$226 ($add).
Removed top 9 bits (of 10) from port B of cell b13.$verific$add_188$b13.vhd:291$226 ($add).
Removed top 2 bits (of 10) from port Y of cell b13.$verific$add_188$b13.vhd:291$226 ($add).
Removed top 3 bits (of 10) from mux cell b13.$verific$mux_193$b13.vhd:292$230 ($mux).
Removed top 1 bits (of 8) from port Y of cell b13.$verific$add_188$b13.vhd:291$226 ($add).
Removed top 3 bits (of 10) from wire b13.$verific$n1546$117.
Removed top 3 bits (of 10) from wire b13.$verific$n1576$120.
Removed top 1 bits (of 3) from wire b13.$verific$n243$70.
Removed top 1 bits (of 3) from wire b13.$verific$n442$80.
Removed top 1 bits (of 2) from wire b13.$verific$n588$86.
Removed top 1 bits (of 2) from wire b13.$verific$n898$95.
Removed top 1 bits (of 4) from wire b13.conta_tmp.
Removed top 3 bits (of 10) from wire b13.tx_conta.

yosys> peepopt

3.15. Executing PEEPOPT pass (run peephole optimizers).

yosys> pmuxtree

3.16. Executing PMUXTREE pass.

yosys> opt_clean

3.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b13..
Removed 0 unused cells and 9 unused wires.
<suppressed ~1 debug messages>

yosys> alumacc

3.18. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module b13:
  creating $macc model for $verific$add_188$b13.vhd:291$226 ($add).
  creating $macc model for $verific$add_23$b13.vhd:107$133 ($add).
  creating $alu model for $macc $verific$add_23$b13.vhd:107$133.
  creating $alu model for $macc $verific$add_188$b13.vhd:291$226.
  creating $alu model for $verific$LessThan_162$b13.vhd:255$214 ($lt): new $alu
  creating $alu cell for $verific$LessThan_162$b13.vhd:255$214: $auto$alumacc.cc:485:replace_alu$272
  creating $alu cell for $verific$add_188$b13.vhd:291$226: $auto$alumacc.cc:485:replace_alu$277
  creating $alu cell for $verific$add_23$b13.vhd:107$133: $auto$alumacc.cc:485:replace_alu$280
  created 3 $alu and 0 $macc cells.

yosys> opt

3.19. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.
<suppressed ~3 debug messages>

yosys> opt_merge -nomux

3.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b13'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b13..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~25 debug messages>

yosys> opt_reduce

3.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b13.
Performed a total of 0 changes.

yosys> opt_merge

3.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b13'.
Removed a total of 0 cells.

yosys> opt_dff

3.19.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.19.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b13..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.19.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.

3.19.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.19.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b13..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~25 debug messages>

yosys> opt_reduce

3.19.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b13.
Performed a total of 0 changes.

yosys> opt_merge

3.19.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b13'.
Removed a total of 0 cells.

yosys> opt_dff

3.19.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.19.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b13..

yosys> opt_expr

3.19.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.

3.19.16. Finished OPT passes. (There is nothing left to do.)

yosys> stat

3.20. Printing statistics.

=== b13 ===

   Number of wires:                101
   Number of wire bits:            215
   Number of public wires:          29
   Number of public wire bits:      61
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 90
     $adff                          20
     $adffe                          4
     $alu                            3
     $bmux                          19
     $eq                             1
     $mux                           36
     $not                            3
     $or                             1
     $reduce_and                     2
     $reduce_bool                    1


yosys> memory -nomap

3.21. Executing MEMORY pass.

yosys> opt_mem

3.21.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

yosys> opt_mem_priority

3.21.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

yosys> opt_mem_feedback

3.21.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

yosys> memory_dff

3.21.4. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

yosys> opt_clean

3.21.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b13..

yosys> memory_share

3.21.6. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

yosys> opt_mem_widen

3.21.7. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

yosys> opt_clean

3.21.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b13..

yosys> memory_collect

3.21.9. Executing MEMORY_COLLECT pass (generating $mem cells).

yosys> stat

3.22. Printing statistics.

=== b13 ===

   Number of wires:                101
   Number of wire bits:            215
   Number of public wires:          29
   Number of public wire bits:      61
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 90
     $adff                          20
     $adffe                          4
     $alu                            3
     $bmux                          19
     $eq                             1
     $mux                           36
     $not                            3
     $or                             1
     $reduce_and                     2
     $reduce_bool                    1


yosys> opt_clean

3.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b13..

yosys> stat

3.24. Printing statistics.

=== b13 ===

   Number of wires:                101
   Number of wire bits:            215
   Number of public wires:          29
   Number of public wire bits:      61
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 90
     $adff                          20
     $adffe                          4
     $alu                            3
     $bmux                          19
     $eq                             1
     $mux                           36
     $not                            3
     $or                             1
     $reduce_and                     2
     $reduce_bool                    1


yosys> techmap -map +/techmap.v -map +/rapidsilicon/genesis/arith_map.v

3.25. Executing TECHMAP pass (map to technology primitives).

3.25.1. Executing Verilog-2005 frontend: /home/users/meri/Documents/workspace/de-issue/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/meri/Documents/workspace/de-issue/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.25.2. Executing Verilog-2005 frontend: /home/users/meri/Documents/workspace/de-issue/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/arith_map.v
Parsing Verilog input from `/home/users/meri/Documents/workspace/de-issue/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_rs_alu'.
Successfully finished Verilog frontend.

3.25.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $not.
Using template $paramod$dbcdc7e8aa1a4080cea2deda6fdc8772064f4d90\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $bmux.
Using extmapper simplemap for cells of type $adff.
Using extmapper simplemap for cells of type $adffe.
Using extmapper simplemap for cells of type $or.
Using template $paramod$103b4016182df467cceab67bcf3e18e6361ec0fd\_90_alu for cells of type $alu.
Using template $paramod$bfceb922395790c0ce92e9f9b5b428d4fc72cc30\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $and.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000111 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000100 for cells of type $lcu.
No more expansions possible.
<suppressed ~703 debug messages>

yosys> stat

3.26. Printing statistics.

=== b13 ===

   Number of wires:                267
   Number of wire bits:           4095
   Number of public wires:          29
   Number of public wire bits:      61
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                485
     $_AND_                         48
     $_DFFE_PP0P_                   20
     $_DFF_PP0_                     28
     $_MUX_                        296
     $_NOT_                         22
     $_OR_                          28
     $_XOR_                         43


yosys> opt

3.27. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.27.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.
<suppressed ~206 debug messages>

yosys> opt_merge -nomux

3.27.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b13'.
<suppressed ~87 debug messages>
Removed a total of 29 cells.

yosys> opt_muxtree

3.27.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b13..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.27.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b13.
Performed a total of 0 changes.

yosys> opt_merge

3.27.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b13'.
Removed a total of 0 cells.

yosys> opt_dff

3.27.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.27.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b13..
Removed 16 unused cells and 140 unused wires.
<suppressed ~17 debug messages>

yosys> opt_expr

3.27.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.
<suppressed ~1 debug messages>

3.27.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.27.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b13..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.27.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b13.
Performed a total of 0 changes.

yosys> opt_merge

3.27.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b13'.
Removed a total of 0 cells.

yosys> opt_dff

3.27.13. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $auto$ff.cc:262:slice$656 ($_DFF_PP0_) from module b13 (D = $verific$n264$73 [2], Q = \conta_tmp [2]).
Adding EN signal on $auto$ff.cc:262:slice$655 ($_DFF_PP0_) from module b13 (D = $verific$n264$73 [1], Q = \conta_tmp [1]).
Adding EN signal on $auto$ff.cc:262:slice$654 ($_DFF_PP0_) from module b13 (D = $verific$n264$73 [0], Q = \conta_tmp [0]).
Adding EN signal on $auto$ff.cc:262:slice$637 ($_DFF_PP0_) from module b13 (D = $verific$n264$73 [2], Q = \canale [2]).
Adding EN signal on $auto$ff.cc:262:slice$636 ($_DFF_PP0_) from module b13 (D = $verific$n264$73 [1], Q = \canale [1]).
Adding EN signal on $auto$ff.cc:262:slice$635 ($_DFF_PP0_) from module b13 (D = $verific$n264$73 [0], Q = \canale [0]).
Adding EN signal on $auto$ff.cc:262:slice$632 ($_DFF_PP0_) from module b13 (D = $auto$simplemap.cc:309:simplemap_bmux$620 [1], Q = \itfc_state [1]).
Adding EN signal on $auto$ff.cc:262:slice$631 ($_DFF_PP0_) from module b13 (D = $auto$simplemap.cc:309:simplemap_bmux$620 [0], Q = \itfc_state [0]).
Adding EN signal on $auto$ff.cc:262:slice$630 ($_DFF_PP0_) from module b13 (D = $auto$simplemap.cc:309:simplemap_bmux$613, Q = \confirm).
Adding EN signal on $auto$ff.cc:262:slice$629 ($_DFF_PP0_) from module b13 (D = $auto$simplemap.cc:309:simplemap_bmux$626, Q = \send).
Adding EN signal on $auto$ff.cc:262:slice$628 ($_DFF_PP0_) from module b13 (D = $auto$simplemap.cc:309:simplemap_bmux$605 [0], Q = \load).
Adding EN signal on $auto$ff.cc:262:slice$599 ($_DFF_PP0_) from module b13 (D = $auto$simplemap.cc:309:simplemap_bmux$582, Q = \shot).
Adding EN signal on $auto$ff.cc:262:slice$598 ($_DFF_PP0_) from module b13 (D = $verific$n732$20, Q = \mpx).
Adding EN signal on $auto$ff.cc:262:slice$597 ($_DFF_PP0_) from module b13 (D = 1'1, Q = \add_mpx2).
Adding EN signal on $auto$ff.cc:262:slice$596 ($_DFF_PP0_) from module b13 (D = $auto$simplemap.cc:309:simplemap_bmux$569, Q = \rdy).
Adding EN signal on $auto$ff.cc:262:slice$552 ($_DFF_PP0_) from module b13 (D = $auto$simplemap.cc:309:simplemap_bmux$421, Q = \mux_en).
Adding EN signal on $auto$ff.cc:262:slice$551 ($_DFF_PP0_) from module b13 (D = $auto$simplemap.cc:309:simplemap_bmux$462 [1], Q = \load_dato).
Adding EN signal on $auto$ff.cc:262:slice$550 ($_DFF_PP0_) from module b13 (D = $auto$simplemap.cc:309:simplemap_bmux$537, Q = \send_data).
Adding EN signal on $auto$ff.cc:262:slice$542 ($_DFF_PP0_) from module b13 (D = $auto$simplemap.cc:309:simplemap_bmux$455, Q = \soc).

yosys> opt_clean

3.27.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b13..
Removed 27 unused cells and 65 unused wires.
<suppressed ~28 debug messages>

yosys> opt_expr

3.27.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.
<suppressed ~85 debug messages>

3.27.16. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.27.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b13..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.27.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b13.
Performed a total of 0 changes.

yosys> opt_merge

3.27.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b13'.
<suppressed ~237 debug messages>
Removed a total of 79 cells.

yosys> opt_dff

3.27.20. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.27.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b13..
Removed 0 unused cells and 101 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.27.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.

3.27.23. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.27.24. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b13..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.27.25. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b13.
Performed a total of 0 changes.

yosys> opt_merge

3.27.26. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b13'.
Removed a total of 0 cells.

yosys> opt_dff

3.27.27. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.27.28. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b13..

yosys> opt_expr

3.27.29. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.

3.27.30. Finished OPT passes. (There is nothing left to do.)

yosys> opt -fast -full

3.28. Executing OPT pass (performing simple optimizations).

yosys> opt_expr -full

3.28.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.
<suppressed ~59 debug messages>

yosys> opt_merge

3.28.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b13'.
<suppressed ~30 debug messages>
Removed a total of 10 cells.

yosys> opt_dff

3.28.3. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.28.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b13..
Removed 0 unused cells and 31 unused wires.
<suppressed ~1 debug messages>

3.28.5. Finished fast OPT passes.

yosys> memory_map

3.29. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

yosys> opt -full

3.30. Executing OPT pass (performing simple optimizations).

yosys> opt_expr -full

3.30.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.
<suppressed ~1 debug messages>

yosys> opt_merge -nomux

3.30.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b13'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.30.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b13..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce -full

3.30.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b13.
Performed a total of 0 changes.

yosys> opt_merge

3.30.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b13'.
Removed a total of 0 cells.

yosys> opt_share

3.30.6. Executing OPT_SHARE pass.

yosys> opt_dff

3.30.7. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.30.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b13..

yosys> opt_expr -full

3.30.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.

3.30.10. Finished OPT passes. (There is nothing left to do.)

yosys> techmap -map +/techmap.v

3.31. Executing TECHMAP pass (map to technology primitives).

3.31.1. Executing Verilog-2005 frontend: /home/users/meri/Documents/workspace/de-issue/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/meri/Documents/workspace/de-issue/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.31.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~71 debug messages>

yosys> opt -sat

3.32. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.32.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.

yosys> opt_merge -nomux

3.32.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b13'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.32.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b13..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.32.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b13.
Performed a total of 0 changes.

yosys> opt_merge

3.32.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b13'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.32.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.32.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b13..

yosys> opt_expr

3.32.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.

3.32.9. Finished OPT passes. (There is nothing left to do.)

yosys> abc -dff

3.33. Executing ABC pass (technology mapping using ABC).

3.33.1. Summary of detected clock domains:
  13 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$252, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$auto$opt_dff.cc:194:make_patterns_logic$258, arst=\reset, srst={ }
  26 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$255, arst=\reset, srst={ }
  43 cells in clk=\clock, en=\send_en, arst=\reset, srst={ }
  67 cells in clk=\clock, en={ }, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$1498, arst=\reset, srst={ }
  7 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$1446, arst=\reset, srst={ }
  3 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$1382, arst=\reset, srst={ }
  8 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$1342, arst=\reset, srst={ }
  9 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$1276, arst=\reset, srst={ }
  2 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$1212, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$1201, arst=\reset, srst={ }
  7 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$1192, arst=\reset, srst={ }
  3 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$1157, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$1141, arst=\reset, srst={ }
  6 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$1116, arst=\reset, srst={ }
  8 cells in clk=\clock, en=$auto$opt_dff.cc:194:make_patterns_logic$1060, arst=\reset, srst={ }
  15 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$1008, arst=\reset, srst={ }

3.33.2. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$252, asynchronously reset by \reset
Extracted 13 gates and 24 wires to a netlist network with 11 inputs and 5 outputs.

3.33.2.1. Executing ABC.

3.33.3. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:194:make_patterns_logic$258, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.33.3.1. Executing ABC.

3.33.4. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$255, asynchronously reset by \reset
Extracted 26 gates and 34 wires to a netlist network with 6 inputs and 4 outputs.

3.33.4.1. Executing ABC.

3.33.5. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by \send_en, asynchronously reset by \reset
Extracted 43 gates and 43 wires to a netlist network with 0 inputs and 1 outputs.

3.33.5.1. Executing ABC.

3.33.6. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, asynchronously reset by \reset
Extracted 67 gates and 83 wires to a netlist network with 14 inputs and 32 outputs.

3.33.6.1. Executing ABC.

3.33.7. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$1498, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 2 outputs.

3.33.7.1. Executing ABC.

3.33.8. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$1446, asynchronously reset by \reset
Extracted 7 gates and 15 wires to a netlist network with 8 inputs and 2 outputs.

3.33.8.1. Executing ABC.

3.33.9. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$1382, asynchronously reset by \reset
Extracted 3 gates and 7 wires to a netlist network with 4 inputs and 2 outputs.

3.33.9.1. Executing ABC.

3.33.10. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$1342, asynchronously reset by \reset
Extracted 8 gates and 15 wires to a netlist network with 7 inputs and 2 outputs.

3.33.10.1. Executing ABC.

3.33.11. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$1276, asynchronously reset by \reset
Extracted 9 gates and 17 wires to a netlist network with 8 inputs and 3 outputs.

3.33.11.1. Executing ABC.

3.33.12. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$1212, asynchronously reset by \reset
Extracted 2 gates and 5 wires to a netlist network with 2 inputs and 2 outputs.

3.33.12.1. Executing ABC.

3.33.13. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$1755$auto$opt_dff.cc:219:make_patterns_logic$1201, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 2 inputs and 3 outputs.

3.33.13.1. Executing ABC.

3.33.14. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$1192, asynchronously reset by \reset
Extracted 7 gates and 13 wires to a netlist network with 5 inputs and 4 outputs.

3.33.14.1. Executing ABC.

3.33.15. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$1157, asynchronously reset by \reset
Extracted 3 gates and 6 wires to a netlist network with 3 inputs and 3 outputs.

3.33.15.1. Executing ABC.

3.33.16. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$1141, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 3 outputs.

3.33.16.1. Executing ABC.

3.33.17. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$1116, asynchronously reset by \reset
Extracted 6 gates and 12 wires to a netlist network with 6 inputs and 5 outputs.

3.33.17.1. Executing ABC.

3.33.18. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:194:make_patterns_logic$1060, asynchronously reset by \reset
Extracted 8 gates and 12 wires to a netlist network with 4 inputs and 6 outputs.

3.33.18.1. Executing ABC.

3.33.19. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$1755$auto$opt_dff.cc:219:make_patterns_logic$1008, asynchronously reset by \reset
Extracted 15 gates and 15 wires to a netlist network with 0 inputs and 3 outputs.

3.33.19.1. Executing ABC.

yosys> abc -dff

3.34. Executing ABC pass (technology mapping using ABC).

3.34.1. Summary of detected clock domains:
  15 cells in clk=\clock, en=$abc$1907$auto$opt_dff.cc:194:make_patterns_logic$1060, arst=\reset, srst={ }
  9 cells in clk=\clock, en=$abc$1898$auto$opt_dff.cc:219:make_patterns_logic$1116, arst=\reset, srst={ }
  6 cells in clk=\clock, en=$abc$1891$auto$opt_dff.cc:219:make_patterns_logic$1141, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$1885$auto$opt_dff.cc:219:make_patterns_logic$1157, arst=\reset, srst={ }
  6 cells in clk=\clock, en=$abc$1876$auto$opt_dff.cc:219:make_patterns_logic$1192, arst=\reset, srst={ }
  1 cells in clk=\clock, en=$abc$1692$auto$opt_dff.cc:194:make_patterns_logic$258, arst=\reset, srst={ }
  9 cells in clk=\clock, en=$abc$1828$auto$opt_dff.cc:219:make_patterns_logic$1446, arst=\reset, srst={ }
  6 cells in clk=\clock, en=$abc$1820$auto$opt_dff.cc:219:make_patterns_logic$1498, arst=\reset, srst={ }
  25 cells in clk=\clock, en=$abc$1698$auto$opt_dff.cc:219:make_patterns_logic$255, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$1838$auto$opt_dff.cc:219:make_patterns_logic$1382, arst=\reset, srst={ }
  7 cells in clk=\clock, en=$abc$1844$auto$opt_dff.cc:219:make_patterns_logic$1342, arst=\reset, srst={ }
  10 cells in clk=\clock, en=$abc$1854$auto$opt_dff.cc:219:make_patterns_logic$1276, arst=\reset, srst={ }
  2 cells in clk=\clock, en=$abc$1865$auto$opt_dff.cc:219:make_patterns_logic$1212, arst=\reset, srst={ }
  29 cells in clk=\clock, en=$abc$1755$lo5, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$1755$auto$opt_dff.cc:219:make_patterns_logic$1201, arst=\reset, srst={ }
  12 cells in clk=\clock, en=$abc$1670$auto$opt_dff.cc:219:make_patterns_logic$252, arst=\reset, srst={ }
  49 cells in clk=\clock, en={ }, arst=\reset, srst={ }
  7 cells in clk=\clock, en=$abc$1755$auto$opt_dff.cc:219:make_patterns_logic$1008, arst=\reset, srst={ }

3.34.2. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$1907$auto$opt_dff.cc:194:make_patterns_logic$1060, asynchronously reset by \reset
Extracted 15 gates and 17 wires to a netlist network with 2 inputs and 11 outputs.

3.34.2.1. Executing ABC.

3.34.3. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$1898$auto$opt_dff.cc:219:make_patterns_logic$1116, asynchronously reset by \reset
Extracted 9 gates and 18 wires to a netlist network with 9 inputs and 7 outputs.

3.34.3.1. Executing ABC.

3.34.4. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$1891$auto$opt_dff.cc:219:make_patterns_logic$1141, asynchronously reset by \reset
Extracted 6 gates and 13 wires to a netlist network with 7 inputs and 4 outputs.

3.34.4.1. Executing ABC.

3.34.5. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$1885$auto$opt_dff.cc:219:make_patterns_logic$1157, asynchronously reset by \reset
Extracted 4 gates and 9 wires to a netlist network with 5 inputs and 4 outputs.

3.34.5.1. Executing ABC.

3.34.6. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$1876$auto$opt_dff.cc:219:make_patterns_logic$1192, asynchronously reset by \reset
Extracted 6 gates and 10 wires to a netlist network with 4 inputs and 4 outputs.

3.34.6.1. Executing ABC.

3.34.7. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$1957$abc$1692$auto$opt_dff.cc:194:make_patterns_logic$258, asynchronously reset by \reset
Extracted 1 gates and 2 wires to a netlist network with 1 inputs and 1 outputs.

3.34.7.1. Executing ABC.

3.34.8. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$1828$auto$opt_dff.cc:219:make_patterns_logic$1446, asynchronously reset by \reset
Extracted 9 gates and 18 wires to a netlist network with 9 inputs and 3 outputs.

3.34.8.1. Executing ABC.

3.34.9. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$1820$auto$opt_dff.cc:219:make_patterns_logic$1498, asynchronously reset by \reset
Extracted 6 gates and 11 wires to a netlist network with 5 inputs and 3 outputs.

3.34.9.1. Executing ABC.

3.34.10. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$1698$auto$opt_dff.cc:219:make_patterns_logic$255, asynchronously reset by \reset
Extracted 25 gates and 31 wires to a netlist network with 6 inputs and 4 outputs.

3.34.10.1. Executing ABC.

3.34.11. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$1838$auto$opt_dff.cc:219:make_patterns_logic$1382, asynchronously reset by \reset
Extracted 4 gates and 8 wires to a netlist network with 4 inputs and 3 outputs.

3.34.11.1. Executing ABC.

3.34.12. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$1844$auto$opt_dff.cc:219:make_patterns_logic$1342, asynchronously reset by \reset
Extracted 7 gates and 14 wires to a netlist network with 7 inputs and 2 outputs.

3.34.12.1. Executing ABC.

3.34.13. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$1854$auto$opt_dff.cc:219:make_patterns_logic$1276, asynchronously reset by \reset
Extracted 10 gates and 18 wires to a netlist network with 8 inputs and 3 outputs.

3.34.13.1. Executing ABC.

3.34.14. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$1865$auto$opt_dff.cc:219:make_patterns_logic$1212, asynchronously reset by \reset
Extracted 2 gates and 5 wires to a netlist network with 2 inputs and 2 outputs.

3.34.14.1. Executing ABC.

3.34.15. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$1755$lo5, asynchronously reset by \reset
Extracted 29 gates and 29 wires to a netlist network with 0 inputs and 1 outputs.

3.34.15.1. Executing ABC.

3.34.16. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$1755$auto$opt_dff.cc:219:make_patterns_logic$1201, asynchronously reset by \reset
Extracted 5 gates and 8 wires to a netlist network with 3 inputs and 4 outputs.

3.34.16.1. Executing ABC.

3.34.17. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$1966$abc$1670$auto$opt_dff.cc:219:make_patterns_logic$252, asynchronously reset by \reset
Extracted 12 gates and 21 wires to a netlist network with 9 inputs and 4 outputs.

3.34.17.1. Executing ABC.

3.34.18. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, asynchronously reset by \reset
Extracted 49 gates and 61 wires to a netlist network with 12 inputs and 28 outputs.

3.34.18.1. Executing ABC.

3.34.19. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$2127$abc$1755$auto$opt_dff.cc:219:make_patterns_logic$1008, asynchronously reset by \reset
Extracted 7 gates and 7 wires to a netlist network with 0 inputs and 3 outputs.

3.34.19.1. Executing ABC.

yosys> abc -dff

3.35. Executing ABC pass (technology mapping using ABC).

3.35.1. Summary of detected clock domains:
  8 cells in clk=\clock, en=$abc$1946$abc$1898$auto$opt_dff.cc:219:make_patterns_logic$1116, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$1957$abc$1891$auto$opt_dff.cc:219:make_patterns_logic$1141, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$1966$abc$1885$auto$opt_dff.cc:219:make_patterns_logic$1157, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$1973$abc$1876$auto$opt_dff.cc:219:make_patterns_logic$1192, arst=\reset, srst={ }
  1 cells in clk=\clock, en=$abc$1957$abc$1692$auto$opt_dff.cc:194:make_patterns_logic$258, arst=\reset, srst={ }
  9 cells in clk=\clock, en=$abc$1986$abc$1828$auto$opt_dff.cc:219:make_patterns_logic$1446, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$1997$abc$1820$auto$opt_dff.cc:219:make_patterns_logic$1498, arst=\reset, srst={ }
  3 cells in clk=\clock, en=$abc$2036$abc$1838$auto$opt_dff.cc:219:make_patterns_logic$1382, arst=\reset, srst={ }
  7 cells in clk=\clock, en=$abc$2043$abc$1844$auto$opt_dff.cc:219:make_patterns_logic$1342, arst=\reset, srst={ }
  10 cells in clk=\clock, en=$abc$2053$abc$1854$auto$opt_dff.cc:219:make_patterns_logic$1276, arst=\reset, srst={ }
  13 cells in clk=\clock, en=$abc$1929$abc$1907$auto$opt_dff.cc:194:make_patterns_logic$1060, arst=\reset, srst={ }
  2 cells in clk=\clock, en=$abc$2064$abc$1865$auto$opt_dff.cc:219:make_patterns_logic$1212, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$2099$abc$1755$auto$opt_dff.cc:219:make_patterns_logic$1201, arst=\reset, srst={ }
  27 cells in clk=\clock, en=$abc$2006$abc$1698$auto$opt_dff.cc:219:make_patterns_logic$255, arst=\reset, srst={ }
  29 cells in clk=\clock, en=$abc$2127$lo1, arst=\reset, srst={ }
  12 cells in clk=\clock, en=$abc$1966$abc$1670$auto$opt_dff.cc:219:make_patterns_logic$252, arst=\reset, srst={ }
  64 cells in clk=\clock, en={ }, arst=\reset, srst={ }
  7 cells in clk=\clock, en=$abc$2127$abc$1755$auto$opt_dff.cc:219:make_patterns_logic$1008, arst=\reset, srst={ }

3.35.2. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$1946$abc$1898$auto$opt_dff.cc:219:make_patterns_logic$1116, asynchronously reset by \reset
Extracted 8 gates and 16 wires to a netlist network with 8 inputs and 7 outputs.

3.35.2.1. Executing ABC.

3.35.3. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$1957$abc$1891$auto$opt_dff.cc:219:make_patterns_logic$1141, asynchronously reset by \reset
Extracted 4 gates and 8 wires to a netlist network with 4 inputs and 4 outputs.

3.35.3.1. Executing ABC.

3.35.4. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$1966$abc$1885$auto$opt_dff.cc:219:make_patterns_logic$1157, asynchronously reset by \reset
Extracted 4 gates and 8 wires to a netlist network with 4 inputs and 3 outputs.

3.35.4.1. Executing ABC.

3.35.5. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$1973$abc$1876$auto$opt_dff.cc:219:make_patterns_logic$1192, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.35.5.1. Executing ABC.

3.35.6. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$2207$abc$1957$abc$1692$auto$opt_dff.cc:194:make_patterns_logic$258, asynchronously reset by \reset
Extracted 1 gates and 2 wires to a netlist network with 1 inputs and 1 outputs.

3.35.6.1. Executing ABC.

3.35.7. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$1986$abc$1828$auto$opt_dff.cc:219:make_patterns_logic$1446, asynchronously reset by \reset
Extracted 9 gates and 18 wires to a netlist network with 9 inputs and 3 outputs.

3.35.7.1. Executing ABC.

3.35.8. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$1997$abc$1820$auto$opt_dff.cc:219:make_patterns_logic$1498, asynchronously reset by \reset
Extracted 4 gates and 9 wires to a netlist network with 5 inputs and 2 outputs.

3.35.8.1. Executing ABC.

3.35.9. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$2036$abc$1838$auto$opt_dff.cc:219:make_patterns_logic$1382, asynchronously reset by \reset
Extracted 3 gates and 7 wires to a netlist network with 4 inputs and 2 outputs.

3.35.9.1. Executing ABC.

3.35.10. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$2043$abc$1844$auto$opt_dff.cc:219:make_patterns_logic$1342, asynchronously reset by \reset
Extracted 7 gates and 14 wires to a netlist network with 7 inputs and 2 outputs.

3.35.10.1. Executing ABC.

3.35.11. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$2053$abc$1854$auto$opt_dff.cc:219:make_patterns_logic$1276, asynchronously reset by \reset
Extracted 10 gates and 18 wires to a netlist network with 8 inputs and 3 outputs.

3.35.11.1. Executing ABC.

3.35.12. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$1929$abc$1907$auto$opt_dff.cc:194:make_patterns_logic$1060, asynchronously reset by \reset
Extracted 13 gates and 15 wires to a netlist network with 2 inputs and 10 outputs.

3.35.12.1. Executing ABC.

3.35.13. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$2064$abc$1865$auto$opt_dff.cc:219:make_patterns_logic$1212, asynchronously reset by \reset
Extracted 2 gates and 5 wires to a netlist network with 2 inputs and 2 outputs.

3.35.13.1. Executing ABC.

3.35.14. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$2099$abc$1755$auto$opt_dff.cc:219:make_patterns_logic$1201, asynchronously reset by \reset
Extracted 4 gates and 5 wires to a netlist network with 1 inputs and 3 outputs.

3.35.14.1. Executing ABC.

3.35.15. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$2006$abc$1698$auto$opt_dff.cc:219:make_patterns_logic$255, asynchronously reset by \reset
Extracted 27 gates and 31 wires to a netlist network with 4 inputs and 3 outputs.

3.35.15.1. Executing ABC.

3.35.16. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$2127$lo1, asynchronously reset by \reset
Extracted 29 gates and 29 wires to a netlist network with 0 inputs and 1 outputs.

3.35.16.1. Executing ABC.

3.35.17. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$2214$abc$1966$abc$1670$auto$opt_dff.cc:219:make_patterns_logic$252, asynchronously reset by \reset
Extracted 12 gates and 21 wires to a netlist network with 9 inputs and 4 outputs.

3.35.17.1. Executing ABC.

3.35.18. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, asynchronously reset by \reset
Extracted 64 gates and 80 wires to a netlist network with 16 inputs and 34 outputs.

3.35.18.1. Executing ABC.

3.35.19. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$2380$abc$2127$abc$1755$auto$opt_dff.cc:219:make_patterns_logic$1008, asynchronously reset by \reset
Extracted 7 gates and 7 wires to a netlist network with 0 inputs and 3 outputs.

3.35.19.1. Executing ABC.

yosys> abc -dff

3.36. Executing ABC pass (technology mapping using ABC).

3.36.1. Summary of detected clock domains:
  9 cells in clk=\clock, en=$abc$2196$abc$1946$abc$1898$auto$opt_dff.cc:219:make_patterns_logic$1116, arst=\reset, srst={ }
  6 cells in clk=\clock, en=$abc$2207$abc$1957$abc$1891$auto$opt_dff.cc:219:make_patterns_logic$1141, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$2214$abc$1966$abc$1885$auto$opt_dff.cc:219:make_patterns_logic$1157, arst=\reset, srst={ }
  6 cells in clk=\clock, en=$abc$2220$abc$1973$abc$1876$auto$opt_dff.cc:219:make_patterns_logic$1192, arst=\reset, srst={ }
  1 cells in clk=\clock, en=$abc$2207$abc$1957$abc$1692$auto$opt_dff.cc:194:make_patterns_logic$258, arst=\reset, srst={ }
  9 cells in clk=\clock, en=$abc$2231$abc$1986$abc$1828$auto$opt_dff.cc:219:make_patterns_logic$1446, arst=\reset, srst={ }
  6 cells in clk=\clock, en=$abc$2242$abc$1997$abc$1820$auto$opt_dff.cc:219:make_patterns_logic$1498, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$2249$abc$2036$abc$1838$auto$opt_dff.cc:219:make_patterns_logic$1382, arst=\reset, srst={ }
  8 cells in clk=\clock, en=$abc$2255$abc$2043$abc$1844$auto$opt_dff.cc:219:make_patterns_logic$1342, arst=\reset, srst={ }
  8 cells in clk=\clock, en=$abc$2265$abc$2053$abc$1854$auto$opt_dff.cc:219:make_patterns_logic$1276, arst=\reset, srst={ }
  11 cells in clk=\clock, en=$abc$2276$abc$1929$abc$1907$auto$opt_dff.cc:194:make_patterns_logic$1060, arst=\reset, srst={ }
  2 cells in clk=\clock, en=$abc$2292$abc$2064$abc$1865$auto$opt_dff.cc:219:make_patterns_logic$1212, arst=\reset, srst={ }
  13 cells in clk=\clock, en=$abc$2214$abc$1966$abc$1670$auto$opt_dff.cc:219:make_patterns_logic$252, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$2380$abc$2099$abc$1755$auto$opt_dff.cc:219:make_patterns_logic$1201, arst=\reset, srst={ }
  25 cells in clk=\clock, en=$abc$2380$abc$2006$abc$1698$auto$opt_dff.cc:219:make_patterns_logic$255, arst=\reset, srst={ }
  29 cells in clk=\clock, en=$abc$2380$lo5, arst=\reset, srst={ }
  55 cells in clk=\clock, en={ }, arst=\reset, srst={ }
  7 cells in clk=\clock, en=$abc$2380$abc$2127$abc$1755$auto$opt_dff.cc:219:make_patterns_logic$1008, arst=\reset, srst={ }

3.36.2. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$2196$abc$1946$abc$1898$auto$opt_dff.cc:219:make_patterns_logic$1116, asynchronously reset by \reset
Extracted 9 gates and 18 wires to a netlist network with 9 inputs and 7 outputs.

3.36.2.1. Executing ABC.

3.36.3. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$2207$abc$1957$abc$1891$auto$opt_dff.cc:219:make_patterns_logic$1141, asynchronously reset by \reset
Extracted 6 gates and 12 wires to a netlist network with 6 inputs and 4 outputs.

3.36.3.1. Executing ABC.

3.36.4. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$2214$abc$1966$abc$1885$auto$opt_dff.cc:219:make_patterns_logic$1157, asynchronously reset by \reset
Extracted 4 gates and 8 wires to a netlist network with 4 inputs and 3 outputs.

3.36.4.1. Executing ABC.

3.36.5. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$2220$abc$1973$abc$1876$auto$opt_dff.cc:219:make_patterns_logic$1192, asynchronously reset by \reset
Extracted 6 gates and 13 wires to a netlist network with 7 inputs and 3 outputs.

3.36.5.1. Executing ABC.

3.36.6. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$2468$abc$2207$abc$1957$abc$1692$auto$opt_dff.cc:194:make_patterns_logic$258, asynchronously reset by \reset
Extracted 1 gates and 2 wires to a netlist network with 1 inputs and 1 outputs.

3.36.6.1. Executing ABC.

3.36.7. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$2231$abc$1986$abc$1828$auto$opt_dff.cc:219:make_patterns_logic$1446, asynchronously reset by \reset
Extracted 9 gates and 18 wires to a netlist network with 9 inputs and 3 outputs.

3.36.7.1. Executing ABC.

3.36.8. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$2242$abc$1997$abc$1820$auto$opt_dff.cc:219:make_patterns_logic$1498, asynchronously reset by \reset
Extracted 6 gates and 11 wires to a netlist network with 5 inputs and 3 outputs.

3.36.8.1. Executing ABC.

3.36.9. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$2249$abc$2036$abc$1838$auto$opt_dff.cc:219:make_patterns_logic$1382, asynchronously reset by \reset
Extracted 4 gates and 8 wires to a netlist network with 4 inputs and 2 outputs.

3.36.9.1. Executing ABC.

3.36.10. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$2255$abc$2043$abc$1844$auto$opt_dff.cc:219:make_patterns_logic$1342, asynchronously reset by \reset
Extracted 8 gates and 15 wires to a netlist network with 7 inputs and 3 outputs.

3.36.10.1. Executing ABC.

3.36.11. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$2265$abc$2053$abc$1854$auto$opt_dff.cc:219:make_patterns_logic$1276, asynchronously reset by \reset
Extracted 8 gates and 16 wires to a netlist network with 8 inputs and 3 outputs.

3.36.11.1. Executing ABC.

3.36.12. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$2276$abc$1929$abc$1907$auto$opt_dff.cc:194:make_patterns_logic$1060, asynchronously reset by \reset
Extracted 11 gates and 13 wires to a netlist network with 2 inputs and 9 outputs.

3.36.12.1. Executing ABC.

3.36.13. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$2292$abc$2064$abc$1865$auto$opt_dff.cc:219:make_patterns_logic$1212, asynchronously reset by \reset
Extracted 2 gates and 5 wires to a netlist network with 2 inputs and 2 outputs.

3.36.13.1. Executing ABC.

3.36.14. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$2214$abc$1966$abc$1670$auto$opt_dff.cc:219:make_patterns_logic$252, asynchronously reset by \reset
Extracted 13 gates and 24 wires to a netlist network with 11 inputs and 5 outputs.

3.36.14.1. Executing ABC.

3.36.15. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$2380$abc$2099$abc$1755$auto$opt_dff.cc:219:make_patterns_logic$1201, asynchronously reset by \reset
Extracted 4 gates and 5 wires to a netlist network with 1 inputs and 3 outputs.

3.36.15.1. Executing ABC.

3.36.16. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$2380$abc$2006$abc$1698$auto$opt_dff.cc:219:make_patterns_logic$255, asynchronously reset by \reset
Extracted 25 gates and 31 wires to a netlist network with 6 inputs and 4 outputs.

3.36.16.1. Executing ABC.

3.36.17. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$2380$lo5, asynchronously reset by \reset
Extracted 29 gates and 29 wires to a netlist network with 0 inputs and 1 outputs.

3.36.17.1. Executing ABC.

3.36.18. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, asynchronously reset by \reset
Extracted 55 gates and 70 wires to a netlist network with 15 inputs and 34 outputs.

3.36.18.1. Executing ABC.

3.36.19. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$2643$abc$2380$abc$2127$abc$1755$auto$opt_dff.cc:219:make_patterns_logic$1008, asynchronously reset by \reset
Extracted 7 gates and 7 wires to a netlist network with 0 inputs and 3 outputs.

3.36.19.1. Executing ABC.

yosys> opt_ffinv

3.37. Executing OPT_FFINV pass (push inverters through FFs).
Discovering LUTs.
Pushed 0 inverters.

yosys> opt -sat

3.38. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.38.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.

yosys> opt_merge -nomux

3.38.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b13'.
<suppressed ~21 debug messages>
Removed a total of 7 cells.

yosys> opt_muxtree

3.38.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b13..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.38.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b13.
Performed a total of 0 changes.

yosys> opt_merge

3.38.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b13'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.38.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $abc$2643$auto$blifparse.cc:362:parse_blif$2646 ($_DFF_PP0_) from module b13 (D = $abc$2643$lo1, Q = $abc$2643$lo2).

yosys> opt_clean

3.38.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b13..
Removed 1 unused cells and 1309 unused wires.
<suppressed ~13 debug messages>

yosys> opt_expr

3.38.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.

3.38.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.38.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b13..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.38.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b13.
Performed a total of 0 changes.

yosys> opt_merge

3.38.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b13'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.38.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.38.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b13..

yosys> opt_expr

3.38.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.

3.38.16. Finished OPT passes. (There is nothing left to do.)

yosys> abc -script /tmp/yosys_Lf5rwJ/abc_tmp_1.scr

3.39. Executing ABC pass (technology mapping using ABC).

3.39.1. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Extracted 154 gates and 195 wires to a netlist network with 41 inputs and 47 outputs.

3.39.1.1. Executing ABC.
DE:   #PIs =  41  #Luts =    53  Max Lvl =   4  Avg Lvl =   1.15  [   0.21 sec. at Pass 0]
DE:   #PIs =  41  #Luts =    51  Max Lvl =   3  Avg Lvl =   1.06  [   0.88 sec. at Pass 1]
DE:   #PIs =  41  #Luts =    51  Max Lvl =   3  Avg Lvl =   1.06  [   0.25 sec. at Pass 2]
DE:   #PIs =  41  #Luts =    51  Max Lvl =   3  Avg Lvl =   1.06  [   0.88 sec. at Pass 3]
DE:   #PIs =  41  #Luts =    51  Max Lvl =   3  Avg Lvl =   1.06  [   0.52 sec. at Pass 4]
DE:   #PIs =  41  #Luts =    51  Max Lvl =   3  Avg Lvl =   1.06  [   0.80 sec. at Pass 5]
DE:   #PIs =  41  #Luts =    51  Max Lvl =   3  Avg Lvl =   1.06  [   4.30 sec. at Pass 6]
DE:   #PIs =  41  #Luts =    51  Max Lvl =   3  Avg Lvl =   1.06  [   0.72 sec. at Pass 7]

yosys> opt

3.40. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.40.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.

yosys> opt_merge -nomux

3.40.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b13'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.40.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b13..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.40.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b13.
Performed a total of 0 changes.

yosys> opt_merge

3.40.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b13'.
Removed a total of 0 cells.

yosys> opt_dff

3.40.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.40.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b13..
Removed 0 unused cells and 196 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.40.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.

3.40.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.40.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b13..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.40.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b13.
Performed a total of 0 changes.

yosys> opt_merge

3.40.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b13'.
Removed a total of 0 cells.

yosys> opt_dff

3.40.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.40.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b13..

yosys> opt_expr

3.40.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.

3.40.16. Finished OPT passes. (There is nothing left to do.)

yosys> opt_ffinv

3.41. Executing OPT_FFINV pass (push inverters through FFs).
Discovering LUTs.
Pushed 4 inverters.

yosys> stat

3.42. Printing statistics.

=== b13 ===

   Number of wires:                 99
   Number of wire bits:            117
   Number of public wires:          18
   Number of public wire bits:      36
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 93
     $_DFFE_PP0N_                    1
     $_DFFE_PP0P_                   32
     $_DFFE_PP1P_                    4
     $_DFF_PP0_                      8
     $lut                           48


yosys> shregmap -minlen 8 -maxlen 20

3.43. Executing SHREGMAP pass (map shift registers).
Converted 0 dff cells into 0 shift registers.

yosys> dfflegalize -cell $_DFF_?_ 0 -cell $_DFF_???_ 0 -cell $_DFFE_????_ 0 -cell $_DFFSR_???_ 0 -cell $_DFFSRE_????_ 0 -cell $_DLATCHSR_PPP_ 0

3.44. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

yosys> stat

3.45. Printing statistics.

=== b13 ===

   Number of wires:                 99
   Number of wire bits:            117
   Number of public wires:          18
   Number of public wire bits:      36
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 93
     $_DFFE_PP0N_                    1
     $_DFFE_PP0P_                   32
     $_DFFE_PP1P_                    4
     $_DFF_PP0_                      8
     $lut                           48


yosys> techmap -map +/techmap.v -map +/rapidsilicon/genesis/ffs_map.v

3.46. Executing TECHMAP pass (map to technology primitives).

3.46.1. Executing Verilog-2005 frontend: /home/users/meri/Documents/workspace/de-issue/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/meri/Documents/workspace/de-issue/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.46.2. Executing Verilog-2005 frontend: /home/users/meri/Documents/workspace/de-issue/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/ffs_map.v
Parsing Verilog input from `/home/users/meri/Documents/workspace/de-issue/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/ffs_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP0N_'.
Generating RTLIL representation for module `\$_DFFE_PN0P_'.
Generating RTLIL representation for module `\$_DFFE_PN0N_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP1N_'.
Generating RTLIL representation for module `\$_DFFE_PN1P_'.
Generating RTLIL representation for module `\$_DFFE_PN1N_'.
Generating RTLIL representation for module `\$_DFFSR_PPP_'.
Generating RTLIL representation for module `\$_DFFSR_PNP_'.
Generating RTLIL representation for module `\$_DFFSR_PNN_'.
Generating RTLIL representation for module `\$_DFFSR_PPN_'.
Generating RTLIL representation for module `\$_DFFSR_NPP_'.
Generating RTLIL representation for module `\$_DFFSR_NNP_'.
Generating RTLIL representation for module `\$_DFFSR_NNN_'.
Generating RTLIL representation for module `\$_DFFSR_NPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PNPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPNP_'.
Generating RTLIL representation for module `\$_DFFSRE_PNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PNPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PPNN_'.
Generating RTLIL representation for module `\$_DFFSRE_PNNN_'.
Generating RTLIL representation for module `\$_DLATCHSR_PPP_'.
Generating RTLIL representation for module `\$_DLATCHSR_NPP_'.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP0N_'.
Generating RTLIL representation for module `\$_DFFE_NN0P_'.
Generating RTLIL representation for module `\$_DFFE_NN0N_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_NP1N_'.
Generating RTLIL representation for module `\$_DFFE_NN1P_'.
Generating RTLIL representation for module `\$_DFFE_NN1N_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNPP_'.
Generating RTLIL representation for module `\$_DFFSRE_NPNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPN_'.
Generating RTLIL representation for module `\$_DFFSRE_NNPN_'.
Generating RTLIL representation for module `\$_DFFSRE_NPNN_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNN_'.
Generating RTLIL representation for module `\$__SHREG_DFF_P_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PN0_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NN0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFF_PN1_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_NN1_'.
Successfully finished Verilog frontend.

3.46.3. Continuing TECHMAP pass.
Using template \$_DFF_PP0_ for cells of type $_DFF_PP0_.
Using template \$_DFFE_PP0N_ for cells of type $_DFFE_PP0N_.
Using template \$_DFFE_PP0P_ for cells of type $_DFFE_PP0P_.
Using template \$_DFFE_PP1P_ for cells of type $_DFFE_PP1P_.
Using extmapper simplemap for cells of type $lut.
Using extmapper simplemap for cells of type $logic_not.
No more expansions possible.
<suppressed ~275 debug messages>

yosys> opt_expr -mux_undef

3.47. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.
<suppressed ~586 debug messages>

yosys> simplemap

3.48. Executing SIMPLEMAP pass (map simple cells to gate primitives).

yosys> opt_expr

3.49. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.

yosys> opt_merge

3.50. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b13'.
<suppressed ~345 debug messages>
Removed a total of 115 cells.

yosys> opt_dff -nodffe -nosdff

3.51. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.52. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b13..
Removed 0 unused cells and 343 unused wires.
<suppressed ~1 debug messages>

yosys> opt -nodffe -nosdff

3.53. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.53.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.
<suppressed ~17 debug messages>

yosys> opt_merge -nomux

3.53.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b13'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

yosys> opt_muxtree

3.53.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b13..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.53.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b13.
Performed a total of 0 changes.

yosys> opt_merge

3.53.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b13'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.53.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.53.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b13..
Removed 0 unused cells and 4 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.53.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.

3.53.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.53.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b13..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.53.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b13.
Performed a total of 0 changes.

yosys> opt_merge

3.53.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b13'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.53.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.53.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b13..

yosys> opt_expr

3.53.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.

3.53.16. Finished OPT passes. (There is nothing left to do.)

yosys> abc -script /tmp/yosys_Lf5rwJ/abc_tmp_2.scr

3.54. Executing ABC pass (technology mapping using ABC).

3.54.1. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Extracted 151 gates and 195 wires to a netlist network with 42 inputs and 44 outputs.

3.54.1.1. Executing ABC.
DE:   #PIs =  42  #Luts =    49  Max Lvl =   3  Avg Lvl =   1.18  [   0.29 sec. at Pass 0]
DE:   #PIs =  42  #Luts =    49  Max Lvl =   3  Avg Lvl =   1.18  [   0.78 sec. at Pass 1]
DE:   #PIs =  42  #Luts =    48  Max Lvl =   3  Avg Lvl =   1.14  [   0.37 sec. at Pass 2]
DE:   #PIs =  42  #Luts =    48  Max Lvl =   3  Avg Lvl =   1.14  [   0.63 sec. at Pass 3]
DE:   #PIs =  42  #Luts =    48  Max Lvl =   3  Avg Lvl =   1.14  [   0.55 sec. at Pass 4]
DE:   #PIs =  42  #Luts =    48  Max Lvl =   3  Avg Lvl =   1.14  [   0.95 sec. at Pass 5]
DE:   #PIs =  42  #Luts =    48  Max Lvl =   3  Avg Lvl =   1.14  [   3.06 sec. at Pass 6]
DE:   #PIs =  42  #Luts =    48  Max Lvl =   3  Avg Lvl =   1.14  [   0.89 sec. at Pass 7]

yosys> opt

3.55. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.55.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.

yosys> opt_merge -nomux

3.55.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b13'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.55.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b13..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.55.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b13.
Performed a total of 0 changes.

yosys> opt_merge

3.55.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b13'.
Removed a total of 0 cells.

yosys> opt_dff

3.55.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.55.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b13..
Removed 0 unused cells and 172 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.55.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.

3.55.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.55.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b13..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.55.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b13.
Performed a total of 0 changes.

yosys> opt_merge

3.55.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b13'.
Removed a total of 0 cells.

yosys> opt_dff

3.55.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.55.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b13..

yosys> opt_expr

3.55.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.

3.55.16. Finished OPT passes. (There is nothing left to do.)

yosys> hierarchy -check

3.56. Executing HIERARCHY pass (managing design hierarchy).

3.56.1. Analyzing design hierarchy..
Top module:  \b13

3.56.2. Analyzing design hierarchy..
Top module:  \b13
Removed 0 unused modules.

yosys> stat

3.57. Printing statistics.

=== b13 ===

   Number of wires:                 97
   Number of wire bits:            115
   Number of public wires:          18
   Number of public wire bits:      36
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 93
     $lut                           48
     dffsre                         45


yosys> opt_clean -purge

3.58. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b13..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

yosys> write_verilog -noattr -nohex synthesized.v

3.59. Executing Verilog backend.

yosys> bmuxmap

3.59.1. Executing BMUXMAP pass.

yosys> demuxmap

3.59.2. Executing DEMUXMAP pass.

yosys> clean_zerowidth
Dumping module `\b13'.

End of script. Logfile hash: fa3bb20f4f, CPU: user 1.90s system 0.22s, MEM: 21.90 MB peak
Yosys 0.16+65 (git sha1 7987105a9, gcc 9.1.0 -fPIC -Os)
Time spent: 98% 6x abc (120 sec), 0% 40x opt_expr (0 sec), ...
real 54.03
user 104.24
sys 18.39
