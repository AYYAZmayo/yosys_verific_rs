
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys-Verific 0.0.45
 Yosys 0.17+103 (git sha1 a1babadd5, gcc 9.1.0 -fPIC -Os)


-- Executing script file `yosys.ys' --
echo on

yosys> plugin -i synth-rs

yosys> read -verific

yosys> read -incdir .

yosys> verific -vlog-incdir .

1. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Apr22_SW_Release, released at Thu Apr 28 20:08:21 2022.

yosys> verilog_defaults -add -I.

yosys> read -vhdl b03.vhd

yosys> verific -vhdl b03.vhd

2. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Apr22_SW_Release, released at Thu Apr 28 20:08:21 2022.
VERIFIC-INFO [VHDL-1504] default VHDL library search path is now "/home/users/aram/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008"
VERIFIC-COMMENT [VHDL-1481] Analyzing VHDL file 'b03.vhd'
VERIFIC-COMMENT [VHDL-1493] Restoring VHDL unit 'std.standard' from file '/home/users/aram/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008/std/standard.vdb'
VERIFIC-INFO [VHDL-1012] b03.vhd:1: analyzing entity 'b03'
VERIFIC-INFO [VHDL-1010] b03.vhd:15: analyzing architecture 'behav'

yosys> synth_rs -top b03 -tech genesis -goal area -de -no_dsp -no_bram -verilog synthesized.v

3. Executing synth_rs pass: v0.4.56

yosys> read_verilog -lib -specify -nomem2reg +/rapidsilicon/common/cells_sim.v +/rapidsilicon/genesis/cells_sim.v

3.1. Executing Verilog-2005 frontend: /home/users/aram/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v
Parsing Verilog input from `/home/users/aram/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\inv'.
Generating RTLIL representation for module `\buff'.
Generating RTLIL representation for module `\logic_0'.
Generating RTLIL representation for module `\logic_1'.
Generating RTLIL representation for module `\gclkbuff'.
Successfully finished Verilog frontend.

3.2. Executing Verilog-2005 frontend: /home/users/aram/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/cells_sim.v
Parsing Verilog input from `/home/users/aram/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\dffsre'.
Generating RTLIL representation for module `\dffnsre'.
Generating RTLIL representation for module `\latchsre'.
Generating RTLIL representation for module `\latchnsre'.
Generating RTLIL representation for module `\io_scff'.
Generating RTLIL representation for module `\scff'.
Generating RTLIL representation for module `\sh_dff'.
Generating RTLIL representation for module `\adder_carry'.
Generating RTLIL representation for module `\sdffr'.
Generating RTLIL representation for module `\sdffs'.
Generating RTLIL representation for module `\TDP_BRAM18'.
Generating RTLIL representation for module `\TDP36K'.
Generating RTLIL representation for module `\RS_DSP1'.
Generating RTLIL representation for module `\RS_DSP2'.
Generating RTLIL representation for module `\RS_DSP2_MULT'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGIN_REGOUT'.
Generating RTLIL representation for module `\dsp_t1_sim'.
Generating RTLIL representation for module `\dsp_t1_20x18x64'.
Generating RTLIL representation for module `\dsp_t1_10x9x32'.
Successfully finished Verilog frontend.

yosys> hierarchy -check -top b03

3.3. Executing HIERARCHY pass (managing design hierarchy).
VERIFIC-INFO [VHDL-1067] b03.vhd:1: processing 'b03(BEHAV)'
Importing module b03.

3.3.1. Analyzing design hierarchy..
Top module:  \b03

3.3.2. Analyzing design hierarchy..
Top module:  \b03
Removed 0 unused modules.

yosys> proc

3.4. Executing PROC pass (convert processes to netlists).

yosys> proc_clean

3.4.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> proc_rmdead

3.4.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

yosys> proc_prune

3.4.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

yosys> proc_init

3.4.4. Executing PROC_INIT pass (extract init attributes).

yosys> proc_arst

3.4.5. Executing PROC_ARST pass (detect async resets in processes).

yosys> proc_rom

3.4.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

yosys> proc_mux

3.4.7. Executing PROC_MUX pass (convert decision trees to multiplexers).

yosys> proc_dlatch

3.4.8. Executing PROC_DLATCH pass (convert process syncs to latches).

yosys> proc_dff

3.4.9. Executing PROC_DFF pass (convert process syncs to FFs).

yosys> proc_memwr

3.4.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

yosys> proc_clean

3.4.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> opt_expr -keepdc

3.4.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module b03.
<suppressed ~17 debug messages>

yosys> flatten

3.5. Executing FLATTEN pass (flatten design).

yosys> tribuf -logic

3.6. Executing TRIBUF pass.

yosys> deminout

3.7. Executing DEMINOUT pass (demote inout ports to input or output).

yosys> opt_expr

3.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module b03.

yosys> opt_clean

3.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b03..
Removed 4 unused cells and 21 unused wires.
<suppressed ~18 debug messages>

yosys> check

3.10. Executing CHECK pass (checking for obvious problems).
Checking module b03...
Found and reported 0 problems.

yosys> opt -nodffe -nosdff

3.11. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b03.

yosys> opt_merge -nomux

3.11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b03'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.11.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b03..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~13 debug messages>

yosys> opt_reduce

3.11.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b03.
Performed a total of 0 changes.

yosys> opt_merge

3.11.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b03'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.11.6. Executing OPT_DFF pass (perform DFF optimizations).
Changing const-value async load to async reset on $verific$stato_reg$b03.vhd:131$154 ($aldff) from module b03.
Changing const-value async load to async reset on $verific$ru4_reg$b03.vhd:131$165 ($aldff) from module b03.
Changing const-value async load to async reset on $verific$ru3_reg$b03.vhd:131$163 ($aldff) from module b03.
Changing const-value async load to async reset on $verific$ru2_reg$b03.vhd:131$161 ($aldff) from module b03.
Changing const-value async load to async reset on $verific$ru1_reg$b03.vhd:131$159 ($aldff) from module b03.
Changing const-value async load to async reset on $verific$grant_reg$b03.vhd:131$167 ($aldff) from module b03.
Changing const-value async load to async reset on $verific$grant_o_reg$b03.vhd:131$168 ($aldff) from module b03.
Changing const-value async load to async reset on $verific$fu4_reg$b03.vhd:131$166 ($aldff) from module b03.
Changing const-value async load to async reset on $verific$fu3_reg$b03.vhd:131$164 ($aldff) from module b03.
Changing const-value async load to async reset on $verific$fu2_reg$b03.vhd:131$162 ($aldff) from module b03.
Changing const-value async load to async reset on $verific$fu1_reg$b03.vhd:131$160 ($aldff) from module b03.
Changing const-value async load to async reset on $verific$coda3_reg$b03.vhd:131$158 ($aldff) from module b03.
Changing const-value async load to async reset on $verific$coda2_reg$b03.vhd:131$157 ($aldff) from module b03.
Changing const-value async load to async reset on $verific$coda1_reg$b03.vhd:131$156 ($aldff) from module b03.
Changing const-value async load to async reset on $verific$coda0_reg$b03.vhd:131$155 ($aldff) from module b03.

yosys> opt_clean

3.11.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b03..

yosys> opt_expr

3.11.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module b03.

3.11.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.11.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b03..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~13 debug messages>

yosys> opt_reduce

3.11.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b03.
Performed a total of 0 changes.

yosys> opt_merge

3.11.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b03'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.11.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.11.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b03..

yosys> opt_expr

3.11.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module b03.

3.11.16. Finished OPT passes. (There is nothing left to do.)

yosys> fsm -encoding binary

3.12. Executing FSM pass (extract and optimize FSM).

yosys> fsm_detect

3.12.1. Executing FSM_DETECT pass (finding FSMs in design).

yosys> fsm_extract

3.12.2. Executing FSM_EXTRACT pass (extracting FSM from design).

yosys> fsm_opt

3.12.3. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> opt_clean

3.12.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b03..

yosys> fsm_opt

3.12.5. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> fsm_recode -encoding binary

3.12.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

yosys> fsm_info

3.12.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

yosys> fsm_map

3.12.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

yosys> opt -sat

3.13. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b03.

yosys> opt_merge -nomux

3.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b03'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b03..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~13 debug messages>

yosys> opt_reduce

3.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b03.
Performed a total of 0 changes.

yosys> opt_merge

3.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b03'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.13.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $verific$fu4_reg$b03.vhd:131$166 ($adff) from module b03 (D = \ru4, Q = \fu4).
Adding EN signal on $verific$fu3_reg$b03.vhd:131$164 ($adff) from module b03 (D = \ru3, Q = \fu3).
Adding EN signal on $verific$fu2_reg$b03.vhd:131$162 ($adff) from module b03 (D = \ru2, Q = \fu2).
Adding EN signal on $verific$fu1_reg$b03.vhd:131$160 ($adff) from module b03 (D = \ru1, Q = \fu1).

yosys> opt_clean

3.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b03..
Removed 4 unused cells and 4 unused wires.
<suppressed ~5 debug messages>

yosys> opt_expr

3.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module b03.

3.13.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.13.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b03..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~9 debug messages>

yosys> opt_reduce

3.13.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b03.
Performed a total of 0 changes.

yosys> opt_merge

3.13.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b03'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.13.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.13.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b03..

yosys> opt_expr

3.13.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module b03.

3.13.16. Finished OPT passes. (There is nothing left to do.)

yosys> wreduce -keepdc

3.14. Executing WREDUCE pass (reducing word size of cells).

yosys> peepopt

3.15. Executing PEEPOPT pass (run peephole optimizers).

yosys> pmuxtree

3.16. Executing PMUXTREE pass.

yosys> opt_clean

3.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b03..

yosys> alumacc

3.18. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module b03:
  created 0 $alu and 0 $macc cells.

yosys> opt

3.19. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b03.

yosys> opt_merge -nomux

3.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b03'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b03..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~9 debug messages>

yosys> opt_reduce

3.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b03.
Performed a total of 0 changes.

yosys> opt_merge

3.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b03'.
Removed a total of 0 cells.

yosys> opt_dff

3.19.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.19.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b03..

yosys> opt_expr

3.19.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module b03.

3.19.9. Finished OPT passes. (There is nothing left to do.)

yosys> stat

3.20. Printing statistics.

=== b03 ===

   Number of wires:                 73
   Number of wire bits:            181
   Number of public wires:          21
   Number of public wire bits:      36
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 67
     $adff                          11
     $adffe                          4
     $bmux                          12
     $mux                           37
     $or                             3


yosys> memory -nomap

3.21. Executing MEMORY pass.

yosys> opt_mem

3.21.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

yosys> opt_mem_priority

3.21.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

yosys> opt_mem_feedback

3.21.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

yosys> memory_bmux2rom

3.21.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

yosys> memory_dff

3.21.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).
Checking read port `$auto$memory_bmux2rom.cc:63:execute$174'[0] in module `\b03': no output FF found.
Checking read port address `$auto$memory_bmux2rom.cc:63:execute$174'[0] in module `\b03': address FF has async set and/or reset, not supported.

yosys> opt_clean

3.21.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b03..

yosys> memory_share

3.21.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

yosys> opt_mem_widen

3.21.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

yosys> opt_clean

3.21.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b03..

yosys> memory_collect

3.21.10. Executing MEMORY_COLLECT pass (generating $mem cells).

yosys> stat

3.22. Printing statistics.

=== b03 ===

   Number of wires:                 73
   Number of wire bits:            181
   Number of public wires:          21
   Number of public wire bits:      36
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 67
     $adff                          11
     $adffe                          4
     $bmux                          11
     $mem_v2                         1
     $mux                           37
     $or                             3


yosys> opt_clean

3.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b03..

yosys> stat

3.24. Printing statistics.

=== b03 ===

   Number of wires:                 73
   Number of wire bits:            181
   Number of public wires:          21
   Number of public wire bits:      36
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 67
     $adff                          11
     $adffe                          4
     $bmux                          11
     $mem_v2                         1
     $mux                           37
     $or                             3


yosys> techmap -map +/techmap.v -map +/rapidsilicon/genesis/arith_map.v

3.25. Executing TECHMAP pass (map to technology primitives).

3.25.1. Executing Verilog-2005 frontend: /home/users/aram/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/aram/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.25.2. Executing Verilog-2005 frontend: /home/users/aram/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/arith_map.v
Parsing Verilog input from `/home/users/aram/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_rs_alu'.
Successfully finished Verilog frontend.

3.25.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $adffe.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $bmux.
Using extmapper simplemap for cells of type $adff.
No more expansions possible.
<suppressed ~137 debug messages>

yosys> stat

3.26. Printing statistics.

=== b03 ===

   Number of wires:                 95
   Number of wire bits:            259
   Number of public wires:          21
   Number of public wire bits:      36
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                224
     $_DFFE_PP0P_                    4
     $_DFF_PP0_                     26
     $_MUX_                        190
     $_OR_                           3
     $mem_v2                         1


yosys> opt

3.27. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.27.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b03.
<suppressed ~5 debug messages>

yosys> opt_merge -nomux

3.27.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b03'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.27.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b03..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.27.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b03.
Performed a total of 0 changes.

yosys> opt_merge

3.27.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b03'.
Removed a total of 0 cells.

yosys> opt_dff

3.27.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.27.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b03..
Removed 0 unused cells and 11 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.27.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module b03.

3.27.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.27.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b03..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.27.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b03.
Performed a total of 0 changes.

yosys> opt_merge

3.27.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b03'.
Removed a total of 0 cells.

yosys> opt_dff

3.27.13. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $auto$ff.cc:262:slice$507 ($_DFF_PP0_) from module b03 (D = $auto$simplemap.cc:309:simplemap_bmux$416 [3], Q = \grant_o [3]).
Adding EN signal on $auto$ff.cc:262:slice$506 ($_DFF_PP0_) from module b03 (D = $auto$simplemap.cc:309:simplemap_bmux$416 [2], Q = \grant_o [2]).
Adding EN signal on $auto$ff.cc:262:slice$505 ($_DFF_PP0_) from module b03 (D = $auto$simplemap.cc:309:simplemap_bmux$416 [1], Q = \grant_o [1]).
Adding EN signal on $auto$ff.cc:262:slice$504 ($_DFF_PP0_) from module b03 (D = $auto$simplemap.cc:309:simplemap_bmux$416 [0], Q = \grant_o [0]).
Adding EN signal on $auto$ff.cc:262:slice$503 ($_DFF_PP0_) from module b03 (D = $auto$simplemap.cc:309:simplemap_bmux$465 [7], Q = \grant [3]).
Adding EN signal on $auto$ff.cc:262:slice$502 ($_DFF_PP0_) from module b03 (D = $auto$simplemap.cc:309:simplemap_bmux$465 [6], Q = \grant [2]).
Adding EN signal on $auto$ff.cc:262:slice$501 ($_DFF_PP0_) from module b03 (D = $auto$simplemap.cc:309:simplemap_bmux$465 [5], Q = \grant [1]).
Adding EN signal on $auto$ff.cc:262:slice$500 ($_DFF_PP0_) from module b03 (D = $auto$simplemap.cc:309:simplemap_bmux$465 [4], Q = \grant [0]).
Adding EN signal on $auto$ff.cc:262:slice$498 ($_DFF_PP0_) from module b03 (D = $auto$simplemap.cc:309:simplemap_bmux$397, Q = \ru4).
Adding EN signal on $auto$ff.cc:262:slice$496 ($_DFF_PP0_) from module b03 (D = $auto$simplemap.cc:309:simplemap_bmux$392, Q = \ru3).
Adding EN signal on $auto$ff.cc:262:slice$494 ($_DFF_PP0_) from module b03 (D = $auto$simplemap.cc:309:simplemap_bmux$387, Q = \ru2).
Adding EN signal on $auto$ff.cc:262:slice$493 ($_DFF_PP0_) from module b03 (D = $auto$simplemap.cc:309:simplemap_bmux$382, Q = \ru1).
Adding EN signal on $auto$ff.cc:262:slice$492 ($_DFF_PP0_) from module b03 (D = $auto$simplemap.cc:309:simplemap_bmux$428 [2], Q = \coda3 [2]).
Adding EN signal on $auto$ff.cc:262:slice$491 ($_DFF_PP0_) from module b03 (D = $auto$simplemap.cc:309:simplemap_bmux$428 [1], Q = \coda3 [1]).
Adding EN signal on $auto$ff.cc:262:slice$490 ($_DFF_PP0_) from module b03 (D = $auto$simplemap.cc:309:simplemap_bmux$428 [0], Q = \coda3 [0]).
Adding EN signal on $auto$ff.cc:262:slice$489 ($_DFF_PP0_) from module b03 (D = $auto$simplemap.cc:309:simplemap_bmux$439 [2], Q = \coda2 [2]).
Adding EN signal on $auto$ff.cc:262:slice$488 ($_DFF_PP0_) from module b03 (D = $auto$simplemap.cc:309:simplemap_bmux$439 [1], Q = \coda2 [1]).
Adding EN signal on $auto$ff.cc:262:slice$487 ($_DFF_PP0_) from module b03 (D = $auto$simplemap.cc:309:simplemap_bmux$439 [0], Q = \coda2 [0]).
Adding EN signal on $auto$ff.cc:262:slice$486 ($_DFF_PP0_) from module b03 (D = $auto$simplemap.cc:309:simplemap_bmux$450 [2], Q = \coda1 [2]).
Adding EN signal on $auto$ff.cc:262:slice$485 ($_DFF_PP0_) from module b03 (D = $auto$simplemap.cc:309:simplemap_bmux$450 [1], Q = \coda1 [1]).
Adding EN signal on $auto$ff.cc:262:slice$484 ($_DFF_PP0_) from module b03 (D = $auto$simplemap.cc:309:simplemap_bmux$450 [0], Q = \coda1 [0]).
Adding EN signal on $auto$ff.cc:262:slice$483 ($_DFF_PP0_) from module b03 (D = $auto$simplemap.cc:309:simplemap_bmux$461 [2], Q = \coda0 [2]).
Adding EN signal on $auto$ff.cc:262:slice$482 ($_DFF_PP0_) from module b03 (D = $auto$simplemap.cc:309:simplemap_bmux$461 [1], Q = \coda0 [1]).
Adding EN signal on $auto$ff.cc:262:slice$481 ($_DFF_PP0_) from module b03 (D = $auto$simplemap.cc:309:simplemap_bmux$461 [0], Q = \coda0 [0]).

yosys> opt_clean

3.27.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b03..
Removed 4 unused cells and 121 unused wires.
<suppressed ~5 debug messages>

yosys> opt_expr

3.27.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module b03.
<suppressed ~432 debug messages>

3.27.16. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.27.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b03..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.27.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b03.
Performed a total of 0 changes.

yosys> opt_merge

3.27.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b03'.
<suppressed ~1680 debug messages>
Removed a total of 560 cells.

yosys> opt_dff

3.27.20. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.27.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b03..
Removed 0 unused cells and 506 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.27.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module b03.
<suppressed ~4 debug messages>

3.27.23. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.27.24. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b03..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.27.25. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b03.
Performed a total of 0 changes.

yosys> opt_merge

3.27.26. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b03'.
Removed a total of 0 cells.

yosys> opt_dff

3.27.27. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.27.28. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b03..
Removed 0 unused cells and 4 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.27.29. Executing OPT_EXPR pass (perform const folding).
Optimizing module b03.

3.27.30. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.27.31. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b03..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.27.32. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b03.
Performed a total of 0 changes.

yosys> opt_merge

3.27.33. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b03'.
Removed a total of 0 cells.

yosys> opt_dff

3.27.34. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.27.35. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b03..

yosys> opt_expr

3.27.36. Executing OPT_EXPR pass (perform const folding).
Optimizing module b03.

3.27.37. Finished OPT passes. (There is nothing left to do.)

yosys> opt -fast -full

3.28. Executing OPT pass (performing simple optimizations).

yosys> opt_expr -full

3.28.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b03.
<suppressed ~135 debug messages>

yosys> opt_merge

3.28.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b03'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

yosys> opt_dff

3.28.3. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.28.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b03..
Removed 0 unused cells and 47 unused wires.
<suppressed ~1 debug messages>

3.28.5. Finished fast OPT passes.

yosys> memory_map

3.29. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).
Mapping memory $auto$memory_bmux2rom.cc:63:execute$174 in module \b03:
  created 8 $dff cells and 0 static cells of width 4.
  read interface: 0 $dff and 7 $mux cells.
  write interface: 0 write mux blocks.

yosys> opt -full

3.30. Executing OPT pass (performing simple optimizations).

yosys> opt_expr -full

3.30.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b03.
<suppressed ~3 debug messages>

yosys> opt_merge -nomux

3.30.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b03'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

yosys> opt_muxtree

3.30.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b03..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

yosys> opt_reduce -full

3.30.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b03.
Performed a total of 0 changes.

yosys> opt_merge

3.30.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b03'.
Removed a total of 0 cells.

yosys> opt_share

3.30.6. Executing OPT_SHARE pass.

yosys> opt_dff

3.30.7. Executing OPT_DFF pass (perform DFF optimizations).
Handling const CLK on $memory$auto$memory_bmux2rom.cc:63:execute$174[0]$2524 ($dff) from module b03 (removing D path).
Handling const CLK on $memory$auto$memory_bmux2rom.cc:63:execute$174[1]$2526 ($dff) from module b03 (removing D path).
Handling const CLK on $memory$auto$memory_bmux2rom.cc:63:execute$174[2]$2528 ($dff) from module b03 (removing D path).
Handling const CLK on $memory$auto$memory_bmux2rom.cc:63:execute$174[3]$2530 ($dff) from module b03 (removing D path).
Handling const CLK on $memory$auto$memory_bmux2rom.cc:63:execute$174[4]$2532 ($dff) from module b03 (removing D path).
Handling const CLK on $memory$auto$memory_bmux2rom.cc:63:execute$174[5]$2534 ($dff) from module b03 (removing D path).
Handling const CLK on $memory$auto$memory_bmux2rom.cc:63:execute$174[6]$2536 ($dff) from module b03 (removing D path).
Handling const CLK on $memory$auto$memory_bmux2rom.cc:63:execute$174[7]$2538 ($dff) from module b03 (removing D path).

yosys> opt_clean

3.30.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b03..
Removed 0 unused cells and 24 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr -full

3.30.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module b03.

3.30.10. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.30.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b03..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

yosys> opt_reduce -full

3.30.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b03.
    Consolidated identical input bits for $mux cell $memory$auto$memory_bmux2rom.cc:63:execute$174$rdmux[0][2][0]$2549:
      Old ports: A=4'0000, B=4'0010, Y=$memory$auto$memory_bmux2rom.cc:63:execute$174$rdmux[0][1][0]$a$2544
      New ports: A=1'0, B=1'1, Y=$memory$auto$memory_bmux2rom.cc:63:execute$174$rdmux[0][1][0]$a$2544 [1]
      New connections: { $memory$auto$memory_bmux2rom.cc:63:execute$174$rdmux[0][1][0]$a$2544 [3:2] $memory$auto$memory_bmux2rom.cc:63:execute$174$rdmux[0][1][0]$a$2544 [0] } = 3'000
    Consolidated identical input bits for $mux cell $memory$auto$memory_bmux2rom.cc:63:execute$174$rdmux[0][2][1]$2552:
      Old ports: A=4'0100, B=4'0000, Y=$memory$auto$memory_bmux2rom.cc:63:execute$174$rdmux[0][1][0]$b$2545
      New ports: A=1'1, B=1'0, Y=$memory$auto$memory_bmux2rom.cc:63:execute$174$rdmux[0][1][0]$b$2545 [2]
      New connections: { $memory$auto$memory_bmux2rom.cc:63:execute$174$rdmux[0][1][0]$b$2545 [3] $memory$auto$memory_bmux2rom.cc:63:execute$174$rdmux[0][1][0]$b$2545 [1:0] } = 3'000
    Consolidated identical input bits for $mux cell $memory$auto$memory_bmux2rom.cc:63:execute$174$rdmux[0][2][2]$2555:
      Old ports: A=4'1000, B=4'0000, Y=$memory$auto$memory_bmux2rom.cc:63:execute$174$rdmux[0][1][1]$a$2547
      New ports: A=1'1, B=1'0, Y=$memory$auto$memory_bmux2rom.cc:63:execute$174$rdmux[0][1][1]$a$2547 [3]
      New connections: $memory$auto$memory_bmux2rom.cc:63:execute$174$rdmux[0][1][1]$a$2547 [2:0] = 3'000
    Consolidated identical input bits for $mux cell $memory$auto$memory_bmux2rom.cc:63:execute$174$rdmux[0][2][3]$2558:
      Old ports: A=4'0000, B=4'0001, Y=$memory$auto$memory_bmux2rom.cc:63:execute$174$rdmux[0][1][1]$b$2548
      New ports: A=1'0, B=1'1, Y=$memory$auto$memory_bmux2rom.cc:63:execute$174$rdmux[0][1][1]$b$2548 [0]
      New connections: $memory$auto$memory_bmux2rom.cc:63:execute$174$rdmux[0][1][1]$b$2548 [3:1] = 3'000
  Optimizing cells in module \b03.
    Consolidated identical input bits for $mux cell $memory$auto$memory_bmux2rom.cc:63:execute$174$rdmux[0][1][0]$2543:
      Old ports: A=$memory$auto$memory_bmux2rom.cc:63:execute$174$rdmux[0][1][0]$a$2544, B=$memory$auto$memory_bmux2rom.cc:63:execute$174$rdmux[0][1][0]$b$2545, Y=$memory$auto$memory_bmux2rom.cc:63:execute$174$rdmux[0][0][0]$a$2541
      New ports: A={ 1'0 $memory$auto$memory_bmux2rom.cc:63:execute$174$rdmux[0][1][0]$a$2544 [1] }, B={ $memory$auto$memory_bmux2rom.cc:63:execute$174$rdmux[0][1][0]$b$2545 [2] 1'0 }, Y=$memory$auto$memory_bmux2rom.cc:63:execute$174$rdmux[0][0][0]$a$2541 [2:1]
      New connections: { $memory$auto$memory_bmux2rom.cc:63:execute$174$rdmux[0][0][0]$a$2541 [3] $memory$auto$memory_bmux2rom.cc:63:execute$174$rdmux[0][0][0]$a$2541 [0] } = 2'00
    Consolidated identical input bits for $mux cell $memory$auto$memory_bmux2rom.cc:63:execute$174$rdmux[0][1][1]$2546:
      Old ports: A=$memory$auto$memory_bmux2rom.cc:63:execute$174$rdmux[0][1][1]$a$2547, B=$memory$auto$memory_bmux2rom.cc:63:execute$174$rdmux[0][1][1]$b$2548, Y=$memory$auto$memory_bmux2rom.cc:63:execute$174$rdmux[0][0][0]$b$2542
      New ports: A={ $memory$auto$memory_bmux2rom.cc:63:execute$174$rdmux[0][1][1]$a$2547 [3] 1'0 }, B={ 1'0 $memory$auto$memory_bmux2rom.cc:63:execute$174$rdmux[0][1][1]$b$2548 [0] }, Y={ $memory$auto$memory_bmux2rom.cc:63:execute$174$rdmux[0][0][0]$b$2542 [3] $memory$auto$memory_bmux2rom.cc:63:execute$174$rdmux[0][0][0]$b$2542 [0] }
      New connections: $memory$auto$memory_bmux2rom.cc:63:execute$174$rdmux[0][0][0]$b$2542 [2:1] = 2'00
  Optimizing cells in module \b03.
Performed a total of 6 changes.

yosys> opt_merge

3.30.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b03'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

yosys> opt_share

3.30.14. Executing OPT_SHARE pass.

yosys> opt_dff

3.30.15. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.30.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b03..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr -full

3.30.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module b03.
<suppressed ~2 debug messages>

3.30.18. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.30.19. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b03..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

yosys> opt_reduce -full

3.30.20. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b03.
Performed a total of 0 changes.

yosys> opt_merge

3.30.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b03'.
Removed a total of 0 cells.

yosys> opt_share

3.30.22. Executing OPT_SHARE pass.

yosys> opt_dff

3.30.23. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.30.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b03..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr -full

3.30.25. Executing OPT_EXPR pass (perform const folding).
Optimizing module b03.

3.30.26. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.30.27. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b03..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

yosys> opt_reduce -full

3.30.28. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b03.
Performed a total of 0 changes.

yosys> opt_merge

3.30.29. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b03'.
Removed a total of 0 cells.

yosys> opt_share

3.30.30. Executing OPT_SHARE pass.

yosys> opt_dff

3.30.31. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.30.32. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b03..

yosys> opt_expr -full

3.30.33. Executing OPT_EXPR pass (perform const folding).
Optimizing module b03.

3.30.34. Finished OPT passes. (There is nothing left to do.)

yosys> techmap -map +/techmap.v

3.31. Executing TECHMAP pass (map to technology primitives).

3.31.1. Executing Verilog-2005 frontend: /home/users/aram/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/aram/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.31.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $not.
No more expansions possible.
<suppressed ~75 debug messages>

yosys> opt -sat

3.32. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.32.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b03.

yosys> opt_merge -nomux

3.32.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b03'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.32.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b03..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.32.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b03.
Performed a total of 0 changes.

yosys> opt_merge

3.32.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b03'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.32.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.32.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b03..

yosys> opt_expr

3.32.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module b03.

3.32.9. Finished OPT passes. (There is nothing left to do.)

yosys> abc -dff

3.33. Executing ABC pass (technology mapping using ABC).

3.33.1. Summary of detected clock domains:
  18 cells in clk=\clock, en=$auto$opt_dff.cc:194:make_patterns_logic$657, arst=\reset, srst={ }
  9 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$610, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$527, arst=\reset, srst={ }
  19 cells in clk=\clock, en={ }, arst=\reset, srst={ }
  11 cells in clk=\clock, en=\stato [0], arst=\reset, srst={ }
  39 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$1054, arst=\reset, srst={ }

3.33.2. Extracting gate netlist of module `\b03' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:194:make_patterns_logic$657, asynchronously reset by \reset
Extracted 18 gates and 25 wires to a netlist network with 6 inputs and 14 outputs.

3.33.2.1. Executing ABC.

3.33.3. Extracting gate netlist of module `\b03' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$610, asynchronously reset by \reset
Extracted 9 gates and 17 wires to a netlist network with 7 inputs and 5 outputs.

3.33.3.1. Executing ABC.

3.33.4. Extracting gate netlist of module `\b03' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$527, asynchronously reset by \reset
Extracted 5 gates and 11 wires to a netlist network with 6 inputs and 5 outputs.

3.33.4.1. Executing ABC.

3.33.5. Extracting gate netlist of module `\b03' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, asynchronously reset by \reset
Extracted 19 gates and 37 wires to a netlist network with 17 inputs and 15 outputs.

3.33.5.1. Executing ABC.

3.33.6. Extracting gate netlist of module `\b03' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$2700$lo0, asynchronously reset by \reset
Extracted 11 gates and 15 wires to a netlist network with 4 inputs and 5 outputs.

3.33.6.1. Executing ABC.

3.33.7. Extracting gate netlist of module `\b03' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$1054, asynchronously reset by \reset
Extracted 39 gates and 60 wires to a netlist network with 20 inputs and 14 outputs.

3.33.7.1. Executing ABC.

yosys> abc -dff

3.34. Executing ABC pass (technology mapping using ABC).

3.34.1. Summary of detected clock domains:
  10 cells in clk=\clock, en=$abc$2700$lo0, arst=\reset, srst={ }
  13 cells in clk=\clock, en=$abc$2647$auto$opt_dff.cc:194:make_patterns_logic$657, arst=\reset, srst={ }
  25 cells in clk=\clock, en={ }, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$2686$auto$opt_dff.cc:219:make_patterns_logic$527, arst=\reset, srst={ }
  8 cells in clk=\clock, en=$abc$2672$auto$opt_dff.cc:219:make_patterns_logic$610, arst=\reset, srst={ }
  32 cells in clk=\clock, en=$abc$2737$auto$opt_dff.cc:219:make_patterns_logic$1054, arst=\reset, srst={ }

3.34.2. Extracting gate netlist of module `\b03' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$2700$lo0, asynchronously reset by \reset
Extracted 10 gates and 14 wires to a netlist network with 4 inputs and 6 outputs.

3.34.2.1. Executing ABC.

3.34.3. Extracting gate netlist of module `\b03' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$2647$auto$opt_dff.cc:194:make_patterns_logic$657, asynchronously reset by \reset
Extracted 13 gates and 19 wires to a netlist network with 6 inputs and 13 outputs.

3.34.3.1. Executing ABC.

3.34.4. Extracting gate netlist of module `\b03' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, asynchronously reset by \reset
Extracted 25 gates and 44 wires to a netlist network with 19 inputs and 21 outputs.

3.34.4.1. Executing ABC.

3.34.5. Extracting gate netlist of module `\b03' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$2686$auto$opt_dff.cc:219:make_patterns_logic$527, asynchronously reset by \reset
Extracted 5 gates and 11 wires to a netlist network with 6 inputs and 5 outputs.

3.34.5.1. Executing ABC.

3.34.6. Extracting gate netlist of module `\b03' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$2825$abc$2672$auto$opt_dff.cc:219:make_patterns_logic$610, asynchronously reset by \reset
Extracted 8 gates and 13 wires to a netlist network with 5 inputs and 4 outputs.

3.34.6.1. Executing ABC.

3.34.7. Extracting gate netlist of module `\b03' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$2737$auto$opt_dff.cc:219:make_patterns_logic$1054, asynchronously reset by \reset
Extracted 32 gates and 59 wires to a netlist network with 27 inputs and 17 outputs.

3.34.7.1. Executing ABC.

yosys> abc -dff

3.35. Executing ABC pass (technology mapping using ABC).

3.35.1. Summary of detected clock domains:
  11 cells in clk=\clock, en=$abc$2825$abc$2672$auto$opt_dff.cc:219:make_patterns_logic$610, arst=\reset, srst={ }
  10 cells in clk=\clock, en=$abc$2825$lo0, arst=\reset, srst={ }
  17 cells in clk=\clock, en={ }, arst=\reset, srst={ }
  13 cells in clk=\clock, en=$abc$2803$abc$2647$auto$opt_dff.cc:194:make_patterns_logic$657, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$2855$abc$2686$auto$opt_dff.cc:219:make_patterns_logic$527, arst=\reset, srst={ }
  37 cells in clk=\clock, en=$abc$2882$abc$2737$auto$opt_dff.cc:219:make_patterns_logic$1054, arst=\reset, srst={ }

3.35.2. Extracting gate netlist of module `\b03' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$2825$abc$2672$auto$opt_dff.cc:219:make_patterns_logic$610, asynchronously reset by \reset
Extracted 11 gates and 20 wires to a netlist network with 9 inputs and 6 outputs.

3.35.2.1. Executing ABC.

3.35.3. Extracting gate netlist of module `\b03' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$2825$lo0, asynchronously reset by \reset
Extracted 10 gates and 14 wires to a netlist network with 4 inputs and 6 outputs.

3.35.3.1. Executing ABC.

3.35.4. Extracting gate netlist of module `\b03' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, asynchronously reset by \reset
Extracted 17 gates and 30 wires to a netlist network with 13 inputs and 16 outputs.

3.35.4.1. Executing ABC.

3.35.5. Extracting gate netlist of module `\b03' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$2803$abc$2647$auto$opt_dff.cc:194:make_patterns_logic$657, asynchronously reset by \reset
Extracted 13 gates and 19 wires to a netlist network with 6 inputs and 13 outputs.

3.35.5.1. Executing ABC.

3.35.6. Extracting gate netlist of module `\b03' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$2855$abc$2686$auto$opt_dff.cc:219:make_patterns_logic$527, asynchronously reset by \reset
Extracted 5 gates and 11 wires to a netlist network with 6 inputs and 5 outputs.

3.35.6.1. Executing ABC.

3.35.7. Extracting gate netlist of module `\b03' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$2882$abc$2737$auto$opt_dff.cc:219:make_patterns_logic$1054, asynchronously reset by \reset
Extracted 37 gates and 63 wires to a netlist network with 26 inputs and 17 outputs.

3.35.7.1. Executing ABC.

yosys> abc -dff

3.36. Executing ABC pass (technology mapping using ABC).

3.36.1. Summary of detected clock domains:
  5 cells in clk=\clock, en=$abc$3012$abc$2855$abc$2686$auto$opt_dff.cc:219:make_patterns_logic$527, arst=\reset, srst={ }
  11 cells in clk=\clock, en=$abc$2938$abc$2825$abc$2672$auto$opt_dff.cc:219:make_patterns_logic$610, arst=\reset, srst={ }
  10 cells in clk=\clock, en=$abc$2969$lo0, arst=\reset, srst={ }
  13 cells in clk=\clock, en=$abc$2990$abc$2803$abc$2647$auto$opt_dff.cc:194:make_patterns_logic$657, arst=\reset, srst={ }
  17 cells in clk=\clock, en={ }, arst=\reset, srst={ }
  40 cells in clk=\clock, en=$abc$3026$abc$2882$abc$2737$auto$opt_dff.cc:219:make_patterns_logic$1054, arst=\reset, srst={ }

3.36.2. Extracting gate netlist of module `\b03' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$3012$abc$2855$abc$2686$auto$opt_dff.cc:219:make_patterns_logic$527, asynchronously reset by \reset
Extracted 5 gates and 11 wires to a netlist network with 6 inputs and 5 outputs.

3.36.2.1. Executing ABC.

3.36.3. Extracting gate netlist of module `\b03' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$2938$abc$2825$abc$2672$auto$opt_dff.cc:219:make_patterns_logic$610, asynchronously reset by \reset
Extracted 11 gates and 20 wires to a netlist network with 9 inputs and 6 outputs.

3.36.3.1. Executing ABC.

3.36.4. Extracting gate netlist of module `\b03' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$2969$lo0, asynchronously reset by \reset
Extracted 10 gates and 14 wires to a netlist network with 4 inputs and 6 outputs.

3.36.4.1. Executing ABC.

3.36.5. Extracting gate netlist of module `\b03' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$2990$abc$2803$abc$2647$auto$opt_dff.cc:194:make_patterns_logic$657, asynchronously reset by \reset
Extracted 13 gates and 19 wires to a netlist network with 6 inputs and 13 outputs.

3.36.5.1. Executing ABC.

3.36.6. Extracting gate netlist of module `\b03' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, asynchronously reset by \reset
Extracted 17 gates and 30 wires to a netlist network with 13 inputs and 16 outputs.

3.36.6.1. Executing ABC.

3.36.7. Extracting gate netlist of module `\b03' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$3026$abc$2882$abc$2737$auto$opt_dff.cc:219:make_patterns_logic$1054, asynchronously reset by \reset
Extracted 40 gates and 66 wires to a netlist network with 26 inputs and 17 outputs.

3.36.7.1. Executing ABC.

yosys> opt_ffinv

3.37. Executing OPT_FFINV pass (push inverters through FFs).
Discovering LUTs.
Pushed 0 inverters.

yosys> opt -sat

3.38. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.38.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b03.
<suppressed ~1 debug messages>

yosys> opt_merge -nomux

3.38.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b03'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

yosys> opt_muxtree

3.38.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b03..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.38.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b03.
Performed a total of 0 changes.

yosys> opt_merge

3.38.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b03'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.38.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.38.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b03..
Removed 0 unused cells and 803 unused wires.
<suppressed ~6 debug messages>

yosys> opt_expr

3.38.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module b03.

3.38.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.38.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b03..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.38.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b03.
Performed a total of 0 changes.

yosys> opt_merge

3.38.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b03'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.38.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.38.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b03..

yosys> opt_expr

3.38.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module b03.

3.38.16. Finished OPT passes. (There is nothing left to do.)

yosys> abc -script /home/users/temp_dir/yosys_qFsSOV/abc_tmp_1.scr

3.39. Executing ABC pass (technology mapping using ABC).

3.39.1. Extracting gate netlist of module `\b03' to `<abc-temp-dir>/input.blif'..
Extracted 65 gates and 87 wires to a netlist network with 22 inputs and 21 outputs.

3.39.1.1. Executing ABC.
DE:   #PIs =  22  #Luts =    24  Max Lvl =   2  Avg Lvl =   1.10  [   0.15 sec. at Pass 0]
DE:   #PIs =  22  #Luts =    22  Max Lvl =   2  Avg Lvl =   1.00  [   0.40 sec. at Pass 1]
DE:   #PIs =  22  #Luts =    22  Max Lvl =   2  Avg Lvl =   1.00  [   0.09 sec. at Pass 2]
DE:   #PIs =  22  #Luts =    22  Max Lvl =   2  Avg Lvl =   1.00  [   0.25 sec. at Pass 3]
DE:   #PIs =  22  #Luts =    22  Max Lvl =   2  Avg Lvl =   1.00  [   0.26 sec. at Pass 4]
DE:   #PIs =  22  #Luts =    22  Max Lvl =   2  Avg Lvl =   1.00  [   0.79 sec. at Pass 5]
DE:   #PIs =  22  #Luts =    22  Max Lvl =   2  Avg Lvl =   1.00  [   1.89 sec. at Pass 6]
DE:   #PIs =  22  #Luts =    22  Max Lvl =   2  Avg Lvl =   1.00  [   2.13 sec. at Pass 7]

yosys> opt

3.40. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.40.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b03.

yosys> opt_merge -nomux

3.40.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b03'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.40.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b03..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.40.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b03.
Performed a total of 0 changes.

yosys> opt_merge

3.40.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b03'.
Removed a total of 0 cells.

yosys> opt_dff

3.40.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.40.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b03..
Removed 0 unused cells and 88 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.40.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module b03.

3.40.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.40.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b03..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.40.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b03.
Performed a total of 0 changes.

yosys> opt_merge

3.40.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b03'.
Removed a total of 0 cells.

yosys> opt_dff

3.40.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.40.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b03..

yosys> opt_expr

3.40.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module b03.

3.40.16. Finished OPT passes. (There is nothing left to do.)

yosys> opt_ffinv

3.41. Executing OPT_FFINV pass (push inverters through FFs).
Discovering LUTs.
Pushed 0 inverters.

yosys> stat

3.42. Printing statistics.

=== b03 ===

   Number of wires:                 44
   Number of wire bits:             57
   Number of public wires:          16
   Number of public wire bits:      29
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 51
     $_DFFE_PP0P_                   28
     $_DFF_PP0_                      2
     $lut                           21


yosys> shregmap -minlen 8 -maxlen 20

3.43. Executing SHREGMAP pass (map shift registers).
Converted 0 dff cells into 0 shift registers.

yosys> dfflegalize -cell $_DFF_?_ 0 -cell $_DFF_???_ 0 -cell $_DFFE_????_ 0 -cell $_DFFSR_???_ 0 -cell $_DFFSRE_????_ 0 -cell $_DLATCHSR_PPP_ 0

3.44. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

yosys> stat

3.45. Printing statistics.

=== b03 ===

   Number of wires:                 44
   Number of wire bits:             57
   Number of public wires:          16
   Number of public wire bits:      29
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 51
     $_DFFE_PP0P_                   28
     $_DFF_PP0_                      2
     $lut                           21


yosys> techmap -map +/rapidsilicon/genesis/ffs_map.v

3.46. Executing TECHMAP pass (map to technology primitives).

3.46.1. Executing Verilog-2005 frontend: /home/users/aram/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/ffs_map.v
Parsing Verilog input from `/home/users/aram/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/ffs_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP0N_'.
Generating RTLIL representation for module `\$_DFFE_PN0P_'.
Generating RTLIL representation for module `\$_DFFE_PN0N_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP1N_'.
Generating RTLIL representation for module `\$_DFFE_PN1P_'.
Generating RTLIL representation for module `\$_DFFE_PN1N_'.
Generating RTLIL representation for module `\$_DFFSR_PPP_'.
Generating RTLIL representation for module `\$_DFFSR_PNP_'.
Generating RTLIL representation for module `\$_DFFSR_PNN_'.
Generating RTLIL representation for module `\$_DFFSR_PPN_'.
Generating RTLIL representation for module `\$_DFFSR_NPP_'.
Generating RTLIL representation for module `\$_DFFSR_NNP_'.
Generating RTLIL representation for module `\$_DFFSR_NNN_'.
Generating RTLIL representation for module `\$_DFFSR_NPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PNPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPNP_'.
Generating RTLIL representation for module `\$_DFFSRE_PNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PNPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PPNN_'.
Generating RTLIL representation for module `\$_DFFSRE_PNNN_'.
Generating RTLIL representation for module `\$_DLATCHSR_PPP_'.
Generating RTLIL representation for module `\$_DLATCHSR_NPP_'.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP0N_'.
Generating RTLIL representation for module `\$_DFFE_NN0P_'.
Generating RTLIL representation for module `\$_DFFE_NN0N_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_NP1N_'.
Generating RTLIL representation for module `\$_DFFE_NN1P_'.
Generating RTLIL representation for module `\$_DFFE_NN1N_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNPP_'.
Generating RTLIL representation for module `\$_DFFSRE_NPNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPN_'.
Generating RTLIL representation for module `\$_DFFSRE_NNPN_'.
Generating RTLIL representation for module `\$_DFFSRE_NPNN_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNN_'.
Generating RTLIL representation for module `\$__SHREG_DFF_P_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PN0_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NN0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFF_PN1_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_NN1_'.
Successfully finished Verilog frontend.

3.46.2. Continuing TECHMAP pass.
Using template \$_DFF_PP0_ for cells of type $_DFF_PP0_.
Using template \$_DFFE_PP0P_ for cells of type $_DFFE_PP0P_.
No more expansions possible.
<suppressed ~97 debug messages>

yosys> techmap -map +/techmap.v

3.47. Executing TECHMAP pass (map to technology primitives).

3.47.1. Executing Verilog-2005 frontend: /home/users/aram/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/aram/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.47.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $lut.
No more expansions possible.
<suppressed ~122 debug messages>

yosys> opt_expr -mux_undef

3.48. Executing OPT_EXPR pass (perform const folding).
Optimizing module b03.
<suppressed ~248 debug messages>

yosys> simplemap

3.49. Executing SIMPLEMAP pass (map simple cells to gate primitives).

yosys> opt_expr

3.50. Executing OPT_EXPR pass (perform const folding).
Optimizing module b03.

yosys> opt_merge

3.51. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b03'.
<suppressed ~138 debug messages>
Removed a total of 46 cells.

yosys> opt_dff -nodffe -nosdff

3.52. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.53. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b03..
Removed 0 unused cells and 218 unused wires.
<suppressed ~1 debug messages>

yosys> opt -nodffe -nosdff

3.54. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.54.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b03.
<suppressed ~6 debug messages>

yosys> opt_merge -nomux

3.54.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b03'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.54.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b03..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.54.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b03.
Performed a total of 0 changes.

yosys> opt_merge

3.54.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b03'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.54.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.54.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b03..
Removed 0 unused cells and 5 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.54.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module b03.

3.54.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.54.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b03..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.54.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b03.
Performed a total of 0 changes.

yosys> opt_merge

3.54.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b03'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.54.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.54.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b03..

yosys> opt_expr

3.54.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module b03.

3.54.16. Finished OPT passes. (There is nothing left to do.)

yosys> abc -script /home/users/temp_dir/yosys_qFsSOV/abc_tmp_2.scr

3.55. Executing ABC pass (technology mapping using ABC).

3.55.1. Extracting gate netlist of module `\b03' to `<abc-temp-dir>/input.blif'..
Extracted 47 gates and 72 wires to a netlist network with 23 inputs and 21 outputs.

3.55.1.1. Executing ABC.
DE:   #PIs =  23  #Luts =    22  Max Lvl =   2  Avg Lvl =   1.00  [   0.10 sec. at Pass 0]
DE:   #PIs =  23  #Luts =    22  Max Lvl =   2  Avg Lvl =   1.00  [   0.49 sec. at Pass 1]
DE:   #PIs =  23  #Luts =    22  Max Lvl =   2  Avg Lvl =   1.00  [   0.13 sec. at Pass 2]
DE:   #PIs =  23  #Luts =    22  Max Lvl =   2  Avg Lvl =   1.00  [   0.39 sec. at Pass 3]
DE:   #PIs =  23  #Luts =    22  Max Lvl =   2  Avg Lvl =   1.00  [   0.43 sec. at Pass 4]
DE:   #PIs =  23  #Luts =    22  Max Lvl =   2  Avg Lvl =   1.00  [   0.94 sec. at Pass 5]
DE:   #PIs =  23  #Luts =    22  Max Lvl =   2  Avg Lvl =   1.00  [   2.15 sec. at Pass 6]
DE:   #PIs =  23  #Luts =    22  Max Lvl =   2  Avg Lvl =   1.00  [   1.55 sec. at Pass 7]

yosys> opt

3.56. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.56.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b03.

yosys> opt_merge -nomux

3.56.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b03'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.56.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b03..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.56.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b03.
Performed a total of 0 changes.

yosys> opt_merge

3.56.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b03'.
Removed a total of 0 cells.

yosys> opt_dff

3.56.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.56.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b03..
Removed 0 unused cells and 69 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.56.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module b03.

3.56.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.56.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b03..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.56.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b03.
Performed a total of 0 changes.

yosys> opt_merge

3.56.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b03'.
Removed a total of 0 cells.

yosys> opt_dff

3.56.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.56.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b03..

yosys> opt_expr

3.56.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module b03.

3.56.16. Finished OPT passes. (There is nothing left to do.)

yosys> hierarchy -check

3.57. Executing HIERARCHY pass (managing design hierarchy).

3.57.1. Analyzing design hierarchy..
Top module:  \b03

3.57.2. Analyzing design hierarchy..
Top module:  \b03
Removed 0 unused modules.

yosys> stat

3.58. Printing statistics.

=== b03 ===

   Number of wires:                 45
   Number of wire bits:             58
   Number of public wires:          16
   Number of public wire bits:      29
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 52
     $lut                           22
     dffsre                         30


yosys> opt_clean -purge

3.59. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b03..

yosys> write_verilog -noattr -nohex synthesized.v

3.60. Executing Verilog backend.
Dumping module `\b03'.

End of script. Logfile hash: 676be81d97, CPU: user 1.36s system 0.21s, MEM: 20.22 MB peak
Yosys 0.17+103 (git sha1 a1babadd5, gcc 9.1.0 -fPIC -Os)
Time spent: 98% 6x abc (110 sec), 0% 38x opt_expr (0 sec), ...
real 30.18
user 81.21
sys 30.47
