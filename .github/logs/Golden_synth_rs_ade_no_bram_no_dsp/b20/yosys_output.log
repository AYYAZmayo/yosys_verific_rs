
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys-Verific 0.0.49
 Yosys 0.18+10 (git sha1 7a7a25778, gcc 9.1.0 -fPIC -Os)


-- Executing script file `yosys.ys' --
echo on

yosys> plugin -i synth-rs

yosys> read -verific

yosys> read -incdir .

yosys> verific -vlog-incdir .

1. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific May22_SW_Release, released at Wed Jun  1 05:39:28 2022.

yosys> verilog_defaults -add -I.

yosys> read -vhdl b20.vhd

yosys> verific -vhdl b20.vhd

2. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific May22_SW_Release, released at Wed Jun  1 05:39:28 2022.
VERIFIC-INFO [VHDL-1504] default VHDL library search path is now "/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008"
VERIFIC-COMMENT [VHDL-1481] Analyzing VHDL file 'b20.vhd'
VERIFIC-COMMENT [VHDL-1493] Restoring VHDL unit 'std.standard' from file '/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008/std/standard.vdb'
VERIFIC-INFO [VHDL-1012] b20.vhd:1: analyzing entity 'b14'
VERIFIC-INFO [VHDL-1010] b20.vhd:11: analyzing architecture 'behav'
VERIFIC-INFO [VHDL-1012] b20.vhd:511: analyzing entity 'b14rev'
VERIFIC-INFO [VHDL-1010] b20.vhd:521: analyzing architecture 'behav'
VERIFIC-INFO [VHDL-1012] b20.vhd:1021: analyzing entity 'b20'
VERIFIC-INFO [VHDL-1010] b20.vhd:1029: analyzing architecture 'behav'

yosys> synth_rs -top b20 -tech genesis -goal area -de -no_dsp -no_bram -verilog synthesized.v

3. Executing synth_rs pass: v0.4.58

yosys> read_verilog -lib -specify -nomem2reg +/rapidsilicon/common/cells_sim.v +/rapidsilicon/genesis/cells_sim.v

3.1. Executing Verilog-2005 frontend: /home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v
Parsing Verilog input from `/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\inv'.
Generating RTLIL representation for module `\buff'.
Generating RTLIL representation for module `\logic_0'.
Generating RTLIL representation for module `\logic_1'.
Generating RTLIL representation for module `\gclkbuff'.
Successfully finished Verilog frontend.

3.2. Executing Verilog-2005 frontend: /home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/cells_sim.v
Parsing Verilog input from `/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\dffsre'.
Generating RTLIL representation for module `\dffnsre'.
Generating RTLIL representation for module `\latchsre'.
Generating RTLIL representation for module `\latchnsre'.
Generating RTLIL representation for module `\io_scff'.
Generating RTLIL representation for module `\scff'.
Generating RTLIL representation for module `\sh_dff'.
Generating RTLIL representation for module `\adder_carry'.
Generating RTLIL representation for module `\sdffr'.
Generating RTLIL representation for module `\sdffs'.
Generating RTLIL representation for module `\TDP_BRAM18'.
Generating RTLIL representation for module `\TDP36K'.
Generating RTLIL representation for module `\RS_DSP1'.
Generating RTLIL representation for module `\RS_DSP2'.
Generating RTLIL representation for module `\RS_DSP2_MULT'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGIN_REGOUT'.
Generating RTLIL representation for module `\dsp_t1_sim'.
Generating RTLIL representation for module `\dsp_t1_20x18x64'.
Generating RTLIL representation for module `\dsp_t1_10x9x32'.
Successfully finished Verilog frontend.

yosys> hierarchy -check -top b20

3.3. Executing HIERARCHY pass (managing design hierarchy).
VERIFIC-INFO [VHDL-1067] b20.vhd:1021: processing 'b20(BEHAV)'
VERIFIC-INFO [VHDL-1067] b20.vhd:1: processing 'b14(BEHAV)'
VERIFIC-INFO [VHDL-1172] b20.vhd:478: 'others' clause is never selected
VERIFIC-INFO [VHDL-1067] b20.vhd:511: processing 'b14rev(BEHAV)'
VERIFIC-INFO [VHDL-1172] b20.vhd:988: 'others' clause is never selected
Importing module b20.
Importing module b14(BEHAV).
Importing module b14rev(BEHAV).

3.3.1. Analyzing design hierarchy..
Top module:  \b20
Used module:     \b14rev(BEHAV)
Used module:     \b14(BEHAV)

3.3.2. Analyzing design hierarchy..
Top module:  \b20
Used module:     \b14rev(BEHAV)
Used module:     \b14(BEHAV)
Removed 0 unused modules.

yosys> proc

3.4. Executing PROC pass (convert processes to netlists).

yosys> proc_clean

3.4.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> proc_rmdead

3.4.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

yosys> proc_prune

3.4.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

yosys> proc_init

3.4.4. Executing PROC_INIT pass (extract init attributes).

yosys> proc_arst

3.4.5. Executing PROC_ARST pass (detect async resets in processes).

yosys> proc_rom

3.4.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

yosys> proc_mux

3.4.7. Executing PROC_MUX pass (convert decision trees to multiplexers).

yosys> proc_dlatch

3.4.8. Executing PROC_DLATCH pass (convert process syncs to latches).

yosys> proc_dff

3.4.9. Executing PROC_DFF pass (convert process syncs to FFs).

yosys> proc_memwr

3.4.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

yosys> proc_clean

3.4.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> opt_expr -keepdc

3.4.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module b14rev(BEHAV).
<suppressed ~26 debug messages>
Optimizing module b14(BEHAV).
<suppressed ~26 debug messages>
Optimizing module b20.

yosys> bmuxmap

3.5. Executing BMUXMAP pass.

yosys> demuxmap

3.6. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> flatten

3.7. Executing FLATTEN pass (flatten design).
Deleting now unused module b14(BEHAV).
Deleting now unused module b14rev(BEHAV).
<suppressed ~2 debug messages>

yosys> bmuxmap

3.8. Executing BMUXMAP pass.

yosys> demuxmap

3.9. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> tribuf -logic

3.10. Executing TRIBUF pass.

yosys> deminout

3.11. Executing DEMINOUT pass (demote inout ports to input or output).

yosys> opt_expr

3.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module b20.
<suppressed ~122 debug messages>

yosys> opt_clean

3.13. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b20..
Removed 26 unused cells and 444 unused wires.
<suppressed ~129 debug messages>

yosys> check

3.14. Executing CHECK pass (checking for obvious problems).
Checking module b20...
Found and reported 0 problems.

yosys> opt -nodffe -nosdff

3.15. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b20.
<suppressed ~3 debug messages>

yosys> opt_merge -nomux

3.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b20'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.15.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b20..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $flatten\P1.$verific$i684$b20.vhd:501$524.
    dead port 2/2 on $mux $flatten\P1.$verific$mux_672$b20.vhd:501$515.
    dead port 2/2 on $mux $flatten\P1.$verific$mux_685$b20.vhd:501$526.
    dead port 2/2 on $mux $flatten\P2.$verific$i653$b20.vhd:1011$1044.
    dead port 2/2 on $mux $flatten\P2.$verific$mux_641$b20.vhd:1011$1035.
    dead port 2/2 on $mux $flatten\P2.$verific$mux_654$b20.vhd:1011$1046.
Removed 6 multiplexer ports.
<suppressed ~50 debug messages>

yosys> opt_reduce

3.15.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b20.
    New ctrl vector for $pmux cell $flatten\P1.$verific$select_746$b20.vhd:486$477: { $flatten\P1.$verific$n2255$108 $auto$opt_reduce.cc:134:opt_pmux$1515 }
    New ctrl vector for $pmux cell $flatten\P1.$verific$select_750$b20.vhd:486$418: { $flatten\P1.$verific$n2256$109 $auto$opt_reduce.cc:134:opt_pmux$1517 }
    New ctrl vector for $pmux cell $flatten\P1.$verific$select_751$b20.vhd:486$495: { $flatten\P1.$verific$n2257$110 $auto$opt_reduce.cc:134:opt_pmux$1519 }
    New ctrl vector for $pmux cell $flatten\P1.$verific$select_752$b20.vhd:486$496: { $flatten\P1.$verific$n2258$111 $auto$opt_reduce.cc:134:opt_pmux$1521 }
    New ctrl vector for $pmux cell $flatten\P2.$verific$select_494$b20.vhd:953$991: { $flatten\P2.$verific$n2118$610 $auto$opt_reduce.cc:134:opt_pmux$1523 }
    New ctrl vector for $pmux cell $flatten\P2.$verific$select_495$b20.vhd:953$992: { $flatten\P2.$verific$n2120$612 $auto$opt_reduce.cc:134:opt_pmux$1525 }
    New ctrl vector for $pmux cell $flatten\P2.$verific$select_496$b20.vhd:953$993: { $flatten\P2.$verific$n2119$611 $auto$opt_reduce.cc:134:opt_pmux$1527 }
    New ctrl vector for $pmux cell $flatten\P2.$verific$select_497$b20.vhd:953$994: { $flatten\P2.$verific$n2121$613 $auto$opt_reduce.cc:134:opt_pmux$1529 }
    New ctrl vector for $pmux cell $flatten\P2.$verific$select_534$b20.vhd:973$997: { $flatten\P2.$verific$n2121$613 $auto$opt_reduce.cc:134:opt_pmux$1531 }
    New ctrl vector for $pmux cell $flatten\P2.$verific$select_535$b20.vhd:973$998: { $flatten\P2.$verific$n2119$611 $auto$opt_reduce.cc:134:opt_pmux$1533 }
    New ctrl vector for $pmux cell $flatten\P2.$verific$select_536$b20.vhd:973$999: { $flatten\P2.$verific$n2120$612 $auto$opt_reduce.cc:134:opt_pmux$1535 }
    New ctrl vector for $pmux cell $flatten\P2.$verific$select_537$b20.vhd:973$1000: { $flatten\P2.$verific$n2118$610 $auto$opt_reduce.cc:134:opt_pmux$1537 }
    New ctrl vector for $pmux cell $flatten\P2.$verific$select_617$b20.vhd:996$1011: { $flatten\P2.$verific$n2121$613 $auto$opt_reduce.cc:134:opt_pmux$1539 }
    New ctrl vector for $pmux cell $flatten\P2.$verific$select_618$b20.vhd:996$1012: { $flatten\P2.$verific$n2120$612 $auto$opt_reduce.cc:134:opt_pmux$1541 }
    New ctrl vector for $pmux cell $flatten\P2.$verific$select_619$b20.vhd:996$1013: { $flatten\P2.$verific$n2119$611 $auto$opt_reduce.cc:134:opt_pmux$1543 }
    New ctrl vector for $pmux cell $flatten\P2.$verific$select_620$b20.vhd:996$1014: { $flatten\P2.$verific$n2118$610 $auto$opt_reduce.cc:134:opt_pmux$1545 }
    New ctrl vector for $pmux cell $flatten\P2.$verific$select_717$b20.vhd:873$982: { $flatten\P2.$verific$n2118$610 $auto$opt_reduce.cc:134:opt_pmux$1547 }
    New ctrl vector for $pmux cell $flatten\P2.$verific$select_718$b20.vhd:873$988: { $flatten\P2.$verific$n2119$611 $auto$opt_reduce.cc:134:opt_pmux$1549 }
    New ctrl vector for $pmux cell $flatten\P2.$verific$select_719$b20.vhd:873$989: { $flatten\P2.$verific$n2120$612 $auto$opt_reduce.cc:134:opt_pmux$1551 }
    New ctrl vector for $pmux cell $flatten\P2.$verific$select_720$b20.vhd:873$990: { $flatten\P2.$verific$n2121$613 $auto$opt_reduce.cc:134:opt_pmux$1553 }
  Optimizing cells in module \b20.
Performed a total of 20 changes.

yosys> opt_merge

3.15.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b20'.
<suppressed ~54 debug messages>
Removed a total of 18 cells.

yosys> opt_dff -nodffe -nosdff

3.15.6. Executing OPT_DFF pass (perform DFF optimizations).
Changing const-value async load to async reset on $flatten\P2.$verific$wr_reg$b20.vhd:1015$1081 ($aldff) from module b20.
Changing const-value async load to async reset on $flatten\P2.$verific$state_reg$b20.vhd:1015$1083 ($aldff) from module b20.
Changing const-value async load to async reset on $flatten\P2.$verific$reg3_reg$b20.vhd:1015$1078 ($aldff) from module b20.
Changing const-value async load to async reset on $flatten\P2.$verific$reg2_reg$b20.vhd:1015$1077 ($aldff) from module b20.
Changing const-value async load to async reset on $flatten\P2.$verific$reg1_reg$b20.vhd:1015$1076 ($aldff) from module b20.
Changing const-value async load to async reset on $flatten\P2.$verific$reg0_reg$b20.vhd:1015$1075 ($aldff) from module b20.
Changing const-value async load to async reset on $flatten\P2.$verific$rd_reg$b20.vhd:1015$1080 ($aldff) from module b20.
Changing const-value async load to async reset on $flatten\P2.$verific$datao_reg$b20.vhd:1015$1082 ($aldff) from module b20.
Changing const-value async load to async reset on $flatten\P2.$verific$d_reg$b20.vhd:1015$1073 ($aldff) from module b20.
Changing const-value async load to async reset on $flatten\P2.$verific$addr_reg$b20.vhd:1015$1079 ($aldff) from module b20.
Changing const-value async load to async reset on $flatten\P2.$verific$IR_reg$b20.vhd:1015$1072 ($aldff) from module b20.
Changing const-value async load to async reset on $flatten\P2.$verific$B_reg$b20.vhd:1015$1074 ($aldff) from module b20.
Changing const-value async load to async reset on $flatten\P1.$verific$wr_reg$b20.vhd:505$561 ($aldff) from module b20.
Changing const-value async load to async reset on $flatten\P1.$verific$state_reg$b20.vhd:505$563 ($aldff) from module b20.
Changing const-value async load to async reset on $flatten\P1.$verific$reg3_reg$b20.vhd:505$558 ($aldff) from module b20.
Changing const-value async load to async reset on $flatten\P1.$verific$reg2_reg$b20.vhd:505$557 ($aldff) from module b20.
Changing const-value async load to async reset on $flatten\P1.$verific$reg1_reg$b20.vhd:505$556 ($aldff) from module b20.
Changing const-value async load to async reset on $flatten\P1.$verific$reg0_reg$b20.vhd:505$555 ($aldff) from module b20.
Changing const-value async load to async reset on $flatten\P1.$verific$rd_reg$b20.vhd:505$560 ($aldff) from module b20.
Changing const-value async load to async reset on $flatten\P1.$verific$datao_reg$b20.vhd:505$562 ($aldff) from module b20.
Changing const-value async load to async reset on $flatten\P1.$verific$d_reg$b20.vhd:505$553 ($aldff) from module b20.
Changing const-value async load to async reset on $flatten\P1.$verific$addr_reg$b20.vhd:505$559 ($aldff) from module b20.
Changing const-value async load to async reset on $flatten\P1.$verific$IR_reg$b20.vhd:505$552 ($aldff) from module b20.
Changing const-value async load to async reset on $flatten\P1.$verific$B_reg$b20.vhd:505$554 ($aldff) from module b20.

yosys> opt_clean

3.15.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b20..
Removed 0 unused cells and 21 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.15.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module b20.
<suppressed ~4 debug messages>

3.15.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.15.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b20..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~49 debug messages>

yosys> opt_reduce

3.15.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b20.
Performed a total of 0 changes.

yosys> opt_merge

3.15.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b20'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.15.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.15.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b20..

yosys> opt_expr

3.15.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module b20.

3.15.16. Finished OPT passes. (There is nothing left to do.)

yosys> fsm -encoding binary

3.16. Executing FSM pass (extract and optimize FSM).

yosys> fsm_detect

3.16.1. Executing FSM_DETECT pass (finding FSMs in design).
Found FSM state register b20.P1.d.
Found FSM state register b20.P2.d.

yosys> fsm_extract

3.16.2. Executing FSM_EXTRACT pass (extracting FSM from design).
Extracting FSM `\P1.d' from module `\b20'.
  found $adff cell for state register: $flatten\P1.$verific$d_reg$b20.vhd:505$553
  root of input selection tree: $flatten\P1.$verific$n11472$358
  found reset state: 0 (from async reset)
  found ctrl input: \P1.state
  found ctrl input: $flatten\P1.$verific$n341$204 [0]
  found ctrl input: $flatten\P1.$verific$n10346$175
  found ctrl input: $flatten\P1.$verific$n1405$102
  found ctrl input: $flatten\P1.$verific$n1440$103
  found ctrl input: $flatten\P1.$verific$n1474$104
  found ctrl input: $flatten\P1.$verific$n1475$105
  found ctrl input: $flatten\P1.$verific$n1476$106
  found ctrl input: $flatten\P1.$verific$n1477$107
  found state code: 1
  found state code: 2
  found state code: 3
  found ctrl input: \P1.B
  ctrl inputs: { \P1.state \P1.B $flatten\P1.$verific$n341$204 [0] $flatten\P1.$verific$n1477$107 $flatten\P1.$verific$n1476$106 $flatten\P1.$verific$n1475$105 $flatten\P1.$verific$n1474$104 $flatten\P1.$verific$n1440$103 $flatten\P1.$verific$n1405$102 $flatten\P1.$verific$n10346$175 }
  ctrl outputs: $flatten\P1.$verific$n11472$358
  transition:          0 10'0--------- ->          0 0
  transition:          0 10'1-00000000 ->          0 0
  transition:          0 10'1-01000000 ->          0 0
  transition:          0 10'1-0-100000 ->          1 1
  transition:          0 10'1-0--10000 ->          2 2
  transition:          0 10'1-0---1000 ->          3 3
  transition:          0 10'100----100 ->          0 0
  transition:          0 10'110----100 ->          3 3
  transition:          0 10'100-----10 ->          3 3
  transition:          0 10'110-----10 ->          0 0
  transition:          0 10'1-0------1 ->          0 0
  transition:          0 10'1-1------- ->          0 0
  transition:          2 10'0--------- ->          2 2
  transition:          2 10'1-00000000 ->          2 2
  transition:          2 10'1-01000000 ->          0 0
  transition:          2 10'1-0-100000 ->          1 1
  transition:          2 10'1-0--10000 ->          2 2
  transition:          2 10'1-0---1000 ->          3 3
  transition:          2 10'100----100 ->          2 2
  transition:          2 10'110----100 ->          3 3
  transition:          2 10'100-----10 ->          3 3
  transition:          2 10'110-----10 ->          2 2
  transition:          2 10'1-0------1 ->          2 2
  transition:          2 10'1-1------- ->          2 2
  transition:          1 10'0--------- ->          1 1
  transition:          1 10'1-00000000 ->          1 1
  transition:          1 10'1-01000000 ->          0 0
  transition:          1 10'1-0-100000 ->          1 1
  transition:          1 10'1-0--10000 ->          2 2
  transition:          1 10'1-0---1000 ->          3 3
  transition:          1 10'100----100 ->          1 1
  transition:          1 10'110----100 ->          3 3
  transition:          1 10'100-----10 ->          3 3
  transition:          1 10'110-----10 ->          1 1
  transition:          1 10'1-0------1 ->          1 1
  transition:          1 10'1-1------- ->          1 1
  transition:          3 10'0--------- ->          3 3
  transition:          3 10'1-00000000 ->          3 3
  transition:          3 10'1-01000000 ->          0 0
  transition:          3 10'1-0-100000 ->          1 1
  transition:          3 10'1-0--10000 ->          2 2
  transition:          3 10'1-0---1000 ->          3 3
  transition:          3 10'100----100 ->          3 3
  transition:          3 10'110----100 ->          3 3
  transition:          3 10'100-----10 ->          3 3
  transition:          3 10'110-----10 ->          3 3
  transition:          3 10'1-0------1 ->          3 3
  transition:          3 10'1-1------- ->          3 3
Extracting FSM `\P2.d' from module `\b20'.
  found $adff cell for state register: $flatten\P2.$verific$d_reg$b20.vhd:1015$1073
  root of input selection tree: $flatten\P2.$verific$n11328$861
  found reset state: 0 (from async reset)
  found ctrl input: \P2.state
  found ctrl input: $flatten\P2.$verific$n341$704 [0]
  found ctrl input: $flatten\P2.$verific$n10195$677
  found ctrl input: $flatten\P2.$verific$n1406$604
  found ctrl input: $flatten\P2.$verific$n1441$605
  found ctrl input: $flatten\P2.$verific$n1475$606
  found ctrl input: $flatten\P2.$verific$n1476$607
  found ctrl input: $flatten\P2.$verific$n1477$608
  found ctrl input: $flatten\P2.$verific$n1478$609
  found state code: 1
  found state code: 2
  found state code: 3
  found ctrl input: \P2.B
  ctrl inputs: { \P2.state \P2.B $flatten\P2.$verific$n341$704 [0] $flatten\P2.$verific$n1478$609 $flatten\P2.$verific$n1477$608 $flatten\P2.$verific$n1476$607 $flatten\P2.$verific$n1475$606 $flatten\P2.$verific$n1441$605 $flatten\P2.$verific$n1406$604 $flatten\P2.$verific$n10195$677 }
  ctrl outputs: $flatten\P2.$verific$n11328$861
  transition:          0 10'0--------- ->          0 0
  transition:          0 10'1-00000000 ->          0 0
  transition:          0 10'1-01000000 ->          0 0
  transition:          0 10'1-0-100000 ->          1 1
  transition:          0 10'1-0--10000 ->          2 2
  transition:          0 10'1-0---1000 ->          3 3
  transition:          0 10'100----100 ->          0 0
  transition:          0 10'110----100 ->          3 3
  transition:          0 10'100-----10 ->          3 3
  transition:          0 10'110-----10 ->          0 0
  transition:          0 10'1-0------1 ->          0 0
  transition:          0 10'1-1------- ->          0 0
  transition:          2 10'0--------- ->          2 2
  transition:          2 10'1-00000000 ->          2 2
  transition:          2 10'1-01000000 ->          0 0
  transition:          2 10'1-0-100000 ->          1 1
  transition:          2 10'1-0--10000 ->          2 2
  transition:          2 10'1-0---1000 ->          3 3
  transition:          2 10'100----100 ->          2 2
  transition:          2 10'110----100 ->          3 3
  transition:          2 10'100-----10 ->          3 3
  transition:          2 10'110-----10 ->          2 2
  transition:          2 10'1-0------1 ->          2 2
  transition:          2 10'1-1------- ->          2 2
  transition:          1 10'0--------- ->          1 1
  transition:          1 10'1-00000000 ->          1 1
  transition:          1 10'1-01000000 ->          0 0
  transition:          1 10'1-0-100000 ->          1 1
  transition:          1 10'1-0--10000 ->          2 2
  transition:          1 10'1-0---1000 ->          3 3
  transition:          1 10'100----100 ->          1 1
  transition:          1 10'110----100 ->          3 3
  transition:          1 10'100-----10 ->          3 3
  transition:          1 10'110-----10 ->          1 1
  transition:          1 10'1-0------1 ->          1 1
  transition:          1 10'1-1------- ->          1 1
  transition:          3 10'0--------- ->          3 3
  transition:          3 10'1-00000000 ->          3 3
  transition:          3 10'1-01000000 ->          0 0
  transition:          3 10'1-0-100000 ->          1 1
  transition:          3 10'1-0--10000 ->          2 2
  transition:          3 10'1-0---1000 ->          3 3
  transition:          3 10'100----100 ->          3 3
  transition:          3 10'110----100 ->          3 3
  transition:          3 10'100-----10 ->          3 3
  transition:          3 10'110-----10 ->          3 3
  transition:          3 10'1-0------1 ->          3 3
  transition:          3 10'1-1------- ->          3 3

yosys> fsm_opt

3.16.3. Executing FSM_OPT pass (simple optimizations of FSMs).
Optimizing FSM `$fsm$\P2.d$1556' from module `\b20'.
  Merging pattern 10'1-00000000 and 10'1-01000000 from group (0 0 0).
  Merging pattern 10'1-01000000 and 10'1-00000000 from group (0 0 0).
  Merging pattern 10'100----100 and 10'110----100 from group (3 3 3).
  Merging pattern 10'110----100 and 10'100----100 from group (3 3 3).
  Merging pattern 10'100-----10 and 10'110-----10 from group (3 3 3).
  Merging pattern 10'110-----10 and 10'100-----10 from group (3 3 3).
Optimizing FSM `$fsm$\P1.d$1554' from module `\b20'.
  Merging pattern 10'1-00000000 and 10'1-01000000 from group (0 0 0).
  Merging pattern 10'1-01000000 and 10'1-00000000 from group (0 0 0).
  Merging pattern 10'100----100 and 10'110----100 from group (3 3 3).
  Merging pattern 10'110----100 and 10'100----100 from group (3 3 3).
  Merging pattern 10'100-----10 and 10'110-----10 from group (3 3 3).
  Merging pattern 10'110-----10 and 10'100-----10 from group (3 3 3).

yosys> opt_clean

3.16.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b20..
Removed 6 unused cells and 6 unused wires.
<suppressed ~7 debug messages>

yosys> fsm_opt

3.16.5. Executing FSM_OPT pass (simple optimizations of FSMs).
Optimizing FSM `$fsm$\P1.d$1554' from module `\b20'.
Optimizing FSM `$fsm$\P2.d$1556' from module `\b20'.

yosys> fsm_recode -encoding binary

3.16.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).
Recoding FSM `$fsm$\P1.d$1554' from module `\b20' using `auto' encoding:
  mapping auto encoding to `binary` for this FSM.
  00000000000000000000000000000000 -> 00
  00000000000000000000000000000010 -> 01
  00000000000000000000000000000001 -> 10
  00000000000000000000000000000011 -> 11
Recoding FSM `$fsm$\P2.d$1556' from module `\b20' using `auto' encoding:
  mapping auto encoding to `binary` for this FSM.
  00000000000000000000000000000000 -> 00
  00000000000000000000000000000010 -> 01
  00000000000000000000000000000001 -> 10
  00000000000000000000000000000011 -> 11

yosys> fsm_info

3.16.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

FSM `$fsm$\P1.d$1554' from module `b20':
-------------------------------------

  Information on FSM $fsm$\P1.d$1554 (\P1.d):

  Number of input signals:   10
  Number of output signals:  32
  Number of state bits:       2

  Input signals:
    0: $flatten\P1.$verific$n10346$175
    1: $flatten\P1.$verific$n1405$102
    2: $flatten\P1.$verific$n1440$103
    3: $flatten\P1.$verific$n1474$104
    4: $flatten\P1.$verific$n1475$105
    5: $flatten\P1.$verific$n1476$106
    6: $flatten\P1.$verific$n1477$107
    7: $flatten\P1.$verific$n341$204 [0]
    8: \P1.B
    9: \P1.state

  Output signals:
    0: $flatten\P1.$verific$n11472$358 [0]
    1: $flatten\P1.$verific$n11472$358 [1]
    2: $flatten\P1.$verific$n11472$358 [2]
    3: $flatten\P1.$verific$n11472$358 [3]
    4: $flatten\P1.$verific$n11472$358 [4]
    5: $flatten\P1.$verific$n11472$358 [5]
    6: $flatten\P1.$verific$n11472$358 [6]
    7: $flatten\P1.$verific$n11472$358 [7]
    8: $flatten\P1.$verific$n11472$358 [8]
    9: $flatten\P1.$verific$n11472$358 [9]
   10: $flatten\P1.$verific$n11472$358 [10]
   11: $flatten\P1.$verific$n11472$358 [11]
   12: $flatten\P1.$verific$n11472$358 [12]
   13: $flatten\P1.$verific$n11472$358 [13]
   14: $flatten\P1.$verific$n11472$358 [14]
   15: $flatten\P1.$verific$n11472$358 [15]
   16: $flatten\P1.$verific$n11472$358 [16]
   17: $flatten\P1.$verific$n11472$358 [17]
   18: $flatten\P1.$verific$n11472$358 [18]
   19: $flatten\P1.$verific$n11472$358 [19]
   20: $flatten\P1.$verific$n11472$358 [20]
   21: $flatten\P1.$verific$n11472$358 [21]
   22: $flatten\P1.$verific$n11472$358 [22]
   23: $flatten\P1.$verific$n11472$358 [23]
   24: $flatten\P1.$verific$n11472$358 [24]
   25: $flatten\P1.$verific$n11472$358 [25]
   26: $flatten\P1.$verific$n11472$358 [26]
   27: $flatten\P1.$verific$n11472$358 [27]
   28: $flatten\P1.$verific$n11472$358 [28]
   29: $flatten\P1.$verific$n11472$358 [29]
   30: $flatten\P1.$verific$n11472$358 [30]
   31: $flatten\P1.$verific$n11472$358 [31]

  State encoding:
    0:       2'00  <RESET STATE>
    1:       2'01
    2:       2'10
    3:       2'11

  Transition Table (state_in, ctrl_in, state_out, ctrl_out):
      0:     0 10'1-0-000000   ->     0 0
      1:     0 10'100----100   ->     0 0
      2:     0 10'110-----10   ->     0 0
      3:     0 10'1-0------1   ->     0 0
      4:     0 10'1-1-------   ->     0 0
      5:     0 10'0---------   ->     0 0
      6:     0 10'1-0--10000   ->     1 2
      7:     0 10'1-0-100000   ->     2 1
      8:     0 10'1-0---1000   ->     3 3
      9:     0 10'110----100   ->     3 3
     10:     0 10'100-----10   ->     3 3
     11:     1 10'1-01000000   ->     0 0
     12:     1 10'1-00000000   ->     1 2
     13:     1 10'1-0--10000   ->     1 2
     14:     1 10'100----100   ->     1 2
     15:     1 10'110-----10   ->     1 2
     16:     1 10'1-0------1   ->     1 2
     17:     1 10'1-1-------   ->     1 2
     18:     1 10'0---------   ->     1 2
     19:     1 10'1-0-100000   ->     2 1
     20:     1 10'1-0---1000   ->     3 3
     21:     1 10'110----100   ->     3 3
     22:     1 10'100-----10   ->     3 3
     23:     2 10'1-01000000   ->     0 0
     24:     2 10'1-0--10000   ->     1 2
     25:     2 10'1-00000000   ->     2 1
     26:     2 10'1-0-100000   ->     2 1
     27:     2 10'100----100   ->     2 1
     28:     2 10'110-----10   ->     2 1
     29:     2 10'1-0------1   ->     2 1
     30:     2 10'1-1-------   ->     2 1
     31:     2 10'0---------   ->     2 1
     32:     2 10'1-0---1000   ->     3 3
     33:     2 10'110----100   ->     3 3
     34:     2 10'100-----10   ->     3 3
     35:     3 10'1-01000000   ->     0 0
     36:     3 10'1-0--10000   ->     1 2
     37:     3 10'1-0-100000   ->     2 1
     38:     3 10'1-00000000   ->     3 3
     39:     3 10'1-0---1000   ->     3 3
     40:     3 10'1-0----100   ->     3 3
     41:     3 10'1-0-----10   ->     3 3
     42:     3 10'1-0------1   ->     3 3
     43:     3 10'1-1-------   ->     3 3
     44:     3 10'0---------   ->     3 3

-------------------------------------

FSM `$fsm$\P2.d$1556' from module `b20':
-------------------------------------

  Information on FSM $fsm$\P2.d$1556 (\P2.d):

  Number of input signals:   10
  Number of output signals:  32
  Number of state bits:       2

  Input signals:
    0: $flatten\P2.$verific$n10195$677
    1: $flatten\P2.$verific$n1406$604
    2: $flatten\P2.$verific$n1441$605
    3: $flatten\P2.$verific$n1475$606
    4: $flatten\P2.$verific$n1476$607
    5: $flatten\P2.$verific$n1477$608
    6: $flatten\P2.$verific$n1478$609
    7: $flatten\P2.$verific$n341$704 [0]
    8: \P2.B
    9: \P2.state

  Output signals:
    0: $flatten\P2.$verific$n11328$861 [0]
    1: $flatten\P2.$verific$n11328$861 [1]
    2: $flatten\P2.$verific$n11328$861 [2]
    3: $flatten\P2.$verific$n11328$861 [3]
    4: $flatten\P2.$verific$n11328$861 [4]
    5: $flatten\P2.$verific$n11328$861 [5]
    6: $flatten\P2.$verific$n11328$861 [6]
    7: $flatten\P2.$verific$n11328$861 [7]
    8: $flatten\P2.$verific$n11328$861 [8]
    9: $flatten\P2.$verific$n11328$861 [9]
   10: $flatten\P2.$verific$n11328$861 [10]
   11: $flatten\P2.$verific$n11328$861 [11]
   12: $flatten\P2.$verific$n11328$861 [12]
   13: $flatten\P2.$verific$n11328$861 [13]
   14: $flatten\P2.$verific$n11328$861 [14]
   15: $flatten\P2.$verific$n11328$861 [15]
   16: $flatten\P2.$verific$n11328$861 [16]
   17: $flatten\P2.$verific$n11328$861 [17]
   18: $flatten\P2.$verific$n11328$861 [18]
   19: $flatten\P2.$verific$n11328$861 [19]
   20: $flatten\P2.$verific$n11328$861 [20]
   21: $flatten\P2.$verific$n11328$861 [21]
   22: $flatten\P2.$verific$n11328$861 [22]
   23: $flatten\P2.$verific$n11328$861 [23]
   24: $flatten\P2.$verific$n11328$861 [24]
   25: $flatten\P2.$verific$n11328$861 [25]
   26: $flatten\P2.$verific$n11328$861 [26]
   27: $flatten\P2.$verific$n11328$861 [27]
   28: $flatten\P2.$verific$n11328$861 [28]
   29: $flatten\P2.$verific$n11328$861 [29]
   30: $flatten\P2.$verific$n11328$861 [30]
   31: $flatten\P2.$verific$n11328$861 [31]

  State encoding:
    0:       2'00  <RESET STATE>
    1:       2'01
    2:       2'10
    3:       2'11

  Transition Table (state_in, ctrl_in, state_out, ctrl_out):
      0:     0 10'1-0-000000   ->     0 0
      1:     0 10'100----100   ->     0 0
      2:     0 10'110-----10   ->     0 0
      3:     0 10'1-0------1   ->     0 0
      4:     0 10'1-1-------   ->     0 0
      5:     0 10'0---------   ->     0 0
      6:     0 10'1-0--10000   ->     1 2
      7:     0 10'1-0-100000   ->     2 1
      8:     0 10'1-0---1000   ->     3 3
      9:     0 10'110----100   ->     3 3
     10:     0 10'100-----10   ->     3 3
     11:     1 10'1-01000000   ->     0 0
     12:     1 10'1-00000000   ->     1 2
     13:     1 10'1-0--10000   ->     1 2
     14:     1 10'100----100   ->     1 2
     15:     1 10'110-----10   ->     1 2
     16:     1 10'1-0------1   ->     1 2
     17:     1 10'1-1-------   ->     1 2
     18:     1 10'0---------   ->     1 2
     19:     1 10'1-0-100000   ->     2 1
     20:     1 10'1-0---1000   ->     3 3
     21:     1 10'110----100   ->     3 3
     22:     1 10'100-----10   ->     3 3
     23:     2 10'1-01000000   ->     0 0
     24:     2 10'1-0--10000   ->     1 2
     25:     2 10'1-00000000   ->     2 1
     26:     2 10'1-0-100000   ->     2 1
     27:     2 10'100----100   ->     2 1
     28:     2 10'110-----10   ->     2 1
     29:     2 10'1-0------1   ->     2 1
     30:     2 10'1-1-------   ->     2 1
     31:     2 10'0---------   ->     2 1
     32:     2 10'1-0---1000   ->     3 3
     33:     2 10'110----100   ->     3 3
     34:     2 10'100-----10   ->     3 3
     35:     3 10'1-01000000   ->     0 0
     36:     3 10'1-0--10000   ->     1 2
     37:     3 10'1-0-100000   ->     2 1
     38:     3 10'1-00000000   ->     3 3
     39:     3 10'1-0---1000   ->     3 3
     40:     3 10'1-0----100   ->     3 3
     41:     3 10'1-0-----10   ->     3 3
     42:     3 10'1-0------1   ->     3 3
     43:     3 10'1-1-------   ->     3 3
     44:     3 10'0---------   ->     3 3

-------------------------------------

yosys> fsm_map

3.16.8. Executing FSM_MAP pass (mapping FSMs to basic logic).
Mapping FSM `$fsm$\P1.d$1554' from module `\b20'.
Mapping FSM `$fsm$\P2.d$1556' from module `\b20'.

yosys> opt -sat

3.17. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.17.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b20.
<suppressed ~14 debug messages>

yosys> opt_merge -nomux

3.17.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b20'.
<suppressed ~324 debug messages>
Removed a total of 108 cells.

yosys> opt_muxtree

3.17.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b20..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~49 debug messages>

yosys> opt_reduce

3.17.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b20.
Performed a total of 0 changes.

yosys> opt_merge

3.17.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b20'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.17.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $flatten\P2.$verific$reg3_reg$b20.vhd:1015$1078 ($adff) from module b20 (D = $flatten\P2.$verific$n11034$856, Q = \P2.reg3).
Adding EN signal on $flatten\P2.$verific$reg2_reg$b20.vhd:1015$1077 ($adff) from module b20 (D = $flatten\P2.$auto$bmuxmap.cc:58:execute$1152, Q = \P2.reg2).
Adding EN signal on $flatten\P2.$verific$reg1_reg$b20.vhd:1015$1076 ($adff) from module b20 (D = $flatten\P2.$auto$bmuxmap.cc:58:execute$1171, Q = \P2.reg1).
Adding EN signal on $flatten\P2.$verific$reg0_reg$b20.vhd:1015$1075 ($adff) from module b20 (D = $flatten\P2.$auto$bmuxmap.cc:58:execute$1190, Q = \P2.reg0).
Adding EN signal on $flatten\P2.$verific$datao_reg$b20.vhd:1015$1082 ($adff) from module b20 (D = $flatten\P2.$auto$bmuxmap.cc:58:execute$1301, Q = \P2.datao).
Adding EN signal on $flatten\P2.$verific$addr_reg$b20.vhd:1015$1079 ($adff) from module b20 (D = $flatten\P2.$verific$n11102$858, Q = \P2.addr).
Adding EN signal on $flatten\P2.$verific$B_reg$b20.vhd:1015$1074 ($adff) from module b20 (D = $flatten\P2.$verific$n10835$683, Q = \P2.B).
Adding EN signal on $flatten\P1.$verific$reg3_reg$b20.vhd:505$558 ($adff) from module b20 (D = $flatten\P1.$verific$n11178$353 [31:3], Q = \P1.reg3 [31:3]).
Adding EN signal on $flatten\P1.$verific$reg3_reg$b20.vhd:505$558 ($adff) from module b20 (D = $flatten\P1.$auto$bmuxmap.cc:58:execute$1344 [2:0], Q = \P1.reg3 [2:0]).
Adding EN signal on $flatten\P1.$verific$reg2_reg$b20.vhd:505$557 ($adff) from module b20 (D = $flatten\P1.$auto$bmuxmap.cc:58:execute$1363, Q = \P1.reg2).
Adding EN signal on $flatten\P1.$verific$reg1_reg$b20.vhd:505$556 ($adff) from module b20 (D = $flatten\P1.$auto$bmuxmap.cc:58:execute$1382, Q = \P1.reg1).
Adding EN signal on $flatten\P1.$verific$reg0_reg$b20.vhd:505$555 ($adff) from module b20 (D = $flatten\P1.$auto$bmuxmap.cc:58:execute$1401, Q = \P1.reg0).
Adding EN signal on $flatten\P1.$verific$datao_reg$b20.vhd:505$562 ($adff) from module b20 (D = { $flatten\P1.$auto$bmuxmap.cc:58:execute$1507 [31:29] $flatten\P1.$auto$bmuxmap.cc:58:execute$1460 [124:96] }, Q = \P1.datao).
Adding EN signal on $flatten\P1.$verific$addr_reg$b20.vhd:505$559 ($adff) from module b20 (D = $flatten\P1.$verific$n11246$355, Q = \P1.addr).
Adding EN signal on $flatten\P1.$verific$B_reg$b20.vhd:505$554 ($adff) from module b20 (D = $flatten\P1.$verific$n10979$183, Q = \P1.B).

yosys> opt_clean

3.17.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b20..
Removed 48 unused cells and 152 unused wires.
<suppressed ~49 debug messages>

yosys> opt_expr

3.17.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module b20.
<suppressed ~2 debug messages>

3.17.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.17.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b20..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~48 debug messages>

yosys> opt_reduce

3.17.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b20.
Performed a total of 0 changes.

yosys> opt_merge

3.17.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b20'.
<suppressed ~72 debug messages>
Removed a total of 24 cells.

yosys> opt_dff -sat

3.17.13. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 2 on $flatten\P1.$verific$d_reg$b20.vhd:505$553 ($adff) from module b20.
Setting constant 0-bit at position 3 on $flatten\P1.$verific$d_reg$b20.vhd:505$553 ($adff) from module b20.
Setting constant 0-bit at position 4 on $flatten\P1.$verific$d_reg$b20.vhd:505$553 ($adff) from module b20.
Setting constant 0-bit at position 5 on $flatten\P1.$verific$d_reg$b20.vhd:505$553 ($adff) from module b20.
Setting constant 0-bit at position 6 on $flatten\P1.$verific$d_reg$b20.vhd:505$553 ($adff) from module b20.
Setting constant 0-bit at position 7 on $flatten\P1.$verific$d_reg$b20.vhd:505$553 ($adff) from module b20.
Setting constant 0-bit at position 8 on $flatten\P1.$verific$d_reg$b20.vhd:505$553 ($adff) from module b20.
Setting constant 0-bit at position 9 on $flatten\P1.$verific$d_reg$b20.vhd:505$553 ($adff) from module b20.
Setting constant 0-bit at position 10 on $flatten\P1.$verific$d_reg$b20.vhd:505$553 ($adff) from module b20.
Setting constant 0-bit at position 11 on $flatten\P1.$verific$d_reg$b20.vhd:505$553 ($adff) from module b20.
Setting constant 0-bit at position 12 on $flatten\P1.$verific$d_reg$b20.vhd:505$553 ($adff) from module b20.
Setting constant 0-bit at position 13 on $flatten\P1.$verific$d_reg$b20.vhd:505$553 ($adff) from module b20.
Setting constant 0-bit at position 14 on $flatten\P1.$verific$d_reg$b20.vhd:505$553 ($adff) from module b20.
Setting constant 0-bit at position 15 on $flatten\P1.$verific$d_reg$b20.vhd:505$553 ($adff) from module b20.
Setting constant 0-bit at position 16 on $flatten\P1.$verific$d_reg$b20.vhd:505$553 ($adff) from module b20.
Setting constant 0-bit at position 17 on $flatten\P1.$verific$d_reg$b20.vhd:505$553 ($adff) from module b20.
Setting constant 0-bit at position 18 on $flatten\P1.$verific$d_reg$b20.vhd:505$553 ($adff) from module b20.
Setting constant 0-bit at position 19 on $flatten\P1.$verific$d_reg$b20.vhd:505$553 ($adff) from module b20.
Setting constant 0-bit at position 20 on $flatten\P1.$verific$d_reg$b20.vhd:505$553 ($adff) from module b20.
Setting constant 0-bit at position 21 on $flatten\P1.$verific$d_reg$b20.vhd:505$553 ($adff) from module b20.
Setting constant 0-bit at position 22 on $flatten\P1.$verific$d_reg$b20.vhd:505$553 ($adff) from module b20.
Setting constant 0-bit at position 23 on $flatten\P1.$verific$d_reg$b20.vhd:505$553 ($adff) from module b20.
Setting constant 0-bit at position 24 on $flatten\P1.$verific$d_reg$b20.vhd:505$553 ($adff) from module b20.
Setting constant 0-bit at position 25 on $flatten\P1.$verific$d_reg$b20.vhd:505$553 ($adff) from module b20.
Setting constant 0-bit at position 26 on $flatten\P1.$verific$d_reg$b20.vhd:505$553 ($adff) from module b20.
Setting constant 0-bit at position 27 on $flatten\P1.$verific$d_reg$b20.vhd:505$553 ($adff) from module b20.
Setting constant 0-bit at position 28 on $flatten\P1.$verific$d_reg$b20.vhd:505$553 ($adff) from module b20.
Setting constant 0-bit at position 29 on $flatten\P1.$verific$d_reg$b20.vhd:505$553 ($adff) from module b20.
Setting constant 0-bit at position 30 on $flatten\P1.$verific$d_reg$b20.vhd:505$553 ($adff) from module b20.
Setting constant 0-bit at position 31 on $flatten\P1.$verific$d_reg$b20.vhd:505$553 ($adff) from module b20.
Setting constant 0-bit at position 2 on $flatten\P2.$verific$d_reg$b20.vhd:1015$1073 ($adff) from module b20.
Setting constant 0-bit at position 3 on $flatten\P2.$verific$d_reg$b20.vhd:1015$1073 ($adff) from module b20.
Setting constant 0-bit at position 4 on $flatten\P2.$verific$d_reg$b20.vhd:1015$1073 ($adff) from module b20.
Setting constant 0-bit at position 5 on $flatten\P2.$verific$d_reg$b20.vhd:1015$1073 ($adff) from module b20.
Setting constant 0-bit at position 6 on $flatten\P2.$verific$d_reg$b20.vhd:1015$1073 ($adff) from module b20.
Setting constant 0-bit at position 7 on $flatten\P2.$verific$d_reg$b20.vhd:1015$1073 ($adff) from module b20.
Setting constant 0-bit at position 8 on $flatten\P2.$verific$d_reg$b20.vhd:1015$1073 ($adff) from module b20.
Setting constant 0-bit at position 9 on $flatten\P2.$verific$d_reg$b20.vhd:1015$1073 ($adff) from module b20.
Setting constant 0-bit at position 10 on $flatten\P2.$verific$d_reg$b20.vhd:1015$1073 ($adff) from module b20.
Setting constant 0-bit at position 11 on $flatten\P2.$verific$d_reg$b20.vhd:1015$1073 ($adff) from module b20.
Setting constant 0-bit at position 12 on $flatten\P2.$verific$d_reg$b20.vhd:1015$1073 ($adff) from module b20.
Setting constant 0-bit at position 13 on $flatten\P2.$verific$d_reg$b20.vhd:1015$1073 ($adff) from module b20.
Setting constant 0-bit at position 14 on $flatten\P2.$verific$d_reg$b20.vhd:1015$1073 ($adff) from module b20.
Setting constant 0-bit at position 15 on $flatten\P2.$verific$d_reg$b20.vhd:1015$1073 ($adff) from module b20.
Setting constant 0-bit at position 16 on $flatten\P2.$verific$d_reg$b20.vhd:1015$1073 ($adff) from module b20.
Setting constant 0-bit at position 17 on $flatten\P2.$verific$d_reg$b20.vhd:1015$1073 ($adff) from module b20.
Setting constant 0-bit at position 18 on $flatten\P2.$verific$d_reg$b20.vhd:1015$1073 ($adff) from module b20.
Setting constant 0-bit at position 19 on $flatten\P2.$verific$d_reg$b20.vhd:1015$1073 ($adff) from module b20.
Setting constant 0-bit at position 20 on $flatten\P2.$verific$d_reg$b20.vhd:1015$1073 ($adff) from module b20.
Setting constant 0-bit at position 21 on $flatten\P2.$verific$d_reg$b20.vhd:1015$1073 ($adff) from module b20.
Setting constant 0-bit at position 22 on $flatten\P2.$verific$d_reg$b20.vhd:1015$1073 ($adff) from module b20.
Setting constant 0-bit at position 23 on $flatten\P2.$verific$d_reg$b20.vhd:1015$1073 ($adff) from module b20.
Setting constant 0-bit at position 24 on $flatten\P2.$verific$d_reg$b20.vhd:1015$1073 ($adff) from module b20.
Setting constant 0-bit at position 25 on $flatten\P2.$verific$d_reg$b20.vhd:1015$1073 ($adff) from module b20.
Setting constant 0-bit at position 26 on $flatten\P2.$verific$d_reg$b20.vhd:1015$1073 ($adff) from module b20.
Setting constant 0-bit at position 27 on $flatten\P2.$verific$d_reg$b20.vhd:1015$1073 ($adff) from module b20.
Setting constant 0-bit at position 28 on $flatten\P2.$verific$d_reg$b20.vhd:1015$1073 ($adff) from module b20.
Setting constant 0-bit at position 29 on $flatten\P2.$verific$d_reg$b20.vhd:1015$1073 ($adff) from module b20.
Setting constant 0-bit at position 30 on $flatten\P2.$verific$d_reg$b20.vhd:1015$1073 ($adff) from module b20.
Setting constant 0-bit at position 31 on $flatten\P2.$verific$d_reg$b20.vhd:1015$1073 ($adff) from module b20.

yosys> opt_clean

3.17.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b20..
Removed 0 unused cells and 24 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.17.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module b20.

3.17.16. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.17.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b20..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~48 debug messages>

yosys> opt_reduce

3.17.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b20.
Performed a total of 0 changes.

yosys> opt_merge

3.17.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b20'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.17.20. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.17.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b20..

yosys> opt_expr

3.17.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module b20.

3.17.23. Finished OPT passes. (There is nothing left to do.)

yosys> wreduce -keepdc

3.18. Executing WREDUCE pass (reducing word size of cells).
Removed top 2 bits (of 4) from port B of cell b20.$auto$opt_dff.cc:195:make_patterns_logic$2112 ($ne).
Removed top 3 bits (of 32) from FF cell b20.$auto$ff.cc:262:slice$1996 ($adffe).
Removed top 1 bits (of 20) from port A of cell b20.$verific$LessThan_16$b20.vhd:1076$53 ($lt).
Removed top 1 bits (of 20) from port A of cell b20.$verific$LessThan_17$b20.vhd:1076$54 ($lt).
Removed top 1 bits (of 2) from port B of cell b20.$auto$fsm_map.cc:215:map_fsm$1781 ($eq).
Removed top 3 bits (of 4) from port B of cell b20.$auto$opt_dff.cc:195:make_patterns_logic$2020 ($ne).
Removed top 1 bits (of 8) from port B of cell b20.$auto$opt_dff.cc:195:make_patterns_logic$2090 ($ne).
Removed top 1 bits (of 7) from port B of cell b20.$auto$opt_dff.cc:195:make_patterns_logic$2092 ($ne).
Removed top 1 bits (of 6) from port B of cell b20.$auto$opt_dff.cc:195:make_patterns_logic$2094 ($ne).
Removed top 1 bits (of 5) from port B of cell b20.$auto$opt_dff.cc:195:make_patterns_logic$2096 ($ne).
Removed top 1 bits (of 4) from port B of cell b20.$auto$opt_dff.cc:195:make_patterns_logic$2098 ($ne).
Removed top 1 bits (of 2) from port B of cell b20.$auto$opt_dff.cc:195:make_patterns_logic$2102 ($ne).
Removed top 4 bits (of 5) from port B of cell b20.$auto$opt_dff.cc:195:make_patterns_logic$2108 ($ne).
Removed top 1 bits (of 21) from mux cell b20.$flatten\P2.$auto$bmuxmap.cc:60:execute$1091 ($mux).
Removed top 2 bits (of 4) from port B of cell b20.$auto$opt_dff.cc:195:make_patterns_logic$2165 ($ne).
Removed top 4 bits (of 5) from port B of cell b20.$auto$opt_dff.cc:195:make_patterns_logic$2161 ($ne).
Removed top 3 bits (of 29) from FF cell b20.$auto$ff.cc:262:slice$2105 ($adffe).
Removed top 1 bits (of 32) from port A of cell b20.$flatten\P2.$verific$LessThan_14$b20.vhd:593$878 ($lt).
Removed top 1 bits (of 32) from port B of cell b20.$flatten\P2.$verific$LessThan_81$b20.vhd:658$938 ($lt).
Removed top 3 bits (of 5) from port Y of cell b20.$flatten\P2.$verific$add_21$b20.vhd:596$885 ($add).
Removed top 3 bits (of 5) from port A of cell b20.$flatten\P2.$verific$add_21$b20.vhd:596$885 ($add).
Removed top 5 bits (of 8) from port Y of cell b20.$flatten\P2.$verific$add_26$b20.vhd:598$892 ($add).
Removed top 5 bits (of 8) from port A of cell b20.$flatten\P2.$verific$add_26$b20.vhd:598$892 ($add).
Removed top 9 bits (of 13) from port Y of cell b20.$flatten\P2.$verific$add_31$b20.vhd:600$899 ($add).
Removed top 9 bits (of 13) from port A of cell b20.$flatten\P2.$verific$add_31$b20.vhd:600$899 ($add).
Removed top 2 bits (of 32) from port Y of cell b20.$flatten\P2.$verific$add_331$b20.vhd:868$985 ($add).
Removed top 2 bits (of 32) from port A of cell b20.$flatten\P2.$verific$add_331$b20.vhd:868$985 ($add).
Removed top 2 bits (of 32) from port B of cell b20.$flatten\P2.$verific$add_331$b20.vhd:868$985 ($add).
Removed top 8 bits (of 9) from port Y of cell b20.$flatten\P2.$verific$add_36$b20.vhd:602$906 ($add).
Removed top 8 bits (of 9) from port A of cell b20.$flatten\P2.$verific$add_36$b20.vhd:602$906 ($add).
Removed top 1 bits (of 3) from port Y of cell b20.$flatten\P2.$verific$add_44$b20.vhd:606$916 ($add).
Removed top 1 bits (of 3) from port A of cell b20.$flatten\P2.$verific$add_44$b20.vhd:606$916 ($add).
Removed top 1 bits (of 3) from port A of cell b20.$flatten\P2.$verific$equal_139$b20.vhd:731$960 ($eq).
Removed top 1 bits (of 3) from port A of cell b20.$flatten\P2.$verific$equal_140$b20.vhd:733$961 ($eq).
Removed top 2 bits (of 3) from port A of cell b20.$flatten\P2.$verific$equal_141$b20.vhd:734$962 ($eq).
Removed top 31 bits (of 32) from port A of cell b20.$flatten\P2.$verific$equal_169$b20.vhd:754$973 ($eq).
Removed top 30 bits (of 32) from port A of cell b20.$flatten\P2.$verific$equal_170$b20.vhd:755$974 ($eq).
Removed top 30 bits (of 32) from port A of cell b20.$flatten\P2.$verific$equal_171$b20.vhd:756$975 ($eq).
Removed top 30 bits (of 32) from mux cell b20.$flatten\P2.$verific$mux_136$b20.vhd:726$957 ($mux).
Removed top 30 bits (of 32) from mux cell b20.$flatten\P2.$verific$mux_138$b20.vhd:730$959 ($mux).
Removed top 30 bits (of 32) from mux cell b20.$flatten\P2.$verific$mux_143$b20.vhd:736$964 ($mux).
Removed top 30 bits (of 32) from mux cell b20.$flatten\P2.$verific$mux_144$b20.vhd:736$965 ($mux).
Removed top 30 bits (of 32) from mux cell b20.$flatten\P2.$verific$mux_145$b20.vhd:736$966 ($mux).
Removed top 30 bits (of 32) from mux cell b20.$flatten\P2.$verific$mux_146$b20.vhd:736$967 ($mux).
Removed top 30 bits (of 32) from mux cell b20.$flatten\P2.$verific$mux_147$b20.vhd:736$968 ($mux).
Removed top 30 bits (of 32) from mux cell b20.$flatten\P2.$verific$mux_148$b20.vhd:736$969 ($mux).
Removed top 3 bits (of 32) from mux cell b20.$flatten\P2.$verific$mux_667$b20.vhd:1012$1056 ($mux).
Removed top 3 bits (of 33) from port Y of cell b20.$flatten\P2.$verific$sub_297$b20.vhd:848$983 ($sub).
Removed top 3 bits (of 33) from port A of cell b20.$flatten\P2.$verific$sub_297$b20.vhd:848$983 ($sub).
Removed top 3 bits (of 33) from port B of cell b20.$flatten\P2.$verific$sub_297$b20.vhd:848$983 ($sub).
Removed top 1 bits (of 30) from port A of cell b20.$flatten\P2.$verific$sub_39$b20.vhd:605$912 ($sub).
Removed top 26 bits (of 30) from port B of cell b20.$flatten\P2.$verific$sub_39$b20.vhd:605$912 ($sub).
Removed top 13 bits (of 33) from port A of cell b20.$flatten\P2.$verific$sub_55$b20.vhd:620$924 ($sub).
Removed top 13 bits (of 33) from port Y of cell b20.$flatten\P2.$verific$sub_55$b20.vhd:620$924 ($sub).
Removed top 13 bits (of 33) from port B of cell b20.$flatten\P2.$verific$sub_55$b20.vhd:620$924 ($sub).
Removed top 13 bits (of 33) from port A of cell b20.$flatten\P2.$verific$sub_59$b20.vhd:623$926 ($sub).
Removed top 13 bits (of 33) from port Y of cell b20.$flatten\P2.$verific$sub_59$b20.vhd:623$926 ($sub).
Removed top 13 bits (of 33) from port B of cell b20.$flatten\P2.$verific$sub_59$b20.vhd:623$926 ($sub).
Removed top 1 bits (of 21) from port A of cell b20.$flatten\P2.$verific$sub_632$b20.vhd:1003$1024 ($sub).
Removed top 1 bits (of 21) from port B of cell b20.$flatten\P2.$verific$sub_632$b20.vhd:1003$1024 ($sub).
Removed top 1 bits (of 21) from port A of cell b20.$flatten\P2.$verific$sub_634$b20.vhd:1004$1027 ($sub).
Removed top 1 bits (of 21) from port B of cell b20.$flatten\P2.$verific$sub_634$b20.vhd:1004$1027 ($sub).
Removed top 2 bits (of 33) from port B of cell b20.$flatten\P2.$verific$sub_82$b20.vhd:659$939 ($sub).
Removed top 1 bits (of 33) from port Y of cell b20.$flatten\P2.$verific$sub_82$b20.vhd:659$939 ($sub).
Removed top 1 bits (of 33) from port A of cell b20.$flatten\P2.$verific$sub_82$b20.vhd:659$939 ($sub).
Removed top 1 bits (of 33) from port Y of cell b20.$flatten\P2.$verific$unary_minus_15$b20.vhd:594$879 ($neg).
Removed top 1 bits (of 33) from port A of cell b20.$flatten\P2.$verific$unary_minus_15$b20.vhd:594$879 ($neg).
Removed top 1 bits (of 2) from port B of cell b20.$auto$fsm_map.cc:215:map_fsm$1562 ($eq).
Removed top 20 bits (of 21) from mux cell b20.$flatten\P1.$auto$bmuxmap.cc:60:execute$1307 ($mux).
Removed top 2 bits (of 32) from mux cell b20.$flatten\P1.$auto$bmuxmap.cc:60:execute$1332 ($mux).
Removed top 2 bits (of 32) from mux cell b20.$flatten\P1.$auto$bmuxmap.cc:60:execute$1338 ($mux).
Removed top 3 bits (of 4) from port B of cell b20.$auto$opt_dff.cc:195:make_patterns_logic$2146 ($ne).
Removed top 1 bits (of 32) from port A of cell b20.$flatten\P1.$verific$LessThan_14$b20.vhd:83$375 ($lt).
Removed top 1 bits (of 32) from port B of cell b20.$flatten\P1.$verific$LessThan_83$b20.vhd:148$435 ($lt).
Removed top 3 bits (of 5) from port Y of cell b20.$flatten\P1.$verific$add_21$b20.vhd:86$382 ($add).
Removed top 3 bits (of 5) from port A of cell b20.$flatten\P1.$verific$add_21$b20.vhd:86$382 ($add).
Removed top 5 bits (of 8) from port Y of cell b20.$flatten\P1.$verific$add_26$b20.vhd:88$389 ($add).
Removed top 5 bits (of 8) from port A of cell b20.$flatten\P1.$verific$add_26$b20.vhd:88$389 ($add).
Removed top 2 bits (of 32) from port Y of cell b20.$flatten\P1.$verific$add_283$b20.vhd:318$478 ($add).
Removed top 2 bits (of 32) from port A of cell b20.$flatten\P1.$verific$add_283$b20.vhd:318$478 ($add).
Removed top 2 bits (of 32) from port B of cell b20.$flatten\P1.$verific$add_283$b20.vhd:318$478 ($add).
Removed top 9 bits (of 13) from port Y of cell b20.$flatten\P1.$verific$add_31$b20.vhd:90$396 ($add).
Removed top 9 bits (of 13) from port A of cell b20.$flatten\P1.$verific$add_31$b20.vhd:90$396 ($add).
Removed top 8 bits (of 9) from port Y of cell b20.$flatten\P1.$verific$add_36$b20.vhd:92$403 ($add).
Removed top 8 bits (of 9) from port A of cell b20.$flatten\P1.$verific$add_36$b20.vhd:92$403 ($add).
Removed top 25 bits (of 26) from port B of cell b20.$flatten\P1.$verific$add_39$b20.vhd:95$409 ($add).
Removed top 1 bits (of 3) from port Y of cell b20.$flatten\P1.$verific$add_44$b20.vhd:96$413 ($add).
Removed top 1 bits (of 3) from port A of cell b20.$flatten\P1.$verific$add_44$b20.vhd:96$413 ($add).
Removed top 12 bits (of 32) from port A of cell b20.$flatten\P1.$verific$add_56$b20.vhd:110$421 ($add).
Removed top 12 bits (of 32) from port Y of cell b20.$flatten\P1.$verific$add_56$b20.vhd:110$421 ($add).
Removed top 12 bits (of 32) from port B of cell b20.$flatten\P1.$verific$add_56$b20.vhd:110$421 ($add).
Removed top 12 bits (of 32) from port A of cell b20.$flatten\P1.$verific$add_61$b20.vhd:113$423 ($add).
Removed top 12 bits (of 32) from port Y of cell b20.$flatten\P1.$verific$add_61$b20.vhd:113$423 ($add).
Removed top 12 bits (of 32) from port B of cell b20.$flatten\P1.$verific$add_61$b20.vhd:113$423 ($add).
Removed top 1 bits (of 2) from port B of cell b20.$auto$opt_dff.cc:195:make_patterns_logic$2228 ($ne).
Removed top 1 bits (of 4) from port B of cell b20.$auto$opt_dff.cc:195:make_patterns_logic$2224 ($ne).
Removed top 1 bits (of 5) from port B of cell b20.$auto$opt_dff.cc:195:make_patterns_logic$2222 ($ne).
Removed top 1 bits (of 6) from port B of cell b20.$auto$opt_dff.cc:195:make_patterns_logic$2220 ($ne).
Removed top 1 bits (of 7) from port B of cell b20.$auto$opt_dff.cc:195:make_patterns_logic$2218 ($ne).
Removed top 1 bits (of 8) from port B of cell b20.$auto$opt_dff.cc:195:make_patterns_logic$2216 ($ne).
Removed top 1 bits (of 3) from port A of cell b20.$flatten\P1.$verific$equal_141$b20.vhd:221$457 ($eq).
Removed top 1 bits (of 3) from port A of cell b20.$flatten\P1.$verific$equal_142$b20.vhd:223$458 ($eq).
Removed top 2 bits (of 3) from port A of cell b20.$flatten\P1.$verific$equal_143$b20.vhd:224$459 ($eq).
Removed top 31 bits (of 32) from port A of cell b20.$flatten\P1.$verific$equal_177$b20.vhd:244$470 ($eq).
Removed top 30 bits (of 32) from port A of cell b20.$flatten\P1.$verific$equal_178$b20.vhd:245$471 ($eq).
Removed top 30 bits (of 32) from port A of cell b20.$flatten\P1.$verific$equal_179$b20.vhd:246$472 ($eq).
Removed top 30 bits (of 32) from mux cell b20.$flatten\P1.$verific$mux_138$b20.vhd:216$454 ($mux).
Removed top 30 bits (of 32) from mux cell b20.$flatten\P1.$verific$mux_140$b20.vhd:220$456 ($mux).
Removed top 30 bits (of 32) from mux cell b20.$flatten\P1.$verific$mux_145$b20.vhd:226$461 ($mux).
Removed top 30 bits (of 32) from mux cell b20.$flatten\P1.$verific$mux_146$b20.vhd:226$462 ($mux).
Removed top 30 bits (of 32) from mux cell b20.$flatten\P1.$verific$mux_147$b20.vhd:226$463 ($mux).
Removed top 30 bits (of 32) from mux cell b20.$flatten\P1.$verific$mux_148$b20.vhd:226$464 ($mux).
Removed top 30 bits (of 32) from mux cell b20.$flatten\P1.$verific$mux_149$b20.vhd:226$465 ($mux).
Removed top 30 bits (of 32) from mux cell b20.$flatten\P1.$verific$mux_150$b20.vhd:226$466 ($mux).
Removed top 3 bits (of 32) from mux cell b20.$flatten\P1.$verific$mux_698$b20.vhd:502$536 ($mux).
Removed top 32 bits (of 33) from port A of cell b20.$flatten\P1.$verific$sub_168$b20.vhd:243$467 ($sub).
Removed top 1 bits (of 33) from port Y of cell b20.$flatten\P1.$verific$sub_168$b20.vhd:243$467 ($sub).
Removed top 1 bits (of 33) from port B of cell b20.$flatten\P1.$verific$sub_168$b20.vhd:243$467 ($sub).
Removed top 3 bits (of 33) from port Y of cell b20.$flatten\P1.$verific$sub_365$b20.vhd:358$480 ($sub).
Removed top 3 bits (of 33) from port A of cell b20.$flatten\P1.$verific$sub_365$b20.vhd:358$480 ($sub).
Removed top 3 bits (of 33) from port B of cell b20.$flatten\P1.$verific$sub_365$b20.vhd:358$480 ($sub).
Removed top 2 bits (of 33) from port B of cell b20.$flatten\P1.$verific$sub_84$b20.vhd:149$436 ($sub).
Removed top 1 bits (of 33) from port Y of cell b20.$flatten\P1.$verific$sub_84$b20.vhd:149$436 ($sub).
Removed top 1 bits (of 33) from port A of cell b20.$flatten\P1.$verific$sub_84$b20.vhd:149$436 ($sub).
Removed top 1 bits (of 33) from port Y of cell b20.$flatten\P1.$verific$unary_minus_15$b20.vhd:84$376 ($neg).
Removed top 1 bits (of 33) from port A of cell b20.$flatten\P1.$verific$unary_minus_15$b20.vhd:84$376 ($neg).
Removed top 1 bits (of 21) from mux cell b20.$flatten\P2.$auto$bmuxmap.cc:60:execute$1088 ($mux).
Removed top 3 bits (of 32) from mux cell b20.$flatten\P2.$verific$mux_648$b20.vhd:1011$1042 ($mux).
Removed top 20 bits (of 21) from mux cell b20.$flatten\P1.$auto$bmuxmap.cc:60:execute$1305 ($mux).
Removed top 20 bits (of 21) from port Y of cell b20.$flatten\P1.$verific$add_662$b20.vhd:493$505 ($add).
Removed top 19 bits (of 20) from port A of cell b20.$flatten\P1.$verific$add_662$b20.vhd:493$505 ($add).
Removed top 19 bits (of 20) from port B of cell b20.$flatten\P1.$verific$add_662$b20.vhd:493$505 ($add).
Removed top 20 bits (of 21) from port Y of cell b20.$flatten\P1.$verific$add_664$b20.vhd:494$507 ($add).
Removed top 19 bits (of 20) from port A of cell b20.$flatten\P1.$verific$add_664$b20.vhd:494$507 ($add).
Removed top 19 bits (of 20) from port B of cell b20.$flatten\P1.$verific$add_664$b20.vhd:494$507 ($add).
Removed top 3 bits (of 32) from mux cell b20.$flatten\P1.$verific$mux_679$b20.vhd:501$522 ($mux).
Removed top 3 bits (of 32) from mux cell b20.$flatten\P2.$auto$bmuxmap.cc:60:execute$1134 ($mux).
Removed top 1 bits (of 21) from port Y of cell b20.$flatten\P2.$verific$sub_632$b20.vhd:1003$1024 ($sub).
Removed top 1 bits (of 21) from port Y of cell b20.$flatten\P2.$verific$sub_634$b20.vhd:1004$1027 ($sub).
Removed top 3 bits (of 32) from mux cell b20.$flatten\P1.$auto$bmuxmap.cc:60:execute$1345 ($mux).
Removed top 3 bits (of 32) from mux cell b20.$flatten\P2.$auto$bmuxmap.cc:60:execute$1131 ($mux).
Removed top 3 bits (of 32) from mux cell b20.$flatten\P2.$auto$bmuxmap.cc:60:execute$1132 ($mux).
Removed top 3 bits (of 32) from mux cell b20.$flatten\P1.$auto$bmuxmap.cc:60:execute$1342 ($mux).
Removed top 3 bits (of 32) from mux cell b20.$flatten\P1.$auto$bmuxmap.cc:60:execute$1343 ($mux).
Removed top 3 bits (of 32) from mux cell b20.$flatten\P2.$auto$bmuxmap.cc:60:execute$1126 ($mux).
Removed top 3 bits (of 32) from mux cell b20.$flatten\P2.$auto$bmuxmap.cc:60:execute$1127 ($mux).
Removed top 3 bits (of 32) from mux cell b20.$flatten\P2.$auto$bmuxmap.cc:60:execute$1128 ($mux).
Removed top 3 bits (of 32) from mux cell b20.$flatten\P2.$auto$bmuxmap.cc:60:execute$1129 ($mux).
Removed top 1 bits (of 30) from mux cell b20.$flatten\P1.$auto$bmuxmap.cc:60:execute$1332 ($mux).
Removed top 3 bits (of 32) from mux cell b20.$flatten\P1.$auto$bmuxmap.cc:60:execute$1337 ($mux).
Removed top 1 bits (of 30) from mux cell b20.$flatten\P1.$auto$bmuxmap.cc:60:execute$1338 ($mux).
Removed top 3 bits (of 32) from mux cell b20.$flatten\P1.$auto$bmuxmap.cc:60:execute$1340 ($mux).
Removed top 3 bits (of 32) from mux cell b20.$flatten\P2.$auto$bmuxmap.cc:60:execute$1117 ($mux).
Removed top 3 bits (of 32) from mux cell b20.$flatten\P2.$auto$bmuxmap.cc:60:execute$1121 ($mux).
Removed top 3 bits (of 32) from mux cell b20.$flatten\P2.$auto$bmuxmap.cc:60:execute$1122 ($mux).
Removed top 3 bits (of 32) from mux cell b20.$flatten\P2.$auto$bmuxmap.cc:60:execute$1123 ($mux).
Removed top 2 bits (of 31) from mux cell b20.$flatten\P2.$verific$select_497$b20.vhd:953$994 ($pmux).
Removed top 2 bits (of 31) from mux cell b20.$flatten\P2.$verific$select_537$b20.vhd:973$1000 ($pmux).
Removed top 2 bits (of 31) from mux cell b20.$flatten\P2.$verific$select_620$b20.vhd:996$1014 ($pmux).
Removed top 2 bits (of 94) from mux cell b20.$flatten\P2.$verific$select_720$b20.vhd:873$990 ($pmux).
Removed top 3 bits (of 32) from mux cell b20.$flatten\P1.$auto$bmuxmap.cc:60:execute$1328 ($mux).
Removed top 3 bits (of 32) from mux cell b20.$flatten\P1.$auto$bmuxmap.cc:60:execute$1334 ($mux).
Removed top 2 bits (of 155) from mux cell b20.$flatten\P1.$verific$select_752$b20.vhd:486$496 ($pmux).
Removed top 20 bits (of 42) from wire b20.$flatten\P1.$auto$bmuxmap.cc:58:execute$1303.
Removed top 20 bits (of 21) from wire b20.$flatten\P1.$auto$bmuxmap.cc:58:execute$1306.
Removed top 2 bits (of 256) from wire b20.$flatten\P1.$auto$bmuxmap.cc:58:execute$1327.
Removed top 3 bits (of 128) from wire b20.$flatten\P1.$auto$bmuxmap.cc:58:execute$1336.
Removed top 3 bits (of 64) from wire b20.$flatten\P1.$auto$bmuxmap.cc:58:execute$1341.
Removed top 3 bits (of 32) from wire b20.$flatten\P1.$auto$bmuxmap.cc:58:execute$1344.
Removed top 2 bits (of 8) from wire b20.$flatten\P1.$auto$bmuxmap.cc:58:execute$1422.
Removed top 1 bits (of 126) from wire b20.$flatten\P1.$auto$bmuxmap.cc:58:execute$1460.
Removed top 1 bits (of 2) from wire b20.$flatten\P1.$auto$bmuxmap.cc:58:execute$1489.
Removed top 2 bits (of 31) from wire b20.$flatten\P1.$verific$n10126$322.
Removed top 19 bits (of 20) from wire b20.$flatten\P1.$verific$n10390$329.
Removed top 19 bits (of 20) from wire b20.$flatten\P1.$verific$n10434$331.
Removed top 3 bits (of 32) from wire b20.$flatten\P1.$verific$n10755$344.
Removed top 3 bits (of 32) from wire b20.$flatten\P1.$verific$n11178$353.
Removed top 30 bits (of 32) from wire b20.$flatten\P1.$verific$n11472$358.
Removed top 30 bits (of 32) from wire b20.$flatten\P1.$verific$n1407$226.
Removed top 30 bits (of 32) from wire b20.$flatten\P1.$verific$n1441$227.
Removed top 30 bits (of 32) from wire b20.$flatten\P1.$verific$n1478$228.
Removed top 30 bits (of 32) from wire b20.$flatten\P1.$verific$n1511$229.
Removed top 30 bits (of 32) from wire b20.$flatten\P1.$verific$n1544$230.
Removed top 30 bits (of 32) from wire b20.$flatten\P1.$verific$n1577$231.
Removed top 30 bits (of 32) from wire b20.$flatten\P1.$verific$n1610$232.
Removed top 30 bits (of 32) from wire b20.$flatten\P1.$verific$n1643$233.
Removed top 1 bits (of 33) from wire b20.$flatten\P1.$verific$n184$195.
Removed top 1 bits (of 33) from wire b20.$flatten\P1.$verific$n1987$239.
Removed top 3 bits (of 5) from wire b20.$flatten\P1.$verific$n288$198.
Removed top 5 bits (of 8) from wire b20.$flatten\P1.$verific$n301$200.
Removed top 9 bits (of 13) from wire b20.$flatten\P1.$verific$n318$202.
Removed top 8 bits (of 9) from wire b20.$flatten\P1.$verific$n341$204.
Removed top 2 bits (of 32) from wire b20.$flatten\P1.$verific$n4241$272.
Removed top 1 bits (of 3) from wire b20.$flatten\P1.$verific$n436$208.
Removed top 3 bits (of 33) from wire b20.$flatten\P1.$verific$n5666$286.
Removed top 1 bits (of 33) from wire b20.$flatten\P1.$verific$n933$223.
Removed top 1 bits (of 42) from wire b20.$flatten\P2.$auto$bmuxmap.cc:58:execute$1087.
Removed top 1 bits (of 21) from wire b20.$flatten\P2.$auto$bmuxmap.cc:58:execute$1090.
Removed top 3 bits (of 128) from wire b20.$flatten\P2.$auto$bmuxmap.cc:58:execute$1125.
Removed top 3 bits (of 64) from wire b20.$flatten\P2.$auto$bmuxmap.cc:58:execute$1130.
Removed top 2 bits (of 8) from wire b20.$flatten\P2.$auto$bmuxmap.cc:58:execute$1211.
Removed top 1 bits (of 2) from wire b20.$flatten\P2.$auto$bmuxmap.cc:58:execute$1283.
Removed top 3 bits (of 32) from wire b20.$flatten\P2.$verific$n10611$847.
Removed top 3 bits (of 32) from wire b20.$flatten\P2.$verific$n11034$856.
Removed top 30 bits (of 32) from wire b20.$flatten\P2.$verific$n11328$861.
Removed top 30 bits (of 32) from wire b20.$flatten\P2.$verific$n1408$726.
Removed top 30 bits (of 32) from wire b20.$flatten\P2.$verific$n1442$727.
Removed top 30 bits (of 32) from wire b20.$flatten\P2.$verific$n1479$728.
Removed top 30 bits (of 32) from wire b20.$flatten\P2.$verific$n1512$729.
Removed top 30 bits (of 32) from wire b20.$flatten\P2.$verific$n1578$731.
Removed top 1 bits (of 33) from wire b20.$flatten\P2.$verific$n184$695.
Removed top 3 bits (of 5) from wire b20.$flatten\P2.$verific$n288$698.
Removed top 5 bits (of 8) from wire b20.$flatten\P2.$verific$n301$700.
Removed top 9 bits (of 13) from wire b20.$flatten\P2.$verific$n318$702.
Removed top 8 bits (of 9) from wire b20.$flatten\P2.$verific$n341$704.
Removed top 1 bits (of 3) from wire b20.$flatten\P2.$verific$n439$708.
Removed top 3 bits (of 33) from wire b20.$flatten\P2.$verific$n4798$770.
Removed top 2 bits (of 32) from wire b20.$flatten\P2.$verific$n5506$780.
Removed top 2 bits (of 31) from wire b20.$flatten\P2.$verific$n8711$805.
Removed top 1 bits (of 33) from wire b20.$flatten\P2.$verific$n934$723.
Removed top 2 bits (of 31) from wire b20.$flatten\P2.$verific$n9424$813.
Removed top 2 bits (of 31) from wire b20.$flatten\P2.$verific$n9975$824.

yosys> peepopt

3.19. Executing PEEPOPT pass (run peephole optimizers).

yosys> opt_clean

3.20. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b20..
Removed 0 unused cells and 86 unused wires.
<suppressed ~1 debug messages>

yosys> bmuxmap

3.21. Executing BMUXMAP pass.

yosys> demuxmap

3.22. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> alumacc

3.23. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module b20:
  creating $macc model for $flatten\P1.$verific$add_21$b20.vhd:86$382 ($add).
  creating $macc model for $flatten\P1.$verific$add_26$b20.vhd:88$389 ($add).
  creating $macc model for $flatten\P1.$verific$add_283$b20.vhd:318$478 ($add).
  creating $macc model for $flatten\P1.$verific$add_31$b20.vhd:90$396 ($add).
  creating $macc model for $flatten\P1.$verific$add_36$b20.vhd:92$403 ($add).
  creating $macc model for $flatten\P1.$verific$add_39$b20.vhd:95$409 ($add).
  creating $macc model for $flatten\P1.$verific$add_44$b20.vhd:96$413 ($add).
  creating $macc model for $flatten\P1.$verific$add_56$b20.vhd:110$421 ($add).
  creating $macc model for $flatten\P1.$verific$add_570$b20.vhd:466$485 ($add).
  creating $macc model for $flatten\P1.$verific$add_61$b20.vhd:113$423 ($add).
  creating $macc model for $flatten\P1.$verific$add_662$b20.vhd:493$505 ($add).
  creating $macc model for $flatten\P1.$verific$add_664$b20.vhd:494$507 ($add).
  creating $macc model for $flatten\P1.$verific$mult_667$b20.vhd:497$511 ($mul).
  creating $macc model for $flatten\P1.$verific$sub_168$b20.vhd:243$467 ($sub).
  creating $macc model for $flatten\P1.$verific$sub_365$b20.vhd:358$480 ($sub).
  creating $macc model for $flatten\P1.$verific$sub_84$b20.vhd:149$436 ($sub).
  creating $macc model for $flatten\P1.$verific$unary_minus_15$b20.vhd:84$376 ($neg).
  creating $macc model for $flatten\P2.$verific$add_21$b20.vhd:596$885 ($add).
  creating $macc model for $flatten\P2.$verific$add_26$b20.vhd:598$892 ($add).
  creating $macc model for $flatten\P2.$verific$add_31$b20.vhd:600$899 ($add).
  creating $macc model for $flatten\P2.$verific$add_331$b20.vhd:868$985 ($add).
  creating $macc model for $flatten\P2.$verific$add_36$b20.vhd:602$906 ($add).
  creating $macc model for $flatten\P2.$verific$add_44$b20.vhd:606$916 ($add).
  creating $macc model for $flatten\P2.$verific$add_540$b20.vhd:976$1002 ($add).
  creating $macc model for $flatten\P2.$verific$sub_297$b20.vhd:848$983 ($sub).
  creating $macc model for $flatten\P2.$verific$sub_39$b20.vhd:605$912 ($sub).
  creating $macc model for $flatten\P2.$verific$sub_55$b20.vhd:620$924 ($sub).
  creating $macc model for $flatten\P2.$verific$sub_59$b20.vhd:623$926 ($sub).
  creating $macc model for $flatten\P2.$verific$sub_632$b20.vhd:1003$1024 ($sub).
  creating $macc model for $flatten\P2.$verific$sub_634$b20.vhd:1004$1027 ($sub).
  creating $macc model for $flatten\P2.$verific$sub_82$b20.vhd:659$939 ($sub).
  creating $macc model for $flatten\P2.$verific$unary_minus_15$b20.vhd:594$879 ($neg).
  creating $macc model for $verific$add_24$b20.vhd:1077$58 ($add).
  creating $macc model for $verific$add_3$b20.vhd:1068$40 ($add).
  creating $macc model for $verific$add_30$b20.vhd:1081$60 ($add).
  creating $alu model for $macc $verific$add_30$b20.vhd:1081$60.
  creating $alu model for $macc $verific$add_3$b20.vhd:1068$40.
  creating $alu model for $macc $verific$add_24$b20.vhd:1077$58.
  creating $alu model for $macc $flatten\P2.$verific$unary_minus_15$b20.vhd:594$879.
  creating $alu model for $macc $flatten\P2.$verific$sub_82$b20.vhd:659$939.
  creating $alu model for $macc $flatten\P2.$verific$sub_634$b20.vhd:1004$1027.
  creating $alu model for $macc $flatten\P2.$verific$sub_632$b20.vhd:1003$1024.
  creating $alu model for $macc $flatten\P2.$verific$sub_59$b20.vhd:623$926.
  creating $alu model for $macc $flatten\P2.$verific$sub_55$b20.vhd:620$924.
  creating $alu model for $macc $flatten\P2.$verific$sub_39$b20.vhd:605$912.
  creating $alu model for $macc $flatten\P2.$verific$sub_297$b20.vhd:848$983.
  creating $alu model for $macc $flatten\P2.$verific$add_540$b20.vhd:976$1002.
  creating $alu model for $macc $flatten\P2.$verific$add_44$b20.vhd:606$916.
  creating $alu model for $macc $flatten\P2.$verific$add_36$b20.vhd:602$906.
  creating $alu model for $macc $flatten\P2.$verific$add_331$b20.vhd:868$985.
  creating $alu model for $macc $flatten\P2.$verific$add_31$b20.vhd:600$899.
  creating $alu model for $macc $flatten\P2.$verific$add_26$b20.vhd:598$892.
  creating $alu model for $macc $flatten\P2.$verific$add_21$b20.vhd:596$885.
  creating $alu model for $macc $flatten\P1.$verific$unary_minus_15$b20.vhd:84$376.
  creating $alu model for $macc $flatten\P1.$verific$sub_84$b20.vhd:149$436.
  creating $alu model for $macc $flatten\P1.$verific$sub_365$b20.vhd:358$480.
  creating $alu model for $macc $flatten\P1.$verific$sub_168$b20.vhd:243$467.
  creating $alu model for $macc $flatten\P1.$verific$add_664$b20.vhd:494$507.
  creating $alu model for $macc $flatten\P1.$verific$add_662$b20.vhd:493$505.
  creating $alu model for $macc $flatten\P1.$verific$add_61$b20.vhd:113$423.
  creating $alu model for $macc $flatten\P1.$verific$add_570$b20.vhd:466$485.
  creating $alu model for $macc $flatten\P1.$verific$add_56$b20.vhd:110$421.
  creating $alu model for $macc $flatten\P1.$verific$add_44$b20.vhd:96$413.
  creating $alu model for $macc $flatten\P1.$verific$add_39$b20.vhd:95$409.
  creating $alu model for $macc $flatten\P1.$verific$add_36$b20.vhd:92$403.
  creating $alu model for $macc $flatten\P1.$verific$add_31$b20.vhd:90$396.
  creating $alu model for $macc $flatten\P1.$verific$add_283$b20.vhd:318$478.
  creating $alu model for $macc $flatten\P1.$verific$add_26$b20.vhd:88$389.
  creating $alu model for $macc $flatten\P1.$verific$add_21$b20.vhd:86$382.
  creating $macc cell for $flatten\P1.$verific$mult_667$b20.vhd:497$511: $auto$alumacc.cc:365:replace_macc$2292
  creating $alu model for $flatten\P1.$verific$LessThan_14$b20.vhd:83$375 ($lt): new $alu
  creating $alu model for $flatten\P1.$verific$LessThan_68$b20.vhd:118$429 ($lt): new $alu
  creating $alu model for $flatten\P1.$verific$LessThan_78$b20.vhd:138$433 ($lt): merged with $flatten\P1.$verific$LessThan_68$b20.vhd:118$429.
  creating $alu model for $flatten\P1.$verific$LessThan_83$b20.vhd:148$435 ($lt): new $alu
  creating $alu model for $flatten\P1.$verific$LessThan_87$b20.vhd:151$440 ($lt): new $alu
  creating $alu model for $flatten\P2.$verific$LessThan_14$b20.vhd:593$878 ($lt): new $alu
  creating $alu model for $flatten\P2.$verific$LessThan_66$b20.vhd:628$932 ($lt): new $alu
  creating $alu model for $flatten\P2.$verific$LessThan_76$b20.vhd:648$936 ($lt): merged with $flatten\P2.$verific$LessThan_66$b20.vhd:628$932.
  creating $alu model for $flatten\P2.$verific$LessThan_81$b20.vhd:658$938 ($lt): new $alu
  creating $alu model for $flatten\P2.$verific$LessThan_85$b20.vhd:661$943 ($lt): new $alu
  creating $alu model for $verific$LessThan_11$b20.vhd:1075$48 ($lt): new $alu
  creating $alu model for $verific$LessThan_12$b20.vhd:1075$49 ($lt): new $alu
  creating $alu model for $verific$LessThan_16$b20.vhd:1076$53 ($lt): new $alu
  creating $alu model for $verific$LessThan_17$b20.vhd:1076$54 ($lt): new $alu
  creating $alu cell for $verific$LessThan_17$b20.vhd:1076$54: $auto$alumacc.cc:485:replace_alu$2305
  creating $alu cell for $verific$LessThan_16$b20.vhd:1076$53: $auto$alumacc.cc:485:replace_alu$2310
  creating $alu cell for $verific$LessThan_12$b20.vhd:1075$49: $auto$alumacc.cc:485:replace_alu$2315
  creating $alu cell for $verific$LessThan_11$b20.vhd:1075$48: $auto$alumacc.cc:485:replace_alu$2320
  creating $alu cell for $flatten\P2.$verific$LessThan_85$b20.vhd:661$943: $auto$alumacc.cc:485:replace_alu$2325
  creating $alu cell for $flatten\P2.$verific$LessThan_81$b20.vhd:658$938: $auto$alumacc.cc:485:replace_alu$2336
  creating $alu cell for $flatten\P2.$verific$LessThan_66$b20.vhd:628$932, $flatten\P2.$verific$LessThan_76$b20.vhd:648$936: $auto$alumacc.cc:485:replace_alu$2347
  creating $alu cell for $flatten\P2.$verific$LessThan_14$b20.vhd:593$878: $auto$alumacc.cc:485:replace_alu$2358
  creating $alu cell for $flatten\P1.$verific$LessThan_87$b20.vhd:151$440: $auto$alumacc.cc:485:replace_alu$2363
  creating $alu cell for $flatten\P1.$verific$LessThan_83$b20.vhd:148$435: $auto$alumacc.cc:485:replace_alu$2368
  creating $alu cell for $flatten\P1.$verific$LessThan_68$b20.vhd:118$429, $flatten\P1.$verific$LessThan_78$b20.vhd:138$433: $auto$alumacc.cc:485:replace_alu$2379
  creating $alu cell for $flatten\P1.$verific$LessThan_14$b20.vhd:83$375: $auto$alumacc.cc:485:replace_alu$2390
  creating $alu cell for $flatten\P1.$verific$add_21$b20.vhd:86$382: $auto$alumacc.cc:485:replace_alu$2395
  creating $alu cell for $flatten\P1.$verific$add_26$b20.vhd:88$389: $auto$alumacc.cc:485:replace_alu$2398
  creating $alu cell for $flatten\P1.$verific$add_283$b20.vhd:318$478: $auto$alumacc.cc:485:replace_alu$2401
  creating $alu cell for $flatten\P1.$verific$add_31$b20.vhd:90$396: $auto$alumacc.cc:485:replace_alu$2404
  creating $alu cell for $flatten\P1.$verific$add_36$b20.vhd:92$403: $auto$alumacc.cc:485:replace_alu$2407
  creating $alu cell for $flatten\P1.$verific$add_39$b20.vhd:95$409: $auto$alumacc.cc:485:replace_alu$2410
  creating $alu cell for $flatten\P1.$verific$add_44$b20.vhd:96$413: $auto$alumacc.cc:485:replace_alu$2413
  creating $alu cell for $flatten\P1.$verific$add_56$b20.vhd:110$421: $auto$alumacc.cc:485:replace_alu$2416
  creating $alu cell for $flatten\P1.$verific$add_570$b20.vhd:466$485: $auto$alumacc.cc:485:replace_alu$2419
  creating $alu cell for $flatten\P1.$verific$add_61$b20.vhd:113$423: $auto$alumacc.cc:485:replace_alu$2422
  creating $alu cell for $flatten\P1.$verific$add_662$b20.vhd:493$505: $auto$alumacc.cc:485:replace_alu$2425
  creating $alu cell for $flatten\P1.$verific$add_664$b20.vhd:494$507: $auto$alumacc.cc:485:replace_alu$2428
  creating $alu cell for $flatten\P1.$verific$sub_168$b20.vhd:243$467: $auto$alumacc.cc:485:replace_alu$2431
  creating $alu cell for $flatten\P1.$verific$sub_365$b20.vhd:358$480: $auto$alumacc.cc:485:replace_alu$2434
  creating $alu cell for $flatten\P1.$verific$sub_84$b20.vhd:149$436: $auto$alumacc.cc:485:replace_alu$2437
  creating $alu cell for $flatten\P1.$verific$unary_minus_15$b20.vhd:84$376: $auto$alumacc.cc:485:replace_alu$2440
  creating $alu cell for $flatten\P2.$verific$add_21$b20.vhd:596$885: $auto$alumacc.cc:485:replace_alu$2443
  creating $alu cell for $flatten\P2.$verific$add_26$b20.vhd:598$892: $auto$alumacc.cc:485:replace_alu$2446
  creating $alu cell for $flatten\P2.$verific$add_31$b20.vhd:600$899: $auto$alumacc.cc:485:replace_alu$2449
  creating $alu cell for $flatten\P2.$verific$add_331$b20.vhd:868$985: $auto$alumacc.cc:485:replace_alu$2452
  creating $alu cell for $flatten\P2.$verific$add_36$b20.vhd:602$906: $auto$alumacc.cc:485:replace_alu$2455
  creating $alu cell for $flatten\P2.$verific$add_44$b20.vhd:606$916: $auto$alumacc.cc:485:replace_alu$2458
  creating $alu cell for $flatten\P2.$verific$add_540$b20.vhd:976$1002: $auto$alumacc.cc:485:replace_alu$2461
  creating $alu cell for $flatten\P2.$verific$sub_297$b20.vhd:848$983: $auto$alumacc.cc:485:replace_alu$2464
  creating $alu cell for $flatten\P2.$verific$sub_39$b20.vhd:605$912: $auto$alumacc.cc:485:replace_alu$2467
  creating $alu cell for $flatten\P2.$verific$sub_55$b20.vhd:620$924: $auto$alumacc.cc:485:replace_alu$2470
  creating $alu cell for $flatten\P2.$verific$sub_59$b20.vhd:623$926: $auto$alumacc.cc:485:replace_alu$2473
  creating $alu cell for $flatten\P2.$verific$sub_632$b20.vhd:1003$1024: $auto$alumacc.cc:485:replace_alu$2476
  creating $alu cell for $flatten\P2.$verific$sub_634$b20.vhd:1004$1027: $auto$alumacc.cc:485:replace_alu$2479
  creating $alu cell for $flatten\P2.$verific$sub_82$b20.vhd:659$939: $auto$alumacc.cc:485:replace_alu$2482
  creating $alu cell for $flatten\P2.$verific$unary_minus_15$b20.vhd:594$879: $auto$alumacc.cc:485:replace_alu$2485
  creating $alu cell for $verific$add_24$b20.vhd:1077$58: $auto$alumacc.cc:485:replace_alu$2488
  creating $alu cell for $verific$add_3$b20.vhd:1068$40: $auto$alumacc.cc:485:replace_alu$2491
  creating $alu cell for $verific$add_30$b20.vhd:1081$60: $auto$alumacc.cc:485:replace_alu$2494
  created 46 $alu and 1 $macc cells.

yosys> opt_expr

3.24. Executing OPT_EXPR pass (perform const folding).
Optimizing module b20.
<suppressed ~10 debug messages>

yosys> opt_merge -nomux

3.25. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b20'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.26. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b20..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~48 debug messages>

yosys> opt_reduce

3.27. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b20.
Performed a total of 0 changes.

yosys> opt_merge

3.28. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b20'.
Removed a total of 0 cells.

yosys> opt_share

3.29. Executing OPT_SHARE pass.
    Found cells that share an operand and can be merged by moving the $mux $flatten\P1.$auto$bmuxmap.cc:60:execute$1305 in front of them:
        $auto$alumacc.cc:485:replace_alu$2428
        $auto$alumacc.cc:485:replace_alu$2425

    Found cells that share an operand and can be merged by moving the $mux $flatten\P1.$auto$bmuxmap.cc:60:execute$1475 in front of them:
        $flatten\P1.$verific$i102$b20.vhd:169$443
        $flatten\P1.$verific$i98$b20.vhd:164$442

    Found cells that share an operand and can be merged by moving the $mux $flatten\P1.$auto$bmuxmap.cc:60:execute$1476 in front of them:
        $flatten\P1.$verific$i109$b20.vhd:179$445
        $flatten\P1.$verific$i105$b20.vhd:174$444

    Found cells that share an operand and can be merged by moving the $mux $flatten\P1.$auto$bmuxmap.cc:60:execute$1477 in front of them:
        $flatten\P1.$verific$i116$b20.vhd:189$447
        $flatten\P1.$verific$i113$b20.vhd:184$446

    Found cells that share an operand and can be merged by moving the $mux $flatten\P1.$auto$bmuxmap.cc:60:execute$1478 in front of them:
        $flatten\P1.$verific$i131$b20.vhd:205$449
        $flatten\P1.$verific$i123$b20.vhd:197$448

    Found cells that share an operand and can be merged by moving the $mux $flatten\P2.$auto$bmuxmap.cc:60:execute$1088 in front of them:
        $auto$alumacc.cc:485:replace_alu$2479
        $auto$alumacc.cc:485:replace_alu$2476

    Found cells that share an operand and can be merged by moving the $mux $flatten\P2.$auto$bmuxmap.cc:60:execute$1269 in front of them:
        $flatten\P2.$verific$i100$b20.vhd:679$946
        $flatten\P2.$verific$i96$b20.vhd:674$945

    Found cells that share an operand and can be merged by moving the $mux $flatten\P2.$auto$bmuxmap.cc:60:execute$1270 in front of them:
        $flatten\P2.$verific$i107$b20.vhd:689$948
        $flatten\P2.$verific$i103$b20.vhd:684$947

    Found cells that share an operand and can be merged by moving the $mux $flatten\P2.$auto$bmuxmap.cc:60:execute$1271 in front of them:
        $flatten\P2.$verific$i114$b20.vhd:699$950
        $flatten\P2.$verific$i111$b20.vhd:694$949

    Found cells that share an operand and can be merged by moving the $mux $flatten\P2.$auto$bmuxmap.cc:60:execute$1272 in front of them:
        $flatten\P2.$verific$i129$b20.vhd:715$952
        $flatten\P2.$verific$i121$b20.vhd:707$951


yosys> opt_dff

3.30. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.31. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b20..
Removed 4 unused cells and 52 unused wires.
<suppressed ~5 debug messages>

yosys> opt_expr

3.32. Executing OPT_EXPR pass (perform const folding).
Optimizing module b20.
<suppressed ~10 debug messages>

yosys> opt_muxtree

3.33. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b20..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~58 debug messages>

yosys> opt_reduce

3.34. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b20.
Performed a total of 0 changes.

yosys> opt_merge

3.35. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b20'.
<suppressed ~24 debug messages>
Removed a total of 8 cells.

yosys> opt_share

3.36. Executing OPT_SHARE pass.
    Found cells that share an operand and can be merged by moving the $mux $flatten\P1.$auto$bmuxmap.cc:60:execute$1482 in front of them:
        $flatten\P1.$verific$i109$b20.vhd:179$445
        $flatten\P1.$verific$i102$b20.vhd:169$443

    Found cells that share an operand and can be merged by moving the $mux $flatten\P1.$auto$bmuxmap.cc:60:execute$1483 in front of them:
        $flatten\P1.$verific$i131$b20.vhd:205$449
        $flatten\P1.$verific$i116$b20.vhd:189$447

    Found cells that share an operand and can be merged by moving the $mux $flatten\P2.$auto$bmuxmap.cc:60:execute$1276 in front of them:
        $flatten\P2.$verific$i107$b20.vhd:689$948
        $flatten\P2.$verific$i100$b20.vhd:679$946

    Found cells that share an operand and can be merged by moving the $mux $flatten\P2.$auto$bmuxmap.cc:60:execute$1277 in front of them:
        $flatten\P2.$verific$i129$b20.vhd:715$952
        $flatten\P2.$verific$i114$b20.vhd:699$950


yosys> opt_dff

3.37. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.38. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b20..
Removed 0 unused cells and 10 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.39. Executing OPT_EXPR pass (perform const folding).
Optimizing module b20.
<suppressed ~4 debug messages>

yosys> opt_muxtree

3.40. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b20..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~62 debug messages>

yosys> opt_reduce

3.41. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b20.
Performed a total of 0 changes.

yosys> opt_merge

3.42. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b20'.
<suppressed ~12 debug messages>
Removed a total of 4 cells.

yosys> opt_share

3.43. Executing OPT_SHARE pass.
    Found cells that share an operand and can be merged by moving the $mux $flatten\P1.$auto$bmuxmap.cc:60:execute$1486 in front of them:
        $flatten\P1.$verific$i131$b20.vhd:205$449
        $flatten\P1.$verific$i109$b20.vhd:179$445

    Found cells that share an operand and can be merged by moving the $mux $flatten\P2.$auto$bmuxmap.cc:60:execute$1280 in front of them:
        $flatten\P2.$verific$i129$b20.vhd:715$952
        $flatten\P2.$verific$i107$b20.vhd:689$948


yosys> opt_dff

3.44. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.45. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b20..
Removed 0 unused cells and 6 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.46. Executing OPT_EXPR pass (perform const folding).
Optimizing module b20.
<suppressed ~2 debug messages>

yosys> opt_muxtree

3.47. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b20..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~56 debug messages>

yosys> opt_reduce

3.48. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b20.
Performed a total of 0 changes.

yosys> opt_merge

3.49. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b20'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

yosys> opt_share

3.50. Executing OPT_SHARE pass.

yosys> opt_dff

3.51. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.52. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b20..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.53. Executing OPT_EXPR pass (perform const folding).
Optimizing module b20.

yosys> opt_muxtree

3.54. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b20..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~52 debug messages>

yosys> opt_reduce

3.55. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b20.
Performed a total of 0 changes.

yosys> opt_merge

3.56. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b20'.
Removed a total of 0 cells.

yosys> opt_share

3.57. Executing OPT_SHARE pass.

yosys> opt_dff

3.58. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.59. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b20..

yosys> opt_expr

3.60. Executing OPT_EXPR pass (perform const folding).
Optimizing module b20.
MAX OPT ITERATION = 5

yosys> stat

3.61. Printing statistics.

=== b20 ===

   Number of wires:                623
   Number of wire bits:          12514
   Number of public wires:          46
   Number of public wire bits:     732
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                596
     $adff                          12
     $adffe                         15
     $alu                           44
     $and                           68
     $eq                            50
     $logic_not                      4
     $macc                           1
     $mux                          223
     $ne                            67
     $not                           26
     $or                             8
     $pmux                          22
     $reduce_and                    18
     $reduce_bool                    2
     $reduce_or                     34
     $xor                            2


yosys> memory -nomap

3.62. Executing MEMORY pass.

yosys> opt_mem

3.62.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

yosys> opt_mem_priority

3.62.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

yosys> opt_mem_feedback

3.62.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

yosys> memory_bmux2rom

3.62.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

yosys> memory_dff

3.62.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

yosys> opt_clean

3.62.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b20..

yosys> memory_share

3.62.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

yosys> opt_mem_widen

3.62.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

yosys> opt_clean

3.62.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b20..

yosys> memory_collect

3.62.10. Executing MEMORY_COLLECT pass (generating $mem cells).

yosys> stat

3.63. Printing statistics.

=== b20 ===

   Number of wires:                623
   Number of wire bits:          12514
   Number of public wires:          46
   Number of public wire bits:     732
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                596
     $adff                          12
     $adffe                         15
     $alu                           44
     $and                           68
     $eq                            50
     $logic_not                      4
     $macc                           1
     $mux                          223
     $ne                            67
     $not                           26
     $or                             8
     $pmux                          22
     $reduce_and                    18
     $reduce_bool                    2
     $reduce_or                     34
     $xor                            2


yosys> muxpack

3.64. Executing MUXPACK pass ($mux cell cascades to $pmux).
Converted 0 (p)mux cells into 0 pmux cells.
<suppressed ~212 debug messages>

yosys> opt_clean

3.65. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b20..

yosys> pmuxtree

3.66. Executing PMUXTREE pass.

yosys> muxpack

3.67. Executing MUXPACK pass ($mux cell cascades to $pmux).
Converted 0 (p)mux cells into 0 pmux cells.
<suppressed ~239 debug messages>

yosys> memory_map

3.68. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

yosys> stat

3.69. Printing statistics.

=== b20 ===

   Number of wires:                715
   Number of wire bits:          15348
   Number of public wires:          46
   Number of public wire bits:     732
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                666
     $adff                          12
     $adffe                         15
     $alu                           44
     $and                           68
     $eq                            50
     $logic_not                      4
     $macc                           1
     $mux                          269
     $ne                            67
     $not                           48
     $or                            10
     $reduce_and                    18
     $reduce_bool                    2
     $reduce_or                     56
     $xor                            2


yosys> techmap -map +/techmap.v -map +/rapidsilicon/genesis/arith_map.v

3.70. Executing TECHMAP pass (map to technology primitives).

3.70.1. Executing Verilog-2005 frontend: /home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.70.2. Executing Verilog-2005 frontend: /home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/arith_map.v
Parsing Verilog input from `/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_rs_alu'.
Successfully finished Verilog frontend.

3.70.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $adffe.
Using template $paramod$be80489e44a49c29884f59fd81c31ed03229cfc1\_80_rs_alu for cells of type $alu.
Using extmapper simplemap for cells of type $xor.
Using template $paramod$79fc87901d7fd8aaad689b5406671422f5fa25b9\_80_rs_alu for cells of type $alu.
Using template $paramod$6fc37af1c109ae54e8aed83fcd995c12d378ce93\_90_alu for cells of type $alu.
Using template $paramod$51c80ded93a30cabdd6a720b4f0ed1d8c51829dd\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $or.
Using template $paramod$43e6bdbb0e8a6b23dfd3962c0280737d54f8e2be\_80_rs_alu for cells of type $alu.
Using extmapper simplemap for cells of type $adff.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper maccmap for cells of type $macc.
  add 3'101 * $auto$wreduce.cc:455:run$2234 [0] (3x1 bits, unsigned)
Using template $paramod$e891e6b399cf52748460a311fafe476815d24bd7\_90_alu for cells of type $alu.
Using template $paramod$3ef7d3dd227da7627a99c5e5a6a4deb817573e39\_90_alu for cells of type $alu.
Using template $paramod$32a7b7b86c07519b7537abc18e96f0331f97914d\_90_alu for cells of type $alu.
Using template $paramod$9e7011427f22271c0942bd67000ef26931352ace\_80_rs_alu for cells of type $alu.
/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/arith_map.v:80: Warning: Range [-1:-1] select out of bounds on signal `\C': Setting 1 LSB bits to undef.
/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/arith_map.v:88: Warning: Range [-1:-1] select out of bounds on signal `\Y': Setting 1 LSB bits to undef.
/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/arith_map.v:88: Warning: Range [-1:-1] select out of bounds on signal `\S': Setting 1 LSB bits to undef.
/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/arith_map.v:88: Warning: Ignoring assignment to constant bits:
    old assignment: 1'x = $xor$/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/arith_map.v:88$8102_Y
    new assignment: { } = { }.
/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/arith_map.v:89: Warning: Range [-1:-1] select out of bounds on signal `\S': Setting 1 LSB bits to undef.
/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/arith_map.v:89: Warning: Range [-1:-1] select out of bounds on signal `\AA': Setting 1 LSB bits to undef.
Using template $paramod$fc972a7a46956c1788f3cb5257b53c8f1df2d0cc\_90_alu for cells of type $alu.
Using template $paramod$175e67c02b86e96b1288b9dc100122520d7240d8\_90_alu for cells of type $alu.
Using template $paramod$ee932b0f27f4b110ee21c85da6e79a9925243db9\_80_rs_alu for cells of type $alu.
Using template $paramod$83fc07d9557d32477a9ece9e4e82efd3bbe82ab8\_80_rs_alu for cells of type $alu.
Using extmapper simplemap for cells of type $logic_not.
Using template $paramod$6dc2bc4e177433cbefea60fe94ff11f8a7c6abf8\_90_alu for cells of type $alu.
Using template $paramod$2fcdd83405601057593cb25247304b1283f3b87e\_80_rs_alu for cells of type $alu.
Using template $paramod$c32aaa9fd758c6ea2b382f4327253b21b576e597\_90_alu for cells of type $alu.
Using template $paramod$63a3f1ffa662be02d3403b533885c56d18ebe02a\_80_rs_alu for cells of type $alu.
Using template $paramod$83784888def4f70dbbded37c6d05d2ea1157c936\_90_alu for cells of type $alu.
Using template $paramod$6a42b6fefed750f8a1c58eab59479d960557103c\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010100 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000100000 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000011 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000100 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000001 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000010 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011110 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011011 for cells of type $lcu.
No more expansions possible.
<suppressed ~5130 debug messages>

yosys> stat

3.71. Printing statistics.

=== b20 ===

   Number of wires:               3688
   Number of wire bits:          59773
   Number of public wires:          46
   Number of public wire bits:     732
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:              16983
     $_AND_                       1658
     $_DFFE_PP0P_                  356
     $_DFF_PP0_                     78
     $_MUX_                       9531
     $_NOT_                       1046
     $_OR_                        1683
     $_XOR_                       2073
     adder_carry                   558


yosys> opt_expr

3.72. Executing OPT_EXPR pass (perform const folding).
Optimizing module b20.
<suppressed ~5018 debug messages>

yosys> opt_merge -nomux

3.73. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b20'.
<suppressed ~9537 debug messages>
Removed a total of 3179 cells.

yosys> opt_muxtree

3.74. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b20..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.75. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b20.
Performed a total of 0 changes.

yosys> opt_merge

3.76. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b20'.
Removed a total of 0 cells.

yosys> opt_share

3.77. Executing OPT_SHARE pass.

yosys> opt_dff

3.78. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $auto$ff.cc:262:slice$2897 ($_DFFE_PP0P_) from module b20 (D = $auto$wreduce.cc:455:run$2273 [0], Q = \P2.reg3 [0]).
Adding EN signal on $auto$ff.cc:262:slice$2898 ($_DFFE_PP0P_) from module b20 (D = $auto$wreduce.cc:455:run$2273 [1], Q = \P2.reg3 [1]).
Adding EN signal on $auto$ff.cc:262:slice$2899 ($_DFFE_PP0P_) from module b20 (D = $auto$wreduce.cc:455:run$2273 [2], Q = \P2.reg3 [2]).

yosys> opt_clean

3.79. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b20..
Removed 714 unused cells and 2581 unused wires.
<suppressed ~715 debug messages>

yosys> opt_expr

3.80. Executing OPT_EXPR pass (perform const folding).
Optimizing module b20.
<suppressed ~228 debug messages>

yosys> opt_muxtree

3.81. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b20..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.82. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b20.
Performed a total of 0 changes.

yosys> opt_merge

3.83. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b20'.
<suppressed ~348 debug messages>
Removed a total of 116 cells.

yosys> opt_share

3.84. Executing OPT_SHARE pass.

yosys> opt_dff

3.85. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.86. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b20..
Removed 0 unused cells and 110 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.87. Executing OPT_EXPR pass (perform const folding).
Optimizing module b20.

yosys> opt_muxtree

3.88. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b20..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.89. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b20.
Performed a total of 0 changes.

yosys> opt_merge

3.90. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b20'.
Removed a total of 0 cells.

yosys> opt_share

3.91. Executing OPT_SHARE pass.

yosys> opt_dff

3.92. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.93. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b20..

yosys> opt_expr

3.94. Executing OPT_EXPR pass (perform const folding).
Optimizing module b20.
MAX OPT ITERATION = 3

yosys> opt -fast -full

3.95. Executing OPT pass (performing simple optimizations).

yosys> opt_expr -full

3.95.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b20.
<suppressed ~1376 debug messages>

yosys> opt_merge

3.95.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b20'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

yosys> opt_dff

3.95.3. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $auto$ff.cc:262:slice$9233 ($_DFFE_PP0P_) from module b20 (D = $flatten\P2.$auto$bmuxmap.cc:58:execute$1171 [31], Q = \P2.reg1 [31]).
Adding EN signal on $auto$ff.cc:262:slice$9232 ($_DFFE_PP0P_) from module b20 (D = $flatten\P2.$auto$bmuxmap.cc:58:execute$1171 [30], Q = \P2.reg1 [30]).
Adding EN signal on $auto$ff.cc:262:slice$9231 ($_DFFE_PP0P_) from module b20 (D = $flatten\P2.$auto$bmuxmap.cc:58:execute$1171 [29], Q = \P2.reg1 [29]).
Adding EN signal on $auto$ff.cc:262:slice$9230 ($_DFFE_PP0P_) from module b20 (D = $flatten\P2.$auto$bmuxmap.cc:58:execute$1171 [28], Q = \P2.reg1 [28]).
Adding EN signal on $auto$ff.cc:262:slice$9229 ($_DFFE_PP0P_) from module b20 (D = $flatten\P2.$auto$bmuxmap.cc:58:execute$1171 [27], Q = \P2.reg1 [27]).
Adding EN signal on $auto$ff.cc:262:slice$9228 ($_DFFE_PP0P_) from module b20 (D = $flatten\P2.$auto$bmuxmap.cc:58:execute$1171 [26], Q = \P2.reg1 [26]).
Adding EN signal on $auto$ff.cc:262:slice$9227 ($_DFFE_PP0P_) from module b20 (D = $flatten\P2.$auto$bmuxmap.cc:58:execute$1171 [25], Q = \P2.reg1 [25]).
Adding EN signal on $auto$ff.cc:262:slice$9226 ($_DFFE_PP0P_) from module b20 (D = $flatten\P2.$auto$bmuxmap.cc:58:execute$1171 [24], Q = \P2.reg1 [24]).
Adding EN signal on $auto$ff.cc:262:slice$9225 ($_DFFE_PP0P_) from module b20 (D = $flatten\P2.$auto$bmuxmap.cc:58:execute$1171 [23], Q = \P2.reg1 [23]).
Adding EN signal on $auto$ff.cc:262:slice$9224 ($_DFFE_PP0P_) from module b20 (D = $flatten\P2.$auto$bmuxmap.cc:58:execute$1171 [22], Q = \P2.reg1 [22]).
Adding EN signal on $auto$ff.cc:262:slice$9223 ($_DFFE_PP0P_) from module b20 (D = $flatten\P2.$auto$bmuxmap.cc:58:execute$1171 [21], Q = \P2.reg1 [21]).
Adding EN signal on $auto$ff.cc:262:slice$9222 ($_DFFE_PP0P_) from module b20 (D = $flatten\P2.$auto$bmuxmap.cc:58:execute$1171 [20], Q = \P2.reg1 [20]).
Adding EN signal on $auto$ff.cc:262:slice$9221 ($_DFFE_PP0P_) from module b20 (D = $flatten\P2.$auto$bmuxmap.cc:58:execute$1171 [19], Q = \P2.reg1 [19]).
Adding EN signal on $auto$ff.cc:262:slice$9220 ($_DFFE_PP0P_) from module b20 (D = $flatten\P2.$auto$bmuxmap.cc:58:execute$1171 [18], Q = \P2.reg1 [18]).
Adding EN signal on $auto$ff.cc:262:slice$9219 ($_DFFE_PP0P_) from module b20 (D = $flatten\P2.$auto$bmuxmap.cc:58:execute$1171 [17], Q = \P2.reg1 [17]).
Adding EN signal on $auto$ff.cc:262:slice$9218 ($_DFFE_PP0P_) from module b20 (D = $flatten\P2.$auto$bmuxmap.cc:58:execute$1171 [16], Q = \P2.reg1 [16]).
Adding EN signal on $auto$ff.cc:262:slice$9217 ($_DFFE_PP0P_) from module b20 (D = $flatten\P2.$auto$bmuxmap.cc:58:execute$1171 [15], Q = \P2.reg1 [15]).
Adding EN signal on $auto$ff.cc:262:slice$9216 ($_DFFE_PP0P_) from module b20 (D = $flatten\P2.$auto$bmuxmap.cc:58:execute$1171 [14], Q = \P2.reg1 [14]).
Adding EN signal on $auto$ff.cc:262:slice$9215 ($_DFFE_PP0P_) from module b20 (D = $flatten\P2.$auto$bmuxmap.cc:58:execute$1171 [13], Q = \P2.reg1 [13]).
Adding EN signal on $auto$ff.cc:262:slice$9214 ($_DFFE_PP0P_) from module b20 (D = $flatten\P2.$auto$bmuxmap.cc:58:execute$1171 [12], Q = \P2.reg1 [12]).
Adding EN signal on $auto$ff.cc:262:slice$9213 ($_DFFE_PP0P_) from module b20 (D = $flatten\P2.$auto$bmuxmap.cc:58:execute$1171 [11], Q = \P2.reg1 [11]).
Adding EN signal on $auto$ff.cc:262:slice$9212 ($_DFFE_PP0P_) from module b20 (D = $flatten\P2.$auto$bmuxmap.cc:58:execute$1171 [10], Q = \P2.reg1 [10]).
Adding EN signal on $auto$ff.cc:262:slice$9211 ($_DFFE_PP0P_) from module b20 (D = $flatten\P2.$auto$bmuxmap.cc:58:execute$1171 [9], Q = \P2.reg1 [9]).
Adding EN signal on $auto$ff.cc:262:slice$9210 ($_DFFE_PP0P_) from module b20 (D = $flatten\P2.$auto$bmuxmap.cc:58:execute$1171 [8], Q = \P2.reg1 [8]).
Adding EN signal on $auto$ff.cc:262:slice$9209 ($_DFFE_PP0P_) from module b20 (D = $flatten\P2.$auto$bmuxmap.cc:58:execute$1171 [7], Q = \P2.reg1 [7]).
Adding EN signal on $auto$ff.cc:262:slice$9208 ($_DFFE_PP0P_) from module b20 (D = $flatten\P2.$auto$bmuxmap.cc:58:execute$1171 [6], Q = \P2.reg1 [6]).
Adding EN signal on $auto$ff.cc:262:slice$9207 ($_DFFE_PP0P_) from module b20 (D = $flatten\P2.$auto$bmuxmap.cc:58:execute$1171 [5], Q = \P2.reg1 [5]).
Adding EN signal on $auto$ff.cc:262:slice$9206 ($_DFFE_PP0P_) from module b20 (D = $flatten\P2.$auto$bmuxmap.cc:58:execute$1171 [4], Q = \P2.reg1 [4]).
Adding EN signal on $auto$ff.cc:262:slice$9205 ($_DFFE_PP0P_) from module b20 (D = $flatten\P2.$auto$bmuxmap.cc:58:execute$1171 [3], Q = \P2.reg1 [3]).
Adding EN signal on $auto$ff.cc:262:slice$9204 ($_DFFE_PP0P_) from module b20 (D = $flatten\P2.$auto$bmuxmap.cc:58:execute$1171 [2], Q = \P2.reg1 [2]).
Adding EN signal on $auto$ff.cc:262:slice$9203 ($_DFFE_PP0P_) from module b20 (D = $flatten\P2.$auto$bmuxmap.cc:58:execute$1171 [1], Q = \P2.reg1 [1]).
Adding EN signal on $auto$ff.cc:262:slice$9202 ($_DFFE_PP0P_) from module b20 (D = $flatten\P2.$auto$bmuxmap.cc:58:execute$1171 [0], Q = \P2.reg1 [0]).
Adding EN signal on $auto$ff.cc:262:slice$9201 ($_DFFE_PP0P_) from module b20 (D = $flatten\P2.$auto$bmuxmap.cc:58:execute$1190 [31], Q = \P2.reg0 [31]).
Adding EN signal on $auto$ff.cc:262:slice$9200 ($_DFFE_PP0P_) from module b20 (D = $flatten\P2.$auto$bmuxmap.cc:58:execute$1190 [30], Q = \P2.reg0 [30]).
Adding EN signal on $auto$ff.cc:262:slice$9199 ($_DFFE_PP0P_) from module b20 (D = $flatten\P2.$auto$bmuxmap.cc:58:execute$1190 [29], Q = \P2.reg0 [29]).
Adding EN signal on $auto$ff.cc:262:slice$9198 ($_DFFE_PP0P_) from module b20 (D = $flatten\P2.$auto$bmuxmap.cc:58:execute$1190 [28], Q = \P2.reg0 [28]).
Adding EN signal on $auto$ff.cc:262:slice$9197 ($_DFFE_PP0P_) from module b20 (D = $flatten\P2.$auto$bmuxmap.cc:58:execute$1190 [27], Q = \P2.reg0 [27]).
Adding EN signal on $auto$ff.cc:262:slice$9196 ($_DFFE_PP0P_) from module b20 (D = $flatten\P2.$auto$bmuxmap.cc:58:execute$1190 [26], Q = \P2.reg0 [26]).
Adding EN signal on $auto$ff.cc:262:slice$9195 ($_DFFE_PP0P_) from module b20 (D = $flatten\P2.$auto$bmuxmap.cc:58:execute$1190 [25], Q = \P2.reg0 [25]).
Adding EN signal on $auto$ff.cc:262:slice$9194 ($_DFFE_PP0P_) from module b20 (D = $flatten\P2.$auto$bmuxmap.cc:58:execute$1190 [24], Q = \P2.reg0 [24]).
Adding EN signal on $auto$ff.cc:262:slice$9193 ($_DFFE_PP0P_) from module b20 (D = $flatten\P2.$auto$bmuxmap.cc:58:execute$1190 [23], Q = \P2.reg0 [23]).
Adding EN signal on $auto$ff.cc:262:slice$9192 ($_DFFE_PP0P_) from module b20 (D = $flatten\P2.$auto$bmuxmap.cc:58:execute$1190 [22], Q = \P2.reg0 [22]).
Adding EN signal on $auto$ff.cc:262:slice$9191 ($_DFFE_PP0P_) from module b20 (D = $flatten\P2.$auto$bmuxmap.cc:58:execute$1190 [21], Q = \P2.reg0 [21]).
Adding EN signal on $auto$ff.cc:262:slice$9190 ($_DFFE_PP0P_) from module b20 (D = $flatten\P2.$auto$bmuxmap.cc:58:execute$1190 [20], Q = \P2.reg0 [20]).
Adding EN signal on $auto$ff.cc:262:slice$9189 ($_DFFE_PP0P_) from module b20 (D = $flatten\P2.$auto$bmuxmap.cc:58:execute$1190 [19], Q = \P2.reg0 [19]).
Adding EN signal on $auto$ff.cc:262:slice$9188 ($_DFFE_PP0P_) from module b20 (D = $flatten\P2.$auto$bmuxmap.cc:58:execute$1190 [18], Q = \P2.reg0 [18]).
Adding EN signal on $auto$ff.cc:262:slice$9187 ($_DFFE_PP0P_) from module b20 (D = $flatten\P2.$auto$bmuxmap.cc:58:execute$1190 [17], Q = \P2.reg0 [17]).
Adding EN signal on $auto$ff.cc:262:slice$9186 ($_DFFE_PP0P_) from module b20 (D = $flatten\P2.$auto$bmuxmap.cc:58:execute$1190 [16], Q = \P2.reg0 [16]).
Adding EN signal on $auto$ff.cc:262:slice$9185 ($_DFFE_PP0P_) from module b20 (D = $flatten\P2.$auto$bmuxmap.cc:58:execute$1190 [15], Q = \P2.reg0 [15]).
Adding EN signal on $auto$ff.cc:262:slice$9184 ($_DFFE_PP0P_) from module b20 (D = $flatten\P2.$auto$bmuxmap.cc:58:execute$1190 [14], Q = \P2.reg0 [14]).
Adding EN signal on $auto$ff.cc:262:slice$9183 ($_DFFE_PP0P_) from module b20 (D = $flatten\P2.$auto$bmuxmap.cc:58:execute$1190 [13], Q = \P2.reg0 [13]).
Adding EN signal on $auto$ff.cc:262:slice$9182 ($_DFFE_PP0P_) from module b20 (D = $flatten\P2.$auto$bmuxmap.cc:58:execute$1190 [12], Q = \P2.reg0 [12]).
Adding EN signal on $auto$ff.cc:262:slice$9181 ($_DFFE_PP0P_) from module b20 (D = $flatten\P2.$auto$bmuxmap.cc:58:execute$1190 [11], Q = \P2.reg0 [11]).
Adding EN signal on $auto$ff.cc:262:slice$9180 ($_DFFE_PP0P_) from module b20 (D = $flatten\P2.$auto$bmuxmap.cc:58:execute$1190 [10], Q = \P2.reg0 [10]).
Adding EN signal on $auto$ff.cc:262:slice$9179 ($_DFFE_PP0P_) from module b20 (D = $flatten\P2.$auto$bmuxmap.cc:58:execute$1190 [9], Q = \P2.reg0 [9]).
Adding EN signal on $auto$ff.cc:262:slice$9178 ($_DFFE_PP0P_) from module b20 (D = $flatten\P2.$auto$bmuxmap.cc:58:execute$1190 [8], Q = \P2.reg0 [8]).
Adding EN signal on $auto$ff.cc:262:slice$9177 ($_DFFE_PP0P_) from module b20 (D = $flatten\P2.$auto$bmuxmap.cc:58:execute$1190 [7], Q = \P2.reg0 [7]).
Adding EN signal on $auto$ff.cc:262:slice$9176 ($_DFFE_PP0P_) from module b20 (D = $flatten\P2.$auto$bmuxmap.cc:58:execute$1190 [6], Q = \P2.reg0 [6]).
Adding EN signal on $auto$ff.cc:262:slice$9175 ($_DFFE_PP0P_) from module b20 (D = $flatten\P2.$auto$bmuxmap.cc:58:execute$1190 [5], Q = \P2.reg0 [5]).
Adding EN signal on $auto$ff.cc:262:slice$9174 ($_DFFE_PP0P_) from module b20 (D = $flatten\P2.$auto$bmuxmap.cc:58:execute$1190 [4], Q = \P2.reg0 [4]).
Adding EN signal on $auto$ff.cc:262:slice$9173 ($_DFFE_PP0P_) from module b20 (D = $flatten\P2.$auto$bmuxmap.cc:58:execute$1190 [3], Q = \P2.reg0 [3]).
Adding EN signal on $auto$ff.cc:262:slice$9172 ($_DFFE_PP0P_) from module b20 (D = $flatten\P2.$auto$bmuxmap.cc:58:execute$1190 [2], Q = \P2.reg0 [2]).
Adding EN signal on $auto$ff.cc:262:slice$9171 ($_DFFE_PP0P_) from module b20 (D = $flatten\P2.$auto$bmuxmap.cc:58:execute$1190 [1], Q = \P2.reg0 [1]).
Adding EN signal on $auto$ff.cc:262:slice$9170 ($_DFFE_PP0P_) from module b20 (D = $flatten\P2.$auto$bmuxmap.cc:58:execute$1190 [0], Q = \P2.reg0 [0]).

yosys> opt_clean

3.95.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b20..
Removed 0 unused cells and 157 unused wires.
<suppressed ~1 debug messages>

3.95.5. Rerunning OPT passes. (Removed registers in this run.)

yosys> opt_expr -full

3.95.6. Executing OPT_EXPR pass (perform const folding).
Optimizing module b20.
<suppressed ~258 debug messages>

yosys> opt_merge

3.95.7. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b20'.
<suppressed ~750 debug messages>
Removed a total of 250 cells.

yosys> opt_dff

3.95.8. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.95.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b20..
Removed 0 unused cells and 314 unused wires.
<suppressed ~1 debug messages>

3.95.10. Finished fast OPT passes.

yosys> techmap -map +/techmap.v

3.96. Executing TECHMAP pass (map to technology primitives).

3.96.1. Executing Verilog-2005 frontend: /home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.96.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~71 debug messages>

yosys> opt -sat

3.97. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.97.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b20.

yosys> opt_merge -nomux

3.97.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b20'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.97.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b20..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.97.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b20.
Performed a total of 0 changes.

yosys> opt_merge

3.97.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b20'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.97.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.97.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b20..

yosys> opt_expr

3.97.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module b20.

3.97.9. Finished OPT passes. (There is nothing left to do.)

yosys> abc -dff

3.98. Executing ABC pass (technology mapping using ABC).

3.98.1. Summary of detected clock domains:
  855 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$2012, arst=\reset, srst={ }
  167 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$2055, arst=\reset, srst={ }
  148 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$2086, arst=\reset, srst={ }
  552 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$2103, arst=\reset, srst={ }
  769 cells in clk=\clock, en=\P1.state, arst=\reset, srst={ }
  149 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$2121, arst=\reset, srst={ }
  751 cells in clk=\clock, en=\P2.state, arst=\reset, srst={ }
  551 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$23064, arst=\reset, srst={ }
  588 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$22520, arst=\reset, srst={ }
  125 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$22178, arst=\reset, srst={ }
  737 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$2138, arst=\reset, srst={ }
  609 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$2157, arst=\reset, srst={ }
  542 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$2176, arst=\reset, srst={ }
  296 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$2181, arst=\reset, srst={ }
  149 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$2212, arst=\reset, srst={ }
  506 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$2229, arst=\reset, srst={ }
  1148 cells in clk=\clock, en={ }, arst=\reset, srst={ }

3.98.2. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2012, asynchronously reset by \reset
Extracted 795 gates and 1089 wires to a netlist network with 293 inputs and 215 outputs.

3.98.2.1. Executing ABC.

3.98.3. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2055, asynchronously reset by \reset
Extracted 135 gates and 268 wires to a netlist network with 133 inputs and 96 outputs.

3.98.3.1. Executing ABC.

3.98.4. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2086, asynchronously reset by \reset
Extracted 148 gates and 205 wires to a netlist network with 57 inputs and 66 outputs.

3.98.4.1. Executing ABC.

3.98.5. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2103, asynchronously reset by \reset
Extracted 485 gates and 602 wires to a netlist network with 115 inputs and 69 outputs.

3.98.5.1. Executing ABC.

3.98.6. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by \P1.state, asynchronously reset by \reset
Extracted 737 gates and 935 wires to a netlist network with 197 inputs and 50 outputs.

3.98.6.1. Executing ABC.

3.98.7. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2121, asynchronously reset by \reset
Extracted 133 gates and 203 wires to a netlist network with 69 inputs and 46 outputs.

3.98.7.1. Executing ABC.

3.98.8. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by \P2.state, asynchronously reset by \reset
Extracted 751 gates and 909 wires to a netlist network with 157 inputs and 51 outputs.

3.98.8.1. Executing ABC.

3.98.9. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$23064, asynchronously reset by \reset
Extracted 551 gates and 767 wires to a netlist network with 214 inputs and 109 outputs.

3.98.9.1. Executing ABC.

3.98.10. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$22520, asynchronously reset by \reset
Extracted 564 gates and 778 wires to a netlist network with 212 inputs and 120 outputs.

3.98.10.1. Executing ABC.

3.98.11. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$22178, asynchronously reset by \reset
Extracted 121 gates and 188 wires to a netlist network with 66 inputs and 32 outputs.

3.98.11.1. Executing ABC.

3.98.12. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2138, asynchronously reset by \reset
Extracted 685 gates and 946 wires to a netlist network with 260 inputs and 175 outputs.

3.98.12.1. Executing ABC.

3.98.13. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2157, asynchronously reset by \reset
Extracted 609 gates and 845 wires to a netlist network with 235 inputs and 101 outputs.

3.98.13.1. Executing ABC.

3.98.14. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2176, asynchronously reset by \reset
Extracted 513 gates and 738 wires to a netlist network with 223 inputs and 82 outputs.

3.98.14.1. Executing ABC.

3.98.15. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2181, asynchronously reset by \reset
Extracted 264 gates and 486 wires to a netlist network with 222 inputs and 95 outputs.

3.98.15.1. Executing ABC.

3.98.16. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2212, asynchronously reset by \reset
Extracted 129 gates and 168 wires to a netlist network with 39 inputs and 69 outputs.

3.98.16.1. Executing ABC.

3.98.17. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2229, asynchronously reset by \reset
Extracted 440 gates and 597 wires to a netlist network with 156 inputs and 102 outputs.

3.98.17.1. Executing ABC.

3.98.18. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, asynchronously reset by \reset
Extracted 1024 gates and 1339 wires to a netlist network with 313 inputs and 265 outputs.

3.98.18.1. Executing ABC.

yosys> abc -dff

3.99. Executing ABC pass (technology mapping using ABC).

3.99.1. Summary of detected clock domains:
  153 cells in clk=\clock, en=$abc$28752$auto$opt_dff.cc:219:make_patterns_logic$22178, arst=\reset, srst={ }
  755 cells in clk=\clock, en=$abc$28885$auto$opt_dff.cc:219:make_patterns_logic$2138, arst=\reset, srst={ }
  939 cells in clk=\clock, en=$abc$29755$auto$opt_dff.cc:219:make_patterns_logic$2157, arst=\reset, srst={ }
  793 cells in clk=\clock, en=$abc$30563$auto$opt_dff.cc:219:make_patterns_logic$2176, arst=\reset, srst={ }
  245 cells in clk=\clock, en=$abc$31700$auto$opt_dff.cc:219:make_patterns_logic$2229, arst=\reset, srst={ }
  170 cells in clk=\clock, en=$abc$31923$auto$opt_dff.cc:219:make_patterns_logic$2181, arst=\reset, srst={ }
  939 cells in clk=\clock, en=$abc$27172$auto$opt_dff.cc:219:make_patterns_logic$23064, arst=\reset, srst={ }
  255 cells in clk=\clock, en=$abc$31573$auto$opt_dff.cc:219:make_patterns_logic$2212, arst=\reset, srst={ }
  808 cells in clk=\clock, en=$abc$27979$auto$opt_dff.cc:219:make_patterns_logic$22520, arst=\reset, srst={ }
  960 cells in clk=\clock, en=$abc$23800$auto$opt_dff.cc:219:make_patterns_logic$2012, arst=\reset, srst={ }
  281 cells in clk=\clock, en=$abc$24873$auto$opt_dff.cc:219:make_patterns_logic$2055, arst=\reset, srst={ }
  391 cells in clk=\clock, en=$abc$25045$auto$opt_dff.cc:219:make_patterns_logic$2086, arst=\reset, srst={ }
  241 cells in clk=\clock, en=$abc$25169$auto$opt_dff.cc:219:make_patterns_logic$2103, arst=\reset, srst={ }
  137 cells in clk=\clock, en=$abc$26195$auto$opt_dff.cc:219:make_patterns_logic$2121, arst=\reset, srst={ }
  1568 cells in clk=\clock, en=$abc$31923$lo35, arst=\reset, srst={ }
  588 cells in clk=\clock, en={ }, arst=\reset, srst={ }

3.99.2. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$28752$auto$opt_dff.cc:219:make_patterns_logic$22178, asynchronously reset by \reset
Extracted 148 gates and 225 wires to a netlist network with 77 inputs and 47 outputs.

3.99.2.1. Executing ABC.

3.99.3. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$28885$auto$opt_dff.cc:219:make_patterns_logic$2138, asynchronously reset by \reset
Extracted 750 gates and 980 wires to a netlist network with 230 inputs and 70 outputs.

3.99.3.1. Executing ABC.

3.99.4. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$29755$auto$opt_dff.cc:219:make_patterns_logic$2157, asynchronously reset by \reset
Extracted 879 gates and 1144 wires to a netlist network with 265 inputs and 211 outputs.

3.99.4.1. Executing ABC.

3.99.5. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$30563$auto$opt_dff.cc:219:make_patterns_logic$2176, asynchronously reset by \reset
Extracted 771 gates and 1000 wires to a netlist network with 229 inputs and 116 outputs.

3.99.5.1. Executing ABC.

3.99.6. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$31700$auto$opt_dff.cc:219:make_patterns_logic$2229, asynchronously reset by \reset
Extracted 181 gates and 326 wires to a netlist network with 145 inputs and 69 outputs.

3.99.6.1. Executing ABC.

3.99.7. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$31923$auto$opt_dff.cc:219:make_patterns_logic$2181, asynchronously reset by \reset
Extracted 138 gates and 271 wires to a netlist network with 133 inputs and 66 outputs.

3.99.7.1. Executing ABC.

3.99.8. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$27172$auto$opt_dff.cc:219:make_patterns_logic$23064, asynchronously reset by \reset
Extracted 877 gates and 1138 wires to a netlist network with 261 inputs and 191 outputs.

3.99.8.1. Executing ABC.

3.99.9. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$31573$auto$opt_dff.cc:219:make_patterns_logic$2212, asynchronously reset by \reset
Extracted 195 gates and 307 wires to a netlist network with 112 inputs and 73 outputs.

3.99.9.1. Executing ABC.

3.99.10. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$27979$auto$opt_dff.cc:219:make_patterns_logic$22520, asynchronously reset by \reset
Extracted 788 gates and 1034 wires to a netlist network with 246 inputs and 157 outputs.

3.99.10.1. Executing ABC.

3.99.11. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$23800$auto$opt_dff.cc:219:make_patterns_logic$2012, asynchronously reset by \reset
Extracted 956 gates and 1180 wires to a netlist network with 224 inputs and 134 outputs.

3.99.11.1. Executing ABC.

3.99.12. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$24873$auto$opt_dff.cc:219:make_patterns_logic$2055, asynchronously reset by \reset
Extracted 249 gates and 473 wires to a netlist network with 224 inputs and 65 outputs.

3.99.12.1. Executing ABC.

3.99.13. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$25045$auto$opt_dff.cc:219:make_patterns_logic$2086, asynchronously reset by \reset
Extracted 331 gates and 521 wires to a netlist network with 190 inputs and 126 outputs.

3.99.13.1. Executing ABC.

3.99.14. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$25169$auto$opt_dff.cc:219:make_patterns_logic$2103, asynchronously reset by \reset
Extracted 177 gates and 291 wires to a netlist network with 114 inputs and 65 outputs.

3.99.14.1. Executing ABC.

3.99.15. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$26195$auto$opt_dff.cc:219:make_patterns_logic$2121, asynchronously reset by \reset
Extracted 133 gates and 203 wires to a netlist network with 70 inputs and 42 outputs.

3.99.15.1. Executing ABC.

3.99.16. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$31923$lo35, asynchronously reset by \reset
Extracted 1568 gates and 1864 wires to a netlist network with 295 inputs and 116 outputs.

3.99.16.1. Executing ABC.

3.99.17. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, asynchronously reset by \reset
Extracted 524 gates and 695 wires to a netlist network with 171 inputs and 201 outputs.

3.99.17.1. Executing ABC.

yosys> abc -dff

3.100. Executing ABC pass (technology mapping using ABC).

3.100.1. Summary of detected clock domains:
  148 cells in clk=\clock, en=$abc$32661$abc$28752$auto$opt_dff.cc:219:make_patterns_logic$22178, arst=\reset, srst={ }
  903 cells in clk=\clock, en=$abc$32810$abc$28885$auto$opt_dff.cc:219:make_patterns_logic$2138, arst=\reset, srst={ }
  873 cells in clk=\clock, en=$abc$33651$abc$29755$auto$opt_dff.cc:219:make_patterns_logic$2157, arst=\reset, srst={ }
  240 cells in clk=\clock, en=$abc$35407$abc$31700$auto$opt_dff.cc:219:make_patterns_logic$2229, arst=\reset, srst={ }
  174 cells in clk=\clock, en=$abc$35583$abc$31923$auto$opt_dff.cc:219:make_patterns_logic$2181, arst=\reset, srst={ }
  905 cells in clk=\clock, en=$abc$35724$abc$27172$auto$opt_dff.cc:219:make_patterns_logic$23064, arst=\reset, srst={ }
  265 cells in clk=\clock, en=$abc$36574$abc$31573$auto$opt_dff.cc:219:make_patterns_logic$2212, arst=\reset, srst={ }
  856 cells in clk=\clock, en=$abc$36792$abc$27979$auto$opt_dff.cc:219:make_patterns_logic$22520, arst=\reset, srst={ }
  1091 cells in clk=\clock, en=$abc$37689$abc$23800$auto$opt_dff.cc:219:make_patterns_logic$2012, arst=\reset, srst={ }
  281 cells in clk=\clock, en=$abc$38750$abc$24873$auto$opt_dff.cc:219:make_patterns_logic$2055, arst=\reset, srst={ }
  444 cells in clk=\clock, en=$abc$38999$abc$25045$auto$opt_dff.cc:219:make_patterns_logic$2086, arst=\reset, srst={ }
  857 cells in clk=\clock, en=$abc$34573$abc$30563$auto$opt_dff.cc:219:make_patterns_logic$2176, arst=\reset, srst={ }
  243 cells in clk=\clock, en=$abc$39404$abc$25169$auto$opt_dff.cc:219:make_patterns_logic$2103, arst=\reset, srst={ }
  1627 cells in clk=\clock, en=$abc$41348$lo35, arst=\reset, srst={ }
  154 cells in clk=\clock, en=$abc$39577$abc$26195$auto$opt_dff.cc:219:make_patterns_logic$2121, arst=\reset, srst={ }
  570 cells in clk=\clock, en={ }, arst=\reset, srst={ }

3.100.2. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$32661$abc$28752$auto$opt_dff.cc:219:make_patterns_logic$22178, asynchronously reset by \reset
Extracted 140 gates and 214 wires to a netlist network with 74 inputs and 40 outputs.

3.100.2.1. Executing ABC.

3.100.3. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$32810$abc$28885$auto$opt_dff.cc:219:make_patterns_logic$2138, asynchronously reset by \reset
Extracted 877 gates and 1126 wires to a netlist network with 249 inputs and 104 outputs.

3.100.3.1. Executing ABC.

3.100.4. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$33651$abc$29755$auto$opt_dff.cc:219:make_patterns_logic$2157, asynchronously reset by \reset
Extracted 861 gates and 1102 wires to a netlist network with 241 inputs and 146 outputs.

3.100.4.1. Executing ABC.

3.100.5. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$35407$abc$31700$auto$opt_dff.cc:219:make_patterns_logic$2229, asynchronously reset by \reset
Extracted 176 gates and 315 wires to a netlist network with 139 inputs and 67 outputs.

3.100.5.1. Executing ABC.

3.100.6. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$35583$abc$31923$auto$opt_dff.cc:219:make_patterns_logic$2181, asynchronously reset by \reset
Extracted 142 gates and 277 wires to a netlist network with 135 inputs and 67 outputs.

3.100.6.1. Executing ABC.

3.100.7. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$35724$abc$27172$auto$opt_dff.cc:219:make_patterns_logic$23064, asynchronously reset by \reset
Extracted 841 gates and 1084 wires to a netlist network with 243 inputs and 193 outputs.

3.100.7.1. Executing ABC.

3.100.8. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$36574$abc$31573$auto$opt_dff.cc:219:make_patterns_logic$2212, asynchronously reset by \reset
Extracted 207 gates and 325 wires to a netlist network with 118 inputs and 85 outputs.

3.100.8.1. Executing ABC.

3.100.9. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$36792$abc$27979$auto$opt_dff.cc:219:make_patterns_logic$22520, asynchronously reset by \reset
Extracted 846 gates and 1082 wires to a netlist network with 236 inputs and 133 outputs.

3.100.9.1. Executing ABC.

3.100.10. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$37689$abc$23800$auto$opt_dff.cc:219:make_patterns_logic$2012, asynchronously reset by \reset
Extracted 1082 gates and 1325 wires to a netlist network with 243 inputs and 161 outputs.

3.100.10.1. Executing ABC.

3.100.11. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$38750$abc$24873$auto$opt_dff.cc:219:make_patterns_logic$2055, asynchronously reset by \reset
Extracted 249 gates and 475 wires to a netlist network with 226 inputs and 66 outputs.

3.100.11.1. Executing ABC.

3.100.12. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$38999$abc$25045$auto$opt_dff.cc:219:make_patterns_logic$2086, asynchronously reset by \reset
Extracted 384 gates and 562 wires to a netlist network with 178 inputs and 124 outputs.

3.100.12.1. Executing ABC.

3.100.13. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$34573$abc$30563$auto$opt_dff.cc:219:make_patterns_logic$2176, asynchronously reset by \reset
Extracted 808 gates and 1031 wires to a netlist network with 223 inputs and 127 outputs.

3.100.13.1. Executing ABC.

3.100.14. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$39404$abc$25169$auto$opt_dff.cc:219:make_patterns_logic$2103, asynchronously reset by \reset
Extracted 179 gates and 298 wires to a netlist network with 119 inputs and 70 outputs.

3.100.14.1. Executing ABC.

3.100.15. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$41348$lo35, asynchronously reset by \reset
Extracted 1625 gates and 1939 wires to a netlist network with 314 inputs and 128 outputs.

3.100.15.1. Executing ABC.

3.100.16. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$39577$abc$26195$auto$opt_dff.cc:219:make_patterns_logic$2121, asynchronously reset by \reset
Extracted 150 gates and 222 wires to a netlist network with 72 inputs and 45 outputs.

3.100.16.1. Executing ABC.

3.100.17. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, asynchronously reset by \reset
Extracted 506 gates and 679 wires to a netlist network with 173 inputs and 200 outputs.

3.100.17.1. Executing ABC.

yosys> abc -dff

3.101. Executing ABC pass (technology mapping using ABC).

3.101.1. Summary of detected clock domains:
  238 cells in clk=\clock, en=$abc$48446$abc$39404$abc$25169$auto$opt_dff.cc:219:make_patterns_logic$2103, arst=\reset, srst={ }
  138 cells in clk=\clock, en=$abc$50200$abc$39577$abc$26195$auto$opt_dff.cc:219:make_patterns_logic$2121, arst=\reset, srst={ }
  175 cells in clk=\clock, en=$abc$41872$abc$32661$abc$28752$auto$opt_dff.cc:219:make_patterns_logic$22178, arst=\reset, srst={ }
  901 cells in clk=\clock, en=$abc$42022$abc$32810$abc$28885$auto$opt_dff.cc:219:make_patterns_logic$2138, arst=\reset, srst={ }
  803 cells in clk=\clock, en=$abc$42884$abc$33651$abc$29755$auto$opt_dff.cc:219:make_patterns_logic$2157, arst=\reset, srst={ }
  241 cells in clk=\clock, en=$abc$43715$abc$35407$abc$31700$auto$opt_dff.cc:219:make_patterns_logic$2229, arst=\reset, srst={ }
  173 cells in clk=\clock, en=$abc$43887$abc$35583$abc$31923$auto$opt_dff.cc:219:make_patterns_logic$2181, arst=\reset, srst={ }
  1567 cells in clk=\clock, en=$abc$50341$lo35, arst=\reset, srst={ }
  856 cells in clk=\clock, en=$abc$44029$abc$35724$abc$27172$auto$opt_dff.cc:219:make_patterns_logic$23064, arst=\reset, srst={ }
  244 cells in clk=\clock, en=$abc$44856$abc$36574$abc$31573$auto$opt_dff.cc:219:make_patterns_logic$2212, arst=\reset, srst={ }
  815 cells in clk=\clock, en=$abc$45079$abc$36792$abc$27979$auto$opt_dff.cc:219:make_patterns_logic$22520, arst=\reset, srst={ }
  1056 cells in clk=\clock, en=$abc$45872$abc$37689$abc$23800$auto$opt_dff.cc:219:make_patterns_logic$2012, arst=\reset, srst={ }
  282 cells in clk=\clock, en=$abc$46948$abc$38750$abc$24873$auto$opt_dff.cc:219:make_patterns_logic$2055, arst=\reset, srst={ }
  464 cells in clk=\clock, en=$abc$47198$abc$38999$abc$25045$auto$opt_dff.cc:219:make_patterns_logic$2086, arst=\reset, srst={ }
  878 cells in clk=\clock, en=$abc$47600$abc$34573$abc$30563$auto$opt_dff.cc:219:make_patterns_logic$2176, arst=\reset, srst={ }
  557 cells in clk=\clock, en={ }, arst=\reset, srst={ }

3.101.2. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$48446$abc$39404$abc$25169$auto$opt_dff.cc:219:make_patterns_logic$2103, asynchronously reset by \reset
Extracted 174 gates and 288 wires to a netlist network with 114 inputs and 68 outputs.

3.101.2.1. Executing ABC.

3.101.3. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$50200$abc$39577$abc$26195$auto$opt_dff.cc:219:make_patterns_logic$2121, asynchronously reset by \reset
Extracted 126 gates and 192 wires to a netlist network with 66 inputs and 48 outputs.

3.101.3.1. Executing ABC.

3.101.4. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$41872$abc$32661$abc$28752$auto$opt_dff.cc:219:make_patterns_logic$22178, asynchronously reset by \reset
Extracted 169 gates and 251 wires to a netlist network with 82 inputs and 45 outputs.

3.101.4.1. Executing ABC.

3.101.5. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$42022$abc$32810$abc$28885$auto$opt_dff.cc:219:make_patterns_logic$2138, asynchronously reset by \reset
Extracted 874 gates and 1121 wires to a netlist network with 247 inputs and 120 outputs.

3.101.5.1. Executing ABC.

3.101.6. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$42884$abc$33651$abc$29755$auto$opt_dff.cc:219:make_patterns_logic$2157, asynchronously reset by \reset
Extracted 790 gates and 1031 wires to a netlist network with 241 inputs and 123 outputs.

3.101.6.1. Executing ABC.

3.101.7. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$43715$abc$35407$abc$31700$auto$opt_dff.cc:219:make_patterns_logic$2229, asynchronously reset by \reset
Extracted 177 gates and 308 wires to a netlist network with 131 inputs and 64 outputs.

3.101.7.1. Executing ABC.

3.101.8. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$43887$abc$35583$abc$31923$auto$opt_dff.cc:219:make_patterns_logic$2181, asynchronously reset by \reset
Extracted 141 gates and 276 wires to a netlist network with 135 inputs and 67 outputs.

3.101.8.1. Executing ABC.

3.101.9. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$50341$lo35, asynchronously reset by \reset
Extracted 1565 gates and 1892 wires to a netlist network with 327 inputs and 118 outputs.

3.101.9.1. Executing ABC.

3.101.10. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$44029$abc$35724$abc$27172$auto$opt_dff.cc:219:make_patterns_logic$23064, asynchronously reset by \reset
Extracted 812 gates and 1043 wires to a netlist network with 231 inputs and 158 outputs.

3.101.10.1. Executing ABC.

3.101.11. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$44856$abc$36574$abc$31573$auto$opt_dff.cc:219:make_patterns_logic$2212, asynchronously reset by \reset
Extracted 186 gates and 289 wires to a netlist network with 103 inputs and 74 outputs.

3.101.11.1. Executing ABC.

3.101.12. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$45079$abc$36792$abc$27979$auto$opt_dff.cc:219:make_patterns_logic$22520, asynchronously reset by \reset
Extracted 791 gates and 1009 wires to a netlist network with 218 inputs and 168 outputs.

3.101.12.1. Executing ABC.

3.101.13. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$45872$abc$37689$abc$23800$auto$opt_dff.cc:219:make_patterns_logic$2012, asynchronously reset by \reset
Extracted 1039 gates and 1287 wires to a netlist network with 248 inputs and 147 outputs.

3.101.13.1. Executing ABC.

3.101.14. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$46948$abc$38750$abc$24873$auto$opt_dff.cc:219:make_patterns_logic$2055, asynchronously reset by \reset
Extracted 250 gates and 476 wires to a netlist network with 226 inputs and 66 outputs.

3.101.14.1. Executing ABC.

3.101.15. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$47198$abc$38999$abc$25045$auto$opt_dff.cc:219:make_patterns_logic$2086, asynchronously reset by \reset
Extracted 404 gates and 597 wires to a netlist network with 193 inputs and 125 outputs.

3.101.15.1. Executing ABC.

3.101.16. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$47600$abc$34573$abc$30563$auto$opt_dff.cc:219:make_patterns_logic$2176, asynchronously reset by \reset
Extracted 839 gates and 1064 wires to a netlist network with 225 inputs and 125 outputs.

3.101.16.1. Executing ABC.

3.101.17. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, asynchronously reset by \reset
Extracted 493 gates and 668 wires to a netlist network with 175 inputs and 193 outputs.

3.101.17.1. Executing ABC.

yosys> opt_ffinv

3.102. Executing OPT_FFINV pass (push inverters through FFs).
Discovering LUTs.
Pushed 0 inverters.

yosys> opt -sat

3.103. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.103.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b20.
<suppressed ~292 debug messages>

yosys> opt_merge -nomux

3.103.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b20'.
<suppressed ~438 debug messages>
Removed a total of 146 cells.

yosys> opt_muxtree

3.103.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b20..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.103.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b20.
Performed a total of 0 changes.

yosys> opt_merge

3.103.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b20'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.103.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.103.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b20..
Removed 1 unused cells and 41599 unused wires.
<suppressed ~25 debug messages>

yosys> opt_expr

3.103.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module b20.

3.103.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.103.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b20..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.103.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b20.
Performed a total of 0 changes.

yosys> opt_merge

3.103.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b20'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.103.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.103.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b20..

yosys> opt_expr

3.103.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module b20.

3.103.16. Finished OPT passes. (There is nothing left to do.)

yosys> bmuxmap

3.104. Executing BMUXMAP pass.

yosys> demuxmap

3.105. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> abc -script /home/users/temp_dir/yosys_5HpbRY/abc_tmp_1.scr

3.106. Executing ABC pass (technology mapping using ABC).

3.106.1. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Extracted 8348 gates and 9212 wires to a netlist network with 864 inputs and 969 outputs.

3.106.1.1. Executing ABC.
DE:   #PIs = 864  #Luts =  2748  Max Lvl =  36  Avg Lvl =   8.23  [   0.99 sec. at Pass 0]
DE:   #PIs = 864  #Luts =  2078  Max Lvl =  35  Avg Lvl =   7.94  [  29.63 sec. at Pass 1]
DE:   #PIs = 864  #Luts =  2059  Max Lvl =  38  Avg Lvl =   8.82  [   5.97 sec. at Pass 2]
DE:   #PIs = 864  #Luts =  2036  Max Lvl =  40  Avg Lvl =   8.47  [  13.45 sec. at Pass 3]
DE:   #PIs = 864  #Luts =  2018  Max Lvl =  33  Avg Lvl =   8.65  [   7.33 sec. at Pass 4]
DE:   #PIs = 864  #Luts =  1978  Max Lvl =  36  Avg Lvl =   8.51  [  13.99 sec. at Pass 5]
DE:   #PIs = 864  #Luts =  1962  Max Lvl =  32  Avg Lvl =   7.98  [   8.91 sec. at Pass 6]
DE:   #PIs = 864  #Luts =  1939  Max Lvl =  30  Avg Lvl =   8.12  [  11.76 sec. at Pass 7]
DE:   #PIs = 864  #Luts =  1923  Max Lvl =  24  Avg Lvl =   7.55  [   8.26 sec. at Pass 8]
DE:   #PIs = 864  #Luts =  1896  Max Lvl =  22  Avg Lvl =   7.31  [  11.09 sec. at Pass 9]
DE:   #PIs = 864  #Luts =  1889  Max Lvl =  26  Avg Lvl =   7.50  [   6.81 sec. at Pass 10]
DE:   #PIs = 864  #Luts =  1872  Max Lvl =  28  Avg Lvl =   8.19  [  11.04 sec. at Pass 11]
DE:   #PIs = 864  #Luts =  1863  Max Lvl =  28  Avg Lvl =   7.89  [   7.77 sec. at Pass 12]
DE:   #PIs = 864  #Luts =  1857  Max Lvl =  25  Avg Lvl =   7.46  [   9.43 sec. at Pass 13]
DE:   #PIs = 864  #Luts =  1846  Max Lvl =  27  Avg Lvl =   7.92  [   5.97 sec. at Pass 14]
DE:   #PIs = 864  #Luts =  1824  Max Lvl =  28  Avg Lvl =   7.74  [  11.17 sec. at Pass 15]
DE:   #PIs = 864  #Luts =  1814  Max Lvl =  27  Avg Lvl =   8.06  [   4.59 sec. at Pass 16]
DE:   #PIs = 864  #Luts =  1803  Max Lvl =  26  Avg Lvl =   7.91  [   9.15 sec. at Pass 17]
DE:   #PIs = 864  #Luts =  1803  Max Lvl =  26  Avg Lvl =   7.91  [   9.05 sec. at Pass 18]
DE:   #PIs = 864  #Luts =  1789  Max Lvl =  25  Avg Lvl =   7.69  [  12.52 sec. at Pass 19]
DE:   #PIs = 864  #Luts =  1781  Max Lvl =  25  Avg Lvl =   8.04  [   6.34 sec. at Pass 20]
DE:   #PIs = 864  #Luts =  1774  Max Lvl =  26  Avg Lvl =   8.13  [   9.76 sec. at Pass 21]
DE:   #PIs = 864  #Luts =  1774  Max Lvl =  26  Avg Lvl =   8.13  [   2.14 sec. at Pass 22]

yosys> opt_expr

3.107. Executing OPT_EXPR pass (perform const folding).
Optimizing module b20.

yosys> opt_merge -nomux

3.108. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b20'.
<suppressed ~15 debug messages>
Removed a total of 5 cells.

yosys> opt_muxtree

3.109. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b20..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.110. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b20.
Performed a total of 0 changes.

yosys> opt_merge

3.111. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b20'.
Removed a total of 0 cells.

yosys> opt_share

3.112. Executing OPT_SHARE pass.

yosys> opt_dff

3.113. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.114. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b20..
Removed 0 unused cells and 8960 unused wires.
<suppressed ~5 debug messages>

yosys> opt_expr

3.115. Executing OPT_EXPR pass (perform const folding).
Optimizing module b20.
MAX OPT ITERATION = 1

yosys> opt_ffinv

3.116. Executing OPT_FFINV pass (push inverters through FFs).
Discovering LUTs.
Pushed 1 inverters.

yosys> stat

3.117. Printing statistics.

=== b20 ===

   Number of wires:               1670
   Number of wire bits:           3742
   Number of public wires:          19
   Number of public wire bits:     262
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               2697
     $_DFFE_PP0P_                  356
     $_DFF_PP0_                     71
     $_DFF_PP1_                      1
     $lut                         1711
     adder_carry                   558


yosys> shregmap -minlen 8 -maxlen 20

3.118. Executing SHREGMAP pass (map shift registers).
Converted 0 dff cells into 0 shift registers.

yosys> dfflegalize -cell $_DFF_?_ 0 -cell $_DFF_???_ 0 -cell $_DFFE_????_ 0 -cell $_DFFSR_???_ 0 -cell $_DFFSRE_????_ 0 -cell $_DLATCHSR_PPP_ 0

3.119. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

yosys> stat

3.120. Printing statistics.

=== b20 ===

   Number of wires:               1670
   Number of wire bits:           3742
   Number of public wires:          19
   Number of public wire bits:     262
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               2697
     $_DFFE_PP0P_                  356
     $_DFF_PP0_                     71
     $_DFF_PP1_                      1
     $lut                         1711
     adder_carry                   558


yosys> techmap -map +/techmap.v -map +/rapidsilicon/genesis/ffs_map.v

3.121. Executing TECHMAP pass (map to technology primitives).

3.121.1. Executing Verilog-2005 frontend: /home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.121.2. Executing Verilog-2005 frontend: /home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/ffs_map.v
Parsing Verilog input from `/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/ffs_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP0N_'.
Generating RTLIL representation for module `\$_DFFE_PN0P_'.
Generating RTLIL representation for module `\$_DFFE_PN0N_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP1N_'.
Generating RTLIL representation for module `\$_DFFE_PN1P_'.
Generating RTLIL representation for module `\$_DFFE_PN1N_'.
Generating RTLIL representation for module `\$_DFFSR_PPP_'.
Generating RTLIL representation for module `\$_DFFSR_PNP_'.
Generating RTLIL representation for module `\$_DFFSR_PNN_'.
Generating RTLIL representation for module `\$_DFFSR_PPN_'.
Generating RTLIL representation for module `\$_DFFSR_NPP_'.
Generating RTLIL representation for module `\$_DFFSR_NNP_'.
Generating RTLIL representation for module `\$_DFFSR_NNN_'.
Generating RTLIL representation for module `\$_DFFSR_NPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PNPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPNP_'.
Generating RTLIL representation for module `\$_DFFSRE_PNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PNPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PPNN_'.
Generating RTLIL representation for module `\$_DFFSRE_PNNN_'.
Generating RTLIL representation for module `\$_DLATCHSR_PPP_'.
Generating RTLIL representation for module `\$_DLATCHSR_NPP_'.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP0N_'.
Generating RTLIL representation for module `\$_DFFE_NN0P_'.
Generating RTLIL representation for module `\$_DFFE_NN0N_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_NP1N_'.
Generating RTLIL representation for module `\$_DFFE_NN1P_'.
Generating RTLIL representation for module `\$_DFFE_NN1N_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNPP_'.
Generating RTLIL representation for module `\$_DFFSRE_NPNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPN_'.
Generating RTLIL representation for module `\$_DFFSRE_NNPN_'.
Generating RTLIL representation for module `\$_DFFSRE_NPNN_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNN_'.
Generating RTLIL representation for module `\$__SHREG_DFF_P_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PN0_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NN0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFF_PN1_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_NN1_'.
Successfully finished Verilog frontend.

3.121.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $lut.
Using template \$_DFFE_PP0P_ for cells of type $_DFFE_PP0P_.
Using template \$_DFF_PP0_ for cells of type $_DFF_PP0_.
Using template \$_DFF_PP1_ for cells of type $_DFF_PP1_.
Using extmapper simplemap for cells of type $logic_not.
No more expansions possible.
<suppressed ~2703 debug messages>

yosys> opt_expr -mux_undef

3.122. Executing OPT_EXPR pass (perform const folding).
Optimizing module b20.
<suppressed ~38629 debug messages>

yosys> simplemap

3.123. Executing SIMPLEMAP pass (map simple cells to gate primitives).

yosys> opt_expr

3.124. Executing OPT_EXPR pass (perform const folding).
Optimizing module b20.

yosys> opt_merge

3.125. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b20'.
<suppressed ~18273 debug messages>
Removed a total of 6091 cells.

yosys> opt_dff -nodffe -nosdff

3.126. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.127. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b20..
Removed 0 unused cells and 6080 unused wires.
<suppressed ~1 debug messages>

yosys> opt -nodffe -nosdff

3.128. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.128.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b20.
<suppressed ~1450 debug messages>

yosys> opt_merge -nomux

3.128.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b20'.
<suppressed ~63 debug messages>
Removed a total of 21 cells.

yosys> opt_muxtree

3.128.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b20..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.128.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b20.
Performed a total of 0 changes.

yosys> opt_merge

3.128.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b20'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.128.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.128.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b20..
Removed 0 unused cells and 347 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.128.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module b20.

3.128.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.128.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b20..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.128.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b20.
Performed a total of 0 changes.

yosys> opt_merge

3.128.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b20'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.128.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.128.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b20..

yosys> opt_expr

3.128.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module b20.

3.128.16. Finished OPT passes. (There is nothing left to do.)

yosys> abc -script /home/users/temp_dir/yosys_5HpbRY/abc_tmp_2.scr

3.129. Executing ABC pass (technology mapping using ABC).

3.129.1. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Extracted 5940 gates and 6802 wires to a netlist network with 860 inputs and 908 outputs.

3.129.1.1. Executing ABC.
DE:   #PIs = 860  #Luts =  1721  Max Lvl =  26  Avg Lvl =   8.37  [   0.58 sec. at Pass 0]
DE:   #PIs = 860  #Luts =  1712  Max Lvl =  24  Avg Lvl =   7.70  [  27.33 sec. at Pass 1]
DE:   #PIs = 860  #Luts =  1697  Max Lvl =  26  Avg Lvl =   8.19  [   4.76 sec. at Pass 2]
DE:   #PIs = 860  #Luts =  1694  Max Lvl =  23  Avg Lvl =   7.98  [   8.66 sec. at Pass 3]
DE:   #PIs = 860  #Luts =  1684  Max Lvl =  24  Avg Lvl =   8.04  [   7.13 sec. at Pass 4]
DE:   #PIs = 860  #Luts =  1684  Max Lvl =  24  Avg Lvl =   8.04  [  10.67 sec. at Pass 5]
DE:   #PIs = 860  #Luts =  1677  Max Lvl =  25  Avg Lvl =   8.38  [   8.33 sec. at Pass 6]
DE:   #PIs = 860  #Luts =  1674  Max Lvl =  27  Avg Lvl =   8.44  [   9.57 sec. at Pass 7]
DE:   #PIs = 860  #Luts =  1673  Max Lvl =  26  Avg Lvl =   7.87  [   5.51 sec. at Pass 8]
DE:   #PIs = 860  #Luts =  1673  Max Lvl =  26  Avg Lvl =   7.87  [  11.35 sec. at Pass 9]
DE:   #PIs = 860  #Luts =  1670  Max Lvl =  25  Avg Lvl =   8.05  [   7.80 sec. at Pass 10]
DE:   #PIs = 860  #Luts =  1670  Max Lvl =  24  Avg Lvl =   7.75  [   7.84 sec. at Pass 11]
DE:   #PIs = 860  #Luts =  1667  Max Lvl =  24  Avg Lvl =   7.75  [   7.83 sec. at Pass 12]
DE:   #PIs = 860  #Luts =  1667  Max Lvl =  24  Avg Lvl =   7.75  [  10.82 sec. at Pass 13]
DE:   #PIs = 860  #Luts =  1665  Max Lvl =  24  Avg Lvl =   7.75  [   5.87 sec. at Pass 14]
DE:   #PIs = 860  #Luts =  1665  Max Lvl =  24  Avg Lvl =   7.75  [   8.93 sec. at Pass 15]
DE:   #PIs = 860  #Luts =  1663  Max Lvl =  28  Avg Lvl =   8.17  [   5.16 sec. at Pass 16]
DE:   #PIs = 860  #Luts =  1663  Max Lvl =  28  Avg Lvl =   8.17  [   6.87 sec. at Pass 17]
DE:   #PIs = 860  #Luts =  1663  Max Lvl =  28  Avg Lvl =   8.17  [   6.06 sec. at Pass 18]
DE:   #PIs = 860  #Luts =  1661  Max Lvl =  25  Avg Lvl =   8.16  [  10.59 sec. at Pass 19]
DE:   #PIs = 860  #Luts =  1661  Max Lvl =  25  Avg Lvl =   8.16  [   5.39 sec. at Pass 20]
DE:   #PIs = 860  #Luts =  1655  Max Lvl =  26  Avg Lvl =   8.13  [   9.24 sec. at Pass 21]
DE:   #PIs = 860  #Luts =  1652  Max Lvl =  26  Avg Lvl =   8.13  [   1.52 sec. at Pass 22]

yosys> opt_expr

3.130. Executing OPT_EXPR pass (perform const folding).
Optimizing module b20.

yosys> opt_merge -nomux

3.131. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b20'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.132. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b20..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.133. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b20.
Performed a total of 0 changes.

yosys> opt_merge

3.134. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b20'.
Removed a total of 0 cells.

yosys> opt_share

3.135. Executing OPT_SHARE pass.

yosys> opt_dff

3.136. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.137. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b20..
Removed 0 unused cells and 5804 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.138. Executing OPT_EXPR pass (perform const folding).
Optimizing module b20.
MAX OPT ITERATION = 1

yosys> hierarchy -check

3.139. Executing HIERARCHY pass (managing design hierarchy).

3.139.1. Analyzing design hierarchy..
Top module:  \b20

3.139.2. Analyzing design hierarchy..
Top module:  \b20
Removed 0 unused modules.

yosys> stat

3.140. Printing statistics.

=== b20 ===

   Number of wires:               1610
   Number of wire bits:           3682
   Number of public wires:          19
   Number of public wire bits:     262
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               2638
     $lut                         1652
     adder_carry                   558
     dffsre                        428


yosys> opt_clean -purge

3.141. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b20..
Removed 0 unused cells and 8 unused wires.
<suppressed ~8 debug messages>

yosys> write_verilog -noattr -nohex synthesized.v

3.142. Executing Verilog backend.
Dumping module `\b20'.

Warnings: 5 unique messages, 6 total
End of script. Logfile hash: 312bc9dc8c, CPU: user 65.28s system 1.41s, MEM: 130.11 MB peak
Yosys 0.18+10 (git sha1 7a7a25778, gcc 9.1.0 -fPIC -Os)
Time spent: 97% 6x abc (2504 sec), 0% 31x opt_dff (21 sec), ...
real 532.65
user 2364.61
sys 199.27
