
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys-Verific 0.0.53
 Yosys 0.18+10 (git sha1 a3cbfccc4, gcc 9.4.0-1ubuntu1~20.04.1 -fPIC -Os)


-- Executing script file `yosys.ys' --
echo on

yosys> plugin -i synth-rs

yosys> read -verific

yosys> read -incdir .

yosys> verific -vlog-incdir .

1. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific May22_SW_Release, released at Wed Jun  1 00:39:28 2022.

yosys> verilog_defaults -add -I.

yosys> read -vlog2k clock_tree_design.v

yosys> verific -vlog2k clock_tree_design.v

2. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific May22_SW_Release, released at Wed Jun  1 00:39:28 2022.
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'clock_tree_design.v'

yosys> synth_rs -top clock_tree_design -tech genesis -goal area -de -no_dsp -no_bram -verilog synthesized.v

3. Executing synth_rs pass: v0.4.61

yosys> read_verilog -lib -specify -nomem2reg +/rapidsilicon/common/cells_sim.v +/rapidsilicon/genesis/cells_sim.v

3.1. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\inv'.
Generating RTLIL representation for module `\buff'.
Generating RTLIL representation for module `\logic_0'.
Generating RTLIL representation for module `\logic_1'.
Generating RTLIL representation for module `\gclkbuff'.
Successfully finished Verilog frontend.

3.2. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/cells_sim.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\dffsre'.
Generating RTLIL representation for module `\dffnsre'.
Generating RTLIL representation for module `\latchsre'.
Generating RTLIL representation for module `\latchnsre'.
Generating RTLIL representation for module `\io_scff'.
Generating RTLIL representation for module `\scff'.
Generating RTLIL representation for module `\sh_dff'.
Generating RTLIL representation for module `\adder_carry'.
Generating RTLIL representation for module `\sdffr'.
Generating RTLIL representation for module `\sdffs'.
Generating RTLIL representation for module `\TDP_BRAM18'.
Generating RTLIL representation for module `\TDP36K'.
Generating RTLIL representation for module `\RS_DSP1'.
Generating RTLIL representation for module `\RS_DSP2'.
Generating RTLIL representation for module `\RS_DSP2_MULT'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGIN_REGOUT'.
Generating RTLIL representation for module `\dsp_t1_sim'.
Generating RTLIL representation for module `\dsp_t1_20x18x64'.
Generating RTLIL representation for module `\dsp_t1_10x9x32'.
Successfully finished Verilog frontend.

yosys> hierarchy -check -top clock_tree_design

3.3. Executing HIERARCHY pass (managing design hierarchy).
VERIFIC-INFO [VERI-1018] clock_tree_design.v:5: compiling module 'clock_tree_design'
VERIFIC-INFO [VERI-1018] clock_tree_design.v:300: compiling module 'T_ff'
Importing module clock_tree_design.
Importing module T_ff.

3.3.1. Analyzing design hierarchy..
Top module:  \clock_tree_design
Used module:     \T_ff

3.3.2. Analyzing design hierarchy..
Top module:  \clock_tree_design
Used module:     \T_ff
Removed 0 unused modules.

yosys> proc

3.4. Executing PROC pass (convert processes to netlists).

yosys> proc_clean

3.4.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> proc_rmdead

3.4.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

yosys> proc_prune

3.4.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

yosys> proc_init

3.4.4. Executing PROC_INIT pass (extract init attributes).

yosys> proc_arst

3.4.5. Executing PROC_ARST pass (detect async resets in processes).

yosys> proc_rom

3.4.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

yosys> proc_mux

3.4.7. Executing PROC_MUX pass (convert decision trees to multiplexers).

yosys> proc_dlatch

3.4.8. Executing PROC_DLATCH pass (convert process syncs to latches).

yosys> proc_dff

3.4.9. Executing PROC_DFF pass (convert process syncs to FFs).

yosys> proc_memwr

3.4.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

yosys> proc_clean

3.4.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> opt_expr -keepdc

3.4.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module T_ff.
<suppressed ~1 debug messages>
Optimizing module clock_tree_design.

yosys> bmuxmap

3.5. Executing BMUXMAP pass.

yosys> demuxmap

3.6. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> flatten

3.7. Executing FLATTEN pass (flatten design).
Deleting now unused module T_ff.
<suppressed ~80 debug messages>

yosys> bmuxmap

3.8. Executing BMUXMAP pass.

yosys> demuxmap

3.9. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> tribuf -logic

3.10. Executing TRIBUF pass.

yosys> deminout

3.11. Executing DEMINOUT pass (demote inout ports to input or output).

yosys> opt_expr

3.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module clock_tree_design.

yosys> opt_clean

3.13. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \clock_tree_design..
Removed 80 unused cells and 725 unused wires.
<suppressed ~322 debug messages>

yosys> check

3.14. Executing CHECK pass (checking for obvious problems).
Checking module clock_tree_design...
Found and reported 0 problems.

yosys> opt_expr

3.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module clock_tree_design.

yosys> opt_merge -nomux

3.16. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\clock_tree_design'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \clock_tree_design..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

yosys> opt_reduce

3.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \clock_tree_design.
Performed a total of 0 changes.

yosys> opt_merge

3.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\clock_tree_design'.
Removed a total of 0 cells.

yosys> opt_share

3.20. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.21. Executing OPT_DFF pass (perform DFF optimizations).
Changing const-value async load to async reset on $flatten\I9.$verific$Q_reg$clock_tree_design.v:323$353 ($aldff) from module clock_tree_design.
Changing const-value async load to async reset on $flatten\I8.$verific$Q_reg$clock_tree_design.v:323$353 ($aldff) from module clock_tree_design.
Changing const-value async load to async reset on $flatten\I79.$verific$Q_reg$clock_tree_design.v:323$353 ($aldff) from module clock_tree_design.
Changing const-value async load to async reset on $flatten\I78.$verific$Q_reg$clock_tree_design.v:323$353 ($aldff) from module clock_tree_design.
Changing const-value async load to async reset on $flatten\I77.$verific$Q_reg$clock_tree_design.v:323$353 ($aldff) from module clock_tree_design.
Changing const-value async load to async reset on $flatten\I76.$verific$Q_reg$clock_tree_design.v:323$353 ($aldff) from module clock_tree_design.
Changing const-value async load to async reset on $flatten\I75.$verific$Q_reg$clock_tree_design.v:323$353 ($aldff) from module clock_tree_design.
Changing const-value async load to async reset on $flatten\I74.$verific$Q_reg$clock_tree_design.v:323$353 ($aldff) from module clock_tree_design.
Changing const-value async load to async reset on $flatten\I73.$verific$Q_reg$clock_tree_design.v:323$353 ($aldff) from module clock_tree_design.
Changing const-value async load to async reset on $flatten\I72.$verific$Q_reg$clock_tree_design.v:323$353 ($aldff) from module clock_tree_design.
Changing const-value async load to async reset on $flatten\I71.$verific$Q_reg$clock_tree_design.v:323$353 ($aldff) from module clock_tree_design.
Changing const-value async load to async reset on $flatten\I70.$verific$Q_reg$clock_tree_design.v:323$353 ($aldff) from module clock_tree_design.
Changing const-value async load to async reset on $flatten\I7.$verific$Q_reg$clock_tree_design.v:323$353 ($aldff) from module clock_tree_design.
Changing const-value async load to async reset on $flatten\I69.$verific$Q_reg$clock_tree_design.v:323$353 ($aldff) from module clock_tree_design.
Changing const-value async load to async reset on $flatten\I68.$verific$Q_reg$clock_tree_design.v:323$353 ($aldff) from module clock_tree_design.
Changing const-value async load to async reset on $flatten\I67.$verific$Q_reg$clock_tree_design.v:323$353 ($aldff) from module clock_tree_design.
Changing const-value async load to async reset on $flatten\I66.$verific$Q_reg$clock_tree_design.v:323$353 ($aldff) from module clock_tree_design.
Changing const-value async load to async reset on $flatten\I65.$verific$Q_reg$clock_tree_design.v:323$353 ($aldff) from module clock_tree_design.
Changing const-value async load to async reset on $flatten\I64.$verific$Q_reg$clock_tree_design.v:323$353 ($aldff) from module clock_tree_design.
Changing const-value async load to async reset on $flatten\I63.$verific$Q_reg$clock_tree_design.v:323$353 ($aldff) from module clock_tree_design.
Changing const-value async load to async reset on $flatten\I62.$verific$Q_reg$clock_tree_design.v:323$353 ($aldff) from module clock_tree_design.
Changing const-value async load to async reset on $flatten\I61.$verific$Q_reg$clock_tree_design.v:323$353 ($aldff) from module clock_tree_design.
Changing const-value async load to async reset on $flatten\I60.$verific$Q_reg$clock_tree_design.v:323$353 ($aldff) from module clock_tree_design.
Changing const-value async load to async reset on $flatten\I6.$verific$Q_reg$clock_tree_design.v:323$353 ($aldff) from module clock_tree_design.
Changing const-value async load to async reset on $flatten\I59.$verific$Q_reg$clock_tree_design.v:323$353 ($aldff) from module clock_tree_design.
Changing const-value async load to async reset on $flatten\I58.$verific$Q_reg$clock_tree_design.v:323$353 ($aldff) from module clock_tree_design.
Changing const-value async load to async reset on $flatten\I57.$verific$Q_reg$clock_tree_design.v:323$353 ($aldff) from module clock_tree_design.
Changing const-value async load to async reset on $flatten\I56.$verific$Q_reg$clock_tree_design.v:323$353 ($aldff) from module clock_tree_design.
Changing const-value async load to async reset on $flatten\I55.$verific$Q_reg$clock_tree_design.v:323$353 ($aldff) from module clock_tree_design.
Changing const-value async load to async reset on $flatten\I54.$verific$Q_reg$clock_tree_design.v:323$353 ($aldff) from module clock_tree_design.
Changing const-value async load to async reset on $flatten\I53.$verific$Q_reg$clock_tree_design.v:323$353 ($aldff) from module clock_tree_design.
Changing const-value async load to async reset on $flatten\I52.$verific$Q_reg$clock_tree_design.v:323$353 ($aldff) from module clock_tree_design.
Changing const-value async load to async reset on $flatten\I51.$verific$Q_reg$clock_tree_design.v:323$353 ($aldff) from module clock_tree_design.
Changing const-value async load to async reset on $flatten\I50.$verific$Q_reg$clock_tree_design.v:323$353 ($aldff) from module clock_tree_design.
Changing const-value async load to async reset on $flatten\I5.$verific$Q_reg$clock_tree_design.v:323$353 ($aldff) from module clock_tree_design.
Changing const-value async load to async reset on $flatten\I49.$verific$Q_reg$clock_tree_design.v:323$353 ($aldff) from module clock_tree_design.
Changing const-value async load to async reset on $flatten\I48.$verific$Q_reg$clock_tree_design.v:323$353 ($aldff) from module clock_tree_design.
Changing const-value async load to async reset on $flatten\I47.$verific$Q_reg$clock_tree_design.v:323$353 ($aldff) from module clock_tree_design.
Changing const-value async load to async reset on $flatten\I46.$verific$Q_reg$clock_tree_design.v:323$353 ($aldff) from module clock_tree_design.
Changing const-value async load to async reset on $flatten\I45.$verific$Q_reg$clock_tree_design.v:323$353 ($aldff) from module clock_tree_design.
Changing const-value async load to async reset on $flatten\I44.$verific$Q_reg$clock_tree_design.v:323$353 ($aldff) from module clock_tree_design.
Changing const-value async load to async reset on $flatten\I43.$verific$Q_reg$clock_tree_design.v:323$353 ($aldff) from module clock_tree_design.
Changing const-value async load to async reset on $flatten\I42.$verific$Q_reg$clock_tree_design.v:323$353 ($aldff) from module clock_tree_design.
Changing const-value async load to async reset on $flatten\I41.$verific$Q_reg$clock_tree_design.v:323$353 ($aldff) from module clock_tree_design.
Changing const-value async load to async reset on $flatten\I40.$verific$Q_reg$clock_tree_design.v:323$353 ($aldff) from module clock_tree_design.
Changing const-value async load to async reset on $flatten\I4.$verific$Q_reg$clock_tree_design.v:323$353 ($aldff) from module clock_tree_design.
Changing const-value async load to async reset on $flatten\I39.$verific$Q_reg$clock_tree_design.v:323$353 ($aldff) from module clock_tree_design.
Changing const-value async load to async reset on $flatten\I38.$verific$Q_reg$clock_tree_design.v:323$353 ($aldff) from module clock_tree_design.
Changing const-value async load to async reset on $flatten\I37.$verific$Q_reg$clock_tree_design.v:323$353 ($aldff) from module clock_tree_design.
Changing const-value async load to async reset on $flatten\I36.$verific$Q_reg$clock_tree_design.v:323$353 ($aldff) from module clock_tree_design.
Changing const-value async load to async reset on $flatten\I35.$verific$Q_reg$clock_tree_design.v:323$353 ($aldff) from module clock_tree_design.
Changing const-value async load to async reset on $flatten\I34.$verific$Q_reg$clock_tree_design.v:323$353 ($aldff) from module clock_tree_design.
Changing const-value async load to async reset on $flatten\I33.$verific$Q_reg$clock_tree_design.v:323$353 ($aldff) from module clock_tree_design.
Changing const-value async load to async reset on $flatten\I32.$verific$Q_reg$clock_tree_design.v:323$353 ($aldff) from module clock_tree_design.
Changing const-value async load to async reset on $flatten\I31.$verific$Q_reg$clock_tree_design.v:323$353 ($aldff) from module clock_tree_design.
Changing const-value async load to async reset on $flatten\I30.$verific$Q_reg$clock_tree_design.v:323$353 ($aldff) from module clock_tree_design.
Changing const-value async load to async reset on $flatten\I3.$verific$Q_reg$clock_tree_design.v:323$353 ($aldff) from module clock_tree_design.
Changing const-value async load to async reset on $flatten\I29.$verific$Q_reg$clock_tree_design.v:323$353 ($aldff) from module clock_tree_design.
Changing const-value async load to async reset on $flatten\I28.$verific$Q_reg$clock_tree_design.v:323$353 ($aldff) from module clock_tree_design.
Changing const-value async load to async reset on $flatten\I27.$verific$Q_reg$clock_tree_design.v:323$353 ($aldff) from module clock_tree_design.
Changing const-value async load to async reset on $flatten\I26.$verific$Q_reg$clock_tree_design.v:323$353 ($aldff) from module clock_tree_design.
Changing const-value async load to async reset on $flatten\I25.$verific$Q_reg$clock_tree_design.v:323$353 ($aldff) from module clock_tree_design.
Changing const-value async load to async reset on $flatten\I24.$verific$Q_reg$clock_tree_design.v:323$353 ($aldff) from module clock_tree_design.
Changing const-value async load to async reset on $flatten\I23.$verific$Q_reg$clock_tree_design.v:323$353 ($aldff) from module clock_tree_design.
Changing const-value async load to async reset on $flatten\I22.$verific$Q_reg$clock_tree_design.v:323$353 ($aldff) from module clock_tree_design.
Changing const-value async load to async reset on $flatten\I21.$verific$Q_reg$clock_tree_design.v:323$353 ($aldff) from module clock_tree_design.
Changing const-value async load to async reset on $flatten\I20.$verific$Q_reg$clock_tree_design.v:323$353 ($aldff) from module clock_tree_design.
Changing const-value async load to async reset on $flatten\I2.$verific$Q_reg$clock_tree_design.v:323$353 ($aldff) from module clock_tree_design.
Changing const-value async load to async reset on $flatten\I19.$verific$Q_reg$clock_tree_design.v:323$353 ($aldff) from module clock_tree_design.
Changing const-value async load to async reset on $flatten\I18.$verific$Q_reg$clock_tree_design.v:323$353 ($aldff) from module clock_tree_design.
Changing const-value async load to async reset on $flatten\I17.$verific$Q_reg$clock_tree_design.v:323$353 ($aldff) from module clock_tree_design.
Changing const-value async load to async reset on $flatten\I16.$verific$Q_reg$clock_tree_design.v:323$353 ($aldff) from module clock_tree_design.
Changing const-value async load to async reset on $flatten\I15.$verific$Q_reg$clock_tree_design.v:323$353 ($aldff) from module clock_tree_design.
Changing const-value async load to async reset on $flatten\I14.$verific$Q_reg$clock_tree_design.v:323$353 ($aldff) from module clock_tree_design.
Changing const-value async load to async reset on $flatten\I13.$verific$Q_reg$clock_tree_design.v:323$353 ($aldff) from module clock_tree_design.
Changing const-value async load to async reset on $flatten\I12.$verific$Q_reg$clock_tree_design.v:323$353 ($aldff) from module clock_tree_design.
Changing const-value async load to async reset on $flatten\I11.$verific$Q_reg$clock_tree_design.v:323$353 ($aldff) from module clock_tree_design.
Changing const-value async load to async reset on $flatten\I10.$verific$Q_reg$clock_tree_design.v:323$353 ($aldff) from module clock_tree_design.
Changing const-value async load to async reset on $flatten\I1.$verific$Q_reg$clock_tree_design.v:323$353 ($aldff) from module clock_tree_design.
Changing const-value async load to async reset on $flatten\I0.$verific$Q_reg$clock_tree_design.v:323$353 ($aldff) from module clock_tree_design.

yosys> opt_clean

3.22. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \clock_tree_design..

yosys> opt_expr

3.23. Executing OPT_EXPR pass (perform const folding).
Optimizing module clock_tree_design.
MAX OPT ITERATION = 1

yosys> fsm -encoding binary

3.24. Executing FSM pass (extract and optimize FSM).

yosys> fsm_detect

3.24.1. Executing FSM_DETECT pass (finding FSMs in design).

yosys> fsm_extract

3.24.2. Executing FSM_EXTRACT pass (extracting FSM from design).

yosys> fsm_opt

3.24.3. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> opt_clean

3.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \clock_tree_design..

yosys> fsm_opt

3.24.5. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> fsm_recode -encoding binary

3.24.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

yosys> fsm_info

3.24.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

yosys> fsm_map

3.24.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

yosys> opt_expr

3.25. Executing OPT_EXPR pass (perform const folding).
Optimizing module clock_tree_design.

yosys> opt_merge -nomux

3.26. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\clock_tree_design'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.27. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \clock_tree_design..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

yosys> opt_reduce

3.28. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \clock_tree_design.
Performed a total of 0 changes.

yosys> opt_merge

3.29. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\clock_tree_design'.
Removed a total of 0 cells.

yosys> opt_share

3.30. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -sat

3.31. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.32. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \clock_tree_design..

yosys> opt_expr

3.33. Executing OPT_EXPR pass (perform const folding).
Optimizing module clock_tree_design.
MAX OPT ITERATION = 1

yosys> wreduce -keepdc

3.34. Executing WREDUCE pass (reducing word size of cells).
Removed top 20 bits (of 80) from wire clock_tree_design.$verific$n365$2.

yosys> peepopt

3.35. Executing PEEPOPT pass (run peephole optimizers).

yosys> opt_clean

3.36. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \clock_tree_design..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

yosys> bmuxmap

3.37. Executing BMUXMAP pass.

yosys> demuxmap

3.38. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> alumacc

3.39. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module clock_tree_design:
  created 0 $alu and 0 $macc cells.

yosys> opt_expr

3.40. Executing OPT_EXPR pass (perform const folding).
Optimizing module clock_tree_design.

yosys> opt_merge -nomux

3.41. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\clock_tree_design'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.42. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \clock_tree_design..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

yosys> opt_reduce

3.43. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \clock_tree_design.
Performed a total of 0 changes.

yosys> opt_merge

3.44. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\clock_tree_design'.
Removed a total of 0 cells.

yosys> opt_share

3.45. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.46. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.47. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \clock_tree_design..

yosys> opt_expr

3.48. Executing OPT_EXPR pass (perform const folding).
Optimizing module clock_tree_design.
MAX OPT ITERATION = 1

yosys> stat

3.49. Printing statistics.

=== clock_tree_design ===

   Number of wires:                429
   Number of wire bits:            750
   Number of public wires:         421
   Number of public wire bits:     510
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                172
     $adff                          80
     $and                            3
     $mux                            3
     $or                             3
     $xor                           83


yosys> memory -nomap

3.50. Executing MEMORY pass.

yosys> opt_mem

3.50.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

yosys> opt_mem_priority

3.50.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

yosys> opt_mem_feedback

3.50.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

yosys> memory_bmux2rom

3.50.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

yosys> memory_dff

3.50.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

yosys> opt_clean

3.50.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \clock_tree_design..

yosys> memory_share

3.50.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

yosys> opt_mem_widen

3.50.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

yosys> opt_clean

3.50.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \clock_tree_design..

yosys> memory_collect

3.50.10. Executing MEMORY_COLLECT pass (generating $mem cells).

yosys> stat

3.51. Printing statistics.

=== clock_tree_design ===

   Number of wires:                429
   Number of wire bits:            750
   Number of public wires:         421
   Number of public wire bits:     510
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                172
     $adff                          80
     $and                            3
     $mux                            3
     $or                             3
     $xor                           83


yosys> muxpack

3.52. Executing MUXPACK pass ($mux cell cascades to $pmux).
Converted 0 (p)mux cells into 0 pmux cells.
<suppressed ~3 debug messages>

yosys> opt_clean

3.53. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \clock_tree_design..

yosys> pmuxtree

3.54. Executing PMUXTREE pass.

yosys> muxpack

3.55. Executing MUXPACK pass ($mux cell cascades to $pmux).
Converted 0 (p)mux cells into 0 pmux cells.
<suppressed ~3 debug messages>

yosys> memory_map

3.56. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

yosys> stat

3.57. Printing statistics.

=== clock_tree_design ===

   Number of wires:                429
   Number of wire bits:            750
   Number of public wires:         421
   Number of public wire bits:     510
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                172
     $adff                          80
     $and                            3
     $mux                            3
     $or                             3
     $xor                           83


yosys> techmap -map +/techmap.v -map +/rapidsilicon/genesis/arith_map.v

3.58. Executing TECHMAP pass (map to technology primitives).

3.58.1. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.58.2. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/arith_map.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_rs_alu'.
Successfully finished Verilog frontend.

3.58.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $adff.
No more expansions possible.
<suppressed ~243 debug messages>

yosys> stat

3.59. Printing statistics.

=== clock_tree_design ===

   Number of wires:                429
   Number of wire bits:            750
   Number of public wires:         421
   Number of public wire bits:     510
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                400
     $_AND_                         60
     $_DFF_PN0_                     80
     $_MUX_                         60
     $_OR_                          60
     $_XOR_                        140


yosys> opt_expr

3.60. Executing OPT_EXPR pass (perform const folding).
Optimizing module clock_tree_design.

yosys> opt_merge -nomux

3.61. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\clock_tree_design'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.62. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \clock_tree_design..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.63. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \clock_tree_design.
Performed a total of 0 changes.

yosys> opt_merge

3.64. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\clock_tree_design'.
Removed a total of 0 cells.

yosys> opt_share

3.65. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.66. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.67. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \clock_tree_design..

yosys> opt_expr

3.68. Executing OPT_EXPR pass (perform const folding).
Optimizing module clock_tree_design.
MAX OPT ITERATION = 1

yosys> opt_expr -full

3.69. Executing OPT_EXPR pass (perform const folding).
Optimizing module clock_tree_design.

yosys> techmap -map +/techmap.v

3.70. Executing TECHMAP pass (map to technology primitives).

3.70.1. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.70.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~71 debug messages>

yosys> opt_expr

3.71. Executing OPT_EXPR pass (perform const folding).
Optimizing module clock_tree_design.

yosys> opt_merge -nomux

3.72. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\clock_tree_design'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.73. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \clock_tree_design..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.74. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \clock_tree_design.
Performed a total of 0 changes.

yosys> opt_merge

3.75. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\clock_tree_design'.
Removed a total of 0 cells.

yosys> opt_dff -nosdff -nodffe -sat

3.76. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.77. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \clock_tree_design..

yosys> opt_expr

3.78. Executing OPT_EXPR pass (perform const folding).
Optimizing module clock_tree_design.
MAX OPT ITERATION = 1

yosys> abc -dff

3.79. Executing ABC pass (technology mapping using ABC).

3.79.1. Summary of detected clock domains:
  78 cells in clk=\clk [0], en={ }, arst=!\clr_n, srst={ }
  78 cells in clk=\clk [1], en={ }, arst=!\clr_n, srst={ }
  78 cells in clk=\clk [2], en={ }, arst=!\clr_n, srst={ }
  10 cells in clk=\clk [5], en={ }, arst=!\clr_n, srst={ }
  78 cells in clk=\clk [3], en={ }, arst=!\clr_n, srst={ }
  78 cells in clk=\clk [4], en={ }, arst=!\clr_n, srst={ }

3.79.2. Extracting gate netlist of module `\clock_tree_design' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk [0], asynchronously reset by !\clr_n
Extracted 78 gates and 83 wires to a netlist network with 4 inputs and 4 outputs.

3.79.2.1. Executing ABC.

3.79.3. Extracting gate netlist of module `\clock_tree_design' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk [1], asynchronously reset by !\clr_n
Extracted 78 gates and 83 wires to a netlist network with 4 inputs and 4 outputs.

3.79.3.1. Executing ABC.

3.79.4. Extracting gate netlist of module `\clock_tree_design' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk [2], asynchronously reset by !\clr_n
Extracted 78 gates and 83 wires to a netlist network with 4 inputs and 4 outputs.

3.79.4.1. Executing ABC.

3.79.5. Extracting gate netlist of module `\clock_tree_design' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk [5], asynchronously reset by !\clr_n
Extracted 10 gates and 11 wires to a netlist network with 1 inputs and 5 outputs.

3.79.5.1. Executing ABC.

3.79.6. Extracting gate netlist of module `\clock_tree_design' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk [3], asynchronously reset by !\clr_n
Extracted 78 gates and 83 wires to a netlist network with 4 inputs and 4 outputs.

3.79.6.1. Executing ABC.

3.79.7. Extracting gate netlist of module `\clock_tree_design' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk [4], asynchronously reset by !\clr_n
Extracted 78 gates and 83 wires to a netlist network with 4 inputs and 4 outputs.

3.79.7.1. Executing ABC.

yosys> abc -dff

3.80. Executing ABC pass (technology mapping using ABC).

3.80.1. Summary of detected clock domains:
  12 cells in clk=\clk [5], en={ }, arst=!\clr_n, srst={ }
  17 cells in clk=\clk [0], en={ }, arst=!\clr_n, srst={ }
  7 cells in clk=\clk [1], en={ }, arst=!\clr_n, srst={ }
  7 cells in clk=\clk [3], en={ }, arst=!\clr_n, srst={ }
  7 cells in clk=\clk [2], en={ }, arst=!\clr_n, srst={ }
  7 cells in clk=\clk [4], en={ }, arst=!\clr_n, srst={ }

3.80.2. Extracting gate netlist of module `\clock_tree_design' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk [5], asynchronously reset by !\clr_n
Extracted 12 gates and 19 wires to a netlist network with 7 inputs and 10 outputs.

3.80.2.1. Executing ABC.

3.80.3. Extracting gate netlist of module `\clock_tree_design' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk [0], asynchronously reset by !\clr_n
Extracted 17 gates and 30 wires to a netlist network with 13 inputs and 9 outputs.

3.80.3.1. Executing ABC.

3.80.4. Extracting gate netlist of module `\clock_tree_design' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk [1], asynchronously reset by !\clr_n
Extracted 7 gates and 11 wires to a netlist network with 4 inputs and 5 outputs.

3.80.4.1. Executing ABC.

3.80.5. Extracting gate netlist of module `\clock_tree_design' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk [3], asynchronously reset by !\clr_n
Extracted 7 gates and 11 wires to a netlist network with 4 inputs and 5 outputs.

3.80.5.1. Executing ABC.

3.80.6. Extracting gate netlist of module `\clock_tree_design' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk [2], asynchronously reset by !\clr_n
Extracted 7 gates and 11 wires to a netlist network with 4 inputs and 5 outputs.

3.80.6.1. Executing ABC.

3.80.7. Extracting gate netlist of module `\clock_tree_design' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk [4], asynchronously reset by !\clr_n
Extracted 7 gates and 11 wires to a netlist network with 4 inputs and 5 outputs.

3.80.7.1. Executing ABC.

yosys> abc -dff

3.81. Executing ABC pass (technology mapping using ABC).

3.81.1. Summary of detected clock domains:
  17 cells in clk=\clk [2], en={ }, arst=!\clr_n, srst={ }
  11 cells in clk=\clk [5], en={ }, arst=!\clr_n, srst={ }
  7 cells in clk=\clk [3], en={ }, arst=!\clr_n, srst={ }
  7 cells in clk=\clk [0], en={ }, arst=!\clr_n, srst={ }
  9 cells in clk=\clk [1], en={ }, arst=!\clr_n, srst={ }
  9 cells in clk=\clk [4], en={ }, arst=!\clr_n, srst={ }

3.81.2. Extracting gate netlist of module `\clock_tree_design' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk [2], asynchronously reset by !\clr_n
Extracted 17 gates and 30 wires to a netlist network with 13 inputs and 8 outputs.

3.81.2.1. Executing ABC.

3.81.3. Extracting gate netlist of module `\clock_tree_design' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk [5], asynchronously reset by !\clr_n
Extracted 11 gates and 17 wires to a netlist network with 6 inputs and 10 outputs.

3.81.3.1. Executing ABC.

3.81.4. Extracting gate netlist of module `\clock_tree_design' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk [3], asynchronously reset by !\clr_n
Extracted 7 gates and 11 wires to a netlist network with 4 inputs and 5 outputs.

3.81.4.1. Executing ABC.

3.81.5. Extracting gate netlist of module `\clock_tree_design' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk [0], asynchronously reset by !\clr_n
Extracted 7 gates and 11 wires to a netlist network with 4 inputs and 5 outputs.

3.81.5.1. Executing ABC.

3.81.6. Extracting gate netlist of module `\clock_tree_design' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk [1], asynchronously reset by !\clr_n
Extracted 9 gates and 14 wires to a netlist network with 5 inputs and 6 outputs.

3.81.6.1. Executing ABC.

3.81.7. Extracting gate netlist of module `\clock_tree_design' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk [4], asynchronously reset by !\clr_n
Extracted 9 gates and 14 wires to a netlist network with 5 inputs and 6 outputs.

3.81.7.1. Executing ABC.

yosys> abc -dff

3.82. Executing ABC pass (technology mapping using ABC).

3.82.1. Summary of detected clock domains:
  15 cells in clk=\clk [1], en={ }, arst=!\clr_n, srst={ }
  10 cells in clk=\clk [2], en={ }, arst=!\clr_n, srst={ }
  10 cells in clk=\clk [5], en={ }, arst=!\clr_n, srst={ }
  9 cells in clk=\clk [3], en={ }, arst=!\clr_n, srst={ }
  9 cells in clk=\clk [0], en={ }, arst=!\clr_n, srst={ }
  8 cells in clk=\clk [4], en={ }, arst=!\clr_n, srst={ }

3.82.2. Extracting gate netlist of module `\clock_tree_design' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk [1], asynchronously reset by !\clr_n
Extracted 15 gates and 27 wires to a netlist network with 12 inputs and 9 outputs.

3.82.2.1. Executing ABC.

3.82.3. Extracting gate netlist of module `\clock_tree_design' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk [2], asynchronously reset by !\clr_n
Extracted 10 gates and 17 wires to a netlist network with 7 inputs and 5 outputs.

3.82.3.1. Executing ABC.

3.82.4. Extracting gate netlist of module `\clock_tree_design' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk [5], asynchronously reset by !\clr_n
Extracted 10 gates and 15 wires to a netlist network with 5 inputs and 9 outputs.

3.82.4.1. Executing ABC.

3.82.5. Extracting gate netlist of module `\clock_tree_design' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk [3], asynchronously reset by !\clr_n
Extracted 9 gates and 14 wires to a netlist network with 5 inputs and 6 outputs.

3.82.5.1. Executing ABC.

3.82.6. Extracting gate netlist of module `\clock_tree_design' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk [0], asynchronously reset by !\clr_n
Extracted 9 gates and 14 wires to a netlist network with 5 inputs and 6 outputs.

3.82.6.1. Executing ABC.

3.82.7. Extracting gate netlist of module `\clock_tree_design' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk [4], asynchronously reset by !\clr_n
Extracted 8 gates and 13 wires to a netlist network with 5 inputs and 6 outputs.

3.82.7.1. Executing ABC.

yosys> opt_ffinv

3.83. Executing OPT_FFINV pass (push inverters through FFs).
Discovering LUTs.
Pushed 0 inverters.

yosys> opt_expr

3.84. Executing OPT_EXPR pass (perform const folding).
Optimizing module clock_tree_design.

yosys> opt_merge -nomux

3.85. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\clock_tree_design'.
<suppressed ~54 debug messages>
Removed a total of 18 cells.

yosys> opt_muxtree

3.86. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \clock_tree_design..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.87. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \clock_tree_design.
Performed a total of 0 changes.

yosys> opt_merge

3.88. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\clock_tree_design'.
Removed a total of 0 cells.

yosys> opt_share

3.89. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -sat

3.90. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.91. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \clock_tree_design..
Removed 0 unused cells and 542 unused wires.
<suppressed ~177 debug messages>

yosys> opt_expr

3.92. Executing OPT_EXPR pass (perform const folding).
Optimizing module clock_tree_design.
MAX OPT ITERATION = 1

yosys> bmuxmap

3.93. Executing BMUXMAP pass.

yosys> demuxmap

3.94. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> abc -script /tmp/yosys_8ntfKO/abc_tmp_1.scr

3.95. Executing ABC pass (technology mapping using ABC).

3.95.1. Extracting gate netlist of module `\clock_tree_design' to `<abc-temp-dir>/input.blif'..
Extracted 37 gates and 46 wires to a netlist network with 9 inputs and 16 outputs.

3.95.1.1. Executing ABC.
DE:   #PIs =   9  #Luts =    16  Max Lvl =   1  Avg Lvl =   1.00  [   0.06 sec. at Pass 0]
DE:   #PIs =   9  #Luts =    16  Max Lvl =   1  Avg Lvl =   1.00  [   0.19 sec. at Pass 1]
DE:   #PIs =   9  #Luts =    16  Max Lvl =   1  Avg Lvl =   1.00  [   0.09 sec. at Pass 2]
DE:   #PIs =   9  #Luts =    16  Max Lvl =   1  Avg Lvl =   1.00  [   0.22 sec. at Pass 3]
DE:   #PIs =   9  #Luts =    16  Max Lvl =   1  Avg Lvl =   1.00  [   0.39 sec. at Pass 4]
DE:   #PIs =   9  #Luts =    16  Max Lvl =   1  Avg Lvl =   1.00  [   0.70 sec. at Pass 5]
DE:   #PIs =   9  #Luts =    16  Max Lvl =   1  Avg Lvl =   1.00  [   2.32 sec. at Pass 6]
DE:   #PIs =   9  #Luts =    16  Max Lvl =   1  Avg Lvl =   1.00  [   0.74 sec. at Pass 7]

yosys> opt_expr

3.96. Executing OPT_EXPR pass (perform const folding).
Optimizing module clock_tree_design.

yosys> opt_merge -nomux

3.97. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\clock_tree_design'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.98. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \clock_tree_design..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.99. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \clock_tree_design.
Performed a total of 0 changes.

yosys> opt_merge

3.100. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\clock_tree_design'.
Removed a total of 0 cells.

yosys> opt_share

3.101. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.102. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.103. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \clock_tree_design..
Removed 0 unused cells and 46 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.104. Executing OPT_EXPR pass (perform const folding).
Optimizing module clock_tree_design.
MAX OPT ITERATION = 1

yosys> opt_ffinv

3.105. Executing OPT_FFINV pass (push inverters through FFs).
Discovering LUTs.
Pushed 0 inverters.

yosys> stat

3.106. Printing statistics.

=== clock_tree_design ===

   Number of wires:                257
   Number of wire bits:            282
   Number of public wires:         245
   Number of public wire bits:     270
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 22
     $_DFF_PN0_                      6
     $lut                           16


yosys> shregmap -minlen 8 -maxlen 20

3.107. Executing SHREGMAP pass (map shift registers).
Converted 0 dff cells into 0 shift registers.

yosys> dfflegalize -cell $_DFF_?_ 0 -cell $_DFF_???_ 0 -cell $_DFFE_????_ 0 -cell $_DFFSR_???_ 0 -cell $_DFFSRE_????_ 0 -cell $_DLATCHSR_PPP_ 0

3.108. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

yosys> stat

3.109. Printing statistics.

=== clock_tree_design ===

   Number of wires:                257
   Number of wire bits:            282
   Number of public wires:         245
   Number of public wire bits:     270
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 22
     $_DFF_PN0_                      6
     $lut                           16


yosys> techmap -map +/techmap.v -map +/rapidsilicon/genesis/ffs_map.v

3.110. Executing TECHMAP pass (map to technology primitives).

3.110.1. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.110.2. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/ffs_map.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/ffs_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP0N_'.
Generating RTLIL representation for module `\$_DFFE_PN0P_'.
Generating RTLIL representation for module `\$_DFFE_PN0N_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP1N_'.
Generating RTLIL representation for module `\$_DFFE_PN1P_'.
Generating RTLIL representation for module `\$_DFFE_PN1N_'.
Generating RTLIL representation for module `\$_DFFSR_PPP_'.
Generating RTLIL representation for module `\$_DFFSR_PNP_'.
Generating RTLIL representation for module `\$_DFFSR_PNN_'.
Generating RTLIL representation for module `\$_DFFSR_PPN_'.
Generating RTLIL representation for module `\$_DFFSR_NPP_'.
Generating RTLIL representation for module `\$_DFFSR_NNP_'.
Generating RTLIL representation for module `\$_DFFSR_NNN_'.
Generating RTLIL representation for module `\$_DFFSR_NPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PNPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPNP_'.
Generating RTLIL representation for module `\$_DFFSRE_PNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PNPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PPNN_'.
Generating RTLIL representation for module `\$_DFFSRE_PNNN_'.
Generating RTLIL representation for module `\$_DLATCHSR_PPP_'.
Generating RTLIL representation for module `\$_DLATCHSR_NPP_'.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP0N_'.
Generating RTLIL representation for module `\$_DFFE_NN0P_'.
Generating RTLIL representation for module `\$_DFFE_NN0N_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_NP1N_'.
Generating RTLIL representation for module `\$_DFFE_NN1P_'.
Generating RTLIL representation for module `\$_DFFE_NN1N_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNPP_'.
Generating RTLIL representation for module `\$_DFFSRE_NPNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPN_'.
Generating RTLIL representation for module `\$_DFFSRE_NNPN_'.
Generating RTLIL representation for module `\$_DFFSRE_NPNN_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNN_'.
Generating RTLIL representation for module `\$__SHREG_DFF_P_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PN0_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NN0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFF_PN1_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_NN1_'.
Successfully finished Verilog frontend.

3.110.3. Continuing TECHMAP pass.
Using template \$_DFF_PN0_ for cells of type $_DFF_PN0_.
Using extmapper simplemap for cells of type $lut.
No more expansions possible.
<suppressed ~158 debug messages>

yosys> opt_expr -mux_undef

3.111. Executing OPT_EXPR pass (perform const folding).
Optimizing module clock_tree_design.
<suppressed ~71 debug messages>

yosys> simplemap

3.112. Executing SIMPLEMAP pass (map simple cells to gate primitives).

yosys> opt_expr

3.113. Executing OPT_EXPR pass (perform const folding).
Optimizing module clock_tree_design.

yosys> opt_merge

3.114. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\clock_tree_design'.
<suppressed ~45 debug messages>
Removed a total of 15 cells.

yosys> opt_dff -nodffe -nosdff

3.115. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.116. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \clock_tree_design..
Removed 0 unused cells and 55 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.117. Executing OPT_EXPR pass (perform const folding).
Optimizing module clock_tree_design.

yosys> opt_merge -nomux

3.118. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\clock_tree_design'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.119. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \clock_tree_design..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.120. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \clock_tree_design.
Performed a total of 0 changes.

yosys> opt_merge

3.121. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\clock_tree_design'.
Removed a total of 0 cells.

yosys> opt_share

3.122. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.123. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.124. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \clock_tree_design..

yosys> opt_expr

3.125. Executing OPT_EXPR pass (perform const folding).
Optimizing module clock_tree_design.
MAX OPT ITERATION = 1

yosys> abc -script /tmp/yosys_8ntfKO/abc_tmp_2.scr

3.126. Executing ABC pass (technology mapping using ABC).

3.126.1. Extracting gate netlist of module `\clock_tree_design' to `<abc-temp-dir>/input.blif'..
Extracted 42 gates and 53 wires to a netlist network with 9 inputs and 16 outputs.

3.126.1.1. Executing ABC.
DE:   #PIs =   9  #Luts =    16  Max Lvl =   1  Avg Lvl =   1.00  [   0.08 sec. at Pass 0]
DE:   #PIs =   9  #Luts =    16  Max Lvl =   1  Avg Lvl =   1.00  [   0.23 sec. at Pass 1]
DE:   #PIs =   9  #Luts =    16  Max Lvl =   1  Avg Lvl =   1.00  [   0.11 sec. at Pass 2]
DE:   #PIs =   9  #Luts =    16  Max Lvl =   1  Avg Lvl =   1.00  [   0.34 sec. at Pass 3]
DE:   #PIs =   9  #Luts =    16  Max Lvl =   1  Avg Lvl =   1.00  [   0.27 sec. at Pass 4]
DE:   #PIs =   9  #Luts =    16  Max Lvl =   1  Avg Lvl =   1.00  [   0.62 sec. at Pass 5]
DE:   #PIs =   9  #Luts =    16  Max Lvl =   1  Avg Lvl =   1.00  [   1.84 sec. at Pass 6]
DE:   #PIs =   9  #Luts =    16  Max Lvl =   1  Avg Lvl =   1.00  [   0.59 sec. at Pass 7]

yosys> opt_expr

3.127. Executing OPT_EXPR pass (perform const folding).
Optimizing module clock_tree_design.

yosys> opt_merge -nomux

3.128. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\clock_tree_design'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.129. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \clock_tree_design..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.130. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \clock_tree_design.
Performed a total of 0 changes.

yosys> opt_merge

3.131. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\clock_tree_design'.
Removed a total of 0 cells.

yosys> opt_share

3.132. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.133. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.134. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \clock_tree_design..
Removed 0 unused cells and 41 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.135. Executing OPT_EXPR pass (perform const folding).
Optimizing module clock_tree_design.
MAX OPT ITERATION = 1

yosys> hierarchy -check

3.136. Executing HIERARCHY pass (managing design hierarchy).

3.136.1. Analyzing design hierarchy..
Top module:  \clock_tree_design

3.136.2. Analyzing design hierarchy..
Top module:  \clock_tree_design
Removed 0 unused modules.

yosys> stat

3.137. Printing statistics.

=== clock_tree_design ===

   Number of wires:                257
   Number of wire bits:            282
   Number of public wires:         245
   Number of public wire bits:     270
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 22
     $lut                           16
     dffsre                          6


yosys> opt_clean -purge

3.138. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \clock_tree_design..
Removed 0 unused cells and 240 unused wires.
<suppressed ~240 debug messages>

yosys> write_verilog -noattr -nohex synthesized.v

3.139. Executing Verilog backend.
Dumping module `\clock_tree_design'.

End of script. Logfile hash: ccb829a5f6, CPU: user 0.78s system 0.04s, MEM: 34.60 MB peak
Yosys 0.18+10 (git sha1 a3cbfccc4, gcc 9.4.0-1ubuntu1~20.04.1 -fPIC -Os)
Time spent: 98% 6x abc (39 sec), 0% 23x opt_expr (0 sec), ...
real 17.75
user 29.45
sys 10.30
