
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys-Verific 0.0.49
 Yosys 0.18+10 (git sha1 7a7a25778, gcc 9.1.0 -fPIC -Os)


-- Executing script file `yosys.ys' --
echo on

yosys> plugin -i synth-rs

yosys> read -verific

yosys> read -incdir .

yosys> verific -vlog-incdir .

1. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific May22_SW_Release, released at Wed Jun  1 05:39:28 2022.

yosys> verilog_defaults -add -I.

yosys> read -vhdl salsaa_dm.vhd salsaa_mc.vhd salsaa.vhd

yosys> verific -vhdl salsaa_dm.vhd salsaa_mc.vhd salsaa.vhd

2. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific May22_SW_Release, released at Wed Jun  1 05:39:28 2022.
VERIFIC-INFO [VHDL-1504] default VHDL library search path is now "/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008"
VERIFIC-COMMENT [VHDL-1481] Analyzing VHDL file 'salsaa_dm.vhd'
VERIFIC-COMMENT [VHDL-1493] Restoring VHDL unit 'ieee.std_logic_1164' from file '/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008/ieee/std_logic_1164.vdb'
VERIFIC-COMMENT [VHDL-1493] Restoring VHDL unit 'std.standard' from file '/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008/std/standard.vdb'
VERIFIC-COMMENT [VHDL-1493] Restoring VHDL unit 'std.textio' from file '/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008/std/textio.vdb'
VERIFIC-COMMENT [VHDL-1493] Restoring VHDL unit 'ieee.std_logic_unsigned' from file '/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008/ieee/std_logic_unsigned.vdb'
VERIFIC-COMMENT [VHDL-1493] Restoring VHDL unit 'ieee.std_logic_arith' from file '/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008/ieee/std_logic_arith.vdb'
VERIFIC-COMMENT [VHDL-1493] Restoring VHDL unit 'ieee.numeric_std' from file '/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008/ieee/numeric_std.vdb'
VERIFIC-INFO [VHDL-1012] salsaa_dm.vhd:29: analyzing entity 'salsaa_dm'
VERIFIC-INFO [VHDL-1010] salsaa_dm.vhd:47: analyzing architecture 'rtl'
VERIFIC-COMMENT [VHDL-1481] Analyzing VHDL file 'salsaa_mc.vhd'
VERIFIC-INFO [VHDL-1012] salsaa_mc.vhd:28: analyzing entity 'salsaa_mc'
VERIFIC-INFO [VHDL-1010] salsaa_mc.vhd:46: analyzing architecture 'rtl'
VERIFIC-COMMENT [VHDL-1481] Analyzing VHDL file 'salsaa.vhd'
VERIFIC-INFO [VHDL-1012] salsaa.vhd:28: analyzing entity 'salsaa'
VERIFIC-INFO [VHDL-1010] salsaa.vhd:45: analyzing architecture 'rtl'

yosys> synth_rs -top salsaa -tech genesis -goal area -de -no_dsp -no_bram -verilog synthesized.v

3. Executing synth_rs pass: v0.4.58

yosys> read_verilog -lib -specify -nomem2reg +/rapidsilicon/common/cells_sim.v +/rapidsilicon/genesis/cells_sim.v

3.1. Executing Verilog-2005 frontend: /home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v
Parsing Verilog input from `/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\inv'.
Generating RTLIL representation for module `\buff'.
Generating RTLIL representation for module `\logic_0'.
Generating RTLIL representation for module `\logic_1'.
Generating RTLIL representation for module `\gclkbuff'.
Successfully finished Verilog frontend.

3.2. Executing Verilog-2005 frontend: /home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/cells_sim.v
Parsing Verilog input from `/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\dffsre'.
Generating RTLIL representation for module `\dffnsre'.
Generating RTLIL representation for module `\latchsre'.
Generating RTLIL representation for module `\latchnsre'.
Generating RTLIL representation for module `\io_scff'.
Generating RTLIL representation for module `\scff'.
Generating RTLIL representation for module `\sh_dff'.
Generating RTLIL representation for module `\adder_carry'.
Generating RTLIL representation for module `\sdffr'.
Generating RTLIL representation for module `\sdffs'.
Generating RTLIL representation for module `\TDP_BRAM18'.
Generating RTLIL representation for module `\TDP36K'.
Generating RTLIL representation for module `\RS_DSP1'.
Generating RTLIL representation for module `\RS_DSP2'.
Generating RTLIL representation for module `\RS_DSP2_MULT'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGIN_REGOUT'.
Generating RTLIL representation for module `\dsp_t1_sim'.
Generating RTLIL representation for module `\dsp_t1_20x18x64'.
Generating RTLIL representation for module `\dsp_t1_10x9x32'.
Successfully finished Verilog frontend.

yosys> hierarchy -check -top salsaa

3.3. Executing HIERARCHY pass (managing design hierarchy).
VERIFIC-INFO [VHDL-1067] salsaa.vhd:28: processing 'salsaa(rtl)'
VERIFIC-INFO [VHDL-1067] salsaa_dm.vhd:29: processing 'salsaa_dm(rtl)'
VERIFIC-INFO [VHDL-1067] salsaa_mc.vhd:28: processing 'salsaa_mc(rtl)'
Importing module salsaa.
Importing module salsaa_dm(rtl).
Importing module salsaa_mc(rtl).

3.3.1. Analyzing design hierarchy..
Top module:  \salsaa
Used module:     \salsaa_mc(rtl)
Used module:     \salsaa_dm(rtl)

3.3.2. Analyzing design hierarchy..
Top module:  \salsaa
Used module:     \salsaa_mc(rtl)
Used module:     \salsaa_dm(rtl)
Removed 0 unused modules.

yosys> proc

3.4. Executing PROC pass (convert processes to netlists).

yosys> proc_clean

3.4.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> proc_rmdead

3.4.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

yosys> proc_prune

3.4.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

yosys> proc_init

3.4.4. Executing PROC_INIT pass (extract init attributes).

yosys> proc_arst

3.4.5. Executing PROC_ARST pass (detect async resets in processes).

yosys> proc_rom

3.4.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

yosys> proc_mux

3.4.7. Executing PROC_MUX pass (convert decision trees to multiplexers).

yosys> proc_dlatch

3.4.8. Executing PROC_DLATCH pass (convert process syncs to latches).

yosys> proc_dff

3.4.9. Executing PROC_DFF pass (convert process syncs to FFs).

yosys> proc_memwr

3.4.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

yosys> proc_clean

3.4.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> opt_expr -keepdc

3.4.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module salsaa_mc(rtl).
<suppressed ~10 debug messages>
Optimizing module salsaa_dm(rtl).
<suppressed ~9 debug messages>
Optimizing module salsaa.

yosys> bmuxmap

3.5. Executing BMUXMAP pass.

yosys> demuxmap

3.6. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> flatten

3.7. Executing FLATTEN pass (flatten design).
Deleting now unused module salsaa_dm(rtl).
Deleting now unused module salsaa_mc(rtl).
<suppressed ~2 debug messages>

yosys> bmuxmap

3.8. Executing BMUXMAP pass.

yosys> demuxmap

3.9. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> tribuf -logic

3.10. Executing TRIBUF pass.

yosys> deminout

3.11. Executing DEMINOUT pass (demote inout ports to input or output).

yosys> opt_expr

3.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module salsaa.
<suppressed ~439 debug messages>

yosys> opt_clean

3.13. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \salsaa..
Removed 0 unused cells and 267 unused wires.
<suppressed ~93 debug messages>

yosys> check

3.14. Executing CHECK pass (checking for obvious problems).
Checking module salsaa...
Found and reported 0 problems.

yosys> opt -nodffe -nosdff

3.15. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module salsaa.
<suppressed ~17 debug messages>

yosys> opt_merge -nomux

3.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\salsaa'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.15.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \salsaa..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port B of cell $flatten\salsaa_dm_0.$auto$bmuxmap.cc:60:execute$1588: \salsaa_dm_0.state -> { 1'1 \salsaa_dm_0.state [2:0] }
      Replacing known input bits on port B of cell $flatten\salsaa_dm_0.$auto$bmuxmap.cc:60:execute$1574: \salsaa_dm_0.state -> 4'0111
      Replacing known input bits on port B of cell $flatten\salsaa_dm_0.$verific$mux_127$salsaa_dm.vhd:230$200: \salsaa_dm_0.state -> 4'0001
      Replacing known input bits on port B of cell $flatten\salsaa_dm_0.$verific$mux_32$salsaa_dm.vhd:99$157: \salsaa_dm_0.state -> 4'0000
      Replacing known input bits on port B of cell $flatten\salsaa_mc_0.$auto$bmuxmap.cc:60:execute$1246: \salsaa_mc_0.state -> { 1'1 \salsaa_mc_0.state [2:0] }
      Replacing known input bits on port B of cell $flatten\salsaa_mc_0.$auto$bmuxmap.cc:60:execute$1239: \salsaa_mc_0.state -> { 3'011 \salsaa_mc_0.state [0] }
      Replacing known input bits on port A of cell $flatten\salsaa_mc_0.$verific$mux_270$salsaa_mc.vhd:234$761: \salsaa_mc_0.state -> 4'0101
      Replacing known input bits on port A of cell $flatten\salsaa_mc_0.$verific$mux_60$salsaa_mc.vhd:154$614: \salsaa_mc_0.state -> 4'0011
      Replacing known input bits on port A of cell $flatten\salsaa_mc_0.$verific$mux_57$salsaa_mc.vhd:153$611: \salsaa_mc_0.state -> 4'0011
      Replacing known input bits on port A of cell $flatten\salsaa_mc_0.$verific$mux_7$salsaa_mc.vhd:91$584: \salsaa_mc_0.state -> 4'0000
  Analyzing evaluation results.
    dead port 1/2 on $mux $flatten\salsaa_dm_0.$verific$mux_112$salsaa_dm.vhd:198$197.
Removed 1 multiplexer ports.
<suppressed ~46 debug messages>

yosys> opt_reduce

3.15.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \salsaa.
    New ctrl vector for $pmux cell $flatten\salsaa_mc_0.$verific$select_200$salsaa_mc.vhd:201$708: { $flatten\salsaa_mc_0.$verific$n6061$277 $flatten\salsaa_mc_0.$verific$n6065$281 $auto$opt_reduce.cc:134:opt_pmux$1666 }
    New ctrl vector for $pmux cell $flatten\salsaa_mc_0.$verific$select_201$salsaa_mc.vhd:201$709: { $flatten\salsaa_mc_0.$verific$n6060$276 $flatten\salsaa_mc_0.$verific$n6062$278 $auto$opt_reduce.cc:134:opt_pmux$1668 }
    New ctrl vector for $pmux cell $flatten\salsaa_mc_0.$verific$select_202$salsaa_mc.vhd:201$710: { $flatten\salsaa_mc_0.$verific$n6059$275 $flatten\salsaa_mc_0.$verific$n6063$279 $auto$opt_reduce.cc:134:opt_pmux$1670 }
    New ctrl vector for $pmux cell $flatten\salsaa_mc_0.$verific$select_203$salsaa_mc.vhd:201$711: { $flatten\salsaa_mc_0.$verific$n6058$274 $flatten\salsaa_mc_0.$verific$n6064$280 $auto$opt_reduce.cc:134:opt_pmux$1672 }
    New ctrl vector for $pmux cell $flatten\salsaa_mc_0.$verific$select_204$salsaa_mc.vhd:201$712: { $flatten\salsaa_mc_0.$verific$n6058$274 $flatten\salsaa_mc_0.$verific$n6064$280 $auto$opt_reduce.cc:134:opt_pmux$1674 }
    New ctrl vector for $pmux cell $flatten\salsaa_mc_0.$verific$select_205$salsaa_mc.vhd:201$713: { $flatten\salsaa_mc_0.$verific$n6061$277 $flatten\salsaa_mc_0.$verific$n6065$281 $auto$opt_reduce.cc:134:opt_pmux$1676 }
    New ctrl vector for $pmux cell $flatten\salsaa_mc_0.$verific$select_206$salsaa_mc.vhd:201$714: { $flatten\salsaa_mc_0.$verific$n6060$276 $flatten\salsaa_mc_0.$verific$n6062$278 $auto$opt_reduce.cc:134:opt_pmux$1678 }
    New ctrl vector for $pmux cell $flatten\salsaa_mc_0.$verific$select_207$salsaa_mc.vhd:201$715: { $flatten\salsaa_mc_0.$verific$n6059$275 $flatten\salsaa_mc_0.$verific$n6063$279 $auto$opt_reduce.cc:134:opt_pmux$1680 }
    New ctrl vector for $pmux cell $flatten\salsaa_mc_0.$verific$select_208$salsaa_mc.vhd:201$716: { $flatten\salsaa_mc_0.$verific$n6059$275 $flatten\salsaa_mc_0.$verific$n6063$279 $auto$opt_reduce.cc:134:opt_pmux$1682 }
    New ctrl vector for $pmux cell $flatten\salsaa_mc_0.$verific$select_209$salsaa_mc.vhd:201$717: { $flatten\salsaa_mc_0.$verific$n6058$274 $flatten\salsaa_mc_0.$verific$n6064$280 $auto$opt_reduce.cc:134:opt_pmux$1684 }
    New ctrl vector for $pmux cell $flatten\salsaa_mc_0.$verific$select_210$salsaa_mc.vhd:201$718: { $flatten\salsaa_mc_0.$verific$n6061$277 $flatten\salsaa_mc_0.$verific$n6065$281 $auto$opt_reduce.cc:134:opt_pmux$1686 }
    New ctrl vector for $pmux cell $flatten\salsaa_mc_0.$verific$select_211$salsaa_mc.vhd:201$719: { $flatten\salsaa_mc_0.$verific$n6060$276 $flatten\salsaa_mc_0.$verific$n6062$278 $auto$opt_reduce.cc:134:opt_pmux$1688 }
    New ctrl vector for $pmux cell $flatten\salsaa_mc_0.$verific$select_212$salsaa_mc.vhd:201$720: { $flatten\salsaa_mc_0.$verific$n6060$276 $flatten\salsaa_mc_0.$verific$n6062$278 $auto$opt_reduce.cc:134:opt_pmux$1690 }
    New ctrl vector for $pmux cell $flatten\salsaa_mc_0.$verific$select_213$salsaa_mc.vhd:201$721: { $flatten\salsaa_mc_0.$verific$n6059$275 $flatten\salsaa_mc_0.$verific$n6063$279 $auto$opt_reduce.cc:134:opt_pmux$1692 }
    New ctrl vector for $pmux cell $flatten\salsaa_mc_0.$verific$select_214$salsaa_mc.vhd:201$722: { $flatten\salsaa_mc_0.$verific$n6058$274 $flatten\salsaa_mc_0.$verific$n6064$280 $auto$opt_reduce.cc:134:opt_pmux$1694 }
    New ctrl vector for $pmux cell $flatten\salsaa_mc_0.$verific$select_215$salsaa_mc.vhd:201$723: { $flatten\salsaa_mc_0.$verific$n6061$277 $flatten\salsaa_mc_0.$verific$n6065$281 $auto$opt_reduce.cc:134:opt_pmux$1696 }
  Optimizing cells in module \salsaa.
Performed a total of 16 changes.

yosys> opt_merge

3.15.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\salsaa'.
<suppressed ~36 debug messages>
Removed a total of 12 cells.

yosys> opt_dff -nodffe -nosdff

3.15.6. Executing OPT_DFF pass (perform DFF optimizations).
Removing never-active async load on $flatten\salsaa_mc_0.$verific$x_reg_9$salsaa_mc.vhd:242$816 ($aldff) from module salsaa.
Removing never-active async load on $flatten\salsaa_mc_0.$verific$x_reg_8$salsaa_mc.vhd:242$815 ($aldff) from module salsaa.
Removing never-active async load on $flatten\salsaa_mc_0.$verific$x_reg_7$salsaa_mc.vhd:242$814 ($aldff) from module salsaa.
Removing never-active async load on $flatten\salsaa_mc_0.$verific$x_reg_6$salsaa_mc.vhd:242$813 ($aldff) from module salsaa.
Removing never-active async load on $flatten\salsaa_mc_0.$verific$x_reg_5$salsaa_mc.vhd:242$812 ($aldff) from module salsaa.
Removing never-active async load on $flatten\salsaa_mc_0.$verific$x_reg_4$salsaa_mc.vhd:242$811 ($aldff) from module salsaa.
Removing never-active async load on $flatten\salsaa_mc_0.$verific$x_reg_3$salsaa_mc.vhd:242$810 ($aldff) from module salsaa.
Removing never-active async load on $flatten\salsaa_mc_0.$verific$x_reg_2$salsaa_mc.vhd:242$809 ($aldff) from module salsaa.
Removing never-active async load on $flatten\salsaa_mc_0.$verific$x_reg_16$salsaa_mc.vhd:242$823 ($aldff) from module salsaa.
Removing never-active async load on $flatten\salsaa_mc_0.$verific$x_reg_15$salsaa_mc.vhd:242$822 ($aldff) from module salsaa.
Removing never-active async load on $flatten\salsaa_mc_0.$verific$x_reg_14$salsaa_mc.vhd:242$821 ($aldff) from module salsaa.
Removing never-active async load on $flatten\salsaa_mc_0.$verific$x_reg_13$salsaa_mc.vhd:242$820 ($aldff) from module salsaa.
Removing never-active async load on $flatten\salsaa_mc_0.$verific$x_reg_12$salsaa_mc.vhd:242$819 ($aldff) from module salsaa.
Removing never-active async load on $flatten\salsaa_mc_0.$verific$x_reg_11$salsaa_mc.vhd:242$818 ($aldff) from module salsaa.
Removing never-active async load on $flatten\salsaa_mc_0.$verific$x_reg_10$salsaa_mc.vhd:242$817 ($aldff) from module salsaa.
Removing never-active async load on $flatten\salsaa_mc_0.$verific$x_reg$salsaa_mc.vhd:242$824 ($aldff) from module salsaa.
Removing never-active async load on $flatten\salsaa_mc_0.$verific$state_reg$salsaa_mc.vhd:242$806 ($aldff) from module salsaa.
Removing never-active async load on $flatten\salsaa_mc_0.$verific$rnds_state_reg$salsaa_mc.vhd:242$826 ($aldff) from module salsaa.
Removing never-active async load on $flatten\salsaa_mc_0.$verific$mc_data_buf_reg$salsaa_mc.vhd:242$827 ($aldff) from module salsaa.
Removing never-active async load on $flatten\salsaa_mc_0.$verific$idx_reg$salsaa_mc.vhd:242$808 ($aldff) from module salsaa.
Removing never-active async load on $flatten\salsaa_mc_0.$verific$calc_state_reg$salsaa_mc.vhd:242$825 ($aldff) from module salsaa.
Removing never-active async load on $flatten\salsaa_dm_0.$verific$state_reg$salsaa_dm.vhd:260$246 ($aldff) from module salsaa.
Removing never-active async load on $flatten\salsaa_dm_0.$verific$reg_reg_9$salsaa_dm.vhd:260$254 ($aldff) from module salsaa.
Removing never-active async load on $flatten\salsaa_dm_0.$verific$reg_reg_8$salsaa_dm.vhd:260$253 ($aldff) from module salsaa.
Removing never-active async load on $flatten\salsaa_dm_0.$verific$reg_reg_7$salsaa_dm.vhd:260$252 ($aldff) from module salsaa.
Removing never-active async load on $flatten\salsaa_dm_0.$verific$reg_reg_6$salsaa_dm.vhd:260$251 ($aldff) from module salsaa.
Removing never-active async load on $flatten\salsaa_dm_0.$verific$reg_reg_5$salsaa_dm.vhd:260$250 ($aldff) from module salsaa.
Removing never-active async load on $flatten\salsaa_dm_0.$verific$reg_reg_4$salsaa_dm.vhd:260$249 ($aldff) from module salsaa.
Removing never-active async load on $flatten\salsaa_dm_0.$verific$reg_reg_3$salsaa_dm.vhd:260$248 ($aldff) from module salsaa.
Removing never-active async load on $flatten\salsaa_dm_0.$verific$reg_reg_2$salsaa_dm.vhd:260$247 ($aldff) from module salsaa.
Removing never-active async load on $flatten\salsaa_dm_0.$verific$reg_reg_16$salsaa_dm.vhd:260$261 ($aldff) from module salsaa.
Removing never-active async load on $flatten\salsaa_dm_0.$verific$reg_reg_15$salsaa_dm.vhd:260$260 ($aldff) from module salsaa.
Removing never-active async load on $flatten\salsaa_dm_0.$verific$reg_reg_14$salsaa_dm.vhd:260$259 ($aldff) from module salsaa.
Removing never-active async load on $flatten\salsaa_dm_0.$verific$reg_reg_13$salsaa_dm.vhd:260$258 ($aldff) from module salsaa.
Removing never-active async load on $flatten\salsaa_dm_0.$verific$reg_reg_12$salsaa_dm.vhd:260$257 ($aldff) from module salsaa.
Removing never-active async load on $flatten\salsaa_dm_0.$verific$reg_reg_11$salsaa_dm.vhd:260$256 ($aldff) from module salsaa.
Removing never-active async load on $flatten\salsaa_dm_0.$verific$reg_reg_10$salsaa_dm.vhd:260$255 ($aldff) from module salsaa.
Removing never-active async load on $flatten\salsaa_dm_0.$verific$reg_reg$salsaa_dm.vhd:260$262 ($aldff) from module salsaa.
Removing never-active async load on $flatten\salsaa_dm_0.$verific$reg_idx_reg$salsaa_dm.vhd:260$265 ($aldff) from module salsaa.
Removing never-active async load on $flatten\salsaa_dm_0.$verific$data_reg$salsaa_dm.vhd:260$264 ($aldff) from module salsaa.

yosys> opt_clean

3.15.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \salsaa..
Removed 0 unused cells and 29 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.15.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module salsaa.

3.15.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.15.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \salsaa..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~45 debug messages>

yosys> opt_reduce

3.15.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \salsaa.
Performed a total of 0 changes.

yosys> opt_merge

3.15.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\salsaa'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.15.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.15.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \salsaa..

yosys> opt_expr

3.15.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module salsaa.

3.15.16. Finished OPT passes. (There is nothing left to do.)

yosys> fsm -encoding binary

3.16. Executing FSM pass (extract and optimize FSM).

yosys> fsm_detect

3.16.1. Executing FSM_DETECT pass (finding FSMs in design).

yosys> fsm_extract

3.16.2. Executing FSM_EXTRACT pass (extracting FSM from design).

yosys> fsm_opt

3.16.3. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> opt_clean

3.16.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \salsaa..

yosys> fsm_opt

3.16.5. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> fsm_recode -encoding binary

3.16.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

yosys> fsm_info

3.16.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

yosys> fsm_map

3.16.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

yosys> opt -sat

3.17. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.17.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module salsaa.

yosys> opt_merge -nomux

3.17.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\salsaa'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.17.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \salsaa..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~45 debug messages>

yosys> opt_reduce

3.17.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \salsaa.
Performed a total of 0 changes.

yosys> opt_merge

3.17.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\salsaa'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.17.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $flatten\salsaa_mc_0.$verific$x_reg_9$salsaa_mc.vhd:242$816 ($dff) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1047 [31:0], Q = \salsaa_mc_0.x[7]).
Adding EN signal on $flatten\salsaa_mc_0.$verific$x_reg_8$salsaa_mc.vhd:242$815 ($dff) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1066 [31:0], Q = \salsaa_mc_0.x[6]).
Adding EN signal on $flatten\salsaa_mc_0.$verific$x_reg_7$salsaa_mc.vhd:242$814 ($dff) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1085 [31:0], Q = \salsaa_mc_0.x[5]).
Adding EN signal on $flatten\salsaa_mc_0.$verific$x_reg_6$salsaa_mc.vhd:242$813 ($dff) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1104 [31:0], Q = \salsaa_mc_0.x[4]).
Adding EN signal on $flatten\salsaa_mc_0.$verific$x_reg_5$salsaa_mc.vhd:242$812 ($dff) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1123 [31:0], Q = \salsaa_mc_0.x[3]).
Adding EN signal on $flatten\salsaa_mc_0.$verific$x_reg_4$salsaa_mc.vhd:242$811 ($dff) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1142 [31:0], Q = \salsaa_mc_0.x[2]).
Adding EN signal on $flatten\salsaa_mc_0.$verific$x_reg_3$salsaa_mc.vhd:242$810 ($dff) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1161 [31:0], Q = \salsaa_mc_0.x[1]).
Adding EN signal on $flatten\salsaa_mc_0.$verific$x_reg_2$salsaa_mc.vhd:242$809 ($dff) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1180 [31:0], Q = \salsaa_mc_0.x[0]).
Adding EN signal on $flatten\salsaa_mc_0.$verific$x_reg_16$salsaa_mc.vhd:242$823 ($dff) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$914 [31:0], Q = \salsaa_mc_0.x[14]).
Adding EN signal on $flatten\salsaa_mc_0.$verific$x_reg_15$salsaa_mc.vhd:242$822 ($dff) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$933 [31:0], Q = \salsaa_mc_0.x[13]).
Adding EN signal on $flatten\salsaa_mc_0.$verific$x_reg_14$salsaa_mc.vhd:242$821 ($dff) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$952 [31:0], Q = \salsaa_mc_0.x[12]).
Adding EN signal on $flatten\salsaa_mc_0.$verific$x_reg_13$salsaa_mc.vhd:242$820 ($dff) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$971 [31:0], Q = \salsaa_mc_0.x[11]).
Adding EN signal on $flatten\salsaa_mc_0.$verific$x_reg_12$salsaa_mc.vhd:242$819 ($dff) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$990 [31:0], Q = \salsaa_mc_0.x[10]).
Adding EN signal on $flatten\salsaa_mc_0.$verific$x_reg_11$salsaa_mc.vhd:242$818 ($dff) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1009 [31:0], Q = \salsaa_mc_0.x[9]).
Adding EN signal on $flatten\salsaa_mc_0.$verific$x_reg_10$salsaa_mc.vhd:242$817 ($dff) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1028 [31:0], Q = \salsaa_mc_0.x[8]).
Adding EN signal on $flatten\salsaa_mc_0.$verific$x_reg$salsaa_mc.vhd:242$824 ($dff) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$895 [31:0], Q = \salsaa_mc_0.x[15]).
Adding SRST signal on $flatten\salsaa_mc_0.$verific$state_reg$salsaa_mc.vhd:242$806 ($dff) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1245, Q = \salsaa_mc_0.state, rval = 4'0000).
Adding EN signal on $auto$ff.cc:262:slice$1937 ($sdff) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1242 [2:1], Q = \salsaa_mc_0.state [2:1]).
Adding EN signal on $auto$ff.cc:262:slice$1937 ($sdff) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1242 [0], Q = \salsaa_mc_0.state [0]).
Adding EN signal on $flatten\salsaa_mc_0.$verific$rnds_state_reg$salsaa_mc.vhd:242$826 ($dff) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$848 [15:8], Q = \salsaa_mc_0.rnds_state).
Adding SRST signal on $auto$ff.cc:262:slice$1947 ($dffe) from module salsaa (D = $flatten\salsaa_mc_0.$verific$n1793$337, Q = \salsaa_mc_0.rnds_state, rval = 8'00000000).
Adding EN signal on $flatten\salsaa_mc_0.$verific$mc_data_buf_reg$salsaa_mc.vhd:242$827 ($dff) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$843 [511:0], Q = \salsaa_mc_0.mc_data_buf).
Adding SRST signal on $flatten\salsaa_mc_0.$verific$mc_busy_reg$salsaa_mc.vhd:242$807 ($dff) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1207, Q = \salsaa_mc_0.mc_busy, rval = 1'1).
Adding EN signal on $auto$ff.cc:262:slice$1976 ($sdff) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1204 [0], Q = \salsaa_mc_0.mc_busy).
Adding EN signal on $flatten\salsaa_mc_0.$verific$idx_reg$salsaa_mc.vhd:242$808 ($dff) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1223 [63:0], Q = \salsaa_mc_0.idx).
Adding EN signal on $flatten\salsaa_mc_0.$verific$calc_state_reg$salsaa_mc.vhd:242$825 ($dff) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$867 [15:8], Q = \salsaa_mc_0.calc_state).
Adding SRST signal on $auto$ff.cc:262:slice$2003 ($dffe) from module salsaa (D = $flatten\salsaa_mc_0.$verific$n1784$336, Q = \salsaa_mc_0.calc_state, rval = 8'00000000).
Adding SRST signal on $flatten\salsaa_dm_0.$verific$state_reg$salsaa_dm.vhd:260$246 ($dff) from module salsaa (D = $flatten\salsaa_dm_0.$auto$bmuxmap.cc:58:execute$1587, Q = \salsaa_dm_0.state, rval = 4'0000).
Adding EN signal on $auto$ff.cc:262:slice$2013 ($sdff) from module salsaa (D = $flatten\salsaa_dm_0.$auto$bmuxmap.cc:58:execute$1584 [2:0], Q = \salsaa_dm_0.state [2:0]).
Adding SRST signal on $flatten\salsaa_dm_0.$verific$reg_reg_9$salsaa_dm.vhd:260$254 ($dff) from module salsaa (D = $flatten\salsaa_dm_0.$auto$bmuxmap.cc:58:execute$1435, Q = \salsaa_dm_0.reg[7], rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$2016 ($sdff) from module salsaa (D = \salsaa_mc_0.mc_data_buf [255:224], Q = \salsaa_dm_0.reg[7]).
Adding SRST signal on $flatten\salsaa_dm_0.$verific$reg_reg_8$salsaa_dm.vhd:260$253 ($dff) from module salsaa (D = $flatten\salsaa_dm_0.$auto$bmuxmap.cc:58:execute$1454, Q = \salsaa_dm_0.reg[6], rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$2024 ($sdff) from module salsaa (D = \salsaa_mc_0.mc_data_buf [223:192], Q = \salsaa_dm_0.reg[6]).
Adding SRST signal on $flatten\salsaa_dm_0.$verific$reg_reg_7$salsaa_dm.vhd:260$252 ($dff) from module salsaa (D = $flatten\salsaa_dm_0.$auto$bmuxmap.cc:58:execute$1473, Q = \salsaa_dm_0.reg[5], rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$2032 ($sdff) from module salsaa (D = \salsaa_mc_0.mc_data_buf [191:160], Q = \salsaa_dm_0.reg[5]).
Adding SRST signal on $flatten\salsaa_dm_0.$verific$reg_reg_6$salsaa_dm.vhd:260$251 ($dff) from module salsaa (D = $flatten\salsaa_dm_0.$auto$bmuxmap.cc:58:execute$1492, Q = \salsaa_dm_0.reg[4], rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$2040 ($sdff) from module salsaa (D = \salsaa_mc_0.mc_data_buf [159:128], Q = \salsaa_dm_0.reg[4]).
Adding SRST signal on $flatten\salsaa_dm_0.$verific$reg_reg_5$salsaa_dm.vhd:260$250 ($dff) from module salsaa (D = $flatten\salsaa_dm_0.$auto$bmuxmap.cc:58:execute$1511, Q = \salsaa_dm_0.reg[3], rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$2048 ($sdff) from module salsaa (D = \salsaa_mc_0.mc_data_buf [127:96], Q = \salsaa_dm_0.reg[3]).
Adding SRST signal on $flatten\salsaa_dm_0.$verific$reg_reg_4$salsaa_dm.vhd:260$249 ($dff) from module salsaa (D = $flatten\salsaa_dm_0.$auto$bmuxmap.cc:58:execute$1530, Q = \salsaa_dm_0.reg[2], rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$2056 ($sdff) from module salsaa (D = \salsaa_mc_0.mc_data_buf [95:64], Q = \salsaa_dm_0.reg[2]).
Adding SRST signal on $flatten\salsaa_dm_0.$verific$reg_reg_3$salsaa_dm.vhd:260$248 ($dff) from module salsaa (D = $flatten\salsaa_dm_0.$auto$bmuxmap.cc:58:execute$1549, Q = \salsaa_dm_0.reg[1], rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$2064 ($sdff) from module salsaa (D = \salsaa_mc_0.mc_data_buf [63:32], Q = \salsaa_dm_0.reg[1]).
Adding SRST signal on $flatten\salsaa_dm_0.$verific$reg_reg_2$salsaa_dm.vhd:260$247 ($dff) from module salsaa (D = $flatten\salsaa_dm_0.$auto$bmuxmap.cc:58:execute$1568, Q = \salsaa_dm_0.reg[0], rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$2072 ($sdff) from module salsaa (D = \salsaa_mc_0.mc_data_buf [31:0], Q = \salsaa_dm_0.reg[0]).
Adding SRST signal on $flatten\salsaa_dm_0.$verific$reg_reg_16$salsaa_dm.vhd:260$261 ($dff) from module salsaa (D = $flatten\salsaa_dm_0.$auto$bmuxmap.cc:58:execute$1302, Q = \salsaa_dm_0.reg[14], rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$2080 ($sdff) from module salsaa (D = \salsaa_mc_0.mc_data_buf [479:448], Q = \salsaa_dm_0.reg[14]).
Adding SRST signal on $flatten\salsaa_dm_0.$verific$reg_reg_15$salsaa_dm.vhd:260$260 ($dff) from module salsaa (D = $flatten\salsaa_dm_0.$auto$bmuxmap.cc:58:execute$1321, Q = \salsaa_dm_0.reg[13], rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$2088 ($sdff) from module salsaa (D = \salsaa_mc_0.mc_data_buf [447:416], Q = \salsaa_dm_0.reg[13]).
Adding SRST signal on $flatten\salsaa_dm_0.$verific$reg_reg_14$salsaa_dm.vhd:260$259 ($dff) from module salsaa (D = $flatten\salsaa_dm_0.$auto$bmuxmap.cc:58:execute$1340, Q = \salsaa_dm_0.reg[12], rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$2096 ($sdff) from module salsaa (D = \salsaa_mc_0.mc_data_buf [415:384], Q = \salsaa_dm_0.reg[12]).
Adding SRST signal on $flatten\salsaa_dm_0.$verific$reg_reg_13$salsaa_dm.vhd:260$258 ($dff) from module salsaa (D = $flatten\salsaa_dm_0.$auto$bmuxmap.cc:58:execute$1359, Q = \salsaa_dm_0.reg[11], rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$2104 ($sdff) from module salsaa (D = \salsaa_mc_0.mc_data_buf [383:352], Q = \salsaa_dm_0.reg[11]).
Adding SRST signal on $flatten\salsaa_dm_0.$verific$reg_reg_12$salsaa_dm.vhd:260$257 ($dff) from module salsaa (D = $flatten\salsaa_dm_0.$auto$bmuxmap.cc:58:execute$1378, Q = \salsaa_dm_0.reg[10], rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$2112 ($sdff) from module salsaa (D = \salsaa_mc_0.mc_data_buf [351:320], Q = \salsaa_dm_0.reg[10]).
Adding SRST signal on $flatten\salsaa_dm_0.$verific$reg_reg_11$salsaa_dm.vhd:260$256 ($dff) from module salsaa (D = $flatten\salsaa_dm_0.$auto$bmuxmap.cc:58:execute$1397, Q = \salsaa_dm_0.reg[9], rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$2120 ($sdff) from module salsaa (D = \salsaa_mc_0.mc_data_buf [319:288], Q = \salsaa_dm_0.reg[9]).
Adding SRST signal on $flatten\salsaa_dm_0.$verific$reg_reg_10$salsaa_dm.vhd:260$255 ($dff) from module salsaa (D = $flatten\salsaa_dm_0.$auto$bmuxmap.cc:58:execute$1416, Q = \salsaa_dm_0.reg[8], rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$2128 ($sdff) from module salsaa (D = \salsaa_mc_0.mc_data_buf [287:256], Q = \salsaa_dm_0.reg[8]).
Adding SRST signal on $flatten\salsaa_dm_0.$verific$reg_reg$salsaa_dm.vhd:260$262 ($dff) from module salsaa (D = $flatten\salsaa_dm_0.$auto$bmuxmap.cc:58:execute$1283, Q = \salsaa_dm_0.reg[15], rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$2136 ($sdff) from module salsaa (D = \salsaa_mc_0.mc_data_buf [511:480], Q = \salsaa_dm_0.reg[15]).
Adding SRST signal on $flatten\salsaa_dm_0.$verific$reg_idx_reg$salsaa_dm.vhd:260$265 ($dff) from module salsaa (D = $flatten\salsaa_dm_0.$auto$bmuxmap.cc:58:execute$1644, Q = \salsaa_dm_0.reg_idx, rval = 4'0000).
Adding EN signal on $auto$ff.cc:262:slice$2144 ($sdff) from module salsaa (D = $flatten\salsaa_dm_0.$auto$bmuxmap.cc:58:execute$1641 [3:0], Q = \salsaa_dm_0.reg_idx).
Adding EN signal on $flatten\salsaa_dm_0.$verific$mc_restart_reg$salsaa_dm.vhd:260$266 ($dff) from module salsaa (D = $flatten\salsaa_dm_0.$auto$bmuxmap.cc:58:execute$1603 [0], Q = \salsaa_dm_0.mc_restart).
Adding SRST signal on $auto$ff.cc:262:slice$2154 ($dffe) from module salsaa (D = $flatten\salsaa_dm_0.$auto$bmuxmap.cc:58:execute$1598 [1], Q = \salsaa_dm_0.mc_restart, rval = 1'0).
Adding SRST signal on $flatten\salsaa_dm_0.$verific$data_valid_reg$salsaa_dm.vhd:260$263 ($dff) from module salsaa (D = $flatten\salsaa_dm_0.$auto$bmuxmap.cc:58:execute$1625, Q = \salsaa_dm_0.data_valid, rval = 1'0).
Adding EN signal on $auto$ff.cc:262:slice$2164 ($sdff) from module salsaa (D = $flatten\salsaa_dm_0.$auto$bmuxmap.cc:58:execute$1622 [0], Q = \salsaa_dm_0.data_valid).
Adding SRST signal on $flatten\salsaa_dm_0.$verific$data_reg$salsaa_dm.vhd:260$264 ($dff) from module salsaa (D = $flatten\salsaa_dm_0.$auto$bmuxmap.cc:58:execute$1264, Q = \salsaa_dm_0.data, rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$2172 ($sdff) from module salsaa (D = $flatten\salsaa_dm_0.$auto$bmuxmap.cc:58:execute$1256 [63:32], Q = \salsaa_dm_0.data).
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$2015 ($sdff) from module salsaa.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$1946 ($sdff) from module salsaa.

yosys> opt_clean

3.17.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \salsaa..
Removed 142 unused cells and 142 unused wires.
<suppressed ~143 debug messages>

yosys> opt_expr

3.17.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module salsaa.
<suppressed ~62 debug messages>

3.17.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.17.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \salsaa..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~29 debug messages>

yosys> opt_reduce

3.17.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \salsaa.
    New input vector for $reduce_and cell $auto$opt_dff.cc:220:make_patterns_logic$2181: { $auto$opt_dff.cc:194:make_patterns_logic$2174 $auto$opt_dff.cc:194:make_patterns_logic$2176 \salsaa_dm_0.state [2] }
    New input vector for $reduce_and cell $auto$opt_dff.cc:220:make_patterns_logic$2162: { $auto$opt_dff.cc:194:make_patterns_logic$2155 $auto$rtlil.cc:2369:Not$2158 }
    New input vector for $reduce_and cell $auto$opt_dff.cc:220:make_patterns_logic$2153: { $auto$opt_dff.cc:194:make_patterns_logic$2146 $auto$opt_dff.cc:194:make_patterns_logic$2148 }
    New input vector for $reduce_and cell $auto$opt_dff.cc:220:make_patterns_logic$2143: { $auto$rtlil.cc:2369:Not$2139 \salsaa_dm_0.state [2] }
    New input vector for $reduce_and cell $auto$opt_dff.cc:220:make_patterns_logic$2135: { $auto$rtlil.cc:2369:Not$2131 \salsaa_dm_0.state [2] }
    New input vector for $reduce_and cell $auto$opt_dff.cc:220:make_patterns_logic$2127: { $auto$rtlil.cc:2369:Not$2123 \salsaa_dm_0.state [2] }
    New input vector for $reduce_and cell $auto$opt_dff.cc:220:make_patterns_logic$2119: { $auto$rtlil.cc:2369:Not$2115 \salsaa_dm_0.state [2] }
    New input vector for $reduce_and cell $auto$opt_dff.cc:220:make_patterns_logic$2111: { \salsaa_dm_0.state [2] $auto$rtlil.cc:2369:Not$2107 }
    New input vector for $reduce_and cell $auto$opt_dff.cc:220:make_patterns_logic$2103: { \salsaa_dm_0.state [2] $auto$rtlil.cc:2369:Not$2099 }
    New input vector for $reduce_and cell $auto$opt_dff.cc:220:make_patterns_logic$2095: { \salsaa_dm_0.state [2] $auto$rtlil.cc:2369:Not$2091 }
    New input vector for $reduce_and cell $auto$opt_dff.cc:220:make_patterns_logic$2087: { \salsaa_dm_0.state [2] $auto$rtlil.cc:2369:Not$2083 }
    New input vector for $reduce_and cell $auto$opt_dff.cc:220:make_patterns_logic$2079: { \salsaa_dm_0.state [2] $auto$rtlil.cc:2369:Not$2075 }
    New input vector for $reduce_and cell $auto$opt_dff.cc:220:make_patterns_logic$2071: { \salsaa_dm_0.state [2] $auto$rtlil.cc:2369:Not$2067 }
    New input vector for $reduce_and cell $auto$opt_dff.cc:220:make_patterns_logic$2063: { \salsaa_dm_0.state [2] $auto$rtlil.cc:2369:Not$2059 }
    New input vector for $reduce_and cell $auto$opt_dff.cc:220:make_patterns_logic$2055: { \salsaa_dm_0.state [2] $auto$rtlil.cc:2369:Not$2051 }
    New input vector for $reduce_and cell $auto$opt_dff.cc:220:make_patterns_logic$2047: { \salsaa_dm_0.state [2] $auto$rtlil.cc:2369:Not$2043 }
    New input vector for $reduce_and cell $auto$opt_dff.cc:220:make_patterns_logic$2039: { \salsaa_dm_0.state [2] $auto$rtlil.cc:2369:Not$2035 }
    New input vector for $reduce_and cell $auto$opt_dff.cc:220:make_patterns_logic$2031: { \salsaa_dm_0.state [2] $auto$rtlil.cc:2369:Not$2027 }
    New input vector for $reduce_and cell $auto$opt_dff.cc:220:make_patterns_logic$2023: { \salsaa_dm_0.state [2] $auto$rtlil.cc:2369:Not$2019 }
    New input vector for $reduce_and cell $auto$opt_dff.cc:220:make_patterns_logic$2011: { \salsaa_mc_0.state [1] $auto$rtlil.cc:2369:Not$2007 $auto$rtlil.cc:2369:Not$2005 }
    New input vector for $reduce_and cell $auto$opt_dff.cc:220:make_patterns_logic$2002: { $auto$opt_dff.cc:194:make_patterns_logic$1995 $auto$opt_dff.cc:194:make_patterns_logic$1993 $auto$opt_dff.cc:194:make_patterns_logic$1991 $auto$opt_dff.cc:194:make_patterns_logic$1989 $auto$rtlil.cc:2369:Not$1998 }
    New input vector for $reduce_and cell $auto$opt_dff.cc:220:make_patterns_logic$1987: { $auto$opt_dff.cc:194:make_patterns_logic$1982 $auto$opt_dff.cc:194:make_patterns_logic$1980 $auto$opt_dff.cc:194:make_patterns_logic$1978 }
    New input vector for $reduce_and cell $auto$opt_dff.cc:220:make_patterns_logic$1975: { $auto$rtlil.cc:2369:Not$1971 $auto$opt_dff.cc:194:make_patterns_logic$1968 $auto$opt_dff.cc:194:make_patterns_logic$1966 $auto$opt_dff.cc:194:make_patterns_logic$1964 $auto$opt_dff.cc:194:make_patterns_logic$1962 }
    New input vector for $reduce_and cell $auto$opt_dff.cc:220:make_patterns_logic$1959: { \salsaa_mc_0.state [1] $auto$rtlil.cc:2369:Not$1955 $auto$rtlil.cc:2369:Not$1953 $auto$opt_dff.cc:194:make_patterns_logic$1950 $auto$opt_dff.cc:194:make_patterns_logic$1948 }
    New input vector for $reduce_and cell $auto$opt_dff.cc:220:make_patterns_logic$1936: { $auto$rtlil.cc:2369:Not$1932 $auto$rtlil.cc:2369:Not$1930 $auto$opt_dff.cc:194:make_patterns_logic$1927 $auto$opt_dff.cc:194:make_patterns_logic$1925 $auto$opt_dff.cc:194:make_patterns_logic$1923 }
    New input vector for $reduce_and cell $auto$opt_dff.cc:220:make_patterns_logic$1921: { $auto$rtlil.cc:2369:Not$1917 $auto$rtlil.cc:2369:Not$1915 $auto$opt_dff.cc:194:make_patterns_logic$1912 $auto$opt_dff.cc:194:make_patterns_logic$1910 $auto$opt_dff.cc:194:make_patterns_logic$1908 }
    New input vector for $reduce_and cell $auto$opt_dff.cc:220:make_patterns_logic$1906: { $auto$rtlil.cc:2369:Not$1902 $auto$rtlil.cc:2369:Not$1900 $auto$opt_dff.cc:194:make_patterns_logic$1897 $auto$opt_dff.cc:194:make_patterns_logic$1895 $auto$opt_dff.cc:194:make_patterns_logic$1893 }
    New input vector for $reduce_and cell $auto$opt_dff.cc:220:make_patterns_logic$1891: { $auto$rtlil.cc:2369:Not$1887 $auto$rtlil.cc:2369:Not$1885 $auto$opt_dff.cc:194:make_patterns_logic$1882 $auto$opt_dff.cc:194:make_patterns_logic$1880 $auto$opt_dff.cc:194:make_patterns_logic$1878 }
    New input vector for $reduce_and cell $auto$opt_dff.cc:220:make_patterns_logic$1876: { $auto$rtlil.cc:2369:Not$1872 $auto$rtlil.cc:2369:Not$1870 $auto$opt_dff.cc:194:make_patterns_logic$1867 $auto$opt_dff.cc:194:make_patterns_logic$1865 $auto$opt_dff.cc:194:make_patterns_logic$1863 }
    New input vector for $reduce_and cell $auto$opt_dff.cc:220:make_patterns_logic$1861: { $auto$rtlil.cc:2369:Not$1857 $auto$rtlil.cc:2369:Not$1855 $auto$opt_dff.cc:194:make_patterns_logic$1852 $auto$opt_dff.cc:194:make_patterns_logic$1850 $auto$opt_dff.cc:194:make_patterns_logic$1848 }
    New input vector for $reduce_and cell $auto$opt_dff.cc:220:make_patterns_logic$1846: { $auto$rtlil.cc:2369:Not$1842 $auto$rtlil.cc:2369:Not$1840 $auto$opt_dff.cc:194:make_patterns_logic$1837 $auto$opt_dff.cc:194:make_patterns_logic$1835 $auto$opt_dff.cc:194:make_patterns_logic$1833 }
    New input vector for $reduce_and cell $auto$opt_dff.cc:220:make_patterns_logic$1831: { $auto$rtlil.cc:2369:Not$1827 $auto$rtlil.cc:2369:Not$1825 $auto$opt_dff.cc:194:make_patterns_logic$1822 $auto$opt_dff.cc:194:make_patterns_logic$1820 $auto$opt_dff.cc:194:make_patterns_logic$1818 }
    New input vector for $reduce_and cell $auto$opt_dff.cc:220:make_patterns_logic$1816: { $auto$rtlil.cc:2369:Not$1812 $auto$rtlil.cc:2369:Not$1810 $auto$opt_dff.cc:194:make_patterns_logic$1807 $auto$opt_dff.cc:194:make_patterns_logic$1805 $auto$opt_dff.cc:194:make_patterns_logic$1803 }
    New input vector for $reduce_and cell $auto$opt_dff.cc:220:make_patterns_logic$1801: { $auto$rtlil.cc:2369:Not$1797 $auto$rtlil.cc:2369:Not$1795 $auto$opt_dff.cc:194:make_patterns_logic$1792 $auto$opt_dff.cc:194:make_patterns_logic$1790 $auto$opt_dff.cc:194:make_patterns_logic$1788 }
    New input vector for $reduce_and cell $auto$opt_dff.cc:220:make_patterns_logic$1786: { $auto$rtlil.cc:2369:Not$1782 $auto$rtlil.cc:2369:Not$1780 $auto$opt_dff.cc:194:make_patterns_logic$1777 $auto$opt_dff.cc:194:make_patterns_logic$1775 $auto$opt_dff.cc:194:make_patterns_logic$1773 }
    New input vector for $reduce_and cell $auto$opt_dff.cc:220:make_patterns_logic$1771: { $auto$rtlil.cc:2369:Not$1767 $auto$rtlil.cc:2369:Not$1765 $auto$opt_dff.cc:194:make_patterns_logic$1762 $auto$opt_dff.cc:194:make_patterns_logic$1760 $auto$opt_dff.cc:194:make_patterns_logic$1758 }
    New input vector for $reduce_and cell $auto$opt_dff.cc:220:make_patterns_logic$1756: { $auto$rtlil.cc:2369:Not$1752 $auto$rtlil.cc:2369:Not$1750 $auto$opt_dff.cc:194:make_patterns_logic$1747 $auto$opt_dff.cc:194:make_patterns_logic$1745 $auto$opt_dff.cc:194:make_patterns_logic$1743 }
    New input vector for $reduce_and cell $auto$opt_dff.cc:220:make_patterns_logic$1741: { $auto$opt_dff.cc:194:make_patterns_logic$1728 $auto$opt_dff.cc:194:make_patterns_logic$1730 $auto$opt_dff.cc:194:make_patterns_logic$1732 $auto$rtlil.cc:2369:Not$1735 $auto$rtlil.cc:2369:Not$1737 }
    New input vector for $reduce_and cell $auto$opt_dff.cc:220:make_patterns_logic$1726: { $auto$rtlil.cc:2369:Not$1722 $auto$rtlil.cc:2369:Not$1720 $auto$opt_dff.cc:194:make_patterns_logic$1717 $auto$opt_dff.cc:194:make_patterns_logic$1715 $auto$opt_dff.cc:194:make_patterns_logic$1713 }
    New input vector for $reduce_and cell $auto$opt_dff.cc:220:make_patterns_logic$1711: { $auto$rtlil.cc:2369:Not$1707 $auto$rtlil.cc:2369:Not$1705 $auto$opt_dff.cc:194:make_patterns_logic$1698 $auto$opt_dff.cc:194:make_patterns_logic$1700 $auto$opt_dff.cc:194:make_patterns_logic$1702 }
  Optimizing cells in module \salsaa.
Performed a total of 40 changes.

yosys> opt_merge

3.17.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\salsaa'.
<suppressed ~387 debug messages>
Removed a total of 129 cells.

yosys> opt_dff -sat

3.17.13. Executing OPT_DFF pass (perform DFF optimizations).
Removing always-active EN on $auto$ff.cc:262:slice$1938 ($sdffe) from module salsaa.
Removing always-active EN on $auto$ff.cc:262:slice$2014 ($sdffe) from module salsaa.

yosys> opt_clean

3.17.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \salsaa..
Removed 0 unused cells and 173 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.17.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module salsaa.

3.17.16. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.17.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \salsaa..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~29 debug messages>

yosys> opt_reduce

3.17.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \salsaa.
Performed a total of 0 changes.

yosys> opt_merge

3.17.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\salsaa'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.17.20. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.17.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \salsaa..

yosys> opt_expr

3.17.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module salsaa.

3.17.23. Finished OPT passes. (There is nothing left to do.)

yosys> wreduce -keepdc

3.18. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 3) from port B of cell salsaa.$auto$opt_dff.cc:195:make_patterns_logic$1965 ($ne).
Removed top 1 bits (of 2) from port B of cell salsaa.$auto$opt_dff.cc:195:make_patterns_logic$1981 ($ne).
Removed top 2 bits (of 3) from port B of cell salsaa.$auto$opt_dff.cc:195:make_patterns_logic$1990 ($ne).
Removed top 1 bits (of 4) from mux cell salsaa.$flatten\salsaa_mc_0.$auto$bmuxmap.cc:60:execute$1243 ($mux).
Removed top 63 bits (of 64) from port B of cell salsaa.$flatten\salsaa_mc_0.$verific$add_216$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$724 ($add).
Removed top 7 bits (of 8) from port B of cell salsaa.$flatten\salsaa_mc_0.$verific$add_47$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$602 ($add).
Removed top 7 bits (of 8) from port B of cell salsaa.$flatten\salsaa_mc_0.$verific$add_54$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$608 ($add).
Removed top 7 bits (of 8) from port A of cell salsaa.$flatten\salsaa_mc_0.$verific$equal_192$salsaa_mc.vhd:163$698 ($eq).
Removed top 6 bits (of 8) from port A of cell salsaa.$flatten\salsaa_mc_0.$verific$equal_193$salsaa_mc.vhd:168$699 ($eq).
Removed top 6 bits (of 8) from port A of cell salsaa.$flatten\salsaa_mc_0.$verific$equal_194$salsaa_mc.vhd:173$700 ($eq).
Removed top 5 bits (of 8) from port A of cell salsaa.$flatten\salsaa_mc_0.$verific$equal_195$salsaa_mc.vhd:179$701 ($eq).
Removed top 5 bits (of 8) from port A of cell salsaa.$flatten\salsaa_mc_0.$verific$equal_196$salsaa_mc.vhd:184$702 ($eq).
Removed top 5 bits (of 8) from port A of cell salsaa.$flatten\salsaa_mc_0.$verific$equal_197$salsaa_mc.vhd:189$703 ($eq).
Removed top 5 bits (of 8) from port A of cell salsaa.$flatten\salsaa_mc_0.$verific$equal_198$salsaa_mc.vhd:194$704 ($eq).
Removed top 5 bits (of 8) from port B of cell salsaa.$flatten\salsaa_mc_0.$verific$equal_50$salsaa_mc.vhd:147$605 ($eq).
Removed top 4 bits (of 8) from port B of cell salsaa.$flatten\salsaa_mc_0.$verific$equal_51$salsaa_mc.vhd:148$606 ($eq).
Removed top 1 bits (of 4) from mux cell salsaa.$flatten\salsaa_mc_0.$verific$mux_270$salsaa_mc.vhd:234$761 ($mux).
Removed top 1 bits (of 4) from mux cell salsaa.$flatten\salsaa_mc_0.$verific$mux_57$salsaa_mc.vhd:153$611 ($mux).
Removed top 1 bits (of 4) from mux cell salsaa.$flatten\salsaa_mc_0.$verific$mux_60$salsaa_mc.vhd:154$614 ($mux).
Removed top 3 bits (of 4) from mux cell salsaa.$flatten\salsaa_mc_0.$verific$mux_7$salsaa_mc.vhd:91$584 ($mux).
Removed top 1 bits (of 4) from mux cell salsaa.$flatten\salsaa_dm_0.$auto$bmuxmap.cc:60:execute$1585 ($mux).
Removed top 1 bits (of 3) from port B of cell salsaa.$auto$opt_dff.cc:195:make_patterns_logic$2147 ($ne).
Removed top 3 bits (of 4) from port B of cell salsaa.$flatten\salsaa_dm_0.$verific$add_51$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$176 ($add).
Removed top 1 bits (of 4) from mux cell salsaa.$flatten\salsaa_dm_0.$verific$mux_105$salsaa_dm.vhd:191$191 ($mux).
Removed top 1 bits (of 4) from mux cell salsaa.$flatten\salsaa_dm_0.$verific$mux_106$salsaa_dm.vhd:191$192 ($mux).
Removed top 1 bits (of 4) from mux cell salsaa.$flatten\salsaa_dm_0.$verific$mux_107$salsaa_dm.vhd:191$193 ($mux).
Removed top 1 bits (of 4) from mux cell salsaa.$flatten\salsaa_dm_0.$verific$mux_108$salsaa_dm.vhd:191$194 ($mux).
Removed top 1 bits (of 4) from mux cell salsaa.$flatten\salsaa_dm_0.$verific$mux_113$salsaa_dm.vhd:198$198 ($mux).
Removed top 1 bits (of 4) from mux cell salsaa.$flatten\salsaa_dm_0.$verific$mux_114$salsaa_dm.vhd:199$199 ($mux).
Removed top 1 bits (of 4) from mux cell salsaa.$flatten\salsaa_dm_0.$verific$mux_127$salsaa_dm.vhd:230$200 ($mux).
Removed top 1 bits (of 4) from mux cell salsaa.$flatten\salsaa_dm_0.$verific$mux_144$salsaa_dm.vhd:252$201 ($mux).
Removed top 1 bits (of 4) from mux cell salsaa.$flatten\salsaa_dm_0.$verific$mux_145$salsaa_dm.vhd:252$202 ($mux).
Removed top 1 bits (of 4) from mux cell salsaa.$flatten\salsaa_dm_0.$verific$mux_146$salsaa_dm.vhd:252$203 ($mux).
Removed top 1 bits (of 12) from mux cell salsaa.$flatten\salsaa_dm_0.$verific$mux_211$salsaa_dm.vhd:130$182 ($mux).
Removed top 1 bits (of 4) from mux cell salsaa.$flatten\salsaa_dm_0.$verific$mux_32$salsaa_dm.vhd:99$157 ($mux).
Removed top 1 bits (of 4) from mux cell salsaa.$flatten\salsaa_dm_0.$verific$mux_33$salsaa_dm.vhd:99$158 ($mux).
Removed top 1 bits (of 4) from mux cell salsaa.$flatten\salsaa_dm_0.$verific$mux_34$salsaa_dm.vhd:99$159 ($mux).
Removed top 1 bits (of 4) from mux cell salsaa.$flatten\salsaa_mc_0.$auto$bmuxmap.cc:60:execute$1238 ($mux).
Removed top 1 bits (of 4) from mux cell salsaa.$flatten\salsaa_mc_0.$auto$bmuxmap.cc:60:execute$1239 ($mux).
Removed top 1 bits (of 4) from mux cell salsaa.$flatten\salsaa_dm_0.$auto$bmuxmap.cc:60:execute$1580 ($mux).
Removed top 1 bits (of 4) from mux cell salsaa.$flatten\salsaa_dm_0.$auto$bmuxmap.cc:60:execute$1581 ($mux).
Removed top 2 bits (of 4) from mux cell salsaa.$flatten\salsaa_mc_0.$auto$bmuxmap.cc:60:execute$1229 ($mux).
Removed top 1 bits (of 4) from mux cell salsaa.$flatten\salsaa_mc_0.$auto$bmuxmap.cc:60:execute$1230 ($mux).
Removed top 1 bits (of 4) from mux cell salsaa.$flatten\salsaa_mc_0.$auto$bmuxmap.cc:60:execute$1231 ($mux).
Removed top 1 bits (of 4) from mux cell salsaa.$flatten\salsaa_dm_0.$auto$bmuxmap.cc:60:execute$1571 ($mux).
Removed top 1 bits (of 4) from mux cell salsaa.$flatten\salsaa_dm_0.$auto$bmuxmap.cc:60:execute$1572 ($mux).
Removed top 1 bits (of 4) from mux cell salsaa.$flatten\salsaa_dm_0.$auto$bmuxmap.cc:60:execute$1573 ($mux).
Removed top 1 bits (of 4) from mux cell salsaa.$flatten\salsaa_dm_0.$auto$bmuxmap.cc:60:execute$1574 ($mux).
Removed top 1 bits (of 32) from wire salsaa.$flatten\salsaa_dm_0.$auto$bmuxmap.cc:58:execute$1570.
Removed top 1 bits (of 16) from wire salsaa.$flatten\salsaa_dm_0.$auto$bmuxmap.cc:58:execute$1579.
Removed top 1 bits (of 8) from wire salsaa.$flatten\salsaa_dm_0.$auto$bmuxmap.cc:58:execute$1584.
Removed top 1 bits (of 4) from wire salsaa.$flatten\salsaa_dm_0.$verific$n1205$64.
Removed top 1 bits (of 4) from wire salsaa.$flatten\salsaa_dm_0.$verific$n1884$91.
Removed top 1 bits (of 4) from wire salsaa.$flatten\salsaa_dm_0.$verific$n1889$92.
Removed top 1 bits (of 4) from wire salsaa.$flatten\salsaa_dm_0.$verific$n1894$93.
Removed top 1 bits (of 4) from wire salsaa.$flatten\salsaa_dm_0.$verific$n1899$94.
Removed top 1 bits (of 4) from wire salsaa.$flatten\salsaa_dm_0.$verific$n1920$98.
Removed top 1 bits (of 4) from wire salsaa.$flatten\salsaa_dm_0.$verific$n1925$99.
Removed top 1 bits (of 4) from wire salsaa.$flatten\salsaa_dm_0.$verific$n1966$103.
Removed top 1 bits (of 4) from wire salsaa.$flatten\salsaa_dm_0.$verific$n2011$105.
Removed top 1 bits (of 4) from wire salsaa.$flatten\salsaa_dm_0.$verific$n2021$107.
Removed top 1 bits (of 4) from wire salsaa.$flatten\salsaa_dm_0.$verific$n601$39.
Removed top 1 bits (of 4) from wire salsaa.$flatten\salsaa_dm_0.$verific$n606$40.
Removed top 1 bits (of 4) from wire salsaa.$flatten\salsaa_dm_0.$verific$n611$41.
Removed top 1 bits (of 32) from wire salsaa.$flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1228.
Removed top 1 bits (of 16) from wire salsaa.$flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1237.
Removed top 1 bits (of 8) from wire salsaa.$flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1242.
Removed top 1 bits (of 4) from wire salsaa.$flatten\salsaa_mc_0.$verific$n1756$332.
Removed top 1 bits (of 4) from wire salsaa.$flatten\salsaa_mc_0.$verific$n1779$335.
Removed top 3 bits (of 4) from wire salsaa.$flatten\salsaa_mc_0.$verific$n528$288.
Removed top 1 bits (of 4) from wire salsaa.$flatten\salsaa_mc_0.$verific$n8402$534.

yosys> peepopt

3.19. Executing PEEPOPT pass (run peephole optimizers).

yosys> opt_clean

3.20. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \salsaa..
Removed 0 unused cells and 23 unused wires.
<suppressed ~1 debug messages>

yosys> bmuxmap

3.21. Executing BMUXMAP pass.

yosys> demuxmap

3.22. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> alumacc

3.23. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module salsaa:
  creating $macc model for $flatten\salsaa_dm_0.$verific$add_51$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$176 ($add).
  creating $macc model for $flatten\salsaa_mc_0.$verific$add_103$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$657 ($add).
  creating $macc model for $flatten\salsaa_mc_0.$verific$add_107$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$661 ($add).
  creating $macc model for $flatten\salsaa_mc_0.$verific$add_111$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$665 ($add).
  creating $macc model for $flatten\salsaa_mc_0.$verific$add_115$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$669 ($add).
  creating $macc model for $flatten\salsaa_mc_0.$verific$add_119$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$673 ($add).
  creating $macc model for $flatten\salsaa_mc_0.$verific$add_123$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$677 ($add).
  creating $macc model for $flatten\salsaa_mc_0.$verific$add_127$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$681 ($add).
  creating $macc model for $flatten\salsaa_mc_0.$verific$add_131$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$682 ($add).
  creating $macc model for $flatten\salsaa_mc_0.$verific$add_135$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$683 ($add).
  creating $macc model for $flatten\salsaa_mc_0.$verific$add_139$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$684 ($add).
  creating $macc model for $flatten\salsaa_mc_0.$verific$add_143$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$685 ($add).
  creating $macc model for $flatten\salsaa_mc_0.$verific$add_147$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$686 ($add).
  creating $macc model for $flatten\salsaa_mc_0.$verific$add_151$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$687 ($add).
  creating $macc model for $flatten\salsaa_mc_0.$verific$add_155$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$688 ($add).
  creating $macc model for $flatten\salsaa_mc_0.$verific$add_159$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$689 ($add).
  creating $macc model for $flatten\salsaa_mc_0.$verific$add_163$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$690 ($add).
  creating $macc model for $flatten\salsaa_mc_0.$verific$add_167$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$691 ($add).
  creating $macc model for $flatten\salsaa_mc_0.$verific$add_171$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$692 ($add).
  creating $macc model for $flatten\salsaa_mc_0.$verific$add_175$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$693 ($add).
  creating $macc model for $flatten\salsaa_mc_0.$verific$add_179$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$694 ($add).
  creating $macc model for $flatten\salsaa_mc_0.$verific$add_183$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$695 ($add).
  creating $macc model for $flatten\salsaa_mc_0.$verific$add_187$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$696 ($add).
  creating $macc model for $flatten\salsaa_mc_0.$verific$add_216$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$724 ($add).
  creating $macc model for $flatten\salsaa_mc_0.$verific$add_219$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$727 ($add).
  creating $macc model for $flatten\salsaa_mc_0.$verific$add_222$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$729 ($add).
  creating $macc model for $flatten\salsaa_mc_0.$verific$add_225$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$731 ($add).
  creating $macc model for $flatten\salsaa_mc_0.$verific$add_228$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$733 ($add).
  creating $macc model for $flatten\salsaa_mc_0.$verific$add_231$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$735 ($add).
  creating $macc model for $flatten\salsaa_mc_0.$verific$add_234$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$737 ($add).
  creating $macc model for $flatten\salsaa_mc_0.$verific$add_237$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$739 ($add).
  creating $macc model for $flatten\salsaa_mc_0.$verific$add_240$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$741 ($add).
  creating $macc model for $flatten\salsaa_mc_0.$verific$add_243$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$743 ($add).
  creating $macc model for $flatten\salsaa_mc_0.$verific$add_246$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$745 ($add).
  creating $macc model for $flatten\salsaa_mc_0.$verific$add_249$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$747 ($add).
  creating $macc model for $flatten\salsaa_mc_0.$verific$add_252$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$749 ($add).
  creating $macc model for $flatten\salsaa_mc_0.$verific$add_255$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$751 ($add).
  creating $macc model for $flatten\salsaa_mc_0.$verific$add_258$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$753 ($add).
  creating $macc model for $flatten\salsaa_mc_0.$verific$add_261$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$755 ($add).
  creating $macc model for $flatten\salsaa_mc_0.$verific$add_264$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$757 ($add).
  creating $macc model for $flatten\salsaa_mc_0.$verific$add_47$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$602 ($add).
  creating $macc model for $flatten\salsaa_mc_0.$verific$add_54$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$608 ($add).
  creating $macc model for $flatten\salsaa_mc_0.$verific$add_63$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$617 ($add).
  creating $macc model for $flatten\salsaa_mc_0.$verific$add_67$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$621 ($add).
  creating $macc model for $flatten\salsaa_mc_0.$verific$add_71$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$625 ($add).
  creating $macc model for $flatten\salsaa_mc_0.$verific$add_75$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$629 ($add).
  creating $macc model for $flatten\salsaa_mc_0.$verific$add_79$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$633 ($add).
  creating $macc model for $flatten\salsaa_mc_0.$verific$add_83$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$637 ($add).
  creating $macc model for $flatten\salsaa_mc_0.$verific$add_87$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$641 ($add).
  creating $macc model for $flatten\salsaa_mc_0.$verific$add_91$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$645 ($add).
  creating $macc model for $flatten\salsaa_mc_0.$verific$add_95$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$649 ($add).
  creating $macc model for $flatten\salsaa_mc_0.$verific$add_99$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$653 ($add).
  creating $alu model for $macc $flatten\salsaa_mc_0.$verific$add_99$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$653.
  creating $alu model for $macc $flatten\salsaa_mc_0.$verific$add_95$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$649.
  creating $alu model for $macc $flatten\salsaa_mc_0.$verific$add_91$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$645.
  creating $alu model for $macc $flatten\salsaa_mc_0.$verific$add_87$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$641.
  creating $alu model for $macc $flatten\salsaa_mc_0.$verific$add_83$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$637.
  creating $alu model for $macc $flatten\salsaa_mc_0.$verific$add_79$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$633.
  creating $alu model for $macc $flatten\salsaa_mc_0.$verific$add_75$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$629.
  creating $alu model for $macc $flatten\salsaa_mc_0.$verific$add_71$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$625.
  creating $alu model for $macc $flatten\salsaa_mc_0.$verific$add_67$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$621.
  creating $alu model for $macc $flatten\salsaa_mc_0.$verific$add_63$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$617.
  creating $alu model for $macc $flatten\salsaa_mc_0.$verific$add_54$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$608.
  creating $alu model for $macc $flatten\salsaa_mc_0.$verific$add_47$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$602.
  creating $alu model for $macc $flatten\salsaa_mc_0.$verific$add_264$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$757.
  creating $alu model for $macc $flatten\salsaa_mc_0.$verific$add_261$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$755.
  creating $alu model for $macc $flatten\salsaa_mc_0.$verific$add_258$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$753.
  creating $alu model for $macc $flatten\salsaa_mc_0.$verific$add_255$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$751.
  creating $alu model for $macc $flatten\salsaa_mc_0.$verific$add_252$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$749.
  creating $alu model for $macc $flatten\salsaa_mc_0.$verific$add_249$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$747.
  creating $alu model for $macc $flatten\salsaa_mc_0.$verific$add_246$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$745.
  creating $alu model for $macc $flatten\salsaa_mc_0.$verific$add_243$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$743.
  creating $alu model for $macc $flatten\salsaa_mc_0.$verific$add_240$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$741.
  creating $alu model for $macc $flatten\salsaa_mc_0.$verific$add_237$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$739.
  creating $alu model for $macc $flatten\salsaa_mc_0.$verific$add_234$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$737.
  creating $alu model for $macc $flatten\salsaa_mc_0.$verific$add_231$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$735.
  creating $alu model for $macc $flatten\salsaa_mc_0.$verific$add_228$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$733.
  creating $alu model for $macc $flatten\salsaa_mc_0.$verific$add_225$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$731.
  creating $alu model for $macc $flatten\salsaa_mc_0.$verific$add_222$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$729.
  creating $alu model for $macc $flatten\salsaa_mc_0.$verific$add_219$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$727.
  creating $alu model for $macc $flatten\salsaa_mc_0.$verific$add_216$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$724.
  creating $alu model for $macc $flatten\salsaa_mc_0.$verific$add_187$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$696.
  creating $alu model for $macc $flatten\salsaa_mc_0.$verific$add_183$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$695.
  creating $alu model for $macc $flatten\salsaa_mc_0.$verific$add_179$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$694.
  creating $alu model for $macc $flatten\salsaa_mc_0.$verific$add_175$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$693.
  creating $alu model for $macc $flatten\salsaa_mc_0.$verific$add_171$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$692.
  creating $alu model for $macc $flatten\salsaa_mc_0.$verific$add_167$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$691.
  creating $alu model for $macc $flatten\salsaa_mc_0.$verific$add_163$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$690.
  creating $alu model for $macc $flatten\salsaa_mc_0.$verific$add_159$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$689.
  creating $alu model for $macc $flatten\salsaa_mc_0.$verific$add_155$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$688.
  creating $alu model for $macc $flatten\salsaa_mc_0.$verific$add_151$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$687.
  creating $alu model for $macc $flatten\salsaa_mc_0.$verific$add_147$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$686.
  creating $alu model for $macc $flatten\salsaa_mc_0.$verific$add_143$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$685.
  creating $alu model for $macc $flatten\salsaa_mc_0.$verific$add_139$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$684.
  creating $alu model for $macc $flatten\salsaa_mc_0.$verific$add_135$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$683.
  creating $alu model for $macc $flatten\salsaa_mc_0.$verific$add_131$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$682.
  creating $alu model for $macc $flatten\salsaa_mc_0.$verific$add_127$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$681.
  creating $alu model for $macc $flatten\salsaa_mc_0.$verific$add_123$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$677.
  creating $alu model for $macc $flatten\salsaa_mc_0.$verific$add_119$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$673.
  creating $alu model for $macc $flatten\salsaa_mc_0.$verific$add_115$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$669.
  creating $alu model for $macc $flatten\salsaa_mc_0.$verific$add_111$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$665.
  creating $alu model for $macc $flatten\salsaa_mc_0.$verific$add_107$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$661.
  creating $alu model for $macc $flatten\salsaa_mc_0.$verific$add_103$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$657.
  creating $alu model for $macc $flatten\salsaa_dm_0.$verific$add_51$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$176.
  creating $alu cell for $flatten\salsaa_dm_0.$verific$add_51$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$176: $auto$alumacc.cc:485:replace_alu$2205
  creating $alu cell for $flatten\salsaa_mc_0.$verific$add_103$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$657: $auto$alumacc.cc:485:replace_alu$2208
  creating $alu cell for $flatten\salsaa_mc_0.$verific$add_107$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$661: $auto$alumacc.cc:485:replace_alu$2211
  creating $alu cell for $flatten\salsaa_mc_0.$verific$add_111$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$665: $auto$alumacc.cc:485:replace_alu$2214
  creating $alu cell for $flatten\salsaa_mc_0.$verific$add_115$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$669: $auto$alumacc.cc:485:replace_alu$2217
  creating $alu cell for $flatten\salsaa_mc_0.$verific$add_119$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$673: $auto$alumacc.cc:485:replace_alu$2220
  creating $alu cell for $flatten\salsaa_mc_0.$verific$add_123$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$677: $auto$alumacc.cc:485:replace_alu$2223
  creating $alu cell for $flatten\salsaa_mc_0.$verific$add_127$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$681: $auto$alumacc.cc:485:replace_alu$2226
  creating $alu cell for $flatten\salsaa_mc_0.$verific$add_131$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$682: $auto$alumacc.cc:485:replace_alu$2229
  creating $alu cell for $flatten\salsaa_mc_0.$verific$add_135$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$683: $auto$alumacc.cc:485:replace_alu$2232
  creating $alu cell for $flatten\salsaa_mc_0.$verific$add_139$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$684: $auto$alumacc.cc:485:replace_alu$2235
  creating $alu cell for $flatten\salsaa_mc_0.$verific$add_143$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$685: $auto$alumacc.cc:485:replace_alu$2238
  creating $alu cell for $flatten\salsaa_mc_0.$verific$add_147$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$686: $auto$alumacc.cc:485:replace_alu$2241
  creating $alu cell for $flatten\salsaa_mc_0.$verific$add_151$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$687: $auto$alumacc.cc:485:replace_alu$2244
  creating $alu cell for $flatten\salsaa_mc_0.$verific$add_155$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$688: $auto$alumacc.cc:485:replace_alu$2247
  creating $alu cell for $flatten\salsaa_mc_0.$verific$add_159$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$689: $auto$alumacc.cc:485:replace_alu$2250
  creating $alu cell for $flatten\salsaa_mc_0.$verific$add_163$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$690: $auto$alumacc.cc:485:replace_alu$2253
  creating $alu cell for $flatten\salsaa_mc_0.$verific$add_167$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$691: $auto$alumacc.cc:485:replace_alu$2256
  creating $alu cell for $flatten\salsaa_mc_0.$verific$add_171$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$692: $auto$alumacc.cc:485:replace_alu$2259
  creating $alu cell for $flatten\salsaa_mc_0.$verific$add_175$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$693: $auto$alumacc.cc:485:replace_alu$2262
  creating $alu cell for $flatten\salsaa_mc_0.$verific$add_179$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$694: $auto$alumacc.cc:485:replace_alu$2265
  creating $alu cell for $flatten\salsaa_mc_0.$verific$add_183$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$695: $auto$alumacc.cc:485:replace_alu$2268
  creating $alu cell for $flatten\salsaa_mc_0.$verific$add_187$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$696: $auto$alumacc.cc:485:replace_alu$2271
  creating $alu cell for $flatten\salsaa_mc_0.$verific$add_216$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$724: $auto$alumacc.cc:485:replace_alu$2274
  creating $alu cell for $flatten\salsaa_mc_0.$verific$add_219$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$727: $auto$alumacc.cc:485:replace_alu$2277
  creating $alu cell for $flatten\salsaa_mc_0.$verific$add_222$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$729: $auto$alumacc.cc:485:replace_alu$2280
  creating $alu cell for $flatten\salsaa_mc_0.$verific$add_225$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$731: $auto$alumacc.cc:485:replace_alu$2283
  creating $alu cell for $flatten\salsaa_mc_0.$verific$add_228$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$733: $auto$alumacc.cc:485:replace_alu$2286
  creating $alu cell for $flatten\salsaa_mc_0.$verific$add_231$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$735: $auto$alumacc.cc:485:replace_alu$2289
  creating $alu cell for $flatten\salsaa_mc_0.$verific$add_234$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$737: $auto$alumacc.cc:485:replace_alu$2292
  creating $alu cell for $flatten\salsaa_mc_0.$verific$add_237$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$739: $auto$alumacc.cc:485:replace_alu$2295
  creating $alu cell for $flatten\salsaa_mc_0.$verific$add_240$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$741: $auto$alumacc.cc:485:replace_alu$2298
  creating $alu cell for $flatten\salsaa_mc_0.$verific$add_243$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$743: $auto$alumacc.cc:485:replace_alu$2301
  creating $alu cell for $flatten\salsaa_mc_0.$verific$add_246$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$745: $auto$alumacc.cc:485:replace_alu$2304
  creating $alu cell for $flatten\salsaa_mc_0.$verific$add_249$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$747: $auto$alumacc.cc:485:replace_alu$2307
  creating $alu cell for $flatten\salsaa_mc_0.$verific$add_252$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$749: $auto$alumacc.cc:485:replace_alu$2310
  creating $alu cell for $flatten\salsaa_mc_0.$verific$add_255$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$751: $auto$alumacc.cc:485:replace_alu$2313
  creating $alu cell for $flatten\salsaa_mc_0.$verific$add_258$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$753: $auto$alumacc.cc:485:replace_alu$2316
  creating $alu cell for $flatten\salsaa_mc_0.$verific$add_261$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$755: $auto$alumacc.cc:485:replace_alu$2319
  creating $alu cell for $flatten\salsaa_mc_0.$verific$add_264$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$757: $auto$alumacc.cc:485:replace_alu$2322
  creating $alu cell for $flatten\salsaa_mc_0.$verific$add_47$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$602: $auto$alumacc.cc:485:replace_alu$2325
  creating $alu cell for $flatten\salsaa_mc_0.$verific$add_54$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$608: $auto$alumacc.cc:485:replace_alu$2328
  creating $alu cell for $flatten\salsaa_mc_0.$verific$add_63$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$617: $auto$alumacc.cc:485:replace_alu$2331
  creating $alu cell for $flatten\salsaa_mc_0.$verific$add_67$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$621: $auto$alumacc.cc:485:replace_alu$2334
  creating $alu cell for $flatten\salsaa_mc_0.$verific$add_71$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$625: $auto$alumacc.cc:485:replace_alu$2337
  creating $alu cell for $flatten\salsaa_mc_0.$verific$add_75$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$629: $auto$alumacc.cc:485:replace_alu$2340
  creating $alu cell for $flatten\salsaa_mc_0.$verific$add_79$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$633: $auto$alumacc.cc:485:replace_alu$2343
  creating $alu cell for $flatten\salsaa_mc_0.$verific$add_83$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$637: $auto$alumacc.cc:485:replace_alu$2346
  creating $alu cell for $flatten\salsaa_mc_0.$verific$add_87$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$641: $auto$alumacc.cc:485:replace_alu$2349
  creating $alu cell for $flatten\salsaa_mc_0.$verific$add_91$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$645: $auto$alumacc.cc:485:replace_alu$2352
  creating $alu cell for $flatten\salsaa_mc_0.$verific$add_95$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$649: $auto$alumacc.cc:485:replace_alu$2355
  creating $alu cell for $flatten\salsaa_mc_0.$verific$add_99$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$653: $auto$alumacc.cc:485:replace_alu$2358
  created 52 $alu and 0 $macc cells.

yosys> opt_expr

3.24. Executing OPT_EXPR pass (perform const folding).
Optimizing module salsaa.

yosys> opt_merge -nomux

3.25. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\salsaa'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.26. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \salsaa..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~29 debug messages>

yosys> opt_reduce

3.27. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \salsaa.
Performed a total of 0 changes.

yosys> opt_merge

3.28. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\salsaa'.
Removed a total of 0 cells.

yosys> opt_share

3.29. Executing OPT_SHARE pass.

yosys> opt_dff

3.30. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.31. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \salsaa..

yosys> opt_expr

3.32. Executing OPT_EXPR pass (perform const folding).
Optimizing module salsaa.
MAX OPT ITERATION = 1

yosys> stat

3.33. Printing statistics.

=== salsaa ===

   Number of wires:                413
   Number of wire bits:          25735
   Number of public wires:          66
   Number of public wire bits:    3886
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                313
     $alu                           52
     $and                            4
     $dffe                          18
     $eq                            10
     $logic_not                      1
     $mux                          128
     $ne                            15
     $not                            6
     $pmux                          16
     $reduce_and                    13
     $reduce_bool                    3
     $reduce_or                      5
     $sdff                           2
     $sdffce                         3
     $sdffe                         21
     $xor                           16


yosys> memory -nomap

3.34. Executing MEMORY pass.

yosys> opt_mem

3.34.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

yosys> opt_mem_priority

3.34.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

yosys> opt_mem_feedback

3.34.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

yosys> memory_bmux2rom

3.34.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

yosys> memory_dff

3.34.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

yosys> opt_clean

3.34.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \salsaa..

yosys> memory_share

3.34.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

yosys> opt_mem_widen

3.34.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

yosys> opt_clean

3.34.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \salsaa..

yosys> memory_collect

3.34.10. Executing MEMORY_COLLECT pass (generating $mem cells).

yosys> stat

3.35. Printing statistics.

=== salsaa ===

   Number of wires:                413
   Number of wire bits:          25735
   Number of public wires:          66
   Number of public wire bits:    3886
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                313
     $alu                           52
     $and                            4
     $dffe                          18
     $eq                            10
     $logic_not                      1
     $mux                          128
     $ne                            15
     $not                            6
     $pmux                          16
     $reduce_and                    13
     $reduce_bool                    3
     $reduce_or                      5
     $sdff                           2
     $sdffce                         3
     $sdffe                         21
     $xor                           16


yosys> muxpack

3.36. Executing MUXPACK pass ($mux cell cascades to $pmux).
Converted 0 (p)mux cells into 0 pmux cells.
<suppressed ~119 debug messages>

yosys> opt_clean

3.37. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \salsaa..

yosys> pmuxtree

3.38. Executing PMUXTREE pass.

yosys> muxpack

3.39. Executing MUXPACK pass ($mux cell cascades to $pmux).
Converted 0 (p)mux cells into 0 pmux cells.
<suppressed ~166 debug messages>

yosys> memory_map

3.40. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

yosys> stat

3.41. Printing statistics.

=== salsaa ===

   Number of wires:                509
   Number of wire bits:          27319
   Number of public wires:          66
   Number of public wire bits:    3886
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                393
     $alu                           52
     $and                            4
     $dffe                          18
     $eq                            10
     $logic_not                      1
     $mux                          176
     $ne                            15
     $not                           22
     $or                            16
     $reduce_and                    13
     $reduce_bool                    3
     $reduce_or                     21
     $sdff                           2
     $sdffce                         3
     $sdffe                         21
     $xor                           16


yosys> techmap -map +/techmap.v -map +/rapidsilicon/genesis/arith_map.v

3.42. Executing TECHMAP pass (map to technology primitives).

3.42.1. Executing Verilog-2005 frontend: /home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.42.2. Executing Verilog-2005 frontend: /home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/arith_map.v
Parsing Verilog input from `/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_rs_alu'.
Successfully finished Verilog frontend.

3.42.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $sdffe.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $reduce_bool.
Using template $paramod$32a7b7b86c07519b7537abc18e96f0331f97914d\_90_alu for cells of type $alu.
Using template $paramod$be80489e44a49c29884f59fd81c31ed03229cfc1\_80_rs_alu for cells of type $alu.
Using template $paramod$cc80a4e89b0341cb117f5d28b0e7244620640141\_90_alu for cells of type $alu.
Using template $paramod$c3cd1564c35d873179656addd6052d7ea8b6d991\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $sdffce.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $dffe.
Using extmapper simplemap for cells of type $sdff.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $and.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000100 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000001000000 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001000 for cells of type $lcu.
No more expansions possible.
<suppressed ~2094 debug messages>

yosys> stat

3.43. Printing statistics.

=== salsaa ===

   Number of wires:               2119
   Number of wire bits:          55748
   Number of public wires:          66
   Number of public wire bits:    3886
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:              16877
     $_AND_                        341
     $_DFFE_PP_                   1088
     $_MUX_                       8412
     $_NOT_                       1653
     $_OR_                         330
     $_SDFFCE_PN0P_                 17
     $_SDFFE_PP0P_                 550
     $_SDFFE_PP1P_                   1
     $_SDFF_PP0_                     5
     $_XOR_                       2944
     adder_carry                  1536


yosys> opt_expr

3.44. Executing OPT_EXPR pass (perform const folding).
Optimizing module salsaa.
<suppressed ~2721 debug messages>

yosys> opt_merge -nomux

3.45. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\salsaa'.
<suppressed ~4353 debug messages>
Removed a total of 1451 cells.

yosys> opt_muxtree

3.46. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \salsaa..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.47. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \salsaa.
Performed a total of 0 changes.

yosys> opt_merge

3.48. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\salsaa'.
Removed a total of 0 cells.

yosys> opt_share

3.49. Executing OPT_SHARE pass.

yosys> opt_dff

3.50. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $auto$ff.cc:262:slice$8815 ($_SDFF_PP0_) from module salsaa (D = $auto$wreduce.cc:455:run$2200 [1], Q = \salsaa_mc_0.state [1]).

yosys> opt_clean

3.51. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \salsaa..
Removed 657 unused cells and 1566 unused wires.
<suppressed ~658 debug messages>

yosys> opt_expr

3.52. Executing OPT_EXPR pass (perform const folding).
Optimizing module salsaa.
<suppressed ~3 debug messages>

yosys> opt_muxtree

3.53. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \salsaa..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.54. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \salsaa.
Performed a total of 0 changes.

yosys> opt_merge

3.55. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\salsaa'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

yosys> opt_share

3.56. Executing OPT_SHARE pass.

yosys> opt_dff

3.57. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.58. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \salsaa..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.59. Executing OPT_EXPR pass (perform const folding).
Optimizing module salsaa.

yosys> opt_muxtree

3.60. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \salsaa..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.61. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \salsaa.
Performed a total of 0 changes.

yosys> opt_merge

3.62. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\salsaa'.
Removed a total of 0 cells.

yosys> opt_share

3.63. Executing OPT_SHARE pass.

yosys> opt_dff

3.64. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.65. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \salsaa..

yosys> opt_expr

3.66. Executing OPT_EXPR pass (perform const folding).
Optimizing module salsaa.
MAX OPT ITERATION = 3

yosys> opt -fast -full

3.67. Executing OPT pass (performing simple optimizations).

yosys> opt_expr -full

3.67.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module salsaa.
<suppressed ~3708 debug messages>

yosys> opt_merge

3.67.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\salsaa'.
<suppressed ~9 debug messages>
Removed a total of 3 cells.

yosys> opt_dff

3.67.3. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $auto$ff.cc:262:slice$9776 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1076 [63], Q = \salsaa_mc_0.x[5] [31], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$9775 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1076 [62], Q = \salsaa_mc_0.x[5] [30], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$9774 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1076 [61], Q = \salsaa_mc_0.x[5] [29], rval = 1'1).
Adding SRST signal on $auto$ff.cc:262:slice$9773 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1076 [60], Q = \salsaa_mc_0.x[5] [28], rval = 1'1).
Adding SRST signal on $auto$ff.cc:262:slice$9772 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1076 [59], Q = \salsaa_mc_0.x[5] [27], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$9771 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1076 [58], Q = \salsaa_mc_0.x[5] [26], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$9770 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1076 [57], Q = \salsaa_mc_0.x[5] [25], rval = 1'1).
Adding SRST signal on $auto$ff.cc:262:slice$9769 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1076 [56], Q = \salsaa_mc_0.x[5] [24], rval = 1'1).
Adding SRST signal on $auto$ff.cc:262:slice$9768 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1076 [55], Q = \salsaa_mc_0.x[5] [23], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$9767 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1076 [54], Q = \salsaa_mc_0.x[5] [22], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$9766 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1076 [53], Q = \salsaa_mc_0.x[5] [21], rval = 1'1).
Adding SRST signal on $auto$ff.cc:262:slice$9765 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1076 [52], Q = \salsaa_mc_0.x[5] [20], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$9764 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1076 [51], Q = \salsaa_mc_0.x[5] [19], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$9763 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1076 [50], Q = \salsaa_mc_0.x[5] [18], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$9762 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1076 [49], Q = \salsaa_mc_0.x[5] [17], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$9761 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1076 [48], Q = \salsaa_mc_0.x[5] [16], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$9760 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1076 [47], Q = \salsaa_mc_0.x[5] [15], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$9759 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1076 [46], Q = \salsaa_mc_0.x[5] [14], rval = 1'1).
Adding SRST signal on $auto$ff.cc:262:slice$9758 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1076 [45], Q = \salsaa_mc_0.x[5] [13], rval = 1'1).
Adding SRST signal on $auto$ff.cc:262:slice$9757 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1076 [44], Q = \salsaa_mc_0.x[5] [12], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$9756 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1076 [43], Q = \salsaa_mc_0.x[5] [11], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$9755 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1076 [42], Q = \salsaa_mc_0.x[5] [10], rval = 1'1).
Adding SRST signal on $auto$ff.cc:262:slice$9754 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1076 [41], Q = \salsaa_mc_0.x[5] [9], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$9753 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1076 [40], Q = \salsaa_mc_0.x[5] [8], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$9752 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1076 [39], Q = \salsaa_mc_0.x[5] [7], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$9751 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1076 [38], Q = \salsaa_mc_0.x[5] [6], rval = 1'1).
Adding SRST signal on $auto$ff.cc:262:slice$9750 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1076 [37], Q = \salsaa_mc_0.x[5] [5], rval = 1'1).
Adding SRST signal on $auto$ff.cc:262:slice$9749 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1076 [36], Q = \salsaa_mc_0.x[5] [4], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$9748 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1076 [35], Q = \salsaa_mc_0.x[5] [3], rval = 1'1).
Adding SRST signal on $auto$ff.cc:262:slice$9747 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1076 [34], Q = \salsaa_mc_0.x[5] [2], rval = 1'1).
Adding SRST signal on $auto$ff.cc:262:slice$9746 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1076 [33], Q = \salsaa_mc_0.x[5] [1], rval = 1'1).
Adding SRST signal on $auto$ff.cc:262:slice$9745 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1076 [32], Q = \salsaa_mc_0.x[5] [0], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$9616 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1171 [63], Q = \salsaa_mc_0.x[0] [31], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$9615 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1171 [62], Q = \salsaa_mc_0.x[0] [30], rval = 1'1).
Adding SRST signal on $auto$ff.cc:262:slice$9614 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1171 [61], Q = \salsaa_mc_0.x[0] [29], rval = 1'1).
Adding SRST signal on $auto$ff.cc:262:slice$9613 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1171 [60], Q = \salsaa_mc_0.x[0] [28], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$9612 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1171 [59], Q = \salsaa_mc_0.x[0] [27], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$9611 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1171 [58], Q = \salsaa_mc_0.x[0] [26], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$9610 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1171 [57], Q = \salsaa_mc_0.x[0] [25], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$9609 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1171 [56], Q = \salsaa_mc_0.x[0] [24], rval = 1'1).
Adding SRST signal on $auto$ff.cc:262:slice$9608 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1171 [55], Q = \salsaa_mc_0.x[0] [23], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$9607 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1171 [54], Q = \salsaa_mc_0.x[0] [22], rval = 1'1).
Adding SRST signal on $auto$ff.cc:262:slice$9606 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1171 [53], Q = \salsaa_mc_0.x[0] [21], rval = 1'1).
Adding SRST signal on $auto$ff.cc:262:slice$9605 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1171 [52], Q = \salsaa_mc_0.x[0] [20], rval = 1'1).
Adding SRST signal on $auto$ff.cc:262:slice$9604 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1171 [51], Q = \salsaa_mc_0.x[0] [19], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$9603 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1171 [50], Q = \salsaa_mc_0.x[0] [18], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$9602 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1171 [49], Q = \salsaa_mc_0.x[0] [17], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$9601 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1171 [48], Q = \salsaa_mc_0.x[0] [16], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$9600 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1171 [47], Q = \salsaa_mc_0.x[0] [15], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$9599 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1171 [46], Q = \salsaa_mc_0.x[0] [14], rval = 1'1).
Adding SRST signal on $auto$ff.cc:262:slice$9598 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1171 [45], Q = \salsaa_mc_0.x[0] [13], rval = 1'1).
Adding SRST signal on $auto$ff.cc:262:slice$9597 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1171 [44], Q = \salsaa_mc_0.x[0] [12], rval = 1'1).
Adding SRST signal on $auto$ff.cc:262:slice$9596 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1171 [43], Q = \salsaa_mc_0.x[0] [11], rval = 1'1).
Adding SRST signal on $auto$ff.cc:262:slice$9595 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1171 [42], Q = \salsaa_mc_0.x[0] [10], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$9594 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1171 [41], Q = \salsaa_mc_0.x[0] [9], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$9593 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1171 [40], Q = \salsaa_mc_0.x[0] [8], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$9592 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1171 [39], Q = \salsaa_mc_0.x[0] [7], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$9591 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1171 [38], Q = \salsaa_mc_0.x[0] [6], rval = 1'1).
Adding SRST signal on $auto$ff.cc:262:slice$9590 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1171 [37], Q = \salsaa_mc_0.x[0] [5], rval = 1'1).
Adding SRST signal on $auto$ff.cc:262:slice$9589 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1171 [36], Q = \salsaa_mc_0.x[0] [4], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$9588 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1171 [35], Q = \salsaa_mc_0.x[0] [3], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$9587 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1171 [34], Q = \salsaa_mc_0.x[0] [2], rval = 1'1).
Adding SRST signal on $auto$ff.cc:262:slice$9586 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1171 [33], Q = \salsaa_mc_0.x[0] [1], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$9585 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1171 [32], Q = \salsaa_mc_0.x[0] [0], rval = 1'1).
Adding SRST signal on $auto$ff.cc:262:slice$9456 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$981 [63], Q = \salsaa_mc_0.x[10] [31], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$9455 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$981 [62], Q = \salsaa_mc_0.x[10] [30], rval = 1'1).
Adding SRST signal on $auto$ff.cc:262:slice$9454 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$981 [61], Q = \salsaa_mc_0.x[10] [29], rval = 1'1).
Adding SRST signal on $auto$ff.cc:262:slice$9453 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$981 [60], Q = \salsaa_mc_0.x[10] [28], rval = 1'1).
Adding SRST signal on $auto$ff.cc:262:slice$9452 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$981 [59], Q = \salsaa_mc_0.x[10] [27], rval = 1'1).
Adding SRST signal on $auto$ff.cc:262:slice$9451 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$981 [58], Q = \salsaa_mc_0.x[10] [26], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$9450 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$981 [57], Q = \salsaa_mc_0.x[10] [25], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$9449 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$981 [56], Q = \salsaa_mc_0.x[10] [24], rval = 1'1).
Adding SRST signal on $auto$ff.cc:262:slice$9448 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$981 [55], Q = \salsaa_mc_0.x[10] [23], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$9447 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$981 [54], Q = \salsaa_mc_0.x[10] [22], rval = 1'1).
Adding SRST signal on $auto$ff.cc:262:slice$9446 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$981 [53], Q = \salsaa_mc_0.x[10] [21], rval = 1'1).
Adding SRST signal on $auto$ff.cc:262:slice$9445 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$981 [52], Q = \salsaa_mc_0.x[10] [20], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$9444 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$981 [51], Q = \salsaa_mc_0.x[10] [19], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$9443 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$981 [50], Q = \salsaa_mc_0.x[10] [18], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$9442 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$981 [49], Q = \salsaa_mc_0.x[10] [17], rval = 1'1).
Adding SRST signal on $auto$ff.cc:262:slice$9441 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$981 [48], Q = \salsaa_mc_0.x[10] [16], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$9440 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$981 [47], Q = \salsaa_mc_0.x[10] [15], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$9439 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$981 [46], Q = \salsaa_mc_0.x[10] [14], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$9438 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$981 [45], Q = \salsaa_mc_0.x[10] [13], rval = 1'1).
Adding SRST signal on $auto$ff.cc:262:slice$9437 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$981 [44], Q = \salsaa_mc_0.x[10] [12], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$9436 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$981 [43], Q = \salsaa_mc_0.x[10] [11], rval = 1'1).
Adding SRST signal on $auto$ff.cc:262:slice$9435 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$981 [42], Q = \salsaa_mc_0.x[10] [10], rval = 1'1).
Adding SRST signal on $auto$ff.cc:262:slice$9434 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$981 [41], Q = \salsaa_mc_0.x[10] [9], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$9433 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$981 [40], Q = \salsaa_mc_0.x[10] [8], rval = 1'1).
Adding SRST signal on $auto$ff.cc:262:slice$9432 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$981 [39], Q = \salsaa_mc_0.x[10] [7], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$9431 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$981 [38], Q = \salsaa_mc_0.x[10] [6], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$9430 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$981 [37], Q = \salsaa_mc_0.x[10] [5], rval = 1'1).
Adding SRST signal on $auto$ff.cc:262:slice$9429 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$981 [36], Q = \salsaa_mc_0.x[10] [4], rval = 1'1).
Adding SRST signal on $auto$ff.cc:262:slice$9428 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$981 [35], Q = \salsaa_mc_0.x[10] [3], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$9427 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$981 [34], Q = \salsaa_mc_0.x[10] [2], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$9426 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$981 [33], Q = \salsaa_mc_0.x[10] [1], rval = 1'1).
Adding SRST signal on $auto$ff.cc:262:slice$9425 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$981 [32], Q = \salsaa_mc_0.x[10] [0], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$9360 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$886 [63], Q = \salsaa_mc_0.x[15] [31], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$9359 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$886 [62], Q = \salsaa_mc_0.x[15] [30], rval = 1'1).
Adding SRST signal on $auto$ff.cc:262:slice$9358 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$886 [61], Q = \salsaa_mc_0.x[15] [29], rval = 1'1).
Adding SRST signal on $auto$ff.cc:262:slice$9357 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$886 [60], Q = \salsaa_mc_0.x[15] [28], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$9356 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$886 [59], Q = \salsaa_mc_0.x[15] [27], rval = 1'1).
Adding SRST signal on $auto$ff.cc:262:slice$9355 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$886 [58], Q = \salsaa_mc_0.x[15] [26], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$9354 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$886 [57], Q = \salsaa_mc_0.x[15] [25], rval = 1'1).
Adding SRST signal on $auto$ff.cc:262:slice$9353 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$886 [56], Q = \salsaa_mc_0.x[15] [24], rval = 1'1).
Adding SRST signal on $auto$ff.cc:262:slice$9352 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$886 [55], Q = \salsaa_mc_0.x[15] [23], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$9351 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$886 [54], Q = \salsaa_mc_0.x[15] [22], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$9350 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$886 [53], Q = \salsaa_mc_0.x[15] [21], rval = 1'1).
Adding SRST signal on $auto$ff.cc:262:slice$9349 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$886 [52], Q = \salsaa_mc_0.x[15] [20], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$9348 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$886 [51], Q = \salsaa_mc_0.x[15] [19], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$9347 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$886 [50], Q = \salsaa_mc_0.x[15] [18], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$9346 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$886 [49], Q = \salsaa_mc_0.x[15] [17], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$9345 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$886 [48], Q = \salsaa_mc_0.x[15] [16], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$9344 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$886 [47], Q = \salsaa_mc_0.x[15] [15], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$9343 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$886 [46], Q = \salsaa_mc_0.x[15] [14], rval = 1'1).
Adding SRST signal on $auto$ff.cc:262:slice$9342 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$886 [45], Q = \salsaa_mc_0.x[15] [13], rval = 1'1).
Adding SRST signal on $auto$ff.cc:262:slice$9341 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$886 [44], Q = \salsaa_mc_0.x[15] [12], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$9340 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$886 [43], Q = \salsaa_mc_0.x[15] [11], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$9339 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$886 [42], Q = \salsaa_mc_0.x[15] [10], rval = 1'1).
Adding SRST signal on $auto$ff.cc:262:slice$9338 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$886 [41], Q = \salsaa_mc_0.x[15] [9], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$9337 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$886 [40], Q = \salsaa_mc_0.x[15] [8], rval = 1'1).
Adding SRST signal on $auto$ff.cc:262:slice$9336 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$886 [39], Q = \salsaa_mc_0.x[15] [7], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$9335 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$886 [38], Q = \salsaa_mc_0.x[15] [6], rval = 1'1).
Adding SRST signal on $auto$ff.cc:262:slice$9334 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$886 [37], Q = \salsaa_mc_0.x[15] [5], rval = 1'1).
Adding SRST signal on $auto$ff.cc:262:slice$9333 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$886 [36], Q = \salsaa_mc_0.x[15] [4], rval = 1'1).
Adding SRST signal on $auto$ff.cc:262:slice$9332 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$886 [35], Q = \salsaa_mc_0.x[15] [3], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$9331 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$886 [34], Q = \salsaa_mc_0.x[15] [2], rval = 1'1).
Adding SRST signal on $auto$ff.cc:262:slice$9330 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$886 [33], Q = \salsaa_mc_0.x[15] [1], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$9329 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$886 [32], Q = \salsaa_mc_0.x[15] [0], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$8693 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1218 [127], Q = \salsaa_mc_0.idx [63], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$8692 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1218 [126], Q = \salsaa_mc_0.idx [62], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$8691 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1218 [125], Q = \salsaa_mc_0.idx [61], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$8690 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1218 [124], Q = \salsaa_mc_0.idx [60], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$8689 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1218 [123], Q = \salsaa_mc_0.idx [59], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$8688 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1218 [122], Q = \salsaa_mc_0.idx [58], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$8687 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1218 [121], Q = \salsaa_mc_0.idx [57], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$8686 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1218 [120], Q = \salsaa_mc_0.idx [56], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$8685 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1218 [119], Q = \salsaa_mc_0.idx [55], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$8684 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1218 [118], Q = \salsaa_mc_0.idx [54], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$8683 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1218 [117], Q = \salsaa_mc_0.idx [53], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$8682 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1218 [116], Q = \salsaa_mc_0.idx [52], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$8681 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1218 [115], Q = \salsaa_mc_0.idx [51], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$8680 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1218 [114], Q = \salsaa_mc_0.idx [50], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$8679 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1218 [113], Q = \salsaa_mc_0.idx [49], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$8678 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1218 [112], Q = \salsaa_mc_0.idx [48], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$8677 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1218 [111], Q = \salsaa_mc_0.idx [47], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$8676 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1218 [110], Q = \salsaa_mc_0.idx [46], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$8675 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1218 [109], Q = \salsaa_mc_0.idx [45], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$8674 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1218 [108], Q = \salsaa_mc_0.idx [44], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$8673 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1218 [107], Q = \salsaa_mc_0.idx [43], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$8672 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1218 [106], Q = \salsaa_mc_0.idx [42], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$8671 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1218 [105], Q = \salsaa_mc_0.idx [41], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$8670 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1218 [104], Q = \salsaa_mc_0.idx [40], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$8669 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1218 [103], Q = \salsaa_mc_0.idx [39], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$8668 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1218 [102], Q = \salsaa_mc_0.idx [38], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$8667 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1218 [101], Q = \salsaa_mc_0.idx [37], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$8666 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1218 [100], Q = \salsaa_mc_0.idx [36], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$8665 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1218 [99], Q = \salsaa_mc_0.idx [35], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$8664 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1218 [98], Q = \salsaa_mc_0.idx [34], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$8663 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1218 [97], Q = \salsaa_mc_0.idx [33], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$8662 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1218 [96], Q = \salsaa_mc_0.idx [32], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$8661 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1218 [95], Q = \salsaa_mc_0.idx [31], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$8660 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1218 [94], Q = \salsaa_mc_0.idx [30], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$8659 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1218 [93], Q = \salsaa_mc_0.idx [29], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$8658 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1218 [92], Q = \salsaa_mc_0.idx [28], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$8657 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1218 [91], Q = \salsaa_mc_0.idx [27], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$8656 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1218 [90], Q = \salsaa_mc_0.idx [26], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$8655 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1218 [89], Q = \salsaa_mc_0.idx [25], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$8654 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1218 [88], Q = \salsaa_mc_0.idx [24], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$8653 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1218 [87], Q = \salsaa_mc_0.idx [23], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$8652 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1218 [86], Q = \salsaa_mc_0.idx [22], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$8651 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1218 [85], Q = \salsaa_mc_0.idx [21], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$8650 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1218 [84], Q = \salsaa_mc_0.idx [20], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$8649 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1218 [83], Q = \salsaa_mc_0.idx [19], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$8648 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1218 [82], Q = \salsaa_mc_0.idx [18], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$8647 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1218 [81], Q = \salsaa_mc_0.idx [17], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$8646 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1218 [80], Q = \salsaa_mc_0.idx [16], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$8645 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1218 [79], Q = \salsaa_mc_0.idx [15], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$8644 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1218 [78], Q = \salsaa_mc_0.idx [14], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$8643 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1218 [77], Q = \salsaa_mc_0.idx [13], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$8642 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1218 [76], Q = \salsaa_mc_0.idx [12], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$8641 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1218 [75], Q = \salsaa_mc_0.idx [11], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$8640 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1218 [74], Q = \salsaa_mc_0.idx [10], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$8639 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1218 [73], Q = \salsaa_mc_0.idx [9], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$8638 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1218 [72], Q = \salsaa_mc_0.idx [8], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$8637 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1218 [71], Q = \salsaa_mc_0.idx [7], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$8636 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1218 [70], Q = \salsaa_mc_0.idx [6], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$8635 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1218 [69], Q = \salsaa_mc_0.idx [5], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$8634 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1218 [68], Q = \salsaa_mc_0.idx [4], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$8633 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1218 [67], Q = \salsaa_mc_0.idx [3], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$8632 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1218 [66], Q = \salsaa_mc_0.idx [2], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$8631 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1218 [65], Q = \salsaa_mc_0.idx [1], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$8630 ($_DFFE_PP_) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1218 [64], Q = \salsaa_mc_0.idx [0], rval = 1'0).

yosys> opt_clean

3.67.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \salsaa..
Removed 192 unused cells and 51 unused wires.
<suppressed ~193 debug messages>

3.67.5. Rerunning OPT passes. (Removed registers in this run.)

yosys> opt_expr -full

3.67.6. Executing OPT_EXPR pass (perform const folding).
Optimizing module salsaa.
<suppressed ~6 debug messages>

yosys> opt_merge

3.67.7. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\salsaa'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

yosys> opt_dff

3.67.8. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.67.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \salsaa..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

3.67.10. Finished fast OPT passes.

yosys> techmap -map +/techmap.v

3.68. Executing TECHMAP pass (map to technology primitives).

3.68.1. Executing Verilog-2005 frontend: /home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.68.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~71 debug messages>

yosys> opt -sat

3.69. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.69.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module salsaa.

yosys> opt_merge -nomux

3.69.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\salsaa'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.69.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \salsaa..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.69.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \salsaa.
Performed a total of 0 changes.

yosys> opt_merge

3.69.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\salsaa'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.69.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.69.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \salsaa..

yosys> opt_expr

3.69.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module salsaa.

3.69.9. Finished OPT passes. (There is nothing left to do.)

yosys> abc -dff

3.70. Executing ABC pass (technology mapping using ABC).

3.70.1. Summary of detected clock domains:
  1811 cells in clk=\clk, en=$auto$opt_dff.cc:219:make_patterns_logic$1725, arst={ }, srst={ }
  1579 cells in clk=\clk, en=$auto$opt_dff.cc:219:make_patterns_logic$1755, arst={ }, srst={ }
  1405 cells in clk=\clk, en=$auto$opt_dff.cc:219:make_patterns_logic$1974, arst={ }, srst={ }
  34 cells in clk=\clk, en=$auto$opt_dff.cc:219:make_patterns_logic$1958, arst={ }, srst=!\salsaa_mc_0.state [0]
  7 cells in clk=\clk, en=$auto$opt_dff.cc:219:make_patterns_logic$1986, arst={ }, srst=\reset
  57 cells in clk=\clk, en=$auto$opt_dff.cc:219:make_patterns_logic$2010, arst={ }, srst=!\salsaa_mc_0.state [0]
  13 cells in clk=\clk, en=$auto$opt_dff.cc:194:make_patterns_logic$1940, arst={ }, srst=\reset
  245 cells in clk=\clk, en=$auto$opt_dff.cc:219:make_patterns_logic$2001, arst={ }, srst=!\salsaa_mc_0.state [2]
  1043 cells in clk=\clk, en=$auto$opt_dff.cc:219:make_patterns_logic$1740, arst={ }, srst=!\salsaa_mc_0.state [1]
  105 cells in clk=\clk, en=!\salsaa_mc_0.state [2], arst={ }, srst=\reset
  86 cells in clk=\clk, en={ }, arst={ }, srst=\reset
  768 cells in clk=\clk, en=$auto$opt_dff.cc:219:make_patterns_logic$2022, arst={ }, srst=\reset
  238 cells in clk=\clk, en=$auto$opt_dff.cc:219:make_patterns_logic$2152, arst={ }, srst=\reset
  4 cells in clk=\clk, en=$auto$opt_dff.cc:219:make_patterns_logic$2161, arst={ }, srst=!\salsaa_dm_0.state [2]
  3 cells in clk=\clk, en=$auto$opt_dff.cc:194:make_patterns_logic$2148, arst={ }, srst=\reset
  33 cells in clk=\clk, en=$auto$opt_dff.cc:219:make_patterns_logic$2180, arst={ }, srst=\reset
  1357 cells in clk=\clk, en=$auto$opt_dff.cc:219:make_patterns_logic$1710, arst={ }, srst={ }

3.70.2. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:219:make_patterns_logic$1725
Extracted 1523 gates and 2463 wires to a netlist network with 939 inputs and 840 outputs.

3.70.2.1. Executing ABC.

3.70.3. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:219:make_patterns_logic$1755
Extracted 1515 gates and 2449 wires to a netlist network with 933 inputs and 770 outputs.

3.70.3.1. Executing ABC.

3.70.4. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:219:make_patterns_logic$1974
Extracted 893 gates and 1620 wires to a netlist network with 727 inputs and 706 outputs.

3.70.4.1. Executing ABC.

3.70.5. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:219:make_patterns_logic$1958, synchronously reset by !\salsaa_mc_0.state [0]
Extracted 34 gates and 39 wires to a netlist network with 5 inputs and 5 outputs.

3.70.5.1. Executing ABC.

3.70.6. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:219:make_patterns_logic$1986, synchronously reset by \reset
Extracted 7 gates and 13 wires to a netlist network with 6 inputs and 5 outputs.

3.70.6.1. Executing ABC.

3.70.7. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2010, synchronously reset by !\salsaa_mc_0.state [0]
Extracted 57 gates and 64 wires to a netlist network with 6 inputs and 10 outputs.

3.70.7.1. Executing ABC.

3.70.8. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:194:make_patterns_logic$1940, synchronously reset by \reset
Extracted 13 gates and 23 wires to a netlist network with 8 inputs and 11 outputs.

3.70.8.1. Executing ABC.

3.70.9. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2001, synchronously reset by !\salsaa_mc_0.state [2]
Extracted 245 gates and 249 wires to a netlist network with 4 inputs and 65 outputs.

3.70.9.1. Executing ABC.

3.70.10. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:219:make_patterns_logic$1740, synchronously reset by !\salsaa_mc_0.state [1]
Extracted 691 gates and 1002 wires to a netlist network with 310 inputs and 147 outputs.

3.70.10.1. Executing ABC.

3.70.11. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by !\salsaa_mc_0.state [2], synchronously reset by \reset
Extracted 105 gates and 213 wires to a netlist network with 107 inputs and 40 outputs.

3.70.11.1. Executing ABC.

3.70.12. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, synchronously reset by \reset
Extracted 86 gates and 107 wires to a netlist network with 19 inputs and 23 outputs.

3.70.12.1. Executing ABC.

3.70.13. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$27163$auto$opt_dff.cc:219:make_patterns_logic$2022, synchronously reset by \reset
Extracted 768 gates and 1281 wires to a netlist network with 513 inputs and 256 outputs.

3.70.13.1. Executing ABC.

3.70.14. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2152, synchronously reset by \reset
Extracted 238 gates and 500 wires to a netlist network with 262 inputs and 41 outputs.

3.70.14.1. Executing ABC.

3.70.15. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2161, synchronously reset by !$abc$27163$lo2
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 3 outputs.

3.70.15.1. Executing ABC.

3.70.16. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:194:make_patterns_logic$2148, synchronously reset by \reset
Extracted 3 gates and 7 wires to a netlist network with 4 inputs and 3 outputs.

3.70.16.1. Executing ABC.

3.70.17. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2180, synchronously reset by \reset
Extracted 33 gates and 67 wires to a netlist network with 34 inputs and 33 outputs.

3.70.17.1. Executing ABC.

3.70.18. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:219:make_patterns_logic$1710
Extracted 1037 gates and 1790 wires to a netlist network with 752 inputs and 523 outputs.

3.70.18.1. Executing ABC.

yosys> abc -dff

3.71. Executing ABC pass (technology mapping using ABC).

3.71.1. Summary of detected clock domains:
  1969 cells in clk=\clk, en=$abc$19059$auto$opt_dff.cc:219:make_patterns_logic$1725, arst={ }, srst={ }
  1750 cells in clk=\clk, en=$abc$21565$auto$opt_dff.cc:219:make_patterns_logic$1755, arst={ }, srst={ }
  31 cells in clk=\clk, en=$abc$25757$auto$opt_dff.cc:219:make_patterns_logic$1958, arst={ }, srst=!$abc$25838$lo0
  16 cells in clk=\clk, en=$abc$25788$auto$opt_dff.cc:219:make_patterns_logic$1986, arst={ }, srst=\reset
  33 cells in clk=\clk, en=$abc$25797$auto$opt_dff.cc:219:make_patterns_logic$2010, arst={ }, srst=!$abc$25838$lo0
  2197 cells in clk=\clk, en=$abc$23979$auto$opt_dff.cc:219:make_patterns_logic$1974, arst={ }, srst={ }
  9 cells in clk=\clk, en=$abc$25838$auto$opt_dff.cc:194:make_patterns_logic$1940, arst={ }, srst=\reset
  257 cells in clk=\clk, en=$abc$25852$auto$opt_dff.cc:219:make_patterns_logic$2001, arst={ }, srst=!$abc$27163$lo3
  1202 cells in clk=\clk, en=!$abc$27163$lo3, arst={ }, srst=\reset
  1292 cells in clk=\clk, en=$abc$26110$auto$opt_dff.cc:219:make_patterns_logic$1740, arst={ }, srst=!$abc$26926$lo0
  67 cells in clk=\clk, en={ }, arst={ }, srst=\reset
  769 cells in clk=\clk, en=$abc$27163$auto$opt_dff.cc:219:make_patterns_logic$2022, arst={ }, srst=\reset
  149 cells in clk=\clk, en=$abc$28518$auto$opt_dff.cc:219:make_patterns_logic$2152, arst={ }, srst=\reset
  3 cells in clk=\clk, en=$abc$28762$auto$opt_dff.cc:219:make_patterns_logic$2161, arst={ }, srst=!$abc$27163$lo2
  3 cells in clk=\clk, en=$abc$28768$auto$opt_dff.cc:194:make_patterns_logic$2148, arst={ }, srst=\reset
  33 cells in clk=\clk, en=$abc$28774$auto$opt_dff.cc:219:make_patterns_logic$2180, arst={ }, srst=\reset
  1466 cells in clk=\clk, en=$abc$28872$auto$opt_dff.cc:219:make_patterns_logic$1710, arst={ }, srst={ }

3.71.2. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$19059$auto$opt_dff.cc:219:make_patterns_logic$1725
Extracted 1670 gates and 2417 wires to a netlist network with 747 inputs and 789 outputs.

3.71.2.1. Executing ABC.

3.71.3. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$21565$auto$opt_dff.cc:219:make_patterns_logic$1755
Extracted 1667 gates and 2409 wires to a netlist network with 742 inputs and 774 outputs.

3.71.3.1. Executing ABC.

3.71.4. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$25757$auto$opt_dff.cc:219:make_patterns_logic$1958, synchronously reset by !$abc$25838$lo0
Extracted 31 gates and 36 wires to a netlist network with 5 inputs and 6 outputs.

3.71.4.1. Executing ABC.

3.71.5. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$25788$auto$opt_dff.cc:219:make_patterns_logic$1986, synchronously reset by \reset
Extracted 16 gates and 24 wires to a netlist network with 8 inputs and 11 outputs.

3.71.5.1. Executing ABC.

3.71.6. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$25797$auto$opt_dff.cc:219:make_patterns_logic$2010, synchronously reset by !$abc$25838$lo0
Extracted 33 gates and 37 wires to a netlist network with 4 inputs and 9 outputs.

3.71.6.1. Executing ABC.

3.71.7. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$23979$auto$opt_dff.cc:219:make_patterns_logic$1974
Extracted 1685 gates and 2830 wires to a netlist network with 1145 inputs and 1028 outputs.

3.71.7.1. Executing ABC.

3.71.8. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$25838$auto$opt_dff.cc:194:make_patterns_logic$1940, synchronously reset by \reset
Extracted 9 gates and 17 wires to a netlist network with 8 inputs and 8 outputs.

3.71.8.1. Executing ABC.

3.71.9. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$25852$auto$opt_dff.cc:219:make_patterns_logic$2001, synchronously reset by !$abc$27163$lo3
Extracted 257 gates and 262 wires to a netlist network with 5 inputs and 65 outputs.

3.71.9.1. Executing ABC.

3.71.10. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by !$abc$27163$lo3, synchronously reset by \reset
Extracted 1199 gates and 2237 wires to a netlist network with 1038 inputs and 808 outputs.

3.71.10.1. Executing ABC.

3.71.11. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$26110$auto$opt_dff.cc:219:make_patterns_logic$1740, synchronously reset by !$abc$36911$lo0
Extracted 999 gates and 1488 wires to a netlist network with 489 inputs and 394 outputs.

3.71.11.1. Executing ABC.

3.71.12. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, synchronously reset by \reset
Extracted 67 gates and 102 wires to a netlist network with 35 inputs and 34 outputs.

3.71.12.1. Executing ABC.

3.71.13. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$27163$auto$opt_dff.cc:219:make_patterns_logic$2022, synchronously reset by \reset
Extracted 769 gates and 1284 wires to a netlist network with 515 inputs and 257 outputs.

3.71.13.1. Executing ABC.

3.71.14. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$28518$auto$opt_dff.cc:219:make_patterns_logic$2152, synchronously reset by \reset
Extracted 149 gates and 409 wires to a netlist network with 260 inputs and 134 outputs.

3.71.14.1. Executing ABC.

3.71.15. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$28762$auto$opt_dff.cc:219:make_patterns_logic$2161, synchronously reset by !$abc$39426$lo2
Extracted 3 gates and 6 wires to a netlist network with 3 inputs and 2 outputs.

3.71.15.1. Executing ABC.

3.71.16. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$28768$auto$opt_dff.cc:194:make_patterns_logic$2148, synchronously reset by \reset
Extracted 3 gates and 7 wires to a netlist network with 4 inputs and 3 outputs.

3.71.16.1. Executing ABC.

3.71.17. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$28774$auto$opt_dff.cc:219:make_patterns_logic$2180, synchronously reset by \reset
Extracted 33 gates and 67 wires to a netlist network with 34 inputs and 33 outputs.

3.71.17.1. Executing ABC.

3.71.18. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$28872$auto$opt_dff.cc:219:make_patterns_logic$1710
Extracted 1120 gates and 1673 wires to a netlist network with 553 inputs and 269 outputs.

3.71.18.1. Executing ABC.

yosys> abc -dff

3.72. Executing ABC pass (technology mapping using ABC).

3.72.1. Summary of detected clock domains:
  157 cells in clk=\clk, en=$abc$40940$abc$28774$auto$opt_dff.cc:219:make_patterns_logic$2180, arst={ }, srst=\reset
  2182 cells in clk=\clk, en=$abc$30726$abc$19059$auto$opt_dff.cc:219:make_patterns_logic$1725, arst={ }, srst={ }
  11 cells in clk=\clk, en=$abc$34358$abc$25788$auto$opt_dff.cc:219:make_patterns_logic$1986, arst={ }, srst=\reset
  35 cells in clk=\clk, en=$abc$34373$abc$25797$auto$opt_dff.cc:219:make_patterns_logic$2010, arst={ }, srst=!$abc$36642$lo0
  9 cells in clk=\clk, en=$abc$36642$abc$25838$auto$opt_dff.cc:194:make_patterns_logic$1940, arst={ }, srst=\reset
  257 cells in clk=\clk, en=$abc$36653$abc$25852$auto$opt_dff.cc:219:make_patterns_logic$2001, arst={ }, srst=!$abc$39426$lo3
  2032 cells in clk=\clk, en=$abc$32526$abc$21565$auto$opt_dff.cc:219:make_patterns_logic$1755, arst={ }, srst={ }
  1243 cells in clk=\clk, en=!$abc$39426$lo3, arst={ }, srst=\reset
  30 cells in clk=\clk, en=$abc$34326$abc$25757$auto$opt_dff.cc:219:make_patterns_logic$1958, arst={ }, srst=!$abc$36642$lo0
  1499 cells in clk=\clk, en=$abc$38112$abc$26110$auto$opt_dff.cc:219:make_patterns_logic$1740, arst={ }, srst=!$abc$36911$lo0
  172 cells in clk=\clk, en={ }, arst={ }, srst=\reset
  3 cells in clk=\clk, en=$abc$40929$abc$28762$auto$opt_dff.cc:219:make_patterns_logic$2161, arst={ }, srst=!$abc$39426$lo2
  170 cells in clk=\clk, en=$abc$40780$abc$28518$auto$opt_dff.cc:219:make_patterns_logic$2152, arst={ }, srst=\reset
  3 cells in clk=\clk, en=$abc$40934$abc$28768$auto$opt_dff.cc:194:make_patterns_logic$2148, arst={ }, srst=\reset
  746 cells in clk=\clk, en=$abc$39498$abc$27163$auto$opt_dff.cc:219:make_patterns_logic$2022, arst={ }, srst=\reset
  1505 cells in clk=\clk, en=$abc$34407$abc$23979$auto$opt_dff.cc:219:make_patterns_logic$1974, arst={ }, srst={ }
  1459 cells in clk=\clk, en=$abc$41038$abc$28872$auto$opt_dff.cc:219:make_patterns_logic$1710, arst={ }, srst={ }

3.72.2. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$40940$abc$28774$auto$opt_dff.cc:219:make_patterns_logic$2180, synchronously reset by \reset
Extracted 157 gates and 318 wires to a netlist network with 161 inputs and 33 outputs.

3.72.2.1. Executing ABC.

3.72.3. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$30726$abc$19059$auto$opt_dff.cc:219:make_patterns_logic$1725
Extracted 1879 gates and 2819 wires to a netlist network with 940 inputs and 989 outputs.

3.72.3.1. Executing ABC.

3.72.4. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$34358$abc$25788$auto$opt_dff.cc:219:make_patterns_logic$1986, synchronously reset by \reset
Extracted 11 gates and 19 wires to a netlist network with 8 inputs and 8 outputs.

3.72.4.1. Executing ABC.

3.72.5. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$34373$abc$25797$auto$opt_dff.cc:219:make_patterns_logic$2010, synchronously reset by !$abc$36642$lo0
Extracted 35 gates and 38 wires to a netlist network with 3 inputs and 8 outputs.

3.72.5.1. Executing ABC.

3.72.6. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$36642$abc$25838$auto$opt_dff.cc:194:make_patterns_logic$1940, synchronously reset by \reset
Extracted 9 gates and 17 wires to a netlist network with 8 inputs and 8 outputs.

3.72.6.1. Executing ABC.

3.72.7. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$36653$abc$25852$auto$opt_dff.cc:219:make_patterns_logic$2001, synchronously reset by !$abc$39426$lo3
Extracted 257 gates and 262 wires to a netlist network with 5 inputs and 65 outputs.

3.72.7.1. Executing ABC.

3.72.8. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$32526$abc$21565$auto$opt_dff.cc:219:make_patterns_logic$1755
Extracted 1948 gates and 2947 wires to a netlist network with 999 inputs and 994 outputs.

3.72.8.1. Executing ABC.

3.72.9. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by !$abc$39426$lo3, synchronously reset by \reset
Extracted 1242 gates and 2312 wires to a netlist network with 1070 inputs and 811 outputs.

3.72.9.1. Executing ABC.

3.72.10. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$34326$abc$25757$auto$opt_dff.cc:219:make_patterns_logic$1958, synchronously reset by !$abc$44527$lo0
Extracted 30 gates and 35 wires to a netlist network with 5 inputs and 5 outputs.

3.72.10.1. Executing ABC.

3.72.11. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$38112$abc$26110$auto$opt_dff.cc:219:make_patterns_logic$1740, synchronously reset by !$abc$46797$lo0
Extracted 1202 gates and 1693 wires to a netlist network with 491 inputs and 361 outputs.

3.72.11.1. Executing ABC.

3.72.12. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, synchronously reset by \reset
Extracted 170 gates and 401 wires to a netlist network with 231 inputs and 132 outputs.

3.72.12.1. Executing ABC.

3.72.13. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$40929$abc$28762$auto$opt_dff.cc:219:make_patterns_logic$2161, synchronously reset by !$abc$49442$lo2
Extracted 3 gates and 6 wires to a netlist network with 3 inputs and 2 outputs.

3.72.13.1. Executing ABC.

3.72.14. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$40780$abc$28518$auto$opt_dff.cc:219:make_patterns_logic$2152, synchronously reset by \reset
Extracted 170 gates and 453 wires to a netlist network with 283 inputs and 134 outputs.

3.72.14.1. Executing ABC.

3.72.15. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$40934$abc$28768$auto$opt_dff.cc:194:make_patterns_logic$2148, synchronously reset by \reset
Extracted 3 gates and 7 wires to a netlist network with 4 inputs and 3 outputs.

3.72.15.1. Executing ABC.

3.72.16. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$39498$abc$27163$auto$opt_dff.cc:219:make_patterns_logic$2022, synchronously reset by \reset
Extracted 746 gates and 1261 wires to a netlist network with 515 inputs and 280 outputs.

3.72.16.1. Executing ABC.

3.72.17. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$34407$abc$23979$auto$opt_dff.cc:219:make_patterns_logic$1974
Extracted 1002 gates and 1810 wires to a netlist network with 808 inputs and 779 outputs.

3.72.17.1. Executing ABC.

3.72.18. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$41038$abc$28872$auto$opt_dff.cc:219:make_patterns_logic$1710
Extracted 1113 gates and 1662 wires to a netlist network with 549 inputs and 269 outputs.

3.72.18.1. Executing ABC.

yosys> abc -dff

3.73. Executing ABC pass (technology mapping using ABC).

3.73.1. Summary of detected clock domains:
  128 cells in clk=\clk, en=$abc$42290$abc$40940$abc$28774$auto$opt_dff.cc:219:make_patterns_logic$2180, arst={ }, srst=\reset
  11 cells in clk=\clk, en=$abc$44479$abc$34358$abc$25788$auto$opt_dff.cc:219:make_patterns_logic$1986, arst={ }, srst=\reset
  35 cells in clk=\clk, en=$abc$44491$abc$34373$abc$25797$auto$opt_dff.cc:219:make_patterns_logic$2010, arst={ }, srst=!$abc$44527$lo0
  8 cells in clk=\clk, en=$abc$44527$abc$36642$abc$25838$auto$opt_dff.cc:194:make_patterns_logic$1940, arst={ }, srst=\reset
  258 cells in clk=\clk, en=$abc$44538$abc$36653$abc$25852$auto$opt_dff.cc:219:make_patterns_logic$2001, arst={ }, srst=!$abc$49442$lo3
  2067 cells in clk=\clk, en=$abc$44796$abc$32526$abc$21565$auto$opt_dff.cc:219:make_patterns_logic$1755, arst={ }, srst={ }
  1276 cells in clk=\clk, en=!$abc$49442$lo3, arst={ }, srst=\reset
  32 cells in clk=\clk, en=$abc$48042$abc$34326$abc$25757$auto$opt_dff.cc:219:make_patterns_logic$1958, arst={ }, srst=!$abc$44527$lo0
  305 cells in clk=\clk, en={ }, arst={ }, srst=\reset
  3 cells in clk=\clk, en=$abc$49611$abc$40929$abc$28762$auto$opt_dff.cc:219:make_patterns_logic$2161, arst={ }, srst=!$abc$49442$lo2
  2143 cells in clk=\clk, en=$abc$42481$abc$30726$abc$19059$auto$opt_dff.cc:219:make_patterns_logic$1725, arst={ }, srst={ }
  210 cells in clk=\clk, en=$abc$49616$abc$40780$abc$28518$auto$opt_dff.cc:219:make_patterns_logic$2152, arst={ }, srst=\reset
  3 cells in clk=\clk, en=$abc$49789$abc$40934$abc$28768$auto$opt_dff.cc:194:make_patterns_logic$2148, arst={ }, srst=\reset
  1470 cells in clk=\clk, en=$abc$48073$abc$38112$abc$26110$auto$opt_dff.cc:219:make_patterns_logic$1740, arst={ }, srst=!$abc$46797$lo0
  691 cells in clk=\clk, en=$abc$49795$abc$39498$abc$27163$auto$opt_dff.cc:219:make_patterns_logic$2022, arst={ }, srst=\reset
  1509 cells in clk=\clk, en=$abc$51100$abc$34407$abc$23979$auto$opt_dff.cc:219:make_patterns_logic$1974, arst={ }, srst={ }
  1456 cells in clk=\clk, en=$abc$52968$abc$41038$abc$28872$auto$opt_dff.cc:219:make_patterns_logic$1710, arst={ }, srst={ }

3.73.2. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$42290$abc$40940$abc$28774$auto$opt_dff.cc:219:make_patterns_logic$2180, synchronously reset by \reset
Extracted 128 gates and 261 wires to a netlist network with 133 inputs and 33 outputs.

3.73.2.1. Executing ABC.

3.73.3. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$44479$abc$34358$abc$25788$auto$opt_dff.cc:219:make_patterns_logic$1986, synchronously reset by \reset
Extracted 11 gates and 19 wires to a netlist network with 8 inputs and 8 outputs.

3.73.3.1. Executing ABC.

3.73.4. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$44491$abc$34373$abc$25797$auto$opt_dff.cc:219:make_patterns_logic$2010, synchronously reset by !$abc$44527$lo0
Extracted 35 gates and 38 wires to a netlist network with 3 inputs and 8 outputs.

3.73.4.1. Executing ABC.

3.73.5. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$44527$abc$36642$abc$25838$auto$opt_dff.cc:194:make_patterns_logic$1940, synchronously reset by \reset
Extracted 8 gates and 15 wires to a netlist network with 7 inputs and 8 outputs.

3.73.5.1. Executing ABC.

3.73.6. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$44538$abc$36653$abc$25852$auto$opt_dff.cc:219:make_patterns_logic$2001, synchronously reset by !$abc$49442$lo3
Extracted 258 gates and 263 wires to a netlist network with 5 inputs and 66 outputs.

3.73.6.1. Executing ABC.

3.73.7. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$44796$abc$32526$abc$21565$auto$opt_dff.cc:219:make_patterns_logic$1755
Extracted 1984 gates and 2995 wires to a netlist network with 1011 inputs and 1026 outputs.

3.73.7.1. Executing ABC.

3.73.8. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by !$abc$49442$lo3, synchronously reset by \reset
Extracted 1270 gates and 2339 wires to a netlist network with 1069 inputs and 835 outputs.

3.73.8.1. Executing ABC.

3.73.9. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$48042$abc$34326$abc$25757$auto$opt_dff.cc:219:make_patterns_logic$1958, synchronously reset by !$abc$54490$lo0
Extracted 32 gates and 39 wires to a netlist network with 7 inputs and 7 outputs.

3.73.9.1. Executing ABC.

3.73.10. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, synchronously reset by \reset
Extracted 298 gates and 786 wires to a netlist network with 488 inputs and 258 outputs.

3.73.10.1. Executing ABC.

3.73.11. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$49611$abc$40929$abc$28762$auto$opt_dff.cc:219:make_patterns_logic$2161, synchronously reset by !$abc$58099$lo2
Extracted 3 gates and 6 wires to a netlist network with 3 inputs and 2 outputs.

3.73.11.1. Executing ABC.

3.73.12. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$42481$abc$30726$abc$19059$auto$opt_dff.cc:219:make_patterns_logic$1725
Extracted 1844 gates and 2764 wires to a netlist network with 920 inputs and 959 outputs.

3.73.12.1. Executing ABC.

3.73.13. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$49616$abc$40780$abc$28518$auto$opt_dff.cc:219:make_patterns_logic$2152, synchronously reset by \reset
Extracted 210 gates and 541 wires to a netlist network with 331 inputs and 143 outputs.

3.73.13.1. Executing ABC.

3.73.14. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$49789$abc$40934$abc$28768$auto$opt_dff.cc:194:make_patterns_logic$2148, synchronously reset by \reset
Extracted 3 gates and 7 wires to a netlist network with 4 inputs and 3 outputs.

3.73.14.1. Executing ABC.

3.73.15. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$48073$abc$38112$abc$26110$auto$opt_dff.cc:219:make_patterns_logic$1740, synchronously reset by !$abc$56793$lo0
Extracted 1176 gates and 1566 wires to a netlist network with 390 inputs and 241 outputs.

3.73.15.1. Executing ABC.

3.73.16. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$49795$abc$39498$abc$27163$auto$opt_dff.cc:219:make_patterns_logic$2022, synchronously reset by \reset
Extracted 691 gates and 1206 wires to a netlist network with 515 inputs and 335 outputs.

3.73.16.1. Executing ABC.

3.73.17. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$51100$abc$34407$abc$23979$auto$opt_dff.cc:219:make_patterns_logic$1974
Extracted 1008 gates and 1882 wires to a netlist network with 874 inputs and 808 outputs.

3.73.17.1. Executing ABC.

3.73.18. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$52968$abc$41038$abc$28872$auto$opt_dff.cc:219:make_patterns_logic$1710
Extracted 1110 gates and 1658 wires to a netlist network with 548 inputs and 267 outputs.

3.73.18.1. Executing ABC.

yosys> opt_ffinv

3.74. Executing OPT_FFINV pass (push inverters through FFs).
Discovering LUTs.
Pushed 0 inverters.

yosys> opt -sat

3.75. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.75.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module salsaa.
<suppressed ~163 debug messages>

yosys> opt_merge -nomux

3.75.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\salsaa'.
<suppressed ~12 debug messages>
Removed a total of 4 cells.

yosys> opt_muxtree

3.75.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \salsaa..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.75.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \salsaa.
Performed a total of 0 changes.

yosys> opt_merge

3.75.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\salsaa'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.75.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.75.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \salsaa..
Removed 0 unused cells and 62502 unused wires.
<suppressed ~22 debug messages>

yosys> opt_expr

3.75.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module salsaa.
<suppressed ~1 debug messages>

3.75.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.75.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \salsaa..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.75.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \salsaa.
Performed a total of 0 changes.

yosys> opt_merge

3.75.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\salsaa'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.75.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.75.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \salsaa..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.75.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module salsaa.

3.75.16. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.75.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \salsaa..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.75.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \salsaa.
Performed a total of 0 changes.

yosys> opt_merge

3.75.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\salsaa'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.75.20. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.75.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \salsaa..

yosys> opt_expr

3.75.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module salsaa.

3.75.23. Finished OPT passes. (There is nothing left to do.)

yosys> bmuxmap

3.76. Executing BMUXMAP pass.

yosys> demuxmap

3.77. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> abc -script /home/users/temp_dir/yosys_4TiYb7/abc_tmp_1.scr

3.78. Executing ABC pass (technology mapping using ABC).

3.78.1. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Extracted 8378 gates and 11817 wires to a netlist network with 3439 inputs and 2656 outputs.

3.78.1.1. Executing ABC.
DE:   #PIs = 3439  #Luts =  3299  Max Lvl =  30  Avg Lvl =   1.82  [   0.72 sec. at Pass 0]
DE:   #PIs = 3439  #Luts =  2911  Max Lvl =   8  Avg Lvl =   1.51  [  14.49 sec. at Pass 1]
DE:   #PIs = 3439  #Luts =  2911  Max Lvl =   8  Avg Lvl =   1.51  [   4.57 sec. at Pass 2]
DE:   #PIs = 3439  #Luts =  2911  Max Lvl =   8  Avg Lvl =   1.51  [   3.74 sec. at Pass 3]
DE:   #PIs = 3439  #Luts =  2909  Max Lvl =   8  Avg Lvl =   1.72  [   4.12 sec. at Pass 4]
DE:   #PIs = 3439  #Luts =  2907  Max Lvl =  10  Avg Lvl =   1.54  [   4.35 sec. at Pass 5]
DE:   #PIs = 3439  #Luts =  2907  Max Lvl =  10  Avg Lvl =   1.54  [   3.87 sec. at Pass 6]
DE:   #PIs = 3439  #Luts =  2907  Max Lvl =  10  Avg Lvl =   1.54  [   3.59 sec. at Pass 7]
DE:   #PIs = 3439  #Luts =  2906  Max Lvl =  10  Avg Lvl =   1.53  [   4.43 sec. at Pass 8]
DE:   #PIs = 3439  #Luts =  2906  Max Lvl =  10  Avg Lvl =   1.53  [   4.25 sec. at Pass 9]
DE:   #PIs = 3439  #Luts =  2906  Max Lvl =  10  Avg Lvl =   1.53  [   4.25 sec. at Pass 10]
DE:   #PIs = 3439  #Luts =  2906  Max Lvl =  10  Avg Lvl =   1.53  [   5.61 sec. at Pass 11]
DE:   #PIs = 3439  #Luts =  2906  Max Lvl =  10  Avg Lvl =   1.53  [   1.10 sec. at Pass 12]

yosys> opt_expr

3.79. Executing OPT_EXPR pass (perform const folding).
Optimizing module salsaa.

yosys> opt_merge -nomux

3.80. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\salsaa'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.81. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \salsaa..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.82. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \salsaa.
Performed a total of 0 changes.

yosys> opt_merge

3.83. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\salsaa'.
Removed a total of 0 cells.

yosys> opt_share

3.84. Executing OPT_SHARE pass.

yosys> opt_dff

3.85. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.86. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \salsaa..
Removed 0 unused cells and 11759 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.87. Executing OPT_EXPR pass (perform const folding).
Optimizing module salsaa.
MAX OPT ITERATION = 1

yosys> opt_ffinv

3.88. Executing OPT_FFINV pass (push inverters through FFs).
Discovering LUTs.
Pushed 1 inverters.

yosys> stat

3.89. Printing statistics.

=== salsaa ===

   Number of wires:               2422
   Number of wire bits:          10119
   Number of public wires:          45
   Number of public wire bits:    3230
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               6103
     $_DFFE_PP_                    896
     $_SDFFE_PN0P_                 208
     $_SDFFE_PN1P_                   1
     $_SDFFE_PP0N_                   1
     $_SDFFE_PP0P_                 551
     $_SDFF_PP0_                     4
     $lut                         2906
     adder_carry                  1536


yosys> shregmap -minlen 8 -maxlen 20

3.90. Executing SHREGMAP pass (map shift registers).
Converted 0 dff cells into 0 shift registers.

yosys> dfflegalize -cell $_DFF_?_ 0 -cell $_DFF_???_ 0 -cell $_DFFE_????_ 0 -cell $_DFFSR_???_ 0 -cell $_DFFSRE_????_ 0 -cell $_DLATCHSR_PPP_ 0

3.91. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

yosys> stat

3.92. Printing statistics.

=== salsaa ===

   Number of wires:               3950
   Number of wire bits:          11647
   Number of public wires:          45
   Number of public wire bits:    3230
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               7631
     $_DFFE_PP0P_                  896
     $_DFF_P_                      765
     $_MUX_                       1526
     $_NOT_                          2
     $lut                         2906
     adder_carry                  1536


yosys> techmap -map +/techmap.v -map +/rapidsilicon/genesis/ffs_map.v

3.93. Executing TECHMAP pass (map to technology primitives).

3.93.1. Executing Verilog-2005 frontend: /home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.93.2. Executing Verilog-2005 frontend: /home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/ffs_map.v
Parsing Verilog input from `/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/ffs_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP0N_'.
Generating RTLIL representation for module `\$_DFFE_PN0P_'.
Generating RTLIL representation for module `\$_DFFE_PN0N_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP1N_'.
Generating RTLIL representation for module `\$_DFFE_PN1P_'.
Generating RTLIL representation for module `\$_DFFE_PN1N_'.
Generating RTLIL representation for module `\$_DFFSR_PPP_'.
Generating RTLIL representation for module `\$_DFFSR_PNP_'.
Generating RTLIL representation for module `\$_DFFSR_PNN_'.
Generating RTLIL representation for module `\$_DFFSR_PPN_'.
Generating RTLIL representation for module `\$_DFFSR_NPP_'.
Generating RTLIL representation for module `\$_DFFSR_NNP_'.
Generating RTLIL representation for module `\$_DFFSR_NNN_'.
Generating RTLIL representation for module `\$_DFFSR_NPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PNPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPNP_'.
Generating RTLIL representation for module `\$_DFFSRE_PNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PNPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PPNN_'.
Generating RTLIL representation for module `\$_DFFSRE_PNNN_'.
Generating RTLIL representation for module `\$_DLATCHSR_PPP_'.
Generating RTLIL representation for module `\$_DLATCHSR_NPP_'.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP0N_'.
Generating RTLIL representation for module `\$_DFFE_NN0P_'.
Generating RTLIL representation for module `\$_DFFE_NN0N_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_NP1N_'.
Generating RTLIL representation for module `\$_DFFE_NN1P_'.
Generating RTLIL representation for module `\$_DFFE_NN1N_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNPP_'.
Generating RTLIL representation for module `\$_DFFSRE_NPNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPN_'.
Generating RTLIL representation for module `\$_DFFSRE_NNPN_'.
Generating RTLIL representation for module `\$_DFFSRE_NPNN_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNN_'.
Generating RTLIL representation for module `\$__SHREG_DFF_P_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PN0_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NN0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFF_PN1_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_NN1_'.
Successfully finished Verilog frontend.

3.93.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $lut.
Using template \$_DFF_P_ for cells of type $_DFF_P_.
Using template \$_DFFE_PP0P_ for cells of type $_DFFE_PP0P_.
Using extmapper simplemap for cells of type $logic_not.
No more expansions possible.
<suppressed ~5599 debug messages>

yosys> opt_expr -mux_undef

3.94. Executing OPT_EXPR pass (perform const folding).
Optimizing module salsaa.
<suppressed ~36575 debug messages>

yosys> simplemap

3.95. Executing SIMPLEMAP pass (map simple cells to gate primitives).

yosys> opt_expr

3.96. Executing OPT_EXPR pass (perform const folding).
Optimizing module salsaa.

yosys> opt_merge

3.97. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\salsaa'.
<suppressed ~17442 debug messages>
Removed a total of 5814 cells.

yosys> opt_dff -nodffe -nosdff

3.98. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.99. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \salsaa..
Removed 0 unused cells and 13100 unused wires.
<suppressed ~1 debug messages>

yosys> opt -nodffe -nosdff

3.100. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.100.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module salsaa.
<suppressed ~1604 debug messages>

yosys> opt_merge -nomux

3.100.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\salsaa'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.100.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \salsaa..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.100.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \salsaa.
Performed a total of 0 changes.

yosys> opt_merge

3.100.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\salsaa'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.100.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.100.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \salsaa..
Removed 0 unused cells and 91 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.100.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module salsaa.

3.100.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.100.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \salsaa..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.100.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \salsaa.
Performed a total of 0 changes.

yosys> opt_merge

3.100.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\salsaa'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.100.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.100.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \salsaa..

yosys> opt_expr

3.100.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module salsaa.

3.100.16. Finished OPT passes. (There is nothing left to do.)

yosys> abc -script /home/users/temp_dir/yosys_4TiYb7/abc_tmp_2.scr

3.101. Executing ABC pass (technology mapping using ABC).

3.101.1. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Extracted 9415 gates and 12889 wires to a netlist network with 3472 inputs and 3158 outputs.

3.101.1.1. Executing ABC.
DE:   #PIs = 3472  #Luts =  3449  Max Lvl =  10  Avg Lvl =   1.63  [   0.79 sec. at Pass 0]
DE:   #PIs = 3472  #Luts =  3442  Max Lvl =   8  Avg Lvl =   1.68  [  19.78 sec. at Pass 1]
DE:   #PIs = 3472  #Luts =  3436  Max Lvl =   7  Avg Lvl =   1.60  [   5.81 sec. at Pass 2]
DE:   #PIs = 3472  #Luts =  3436  Max Lvl =   7  Avg Lvl =   1.60  [   8.17 sec. at Pass 3]
DE:   #PIs = 3472  #Luts =  3434  Max Lvl =   8  Avg Lvl =   1.59  [   8.16 sec. at Pass 4]
DE:   #PIs = 3472  #Luts =  3433  Max Lvl =   9  Avg Lvl =   1.61  [   8.56 sec. at Pass 5]
DE:   #PIs = 3472  #Luts =  3433  Max Lvl =   9  Avg Lvl =   1.61  [   8.53 sec. at Pass 6]
DE:   #PIs = 3472  #Luts =  3433  Max Lvl =   9  Avg Lvl =   1.61  [   9.30 sec. at Pass 7]
DE:   #PIs = 3472  #Luts =  3433  Max Lvl =   7  Avg Lvl =   1.59  [   7.95 sec. at Pass 8]
DE:   #PIs = 3472  #Luts =  3433  Max Lvl =   7  Avg Lvl =   1.59  [   8.59 sec. at Pass 9]
DE:   #PIs = 3472  #Luts =  3433  Max Lvl =   7  Avg Lvl =   1.59  [   7.17 sec. at Pass 10]
DE:   #PIs = 3472  #Luts =  3433  Max Lvl =   7  Avg Lvl =   1.59  [   7.01 sec. at Pass 11]
DE:   #PIs = 3472  #Luts =  3433  Max Lvl =   7  Avg Lvl =   1.59  [   1.71 sec. at Pass 12]

yosys> opt_expr

3.102. Executing OPT_EXPR pass (perform const folding).
Optimizing module salsaa.

yosys> opt_merge -nomux

3.103. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\salsaa'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.104. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \salsaa..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.105. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \salsaa.
Performed a total of 0 changes.

yosys> opt_merge

3.106. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\salsaa'.
Removed a total of 0 cells.

yosys> opt_share

3.107. Executing OPT_SHARE pass.

yosys> opt_dff

3.108. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.109. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \salsaa..
Removed 0 unused cells and 11622 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.110. Executing OPT_EXPR pass (perform const folding).
Optimizing module salsaa.
MAX OPT ITERATION = 1

yosys> hierarchy -check

3.111. Executing HIERARCHY pass (managing design hierarchy).

3.111.1. Analyzing design hierarchy..
Top module:  \salsaa

3.111.2. Analyzing design hierarchy..
Top module:  \salsaa
Removed 0 unused modules.

yosys> stat

3.112. Printing statistics.

=== salsaa ===

   Number of wires:               2949
   Number of wire bits:          10646
   Number of public wires:          45
   Number of public wire bits:    3230
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               6630
     $lut                         3433
     adder_carry                  1536
     dffsre                       1661


yosys> opt_clean -purge

3.113. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \salsaa..
Removed 0 unused cells and 19 unused wires.
<suppressed ~19 debug messages>

yosys> write_verilog -noattr -nohex synthesized.v

3.114. Executing Verilog backend.
Dumping module `\salsaa'.

End of script. Logfile hash: f5866d5748, CPU: user 60.63s system 1.41s, MEM: 148.86 MB peak
Yosys 0.18+10 (git sha1 7a7a25778, gcc 9.1.0 -fPIC -Os)
Time spent: 93% 6x abc (765 sec), 1% 38x opt_expr (15 sec), ...
real 269.28
user 723.14
sys 93.69
