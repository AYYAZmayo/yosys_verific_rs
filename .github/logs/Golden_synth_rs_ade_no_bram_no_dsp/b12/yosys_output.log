
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys-Verific 0.0.32
 Yosys 0.16+65 (git sha1 7987105a9, gcc 9.1.0 -fPIC -Os)


-- Executing script file `yosys.ys' --
echo on

yosys> plugin -i synth-rs

yosys> read -verific

yosys> read -incdir .

yosys> verific -vlog-incdir .

1. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Apr22_SW_Release, released at Thu Apr 28 20:08:21 2022.

yosys> verilog_defaults -add -I.

yosys> read -vhdl b12.vhd

yosys> verific -vhdl b12.vhd

2. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Apr22_SW_Release, released at Thu Apr 28 20:08:21 2022.
VERIFIC-INFO [VHDL-1504] default VHDL library search path is now "/home/users/meri/Documents/workspace/de-issue/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008"
VERIFIC-COMMENT [VHDL-1481] Analyzing VHDL file 'b12.vhd'
VERIFIC-COMMENT [VHDL-1493] Restoring VHDL unit 'std.standard' from file '/home/users/meri/Documents/workspace/de-issue/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008/std/standard.vdb'
VERIFIC-INFO [VHDL-1012] b12.vhd:1: analyzing entity 'b12'
VERIFIC-INFO [VHDL-1010] b12.vhd:12: analyzing architecture 'behav'

yosys> synth_rs -top b12 -tech genesis -goal area -de -no_dsp -no_bram -verilog synthesized.v

3. Executing synth_rs pass: v0.4.50

yosys> read_verilog -lib -specify -nomem2reg +/rapidsilicon/common/cells_sim.v +/rapidsilicon/genesis/cells_sim.v

3.1. Executing Verilog-2005 frontend: /home/users/meri/Documents/workspace/de-issue/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v
Parsing Verilog input from `/home/users/meri/Documents/workspace/de-issue/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\inv'.
Generating RTLIL representation for module `\buff'.
Generating RTLIL representation for module `\logic_0'.
Generating RTLIL representation for module `\logic_1'.
Generating RTLIL representation for module `\gclkbuff'.
Successfully finished Verilog frontend.

3.2. Executing Verilog-2005 frontend: /home/users/meri/Documents/workspace/de-issue/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/cells_sim.v
Parsing Verilog input from `/home/users/meri/Documents/workspace/de-issue/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\dffsre'.
Generating RTLIL representation for module `\dffnsre'.
Generating RTLIL representation for module `\latchsre'.
Generating RTLIL representation for module `\latchnsre'.
Generating RTLIL representation for module `\io_scff'.
Generating RTLIL representation for module `\scff'.
Generating RTLIL representation for module `\sh_dff'.
Generating RTLIL representation for module `\adder_carry'.
Generating RTLIL representation for module `\sdffr'.
Generating RTLIL representation for module `\sdffs'.
Generating RTLIL representation for module `\TDP_BRAM18'.
Generating RTLIL representation for module `\TDP36K'.
Generating RTLIL representation for module `\RS_DSP1'.
Generating RTLIL representation for module `\RS_DSP2'.
Generating RTLIL representation for module `\dsp_t1_sim'.
Generating RTLIL representation for module `\dsp_t1_20x18x64'.
Generating RTLIL representation for module `\dsp_t1_10x9x32'.
Successfully finished Verilog frontend.

yosys> hierarchy -check -top b12

3.3. Executing HIERARCHY pass (managing design hierarchy).
VERIFIC-INFO [VHDL-1067] b12.vhd:1: processing 'b12(BEHAV)'
Importing module b12.

3.3.1. Analyzing design hierarchy..
Top module:  \b12

3.3.2. Analyzing design hierarchy..
Top module:  \b12
Removed 0 unused modules.

yosys> proc

3.4. Executing PROC pass (convert processes to netlists).

yosys> proc_clean

3.4.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> proc_rmdead

3.4.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

yosys> proc_prune

3.4.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

yosys> proc_init

3.4.4. Executing PROC_INIT pass (extract init attributes).

yosys> proc_arst

3.4.5. Executing PROC_ARST pass (detect async resets in processes).

yosys> proc_mux

3.4.6. Executing PROC_MUX pass (convert decision trees to multiplexers).

yosys> proc_dlatch

3.4.7. Executing PROC_DLATCH pass (convert process syncs to latches).

yosys> proc_dff

3.4.8. Executing PROC_DFF pass (convert process syncs to FFs).

yosys> proc_memwr

3.4.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

yosys> proc_clean

3.4.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> opt_expr -keepdc

3.4.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.
<suppressed ~9 debug messages>

yosys> flatten

3.5. Executing FLATTEN pass (flatten design).

yosys> tribuf -logic

3.6. Executing TRIBUF pass.

yosys> deminout

3.7. Executing DEMINOUT pass (demote inout ports to input or output).

yosys> opt_expr

3.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.

yosys> opt_clean

3.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..
Removed 0 unused cells and 46 unused wires.
<suppressed ~19 debug messages>

yosys> check

3.10. Executing CHECK pass (checking for obvious problems).
Checking module b12...
Found and reported 0 problems.

yosys> opt -nodffe -nosdff

3.11. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.

yosys> opt_merge -nomux

3.11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

yosys> opt_muxtree

3.11.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~76 debug messages>

yosys> opt_reduce

3.11.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

yosys> opt_merge

3.11.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.11.6. Executing OPT_DFF pass (perform DFF optimizations).
Changing const-value async load to async reset on $verific$wr_reg$b12.vhd:564$542 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$timebase_reg$b12.vhd:564$546 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$speaker_reg$b12.vhd:144$304 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$sound_reg$b12.vhd:564$548 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$scan_reg$b12.vhd:564$543 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$s_reg$b12.vhd:144$303 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$play_reg$b12.vhd:564$541 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$nloss_reg$b12.vhd:564$539 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$nl_reg$b12.vhd:564$540 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_9$b12.vhd:184$391 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_8$b12.vhd:184$390 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_7$b12.vhd:184$389 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_6$b12.vhd:184$388 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_5$b12.vhd:184$387 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_4$b12.vhd:184$386 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_32$b12.vhd:184$414 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_31$b12.vhd:184$413 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_30$b12.vhd:184$412 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_3$b12.vhd:184$385 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_29$b12.vhd:184$411 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_28$b12.vhd:184$410 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_27$b12.vhd:184$409 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_26$b12.vhd:184$408 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_25$b12.vhd:184$407 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_24$b12.vhd:184$406 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_23$b12.vhd:184$405 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_22$b12.vhd:184$404 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_21$b12.vhd:184$403 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_20$b12.vhd:184$402 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_2$b12.vhd:184$384 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_19$b12.vhd:184$401 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_18$b12.vhd:184$400 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_17$b12.vhd:184$399 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_16$b12.vhd:184$398 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_15$b12.vhd:184$397 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_14$b12.vhd:184$396 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_13$b12.vhd:184$395 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_12$b12.vhd:184$394 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_11$b12.vhd:184$393 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_10$b12.vhd:184$392 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg$b12.vhd:184$415 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$max_reg$b12.vhd:564$544 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$ind_reg$b12.vhd:564$545 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$gamma_reg$b12.vhd:564$551 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$data_out_reg$b12.vhd:184$383 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$data_in_reg$b12.vhd:564$550 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$counter_reg$b12.vhd:144$305 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$count_reg_2$b12.vhd:164$311 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$count_reg$b12.vhd:564$547 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$address_reg$b12.vhd:564$549 ($aldff) from module b12.

yosys> opt_clean

3.11.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..

yosys> opt_expr

3.11.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.

3.11.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.11.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~76 debug messages>

yosys> opt_reduce

3.11.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

yosys> opt_merge

3.11.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.11.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.11.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..

yosys> opt_expr

3.11.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.

3.11.16. Finished OPT passes. (There is nothing left to do.)

yosys> fsm -encoding binary

3.12. Executing FSM pass (extract and optimize FSM).

yosys> fsm_detect

3.12.1. Executing FSM_DETECT pass (finding FSMs in design).

yosys> fsm_extract

3.12.2. Executing FSM_EXTRACT pass (extracting FSM from design).

yosys> fsm_opt

3.12.3. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> opt_clean

3.12.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..

yosys> fsm_opt

3.12.5. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> fsm_recode -encoding binary

3.12.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

yosys> fsm_info

3.12.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

yosys> fsm_map

3.12.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

yosys> opt -sat

3.13. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.

yosys> opt_merge -nomux

3.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~76 debug messages>

yosys> opt_reduce

3.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

yosys> opt_merge

3.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.13.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $verific$s_reg$b12.vhd:144$303 ($adff) from module b12 (D = $verific$n125$27, Q = \s).
Adding EN signal on $verific$memory_reg_9$b12.vhd:184$391 ($adff) from module b12 (D = \data_in, Q = \memory[24]).
Adding EN signal on $verific$memory_reg_8$b12.vhd:184$390 ($adff) from module b12 (D = \data_in, Q = \memory[25]).
Adding EN signal on $verific$memory_reg_7$b12.vhd:184$389 ($adff) from module b12 (D = \data_in, Q = \memory[26]).
Adding EN signal on $verific$memory_reg_6$b12.vhd:184$388 ($adff) from module b12 (D = \data_in, Q = \memory[27]).
Adding EN signal on $verific$memory_reg_5$b12.vhd:184$387 ($adff) from module b12 (D = \data_in, Q = \memory[28]).
Adding EN signal on $verific$memory_reg_4$b12.vhd:184$386 ($adff) from module b12 (D = \data_in, Q = \memory[29]).
Adding EN signal on $verific$memory_reg_32$b12.vhd:184$414 ($adff) from module b12 (D = \data_in, Q = \memory[1]).
Adding EN signal on $verific$memory_reg_31$b12.vhd:184$413 ($adff) from module b12 (D = \data_in, Q = \memory[2]).
Adding EN signal on $verific$memory_reg_30$b12.vhd:184$412 ($adff) from module b12 (D = \data_in, Q = \memory[3]).
Adding EN signal on $verific$memory_reg_3$b12.vhd:184$385 ($adff) from module b12 (D = \data_in, Q = \memory[30]).
Adding EN signal on $verific$memory_reg_29$b12.vhd:184$411 ($adff) from module b12 (D = \data_in, Q = \memory[4]).
Adding EN signal on $verific$memory_reg_28$b12.vhd:184$410 ($adff) from module b12 (D = \data_in, Q = \memory[5]).
Adding EN signal on $verific$memory_reg_27$b12.vhd:184$409 ($adff) from module b12 (D = \data_in, Q = \memory[6]).
Adding EN signal on $verific$memory_reg_26$b12.vhd:184$408 ($adff) from module b12 (D = \data_in, Q = \memory[7]).
Adding EN signal on $verific$memory_reg_25$b12.vhd:184$407 ($adff) from module b12 (D = \data_in, Q = \memory[8]).
Adding EN signal on $verific$memory_reg_24$b12.vhd:184$406 ($adff) from module b12 (D = \data_in, Q = \memory[9]).
Adding EN signal on $verific$memory_reg_23$b12.vhd:184$405 ($adff) from module b12 (D = \data_in, Q = \memory[10]).
Adding EN signal on $verific$memory_reg_22$b12.vhd:184$404 ($adff) from module b12 (D = \data_in, Q = \memory[11]).
Adding EN signal on $verific$memory_reg_21$b12.vhd:184$403 ($adff) from module b12 (D = \data_in, Q = \memory[12]).
Adding EN signal on $verific$memory_reg_20$b12.vhd:184$402 ($adff) from module b12 (D = \data_in, Q = \memory[13]).
Adding EN signal on $verific$memory_reg_2$b12.vhd:184$384 ($adff) from module b12 (D = \data_in, Q = \memory[31]).
Adding EN signal on $verific$memory_reg_19$b12.vhd:184$401 ($adff) from module b12 (D = \data_in, Q = \memory[14]).
Adding EN signal on $verific$memory_reg_18$b12.vhd:184$400 ($adff) from module b12 (D = \data_in, Q = \memory[15]).
Adding EN signal on $verific$memory_reg_17$b12.vhd:184$399 ($adff) from module b12 (D = \data_in, Q = \memory[16]).
Adding EN signal on $verific$memory_reg_16$b12.vhd:184$398 ($adff) from module b12 (D = \data_in, Q = \memory[17]).
Adding EN signal on $verific$memory_reg_15$b12.vhd:184$397 ($adff) from module b12 (D = \data_in, Q = \memory[18]).
Adding EN signal on $verific$memory_reg_14$b12.vhd:184$396 ($adff) from module b12 (D = \data_in, Q = \memory[19]).
Adding EN signal on $verific$memory_reg_13$b12.vhd:184$395 ($adff) from module b12 (D = \data_in, Q = \memory[20]).
Adding EN signal on $verific$memory_reg_12$b12.vhd:184$394 ($adff) from module b12 (D = \data_in, Q = \memory[21]).
Adding EN signal on $verific$memory_reg_11$b12.vhd:184$393 ($adff) from module b12 (D = \data_in, Q = \memory[22]).
Adding EN signal on $verific$memory_reg_10$b12.vhd:184$392 ($adff) from module b12 (D = \data_in, Q = \memory[23]).
Adding EN signal on $verific$memory_reg$b12.vhd:184$415 ($adff) from module b12 (D = \data_in, Q = \memory[0]).

yosys> opt_clean

3.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..
Removed 65 unused cells and 65 unused wires.
<suppressed ~66 debug messages>

yosys> opt_expr

3.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.

3.13.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.13.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~43 debug messages>

yosys> opt_reduce

3.13.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

yosys> opt_merge

3.13.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.13.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.13.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..

yosys> opt_expr

3.13.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.

3.13.16. Finished OPT passes. (There is nothing left to do.)

yosys> wreduce -keepdc

3.14. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 3) from port A of cell b12.$verific$LessThan_4$b12.vhd:80$267 ($lt).
Removed top 2 bits (of 3) from port B of cell b12.$verific$add_8$b12.vhd:85$271 ($add).
Removed top 1 bits (of 4) from port Y of cell b12.$verific$add_8$b12.vhd:85$271 ($add).
Removed top 1 bits (of 3) from port A of cell b12.$verific$LessThan_13$b12.vhd:88$277 ($lt).
Removed top 2 bits (of 3) from port A of cell b12.$verific$LessThan_49$b12.vhd:125$293 ($lt).
Removed top 1 bits (of 2) from port B of cell b12.$verific$add_69$b12.vhd:159$308 ($add).
Removed top 31 bits (of 32) from port A of cell b12.$verific$Decoder_79$b12.vhd:182$318 ($shl).
Removed top 3 bits (of 4) from port A of cell b12.$verific$Decoder_195$b12.vhd:284$420 ($shl).
Removed top 1 bits (of 7) from port A of cell b12.$verific$sub_207$b12.vhd:298$427 ($sub).
Removed top 6 bits (of 7) from port B of cell b12.$verific$sub_207$b12.vhd:298$427 ($sub).
Removed top 1 bits (of 7) from port Y of cell b12.$verific$sub_207$b12.vhd:298$427 ($sub).
Removed top 4 bits (of 5) from port B of cell b12.$verific$add_215$b12.vhd:306$432 ($add).
Removed top 1 bits (of 6) from port Y of cell b12.$verific$add_215$b12.vhd:306$432 ($add).
Removed top 1 bits (of 2) from port A of cell b12.$verific$equal_239$b12.vhd:358$442 ($eq).
Removed top 1 bits (of 4) from mux cell b12.$verific$mux_273$b12.vhd:394$471 ($mux).
Removed top 1 bits (of 4) from mux cell b12.$verific$mux_274$b12.vhd:394$472 ($mux).
Removed top 1 bits (of 4) from mux cell b12.$verific$mux_275$b12.vhd:394$473 ($mux).
Removed top 1 bits (of 4) from mux cell b12.$verific$mux_276$b12.vhd:394$474 ($mux).
Removed top 3 bits (of 4) from port A of cell b12.$verific$Decoder_289$b12.vhd:400$482 ($shl).
Removed top 4 bits (of 5) from port B of cell b12.$verific$add_309$b12.vhd:423$488 ($add).
Removed top 1 bits (of 6) from port Y of cell b12.$verific$add_309$b12.vhd:423$488 ($add).
Removed top 1 bits (of 7) from port A of cell b12.$verific$sub_311$b12.vhd:424$491 ($sub).
Removed top 6 bits (of 7) from port B of cell b12.$verific$sub_311$b12.vhd:424$491 ($sub).
Removed top 1 bits (of 7) from port Y of cell b12.$verific$sub_311$b12.vhd:424$491 ($sub).
Removed top 2 bits (of 19) from mux cell b12.$verific$mux_503$b12.vhd:510$494 ($mux).
Removed top 1 bits (of 4) from wire b12.$verific$n1024$184.
Removed top 1 bits (of 4) from wire b12.$verific$n1073$186.
Removed top 1 bits (of 4) from wire b12.$verific$n1139$199.
Removed top 1 bits (of 4) from wire b12.$verific$n1144$200.
Removed top 1 bits (of 4) from wire b12.$verific$n1149$201.
Removed top 1 bits (of 4) from wire b12.$verific$n1154$202.
Removed top 1 bits (of 7) from wire b12.$verific$n1280$211.
Removed top 1 bits (of 5) from wire b12.$verific$n1336$215.
Removed top 3 bits (of 5) from wire b12.$verific$n1688$237.
Removed top 2 bits (of 5) from wire b12.$verific$n1733$242.
Removed top 4 bits (of 5) from wire b12.$verific$n1997$252.
Removed top 1 bits (of 7) from wire b12.$verific$n765$167.
Removed top 1 bits (of 4) from wire b12.$verific$n926$180.
Removed top 1 bits (of 4) from wire b12.$verific$n975$182.

yosys> peepopt

3.15. Executing PEEPOPT pass (run peephole optimizers).

yosys> pmuxtree

3.16. Executing PMUXTREE pass.

yosys> opt_clean

3.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..
Removed 0 unused cells and 19 unused wires.
<suppressed ~1 debug messages>

yosys> alumacc

3.18. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module b12:
  creating $macc model for $verific$add_215$b12.vhd:306$432 ($add).
  creating $macc model for $verific$add_309$b12.vhd:423$488 ($add).
  creating $macc model for $verific$add_69$b12.vhd:159$308 ($add).
  creating $macc model for $verific$add_8$b12.vhd:85$271 ($add).
  creating $macc model for $verific$sub_207$b12.vhd:298$427 ($sub).
  creating $macc model for $verific$sub_311$b12.vhd:424$491 ($sub).
  creating $alu model for $macc $verific$sub_311$b12.vhd:424$491.
  creating $alu model for $macc $verific$sub_207$b12.vhd:298$427.
  creating $alu model for $macc $verific$add_8$b12.vhd:85$271.
  creating $alu model for $macc $verific$add_69$b12.vhd:159$308.
  creating $alu model for $macc $verific$add_309$b12.vhd:423$488.
  creating $alu model for $macc $verific$add_215$b12.vhd:306$432.
  creating $alu model for $verific$LessThan_13$b12.vhd:88$277 ($lt): new $alu
  creating $alu model for $verific$LessThan_22$b12.vhd:98$281 ($lt): new $alu
  creating $alu model for $verific$LessThan_31$b12.vhd:107$285 ($lt): new $alu
  creating $alu model for $verific$LessThan_4$b12.vhd:80$267 ($lt): new $alu
  creating $alu model for $verific$LessThan_40$b12.vhd:116$289 ($lt): new $alu
  creating $alu model for $verific$LessThan_49$b12.vhd:125$293 ($lt): new $alu
  creating $alu cell for $verific$LessThan_40$b12.vhd:116$289: $auto$alumacc.cc:485:replace_alu$670
  creating $alu cell for $verific$LessThan_4$b12.vhd:80$267: $auto$alumacc.cc:485:replace_alu$675
  creating $alu cell for $verific$LessThan_31$b12.vhd:107$285: $auto$alumacc.cc:485:replace_alu$680
  creating $alu cell for $verific$LessThan_22$b12.vhd:98$281: $auto$alumacc.cc:485:replace_alu$685
  creating $alu cell for $verific$LessThan_13$b12.vhd:88$277: $auto$alumacc.cc:485:replace_alu$690
  creating $alu cell for $verific$add_215$b12.vhd:306$432: $auto$alumacc.cc:485:replace_alu$695
  creating $alu cell for $verific$add_309$b12.vhd:423$488: $auto$alumacc.cc:485:replace_alu$698
  creating $alu cell for $verific$add_69$b12.vhd:159$308: $auto$alumacc.cc:485:replace_alu$701
  creating $alu cell for $verific$LessThan_49$b12.vhd:125$293: $auto$alumacc.cc:485:replace_alu$704
  creating $alu cell for $verific$add_8$b12.vhd:85$271: $auto$alumacc.cc:485:replace_alu$709
  creating $alu cell for $verific$sub_207$b12.vhd:298$427: $auto$alumacc.cc:485:replace_alu$712
  creating $alu cell for $verific$sub_311$b12.vhd:424$491: $auto$alumacc.cc:485:replace_alu$715
  created 12 $alu and 0 $macc cells.

yosys> opt

3.19. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.
<suppressed ~18 debug messages>

yosys> opt_merge -nomux

3.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~43 debug messages>

yosys> opt_reduce

3.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

yosys> opt_merge

3.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_dff

3.19.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.19.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..
Removed 6 unused cells and 12 unused wires.
<suppressed ~7 debug messages>

yosys> opt_expr

3.19.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.

3.19.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.19.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~43 debug messages>

yosys> opt_reduce

3.19.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

yosys> opt_merge

3.19.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_dff

3.19.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.19.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..

yosys> opt_expr

3.19.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.

3.19.16. Finished OPT passes. (There is nothing left to do.)

yosys> stat

3.20. Printing statistics.

=== b12 ===

   Number of wires:                268
   Number of wire bits:            759
   Number of public wires:          56
   Number of public wire bits:     133
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                218
     $adff                          17
     $adffe                         33
     $alu                           12
     $bmux                          17
     $eq                             3
     $logic_not                      2
     $mux                           88
     $ne                             3
     $not                            8
     $reduce_and                    32
     $shl                            3


yosys> memory -nomap

3.21. Executing MEMORY pass.

yosys> opt_mem

3.21.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

yosys> opt_mem_priority

3.21.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

yosys> opt_mem_feedback

3.21.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

yosys> memory_dff

3.21.4. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

yosys> opt_clean

3.21.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..

yosys> memory_share

3.21.6. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

yosys> opt_mem_widen

3.21.7. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

yosys> opt_clean

3.21.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..

yosys> memory_collect

3.21.9. Executing MEMORY_COLLECT pass (generating $mem cells).

yosys> stat

3.22. Printing statistics.

=== b12 ===

   Number of wires:                268
   Number of wire bits:            759
   Number of public wires:          56
   Number of public wire bits:     133
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                218
     $adff                          17
     $adffe                         33
     $alu                           12
     $bmux                          17
     $eq                             3
     $logic_not                      2
     $mux                           88
     $ne                             3
     $not                            8
     $reduce_and                    32
     $shl                            3


yosys> opt_clean

3.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..

yosys> stat

3.24. Printing statistics.

=== b12 ===

   Number of wires:                268
   Number of wire bits:            759
   Number of public wires:          56
   Number of public wire bits:     133
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                218
     $adff                          17
     $adffe                         33
     $alu                           12
     $bmux                          17
     $eq                             3
     $logic_not                      2
     $mux                           88
     $ne                             3
     $not                            8
     $reduce_and                    32
     $shl                            3


yosys> techmap -map +/techmap.v -map +/rapidsilicon/genesis/arith_map.v

3.25. Executing TECHMAP pass (map to technology primitives).

3.25.1. Executing Verilog-2005 frontend: /home/users/meri/Documents/workspace/de-issue/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/meri/Documents/workspace/de-issue/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.25.2. Executing Verilog-2005 frontend: /home/users/meri/Documents/workspace/de-issue/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/arith_map.v
Parsing Verilog input from `/home/users/meri/Documents/workspace/de-issue/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_rs_alu'.
Successfully finished Verilog frontend.

3.25.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $reduce_and.
Using template $paramod$78e969f2586efcf3a5b0b0440bcca0db83d5cca2\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $not.
Using template $paramod$a04dd9d4d8b430140c4ff94b50470fb380fda2a0\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $mux.
Using template $paramod$672a140277c71df8314410f22acc08d55222c3c7\_90_alu for cells of type $alu.
Using template $paramod$79fc7abbb3333dbd5736999d565fd903198fb1eb\_90_alu for cells of type $alu.
Using template $paramod$3ef7d3dd227da7627a99c5e5a6a4deb817573e39\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $bmux.
Using extmapper simplemap for cells of type $adffe.
Using extmapper simplemap for cells of type $adff.
Using template $paramod$constmap:dbcddb7b4524c1c5fa25e15435f3b9049e3d7d7a$paramod$3bf4391c2edcd7fdc564361d03ba2cf3a33c67d4\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using template $paramod$constmap:66d421c313e4e958be776b99540ac2de3b59fdbc$paramod$77562a466236eb4a6d905351a0995599b75075cb\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $eq.
Using template $paramod$175e67c02b86e96b1288b9dc100122520d7240d8\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $and.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000011 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000110 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000101 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000010 for cells of type $lcu.
Using extmapper simplemap for cells of type $or.
No more expansions possible.
<suppressed ~2142 debug messages>

yosys> stat

3.26. Printing statistics.

=== b12 ===

   Number of wires:                788
   Number of wire bits:          22688
   Number of public wires:          56
   Number of public wire bits:     133
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               2460
     $_AND_                        134
     $_DFFE_PP0P_                   65
     $_DFF_PP0_                     54
     $_MUX_                       1950
     $_NOT_                         62
     $_OR_                          72
     $_XOR_                        123


yosys> opt

3.27. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.27.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.
<suppressed ~1084 debug messages>

yosys> opt_merge -nomux

3.27.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
<suppressed ~303 debug messages>
Removed a total of 101 cells.

yosys> opt_muxtree

3.27.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.27.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

yosys> opt_merge

3.27.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_dff

3.27.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $auto$ff.cc:262:slice$1010 ($_DFF_PP0_) from module b12 (D = $verific$n133$30, Q = \speaker).

yosys> opt_clean

3.27.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..
Removed 26 unused cells and 491 unused wires.
<suppressed ~27 debug messages>

yosys> opt_expr

3.27.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.
<suppressed ~34 debug messages>

3.27.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.27.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.27.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

yosys> opt_merge

3.27.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
<suppressed ~57 debug messages>
Removed a total of 19 cells.

yosys> opt_dff

3.27.13. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $auto$ff.cc:262:slice$1025 ($_DFFE_PP0P_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$968, Q = \s).
Adding EN signal on $auto$ff.cc:262:slice$3475 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$3076 [1], Q = \data_in [1]).
Adding EN signal on $auto$ff.cc:262:slice$3474 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$3076 [0], Q = \data_in [0]).
Adding EN signal on $auto$ff.cc:262:slice$3473 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$3006 [4], Q = \address [4]).
Adding EN signal on $auto$ff.cc:262:slice$3472 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$3006 [3], Q = \address [3]).
Adding EN signal on $auto$ff.cc:262:slice$3471 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$3006 [2], Q = \address [2]).
Adding EN signal on $auto$ff.cc:262:slice$3470 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$3006 [1], Q = \address [1]).
Adding EN signal on $auto$ff.cc:262:slice$3469 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$3006 [0], Q = \address [0]).
Adding EN signal on $auto$ff.cc:262:slice$3468 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$3364 [2], Q = \sound [2]).
Adding EN signal on $auto$ff.cc:262:slice$3467 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$3364 [1], Q = \sound [1]).
Adding EN signal on $auto$ff.cc:262:slice$3466 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$3364 [0], Q = \sound [0]).
Adding EN signal on $auto$ff.cc:262:slice$3465 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$3263 [5], Q = \count [5]).
Adding EN signal on $auto$ff.cc:262:slice$3464 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$3263 [4], Q = \count [4]).
Adding EN signal on $auto$ff.cc:262:slice$3463 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$3263 [3], Q = \count [3]).
Adding EN signal on $auto$ff.cc:262:slice$3462 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$3263 [2], Q = \count [2]).
Adding EN signal on $auto$ff.cc:262:slice$3461 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$3263 [1], Q = \count [1]).
Adding EN signal on $auto$ff.cc:262:slice$3460 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$3263 [0], Q = \count [0]).
Adding EN signal on $auto$ff.cc:262:slice$3459 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$2685 [5], Q = \timebase [5]).
Adding EN signal on $auto$ff.cc:262:slice$3458 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$2685 [4], Q = \timebase [4]).
Adding EN signal on $auto$ff.cc:262:slice$3457 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$2685 [3], Q = \timebase [3]).
Adding EN signal on $auto$ff.cc:262:slice$3456 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$2685 [2], Q = \timebase [2]).
Adding EN signal on $auto$ff.cc:262:slice$3455 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$2685 [1], Q = \timebase [1]).
Adding EN signal on $auto$ff.cc:262:slice$3454 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$2685 [0], Q = \timebase [0]).
Adding EN signal on $auto$ff.cc:262:slice$3453 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$3432 [1], Q = \ind [1]).
Adding EN signal on $auto$ff.cc:262:slice$3452 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$3432 [0], Q = \ind [0]).
Adding EN signal on $auto$ff.cc:262:slice$3451 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$2495 [4], Q = \max [4]).
Adding EN signal on $auto$ff.cc:262:slice$3450 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$2495 [3], Q = \max [3]).
Adding EN signal on $auto$ff.cc:262:slice$3449 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$2495 [2], Q = \max [2]).
Adding EN signal on $auto$ff.cc:262:slice$3448 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$2495 [1], Q = \max [1]).
Adding EN signal on $auto$ff.cc:262:slice$3447 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$2495 [0], Q = \max [0]).
Adding EN signal on $auto$ff.cc:262:slice$3446 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$2846 [4], Q = \scan [4]).
Adding EN signal on $auto$ff.cc:262:slice$3445 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$2846 [3], Q = \scan [3]).
Adding EN signal on $auto$ff.cc:262:slice$3444 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$2846 [2], Q = \scan [2]).
Adding EN signal on $auto$ff.cc:262:slice$3443 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$2846 [1], Q = \scan [1]).
Adding EN signal on $auto$ff.cc:262:slice$3442 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$2846 [0], Q = \scan [0]).
Adding EN signal on $auto$ff.cc:262:slice$3441 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$2339, Q = \wr).
Adding EN signal on $auto$ff.cc:262:slice$3440 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$2303, Q = \play).
Adding EN signal on $auto$ff.cc:262:slice$3439 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$2264 [3], Q = \nl [3]).
Adding EN signal on $auto$ff.cc:262:slice$3438 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$2264 [2], Q = \nl [2]).
Adding EN signal on $auto$ff.cc:262:slice$3437 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$2264 [1], Q = \nl [1]).
Adding EN signal on $auto$ff.cc:262:slice$3436 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$2264 [0], Q = \nl [0]).
Adding EN signal on $auto$ff.cc:262:slice$3435 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$2138, Q = \nloss).

yosys> opt_clean

3.27.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..
Removed 0 unused cells and 515 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.27.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.
<suppressed ~2289 debug messages>

3.27.16. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.27.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.27.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

yosys> opt_merge

3.27.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
<suppressed ~9105 debug messages>
Removed a total of 3035 cells.

yosys> opt_dff

3.27.20. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.27.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..
Removed 0 unused cells and 2592 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.27.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.

3.27.23. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.27.24. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.27.25. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

yosys> opt_merge

3.27.26. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_dff

3.27.27. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.27.28. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..

yosys> opt_expr

3.27.29. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.

3.27.30. Finished OPT passes. (There is nothing left to do.)

yosys> opt -fast -full

3.28. Executing OPT pass (performing simple optimizations).

yosys> opt_expr -full

3.28.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.
<suppressed ~497 debug messages>

yosys> opt_merge

3.28.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
<suppressed ~81 debug messages>
Removed a total of 27 cells.

yosys> opt_dff

3.28.3. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.28.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..
Removed 0 unused cells and 94 unused wires.
<suppressed ~1 debug messages>

3.28.5. Finished fast OPT passes.

yosys> memory_map

3.29. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

yosys> opt -full

3.30. Executing OPT pass (performing simple optimizations).

yosys> opt_expr -full

3.30.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.
<suppressed ~37 debug messages>

yosys> opt_merge -nomux

3.30.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
<suppressed ~18 debug messages>
Removed a total of 6 cells.

yosys> opt_muxtree

3.30.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce -full

3.30.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

yosys> opt_merge

3.30.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_share

3.30.6. Executing OPT_SHARE pass.
    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$2045 in front of them:
        $auto$simplemap.cc:312:simplemap_bmux$1984
        $auto$simplemap.cc:312:simplemap_bmux$1979

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$984 in front of them:
        $auto$simplemap.cc:278:simplemap_mux$928
        $auto$simplemap.cc:278:simplemap_mux$916

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$985 in front of them:
        $auto$simplemap.cc:278:simplemap_mux$929
        $auto$simplemap.cc:278:simplemap_mux$917

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$986 in front of them:
        $auto$simplemap.cc:278:simplemap_mux$930
        $auto$simplemap.cc:278:simplemap_mux$918

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$987 in front of them:
        $auto$simplemap.cc:278:simplemap_mux$957
        $auto$simplemap.cc:278:simplemap_mux$940

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$988 in front of them:
        $auto$simplemap.cc:278:simplemap_mux$958
        $auto$simplemap.cc:278:simplemap_mux$941

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$989 in front of them:
        $auto$simplemap.cc:278:simplemap_mux$959
        $auto$simplemap.cc:278:simplemap_mux$942


yosys> opt_dff

3.30.7. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.30.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..
Removed 0 unused cells and 6 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr -full

3.30.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.
<suppressed ~7 debug messages>

3.30.10. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.30.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~7 debug messages>

yosys> opt_reduce -full

3.30.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

yosys> opt_merge

3.30.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
<suppressed ~12 debug messages>
Removed a total of 4 cells.

yosys> opt_share

3.30.14. Executing OPT_SHARE pass.

yosys> opt_dff

3.30.15. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.30.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..
Removed 0 unused cells and 4 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr -full

3.30.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.

3.30.18. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.30.19. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

yosys> opt_reduce -full

3.30.20. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

yosys> opt_merge

3.30.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_share

3.30.22. Executing OPT_SHARE pass.

yosys> opt_dff

3.30.23. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.30.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..

yosys> opt_expr -full

3.30.25. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.

3.30.26. Finished OPT passes. (There is nothing left to do.)

yosys> techmap -map +/techmap.v

3.31. Executing TECHMAP pass (map to technology primitives).

3.31.1. Executing Verilog-2005 frontend: /home/users/meri/Documents/workspace/de-issue/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/meri/Documents/workspace/de-issue/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.31.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $mux.
No more expansions possible.
<suppressed ~74 debug messages>

yosys> opt -sat

3.32. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.32.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.

yosys> opt_merge -nomux

3.32.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.32.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.32.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

yosys> opt_merge

3.32.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.32.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.32.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..

yosys> opt_expr

3.32.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.

3.32.9. Finished OPT passes. (There is nothing left to do.)

yosys> abc -dff

3.33. Executing ABC pass (technology mapping using ABC).

3.33.1. Summary of detected clock domains:
  79 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$8798, arst=\reset, srst={ }
  33 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$8400, arst=\reset, srst={ }
  82 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$7316, arst=\reset, srst={ }
  136 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$6234, arst=\reset, srst={ }
  39 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$6044, arst=\reset, srst={ }
  65 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$5392, arst=\reset, srst={ }
  141 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$4544, arst=\reset, srst={ }
  9 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$4321, arst=\reset, srst={ }
  17 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$4233, arst=\reset, srst={ }
  22 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$4086, arst=\reset, srst={ }
  3 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$576, arst=\reset, srst={ }
  3 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$579, arst=\reset, srst={ }
  3 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$582, arst=\reset, srst={ }
  3 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$588, arst=\reset, srst={ }
  3 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$591, arst=\reset, srst={ }
  3 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$594, arst=\reset, srst={ }
  3 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$597, arst=\reset, srst={ }
  3 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$600, arst=\reset, srst={ }
  3 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$603, arst=\reset, srst={ }
  3 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$606, arst=\reset, srst={ }
  3 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$609, arst=\reset, srst={ }
  3 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$612, arst=\reset, srst={ }
  3 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$615, arst=\reset, srst={ }
  3 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$621, arst=\reset, srst={ }
  3 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$624, arst=\reset, srst={ }
  3 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$627, arst=\reset, srst={ }
  3 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$630, arst=\reset, srst={ }
  3 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$633, arst=\reset, srst={ }
  3 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$636, arst=\reset, srst={ }
  3 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$639, arst=\reset, srst={ }
  3 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$642, arst=\reset, srst={ }
  3 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$645, arst=\reset, srst={ }
  3 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$648, arst=\reset, srst={ }
  3 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$558, arst=\reset, srst={ }
  3 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$561, arst=\reset, srst={ }
  3 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$564, arst=\reset, srst={ }
  3 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$567, arst=\reset, srst={ }
  3 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$570, arst=\reset, srst={ }
  3 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$573, arst=\reset, srst={ }
  3 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$585, arst=\reset, srst={ }
  3 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$618, arst=\reset, srst={ }
  38 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$12199, arst=\reset, srst={ }
  85 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$11433, arst=\reset, srst={ }
  35 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$11259, arst=\reset, srst={ }
  15 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$10989, arst=\reset, srst={ }
  131 cells in clk=\clock, en={ }, arst=\reset, srst={ }
  58 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$10090, arst=\reset, srst={ }
  2 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$555, arst=\reset, srst={ }

3.33.2. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$8798, asynchronously reset by \reset
Extracted 79 gates and 114 wires to a netlist network with 35 inputs and 26 outputs.

3.33.2.1. Executing ABC.

3.33.3. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$8400, asynchronously reset by \reset
Extracted 33 gates and 51 wires to a netlist network with 17 inputs and 20 outputs.

3.33.3.1. Executing ABC.

3.33.4. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$7316, asynchronously reset by \reset
Extracted 82 gates and 112 wires to a netlist network with 29 inputs and 23 outputs.

3.33.4.1. Executing ABC.

3.33.5. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$6234, asynchronously reset by \reset
Extracted 136 gates and 175 wires to a netlist network with 38 inputs and 23 outputs.

3.33.5.1. Executing ABC.

3.33.6. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$6044, asynchronously reset by \reset
Extracted 39 gates and 74 wires to a netlist network with 34 inputs and 16 outputs.

3.33.6.1. Executing ABC.

3.33.7. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$5392, asynchronously reset by \reset
Extracted 65 gates and 101 wires to a netlist network with 34 inputs and 23 outputs.

3.33.7.1. Executing ABC.

3.33.8. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$4544, asynchronously reset by \reset
Extracted 141 gates and 224 wires to a netlist network with 82 inputs and 38 outputs.

3.33.8.1. Executing ABC.

3.33.9. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$4321, asynchronously reset by \reset
Extracted 9 gates and 19 wires to a netlist network with 10 inputs and 5 outputs.

3.33.9.1. Executing ABC.

3.33.10. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$4233, asynchronously reset by \reset
Extracted 17 gates and 30 wires to a netlist network with 13 inputs and 2 outputs.

3.33.10.1. Executing ABC.

3.33.11. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$4086, asynchronously reset by \reset
Extracted 22 gates and 38 wires to a netlist network with 16 inputs and 4 outputs.

3.33.11.1. Executing ABC.

3.33.12. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$576, asynchronously reset by \reset
Extracted 3 gates and 7 wires to a netlist network with 4 inputs and 3 outputs.

3.33.12.1. Executing ABC.

3.33.13. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$579, asynchronously reset by \reset
Extracted 3 gates and 7 wires to a netlist network with 4 inputs and 3 outputs.

3.33.13.1. Executing ABC.

3.33.14. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$582, asynchronously reset by \reset
Extracted 3 gates and 7 wires to a netlist network with 4 inputs and 3 outputs.

3.33.14.1. Executing ABC.

3.33.15. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$588, asynchronously reset by \reset
Extracted 3 gates and 7 wires to a netlist network with 4 inputs and 3 outputs.

3.33.15.1. Executing ABC.

3.33.16. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$591, asynchronously reset by \reset
Extracted 3 gates and 7 wires to a netlist network with 4 inputs and 3 outputs.

3.33.16.1. Executing ABC.

3.33.17. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$594, asynchronously reset by \reset
Extracted 3 gates and 7 wires to a netlist network with 4 inputs and 3 outputs.

3.33.17.1. Executing ABC.

3.33.18. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$597, asynchronously reset by \reset
Extracted 3 gates and 7 wires to a netlist network with 4 inputs and 3 outputs.

3.33.18.1. Executing ABC.

3.33.19. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$600, asynchronously reset by \reset
Extracted 3 gates and 7 wires to a netlist network with 4 inputs and 3 outputs.

3.33.19.1. Executing ABC.

3.33.20. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$603, asynchronously reset by \reset
Extracted 3 gates and 7 wires to a netlist network with 4 inputs and 3 outputs.

3.33.20.1. Executing ABC.

3.33.21. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$606, asynchronously reset by \reset
Extracted 3 gates and 7 wires to a netlist network with 4 inputs and 3 outputs.

3.33.21.1. Executing ABC.

3.33.22. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$609, asynchronously reset by \reset
Extracted 3 gates and 7 wires to a netlist network with 4 inputs and 3 outputs.

3.33.22.1. Executing ABC.

3.33.23. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$612, asynchronously reset by \reset
Extracted 3 gates and 7 wires to a netlist network with 4 inputs and 3 outputs.

3.33.23.1. Executing ABC.

3.33.24. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$615, asynchronously reset by \reset
Extracted 3 gates and 7 wires to a netlist network with 4 inputs and 3 outputs.

3.33.24.1. Executing ABC.

3.33.25. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$621, asynchronously reset by \reset
Extracted 3 gates and 7 wires to a netlist network with 4 inputs and 3 outputs.

3.33.25.1. Executing ABC.

3.33.26. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$624, asynchronously reset by \reset
Extracted 3 gates and 7 wires to a netlist network with 4 inputs and 3 outputs.

3.33.26.1. Executing ABC.

3.33.27. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$627, asynchronously reset by \reset
Extracted 3 gates and 7 wires to a netlist network with 4 inputs and 3 outputs.

3.33.27.1. Executing ABC.

3.33.28. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$630, asynchronously reset by \reset
Extracted 3 gates and 7 wires to a netlist network with 4 inputs and 3 outputs.

3.33.28.1. Executing ABC.

3.33.29. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$633, asynchronously reset by \reset
Extracted 3 gates and 7 wires to a netlist network with 4 inputs and 3 outputs.

3.33.29.1. Executing ABC.

3.33.30. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$636, asynchronously reset by \reset
Extracted 3 gates and 7 wires to a netlist network with 4 inputs and 3 outputs.

3.33.30.1. Executing ABC.

3.33.31. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$639, asynchronously reset by \reset
Extracted 3 gates and 7 wires to a netlist network with 4 inputs and 3 outputs.

3.33.31.1. Executing ABC.

3.33.32. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$642, asynchronously reset by \reset
Extracted 3 gates and 7 wires to a netlist network with 4 inputs and 3 outputs.

3.33.32.1. Executing ABC.

3.33.33. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$645, asynchronously reset by \reset
Extracted 3 gates and 7 wires to a netlist network with 4 inputs and 3 outputs.

3.33.33.1. Executing ABC.

3.33.34. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$648, asynchronously reset by \reset
Extracted 3 gates and 7 wires to a netlist network with 4 inputs and 3 outputs.

3.33.34.1. Executing ABC.

3.33.35. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$558, asynchronously reset by \reset
Extracted 3 gates and 7 wires to a netlist network with 4 inputs and 3 outputs.

3.33.35.1. Executing ABC.

3.33.36. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$561, asynchronously reset by \reset
Extracted 3 gates and 7 wires to a netlist network with 4 inputs and 3 outputs.

3.33.36.1. Executing ABC.

3.33.37. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$564, asynchronously reset by \reset
Extracted 3 gates and 7 wires to a netlist network with 4 inputs and 3 outputs.

3.33.37.1. Executing ABC.

3.33.38. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$567, asynchronously reset by \reset
Extracted 3 gates and 7 wires to a netlist network with 4 inputs and 3 outputs.

3.33.38.1. Executing ABC.

3.33.39. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$570, asynchronously reset by \reset
Extracted 3 gates and 7 wires to a netlist network with 4 inputs and 3 outputs.

3.33.39.1. Executing ABC.

3.33.40. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$573, asynchronously reset by \reset
Extracted 3 gates and 7 wires to a netlist network with 4 inputs and 3 outputs.

3.33.40.1. Executing ABC.

3.33.41. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$585, asynchronously reset by \reset
Extracted 3 gates and 7 wires to a netlist network with 4 inputs and 3 outputs.

3.33.41.1. Executing ABC.

3.33.42. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$618, asynchronously reset by \reset
Extracted 3 gates and 7 wires to a netlist network with 4 inputs and 3 outputs.

3.33.42.1. Executing ABC.

3.33.43. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$12199, asynchronously reset by \reset
Extracted 38 gates and 68 wires to a netlist network with 30 inputs and 4 outputs.

3.33.43.1. Executing ABC.

3.33.44. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$11433, asynchronously reset by \reset
Extracted 85 gates and 112 wires to a netlist network with 26 inputs and 13 outputs.

3.33.44.1. Executing ABC.

3.33.45. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$11259, asynchronously reset by \reset
Extracted 35 gates and 61 wires to a netlist network with 25 inputs and 10 outputs.

3.33.45.1. Executing ABC.

3.33.46. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$10989, asynchronously reset by \reset
Extracted 15 gates and 25 wires to a netlist network with 10 inputs and 12 outputs.

3.33.46.1. Executing ABC.

3.33.47. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, asynchronously reset by \reset
Extracted 131 gates and 159 wires to a netlist network with 26 inputs and 36 outputs.

3.33.47.1. Executing ABC.

3.33.48. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$10090, asynchronously reset by \reset
Extracted 58 gates and 84 wires to a netlist network with 26 inputs and 14 outputs.

3.33.48.1. Executing ABC.

3.33.49. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$15469$auto$opt_dff.cc:219:make_patterns_logic$555, asynchronously reset by \reset
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 2 outputs.

3.33.49.1. Executing ABC.

yosys> abc -dff

3.34. Executing ABC pass (technology mapping using ABC).

3.34.1. Summary of detected clock domains:
  5 cells in clk=\clock, en=$abc$15264$auto$opt_dff.cc:219:make_patterns_logic$570, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$15224$auto$opt_dff.cc:219:make_patterns_logic$648, arst=\reset, srst={ }
  38 cells in clk=\clock, en=$abc$15469$auto$opt_dff.cc:219:make_patterns_logic$10989, arst=\reset, srst={ }
  28 cells in clk=\clock, en=$abc$14662$auto$opt_dff.cc:219:make_patterns_logic$6044, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$15256$auto$opt_dff.cc:219:make_patterns_logic$567, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$15216$auto$opt_dff.cc:219:make_patterns_logic$645, arst=\reset, srst={ }
  37 cells in clk=\clock, en=$abc$15427$auto$opt_dff.cc:219:make_patterns_logic$11259, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$15200$auto$opt_dff.cc:219:make_patterns_logic$639, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$15232$auto$opt_dff.cc:219:make_patterns_logic$558, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$15272$auto$opt_dff.cc:219:make_patterns_logic$573, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$15176$auto$opt_dff.cc:219:make_patterns_logic$630, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$15168$auto$opt_dff.cc:219:make_patterns_logic$627, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$15160$auto$opt_dff.cc:219:make_patterns_logic$624, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$15152$auto$opt_dff.cc:219:make_patterns_logic$621, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$15144$auto$opt_dff.cc:219:make_patterns_logic$615, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$15192$auto$opt_dff.cc:219:make_patterns_logic$636, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$15248$auto$opt_dff.cc:219:make_patterns_logic$564, arst=\reset, srst={ }
  27 cells in clk=\clock, en=$abc$14367$auto$opt_dff.cc:219:make_patterns_logic$8400, arst=\reset, srst={ }
  54 cells in clk=\clock, en=$abc$14402$auto$opt_dff.cc:219:make_patterns_logic$7316, arst=\reset, srst={ }
  177 cells in clk=\clock, en={ }, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$15184$auto$opt_dff.cc:219:make_patterns_logic$633, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$15208$auto$opt_dff.cc:219:make_patterns_logic$642, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$15240$auto$opt_dff.cc:219:make_patterns_logic$561, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$15280$auto$opt_dff.cc:219:make_patterns_logic$585, arst=\reset, srst={ }
  37 cells in clk=\clock, en=$abc$15296$auto$opt_dff.cc:219:make_patterns_logic$12199, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$15136$auto$opt_dff.cc:219:make_patterns_logic$612, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$15128$auto$opt_dff.cc:219:make_patterns_logic$609, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$15120$auto$opt_dff.cc:219:make_patterns_logic$606, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$15112$auto$opt_dff.cc:219:make_patterns_logic$603, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$15104$auto$opt_dff.cc:219:make_patterns_logic$600, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$15096$auto$opt_dff.cc:219:make_patterns_logic$597, arst=\reset, srst={ }
  65 cells in clk=\clock, en=$abc$14296$auto$opt_dff.cc:219:make_patterns_logic$8798, arst=\reset, srst={ }
  21 cells in clk=\clock, en=$abc$15027$auto$opt_dff.cc:219:make_patterns_logic$4086, arst=\reset, srst={ }
  18 cells in clk=\clock, en=$abc$15010$auto$opt_dff.cc:219:make_patterns_logic$4233, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$15064$auto$opt_dff.cc:219:make_patterns_logic$582, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$15088$auto$opt_dff.cc:219:make_patterns_logic$594, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$15048$auto$opt_dff.cc:219:make_patterns_logic$576, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$15072$auto$opt_dff.cc:219:make_patterns_logic$588, arst=\reset, srst={ }
  58 cells in clk=\clock, en=$abc$14704$auto$opt_dff.cc:219:make_patterns_logic$5392, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$15056$auto$opt_dff.cc:219:make_patterns_logic$579, arst=\reset, srst={ }
  208 cells in clk=\clock, en=$abc$14457$auto$opt_dff.cc:219:make_patterns_logic$6234, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$15080$auto$opt_dff.cc:219:make_patterns_logic$591, arst=\reset, srst={ }
  15 cells in clk=\clock, en=$abc$14996$auto$opt_dff.cc:219:make_patterns_logic$4321, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$15288$auto$opt_dff.cc:219:make_patterns_logic$618, arst=\reset, srst={ }
  92 cells in clk=\clock, en=$abc$15332$auto$opt_dff.cc:219:make_patterns_logic$11433, arst=\reset, srst={ }
  150 cells in clk=\clock, en=$abc$14774$auto$opt_dff.cc:219:make_patterns_logic$4544, arst=\reset, srst={ }
  45 cells in clk=\clock, en=$abc$15657$auto$opt_dff.cc:219:make_patterns_logic$10090, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$15469$auto$opt_dff.cc:219:make_patterns_logic$555, arst=\reset, srst={ }

3.34.2. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$15264$auto$opt_dff.cc:219:make_patterns_logic$570, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.34.2.1. Executing ABC.

3.34.3. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$15224$auto$opt_dff.cc:219:make_patterns_logic$648, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.34.3.1. Executing ABC.

3.34.4. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$15469$auto$opt_dff.cc:219:make_patterns_logic$10989, asynchronously reset by \reset
Extracted 38 gates and 72 wires to a netlist network with 34 inputs and 34 outputs.

3.34.4.1. Executing ABC.

3.34.5. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$14662$auto$opt_dff.cc:219:make_patterns_logic$6044, asynchronously reset by \reset
Extracted 28 gates and 53 wires to a netlist network with 25 inputs and 7 outputs.

3.34.5.1. Executing ABC.

3.34.6. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$15256$auto$opt_dff.cc:219:make_patterns_logic$567, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.34.6.1. Executing ABC.

3.34.7. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$15733$abc$15216$auto$opt_dff.cc:219:make_patterns_logic$645, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.34.7.1. Executing ABC.

3.34.8. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$15427$auto$opt_dff.cc:219:make_patterns_logic$11259, asynchronously reset by \reset
Extracted 37 gates and 60 wires to a netlist network with 23 inputs and 8 outputs.

3.34.8.1. Executing ABC.

3.34.9. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$15200$auto$opt_dff.cc:219:make_patterns_logic$639, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.34.9.1. Executing ABC.

3.34.10. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$15232$auto$opt_dff.cc:219:make_patterns_logic$558, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.34.10.1. Executing ABC.

3.34.11. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$15272$auto$opt_dff.cc:219:make_patterns_logic$573, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.34.11.1. Executing ABC.

3.34.12. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$15176$auto$opt_dff.cc:219:make_patterns_logic$630, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.34.12.1. Executing ABC.

3.34.13. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$15733$abc$15168$auto$opt_dff.cc:219:make_patterns_logic$627, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.34.13.1. Executing ABC.

3.34.14. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$15733$abc$15160$auto$opt_dff.cc:219:make_patterns_logic$624, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.34.14.1. Executing ABC.

3.34.15. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$15733$abc$15152$auto$opt_dff.cc:219:make_patterns_logic$621, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.34.15.1. Executing ABC.

3.34.16. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$15733$abc$15144$auto$opt_dff.cc:219:make_patterns_logic$615, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.34.16.1. Executing ABC.

3.34.17. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$15733$abc$15192$auto$opt_dff.cc:219:make_patterns_logic$636, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.34.17.1. Executing ABC.

3.34.18. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$15733$abc$15248$auto$opt_dff.cc:219:make_patterns_logic$564, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.34.18.1. Executing ABC.

3.34.19. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$14367$auto$opt_dff.cc:219:make_patterns_logic$8400, asynchronously reset by \reset
Extracted 27 gates and 43 wires to a netlist network with 16 inputs and 14 outputs.

3.34.19.1. Executing ABC.

3.34.20. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$14402$auto$opt_dff.cc:219:make_patterns_logic$7316, asynchronously reset by \reset
Extracted 54 gates and 86 wires to a netlist network with 32 inputs and 23 outputs.

3.34.20.1. Executing ABC.

3.34.21. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, asynchronously reset by \reset
Extracted 177 gates and 208 wires to a netlist network with 31 inputs and 26 outputs.

3.34.21.1. Executing ABC.

3.34.22. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$15733$abc$15184$auto$opt_dff.cc:219:make_patterns_logic$633, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.34.22.1. Executing ABC.

3.34.23. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$15733$abc$15208$auto$opt_dff.cc:219:make_patterns_logic$642, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.34.23.1. Executing ABC.

3.34.24. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$15733$abc$15240$auto$opt_dff.cc:219:make_patterns_logic$561, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.34.24.1. Executing ABC.

3.34.25. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$15733$abc$15280$auto$opt_dff.cc:219:make_patterns_logic$585, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.34.25.1. Executing ABC.

3.34.26. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$15296$auto$opt_dff.cc:219:make_patterns_logic$12199, asynchronously reset by \reset
Extracted 37 gates and 65 wires to a netlist network with 28 inputs and 5 outputs.

3.34.26.1. Executing ABC.

3.34.27. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$15733$abc$15136$auto$opt_dff.cc:219:make_patterns_logic$612, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.34.27.1. Executing ABC.

3.34.28. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$15733$abc$15128$auto$opt_dff.cc:219:make_patterns_logic$609, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.34.28.1. Executing ABC.

3.34.29. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$15733$abc$15120$auto$opt_dff.cc:219:make_patterns_logic$606, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.34.29.1. Executing ABC.

3.34.30. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$15733$abc$15112$auto$opt_dff.cc:219:make_patterns_logic$603, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.34.30.1. Executing ABC.

3.34.31. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$15733$abc$15104$auto$opt_dff.cc:219:make_patterns_logic$600, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.34.31.1. Executing ABC.

3.34.32. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$15733$abc$15096$auto$opt_dff.cc:219:make_patterns_logic$597, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.34.32.1. Executing ABC.

3.34.33. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$14296$auto$opt_dff.cc:219:make_patterns_logic$8798, asynchronously reset by \reset
Extracted 65 gates and 95 wires to a netlist network with 30 inputs and 23 outputs.

3.34.33.1. Executing ABC.

3.34.34. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$15027$auto$opt_dff.cc:219:make_patterns_logic$4086, asynchronously reset by \reset
Extracted 21 gates and 36 wires to a netlist network with 15 inputs and 2 outputs.

3.34.34.1. Executing ABC.

3.34.35. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$15010$auto$opt_dff.cc:219:make_patterns_logic$4233, asynchronously reset by \reset
Extracted 18 gates and 31 wires to a netlist network with 13 inputs and 2 outputs.

3.34.35.1. Executing ABC.

3.34.36. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$15733$abc$15064$auto$opt_dff.cc:219:make_patterns_logic$582, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.34.36.1. Executing ABC.

3.34.37. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$15733$abc$15088$auto$opt_dff.cc:219:make_patterns_logic$594, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.34.37.1. Executing ABC.

3.34.38. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$15733$abc$15048$auto$opt_dff.cc:219:make_patterns_logic$576, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.34.38.1. Executing ABC.

3.34.39. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$15733$abc$15072$auto$opt_dff.cc:219:make_patterns_logic$588, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.34.39.1. Executing ABC.

3.34.40. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$14704$auto$opt_dff.cc:219:make_patterns_logic$5392, asynchronously reset by \reset
Extracted 58 gates and 87 wires to a netlist network with 29 inputs and 25 outputs.

3.34.40.1. Executing ABC.

3.34.41. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$15733$abc$15056$auto$opt_dff.cc:219:make_patterns_logic$579, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.34.41.1. Executing ABC.

3.34.42. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$14457$auto$opt_dff.cc:219:make_patterns_logic$6234, asynchronously reset by \reset
Extracted 208 gates and 245 wires to a netlist network with 37 inputs and 19 outputs.

3.34.42.1. Executing ABC.

3.34.43. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$15733$abc$15080$auto$opt_dff.cc:219:make_patterns_logic$591, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.34.43.1. Executing ABC.

3.34.44. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$14996$auto$opt_dff.cc:219:make_patterns_logic$4321, asynchronously reset by \reset
Extracted 15 gates and 25 wires to a netlist network with 10 inputs and 11 outputs.

3.34.44.1. Executing ABC.

3.34.45. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$15733$abc$15288$auto$opt_dff.cc:219:make_patterns_logic$618, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.34.45.1. Executing ABC.

3.34.46. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$15332$auto$opt_dff.cc:219:make_patterns_logic$11433, asynchronously reset by \reset
Extracted 92 gates and 119 wires to a netlist network with 27 inputs and 13 outputs.

3.34.46.1. Executing ABC.

3.34.47. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$14774$auto$opt_dff.cc:219:make_patterns_logic$4544, asynchronously reset by \reset
Extracted 150 gates and 233 wires to a netlist network with 83 inputs and 43 outputs.

3.34.47.1. Executing ABC.

3.34.48. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$15657$auto$opt_dff.cc:219:make_patterns_logic$10090, asynchronously reset by \reset
Extracted 45 gates and 68 wires to a netlist network with 23 inputs and 14 outputs.

3.34.48.1. Executing ABC.

3.34.49. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$15733$abc$15469$auto$opt_dff.cc:219:make_patterns_logic$555, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.34.49.1. Executing ABC.

yosys> abc -dff

3.35. Executing ABC pass (technology mapping using ABC).

3.35.1. Summary of detected clock domains:
  5 cells in clk=\clock, en=$abc$15717$abc$15264$auto$opt_dff.cc:219:make_patterns_logic$570, arst=\reset, srst={ }
  33 cells in clk=\clock, en=$abc$15733$abc$15469$auto$opt_dff.cc:219:make_patterns_logic$10989, arst=\reset, srst={ }
  33 cells in clk=\clock, en=$abc$15773$abc$14662$auto$opt_dff.cc:219:make_patterns_logic$6044, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$15804$abc$15256$auto$opt_dff.cc:219:make_patterns_logic$567, arst=\reset, srst={ }
  47 cells in clk=\clock, en=$abc$15819$abc$15427$auto$opt_dff.cc:219:make_patterns_logic$11259, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$15858$abc$15200$auto$opt_dff.cc:219:make_patterns_logic$639, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$15866$abc$15232$auto$opt_dff.cc:219:make_patterns_logic$558, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$15874$abc$15272$auto$opt_dff.cc:219:make_patterns_logic$573, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$15882$abc$15176$auto$opt_dff.cc:219:make_patterns_logic$630, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$15733$abc$15168$auto$opt_dff.cc:219:make_patterns_logic$627, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$15733$abc$15160$auto$opt_dff.cc:219:make_patterns_logic$624, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$15733$abc$15152$auto$opt_dff.cc:219:make_patterns_logic$621, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$15733$abc$15144$auto$opt_dff.cc:219:make_patterns_logic$615, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$15733$abc$15192$auto$opt_dff.cc:219:make_patterns_logic$636, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$15733$abc$15248$auto$opt_dff.cc:219:make_patterns_logic$564, arst=\reset, srst={ }
  25 cells in clk=\clock, en=$abc$15932$abc$14367$auto$opt_dff.cc:219:make_patterns_logic$8400, arst=\reset, srst={ }
  61 cells in clk=\clock, en=$abc$15960$abc$14402$auto$opt_dff.cc:219:make_patterns_logic$7316, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$15733$abc$15184$auto$opt_dff.cc:219:make_patterns_logic$633, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$15733$abc$15208$auto$opt_dff.cc:219:make_patterns_logic$642, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$15733$abc$15240$auto$opt_dff.cc:219:make_patterns_logic$561, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$15733$abc$15280$auto$opt_dff.cc:219:make_patterns_logic$585, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$15725$abc$15224$auto$opt_dff.cc:219:make_patterns_logic$648, arst=\reset, srst={ }
  31 cells in clk=\clock, en=$abc$16213$abc$15296$auto$opt_dff.cc:219:make_patterns_logic$12199, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$15733$abc$15136$auto$opt_dff.cc:219:make_patterns_logic$612, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$15733$abc$15128$auto$opt_dff.cc:219:make_patterns_logic$609, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$15733$abc$15120$auto$opt_dff.cc:219:make_patterns_logic$606, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$15733$abc$15112$auto$opt_dff.cc:219:make_patterns_logic$603, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$15733$abc$15104$auto$opt_dff.cc:219:make_patterns_logic$600, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$15733$abc$15096$auto$opt_dff.cc:219:make_patterns_logic$597, arst=\reset, srst={ }
  156 cells in clk=\clock, en=$abc$16786$abc$14774$auto$opt_dff.cc:219:make_patterns_logic$4544, arst=\reset, srst={ }
  16 cells in clk=\clock, en=$abc$16353$abc$15027$auto$opt_dff.cc:219:make_patterns_logic$4086, arst=\reset, srst={ }
  21 cells in clk=\clock, en=$abc$16372$abc$15010$auto$opt_dff.cc:219:make_patterns_logic$4233, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$15733$abc$15064$auto$opt_dff.cc:219:make_patterns_logic$582, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$15733$abc$15088$auto$opt_dff.cc:219:make_patterns_logic$594, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$15733$abc$15216$auto$opt_dff.cc:219:make_patterns_logic$645, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$15733$abc$15048$auto$opt_dff.cc:219:make_patterns_logic$576, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$15733$abc$15072$auto$opt_dff.cc:219:make_patterns_logic$588, arst=\reset, srst={ }
  49 cells in clk=\clock, en=$abc$16417$abc$14704$auto$opt_dff.cc:219:make_patterns_logic$5392, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$15733$abc$15056$auto$opt_dff.cc:219:make_patterns_logic$579, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$15733$abc$15080$auto$opt_dff.cc:219:make_patterns_logic$591, arst=\reset, srst={ }
  13 cells in clk=\clock, en=$abc$16667$abc$14996$auto$opt_dff.cc:219:make_patterns_logic$4321, arst=\reset, srst={ }
  50 cells in clk=\clock, en=$abc$16288$abc$14296$auto$opt_dff.cc:219:make_patterns_logic$8798, arst=\reset, srst={ }
  160 cells in clk=\clock, en={ }, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$15733$abc$15288$auto$opt_dff.cc:219:make_patterns_logic$618, arst=\reset, srst={ }
  87 cells in clk=\clock, en=$abc$16694$abc$15332$auto$opt_dff.cc:219:make_patterns_logic$11433, arst=\reset, srst={ }
  162 cells in clk=\clock, en=$abc$16488$abc$14457$auto$opt_dff.cc:219:make_patterns_logic$6234, arst=\reset, srst={ }
  56 cells in clk=\clock, en=$abc$16943$abc$15657$auto$opt_dff.cc:219:make_patterns_logic$10090, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$15733$abc$15469$auto$opt_dff.cc:219:make_patterns_logic$555, arst=\reset, srst={ }

3.35.2. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$15717$abc$15264$auto$opt_dff.cc:219:make_patterns_logic$570, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.35.2.1. Executing ABC.

3.35.3. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$15733$abc$15469$auto$opt_dff.cc:219:make_patterns_logic$10989, asynchronously reset by \reset
Extracted 33 gates and 65 wires to a netlist network with 32 inputs and 29 outputs.

3.35.3.1. Executing ABC.

3.35.4. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$15773$abc$14662$auto$opt_dff.cc:219:make_patterns_logic$6044, asynchronously reset by \reset
Extracted 33 gates and 59 wires to a netlist network with 26 inputs and 9 outputs.

3.35.4.1. Executing ABC.

3.35.5. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$17009$abc$15804$abc$15256$auto$opt_dff.cc:219:make_patterns_logic$567, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.35.5.1. Executing ABC.

3.35.6. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$15819$abc$15427$auto$opt_dff.cc:219:make_patterns_logic$11259, asynchronously reset by \reset
Extracted 47 gates and 78 wires to a netlist network with 31 inputs and 11 outputs.

3.35.6.1. Executing ABC.

3.35.7. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$15858$abc$15200$auto$opt_dff.cc:219:make_patterns_logic$639, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.35.7.1. Executing ABC.

3.35.8. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$15866$abc$15232$auto$opt_dff.cc:219:make_patterns_logic$558, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.35.8.1. Executing ABC.

3.35.9. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$15874$abc$15272$auto$opt_dff.cc:219:make_patterns_logic$573, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.35.9.1. Executing ABC.

3.35.10. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$17009$abc$15882$abc$15176$auto$opt_dff.cc:219:make_patterns_logic$630, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.35.10.1. Executing ABC.

3.35.11. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$17009$abc$15733$abc$15168$auto$opt_dff.cc:219:make_patterns_logic$627, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.35.11.1. Executing ABC.

3.35.12. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$17009$abc$15733$abc$15160$auto$opt_dff.cc:219:make_patterns_logic$624, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.35.12.1. Executing ABC.

3.35.13. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$17009$abc$15733$abc$15152$auto$opt_dff.cc:219:make_patterns_logic$621, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.35.13.1. Executing ABC.

3.35.14. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$17009$abc$15733$abc$15144$auto$opt_dff.cc:219:make_patterns_logic$615, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.35.14.1. Executing ABC.

3.35.15. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$17009$abc$15733$abc$15192$auto$opt_dff.cc:219:make_patterns_logic$636, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.35.15.1. Executing ABC.

3.35.16. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$15733$abc$15248$auto$opt_dff.cc:219:make_patterns_logic$564, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.35.16.1. Executing ABC.

3.35.17. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$15932$abc$14367$auto$opt_dff.cc:219:make_patterns_logic$8400, asynchronously reset by \reset
Extracted 25 gates and 40 wires to a netlist network with 15 inputs and 12 outputs.

3.35.17.1. Executing ABC.

3.35.18. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$15960$abc$14402$auto$opt_dff.cc:219:make_patterns_logic$7316, asynchronously reset by \reset
Extracted 61 gates and 98 wires to a netlist network with 37 inputs and 24 outputs.

3.35.18.1. Executing ABC.

3.35.19. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$17009$abc$15733$abc$15184$auto$opt_dff.cc:219:make_patterns_logic$633, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.35.19.1. Executing ABC.

3.35.20. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$15733$abc$15208$auto$opt_dff.cc:219:make_patterns_logic$642, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.35.20.1. Executing ABC.

3.35.21. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$15733$abc$15240$auto$opt_dff.cc:219:make_patterns_logic$561, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.35.21.1. Executing ABC.

3.35.22. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$17009$abc$15733$abc$15280$auto$opt_dff.cc:219:make_patterns_logic$585, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.35.22.1. Executing ABC.

3.35.23. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$15725$abc$15224$auto$opt_dff.cc:219:make_patterns_logic$648, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.35.23.1. Executing ABC.

3.35.24. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$16213$abc$15296$auto$opt_dff.cc:219:make_patterns_logic$12199, asynchronously reset by \reset
Extracted 31 gates and 59 wires to a netlist network with 28 inputs and 5 outputs.

3.35.24.1. Executing ABC.

3.35.25. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$17009$abc$15733$abc$15136$auto$opt_dff.cc:219:make_patterns_logic$612, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.35.25.1. Executing ABC.

3.35.26. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$17009$abc$15733$abc$15128$auto$opt_dff.cc:219:make_patterns_logic$609, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.35.26.1. Executing ABC.

3.35.27. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$17009$abc$15733$abc$15120$auto$opt_dff.cc:219:make_patterns_logic$606, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.35.27.1. Executing ABC.

3.35.28. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$17009$abc$15733$abc$15112$auto$opt_dff.cc:219:make_patterns_logic$603, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.35.28.1. Executing ABC.

3.35.29. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$17009$abc$15733$abc$15104$auto$opt_dff.cc:219:make_patterns_logic$600, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.35.29.1. Executing ABC.

3.35.30. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$17009$abc$15733$abc$15096$auto$opt_dff.cc:219:make_patterns_logic$597, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.35.30.1. Executing ABC.

3.35.31. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$16786$abc$14774$auto$opt_dff.cc:219:make_patterns_logic$4544, asynchronously reset by \reset
Extracted 156 gates and 242 wires to a netlist network with 86 inputs and 44 outputs.

3.35.31.1. Executing ABC.

3.35.32. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$16353$abc$15027$auto$opt_dff.cc:219:make_patterns_logic$4086, asynchronously reset by \reset
Extracted 16 gates and 31 wires to a netlist network with 15 inputs and 2 outputs.

3.35.32.1. Executing ABC.

3.35.33. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$16372$abc$15010$auto$opt_dff.cc:219:make_patterns_logic$4233, asynchronously reset by \reset
Extracted 21 gates and 36 wires to a netlist network with 15 inputs and 4 outputs.

3.35.33.1. Executing ABC.

3.35.34. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$17009$abc$15733$abc$15064$auto$opt_dff.cc:219:make_patterns_logic$582, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.35.34.1. Executing ABC.

3.35.35. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$17009$abc$15733$abc$15088$auto$opt_dff.cc:219:make_patterns_logic$594, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.35.35.1. Executing ABC.

3.35.36. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$17009$abc$15733$abc$15216$auto$opt_dff.cc:219:make_patterns_logic$645, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.35.36.1. Executing ABC.

3.35.37. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$17009$abc$15733$abc$15048$auto$opt_dff.cc:219:make_patterns_logic$576, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.35.37.1. Executing ABC.

3.35.38. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$17009$abc$15733$abc$15072$auto$opt_dff.cc:219:make_patterns_logic$588, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.35.38.1. Executing ABC.

3.35.39. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$16417$abc$14704$auto$opt_dff.cc:219:make_patterns_logic$5392, asynchronously reset by \reset
Extracted 49 gates and 71 wires to a netlist network with 22 inputs and 16 outputs.

3.35.39.1. Executing ABC.

3.35.40. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$15733$abc$15056$auto$opt_dff.cc:219:make_patterns_logic$579, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.35.40.1. Executing ABC.

3.35.41. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$17009$abc$15733$abc$15080$auto$opt_dff.cc:219:make_patterns_logic$591, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.35.41.1. Executing ABC.

3.35.42. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$16667$abc$14996$auto$opt_dff.cc:219:make_patterns_logic$4321, asynchronously reset by \reset
Extracted 13 gates and 23 wires to a netlist network with 10 inputs and 9 outputs.

3.35.42.1. Executing ABC.

3.35.43. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$16288$abc$14296$auto$opt_dff.cc:219:make_patterns_logic$8798, asynchronously reset by \reset
Extracted 50 gates and 74 wires to a netlist network with 24 inputs and 15 outputs.

3.35.43.1. Executing ABC.

3.35.44. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, asynchronously reset by \reset
Extracted 160 gates and 183 wires to a netlist network with 23 inputs and 27 outputs.

3.35.44.1. Executing ABC.

3.35.45. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$17009$abc$15733$abc$15288$auto$opt_dff.cc:219:make_patterns_logic$618, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.35.45.1. Executing ABC.

3.35.46. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$16694$abc$15332$auto$opt_dff.cc:219:make_patterns_logic$11433, asynchronously reset by \reset
Extracted 87 gates and 113 wires to a netlist network with 26 inputs and 13 outputs.

3.35.46.1. Executing ABC.

3.35.47. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$16488$abc$14457$auto$opt_dff.cc:219:make_patterns_logic$6234, asynchronously reset by \reset
Extracted 162 gates and 198 wires to a netlist network with 36 inputs and 22 outputs.

3.35.47.1. Executing ABC.

3.35.48. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$16943$abc$15657$auto$opt_dff.cc:219:make_patterns_logic$10090, asynchronously reset by \reset
Extracted 56 gates and 78 wires to a netlist network with 22 inputs and 17 outputs.

3.35.48.1. Executing ABC.

3.35.49. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$17009$abc$15733$abc$15469$auto$opt_dff.cc:219:make_patterns_logic$555, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.35.49.1. Executing ABC.

yosys> abc -dff

3.36. Executing ABC pass (technology mapping using ABC).

3.36.1. Summary of detected clock domains:
  5 cells in clk=\clock, en=$abc$17001$abc$15717$abc$15264$auto$opt_dff.cc:219:make_patterns_logic$570, arst=\reset, srst={ }
  33 cells in clk=\clock, en=$abc$17009$abc$15733$abc$15469$auto$opt_dff.cc:219:make_patterns_logic$10989, arst=\reset, srst={ }
  29 cells in clk=\clock, en=$abc$17044$abc$15773$abc$14662$auto$opt_dff.cc:219:make_patterns_logic$6044, arst=\reset, srst={ }
  43 cells in clk=\clock, en=$abc$17086$abc$15819$abc$15427$auto$opt_dff.cc:219:make_patterns_logic$11259, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$17137$abc$15858$abc$15200$auto$opt_dff.cc:219:make_patterns_logic$639, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$17145$abc$15866$abc$15232$auto$opt_dff.cc:219:make_patterns_logic$558, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$17153$abc$15874$abc$15272$auto$opt_dff.cc:219:make_patterns_logic$573, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$17009$abc$15882$abc$15176$auto$opt_dff.cc:219:make_patterns_logic$630, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$17009$abc$15733$abc$15168$auto$opt_dff.cc:219:make_patterns_logic$627, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$17009$abc$15733$abc$15160$auto$opt_dff.cc:219:make_patterns_logic$624, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$17009$abc$15733$abc$15152$auto$opt_dff.cc:219:make_patterns_logic$621, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$17009$abc$15733$abc$15144$auto$opt_dff.cc:219:make_patterns_logic$615, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$17009$abc$15733$abc$15192$auto$opt_dff.cc:219:make_patterns_logic$636, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$17203$abc$15733$abc$15248$auto$opt_dff.cc:219:make_patterns_logic$564, arst=\reset, srst={ }
  25 cells in clk=\clock, en=$abc$17211$abc$15932$abc$14367$auto$opt_dff.cc:219:make_patterns_logic$8400, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$17009$abc$15733$abc$15184$auto$opt_dff.cc:219:make_patterns_logic$633, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$17307$abc$15733$abc$15208$auto$opt_dff.cc:219:make_patterns_logic$642, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$17315$abc$15733$abc$15240$auto$opt_dff.cc:219:make_patterns_logic$561, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$17009$abc$15804$abc$15256$auto$opt_dff.cc:219:make_patterns_logic$567, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$17009$abc$15733$abc$15280$auto$opt_dff.cc:219:make_patterns_logic$585, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$17330$abc$15725$abc$15224$auto$opt_dff.cc:219:make_patterns_logic$648, arst=\reset, srst={ }
  27 cells in clk=\clock, en=$abc$17338$abc$16213$abc$15296$auto$opt_dff.cc:219:make_patterns_logic$12199, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$17009$abc$15733$abc$15136$auto$opt_dff.cc:219:make_patterns_logic$612, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$17009$abc$15733$abc$15128$auto$opt_dff.cc:219:make_patterns_logic$609, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$17009$abc$15733$abc$15120$auto$opt_dff.cc:219:make_patterns_logic$606, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$17009$abc$15733$abc$15112$auto$opt_dff.cc:219:make_patterns_logic$603, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$17009$abc$15733$abc$15104$auto$opt_dff.cc:219:make_patterns_logic$600, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$17009$abc$15733$abc$15096$auto$opt_dff.cc:219:make_patterns_logic$597, arst=\reset, srst={ }
  18 cells in clk=\clock, en=$abc$17569$abc$16353$abc$15027$auto$opt_dff.cc:219:make_patterns_logic$4086, arst=\reset, srst={ }
  19 cells in clk=\clock, en=$abc$17588$abc$16372$abc$15010$auto$opt_dff.cc:219:make_patterns_logic$4233, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$17009$abc$15733$abc$15064$auto$opt_dff.cc:219:make_patterns_logic$582, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$17009$abc$15733$abc$15088$auto$opt_dff.cc:219:make_patterns_logic$594, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$17009$abc$15733$abc$15216$auto$opt_dff.cc:219:make_patterns_logic$645, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$17009$abc$15733$abc$15048$auto$opt_dff.cc:219:make_patterns_logic$576, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$17009$abc$15733$abc$15072$auto$opt_dff.cc:219:make_patterns_logic$588, arst=\reset, srst={ }
  55 cells in clk=\clock, en=$abc$17645$abc$16417$abc$14704$auto$opt_dff.cc:219:make_patterns_logic$5392, arst=\reset, srst={ }
  56 cells in clk=\clock, en=$abc$17238$abc$15960$abc$14402$auto$opt_dff.cc:219:make_patterns_logic$7316, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$17698$abc$15733$abc$15056$auto$opt_dff.cc:219:make_patterns_logic$579, arst=\reset, srst={ }
  152 cells in clk=\clock, en=$abc$17411$abc$16786$abc$14774$auto$opt_dff.cc:219:make_patterns_logic$4544, arst=\reset, srst={ }
  175 cells in clk=\clock, en=$abc$18044$abc$16488$abc$14457$auto$opt_dff.cc:219:make_patterns_logic$6234, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$17009$abc$15733$abc$15080$auto$opt_dff.cc:219:make_patterns_logic$591, arst=\reset, srst={ }
  13 cells in clk=\clock, en=$abc$17713$abc$16667$abc$14996$auto$opt_dff.cc:219:make_patterns_logic$4321, arst=\reset, srst={ }
  57 cells in clk=\clock, en=$abc$17731$abc$16288$abc$14296$auto$opt_dff.cc:219:make_patterns_logic$8798, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$17009$abc$15733$abc$15288$auto$opt_dff.cc:219:make_patterns_logic$618, arst=\reset, srst={ }
  82 cells in clk=\clock, en=$abc$17957$abc$16694$abc$15332$auto$opt_dff.cc:219:make_patterns_logic$11433, arst=\reset, srst={ }
  166 cells in clk=\clock, en={ }, arst=\reset, srst={ }
  51 cells in clk=\clock, en=$abc$18222$abc$16943$abc$15657$auto$opt_dff.cc:219:make_patterns_logic$10090, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$17009$abc$15733$abc$15469$auto$opt_dff.cc:219:make_patterns_logic$555, arst=\reset, srst={ }

3.36.2. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$17001$abc$15717$abc$15264$auto$opt_dff.cc:219:make_patterns_logic$570, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.36.2.1. Executing ABC.

3.36.3. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$17009$abc$15733$abc$15469$auto$opt_dff.cc:219:make_patterns_logic$10989, asynchronously reset by \reset
Extracted 33 gates and 64 wires to a netlist network with 31 inputs and 29 outputs.

3.36.3.1. Executing ABC.

3.36.4. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$17044$abc$15773$abc$14662$auto$opt_dff.cc:219:make_patterns_logic$6044, asynchronously reset by \reset
Extracted 29 gates and 52 wires to a netlist network with 23 inputs and 7 outputs.

3.36.4.1. Executing ABC.

3.36.5. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$17086$abc$15819$abc$15427$auto$opt_dff.cc:219:make_patterns_logic$11259, asynchronously reset by \reset
Extracted 43 gates and 72 wires to a netlist network with 29 inputs and 10 outputs.

3.36.5.1. Executing ABC.

3.36.6. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$17137$abc$15858$abc$15200$auto$opt_dff.cc:219:make_patterns_logic$639, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.36.6.1. Executing ABC.

3.36.7. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$17145$abc$15866$abc$15232$auto$opt_dff.cc:219:make_patterns_logic$558, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.36.7.1. Executing ABC.

3.36.8. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$18291$abc$17153$abc$15874$abc$15272$auto$opt_dff.cc:219:make_patterns_logic$573, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.36.8.1. Executing ABC.

3.36.9. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$18291$abc$17009$abc$15882$abc$15176$auto$opt_dff.cc:219:make_patterns_logic$630, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.36.9.1. Executing ABC.

3.36.10. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$18291$abc$17009$abc$15733$abc$15168$auto$opt_dff.cc:219:make_patterns_logic$627, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.36.10.1. Executing ABC.

3.36.11. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$18291$abc$17009$abc$15733$abc$15160$auto$opt_dff.cc:219:make_patterns_logic$624, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.36.11.1. Executing ABC.

3.36.12. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$17009$abc$15733$abc$15152$auto$opt_dff.cc:219:make_patterns_logic$621, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.36.12.1. Executing ABC.

3.36.13. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$18291$abc$17009$abc$15733$abc$15144$auto$opt_dff.cc:219:make_patterns_logic$615, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.36.13.1. Executing ABC.

3.36.14. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$17009$abc$15733$abc$15192$auto$opt_dff.cc:219:make_patterns_logic$636, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.36.14.1. Executing ABC.

3.36.15. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$17203$abc$15733$abc$15248$auto$opt_dff.cc:219:make_patterns_logic$564, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.36.15.1. Executing ABC.

3.36.16. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$17211$abc$15932$abc$14367$auto$opt_dff.cc:219:make_patterns_logic$8400, asynchronously reset by \reset
Extracted 25 gates and 39 wires to a netlist network with 14 inputs and 11 outputs.

3.36.16.1. Executing ABC.

3.36.17. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$17009$abc$15733$abc$15184$auto$opt_dff.cc:219:make_patterns_logic$633, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.36.17.1. Executing ABC.

3.36.18. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$17307$abc$15733$abc$15208$auto$opt_dff.cc:219:make_patterns_logic$642, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.36.18.1. Executing ABC.

3.36.19. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$18291$abc$17315$abc$15733$abc$15240$auto$opt_dff.cc:219:make_patterns_logic$561, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.36.19.1. Executing ABC.

3.36.20. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$18291$abc$17009$abc$15804$abc$15256$auto$opt_dff.cc:219:make_patterns_logic$567, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.36.20.1. Executing ABC.

3.36.21. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$17009$abc$15733$abc$15280$auto$opt_dff.cc:219:make_patterns_logic$585, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.36.21.1. Executing ABC.

3.36.22. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$17330$abc$15725$abc$15224$auto$opt_dff.cc:219:make_patterns_logic$648, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.36.22.1. Executing ABC.

3.36.23. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$17338$abc$16213$abc$15296$auto$opt_dff.cc:219:make_patterns_logic$12199, asynchronously reset by \reset
Extracted 27 gates and 54 wires to a netlist network with 27 inputs and 4 outputs.

3.36.23.1. Executing ABC.

3.36.24. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$18291$abc$17009$abc$15733$abc$15136$auto$opt_dff.cc:219:make_patterns_logic$612, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.36.24.1. Executing ABC.

3.36.25. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$18291$abc$17009$abc$15733$abc$15128$auto$opt_dff.cc:219:make_patterns_logic$609, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.36.25.1. Executing ABC.

3.36.26. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$18291$abc$17009$abc$15733$abc$15120$auto$opt_dff.cc:219:make_patterns_logic$606, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.36.26.1. Executing ABC.

3.36.27. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$18291$abc$17009$abc$15733$abc$15112$auto$opt_dff.cc:219:make_patterns_logic$603, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.36.27.1. Executing ABC.

3.36.28. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$18291$abc$17009$abc$15733$abc$15104$auto$opt_dff.cc:219:make_patterns_logic$600, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.36.28.1. Executing ABC.

3.36.29. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$18291$abc$17009$abc$15733$abc$15096$auto$opt_dff.cc:219:make_patterns_logic$597, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.36.29.1. Executing ABC.

3.36.30. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$17569$abc$16353$abc$15027$auto$opt_dff.cc:219:make_patterns_logic$4086, asynchronously reset by \reset
Extracted 18 gates and 34 wires to a netlist network with 16 inputs and 3 outputs.

3.36.30.1. Executing ABC.

3.36.31. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$17588$abc$16372$abc$15010$auto$opt_dff.cc:219:make_patterns_logic$4233, asynchronously reset by \reset
Extracted 19 gates and 33 wires to a netlist network with 14 inputs and 2 outputs.

3.36.31.1. Executing ABC.

3.36.32. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$18291$abc$17009$abc$15733$abc$15064$auto$opt_dff.cc:219:make_patterns_logic$582, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.36.32.1. Executing ABC.

3.36.33. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$18291$abc$17009$abc$15733$abc$15088$auto$opt_dff.cc:219:make_patterns_logic$594, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.36.33.1. Executing ABC.

3.36.34. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$18291$abc$17009$abc$15733$abc$15216$auto$opt_dff.cc:219:make_patterns_logic$645, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.36.34.1. Executing ABC.

3.36.35. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$18291$abc$17009$abc$15733$abc$15048$auto$opt_dff.cc:219:make_patterns_logic$576, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.36.35.1. Executing ABC.

3.36.36. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$18291$abc$17009$abc$15733$abc$15072$auto$opt_dff.cc:219:make_patterns_logic$588, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.36.36.1. Executing ABC.

3.36.37. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$17645$abc$16417$abc$14704$auto$opt_dff.cc:219:make_patterns_logic$5392, asynchronously reset by \reset
Extracted 55 gates and 80 wires to a netlist network with 25 inputs and 18 outputs.

3.36.37.1. Executing ABC.

3.36.38. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$17238$abc$15960$abc$14402$auto$opt_dff.cc:219:make_patterns_logic$7316, asynchronously reset by \reset
Extracted 56 gates and 89 wires to a netlist network with 33 inputs and 23 outputs.

3.36.38.1. Executing ABC.

3.36.39. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$18291$abc$17698$abc$15733$abc$15056$auto$opt_dff.cc:219:make_patterns_logic$579, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.36.39.1. Executing ABC.

3.36.40. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$17411$abc$16786$abc$14774$auto$opt_dff.cc:219:make_patterns_logic$4544, asynchronously reset by \reset
Extracted 152 gates and 236 wires to a netlist network with 84 inputs and 46 outputs.

3.36.40.1. Executing ABC.

3.36.41. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$18044$abc$16488$abc$14457$auto$opt_dff.cc:219:make_patterns_logic$6234, asynchronously reset by \reset
Extracted 175 gates and 212 wires to a netlist network with 37 inputs and 19 outputs.

3.36.41.1. Executing ABC.

3.36.42. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$18291$abc$17009$abc$15733$abc$15080$auto$opt_dff.cc:219:make_patterns_logic$591, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.36.42.1. Executing ABC.

3.36.43. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$17713$abc$16667$abc$14996$auto$opt_dff.cc:219:make_patterns_logic$4321, asynchronously reset by \reset
Extracted 13 gates and 23 wires to a netlist network with 10 inputs and 9 outputs.

3.36.43.1. Executing ABC.

3.36.44. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$17731$abc$16288$abc$14296$auto$opt_dff.cc:219:make_patterns_logic$8798, asynchronously reset by \reset
Extracted 57 gates and 84 wires to a netlist network with 27 inputs and 17 outputs.

3.36.44.1. Executing ABC.

3.36.45. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$18291$abc$17009$abc$15733$abc$15288$auto$opt_dff.cc:219:make_patterns_logic$618, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.36.45.1. Executing ABC.

3.36.46. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$17957$abc$16694$abc$15332$auto$opt_dff.cc:219:make_patterns_logic$11433, asynchronously reset by \reset
Extracted 82 gates and 108 wires to a netlist network with 26 inputs and 13 outputs.

3.36.46.1. Executing ABC.

3.36.47. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, asynchronously reset by \reset
Extracted 166 gates and 192 wires to a netlist network with 26 inputs and 26 outputs.

3.36.47.1. Executing ABC.

3.36.48. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$18222$abc$16943$abc$15657$auto$opt_dff.cc:219:make_patterns_logic$10090, asynchronously reset by \reset
Extracted 51 gates and 73 wires to a netlist network with 22 inputs and 16 outputs.

3.36.48.1. Executing ABC.

3.36.49. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$18291$abc$17009$abc$15733$abc$15469$auto$opt_dff.cc:219:make_patterns_logic$555, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.36.49.1. Executing ABC.

yosys> opt_ffinv

3.37. Executing OPT_FFINV pass (push inverters through FFs).
Discovering LUTs.
Pushed 1 inverters.

yosys> opt -sat

3.38. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.38.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.
<suppressed ~15 debug messages>

yosys> opt_merge -nomux

3.38.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
<suppressed ~60 debug messages>
Removed a total of 20 cells.

yosys> opt_muxtree

3.38.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.38.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

yosys> opt_merge

3.38.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.38.6. Executing OPT_DFF pass (perform DFF optimizations).
Handling D = Q on $abc$18639$auto$blifparse.cc:362:parse_blif$18640 ($_DFFE_PP1P_) from module b12 (removing D path).
Setting constant 1-bit at position 0 on $abc$18639$auto$blifparse.cc:362:parse_blif$18640 ($_DLATCH_P_) from module b12.

yosys> opt_clean

3.38.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..
Removed 18 unused cells and 6721 unused wires.
<suppressed ~62 debug messages>

yosys> opt_expr

3.38.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.
<suppressed ~1 debug messages>

3.38.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.38.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.38.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

yosys> opt_merge

3.38.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.38.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.38.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.38.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.

3.38.16. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.38.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.38.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

yosys> opt_merge

3.38.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.38.20. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.38.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..

yosys> opt_expr

3.38.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.

3.38.23. Finished OPT passes. (There is nothing left to do.)

yosys> abc -script /tmp/yosys_E6fWLm/abc_tmp_1.scr

3.39. Executing ABC pass (technology mapping using ABC).

3.39.1. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Extracted 965 gates and 1084 wires to a netlist network with 119 inputs and 97 outputs.

3.39.1.1. Executing ABC.
DE:   #PIs = 119  #Luts =   296  Max Lvl =   7  Avg Lvl =   2.93  [   0.13 sec. at Pass 0]
DE:   #PIs = 119  #Luts =   228  Max Lvl =   7  Avg Lvl =   2.88  [   2.19 sec. at Pass 1]
DE:   #PIs = 119  #Luts =   221  Max Lvl =   7  Avg Lvl =   2.79  [   0.72 sec. at Pass 2]
DE:   #PIs = 119  #Luts =   219  Max Lvl =   6  Avg Lvl =   2.58  [   1.69 sec. at Pass 3]
DE:   #PIs = 119  #Luts =   216  Max Lvl =   6  Avg Lvl =   2.59  [   0.60 sec. at Pass 4]
DE:   #PIs = 119  #Luts =   213  Max Lvl =   8  Avg Lvl =   3.01  [   2.66 sec. at Pass 5]
DE:   #PIs = 119  #Luts =   209  Max Lvl =   6  Avg Lvl =   2.53  [   0.56 sec. at Pass 6]
DE:   #PIs = 119  #Luts =   207  Max Lvl =   6  Avg Lvl =   2.54  [   2.52 sec. at Pass 7]
DE:   #PIs = 119  #Luts =   207  Max Lvl =   6  Avg Lvl =   2.54  [   0.71 sec. at Pass 8]
DE:   #PIs = 119  #Luts =   206  Max Lvl =   6  Avg Lvl =   2.56  [   2.73 sec. at Pass 9]
DE:   #PIs = 119  #Luts =   206  Max Lvl =   6  Avg Lvl =   2.56  [   0.78 sec. at Pass 10]
DE:   #PIs = 119  #Luts =   206  Max Lvl =   6  Avg Lvl =   2.56  [   2.04 sec. at Pass 11]
DE:   #PIs = 119  #Luts =   206  Max Lvl =   6  Avg Lvl =   2.56  [   0.64 sec. at Pass 12]
DE:   #PIs = 119  #Luts =   202  Max Lvl =   6  Avg Lvl =   2.29  [   9.42 sec. at Pass 13]
DE:   #PIs = 119  #Luts =   201  Max Lvl =   6  Avg Lvl =   2.59  [   2.31 sec. at Pass 14]
DE:   #PIs = 119  #Luts =   201  Max Lvl =   6  Avg Lvl =   2.59  [   0.76 sec. at Pass 15]
DE:   #PIs = 119  #Luts =   199  Max Lvl =   6  Avg Lvl =   2.57  [   2.88 sec. at Pass 16]
DE:   #PIs = 119  #Luts =   199  Max Lvl =   6  Avg Lvl =   2.57  [   0.90 sec. at Pass 17]
DE:   #PIs = 119  #Luts =   198  Max Lvl =   6  Avg Lvl =   2.58  [   2.75 sec. at Pass 18]
DE:   #PIs = 119  #Luts =   198  Max Lvl =   6  Avg Lvl =   2.58  [   0.82 sec. at Pass 19]
DE:   #PIs = 119  #Luts =   198  Max Lvl =   6  Avg Lvl =   2.58  [   2.08 sec. at Pass 20]
DE:   #PIs = 119  #Luts =   198  Max Lvl =   6  Avg Lvl =   2.58  [   0.69 sec. at Pass 21]
DE:   #PIs = 119  #Luts =   195  Max Lvl =   6  Avg Lvl =   2.52  [   9.13 sec. at Pass 22]
DE:   #PIs = 119  #Luts =   195  Max Lvl =   6  Avg Lvl =   2.52  [   2.62 sec. at Pass 23]
DE:   #PIs = 119  #Luts =   195  Max Lvl =   6  Avg Lvl =   2.52  [   0.75 sec. at Pass 24]
DE:   #PIs = 119  #Luts =   195  Max Lvl =   6  Avg Lvl =   2.52  [   2.12 sec. at Pass 25]
DE:   #PIs = 119  #Luts =   195  Max Lvl =   6  Avg Lvl =   2.52  [  10.11 sec. at Pass 26]
DE:   #PIs = 119  #Luts =   195  Max Lvl =   6  Avg Lvl =   2.52  [   0.25 sec. at Pass 27]

yosys> opt

3.40. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.40.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.

yosys> opt_merge -nomux

3.40.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.40.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.40.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

yosys> opt_merge

3.40.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_dff

3.40.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.40.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..
Removed 0 unused cells and 1045 unused wires.
<suppressed ~2 debug messages>

yosys> opt_expr

3.40.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.

3.40.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.40.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.40.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

yosys> opt_merge

3.40.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_dff

3.40.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.40.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..

yosys> opt_expr

3.40.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.

3.40.16. Finished OPT passes. (There is nothing left to do.)

yosys> opt_ffinv

3.41. Executing OPT_FFINV pass (push inverters through FFs).
Discovering LUTs.
Pushed 0 inverters.

yosys> stat

3.42. Printing statistics.

=== b12 ===

   Number of wires:                314
   Number of wire bits:            327
   Number of public wires:          12
   Number of public wire bits:      25
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                313
     $_DFFE_PP0P_                  106
     $_DFF_PP0_                     12
     $lut                          195


yosys> shregmap -minlen 8 -maxlen 20

3.43. Executing SHREGMAP pass (map shift registers).
Converted 0 dff cells into 0 shift registers.

yosys> dfflegalize -cell $_DFF_?_ 0 -cell $_DFF_???_ 0 -cell $_DFFE_????_ 0 -cell $_DFFSR_???_ 0 -cell $_DFFSRE_????_ 0 -cell $_DLATCHSR_PPP_ 0

3.44. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

yosys> stat

3.45. Printing statistics.

=== b12 ===

   Number of wires:                314
   Number of wire bits:            327
   Number of public wires:          12
   Number of public wire bits:      25
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                313
     $_DFFE_PP0P_                  106
     $_DFF_PP0_                     12
     $lut                          195


yosys> techmap -map +/techmap.v -map +/rapidsilicon/genesis/ffs_map.v

3.46. Executing TECHMAP pass (map to technology primitives).

3.46.1. Executing Verilog-2005 frontend: /home/users/meri/Documents/workspace/de-issue/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/meri/Documents/workspace/de-issue/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.46.2. Executing Verilog-2005 frontend: /home/users/meri/Documents/workspace/de-issue/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/ffs_map.v
Parsing Verilog input from `/home/users/meri/Documents/workspace/de-issue/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/ffs_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP0N_'.
Generating RTLIL representation for module `\$_DFFE_PN0P_'.
Generating RTLIL representation for module `\$_DFFE_PN0N_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP1N_'.
Generating RTLIL representation for module `\$_DFFE_PN1P_'.
Generating RTLIL representation for module `\$_DFFE_PN1N_'.
Generating RTLIL representation for module `\$_DFFSR_PPP_'.
Generating RTLIL representation for module `\$_DFFSR_PNP_'.
Generating RTLIL representation for module `\$_DFFSR_PNN_'.
Generating RTLIL representation for module `\$_DFFSR_PPN_'.
Generating RTLIL representation for module `\$_DFFSR_NPP_'.
Generating RTLIL representation for module `\$_DFFSR_NNP_'.
Generating RTLIL representation for module `\$_DFFSR_NNN_'.
Generating RTLIL representation for module `\$_DFFSR_NPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PNPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPNP_'.
Generating RTLIL representation for module `\$_DFFSRE_PNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PNPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PPNN_'.
Generating RTLIL representation for module `\$_DFFSRE_PNNN_'.
Generating RTLIL representation for module `\$_DLATCHSR_PPP_'.
Generating RTLIL representation for module `\$_DLATCHSR_NPP_'.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP0N_'.
Generating RTLIL representation for module `\$_DFFE_NN0P_'.
Generating RTLIL representation for module `\$_DFFE_NN0N_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_NP1N_'.
Generating RTLIL representation for module `\$_DFFE_NN1P_'.
Generating RTLIL representation for module `\$_DFFE_NN1N_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNPP_'.
Generating RTLIL representation for module `\$_DFFSRE_NPNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPN_'.
Generating RTLIL representation for module `\$_DFFSRE_NNPN_'.
Generating RTLIL representation for module `\$_DFFSRE_NPNN_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNN_'.
Generating RTLIL representation for module `\$__SHREG_DFF_P_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PN0_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NN0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFF_PN1_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_NN1_'.
Successfully finished Verilog frontend.

3.46.3. Continuing TECHMAP pass.
Using template \$_DFF_PP0_ for cells of type $_DFF_PP0_.
Using template \$_DFFE_PP0P_ for cells of type $_DFFE_PP0P_.
Using extmapper simplemap for cells of type $lut.
Using extmapper simplemap for cells of type $logic_not.
No more expansions possible.
<suppressed ~567 debug messages>

yosys> opt_expr -mux_undef

3.47. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.
<suppressed ~7063 debug messages>

yosys> simplemap

3.48. Executing SIMPLEMAP pass (map simple cells to gate primitives).

yosys> opt_expr

3.49. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.

yosys> opt_merge

3.50. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
<suppressed ~2529 debug messages>
Removed a total of 843 cells.

yosys> opt_dff -nodffe -nosdff

3.51. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.52. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..
Removed 0 unused cells and 1061 unused wires.
<suppressed ~1 debug messages>

yosys> opt -nodffe -nosdff

3.53. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.53.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.
<suppressed ~177 debug messages>

yosys> opt_merge -nomux

3.53.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
<suppressed ~15 debug messages>
Removed a total of 5 cells.

yosys> opt_muxtree

3.53.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.53.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

yosys> opt_merge

3.53.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.53.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.53.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..
Removed 0 unused cells and 9 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.53.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.

3.53.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.53.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.53.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

yosys> opt_merge

3.53.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.53.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.53.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..

yosys> opt_expr

3.53.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.

3.53.16. Finished OPT passes. (There is nothing left to do.)

yosys> abc -script /tmp/yosys_E6fWLm/abc_tmp_2.scr

3.54. Executing ABC pass (technology mapping using ABC).

3.54.1. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Extracted 1173 gates and 1295 wires to a netlist network with 120 inputs and 98 outputs.

3.54.1.1. Executing ABC.
DE:   #PIs = 120  #Luts =   197  Max Lvl =   6  Avg Lvl =   2.55  [   0.19 sec. at Pass 0]
DE:   #PIs = 120  #Luts =   197  Max Lvl =   6  Avg Lvl =   2.55  [   2.01 sec. at Pass 1]
DE:   #PIs = 120  #Luts =   197  Max Lvl =   6  Avg Lvl =   2.55  [   0.68 sec. at Pass 2]
DE:   #PIs = 120  #Luts =   197  Max Lvl =   6  Avg Lvl =   2.55  [   1.81 sec. at Pass 3]
DE:   #PIs = 120  #Luts =   197  Max Lvl =   6  Avg Lvl =   2.55  [   0.50 sec. at Pass 4]
DE:   #PIs = 120  #Luts =   196  Max Lvl =   6  Avg Lvl =   2.52  [   1.33 sec. at Pass 5]
DE:   #PIs = 120  #Luts =   196  Max Lvl =   6  Avg Lvl =   2.52  [   0.43 sec. at Pass 6]
DE:   #PIs = 120  #Luts =   196  Max Lvl =   5  Avg Lvl =   2.47  [   1.82 sec. at Pass 7]
DE:   #PIs = 120  #Luts =   196  Max Lvl =   5  Avg Lvl =   2.47  [   0.74 sec. at Pass 8]
DE:   #PIs = 120  #Luts =   196  Max Lvl =   5  Avg Lvl =   2.47  [   1.81 sec. at Pass 9]
DE:   #PIs = 120  #Luts =   196  Max Lvl =   5  Avg Lvl =   2.47  [   0.65 sec. at Pass 10]
DE:   #PIs = 120  #Luts =   196  Max Lvl =   5  Avg Lvl =   2.47  [   9.28 sec. at Pass 11]
DE:   #PIs = 120  #Luts =   196  Max Lvl =   5  Avg Lvl =   2.47  [   0.29 sec. at Pass 12]

yosys> opt

3.55. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.55.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.

yosys> opt_merge -nomux

3.55.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.55.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.55.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

yosys> opt_merge

3.55.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_dff

3.55.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.55.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..
Removed 0 unused cells and 956 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.55.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.

3.55.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.55.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.55.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

yosys> opt_merge

3.55.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_dff

3.55.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.55.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..

yosys> opt_expr

3.55.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.

3.55.16. Finished OPT passes. (There is nothing left to do.)

yosys> hierarchy -check

3.56. Executing HIERARCHY pass (managing design hierarchy).

3.56.1. Analyzing design hierarchy..
Top module:  \b12

3.56.2. Analyzing design hierarchy..
Top module:  \b12
Removed 0 unused modules.

yosys> stat

3.57. Printing statistics.

=== b12 ===

   Number of wires:                315
   Number of wire bits:            328
   Number of public wires:          12
   Number of public wire bits:      25
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                314
     $lut                          196
     dffsre                        118


yosys> opt_clean -purge

3.58. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..
Removed 0 unused cells and 2 unused wires.
<suppressed ~2 debug messages>

yosys> write_verilog -noattr -nohex synthesized.v

3.59. Executing Verilog backend.

yosys> bmuxmap

3.59.1. Executing BMUXMAP pass.

yosys> demuxmap

3.59.2. Executing DEMUXMAP pass.

yosys> clean_zerowidth
Dumping module `\b12'.

End of script. Logfile hash: e07b4ba139, CPU: user 9.69s system 0.69s, MEM: 36.52 MB peak
Yosys 0.16+65 (git sha1 7987105a9, gcc 9.1.0 -fPIC -Os)
Time spent: 98% 6x abc (665 sec), 0% 50x opt_expr (2 sec), ...
real 138.25
user 635.30
sys 38.43
