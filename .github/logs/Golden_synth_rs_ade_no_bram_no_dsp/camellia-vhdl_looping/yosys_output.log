
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys-Verific 0.0.50
 Yosys 0.18+10 (git sha1 7a7a25778, gcc 9.1.0 -fPIC -Os)


-- Executing script file `yosys.ys' --
echo on

yosys> plugin -i synth-rs

yosys> read -verific

yosys> read -incdir .

yosys> verific -vlog-incdir .

1. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific May22_SW_Release, released at Tue May 31 17:39:28 2022.

yosys> verilog_defaults -add -I.

yosys> read -vhdl camellia.vhd camellia_if.vhd control.vhd datapath.vhd f.vhd fl.vhd sbox1.vhd sbox2.vhd sbox3.vhd sbox4.vhd

yosys> verific -vhdl camellia.vhd camellia_if.vhd control.vhd datapath.vhd f.vhd fl.vhd sbox1.vhd sbox2.vhd sbox3.vhd sbox4.vhd

2. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific May22_SW_Release, released at Tue May 31 17:39:28 2022.
VERIFIC-INFO [VHDL-1504] default VHDL library search path is now "/home/users/khyber.runner/yosys_verific_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008"
VERIFIC-COMMENT [VHDL-1481] Analyzing VHDL file 'camellia.vhd'
VERIFIC-COMMENT [VHDL-1493] Restoring VHDL unit 'ieee.std_logic_1164' from file '/home/users/khyber.runner/yosys_verific_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008/ieee/std_logic_1164.vdb'
VERIFIC-COMMENT [VHDL-1493] Restoring VHDL unit 'std.standard' from file '/home/users/khyber.runner/yosys_verific_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008/std/standard.vdb'
VERIFIC-COMMENT [VHDL-1493] Restoring VHDL unit 'std.textio' from file '/home/users/khyber.runner/yosys_verific_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008/std/textio.vdb'
VERIFIC-INFO [VHDL-1012] camellia.vhd:30: analyzing entity 'camellia'
VERIFIC-INFO [VHDL-1010] camellia.vhd:54: analyzing architecture 'rtl'
VERIFIC-COMMENT [VHDL-1481] Analyzing VHDL file 'camellia_if.vhd'
VERIFIC-COMMENT [VHDL-1493] Restoring VHDL unit 'ieee.std_logic_unsigned' from file '/home/users/khyber.runner/yosys_verific_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008/ieee/std_logic_unsigned.vdb'
VERIFIC-COMMENT [VHDL-1493] Restoring VHDL unit 'ieee.std_logic_arith' from file '/home/users/khyber.runner/yosys_verific_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008/ieee/std_logic_arith.vdb'
VERIFIC-INFO [VHDL-1012] camellia_if.vhd:32: analyzing entity 'camellia_if'
VERIFIC-INFO [VHDL-1010] camellia_if.vhd:49: analyzing architecture 'rtl'
VERIFIC-COMMENT [VHDL-1481] Analyzing VHDL file 'control.vhd'
VERIFIC-INFO [VHDL-1012] control.vhd:30: analyzing entity 'control'
VERIFIC-INFO [VHDL-1010] control.vhd:57: analyzing architecture 'rtl'
VERIFIC-COMMENT [VHDL-1481] Analyzing VHDL file 'datapath.vhd'
VERIFIC-INFO [VHDL-1012] datapath.vhd:30: analyzing entity 'datapath'
VERIFIC-INFO [VHDL-1010] datapath.vhd:45: analyzing architecture 'rtl'
VERIFIC-COMMENT [VHDL-1481] Analyzing VHDL file 'f.vhd'
VERIFIC-INFO [VHDL-1012] f.vhd:30: analyzing entity 'f'
VERIFIC-INFO [VHDL-1010] f.vhd:38: analyzing architecture 'rtl'
VERIFIC-COMMENT [VHDL-1481] Analyzing VHDL file 'fl.vhd'
VERIFIC-INFO [VHDL-1012] fl.vhd:31: analyzing entity 'fl'
VERIFIC-INFO [VHDL-1010] fl.vhd:42: analyzing architecture 'rtl'
VERIFIC-COMMENT [VHDL-1481] Analyzing VHDL file 'sbox1.vhd'
VERIFIC-INFO [VHDL-1012] sbox1.vhd:31: analyzing entity 'sbox1'
VERIFIC-INFO [VHDL-1010] sbox1.vhd:38: analyzing architecture 'rtl'
VERIFIC-COMMENT [VHDL-1481] Analyzing VHDL file 'sbox2.vhd'
VERIFIC-INFO [VHDL-1012] sbox2.vhd:31: analyzing entity 'sbox2'
VERIFIC-INFO [VHDL-1010] sbox2.vhd:38: analyzing architecture 'rtl'
VERIFIC-COMMENT [VHDL-1481] Analyzing VHDL file 'sbox3.vhd'
VERIFIC-INFO [VHDL-1012] sbox3.vhd:31: analyzing entity 'sbox3'
VERIFIC-INFO [VHDL-1010] sbox3.vhd:38: analyzing architecture 'rtl'
VERIFIC-COMMENT [VHDL-1481] Analyzing VHDL file 'sbox4.vhd'
VERIFIC-INFO [VHDL-1012] sbox4.vhd:31: analyzing entity 'sbox4'
VERIFIC-INFO [VHDL-1010] sbox4.vhd:38: analyzing architecture 'rtl'

yosys> synth_rs -top CAMELLIA_IF -tech genesis -goal area -de -no_dsp -no_bram -verilog synthesized.v

3. Executing synth_rs pass: v0.4.59

yosys> read_verilog -lib -specify -nomem2reg +/rapidsilicon/common/cells_sim.v +/rapidsilicon/genesis/cells_sim.v

3.1. Executing Verilog-2005 frontend: /home/users/khyber.runner/yosys_verific_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v
Parsing Verilog input from `/home/users/khyber.runner/yosys_verific_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\inv'.
Generating RTLIL representation for module `\buff'.
Generating RTLIL representation for module `\logic_0'.
Generating RTLIL representation for module `\logic_1'.
Generating RTLIL representation for module `\gclkbuff'.
Successfully finished Verilog frontend.

3.2. Executing Verilog-2005 frontend: /home/users/khyber.runner/yosys_verific_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/cells_sim.v
Parsing Verilog input from `/home/users/khyber.runner/yosys_verific_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\dffsre'.
Generating RTLIL representation for module `\dffnsre'.
Generating RTLIL representation for module `\latchsre'.
Generating RTLIL representation for module `\latchnsre'.
Generating RTLIL representation for module `\io_scff'.
Generating RTLIL representation for module `\scff'.
Generating RTLIL representation for module `\sh_dff'.
Generating RTLIL representation for module `\adder_carry'.
Generating RTLIL representation for module `\sdffr'.
Generating RTLIL representation for module `\sdffs'.
Generating RTLIL representation for module `\TDP_BRAM18'.
Generating RTLIL representation for module `\TDP36K'.
Generating RTLIL representation for module `\RS_DSP1'.
Generating RTLIL representation for module `\RS_DSP2'.
Generating RTLIL representation for module `\RS_DSP2_MULT'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGIN_REGOUT'.
Generating RTLIL representation for module `\dsp_t1_sim'.
Generating RTLIL representation for module `\dsp_t1_20x18x64'.
Generating RTLIL representation for module `\dsp_t1_10x9x32'.
Successfully finished Verilog frontend.

yosys> hierarchy -check -top CAMELLIA_IF

3.3. Executing HIERARCHY pass (managing design hierarchy).
VERIFIC-INFO [VHDL-1067] camellia_if.vhd:32: processing 'CAMELLIA_IF(RTL)'
VERIFIC-INFO [VHDL-1067] camellia.vhd:30: processing 'camellia(RTL)'
VERIFIC-INFO [VHDL-1067] datapath.vhd:30: processing 'datapath(RTL)'
VERIFIC-INFO [VHDL-1067] f.vhd:30: processing 'F(RTL)'
VERIFIC-INFO [VHDL-1067] sbox1.vhd:31: processing 'SBOX1(RTL)'
VERIFIC-INFO [VHDL-1067] sbox2.vhd:31: processing 'SBOX2(RTL)'
VERIFIC-INFO [VHDL-1067] sbox3.vhd:31: processing 'SBOX3(RTL)'
VERIFIC-INFO [VHDL-1067] sbox4.vhd:31: processing 'SBOX4(RTL)'
VERIFIC-INFO [VHDL-1067] fl.vhd:31: processing 'FL(RTL)'
VERIFIC-INFO [VHDL-1067] control.vhd:30: processing 'control(RTL)'
VERIFIC-WARNING [VHDL-1251] control.vhd:721: 'reg_k_len' should be on the sensitivity list of the process
VERIFIC-WARNING [VHDL-1251] control.vhd:773: 'reg_k_len' should be on the sensitivity list of the process
VERIFIC-WARNING [VHDL-1613] control.vhd:819: incomplete sensitivity list specified; assuming completeness
Importing module CAMELLIA_IF.
Importing module camellia(RTL).
Importing module control(RTL).
Importing module datapath(RTL).
Importing module F(RTL).
Importing module FL(RTL).
Importing module SBOX1(RTL).
Importing module SBOX2(RTL).
Importing module SBOX3(RTL).
Importing module SBOX4(RTL).

3.3.1. Analyzing design hierarchy..
Top module:  \CAMELLIA_IF
Used module:     \camellia(RTL)
Used module:         \control(RTL)
Used module:         \datapath(RTL)
Used module:             \FL(RTL)
Used module:             \F(RTL)
Used module:                 \SBOX4(RTL)
Used module:                     \SBOX1(RTL)
Used module:                 \SBOX3(RTL)
Used module:                 \SBOX2(RTL)

3.3.2. Analyzing design hierarchy..
Top module:  \CAMELLIA_IF
Used module:     \camellia(RTL)
Used module:         \control(RTL)
Used module:         \datapath(RTL)
Used module:             \FL(RTL)
Used module:             \F(RTL)
Used module:                 \SBOX4(RTL)
Used module:                     \SBOX1(RTL)
Used module:                 \SBOX3(RTL)
Used module:                 \SBOX2(RTL)
Removed 0 unused modules.

yosys> proc

3.4. Executing PROC pass (convert processes to netlists).

yosys> proc_clean

3.4.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> proc_rmdead

3.4.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

yosys> proc_prune

3.4.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

yosys> proc_init

3.4.4. Executing PROC_INIT pass (extract init attributes).

yosys> proc_arst

3.4.5. Executing PROC_ARST pass (detect async resets in processes).

yosys> proc_rom

3.4.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

yosys> proc_mux

3.4.7. Executing PROC_MUX pass (convert decision trees to multiplexers).

yosys> proc_dlatch

3.4.8. Executing PROC_DLATCH pass (convert process syncs to latches).

yosys> proc_dff

3.4.9. Executing PROC_DFF pass (convert process syncs to FFs).

yosys> proc_memwr

3.4.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

yosys> proc_clean

3.4.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> opt_expr -keepdc

3.4.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module SBOX4(RTL).
Optimizing module SBOX3(RTL).
Optimizing module SBOX2(RTL).
Optimizing module SBOX1(RTL).
Optimizing module FL(RTL).
Optimizing module F(RTL).
Optimizing module datapath(RTL).
<suppressed ~1 debug messages>
Optimizing module control(RTL).
<suppressed ~35 debug messages>
Optimizing module camellia(RTL).
Optimizing module CAMELLIA_IF.
<suppressed ~5 debug messages>

yosys> bmuxmap

3.5. Executing BMUXMAP pass.

yosys> demuxmap

3.6. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> flatten

3.7. Executing FLATTEN pass (flatten design).
Deleting now unused module F(RTL).
Deleting now unused module FL(RTL).
Deleting now unused module SBOX1(RTL).
Deleting now unused module SBOX2(RTL).
Deleting now unused module SBOX3(RTL).
Deleting now unused module SBOX4(RTL).
Deleting now unused module camellia(RTL).
Deleting now unused module control(RTL).
Deleting now unused module datapath(RTL).
<suppressed ~16 debug messages>

yosys> bmuxmap

3.8. Executing BMUXMAP pass.

yosys> demuxmap

3.9. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> tribuf -logic

3.10. Executing TRIBUF pass.

yosys> deminout

3.11. Executing DEMINOUT pass (demote inout ports to input or output).

yosys> opt_expr

3.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module CAMELLIA_IF.
<suppressed ~579 debug messages>

yosys> opt_clean

3.13. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \CAMELLIA_IF..
Removed 2 unused cells and 3314 unused wires.
<suppressed ~146 debug messages>

yosys> check

3.14. Executing CHECK pass (checking for obvious problems).
Checking module CAMELLIA_IF...
Found and reported 0 problems.

yosys> opt -nodffe -nosdff

3.15. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module CAMELLIA_IF.

yosys> opt_merge -nomux

3.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\CAMELLIA_IF'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.15.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \CAMELLIA_IF..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port B of cell $verific$i78$camellia_if.vhd:200$642: \int_out_rdy -> 1'1
      Replacing known input bits on port A of cell $verific$i84$camellia_if.vhd:206$646: \int_out_rdy -> 1'0
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~59 debug messages>

yosys> opt_reduce

3.15.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \CAMELLIA_IF.
    New ctrl vector for $pmux cell $flatten\core.\CTRL.$verific$select_512$control.vhd:637$2840: { $auto$opt_reduce.cc:134:opt_pmux$5078 $flatten\core.\CTRL.$verific$n34317$2369 $flatten\core.\CTRL.$verific$n34318$2370 }
  Optimizing cells in module \CAMELLIA_IF.
Performed a total of 1 changes.

yosys> opt_merge

3.15.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\CAMELLIA_IF'.
<suppressed ~12 debug messages>
Removed a total of 4 cells.

yosys> opt_dff -nodffe -nosdff

3.15.6. Executing OPT_DFF pass (perform DFF optimizations).
Changing const-value async load to async reset on $verific$s_key_rdy_reg$camellia_if.vhd:146$615 ($aldff) from module CAMELLIA_IF.
Changing const-value async load to async reset on $verific$s_data_rdy_reg$camellia_if.vhd:181$634 ($aldff) from module CAMELLIA_IF.
Changing const-value async load to async reset on $verific$reg_next_key_reg$camellia_if.vhd:146$612 ($aldff) from module CAMELLIA_IF.
Changing const-value async load to async reset on $verific$reg_next_data_reg$camellia_if.vhd:181$631 ($aldff) from module CAMELLIA_IF.
Changing const-value async load to async reset on $verific$reg_key_reg$camellia_if.vhd:146$614 ($aldff) from module CAMELLIA_IF.
Changing const-value async load to async reset on $verific$reg_dout_reg$camellia_if.vhd:208$652 ($aldff) from module CAMELLIA_IF.
Changing const-value async load to async reset on $verific$reg_din_reg$camellia_if.vhd:181$633 ($aldff) from module CAMELLIA_IF.
Changing const-value async load to async reset on $verific$key_count_reg$camellia_if.vhd:146$613 ($aldff) from module CAMELLIA_IF.
Changing const-value async load to async reset on $verific$int_out_rdy_reg$camellia_if.vhd:208$651 ($aldff) from module CAMELLIA_IF.
Changing const-value async load to async reset on $verific$dout_count_reg$camellia_if.vhd:208$650 ($aldff) from module CAMELLIA_IF.
Changing const-value async load to async reset on $verific$din_count_reg$camellia_if.vhd:181$632 ($aldff) from module CAMELLIA_IF.
Changing const-value async load to async reset on $flatten\core.\DP.$verific$reg_sel_reg$datapath.vhd:144$3551 ($aldff) from module CAMELLIA_IF.
Changing const-value async load to async reset on $flatten\core.\DP.$verific$reg_mux2_pxor_reg$datapath.vhd:144$3550 ($aldff) from module CAMELLIA_IF.
Changing const-value async load to async reset on $flatten\core.\DP.$verific$reg_fli_out_reg$datapath.vhd:144$3548 ($aldff) from module CAMELLIA_IF.
Changing const-value async load to async reset on $flatten\core.\DP.$verific$reg_fl_out_reg$datapath.vhd:144$3547 ($aldff) from module CAMELLIA_IF.
Changing const-value async load to async reset on $flatten\core.\DP.$verific$reg_f_out_xor_reg$datapath.vhd:144$3549 ($aldff) from module CAMELLIA_IF.
Changing const-value async load to async reset on $flatten\core.\CTRL.$verific$reg_kr_s_reg$control.vhd:690$2874 ($aldff) from module CAMELLIA_IF.
Changing const-value async load to async reset on $flatten\core.\CTRL.$verific$reg_kr_reg$control.vhd:690$2873 ($aldff) from module CAMELLIA_IF.
Changing const-value async load to async reset on $flatten\core.\CTRL.$verific$reg_kl_s_reg$control.vhd:690$2871 ($aldff) from module CAMELLIA_IF.
Changing const-value async load to async reset on $flatten\core.\CTRL.$verific$reg_kl_reg$control.vhd:690$2870 ($aldff) from module CAMELLIA_IF.
Changing const-value async load to async reset on $flatten\core.\CTRL.$verific$reg_kb_s_reg$control.vhd:690$2879 ($aldff) from module CAMELLIA_IF.
Changing const-value async load to async reset on $flatten\core.\CTRL.$verific$reg_kb_reg$control.vhd:690$2878 ($aldff) from module CAMELLIA_IF.
Changing const-value async load to async reset on $flatten\core.\CTRL.$verific$reg_ka_s_reg$control.vhd:690$2877 ($aldff) from module CAMELLIA_IF.
Changing const-value async load to async reset on $flatten\core.\CTRL.$verific$reg_ka_reg$control.vhd:690$2876 ($aldff) from module CAMELLIA_IF.
Changing const-value async load to async reset on $flatten\core.\CTRL.$verific$reg_k_len_reg$control.vhd:690$2872 ($aldff) from module CAMELLIA_IF.
Changing const-value async load to async reset on $flatten\core.\CTRL.$verific$reg_enc_dec_reg$control.vhd:690$2880 ($aldff) from module CAMELLIA_IF.
Removing never-active async load on $flatten\core.\CTRL.$verific$prexor_sel_reg$control.vhd:690$2883 ($aldff) from module CAMELLIA_IF.
Removing never-active async load on $flatten\core.\CTRL.$verific$postxor_sel_reg$control.vhd:690$2884 ($aldff) from module CAMELLIA_IF.
Changing const-value async load to async reset on $flatten\core.\CTRL.$verific$output_rdy_reg$control.vhd:690$2886 ($aldff) from module CAMELLIA_IF.
Removing never-active async load on $flatten\core.\CTRL.$verific$k2_sel_reg$control.vhd:690$2881 ($aldff) from module CAMELLIA_IF.
Removing never-active async load on $flatten\core.\CTRL.$verific$k1_sel_reg$control.vhd:690$2875 ($aldff) from module CAMELLIA_IF.
Removing never-active async load on $flatten\core.\CTRL.$verific$data_to_reg$control.vhd:690$2882 ($aldff) from module CAMELLIA_IF.
Changing const-value async load to async reset on $flatten\core.\CTRL.$verific$REGISTERS_UPDATE.coming_from_key_reg$control.vhd:690$2869 ($aldff) from module CAMELLIA_IF.
Changing const-value async load to async reset on $flatten\core.\CTRL.$verific$PS_reg$control.vhd:703$2901 ($aldff) from module CAMELLIA_IF.

yosys> opt_clean

3.15.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \CAMELLIA_IF..

yosys> opt_expr

3.15.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module CAMELLIA_IF.

3.15.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.15.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \CAMELLIA_IF..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~63 debug messages>

yosys> opt_reduce

3.15.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \CAMELLIA_IF.
Performed a total of 0 changes.

yosys> opt_merge

3.15.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\CAMELLIA_IF'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.15.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.15.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \CAMELLIA_IF..

yosys> opt_expr

3.15.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module CAMELLIA_IF.

3.15.16. Finished OPT passes. (There is nothing left to do.)

yosys> fsm -encoding binary

3.16. Executing FSM pass (extract and optimize FSM).

yosys> fsm_detect

3.16.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking CAMELLIA_IF.core.CTRL.PS as FSM state register:
    Users of register don't seem to benefit from recoding.
Not marking CAMELLIA_IF.core.CTRL.k1_sel as FSM state register:
    Users of register don't seem to benefit from recoding.
Not marking CAMELLIA_IF.core.CTRL.k2_sel as FSM state register:
    Users of register don't seem to benefit from recoding.
Not marking CAMELLIA_IF.core.CTRL.postxor_sel as FSM state register:
    Users of register don't seem to benefit from recoding.
Not marking CAMELLIA_IF.core.CTRL.prexor_sel as FSM state register:
    Users of register don't seem to benefit from recoding.

yosys> fsm_extract

3.16.2. Executing FSM_EXTRACT pass (extracting FSM from design).

yosys> fsm_opt

3.16.3. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> opt_clean

3.16.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \CAMELLIA_IF..

yosys> fsm_opt

3.16.5. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> fsm_recode -encoding binary

3.16.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

yosys> fsm_info

3.16.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

yosys> fsm_map

3.16.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

yosys> opt -sat -nosdff

3.17. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.17.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module CAMELLIA_IF.

yosys> opt_merge -nomux

3.17.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\CAMELLIA_IF'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.17.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \CAMELLIA_IF..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~63 debug messages>

yosys> opt_reduce

3.17.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \CAMELLIA_IF.
Performed a total of 0 changes.

yosys> opt_merge

3.17.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\CAMELLIA_IF'.
Removed a total of 0 cells.

yosys> opt_dff -sat -nosdff

3.17.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $verific$s_key_rdy_reg$camellia_if.vhd:146$615 ($adff) from module CAMELLIA_IF (D = $verific$n2119$19, Q = \s_key_rdy).
Adding EN signal on $verific$s_data_rdy_reg$camellia_if.vhd:181$634 ($adff) from module CAMELLIA_IF (D = $verific$n2808$26, Q = \s_data_rdy).
Adding EN signal on $verific$reg_next_key_reg$camellia_if.vhd:146$612 ($adff) from module CAMELLIA_IF (D = $verific$n1843$7, Q = \reg_next_key).
Adding EN signal on $verific$reg_next_data_reg$camellia_if.vhd:181$631 ($adff) from module CAMELLIA_IF (D = $verific$n2669$22, Q = \reg_next_data).
Adding EN signal on $verific$reg_key_reg$camellia_if.vhd:146$614 ($adff) from module CAMELLIA_IF (D = $auto$bmuxmap.cc:58:execute$5075, Q = { \reg_key [0] \reg_key [1] \reg_key [2] \reg_key [3] \reg_key [4] \reg_key [5] \reg_key [6] \reg_key [7] \reg_key [8] \reg_key [9] \reg_key [10] \reg_key [11] \reg_key [12] \reg_key [13] \reg_key [14] \reg_key [15] \reg_key [16] \reg_key [17] \reg_key [18] \reg_key [19] \reg_key [20] \reg_key [21] \reg_key [22] \reg_key [23] \reg_key [24] \reg_key [25] \reg_key [26] \reg_key [27] \reg_key [28] \reg_key [29] \reg_key [30] \reg_key [31] \reg_key [32] \reg_key [33] \reg_key [34] \reg_key [35] \reg_key [36] \reg_key [37] \reg_key [38] \reg_key [39] \reg_key [40] \reg_key [41] \reg_key [42] \reg_key [43] \reg_key [44] \reg_key [45] \reg_key [46] \reg_key [47] \reg_key [48] \reg_key [49] \reg_key [50] \reg_key [51] \reg_key [52] \reg_key [53] \reg_key [54] \reg_key [55] \reg_key [56] \reg_key [57] \reg_key [58] \reg_key [59] \reg_key [60] \reg_key [61] \reg_key [62] \reg_key [63] \reg_key [64] \reg_key [65] \reg_key [66] \reg_key [67] \reg_key [68] \reg_key [69] \reg_key [70] \reg_key [71] \reg_key [72] \reg_key [73] \reg_key [74] \reg_key [75] \reg_key [76] \reg_key [77] \reg_key [78] \reg_key [79] \reg_key [80] \reg_key [81] \reg_key [82] \reg_key [83] \reg_key [84] \reg_key [85] \reg_key [86] \reg_key [87] \reg_key [88] \reg_key [89] \reg_key [90] \reg_key [91] \reg_key [92] \reg_key [93] \reg_key [94] \reg_key [95] \reg_key [96] \reg_key [97] \reg_key [98] \reg_key [99] \reg_key [100] \reg_key [101] \reg_key [102] \reg_key [103] \reg_key [104] \reg_key [105] \reg_key [106] \reg_key [107] \reg_key [108] \reg_key [109] \reg_key [110] \reg_key [111] \reg_key [112] \reg_key [113] \reg_key [114] \reg_key [115] \reg_key [116] \reg_key [117] \reg_key [118] \reg_key [119] \reg_key [120] \reg_key [121] \reg_key [122] \reg_key [123] \reg_key [124] \reg_key [125] \reg_key [126] \reg_key [127] \reg_key [128] \reg_key [129] \reg_key [130] \reg_key [131] \reg_key [132] \reg_key [133] \reg_key [134] \reg_key [135] \reg_key [136] \reg_key [137] \reg_key [138] \reg_key [139] \reg_key [140] \reg_key [141] \reg_key [142] \reg_key [143] \reg_key [144] \reg_key [145] \reg_key [146] \reg_key [147] \reg_key [148] \reg_key [149] \reg_key [150] \reg_key [151] \reg_key [152] \reg_key [153] \reg_key [154] \reg_key [155] \reg_key [156] \reg_key [157] \reg_key [158] \reg_key [159] \reg_key [160] \reg_key [161] \reg_key [162] \reg_key [163] \reg_key [164] \reg_key [165] \reg_key [166] \reg_key [167] \reg_key [168] \reg_key [169] \reg_key [170] \reg_key [171] \reg_key [172] \reg_key [173] \reg_key [174] \reg_key [175] \reg_key [176] \reg_key [177] \reg_key [178] \reg_key [179] \reg_key [180] \reg_key [181] \reg_key [182] \reg_key [183] \reg_key [184] \reg_key [185] \reg_key [186] \reg_key [187] \reg_key [188] \reg_key [189] \reg_key [190] \reg_key [191] \reg_key [192] \reg_key [193] \reg_key [194] \reg_key [195] \reg_key [196] \reg_key [197] \reg_key [198] \reg_key [199] \reg_key [200] \reg_key [201] \reg_key [202] \reg_key [203] \reg_key [204] \reg_key [205] \reg_key [206] \reg_key [207] \reg_key [208] \reg_key [209] \reg_key [210] \reg_key [211] \reg_key [212] \reg_key [213] \reg_key [214] \reg_key [215] \reg_key [216] \reg_key [217] \reg_key [218] \reg_key [219] \reg_key [220] \reg_key [221] \reg_key [222] \reg_key [223] \reg_key [224] \reg_key [225] \reg_key [226] \reg_key [227] \reg_key [228] \reg_key [229] \reg_key [230] \reg_key [231] \reg_key [232] \reg_key [233] \reg_key [234] \reg_key [235] \reg_key [236] \reg_key [237] \reg_key [238] \reg_key [239] \reg_key [240] \reg_key [241] \reg_key [242] \reg_key [243] \reg_key [244] \reg_key [245] \reg_key [246] \reg_key [247] \reg_key [248] \reg_key [249] \reg_key [250] \reg_key [251] \reg_key [252] \reg_key [253] \reg_key [254] \reg_key [255] }).
Adding EN signal on $verific$reg_dout_reg$camellia_if.vhd:208$652 ($adff) from module CAMELLIA_IF (D = $verific$n3628$62, Q = { \reg_dout [0] \reg_dout [1] \reg_dout [2] \reg_dout [3] \reg_dout [4] \reg_dout [5] \reg_dout [6] \reg_dout [7] \reg_dout [8] \reg_dout [9] \reg_dout [10] \reg_dout [11] \reg_dout [12] \reg_dout [13] \reg_dout [14] \reg_dout [15] \reg_dout [16] \reg_dout [17] \reg_dout [18] \reg_dout [19] \reg_dout [20] \reg_dout [21] \reg_dout [22] \reg_dout [23] \reg_dout [24] \reg_dout [25] \reg_dout [26] \reg_dout [27] \reg_dout [28] \reg_dout [29] \reg_dout [30] \reg_dout [31] \reg_dout [32] \reg_dout [33] \reg_dout [34] \reg_dout [35] \reg_dout [36] \reg_dout [37] \reg_dout [38] \reg_dout [39] \reg_dout [40] \reg_dout [41] \reg_dout [42] \reg_dout [43] \reg_dout [44] \reg_dout [45] \reg_dout [46] \reg_dout [47] \reg_dout [48] \reg_dout [49] \reg_dout [50] \reg_dout [51] \reg_dout [52] \reg_dout [53] \reg_dout [54] \reg_dout [55] \reg_dout [56] \reg_dout [57] \reg_dout [58] \reg_dout [59] \reg_dout [60] \reg_dout [61] \reg_dout [62] \reg_dout [63] \reg_dout [64] \reg_dout [65] \reg_dout [66] \reg_dout [67] \reg_dout [68] \reg_dout [69] \reg_dout [70] \reg_dout [71] \reg_dout [72] \reg_dout [73] \reg_dout [74] \reg_dout [75] \reg_dout [76] \reg_dout [77] \reg_dout [78] \reg_dout [79] \reg_dout [80] \reg_dout [81] \reg_dout [82] \reg_dout [83] \reg_dout [84] \reg_dout [85] \reg_dout [86] \reg_dout [87] \reg_dout [88] \reg_dout [89] \reg_dout [90] \reg_dout [91] \reg_dout [92] \reg_dout [93] \reg_dout [94] \reg_dout [95] \reg_dout [96] \reg_dout [97] \reg_dout [98] \reg_dout [99] \reg_dout [100] \reg_dout [101] \reg_dout [102] \reg_dout [103] \reg_dout [104] \reg_dout [105] \reg_dout [106] \reg_dout [107] \reg_dout [108] \reg_dout [109] \reg_dout [110] \reg_dout [111] \reg_dout [112] \reg_dout [113] \reg_dout [114] \reg_dout [115] \reg_dout [116] \reg_dout [117] \reg_dout [118] \reg_dout [119] \reg_dout [120] \reg_dout [121] \reg_dout [122] \reg_dout [123] \reg_dout [124] \reg_dout [125] \reg_dout [126] \reg_dout [127] }).
Adding EN signal on $verific$reg_din_reg$camellia_if.vhd:181$633 ($adff) from module CAMELLIA_IF (D = { \reg_din [16] \reg_din [17] \reg_din [18] \reg_din [19] \reg_din [20] \reg_din [21] \reg_din [22] \reg_din [23] \reg_din [24] \reg_din [25] \reg_din [26] \reg_din [27] \reg_din [28] \reg_din [29] \reg_din [30] \reg_din [31] \reg_din [32] \reg_din [33] \reg_din [34] \reg_din [35] \reg_din [36] \reg_din [37] \reg_din [38] \reg_din [39] \reg_din [40] \reg_din [41] \reg_din [42] \reg_din [43] \reg_din [44] \reg_din [45] \reg_din [46] \reg_din [47] \reg_din [48] \reg_din [49] \reg_din [50] \reg_din [51] \reg_din [52] \reg_din [53] \reg_din [54] \reg_din [55] \reg_din [56] \reg_din [57] \reg_din [58] \reg_din [59] \reg_din [60] \reg_din [61] \reg_din [62] \reg_din [63] \reg_din [64] \reg_din [65] \reg_din [66] \reg_din [67] \reg_din [68] \reg_din [69] \reg_din [70] \reg_din [71] \reg_din [72] \reg_din [73] \reg_din [74] \reg_din [75] \reg_din [76] \reg_din [77] \reg_din [78] \reg_din [79] \reg_din [80] \reg_din [81] \reg_din [82] \reg_din [83] \reg_din [84] \reg_din [85] \reg_din [86] \reg_din [87] \reg_din [88] \reg_din [89] \reg_din [90] \reg_din [91] \reg_din [92] \reg_din [93] \reg_din [94] \reg_din [95] \reg_din [96] \reg_din [97] \reg_din [98] \reg_din [99] \reg_din [100] \reg_din [101] \reg_din [102] \reg_din [103] \reg_din [104] \reg_din [105] \reg_din [106] \reg_din [107] \reg_din [108] \reg_din [109] \reg_din [110] \reg_din [111] \reg_din [112] \reg_din [113] \reg_din [114] \reg_din [115] \reg_din [116] \reg_din [117] \reg_din [118] \reg_din [119] \reg_din [120] \reg_din [121] \reg_din [122] \reg_din [123] \reg_din [124] \reg_din [125] \reg_din [126] \reg_din [127] \data_in [0] \data_in [1] \data_in [2] \data_in [3] \data_in [4] \data_in [5] \data_in [6] \data_in [7] \data_in [8] \data_in [9] \data_in [10] \data_in [11] \data_in [12] \data_in [13] \data_in [14] \data_in [15] }, Q = { \reg_din [0] \reg_din [1] \reg_din [2] \reg_din [3] \reg_din [4] \reg_din [5] \reg_din [6] \reg_din [7] \reg_din [8] \reg_din [9] \reg_din [10] \reg_din [11] \reg_din [12] \reg_din [13] \reg_din [14] \reg_din [15] \reg_din [16] \reg_din [17] \reg_din [18] \reg_din [19] \reg_din [20] \reg_din [21] \reg_din [22] \reg_din [23] \reg_din [24] \reg_din [25] \reg_din [26] \reg_din [27] \reg_din [28] \reg_din [29] \reg_din [30] \reg_din [31] \reg_din [32] \reg_din [33] \reg_din [34] \reg_din [35] \reg_din [36] \reg_din [37] \reg_din [38] \reg_din [39] \reg_din [40] \reg_din [41] \reg_din [42] \reg_din [43] \reg_din [44] \reg_din [45] \reg_din [46] \reg_din [47] \reg_din [48] \reg_din [49] \reg_din [50] \reg_din [51] \reg_din [52] \reg_din [53] \reg_din [54] \reg_din [55] \reg_din [56] \reg_din [57] \reg_din [58] \reg_din [59] \reg_din [60] \reg_din [61] \reg_din [62] \reg_din [63] \reg_din [64] \reg_din [65] \reg_din [66] \reg_din [67] \reg_din [68] \reg_din [69] \reg_din [70] \reg_din [71] \reg_din [72] \reg_din [73] \reg_din [74] \reg_din [75] \reg_din [76] \reg_din [77] \reg_din [78] \reg_din [79] \reg_din [80] \reg_din [81] \reg_din [82] \reg_din [83] \reg_din [84] \reg_din [85] \reg_din [86] \reg_din [87] \reg_din [88] \reg_din [89] \reg_din [90] \reg_din [91] \reg_din [92] \reg_din [93] \reg_din [94] \reg_din [95] \reg_din [96] \reg_din [97] \reg_din [98] \reg_din [99] \reg_din [100] \reg_din [101] \reg_din [102] \reg_din [103] \reg_din [104] \reg_din [105] \reg_din [106] \reg_din [107] \reg_din [108] \reg_din [109] \reg_din [110] \reg_din [111] \reg_din [112] \reg_din [113] \reg_din [114] \reg_din [115] \reg_din [116] \reg_din [117] \reg_din [118] \reg_din [119] \reg_din [120] \reg_din [121] \reg_din [122] \reg_din [123] \reg_din [124] \reg_din [125] \reg_din [126] \reg_din [127] }).
Adding EN signal on $verific$dout_count_reg$camellia_if.vhd:208$650 ($adff) from module CAMELLIA_IF (D = $verific$n3624$61, Q = \dout_count).
Adding EN signal on $flatten\core.\CTRL.$verific$sel_reg$control.vhd:690$2887 ($dff) from module CAMELLIA_IF (D = $flatten\core.\CTRL.$verific$n34380$2385, Q = \core.CTRL.sel).
Adding EN signal on $flatten\core.\CTRL.$verific$reg_kr_s_reg$control.vhd:690$2874 ($adff) from module CAMELLIA_IF (D = $flatten\core.\CTRL.$auto$bmuxmap.cc:58:execute$4607, Q = { \core.CTRL.reg_kr_s [0] \core.CTRL.reg_kr_s [1] \core.CTRL.reg_kr_s [2] \core.CTRL.reg_kr_s [3] \core.CTRL.reg_kr_s [4] \core.CTRL.reg_kr_s [5] \core.CTRL.reg_kr_s [6] \core.CTRL.reg_kr_s [7] \core.CTRL.reg_kr_s [8] \core.CTRL.reg_kr_s [9] \core.CTRL.reg_kr_s [10] \core.CTRL.reg_kr_s [11] \core.CTRL.reg_kr_s [12] \core.CTRL.reg_kr_s [13] \core.CTRL.reg_kr_s [14] \core.CTRL.reg_kr_s [15] \core.CTRL.reg_kr_s [16] \core.CTRL.reg_kr_s [17] \core.CTRL.reg_kr_s [18] \core.CTRL.reg_kr_s [19] \core.CTRL.reg_kr_s [20] \core.CTRL.reg_kr_s [21] \core.CTRL.reg_kr_s [22] \core.CTRL.reg_kr_s [23] \core.CTRL.reg_kr_s [24] \core.CTRL.reg_kr_s [25] \core.CTRL.reg_kr_s [26] \core.CTRL.reg_kr_s [27] \core.CTRL.reg_kr_s [28] \core.CTRL.reg_kr_s [29] \core.CTRL.reg_kr_s [30] \core.CTRL.reg_kr_s [31] \core.CTRL.reg_kr_s [32] \core.CTRL.reg_kr_s [33] \core.CTRL.reg_kr_s [34] \core.CTRL.reg_kr_s [35] \core.CTRL.reg_kr_s [36] \core.CTRL.reg_kr_s [37] \core.CTRL.reg_kr_s [38] \core.CTRL.reg_kr_s [39] \core.CTRL.reg_kr_s [40] \core.CTRL.reg_kr_s [41] \core.CTRL.reg_kr_s [42] \core.CTRL.reg_kr_s [43] \core.CTRL.reg_kr_s [44] \core.CTRL.reg_kr_s [45] \core.CTRL.reg_kr_s [46] \core.CTRL.reg_kr_s [47] \core.CTRL.reg_kr_s [48] \core.CTRL.reg_kr_s [49] \core.CTRL.reg_kr_s [50] \core.CTRL.reg_kr_s [51] \core.CTRL.reg_kr_s [52] \core.CTRL.reg_kr_s [53] \core.CTRL.reg_kr_s [54] \core.CTRL.reg_kr_s [55] \core.CTRL.reg_kr_s [56] \core.CTRL.reg_kr_s [57] \core.CTRL.reg_kr_s [58] \core.CTRL.reg_kr_s [59] \core.CTRL.reg_kr_s [60] \core.CTRL.reg_kr_s [61] \core.CTRL.reg_kr_s [62] \core.CTRL.reg_kr_s [63] \core.CTRL.reg_kr_s [64] \core.CTRL.reg_kr_s [65] \core.CTRL.reg_kr_s [66] \core.CTRL.reg_kr_s [67] \core.CTRL.reg_kr_s [68] \core.CTRL.reg_kr_s [69] \core.CTRL.reg_kr_s [70] \core.CTRL.reg_kr_s [71] \core.CTRL.reg_kr_s [72] \core.CTRL.reg_kr_s [73] \core.CTRL.reg_kr_s [74] \core.CTRL.reg_kr_s [75] \core.CTRL.reg_kr_s [76] \core.CTRL.reg_kr_s [77] \core.CTRL.reg_kr_s [78] \core.CTRL.reg_kr_s [79] \core.CTRL.reg_kr_s [80] \core.CTRL.reg_kr_s [81] \core.CTRL.reg_kr_s [82] \core.CTRL.reg_kr_s [83] \core.CTRL.reg_kr_s [84] \core.CTRL.reg_kr_s [85] \core.CTRL.reg_kr_s [86] \core.CTRL.reg_kr_s [87] \core.CTRL.reg_kr_s [88] \core.CTRL.reg_kr_s [89] \core.CTRL.reg_kr_s [90] \core.CTRL.reg_kr_s [91] \core.CTRL.reg_kr_s [92] \core.CTRL.reg_kr_s [93] \core.CTRL.reg_kr_s [94] \core.CTRL.reg_kr_s [95] \core.CTRL.reg_kr_s [96] \core.CTRL.reg_kr_s [97] \core.CTRL.reg_kr_s [98] \core.CTRL.reg_kr_s [99] \core.CTRL.reg_kr_s [100] \core.CTRL.reg_kr_s [101] \core.CTRL.reg_kr_s [102] \core.CTRL.reg_kr_s [103] \core.CTRL.reg_kr_s [104] \core.CTRL.reg_kr_s [105] \core.CTRL.reg_kr_s [106] \core.CTRL.reg_kr_s [107] \core.CTRL.reg_kr_s [108] \core.CTRL.reg_kr_s [109] \core.CTRL.reg_kr_s [110] \core.CTRL.reg_kr_s [111] \core.CTRL.reg_kr_s [112] \core.CTRL.reg_kr_s [113] \core.CTRL.reg_kr_s [114] \core.CTRL.reg_kr_s [115] \core.CTRL.reg_kr_s [116] \core.CTRL.reg_kr_s [117] \core.CTRL.reg_kr_s [118] \core.CTRL.reg_kr_s [119] \core.CTRL.reg_kr_s [120] \core.CTRL.reg_kr_s [121] \core.CTRL.reg_kr_s [122] \core.CTRL.reg_kr_s [123] \core.CTRL.reg_kr_s [124] \core.CTRL.reg_kr_s [125] \core.CTRL.reg_kr_s [126] \core.CTRL.reg_kr_s [127] }).
Adding EN signal on $flatten\core.\CTRL.$verific$reg_kr_reg$control.vhd:690$2873 ($adff) from module CAMELLIA_IF (D = $flatten\core.\CTRL.$auto$bmuxmap.cc:58:execute$4676, Q = { \core.CTRL.reg_kr [0] \core.CTRL.reg_kr [1] \core.CTRL.reg_kr [2] \core.CTRL.reg_kr [3] \core.CTRL.reg_kr [4] \core.CTRL.reg_kr [5] \core.CTRL.reg_kr [6] \core.CTRL.reg_kr [7] \core.CTRL.reg_kr [8] \core.CTRL.reg_kr [9] \core.CTRL.reg_kr [10] \core.CTRL.reg_kr [11] \core.CTRL.reg_kr [12] \core.CTRL.reg_kr [13] \core.CTRL.reg_kr [14] \core.CTRL.reg_kr [15] \core.CTRL.reg_kr [16] \core.CTRL.reg_kr [17] \core.CTRL.reg_kr [18] \core.CTRL.reg_kr [19] \core.CTRL.reg_kr [20] \core.CTRL.reg_kr [21] \core.CTRL.reg_kr [22] \core.CTRL.reg_kr [23] \core.CTRL.reg_kr [24] \core.CTRL.reg_kr [25] \core.CTRL.reg_kr [26] \core.CTRL.reg_kr [27] \core.CTRL.reg_kr [28] \core.CTRL.reg_kr [29] \core.CTRL.reg_kr [30] \core.CTRL.reg_kr [31] \core.CTRL.reg_kr [32] \core.CTRL.reg_kr [33] \core.CTRL.reg_kr [34] \core.CTRL.reg_kr [35] \core.CTRL.reg_kr [36] \core.CTRL.reg_kr [37] \core.CTRL.reg_kr [38] \core.CTRL.reg_kr [39] \core.CTRL.reg_kr [40] \core.CTRL.reg_kr [41] \core.CTRL.reg_kr [42] \core.CTRL.reg_kr [43] \core.CTRL.reg_kr [44] \core.CTRL.reg_kr [45] \core.CTRL.reg_kr [46] \core.CTRL.reg_kr [47] \core.CTRL.reg_kr [48] \core.CTRL.reg_kr [49] \core.CTRL.reg_kr [50] \core.CTRL.reg_kr [51] \core.CTRL.reg_kr [52] \core.CTRL.reg_kr [53] \core.CTRL.reg_kr [54] \core.CTRL.reg_kr [55] \core.CTRL.reg_kr [56] \core.CTRL.reg_kr [57] \core.CTRL.reg_kr [58] \core.CTRL.reg_kr [59] \core.CTRL.reg_kr [60] \core.CTRL.reg_kr [61] \core.CTRL.reg_kr [62] \core.CTRL.reg_kr [63] \core.CTRL.reg_kr [64] \core.CTRL.reg_kr [65] \core.CTRL.reg_kr [66] \core.CTRL.reg_kr [67] \core.CTRL.reg_kr [68] \core.CTRL.reg_kr [69] \core.CTRL.reg_kr [70] \core.CTRL.reg_kr [71] \core.CTRL.reg_kr [72] \core.CTRL.reg_kr [73] \core.CTRL.reg_kr [74] \core.CTRL.reg_kr [75] \core.CTRL.reg_kr [76] \core.CTRL.reg_kr [77] \core.CTRL.reg_kr [78] \core.CTRL.reg_kr [79] \core.CTRL.reg_kr [80] \core.CTRL.reg_kr [81] \core.CTRL.reg_kr [82] \core.CTRL.reg_kr [83] \core.CTRL.reg_kr [84] \core.CTRL.reg_kr [85] \core.CTRL.reg_kr [86] \core.CTRL.reg_kr [87] \core.CTRL.reg_kr [88] \core.CTRL.reg_kr [89] \core.CTRL.reg_kr [90] \core.CTRL.reg_kr [91] \core.CTRL.reg_kr [92] \core.CTRL.reg_kr [93] \core.CTRL.reg_kr [94] \core.CTRL.reg_kr [95] \core.CTRL.reg_kr [96] \core.CTRL.reg_kr [97] \core.CTRL.reg_kr [98] \core.CTRL.reg_kr [99] \core.CTRL.reg_kr [100] \core.CTRL.reg_kr [101] \core.CTRL.reg_kr [102] \core.CTRL.reg_kr [103] \core.CTRL.reg_kr [104] \core.CTRL.reg_kr [105] \core.CTRL.reg_kr [106] \core.CTRL.reg_kr [107] \core.CTRL.reg_kr [108] \core.CTRL.reg_kr [109] \core.CTRL.reg_kr [110] \core.CTRL.reg_kr [111] \core.CTRL.reg_kr [112] \core.CTRL.reg_kr [113] \core.CTRL.reg_kr [114] \core.CTRL.reg_kr [115] \core.CTRL.reg_kr [116] \core.CTRL.reg_kr [117] \core.CTRL.reg_kr [118] \core.CTRL.reg_kr [119] \core.CTRL.reg_kr [120] \core.CTRL.reg_kr [121] \core.CTRL.reg_kr [122] \core.CTRL.reg_kr [123] \core.CTRL.reg_kr [124] \core.CTRL.reg_kr [125] \core.CTRL.reg_kr [126] \core.CTRL.reg_kr [127] }).
Adding EN signal on $flatten\core.\CTRL.$verific$reg_kl_s_reg$control.vhd:690$2871 ($adff) from module CAMELLIA_IF (D = $flatten\core.\CTRL.$auto$bmuxmap.cc:58:execute$4814, Q = { \core.CTRL.reg_kl_s [0] \core.CTRL.reg_kl_s [1] \core.CTRL.reg_kl_s [2] \core.CTRL.reg_kl_s [3] \core.CTRL.reg_kl_s [4] \core.CTRL.reg_kl_s [5] \core.CTRL.reg_kl_s [6] \core.CTRL.reg_kl_s [7] \core.CTRL.reg_kl_s [8] \core.CTRL.reg_kl_s [9] \core.CTRL.reg_kl_s [10] \core.CTRL.reg_kl_s [11] \core.CTRL.reg_kl_s [12] \core.CTRL.reg_kl_s [13] \core.CTRL.reg_kl_s [14] \core.CTRL.reg_kl_s [15] \core.CTRL.reg_kl_s [16] \core.CTRL.reg_kl_s [17] \core.CTRL.reg_kl_s [18] \core.CTRL.reg_kl_s [19] \core.CTRL.reg_kl_s [20] \core.CTRL.reg_kl_s [21] \core.CTRL.reg_kl_s [22] \core.CTRL.reg_kl_s [23] \core.CTRL.reg_kl_s [24] \core.CTRL.reg_kl_s [25] \core.CTRL.reg_kl_s [26] \core.CTRL.reg_kl_s [27] \core.CTRL.reg_kl_s [28] \core.CTRL.reg_kl_s [29] \core.CTRL.reg_kl_s [30] \core.CTRL.reg_kl_s [31] \core.CTRL.reg_kl_s [32] \core.CTRL.reg_kl_s [33] \core.CTRL.reg_kl_s [34] \core.CTRL.reg_kl_s [35] \core.CTRL.reg_kl_s [36] \core.CTRL.reg_kl_s [37] \core.CTRL.reg_kl_s [38] \core.CTRL.reg_kl_s [39] \core.CTRL.reg_kl_s [40] \core.CTRL.reg_kl_s [41] \core.CTRL.reg_kl_s [42] \core.CTRL.reg_kl_s [43] \core.CTRL.reg_kl_s [44] \core.CTRL.reg_kl_s [45] \core.CTRL.reg_kl_s [46] \core.CTRL.reg_kl_s [47] \core.CTRL.reg_kl_s [48] \core.CTRL.reg_kl_s [49] \core.CTRL.reg_kl_s [50] \core.CTRL.reg_kl_s [51] \core.CTRL.reg_kl_s [52] \core.CTRL.reg_kl_s [53] \core.CTRL.reg_kl_s [54] \core.CTRL.reg_kl_s [55] \core.CTRL.reg_kl_s [56] \core.CTRL.reg_kl_s [57] \core.CTRL.reg_kl_s [58] \core.CTRL.reg_kl_s [59] \core.CTRL.reg_kl_s [60] \core.CTRL.reg_kl_s [61] \core.CTRL.reg_kl_s [62] \core.CTRL.reg_kl_s [63] \core.CTRL.reg_kl_s [64] \core.CTRL.reg_kl_s [65] \core.CTRL.reg_kl_s [66] \core.CTRL.reg_kl_s [67] \core.CTRL.reg_kl_s [68] \core.CTRL.reg_kl_s [69] \core.CTRL.reg_kl_s [70] \core.CTRL.reg_kl_s [71] \core.CTRL.reg_kl_s [72] \core.CTRL.reg_kl_s [73] \core.CTRL.reg_kl_s [74] \core.CTRL.reg_kl_s [75] \core.CTRL.reg_kl_s [76] \core.CTRL.reg_kl_s [77] \core.CTRL.reg_kl_s [78] \core.CTRL.reg_kl_s [79] \core.CTRL.reg_kl_s [80] \core.CTRL.reg_kl_s [81] \core.CTRL.reg_kl_s [82] \core.CTRL.reg_kl_s [83] \core.CTRL.reg_kl_s [84] \core.CTRL.reg_kl_s [85] \core.CTRL.reg_kl_s [86] \core.CTRL.reg_kl_s [87] \core.CTRL.reg_kl_s [88] \core.CTRL.reg_kl_s [89] \core.CTRL.reg_kl_s [90] \core.CTRL.reg_kl_s [91] \core.CTRL.reg_kl_s [92] \core.CTRL.reg_kl_s [93] \core.CTRL.reg_kl_s [94] \core.CTRL.reg_kl_s [95] \core.CTRL.reg_kl_s [96] \core.CTRL.reg_kl_s [97] \core.CTRL.reg_kl_s [98] \core.CTRL.reg_kl_s [99] \core.CTRL.reg_kl_s [100] \core.CTRL.reg_kl_s [101] \core.CTRL.reg_kl_s [102] \core.CTRL.reg_kl_s [103] \core.CTRL.reg_kl_s [104] \core.CTRL.reg_kl_s [105] \core.CTRL.reg_kl_s [106] \core.CTRL.reg_kl_s [107] \core.CTRL.reg_kl_s [108] \core.CTRL.reg_kl_s [109] \core.CTRL.reg_kl_s [110] \core.CTRL.reg_kl_s [111] \core.CTRL.reg_kl_s [112] \core.CTRL.reg_kl_s [113] \core.CTRL.reg_kl_s [114] \core.CTRL.reg_kl_s [115] \core.CTRL.reg_kl_s [116] \core.CTRL.reg_kl_s [117] \core.CTRL.reg_kl_s [118] \core.CTRL.reg_kl_s [119] \core.CTRL.reg_kl_s [120] \core.CTRL.reg_kl_s [121] \core.CTRL.reg_kl_s [122] \core.CTRL.reg_kl_s [123] \core.CTRL.reg_kl_s [124] \core.CTRL.reg_kl_s [125] \core.CTRL.reg_kl_s [126] \core.CTRL.reg_kl_s [127] }).
Adding EN signal on $flatten\core.\CTRL.$verific$reg_kl_reg$control.vhd:690$2870 ($adff) from module CAMELLIA_IF (D = $flatten\core.\CTRL.$auto$bmuxmap.cc:58:execute$4883, Q = { \core.CTRL.reg_kl [0] \core.CTRL.reg_kl [1] \core.CTRL.reg_kl [2] \core.CTRL.reg_kl [3] \core.CTRL.reg_kl [4] \core.CTRL.reg_kl [5] \core.CTRL.reg_kl [6] \core.CTRL.reg_kl [7] \core.CTRL.reg_kl [8] \core.CTRL.reg_kl [9] \core.CTRL.reg_kl [10] \core.CTRL.reg_kl [11] \core.CTRL.reg_kl [12] \core.CTRL.reg_kl [13] \core.CTRL.reg_kl [14] \core.CTRL.reg_kl [15] \core.CTRL.reg_kl [16] \core.CTRL.reg_kl [17] \core.CTRL.reg_kl [18] \core.CTRL.reg_kl [19] \core.CTRL.reg_kl [20] \core.CTRL.reg_kl [21] \core.CTRL.reg_kl [22] \core.CTRL.reg_kl [23] \core.CTRL.reg_kl [24] \core.CTRL.reg_kl [25] \core.CTRL.reg_kl [26] \core.CTRL.reg_kl [27] \core.CTRL.reg_kl [28] \core.CTRL.reg_kl [29] \core.CTRL.reg_kl [30] \core.CTRL.reg_kl [31] \core.CTRL.reg_kl [32] \core.CTRL.reg_kl [33] \core.CTRL.reg_kl [34] \core.CTRL.reg_kl [35] \core.CTRL.reg_kl [36] \core.CTRL.reg_kl [37] \core.CTRL.reg_kl [38] \core.CTRL.reg_kl [39] \core.CTRL.reg_kl [40] \core.CTRL.reg_kl [41] \core.CTRL.reg_kl [42] \core.CTRL.reg_kl [43] \core.CTRL.reg_kl [44] \core.CTRL.reg_kl [45] \core.CTRL.reg_kl [46] \core.CTRL.reg_kl [47] \core.CTRL.reg_kl [48] \core.CTRL.reg_kl [49] \core.CTRL.reg_kl [50] \core.CTRL.reg_kl [51] \core.CTRL.reg_kl [52] \core.CTRL.reg_kl [53] \core.CTRL.reg_kl [54] \core.CTRL.reg_kl [55] \core.CTRL.reg_kl [56] \core.CTRL.reg_kl [57] \core.CTRL.reg_kl [58] \core.CTRL.reg_kl [59] \core.CTRL.reg_kl [60] \core.CTRL.reg_kl [61] \core.CTRL.reg_kl [62] \core.CTRL.reg_kl [63] \core.CTRL.reg_kl [64] \core.CTRL.reg_kl [65] \core.CTRL.reg_kl [66] \core.CTRL.reg_kl [67] \core.CTRL.reg_kl [68] \core.CTRL.reg_kl [69] \core.CTRL.reg_kl [70] \core.CTRL.reg_kl [71] \core.CTRL.reg_kl [72] \core.CTRL.reg_kl [73] \core.CTRL.reg_kl [74] \core.CTRL.reg_kl [75] \core.CTRL.reg_kl [76] \core.CTRL.reg_kl [77] \core.CTRL.reg_kl [78] \core.CTRL.reg_kl [79] \core.CTRL.reg_kl [80] \core.CTRL.reg_kl [81] \core.CTRL.reg_kl [82] \core.CTRL.reg_kl [83] \core.CTRL.reg_kl [84] \core.CTRL.reg_kl [85] \core.CTRL.reg_kl [86] \core.CTRL.reg_kl [87] \core.CTRL.reg_kl [88] \core.CTRL.reg_kl [89] \core.CTRL.reg_kl [90] \core.CTRL.reg_kl [91] \core.CTRL.reg_kl [92] \core.CTRL.reg_kl [93] \core.CTRL.reg_kl [94] \core.CTRL.reg_kl [95] \core.CTRL.reg_kl [96] \core.CTRL.reg_kl [97] \core.CTRL.reg_kl [98] \core.CTRL.reg_kl [99] \core.CTRL.reg_kl [100] \core.CTRL.reg_kl [101] \core.CTRL.reg_kl [102] \core.CTRL.reg_kl [103] \core.CTRL.reg_kl [104] \core.CTRL.reg_kl [105] \core.CTRL.reg_kl [106] \core.CTRL.reg_kl [107] \core.CTRL.reg_kl [108] \core.CTRL.reg_kl [109] \core.CTRL.reg_kl [110] \core.CTRL.reg_kl [111] \core.CTRL.reg_kl [112] \core.CTRL.reg_kl [113] \core.CTRL.reg_kl [114] \core.CTRL.reg_kl [115] \core.CTRL.reg_kl [116] \core.CTRL.reg_kl [117] \core.CTRL.reg_kl [118] \core.CTRL.reg_kl [119] \core.CTRL.reg_kl [120] \core.CTRL.reg_kl [121] \core.CTRL.reg_kl [122] \core.CTRL.reg_kl [123] \core.CTRL.reg_kl [124] \core.CTRL.reg_kl [125] \core.CTRL.reg_kl [126] \core.CTRL.reg_kl [127] }).
Adding EN signal on $flatten\core.\CTRL.$verific$reg_kb_s_reg$control.vhd:690$2879 ($adff) from module CAMELLIA_IF (D = $flatten\core.\CTRL.$auto$bmuxmap.cc:58:execute$4262, Q = { \core.CTRL.reg_kb_s [0] \core.CTRL.reg_kb_s [1] \core.CTRL.reg_kb_s [2] \core.CTRL.reg_kb_s [3] \core.CTRL.reg_kb_s [4] \core.CTRL.reg_kb_s [5] \core.CTRL.reg_kb_s [6] \core.CTRL.reg_kb_s [7] \core.CTRL.reg_kb_s [8] \core.CTRL.reg_kb_s [9] \core.CTRL.reg_kb_s [10] \core.CTRL.reg_kb_s [11] \core.CTRL.reg_kb_s [12] \core.CTRL.reg_kb_s [13] \core.CTRL.reg_kb_s [14] \core.CTRL.reg_kb_s [15] \core.CTRL.reg_kb_s [16] \core.CTRL.reg_kb_s [17] \core.CTRL.reg_kb_s [18] \core.CTRL.reg_kb_s [19] \core.CTRL.reg_kb_s [20] \core.CTRL.reg_kb_s [21] \core.CTRL.reg_kb_s [22] \core.CTRL.reg_kb_s [23] \core.CTRL.reg_kb_s [24] \core.CTRL.reg_kb_s [25] \core.CTRL.reg_kb_s [26] \core.CTRL.reg_kb_s [27] \core.CTRL.reg_kb_s [28] \core.CTRL.reg_kb_s [29] \core.CTRL.reg_kb_s [30] \core.CTRL.reg_kb_s [31] \core.CTRL.reg_kb_s [32] \core.CTRL.reg_kb_s [33] \core.CTRL.reg_kb_s [34] \core.CTRL.reg_kb_s [35] \core.CTRL.reg_kb_s [36] \core.CTRL.reg_kb_s [37] \core.CTRL.reg_kb_s [38] \core.CTRL.reg_kb_s [39] \core.CTRL.reg_kb_s [40] \core.CTRL.reg_kb_s [41] \core.CTRL.reg_kb_s [42] \core.CTRL.reg_kb_s [43] \core.CTRL.reg_kb_s [44] \core.CTRL.reg_kb_s [45] \core.CTRL.reg_kb_s [46] \core.CTRL.reg_kb_s [47] \core.CTRL.reg_kb_s [48] \core.CTRL.reg_kb_s [49] \core.CTRL.reg_kb_s [50] \core.CTRL.reg_kb_s [51] \core.CTRL.reg_kb_s [52] \core.CTRL.reg_kb_s [53] \core.CTRL.reg_kb_s [54] \core.CTRL.reg_kb_s [55] \core.CTRL.reg_kb_s [56] \core.CTRL.reg_kb_s [57] \core.CTRL.reg_kb_s [58] \core.CTRL.reg_kb_s [59] \core.CTRL.reg_kb_s [60] \core.CTRL.reg_kb_s [61] \core.CTRL.reg_kb_s [62] \core.CTRL.reg_kb_s [63] \core.CTRL.reg_kb_s [64] \core.CTRL.reg_kb_s [65] \core.CTRL.reg_kb_s [66] \core.CTRL.reg_kb_s [67] \core.CTRL.reg_kb_s [68] \core.CTRL.reg_kb_s [69] \core.CTRL.reg_kb_s [70] \core.CTRL.reg_kb_s [71] \core.CTRL.reg_kb_s [72] \core.CTRL.reg_kb_s [73] \core.CTRL.reg_kb_s [74] \core.CTRL.reg_kb_s [75] \core.CTRL.reg_kb_s [76] \core.CTRL.reg_kb_s [77] \core.CTRL.reg_kb_s [78] \core.CTRL.reg_kb_s [79] \core.CTRL.reg_kb_s [80] \core.CTRL.reg_kb_s [81] \core.CTRL.reg_kb_s [82] \core.CTRL.reg_kb_s [83] \core.CTRL.reg_kb_s [84] \core.CTRL.reg_kb_s [85] \core.CTRL.reg_kb_s [86] \core.CTRL.reg_kb_s [87] \core.CTRL.reg_kb_s [88] \core.CTRL.reg_kb_s [89] \core.CTRL.reg_kb_s [90] \core.CTRL.reg_kb_s [91] \core.CTRL.reg_kb_s [92] \core.CTRL.reg_kb_s [93] \core.CTRL.reg_kb_s [94] \core.CTRL.reg_kb_s [95] \core.CTRL.reg_kb_s [96] \core.CTRL.reg_kb_s [97] \core.CTRL.reg_kb_s [98] \core.CTRL.reg_kb_s [99] \core.CTRL.reg_kb_s [100] \core.CTRL.reg_kb_s [101] \core.CTRL.reg_kb_s [102] \core.CTRL.reg_kb_s [103] \core.CTRL.reg_kb_s [104] \core.CTRL.reg_kb_s [105] \core.CTRL.reg_kb_s [106] \core.CTRL.reg_kb_s [107] \core.CTRL.reg_kb_s [108] \core.CTRL.reg_kb_s [109] \core.CTRL.reg_kb_s [110] \core.CTRL.reg_kb_s [111] \core.CTRL.reg_kb_s [112] \core.CTRL.reg_kb_s [113] \core.CTRL.reg_kb_s [114] \core.CTRL.reg_kb_s [115] \core.CTRL.reg_kb_s [116] \core.CTRL.reg_kb_s [117] \core.CTRL.reg_kb_s [118] \core.CTRL.reg_kb_s [119] \core.CTRL.reg_kb_s [120] \core.CTRL.reg_kb_s [121] \core.CTRL.reg_kb_s [122] \core.CTRL.reg_kb_s [123] \core.CTRL.reg_kb_s [124] \core.CTRL.reg_kb_s [125] \core.CTRL.reg_kb_s [126] \core.CTRL.reg_kb_s [127] }).
Adding EN signal on $flatten\core.\CTRL.$verific$reg_kb_reg$control.vhd:690$2878 ($adff) from module CAMELLIA_IF (D = $flatten\core.\CTRL.$auto$bmuxmap.cc:58:execute$4331, Q = { \core.CTRL.reg_kb [0] \core.CTRL.reg_kb [1] \core.CTRL.reg_kb [2] \core.CTRL.reg_kb [3] \core.CTRL.reg_kb [4] \core.CTRL.reg_kb [5] \core.CTRL.reg_kb [6] \core.CTRL.reg_kb [7] \core.CTRL.reg_kb [8] \core.CTRL.reg_kb [9] \core.CTRL.reg_kb [10] \core.CTRL.reg_kb [11] \core.CTRL.reg_kb [12] \core.CTRL.reg_kb [13] \core.CTRL.reg_kb [14] \core.CTRL.reg_kb [15] \core.CTRL.reg_kb [16] \core.CTRL.reg_kb [17] \core.CTRL.reg_kb [18] \core.CTRL.reg_kb [19] \core.CTRL.reg_kb [20] \core.CTRL.reg_kb [21] \core.CTRL.reg_kb [22] \core.CTRL.reg_kb [23] \core.CTRL.reg_kb [24] \core.CTRL.reg_kb [25] \core.CTRL.reg_kb [26] \core.CTRL.reg_kb [27] \core.CTRL.reg_kb [28] \core.CTRL.reg_kb [29] \core.CTRL.reg_kb [30] \core.CTRL.reg_kb [31] \core.CTRL.reg_kb [32] \core.CTRL.reg_kb [33] \core.CTRL.reg_kb [34] \core.CTRL.reg_kb [35] \core.CTRL.reg_kb [36] \core.CTRL.reg_kb [37] \core.CTRL.reg_kb [38] \core.CTRL.reg_kb [39] \core.CTRL.reg_kb [40] \core.CTRL.reg_kb [41] \core.CTRL.reg_kb [42] \core.CTRL.reg_kb [43] \core.CTRL.reg_kb [44] \core.CTRL.reg_kb [45] \core.CTRL.reg_kb [46] \core.CTRL.reg_kb [47] \core.CTRL.reg_kb [48] \core.CTRL.reg_kb [49] \core.CTRL.reg_kb [50] \core.CTRL.reg_kb [51] \core.CTRL.reg_kb [52] \core.CTRL.reg_kb [53] \core.CTRL.reg_kb [54] \core.CTRL.reg_kb [55] \core.CTRL.reg_kb [56] \core.CTRL.reg_kb [57] \core.CTRL.reg_kb [58] \core.CTRL.reg_kb [59] \core.CTRL.reg_kb [60] \core.CTRL.reg_kb [61] \core.CTRL.reg_kb [62] \core.CTRL.reg_kb [63] \core.CTRL.reg_kb [64] \core.CTRL.reg_kb [65] \core.CTRL.reg_kb [66] \core.CTRL.reg_kb [67] \core.CTRL.reg_kb [68] \core.CTRL.reg_kb [69] \core.CTRL.reg_kb [70] \core.CTRL.reg_kb [71] \core.CTRL.reg_kb [72] \core.CTRL.reg_kb [73] \core.CTRL.reg_kb [74] \core.CTRL.reg_kb [75] \core.CTRL.reg_kb [76] \core.CTRL.reg_kb [77] \core.CTRL.reg_kb [78] \core.CTRL.reg_kb [79] \core.CTRL.reg_kb [80] \core.CTRL.reg_kb [81] \core.CTRL.reg_kb [82] \core.CTRL.reg_kb [83] \core.CTRL.reg_kb [84] \core.CTRL.reg_kb [85] \core.CTRL.reg_kb [86] \core.CTRL.reg_kb [87] \core.CTRL.reg_kb [88] \core.CTRL.reg_kb [89] \core.CTRL.reg_kb [90] \core.CTRL.reg_kb [91] \core.CTRL.reg_kb [92] \core.CTRL.reg_kb [93] \core.CTRL.reg_kb [94] \core.CTRL.reg_kb [95] \core.CTRL.reg_kb [96] \core.CTRL.reg_kb [97] \core.CTRL.reg_kb [98] \core.CTRL.reg_kb [99] \core.CTRL.reg_kb [100] \core.CTRL.reg_kb [101] \core.CTRL.reg_kb [102] \core.CTRL.reg_kb [103] \core.CTRL.reg_kb [104] \core.CTRL.reg_kb [105] \core.CTRL.reg_kb [106] \core.CTRL.reg_kb [107] \core.CTRL.reg_kb [108] \core.CTRL.reg_kb [109] \core.CTRL.reg_kb [110] \core.CTRL.reg_kb [111] \core.CTRL.reg_kb [112] \core.CTRL.reg_kb [113] \core.CTRL.reg_kb [114] \core.CTRL.reg_kb [115] \core.CTRL.reg_kb [116] \core.CTRL.reg_kb [117] \core.CTRL.reg_kb [118] \core.CTRL.reg_kb [119] \core.CTRL.reg_kb [120] \core.CTRL.reg_kb [121] \core.CTRL.reg_kb [122] \core.CTRL.reg_kb [123] \core.CTRL.reg_kb [124] \core.CTRL.reg_kb [125] \core.CTRL.reg_kb [126] \core.CTRL.reg_kb [127] }).
Adding EN signal on $flatten\core.\CTRL.$verific$reg_ka_s_reg$control.vhd:690$2877 ($adff) from module CAMELLIA_IF (D = $flatten\core.\CTRL.$auto$bmuxmap.cc:58:execute$4400, Q = { \core.CTRL.reg_ka_s [0] \core.CTRL.reg_ka_s [1] \core.CTRL.reg_ka_s [2] \core.CTRL.reg_ka_s [3] \core.CTRL.reg_ka_s [4] \core.CTRL.reg_ka_s [5] \core.CTRL.reg_ka_s [6] \core.CTRL.reg_ka_s [7] \core.CTRL.reg_ka_s [8] \core.CTRL.reg_ka_s [9] \core.CTRL.reg_ka_s [10] \core.CTRL.reg_ka_s [11] \core.CTRL.reg_ka_s [12] \core.CTRL.reg_ka_s [13] \core.CTRL.reg_ka_s [14] \core.CTRL.reg_ka_s [15] \core.CTRL.reg_ka_s [16] \core.CTRL.reg_ka_s [17] \core.CTRL.reg_ka_s [18] \core.CTRL.reg_ka_s [19] \core.CTRL.reg_ka_s [20] \core.CTRL.reg_ka_s [21] \core.CTRL.reg_ka_s [22] \core.CTRL.reg_ka_s [23] \core.CTRL.reg_ka_s [24] \core.CTRL.reg_ka_s [25] \core.CTRL.reg_ka_s [26] \core.CTRL.reg_ka_s [27] \core.CTRL.reg_ka_s [28] \core.CTRL.reg_ka_s [29] \core.CTRL.reg_ka_s [30] \core.CTRL.reg_ka_s [31] \core.CTRL.reg_ka_s [32] \core.CTRL.reg_ka_s [33] \core.CTRL.reg_ka_s [34] \core.CTRL.reg_ka_s [35] \core.CTRL.reg_ka_s [36] \core.CTRL.reg_ka_s [37] \core.CTRL.reg_ka_s [38] \core.CTRL.reg_ka_s [39] \core.CTRL.reg_ka_s [40] \core.CTRL.reg_ka_s [41] \core.CTRL.reg_ka_s [42] \core.CTRL.reg_ka_s [43] \core.CTRL.reg_ka_s [44] \core.CTRL.reg_ka_s [45] \core.CTRL.reg_ka_s [46] \core.CTRL.reg_ka_s [47] \core.CTRL.reg_ka_s [48] \core.CTRL.reg_ka_s [49] \core.CTRL.reg_ka_s [50] \core.CTRL.reg_ka_s [51] \core.CTRL.reg_ka_s [52] \core.CTRL.reg_ka_s [53] \core.CTRL.reg_ka_s [54] \core.CTRL.reg_ka_s [55] \core.CTRL.reg_ka_s [56] \core.CTRL.reg_ka_s [57] \core.CTRL.reg_ka_s [58] \core.CTRL.reg_ka_s [59] \core.CTRL.reg_ka_s [60] \core.CTRL.reg_ka_s [61] \core.CTRL.reg_ka_s [62] \core.CTRL.reg_ka_s [63] \core.CTRL.reg_ka_s [64] \core.CTRL.reg_ka_s [65] \core.CTRL.reg_ka_s [66] \core.CTRL.reg_ka_s [67] \core.CTRL.reg_ka_s [68] \core.CTRL.reg_ka_s [69] \core.CTRL.reg_ka_s [70] \core.CTRL.reg_ka_s [71] \core.CTRL.reg_ka_s [72] \core.CTRL.reg_ka_s [73] \core.CTRL.reg_ka_s [74] \core.CTRL.reg_ka_s [75] \core.CTRL.reg_ka_s [76] \core.CTRL.reg_ka_s [77] \core.CTRL.reg_ka_s [78] \core.CTRL.reg_ka_s [79] \core.CTRL.reg_ka_s [80] \core.CTRL.reg_ka_s [81] \core.CTRL.reg_ka_s [82] \core.CTRL.reg_ka_s [83] \core.CTRL.reg_ka_s [84] \core.CTRL.reg_ka_s [85] \core.CTRL.reg_ka_s [86] \core.CTRL.reg_ka_s [87] \core.CTRL.reg_ka_s [88] \core.CTRL.reg_ka_s [89] \core.CTRL.reg_ka_s [90] \core.CTRL.reg_ka_s [91] \core.CTRL.reg_ka_s [92] \core.CTRL.reg_ka_s [93] \core.CTRL.reg_ka_s [94] \core.CTRL.reg_ka_s [95] \core.CTRL.reg_ka_s [96] \core.CTRL.reg_ka_s [97] \core.CTRL.reg_ka_s [98] \core.CTRL.reg_ka_s [99] \core.CTRL.reg_ka_s [100] \core.CTRL.reg_ka_s [101] \core.CTRL.reg_ka_s [102] \core.CTRL.reg_ka_s [103] \core.CTRL.reg_ka_s [104] \core.CTRL.reg_ka_s [105] \core.CTRL.reg_ka_s [106] \core.CTRL.reg_ka_s [107] \core.CTRL.reg_ka_s [108] \core.CTRL.reg_ka_s [109] \core.CTRL.reg_ka_s [110] \core.CTRL.reg_ka_s [111] \core.CTRL.reg_ka_s [112] \core.CTRL.reg_ka_s [113] \core.CTRL.reg_ka_s [114] \core.CTRL.reg_ka_s [115] \core.CTRL.reg_ka_s [116] \core.CTRL.reg_ka_s [117] \core.CTRL.reg_ka_s [118] \core.CTRL.reg_ka_s [119] \core.CTRL.reg_ka_s [120] \core.CTRL.reg_ka_s [121] \core.CTRL.reg_ka_s [122] \core.CTRL.reg_ka_s [123] \core.CTRL.reg_ka_s [124] \core.CTRL.reg_ka_s [125] \core.CTRL.reg_ka_s [126] \core.CTRL.reg_ka_s [127] }).
Adding EN signal on $flatten\core.\CTRL.$verific$reg_ka_reg$control.vhd:690$2876 ($adff) from module CAMELLIA_IF (D = $flatten\core.\CTRL.$auto$bmuxmap.cc:58:execute$4469, Q = { \core.CTRL.reg_ka [0] \core.CTRL.reg_ka [1] \core.CTRL.reg_ka [2] \core.CTRL.reg_ka [3] \core.CTRL.reg_ka [4] \core.CTRL.reg_ka [5] \core.CTRL.reg_ka [6] \core.CTRL.reg_ka [7] \core.CTRL.reg_ka [8] \core.CTRL.reg_ka [9] \core.CTRL.reg_ka [10] \core.CTRL.reg_ka [11] \core.CTRL.reg_ka [12] \core.CTRL.reg_ka [13] \core.CTRL.reg_ka [14] \core.CTRL.reg_ka [15] \core.CTRL.reg_ka [16] \core.CTRL.reg_ka [17] \core.CTRL.reg_ka [18] \core.CTRL.reg_ka [19] \core.CTRL.reg_ka [20] \core.CTRL.reg_ka [21] \core.CTRL.reg_ka [22] \core.CTRL.reg_ka [23] \core.CTRL.reg_ka [24] \core.CTRL.reg_ka [25] \core.CTRL.reg_ka [26] \core.CTRL.reg_ka [27] \core.CTRL.reg_ka [28] \core.CTRL.reg_ka [29] \core.CTRL.reg_ka [30] \core.CTRL.reg_ka [31] \core.CTRL.reg_ka [32] \core.CTRL.reg_ka [33] \core.CTRL.reg_ka [34] \core.CTRL.reg_ka [35] \core.CTRL.reg_ka [36] \core.CTRL.reg_ka [37] \core.CTRL.reg_ka [38] \core.CTRL.reg_ka [39] \core.CTRL.reg_ka [40] \core.CTRL.reg_ka [41] \core.CTRL.reg_ka [42] \core.CTRL.reg_ka [43] \core.CTRL.reg_ka [44] \core.CTRL.reg_ka [45] \core.CTRL.reg_ka [46] \core.CTRL.reg_ka [47] \core.CTRL.reg_ka [48] \core.CTRL.reg_ka [49] \core.CTRL.reg_ka [50] \core.CTRL.reg_ka [51] \core.CTRL.reg_ka [52] \core.CTRL.reg_ka [53] \core.CTRL.reg_ka [54] \core.CTRL.reg_ka [55] \core.CTRL.reg_ka [56] \core.CTRL.reg_ka [57] \core.CTRL.reg_ka [58] \core.CTRL.reg_ka [59] \core.CTRL.reg_ka [60] \core.CTRL.reg_ka [61] \core.CTRL.reg_ka [62] \core.CTRL.reg_ka [63] \core.CTRL.reg_ka [64] \core.CTRL.reg_ka [65] \core.CTRL.reg_ka [66] \core.CTRL.reg_ka [67] \core.CTRL.reg_ka [68] \core.CTRL.reg_ka [69] \core.CTRL.reg_ka [70] \core.CTRL.reg_ka [71] \core.CTRL.reg_ka [72] \core.CTRL.reg_ka [73] \core.CTRL.reg_ka [74] \core.CTRL.reg_ka [75] \core.CTRL.reg_ka [76] \core.CTRL.reg_ka [77] \core.CTRL.reg_ka [78] \core.CTRL.reg_ka [79] \core.CTRL.reg_ka [80] \core.CTRL.reg_ka [81] \core.CTRL.reg_ka [82] \core.CTRL.reg_ka [83] \core.CTRL.reg_ka [84] \core.CTRL.reg_ka [85] \core.CTRL.reg_ka [86] \core.CTRL.reg_ka [87] \core.CTRL.reg_ka [88] \core.CTRL.reg_ka [89] \core.CTRL.reg_ka [90] \core.CTRL.reg_ka [91] \core.CTRL.reg_ka [92] \core.CTRL.reg_ka [93] \core.CTRL.reg_ka [94] \core.CTRL.reg_ka [95] \core.CTRL.reg_ka [96] \core.CTRL.reg_ka [97] \core.CTRL.reg_ka [98] \core.CTRL.reg_ka [99] \core.CTRL.reg_ka [100] \core.CTRL.reg_ka [101] \core.CTRL.reg_ka [102] \core.CTRL.reg_ka [103] \core.CTRL.reg_ka [104] \core.CTRL.reg_ka [105] \core.CTRL.reg_ka [106] \core.CTRL.reg_ka [107] \core.CTRL.reg_ka [108] \core.CTRL.reg_ka [109] \core.CTRL.reg_ka [110] \core.CTRL.reg_ka [111] \core.CTRL.reg_ka [112] \core.CTRL.reg_ka [113] \core.CTRL.reg_ka [114] \core.CTRL.reg_ka [115] \core.CTRL.reg_ka [116] \core.CTRL.reg_ka [117] \core.CTRL.reg_ka [118] \core.CTRL.reg_ka [119] \core.CTRL.reg_ka [120] \core.CTRL.reg_ka [121] \core.CTRL.reg_ka [122] \core.CTRL.reg_ka [123] \core.CTRL.reg_ka [124] \core.CTRL.reg_ka [125] \core.CTRL.reg_ka [126] \core.CTRL.reg_ka [127] }).
Adding EN signal on $flatten\core.\CTRL.$verific$reg_k_len_reg$control.vhd:690$2872 ($adff) from module CAMELLIA_IF (D = $flatten\core.\CTRL.$auto$bmuxmap.cc:58:execute$4745, Q = { \core.CTRL.reg_k_len [0] \core.CTRL.reg_k_len [1] }).
Adding EN signal on $flatten\core.\CTRL.$verific$reg_enc_dec_reg$control.vhd:690$2880 ($adff) from module CAMELLIA_IF (D = \enc_dec, Q = \core.CTRL.reg_enc_dec).
Adding EN signal on $flatten\core.\CTRL.$verific$prexor_sel_reg$control.vhd:690$2883 ($dff) from module CAMELLIA_IF (D = $flatten\core.\CTRL.$verific$n34319$2664, Q = \core.CTRL.prexor_sel).
Adding EN signal on $flatten\core.\CTRL.$verific$postxor_sel_reg$control.vhd:690$2884 ($dff) from module CAMELLIA_IF (D = $flatten\core.\CTRL.$verific$n34356$2673, Q = \core.CTRL.postxor_sel).
Adding EN signal on $flatten\core.\CTRL.$verific$newdata_reg$control.vhd:690$2885 ($dff) from module CAMELLIA_IF (D = $flatten\core.\CTRL.$verific$n34364$2376, Q = \core.CTRL.newdata).
Adding EN signal on $flatten\core.\CTRL.$verific$key_acq_reg$control.vhd:690$2888 ($dff) from module CAMELLIA_IF (D = $flatten\core.\CTRL.$verific$n34384$2387, Q = \core.CTRL.key_acq).
Adding EN signal on $flatten\core.\CTRL.$verific$k2_sel_reg$control.vhd:690$2881 ($dff) from module CAMELLIA_IF (D = $flatten\core.\CTRL.$auto$bmuxmap.cc:58:execute$4157, Q = \core.CTRL.k2_sel).
Adding EN signal on $flatten\core.\CTRL.$verific$k1_sel_reg$control.vhd:690$2875 ($dff) from module CAMELLIA_IF (D = $flatten\core.\CTRL.$auto$bmuxmap.cc:58:execute$4538, Q = \core.CTRL.k1_sel).
Adding EN signal on $flatten\core.\CTRL.$verific$data_to_reg$control.vhd:690$2882 ($dff) from module CAMELLIA_IF (D = $flatten\core.\CTRL.$verific$n34151$2655, Q = { \core.CTRL.data_to [0] \core.CTRL.data_to [1] \core.CTRL.data_to [2] \core.CTRL.data_to [3] \core.CTRL.data_to [4] \core.CTRL.data_to [5] \core.CTRL.data_to [6] \core.CTRL.data_to [7] \core.CTRL.data_to [8] \core.CTRL.data_to [9] \core.CTRL.data_to [10] \core.CTRL.data_to [11] \core.CTRL.data_to [12] \core.CTRL.data_to [13] \core.CTRL.data_to [14] \core.CTRL.data_to [15] \core.CTRL.data_to [16] \core.CTRL.data_to [17] \core.CTRL.data_to [18] \core.CTRL.data_to [19] \core.CTRL.data_to [20] \core.CTRL.data_to [21] \core.CTRL.data_to [22] \core.CTRL.data_to [23] \core.CTRL.data_to [24] \core.CTRL.data_to [25] \core.CTRL.data_to [26] \core.CTRL.data_to [27] \core.CTRL.data_to [28] \core.CTRL.data_to [29] \core.CTRL.data_to [30] \core.CTRL.data_to [31] \core.CTRL.data_to [32] \core.CTRL.data_to [33] \core.CTRL.data_to [34] \core.CTRL.data_to [35] \core.CTRL.data_to [36] \core.CTRL.data_to [37] \core.CTRL.data_to [38] \core.CTRL.data_to [39] \core.CTRL.data_to [40] \core.CTRL.data_to [41] \core.CTRL.data_to [42] \core.CTRL.data_to [43] \core.CTRL.data_to [44] \core.CTRL.data_to [45] \core.CTRL.data_to [46] \core.CTRL.data_to [47] \core.CTRL.data_to [48] \core.CTRL.data_to [49] \core.CTRL.data_to [50] \core.CTRL.data_to [51] \core.CTRL.data_to [52] \core.CTRL.data_to [53] \core.CTRL.data_to [54] \core.CTRL.data_to [55] \core.CTRL.data_to [56] \core.CTRL.data_to [57] \core.CTRL.data_to [58] \core.CTRL.data_to [59] \core.CTRL.data_to [60] \core.CTRL.data_to [61] \core.CTRL.data_to [62] \core.CTRL.data_to [63] \core.CTRL.data_to [64] \core.CTRL.data_to [65] \core.CTRL.data_to [66] \core.CTRL.data_to [67] \core.CTRL.data_to [68] \core.CTRL.data_to [69] \core.CTRL.data_to [70] \core.CTRL.data_to [71] \core.CTRL.data_to [72] \core.CTRL.data_to [73] \core.CTRL.data_to [74] \core.CTRL.data_to [75] \core.CTRL.data_to [76] \core.CTRL.data_to [77] \core.CTRL.data_to [78] \core.CTRL.data_to [79] \core.CTRL.data_to [80] \core.CTRL.data_to [81] \core.CTRL.data_to [82] \core.CTRL.data_to [83] \core.CTRL.data_to [84] \core.CTRL.data_to [85] \core.CTRL.data_to [86] \core.CTRL.data_to [87] \core.CTRL.data_to [88] \core.CTRL.data_to [89] \core.CTRL.data_to [90] \core.CTRL.data_to [91] \core.CTRL.data_to [92] \core.CTRL.data_to [93] \core.CTRL.data_to [94] \core.CTRL.data_to [95] \core.CTRL.data_to [96] \core.CTRL.data_to [97] \core.CTRL.data_to [98] \core.CTRL.data_to [99] \core.CTRL.data_to [100] \core.CTRL.data_to [101] \core.CTRL.data_to [102] \core.CTRL.data_to [103] \core.CTRL.data_to [104] \core.CTRL.data_to [105] \core.CTRL.data_to [106] \core.CTRL.data_to [107] \core.CTRL.data_to [108] \core.CTRL.data_to [109] \core.CTRL.data_to [110] \core.CTRL.data_to [111] \core.CTRL.data_to [112] \core.CTRL.data_to [113] \core.CTRL.data_to [114] \core.CTRL.data_to [115] \core.CTRL.data_to [116] \core.CTRL.data_to [117] \core.CTRL.data_to [118] \core.CTRL.data_to [119] \core.CTRL.data_to [120] \core.CTRL.data_to [121] \core.CTRL.data_to [122] \core.CTRL.data_to [123] \core.CTRL.data_to [124] \core.CTRL.data_to [125] \core.CTRL.data_to [126] \core.CTRL.data_to [127] }).
Adding EN signal on $flatten\core.\CTRL.$verific$data_acq_reg$control.vhd:690$2889 ($dff) from module CAMELLIA_IF (D = $flatten\core.\CTRL.$verific$n34388$2389, Q = \core.CTRL.data_acq).
Adding EN signal on $flatten\core.\CTRL.$verific$REGISTERS_UPDATE.coming_from_key_reg$control.vhd:690$2869 ($adff) from module CAMELLIA_IF (D = $flatten\core.\CTRL.$auto$bmuxmap.cc:58:execute$4952, Q = \core.CTRL.REGISTERS_UPDATE.coming_from_key).

yosys> opt_clean

3.17.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \CAMELLIA_IF..
Removed 16 unused cells and 16 unused wires.
<suppressed ~17 debug messages>

yosys> opt_expr

3.17.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module CAMELLIA_IF.
<suppressed ~47 debug messages>

3.17.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.17.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \CAMELLIA_IF..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~61 debug messages>

yosys> opt_reduce

3.17.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \CAMELLIA_IF.
Performed a total of 0 changes.

yosys> opt_merge

3.17.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\CAMELLIA_IF'.
<suppressed ~207 debug messages>
Removed a total of 69 cells.

yosys> opt_dff -sat -nosdff

3.17.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.17.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \CAMELLIA_IF..
Removed 0 unused cells and 68 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.17.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module CAMELLIA_IF.

3.17.16. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.17.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \CAMELLIA_IF..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~63 debug messages>

yosys> opt_reduce

3.17.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \CAMELLIA_IF.
Performed a total of 0 changes.

yosys> opt_merge

3.17.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\CAMELLIA_IF'.
Removed a total of 0 cells.

yosys> opt_dff -sat -nosdff

3.17.20. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.17.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \CAMELLIA_IF..

yosys> opt_expr

3.17.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module CAMELLIA_IF.

3.17.23. Finished OPT passes. (There is nothing left to do.)

yosys> wreduce -keepdc

3.18. Executing WREDUCE pass (reducing word size of cells).
Removed top 3 bits (of 4) from port B of cell CAMELLIA_IF.$verific$add_8$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$591 ($add).
Removed top 1 bits (of 4) from port B of cell CAMELLIA_IF.$verific$equal_22$camellia_if.vhd:136$600 ($eq).
Removed top 1 bits (of 2) from port B of cell CAMELLIA_IF.$verific$equal_26$camellia_if.vhd:137$604 ($eq).
Removed top 2 bits (of 3) from port B of cell CAMELLIA_IF.$verific$add_45$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$618 ($add).
Removed top 2 bits (of 3) from port B of cell CAMELLIA_IF.$verific$add_70$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$636 ($add).
Removed top 112 bits (of 256) from mux cell CAMELLIA_IF.$auto$bmuxmap.cc:60:execute$5073 ($mux).
Removed top 112 bits (of 256) from mux cell CAMELLIA_IF.$auto$bmuxmap.cc:60:execute$5076 ($mux).
Removed top 1 bits (of 2) from port B of cell CAMELLIA_IF.$auto$opt_dff.cc:195:make_patterns_logic$5104 ($ne).
Removed top 3 bits (of 8) from port B of cell CAMELLIA_IF.$auto$opt_dff.cc:195:make_patterns_logic$5110 ($ne).
Removed top 1 bits (of 7) from port B of cell CAMELLIA_IF.$auto$opt_dff.cc:195:make_patterns_logic$5112 ($ne).
Removed top 1 bits (of 7) from port B of cell CAMELLIA_IF.$auto$opt_dff.cc:195:make_patterns_logic$5114 ($ne).
Removed top 1 bits (of 7) from port B of cell CAMELLIA_IF.$auto$opt_dff.cc:195:make_patterns_logic$5118 ($ne).
Removed top 1 bits (of 6) from port B of cell CAMELLIA_IF.$auto$opt_dff.cc:195:make_patterns_logic$5120 ($ne).
Removed top 1 bits (of 6) from port B of cell CAMELLIA_IF.$auto$opt_dff.cc:195:make_patterns_logic$5122 ($ne).
Removed top 1 bits (of 6) from port B of cell CAMELLIA_IF.$auto$opt_dff.cc:195:make_patterns_logic$5124 ($ne).
Removed top 5 bits (of 6) from port B of cell CAMELLIA_IF.$auto$opt_dff.cc:195:make_patterns_logic$5126 ($ne).
Removed top 2 bits (of 6) from port B of cell CAMELLIA_IF.$auto$opt_dff.cc:195:make_patterns_logic$5128 ($ne).
Removed top 3 bits (of 6) from port B of cell CAMELLIA_IF.$auto$opt_dff.cc:195:make_patterns_logic$5130 ($ne).
Removed top 3 bits (of 5) from port B of cell CAMELLIA_IF.$auto$opt_dff.cc:195:make_patterns_logic$5134 ($ne).
Removed top 4 bits (of 5) from port B of cell CAMELLIA_IF.$auto$opt_dff.cc:195:make_patterns_logic$5136 ($ne).
Removed top 1 bits (of 5) from port B of cell CAMELLIA_IF.$auto$opt_dff.cc:195:make_patterns_logic$5138 ($ne).
Removed top 3 bits (of 4) from port B of cell CAMELLIA_IF.$auto$opt_dff.cc:195:make_patterns_logic$5149 ($ne).
Removed top 2 bits (of 3) from port B of cell CAMELLIA_IF.$auto$opt_dff.cc:195:make_patterns_logic$5151 ($ne).
Removed top 1 bits (of 2) from port B of cell CAMELLIA_IF.$auto$opt_dff.cc:195:make_patterns_logic$5153 ($ne).
Removed top 2 bits (of 8) from port B of cell CAMELLIA_IF.$auto$opt_dff.cc:195:make_patterns_logic$5160 ($ne).
Removed top 2 bits (of 7) from port B of cell CAMELLIA_IF.$auto$opt_dff.cc:195:make_patterns_logic$5162 ($ne).
Removed top 1 bits (of 7) from port B of cell CAMELLIA_IF.$auto$opt_dff.cc:195:make_patterns_logic$5164 ($ne).
Removed top 1 bits (of 7) from port B of cell CAMELLIA_IF.$auto$opt_dff.cc:195:make_patterns_logic$5166 ($ne).
Removed top 2 bits (of 7) from port B of cell CAMELLIA_IF.$auto$opt_dff.cc:195:make_patterns_logic$5168 ($ne).
Removed top 2 bits (of 6) from port B of cell CAMELLIA_IF.$auto$opt_dff.cc:195:make_patterns_logic$5174 ($ne).
Removed top 1 bits (of 5) from port B of cell CAMELLIA_IF.$auto$opt_dff.cc:195:make_patterns_logic$5182 ($ne).
Removed top 1 bits (of 5) from port B of cell CAMELLIA_IF.$auto$opt_dff.cc:195:make_patterns_logic$5186 ($ne).
Removed top 2 bits (of 6) from port B of cell CAMELLIA_IF.$auto$opt_dff.cc:195:make_patterns_logic$5210 ($ne).
Removed top 1 bits (of 6) from port B of cell CAMELLIA_IF.$auto$opt_dff.cc:195:make_patterns_logic$5214 ($ne).
Removed top 1 bits (of 6) from port B of cell CAMELLIA_IF.$auto$opt_dff.cc:195:make_patterns_logic$5218 ($ne).
Removed top 1 bits (of 4) from port B of cell CAMELLIA_IF.$auto$opt_dff.cc:195:make_patterns_logic$5230 ($ne).
Removed top 2 bits (of 4) from port B of cell CAMELLIA_IF.$auto$opt_dff.cc:195:make_patterns_logic$5232 ($ne).
Removed top 3 bits (of 8) from port B of cell CAMELLIA_IF.$auto$opt_dff.cc:195:make_patterns_logic$5237 ($ne).
Removed top 3 bits (of 8) from port B of cell CAMELLIA_IF.$auto$opt_dff.cc:195:make_patterns_logic$5239 ($ne).
Removed top 4 bits (of 9) from port B of cell CAMELLIA_IF.$auto$opt_dff.cc:195:make_patterns_logic$5256 ($ne).
Removed top 2 bits (of 7) from port B of cell CAMELLIA_IF.$auto$opt_dff.cc:195:make_patterns_logic$5260 ($ne).
Removed top 1 bits (of 7) from port B of cell CAMELLIA_IF.$auto$opt_dff.cc:195:make_patterns_logic$5262 ($ne).
Removed top 2 bits (of 7) from port B of cell CAMELLIA_IF.$auto$opt_dff.cc:195:make_patterns_logic$5264 ($ne).
Removed top 1 bits (of 7) from port B of cell CAMELLIA_IF.$auto$opt_dff.cc:195:make_patterns_logic$5266 ($ne).
Removed top 1 bits (of 7) from port B of cell CAMELLIA_IF.$auto$opt_dff.cc:195:make_patterns_logic$5268 ($ne).
Removed top 3 bits (of 8) from port B of cell CAMELLIA_IF.$auto$opt_dff.cc:195:make_patterns_logic$5270 ($ne).
Removed top 1 bits (of 7) from port B of cell CAMELLIA_IF.$auto$opt_dff.cc:195:make_patterns_logic$5272 ($ne).
Removed top 2 bits (of 7) from port B of cell CAMELLIA_IF.$auto$opt_dff.cc:195:make_patterns_logic$5274 ($ne).
Removed top 2 bits (of 6) from port B of cell CAMELLIA_IF.$auto$opt_dff.cc:195:make_patterns_logic$5280 ($ne).
Removed top 3 bits (of 6) from port B of cell CAMELLIA_IF.$auto$opt_dff.cc:195:make_patterns_logic$5284 ($ne).
Removed top 1 bits (of 6) from port B of cell CAMELLIA_IF.$auto$opt_dff.cc:195:make_patterns_logic$5290 ($ne).
Removed top 2 bits (of 6) from port B of cell CAMELLIA_IF.$auto$opt_dff.cc:195:make_patterns_logic$5350 ($ne).
Removed top 1 bits (of 6) from port B of cell CAMELLIA_IF.$auto$opt_dff.cc:195:make_patterns_logic$5352 ($ne).
Removed top 1 bits (of 5) from port B of cell CAMELLIA_IF.$auto$opt_dff.cc:195:make_patterns_logic$5356 ($ne).
Removed top 1 bits (of 5) from port B of cell CAMELLIA_IF.$auto$opt_dff.cc:195:make_patterns_logic$5358 ($ne).
Removed top 2 bits (of 5) from port B of cell CAMELLIA_IF.$auto$opt_dff.cc:195:make_patterns_logic$5360 ($ne).
Removed top 1 bits (of 4) from port B of cell CAMELLIA_IF.$auto$opt_dff.cc:195:make_patterns_logic$5364 ($ne).
Removed top 1 bits (of 4) from port B of cell CAMELLIA_IF.$auto$opt_dff.cc:195:make_patterns_logic$5366 ($ne).
Removed top 3 bits (of 6) from port B of cell CAMELLIA_IF.$auto$opt_dff.cc:195:make_patterns_logic$5384 ($ne).
Removed top 2 bits (of 16) from mux cell CAMELLIA_IF.$flatten\core.\CTRL.$verific$mux_734$control.vhd:573$2778 ($mux).
Removed top 1 bits (of 56) from mux cell CAMELLIA_IF.$flatten\core.\CTRL.$verific$mux_732$control.vhd:546$2909 ($mux).
Removed top 5 bits (of 6) from mux cell CAMELLIA_IF.$flatten\core.\CTRL.$verific$mux_605$control.vhd:735$2904 ($mux).
Removed top 1 bits (of 2) from mux cell CAMELLIA_IF.$flatten\core.\CTRL.$verific$mux_517$control.vhd:646$2842 ($mux).
Removed top 2 bits (of 3) from mux cell CAMELLIA_IF.$flatten\core.\CTRL.$verific$mux_504$control.vhd:633$2832 ($mux).
Removed top 3 bits (of 6) from port A of cell CAMELLIA_IF.$flatten\core.\CTRL.$verific$equal_555$control.vhd:684$2867 ($eq).
Removed top 5 bits (of 6) from port A of cell CAMELLIA_IF.$flatten\core.\CTRL.$verific$equal_551$control.vhd:678$2865 ($eq).
Removed top 1 bits (of 6) from port A of cell CAMELLIA_IF.$flatten\core.\CTRL.$verific$equal_545$control.vhd:672$2861 ($eq).
Removed top 1 bits (of 6) from port A of cell CAMELLIA_IF.$flatten\core.\CTRL.$verific$equal_544$control.vhd:672$2860 ($eq).
Removed top 2 bits (of 6) from port A of cell CAMELLIA_IF.$flatten\core.\CTRL.$verific$equal_543$control.vhd:672$2859 ($eq).
Removed top 1 bits (of 6) from port A of cell CAMELLIA_IF.$flatten\core.\CTRL.$verific$equal_525$control.vhd:640$2847 ($eq).
Removed top 3 bits (of 6) from port A of cell CAMELLIA_IF.$flatten\core.\CTRL.$verific$equal_510$control.vhd:625$2836 ($eq).
Removed top 3 bits (of 6) from port A of cell CAMELLIA_IF.$flatten\core.\CTRL.$verific$equal_509$control.vhd:623$2835 ($eq).
Removed top 4 bits (of 6) from port A of cell CAMELLIA_IF.$flatten\core.\CTRL.$verific$equal_507$control.vhd:621$2834 ($eq).
Removed top 3 bits (of 64) from mux cell CAMELLIA_IF.$flatten\core.\CTRL.$auto$bmuxmap.cc:60:execute$5054 ($mux).
Removed top 4 bits (of 6) from mux cell CAMELLIA_IF.$flatten\core.\CTRL.$auto$bmuxmap.cc:60:execute$4974 ($mux).
Removed top 3 bits (of 6) from mux cell CAMELLIA_IF.$flatten\core.\CTRL.$auto$bmuxmap.cc:60:execute$4973 ($mux).
Removed top 2 bits (of 6) from mux cell CAMELLIA_IF.$flatten\core.\CTRL.$auto$bmuxmap.cc:60:execute$4971 ($mux).
Removed top 4 bits (of 6) from mux cell CAMELLIA_IF.$flatten\core.\CTRL.$auto$bmuxmap.cc:60:execute$4970 ($mux).
Removed top 3 bits (of 6) from mux cell CAMELLIA_IF.$flatten\core.\CTRL.$auto$bmuxmap.cc:60:execute$4969 ($mux).
Removed top 4 bits (of 6) from mux cell CAMELLIA_IF.$flatten\core.\CTRL.$auto$bmuxmap.cc:60:execute$4968 ($mux).
Removed top 1 bits (of 6) from mux cell CAMELLIA_IF.$flatten\core.\CTRL.$auto$bmuxmap.cc:60:execute$4967 ($mux).
Removed top 4 bits (of 6) from mux cell CAMELLIA_IF.$flatten\core.\CTRL.$auto$bmuxmap.cc:60:execute$4966 ($mux).
Removed top 3 bits (of 6) from mux cell CAMELLIA_IF.$flatten\core.\CTRL.$auto$bmuxmap.cc:60:execute$4965 ($mux).
Removed top 4 bits (of 6) from mux cell CAMELLIA_IF.$flatten\core.\CTRL.$auto$bmuxmap.cc:60:execute$4964 ($mux).
Removed top 2 bits (of 6) from mux cell CAMELLIA_IF.$flatten\core.\CTRL.$auto$bmuxmap.cc:60:execute$4963 ($mux).
Removed top 4 bits (of 6) from mux cell CAMELLIA_IF.$flatten\core.\CTRL.$auto$bmuxmap.cc:60:execute$4962 ($mux).
Removed top 3 bits (of 4) from mux cell CAMELLIA_IF.$flatten\core.\CTRL.$auto$bmuxmap.cc:60:execute$4474 ($mux).
Removed top 3 bits (of 4) from mux cell CAMELLIA_IF.$flatten\core.\CTRL.$auto$bmuxmap.cc:60:execute$4473 ($mux).
Removed top 3 bits (of 4) from mux cell CAMELLIA_IF.$flatten\core.\CTRL.$auto$bmuxmap.cc:60:execute$4472 ($mux).
Removed top 3 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1a.$auto$bmuxmap.cc:60:execute$3955 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1a.$auto$bmuxmap.cc:60:execute$3953 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1a.$auto$bmuxmap.cc:60:execute$3950 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1a.$auto$bmuxmap.cc:60:execute$3948 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1a.$auto$bmuxmap.cc:60:execute$3947 ($mux).
Removed top 5 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1a.$auto$bmuxmap.cc:60:execute$3946 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1a.$auto$bmuxmap.cc:60:execute$3945 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1a.$auto$bmuxmap.cc:60:execute$3944 ($mux).
Removed top 3 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1a.$auto$bmuxmap.cc:60:execute$3942 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1a.$auto$bmuxmap.cc:60:execute$3940 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1a.$auto$bmuxmap.cc:60:execute$3939 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1a.$auto$bmuxmap.cc:60:execute$3938 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1a.$auto$bmuxmap.cc:60:execute$3933 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1a.$auto$bmuxmap.cc:60:execute$3929 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1a.$auto$bmuxmap.cc:60:execute$3927 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1a.$auto$bmuxmap.cc:60:execute$3925 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1a.$auto$bmuxmap.cc:60:execute$3923 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1a.$auto$bmuxmap.cc:60:execute$3921 ($mux).
Removed top 3 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1a.$auto$bmuxmap.cc:60:execute$3920 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1a.$auto$bmuxmap.cc:60:execute$3915 ($mux).
Removed top 5 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1a.$auto$bmuxmap.cc:60:execute$3913 ($mux).
Removed top 3 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1a.$auto$bmuxmap.cc:60:execute$3912 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1a.$auto$bmuxmap.cc:60:execute$3907 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1a.$auto$bmuxmap.cc:60:execute$3906 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1a.$auto$bmuxmap.cc:60:execute$3905 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1a.$auto$bmuxmap.cc:60:execute$3902 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1a.$auto$bmuxmap.cc:60:execute$3901 ($mux).
Removed top 3 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1a.$auto$bmuxmap.cc:60:execute$3898 ($mux).
Removed top 4 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1a.$auto$bmuxmap.cc:60:execute$3896 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1a.$auto$bmuxmap.cc:60:execute$3894 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1a.$auto$bmuxmap.cc:60:execute$3892 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1a.$auto$bmuxmap.cc:60:execute$3891 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1a.$auto$bmuxmap.cc:60:execute$3889 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1a.$auto$bmuxmap.cc:60:execute$3888 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1a.$auto$bmuxmap.cc:60:execute$3886 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1a.$auto$bmuxmap.cc:60:execute$3885 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1a.$auto$bmuxmap.cc:60:execute$3882 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1a.$auto$bmuxmap.cc:60:execute$3880 ($mux).
Removed top 4 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1a.$auto$bmuxmap.cc:60:execute$3879 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1a.$auto$bmuxmap.cc:60:execute$3877 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1a.$auto$bmuxmap.cc:60:execute$3876 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1a.$auto$bmuxmap.cc:60:execute$3871 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1a.$auto$bmuxmap.cc:60:execute$3870 ($mux).
Removed top 4 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1a.$auto$bmuxmap.cc:60:execute$3869 ($mux).
Removed top 3 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1a.$auto$bmuxmap.cc:60:execute$3867 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1a.$auto$bmuxmap.cc:60:execute$3866 ($mux).
Removed top 4 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1a.$auto$bmuxmap.cc:60:execute$3865 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1a.$auto$bmuxmap.cc:60:execute$3864 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1a.$auto$bmuxmap.cc:60:execute$3862 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1a.$auto$bmuxmap.cc:60:execute$3859 ($mux).
Removed top 5 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1a.$auto$bmuxmap.cc:60:execute$3858 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1a.$auto$bmuxmap.cc:60:execute$3855 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1a.$auto$bmuxmap.cc:60:execute$3852 ($mux).
Removed top 3 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1a.$auto$bmuxmap.cc:60:execute$3851 ($mux).
Removed top 4 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1a.$auto$bmuxmap.cc:60:execute$3848 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1a.$auto$bmuxmap.cc:60:execute$3845 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1a.$auto$bmuxmap.cc:60:execute$3844 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1a.$auto$bmuxmap.cc:60:execute$3843 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1a.$auto$bmuxmap.cc:60:execute$3842 ($mux).
Removed top 7 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1a.$auto$bmuxmap.cc:60:execute$3841 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1a.$auto$bmuxmap.cc:60:execute$3838 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1a.$auto$bmuxmap.cc:60:execute$3833 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1a.$auto$bmuxmap.cc:60:execute$3832 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1a.$auto$bmuxmap.cc:60:execute$3831 ($mux).
Removed top 3 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1b.$auto$bmuxmap.cc:60:execute$3955 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1b.$auto$bmuxmap.cc:60:execute$3953 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1b.$auto$bmuxmap.cc:60:execute$3950 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1b.$auto$bmuxmap.cc:60:execute$3948 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1b.$auto$bmuxmap.cc:60:execute$3947 ($mux).
Removed top 5 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1b.$auto$bmuxmap.cc:60:execute$3946 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1b.$auto$bmuxmap.cc:60:execute$3945 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1b.$auto$bmuxmap.cc:60:execute$3944 ($mux).
Removed top 3 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1b.$auto$bmuxmap.cc:60:execute$3942 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1b.$auto$bmuxmap.cc:60:execute$3940 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1b.$auto$bmuxmap.cc:60:execute$3939 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1b.$auto$bmuxmap.cc:60:execute$3938 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1b.$auto$bmuxmap.cc:60:execute$3933 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1b.$auto$bmuxmap.cc:60:execute$3929 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1b.$auto$bmuxmap.cc:60:execute$3927 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1b.$auto$bmuxmap.cc:60:execute$3925 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1b.$auto$bmuxmap.cc:60:execute$3923 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1b.$auto$bmuxmap.cc:60:execute$3921 ($mux).
Removed top 3 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1b.$auto$bmuxmap.cc:60:execute$3920 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1b.$auto$bmuxmap.cc:60:execute$3915 ($mux).
Removed top 5 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1b.$auto$bmuxmap.cc:60:execute$3913 ($mux).
Removed top 3 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1b.$auto$bmuxmap.cc:60:execute$3912 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1b.$auto$bmuxmap.cc:60:execute$3907 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1b.$auto$bmuxmap.cc:60:execute$3906 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1b.$auto$bmuxmap.cc:60:execute$3905 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1b.$auto$bmuxmap.cc:60:execute$3902 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1b.$auto$bmuxmap.cc:60:execute$3901 ($mux).
Removed top 3 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1b.$auto$bmuxmap.cc:60:execute$3898 ($mux).
Removed top 4 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1b.$auto$bmuxmap.cc:60:execute$3896 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1b.$auto$bmuxmap.cc:60:execute$3894 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1b.$auto$bmuxmap.cc:60:execute$3892 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1b.$auto$bmuxmap.cc:60:execute$3891 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1b.$auto$bmuxmap.cc:60:execute$3889 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1b.$auto$bmuxmap.cc:60:execute$3888 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1b.$auto$bmuxmap.cc:60:execute$3886 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1b.$auto$bmuxmap.cc:60:execute$3885 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1b.$auto$bmuxmap.cc:60:execute$3882 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1b.$auto$bmuxmap.cc:60:execute$3880 ($mux).
Removed top 4 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1b.$auto$bmuxmap.cc:60:execute$3879 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1b.$auto$bmuxmap.cc:60:execute$3877 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1b.$auto$bmuxmap.cc:60:execute$3876 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1b.$auto$bmuxmap.cc:60:execute$3871 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1b.$auto$bmuxmap.cc:60:execute$3870 ($mux).
Removed top 4 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1b.$auto$bmuxmap.cc:60:execute$3869 ($mux).
Removed top 3 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1b.$auto$bmuxmap.cc:60:execute$3867 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1b.$auto$bmuxmap.cc:60:execute$3866 ($mux).
Removed top 4 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1b.$auto$bmuxmap.cc:60:execute$3865 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1b.$auto$bmuxmap.cc:60:execute$3864 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1b.$auto$bmuxmap.cc:60:execute$3862 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1b.$auto$bmuxmap.cc:60:execute$3859 ($mux).
Removed top 5 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1b.$auto$bmuxmap.cc:60:execute$3858 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1b.$auto$bmuxmap.cc:60:execute$3855 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1b.$auto$bmuxmap.cc:60:execute$3852 ($mux).
Removed top 3 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1b.$auto$bmuxmap.cc:60:execute$3851 ($mux).
Removed top 4 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1b.$auto$bmuxmap.cc:60:execute$3848 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1b.$auto$bmuxmap.cc:60:execute$3845 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1b.$auto$bmuxmap.cc:60:execute$3844 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1b.$auto$bmuxmap.cc:60:execute$3843 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1b.$auto$bmuxmap.cc:60:execute$3842 ($mux).
Removed top 7 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1b.$auto$bmuxmap.cc:60:execute$3841 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1b.$auto$bmuxmap.cc:60:execute$3838 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1b.$auto$bmuxmap.cc:60:execute$3833 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1b.$auto$bmuxmap.cc:60:execute$3832 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S1b.$auto$bmuxmap.cc:60:execute$3831 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2a.\S1.$auto$bmuxmap.cc:60:execute$3831 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2a.\S1.$auto$bmuxmap.cc:60:execute$3832 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2a.\S1.$auto$bmuxmap.cc:60:execute$3833 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2a.\S1.$auto$bmuxmap.cc:60:execute$3838 ($mux).
Removed top 7 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2a.\S1.$auto$bmuxmap.cc:60:execute$3841 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2a.\S1.$auto$bmuxmap.cc:60:execute$3842 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2a.\S1.$auto$bmuxmap.cc:60:execute$3843 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2a.\S1.$auto$bmuxmap.cc:60:execute$3844 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2a.\S1.$auto$bmuxmap.cc:60:execute$3845 ($mux).
Removed top 4 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2a.\S1.$auto$bmuxmap.cc:60:execute$3848 ($mux).
Removed top 3 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2a.\S1.$auto$bmuxmap.cc:60:execute$3851 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2a.\S1.$auto$bmuxmap.cc:60:execute$3852 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2a.\S1.$auto$bmuxmap.cc:60:execute$3855 ($mux).
Removed top 5 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2a.\S1.$auto$bmuxmap.cc:60:execute$3858 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2a.\S1.$auto$bmuxmap.cc:60:execute$3859 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2a.\S1.$auto$bmuxmap.cc:60:execute$3862 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2a.\S1.$auto$bmuxmap.cc:60:execute$3864 ($mux).
Removed top 4 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2a.\S1.$auto$bmuxmap.cc:60:execute$3865 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2a.\S1.$auto$bmuxmap.cc:60:execute$3866 ($mux).
Removed top 3 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2a.\S1.$auto$bmuxmap.cc:60:execute$3867 ($mux).
Removed top 4 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2a.\S1.$auto$bmuxmap.cc:60:execute$3869 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2a.\S1.$auto$bmuxmap.cc:60:execute$3870 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2a.\S1.$auto$bmuxmap.cc:60:execute$3871 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2a.\S1.$auto$bmuxmap.cc:60:execute$3876 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2a.\S1.$auto$bmuxmap.cc:60:execute$3877 ($mux).
Removed top 4 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2a.\S1.$auto$bmuxmap.cc:60:execute$3879 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2a.\S1.$auto$bmuxmap.cc:60:execute$3880 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2a.\S1.$auto$bmuxmap.cc:60:execute$3882 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2a.\S1.$auto$bmuxmap.cc:60:execute$3885 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2a.\S1.$auto$bmuxmap.cc:60:execute$3886 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2a.\S1.$auto$bmuxmap.cc:60:execute$3888 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2a.\S1.$auto$bmuxmap.cc:60:execute$3889 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2a.\S1.$auto$bmuxmap.cc:60:execute$3891 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2a.\S1.$auto$bmuxmap.cc:60:execute$3892 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2a.\S1.$auto$bmuxmap.cc:60:execute$3894 ($mux).
Removed top 4 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2a.\S1.$auto$bmuxmap.cc:60:execute$3896 ($mux).
Removed top 3 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2a.\S1.$auto$bmuxmap.cc:60:execute$3898 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2a.\S1.$auto$bmuxmap.cc:60:execute$3901 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2a.\S1.$auto$bmuxmap.cc:60:execute$3902 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2a.\S1.$auto$bmuxmap.cc:60:execute$3905 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2a.\S1.$auto$bmuxmap.cc:60:execute$3906 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2a.\S1.$auto$bmuxmap.cc:60:execute$3907 ($mux).
Removed top 3 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2a.\S1.$auto$bmuxmap.cc:60:execute$3912 ($mux).
Removed top 5 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2a.\S1.$auto$bmuxmap.cc:60:execute$3913 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2a.\S1.$auto$bmuxmap.cc:60:execute$3915 ($mux).
Removed top 3 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2a.\S1.$auto$bmuxmap.cc:60:execute$3920 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2a.\S1.$auto$bmuxmap.cc:60:execute$3921 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2a.\S1.$auto$bmuxmap.cc:60:execute$3923 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2a.\S1.$auto$bmuxmap.cc:60:execute$3925 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2a.\S1.$auto$bmuxmap.cc:60:execute$3927 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2a.\S1.$auto$bmuxmap.cc:60:execute$3929 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2a.\S1.$auto$bmuxmap.cc:60:execute$3933 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2a.\S1.$auto$bmuxmap.cc:60:execute$3938 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2a.\S1.$auto$bmuxmap.cc:60:execute$3939 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2a.\S1.$auto$bmuxmap.cc:60:execute$3940 ($mux).
Removed top 3 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2a.\S1.$auto$bmuxmap.cc:60:execute$3942 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2a.\S1.$auto$bmuxmap.cc:60:execute$3944 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2a.\S1.$auto$bmuxmap.cc:60:execute$3945 ($mux).
Removed top 5 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2a.\S1.$auto$bmuxmap.cc:60:execute$3946 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2a.\S1.$auto$bmuxmap.cc:60:execute$3947 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2a.\S1.$auto$bmuxmap.cc:60:execute$3948 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2a.\S1.$auto$bmuxmap.cc:60:execute$3950 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2a.\S1.$auto$bmuxmap.cc:60:execute$3953 ($mux).
Removed top 3 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2a.\S1.$auto$bmuxmap.cc:60:execute$3955 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2a.\S1.$auto$bmuxmap.cc:60:execute$3965 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2a.\S1.$auto$bmuxmap.cc:60:execute$3972 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2a.\S1.$auto$bmuxmap.cc:60:execute$3975 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2a.\S1.$auto$bmuxmap.cc:60:execute$3976 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2a.\S1.$auto$bmuxmap.cc:60:execute$3978 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2a.\S1.$auto$bmuxmap.cc:60:execute$3981 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2a.\S1.$auto$bmuxmap.cc:60:execute$4012 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2a.\S1.$auto$bmuxmap.cc:60:execute$4015 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2b.\S1.$auto$bmuxmap.cc:60:execute$3831 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2b.\S1.$auto$bmuxmap.cc:60:execute$3832 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2b.\S1.$auto$bmuxmap.cc:60:execute$3833 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2b.\S1.$auto$bmuxmap.cc:60:execute$3838 ($mux).
Removed top 7 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2b.\S1.$auto$bmuxmap.cc:60:execute$3841 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2b.\S1.$auto$bmuxmap.cc:60:execute$3842 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2b.\S1.$auto$bmuxmap.cc:60:execute$3843 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2b.\S1.$auto$bmuxmap.cc:60:execute$3844 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2b.\S1.$auto$bmuxmap.cc:60:execute$3845 ($mux).
Removed top 4 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2b.\S1.$auto$bmuxmap.cc:60:execute$3848 ($mux).
Removed top 3 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2b.\S1.$auto$bmuxmap.cc:60:execute$3851 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2b.\S1.$auto$bmuxmap.cc:60:execute$3852 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2b.\S1.$auto$bmuxmap.cc:60:execute$3855 ($mux).
Removed top 5 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2b.\S1.$auto$bmuxmap.cc:60:execute$3858 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2b.\S1.$auto$bmuxmap.cc:60:execute$3859 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2b.\S1.$auto$bmuxmap.cc:60:execute$3862 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2b.\S1.$auto$bmuxmap.cc:60:execute$3864 ($mux).
Removed top 4 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2b.\S1.$auto$bmuxmap.cc:60:execute$3865 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2b.\S1.$auto$bmuxmap.cc:60:execute$3866 ($mux).
Removed top 3 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2b.\S1.$auto$bmuxmap.cc:60:execute$3867 ($mux).
Removed top 4 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2b.\S1.$auto$bmuxmap.cc:60:execute$3869 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2b.\S1.$auto$bmuxmap.cc:60:execute$3870 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2b.\S1.$auto$bmuxmap.cc:60:execute$3871 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2b.\S1.$auto$bmuxmap.cc:60:execute$3876 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2b.\S1.$auto$bmuxmap.cc:60:execute$3877 ($mux).
Removed top 4 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2b.\S1.$auto$bmuxmap.cc:60:execute$3879 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2b.\S1.$auto$bmuxmap.cc:60:execute$3880 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2b.\S1.$auto$bmuxmap.cc:60:execute$3882 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2b.\S1.$auto$bmuxmap.cc:60:execute$3885 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2b.\S1.$auto$bmuxmap.cc:60:execute$3886 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2b.\S1.$auto$bmuxmap.cc:60:execute$3888 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2b.\S1.$auto$bmuxmap.cc:60:execute$3889 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2b.\S1.$auto$bmuxmap.cc:60:execute$3891 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2b.\S1.$auto$bmuxmap.cc:60:execute$3892 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2b.\S1.$auto$bmuxmap.cc:60:execute$3894 ($mux).
Removed top 4 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2b.\S1.$auto$bmuxmap.cc:60:execute$3896 ($mux).
Removed top 3 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2b.\S1.$auto$bmuxmap.cc:60:execute$3898 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2b.\S1.$auto$bmuxmap.cc:60:execute$3901 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2b.\S1.$auto$bmuxmap.cc:60:execute$3902 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2b.\S1.$auto$bmuxmap.cc:60:execute$3905 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2b.\S1.$auto$bmuxmap.cc:60:execute$3906 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2b.\S1.$auto$bmuxmap.cc:60:execute$3907 ($mux).
Removed top 3 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2b.\S1.$auto$bmuxmap.cc:60:execute$3912 ($mux).
Removed top 5 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2b.\S1.$auto$bmuxmap.cc:60:execute$3913 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2b.\S1.$auto$bmuxmap.cc:60:execute$3915 ($mux).
Removed top 3 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2b.\S1.$auto$bmuxmap.cc:60:execute$3920 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2b.\S1.$auto$bmuxmap.cc:60:execute$3921 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2b.\S1.$auto$bmuxmap.cc:60:execute$3923 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2b.\S1.$auto$bmuxmap.cc:60:execute$3925 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2b.\S1.$auto$bmuxmap.cc:60:execute$3927 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2b.\S1.$auto$bmuxmap.cc:60:execute$3929 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2b.\S1.$auto$bmuxmap.cc:60:execute$3933 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2b.\S1.$auto$bmuxmap.cc:60:execute$3938 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2b.\S1.$auto$bmuxmap.cc:60:execute$3939 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2b.\S1.$auto$bmuxmap.cc:60:execute$3940 ($mux).
Removed top 3 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2b.\S1.$auto$bmuxmap.cc:60:execute$3942 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2b.\S1.$auto$bmuxmap.cc:60:execute$3944 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2b.\S1.$auto$bmuxmap.cc:60:execute$3945 ($mux).
Removed top 5 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2b.\S1.$auto$bmuxmap.cc:60:execute$3946 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2b.\S1.$auto$bmuxmap.cc:60:execute$3947 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2b.\S1.$auto$bmuxmap.cc:60:execute$3948 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2b.\S1.$auto$bmuxmap.cc:60:execute$3950 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2b.\S1.$auto$bmuxmap.cc:60:execute$3953 ($mux).
Removed top 3 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2b.\S1.$auto$bmuxmap.cc:60:execute$3955 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2b.\S1.$auto$bmuxmap.cc:60:execute$3965 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2b.\S1.$auto$bmuxmap.cc:60:execute$3972 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2b.\S1.$auto$bmuxmap.cc:60:execute$3975 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2b.\S1.$auto$bmuxmap.cc:60:execute$3976 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2b.\S1.$auto$bmuxmap.cc:60:execute$3978 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2b.\S1.$auto$bmuxmap.cc:60:execute$3981 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2b.\S1.$auto$bmuxmap.cc:60:execute$4012 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S2b.\S1.$auto$bmuxmap.cc:60:execute$4015 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3a.\S1.$auto$bmuxmap.cc:60:execute$3831 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3a.\S1.$auto$bmuxmap.cc:60:execute$3832 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3a.\S1.$auto$bmuxmap.cc:60:execute$3833 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3a.\S1.$auto$bmuxmap.cc:60:execute$3838 ($mux).
Removed top 7 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3a.\S1.$auto$bmuxmap.cc:60:execute$3841 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3a.\S1.$auto$bmuxmap.cc:60:execute$3842 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3a.\S1.$auto$bmuxmap.cc:60:execute$3843 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3a.\S1.$auto$bmuxmap.cc:60:execute$3844 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3a.\S1.$auto$bmuxmap.cc:60:execute$3845 ($mux).
Removed top 4 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3a.\S1.$auto$bmuxmap.cc:60:execute$3848 ($mux).
Removed top 3 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3a.\S1.$auto$bmuxmap.cc:60:execute$3851 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3a.\S1.$auto$bmuxmap.cc:60:execute$3852 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3a.\S1.$auto$bmuxmap.cc:60:execute$3855 ($mux).
Removed top 5 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3a.\S1.$auto$bmuxmap.cc:60:execute$3858 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3a.\S1.$auto$bmuxmap.cc:60:execute$3859 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3a.\S1.$auto$bmuxmap.cc:60:execute$3862 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3a.\S1.$auto$bmuxmap.cc:60:execute$3864 ($mux).
Removed top 4 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3a.\S1.$auto$bmuxmap.cc:60:execute$3865 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3a.\S1.$auto$bmuxmap.cc:60:execute$3866 ($mux).
Removed top 3 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3a.\S1.$auto$bmuxmap.cc:60:execute$3867 ($mux).
Removed top 4 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3a.\S1.$auto$bmuxmap.cc:60:execute$3869 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3a.\S1.$auto$bmuxmap.cc:60:execute$3870 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3a.\S1.$auto$bmuxmap.cc:60:execute$3871 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3a.\S1.$auto$bmuxmap.cc:60:execute$3876 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3a.\S1.$auto$bmuxmap.cc:60:execute$3877 ($mux).
Removed top 4 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3a.\S1.$auto$bmuxmap.cc:60:execute$3879 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3a.\S1.$auto$bmuxmap.cc:60:execute$3880 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3a.\S1.$auto$bmuxmap.cc:60:execute$3882 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3a.\S1.$auto$bmuxmap.cc:60:execute$3885 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3a.\S1.$auto$bmuxmap.cc:60:execute$3886 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3a.\S1.$auto$bmuxmap.cc:60:execute$3888 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3a.\S1.$auto$bmuxmap.cc:60:execute$3889 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3a.\S1.$auto$bmuxmap.cc:60:execute$3891 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3a.\S1.$auto$bmuxmap.cc:60:execute$3892 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3a.\S1.$auto$bmuxmap.cc:60:execute$3894 ($mux).
Removed top 4 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3a.\S1.$auto$bmuxmap.cc:60:execute$3896 ($mux).
Removed top 3 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3a.\S1.$auto$bmuxmap.cc:60:execute$3898 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3a.\S1.$auto$bmuxmap.cc:60:execute$3901 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3a.\S1.$auto$bmuxmap.cc:60:execute$3902 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3a.\S1.$auto$bmuxmap.cc:60:execute$3905 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3a.\S1.$auto$bmuxmap.cc:60:execute$3906 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3a.\S1.$auto$bmuxmap.cc:60:execute$3907 ($mux).
Removed top 3 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3a.\S1.$auto$bmuxmap.cc:60:execute$3912 ($mux).
Removed top 5 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3a.\S1.$auto$bmuxmap.cc:60:execute$3913 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3a.\S1.$auto$bmuxmap.cc:60:execute$3915 ($mux).
Removed top 3 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3a.\S1.$auto$bmuxmap.cc:60:execute$3920 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3a.\S1.$auto$bmuxmap.cc:60:execute$3921 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3a.\S1.$auto$bmuxmap.cc:60:execute$3923 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3a.\S1.$auto$bmuxmap.cc:60:execute$3925 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3a.\S1.$auto$bmuxmap.cc:60:execute$3927 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3a.\S1.$auto$bmuxmap.cc:60:execute$3929 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3a.\S1.$auto$bmuxmap.cc:60:execute$3933 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3a.\S1.$auto$bmuxmap.cc:60:execute$3938 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3a.\S1.$auto$bmuxmap.cc:60:execute$3939 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3a.\S1.$auto$bmuxmap.cc:60:execute$3940 ($mux).
Removed top 3 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3a.\S1.$auto$bmuxmap.cc:60:execute$3942 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3a.\S1.$auto$bmuxmap.cc:60:execute$3944 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3a.\S1.$auto$bmuxmap.cc:60:execute$3945 ($mux).
Removed top 5 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3a.\S1.$auto$bmuxmap.cc:60:execute$3946 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3a.\S1.$auto$bmuxmap.cc:60:execute$3947 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3a.\S1.$auto$bmuxmap.cc:60:execute$3948 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3a.\S1.$auto$bmuxmap.cc:60:execute$3950 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3a.\S1.$auto$bmuxmap.cc:60:execute$3953 ($mux).
Removed top 3 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3a.\S1.$auto$bmuxmap.cc:60:execute$3955 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3a.\S1.$auto$bmuxmap.cc:60:execute$3965 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3a.\S1.$auto$bmuxmap.cc:60:execute$3972 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3a.\S1.$auto$bmuxmap.cc:60:execute$3975 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3a.\S1.$auto$bmuxmap.cc:60:execute$3976 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3a.\S1.$auto$bmuxmap.cc:60:execute$3978 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3a.\S1.$auto$bmuxmap.cc:60:execute$3981 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3a.\S1.$auto$bmuxmap.cc:60:execute$4012 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3a.\S1.$auto$bmuxmap.cc:60:execute$4015 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3b.\S1.$auto$bmuxmap.cc:60:execute$3831 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3b.\S1.$auto$bmuxmap.cc:60:execute$3832 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3b.\S1.$auto$bmuxmap.cc:60:execute$3833 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3b.\S1.$auto$bmuxmap.cc:60:execute$3838 ($mux).
Removed top 7 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3b.\S1.$auto$bmuxmap.cc:60:execute$3841 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3b.\S1.$auto$bmuxmap.cc:60:execute$3842 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3b.\S1.$auto$bmuxmap.cc:60:execute$3843 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3b.\S1.$auto$bmuxmap.cc:60:execute$3844 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3b.\S1.$auto$bmuxmap.cc:60:execute$3845 ($mux).
Removed top 4 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3b.\S1.$auto$bmuxmap.cc:60:execute$3848 ($mux).
Removed top 3 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3b.\S1.$auto$bmuxmap.cc:60:execute$3851 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3b.\S1.$auto$bmuxmap.cc:60:execute$3852 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3b.\S1.$auto$bmuxmap.cc:60:execute$3855 ($mux).
Removed top 5 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3b.\S1.$auto$bmuxmap.cc:60:execute$3858 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3b.\S1.$auto$bmuxmap.cc:60:execute$3859 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3b.\S1.$auto$bmuxmap.cc:60:execute$3862 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3b.\S1.$auto$bmuxmap.cc:60:execute$3864 ($mux).
Removed top 4 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3b.\S1.$auto$bmuxmap.cc:60:execute$3865 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3b.\S1.$auto$bmuxmap.cc:60:execute$3866 ($mux).
Removed top 3 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3b.\S1.$auto$bmuxmap.cc:60:execute$3867 ($mux).
Removed top 4 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3b.\S1.$auto$bmuxmap.cc:60:execute$3869 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3b.\S1.$auto$bmuxmap.cc:60:execute$3870 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3b.\S1.$auto$bmuxmap.cc:60:execute$3871 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3b.\S1.$auto$bmuxmap.cc:60:execute$3876 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3b.\S1.$auto$bmuxmap.cc:60:execute$3877 ($mux).
Removed top 4 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3b.\S1.$auto$bmuxmap.cc:60:execute$3879 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3b.\S1.$auto$bmuxmap.cc:60:execute$3880 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3b.\S1.$auto$bmuxmap.cc:60:execute$3882 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3b.\S1.$auto$bmuxmap.cc:60:execute$3885 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3b.\S1.$auto$bmuxmap.cc:60:execute$3886 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3b.\S1.$auto$bmuxmap.cc:60:execute$3888 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3b.\S1.$auto$bmuxmap.cc:60:execute$3889 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3b.\S1.$auto$bmuxmap.cc:60:execute$3891 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3b.\S1.$auto$bmuxmap.cc:60:execute$3892 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3b.\S1.$auto$bmuxmap.cc:60:execute$3894 ($mux).
Removed top 4 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3b.\S1.$auto$bmuxmap.cc:60:execute$3896 ($mux).
Removed top 3 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3b.\S1.$auto$bmuxmap.cc:60:execute$3898 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3b.\S1.$auto$bmuxmap.cc:60:execute$3901 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3b.\S1.$auto$bmuxmap.cc:60:execute$3902 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3b.\S1.$auto$bmuxmap.cc:60:execute$3905 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3b.\S1.$auto$bmuxmap.cc:60:execute$3906 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3b.\S1.$auto$bmuxmap.cc:60:execute$3907 ($mux).
Removed top 3 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3b.\S1.$auto$bmuxmap.cc:60:execute$3912 ($mux).
Removed top 5 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3b.\S1.$auto$bmuxmap.cc:60:execute$3913 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3b.\S1.$auto$bmuxmap.cc:60:execute$3915 ($mux).
Removed top 3 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3b.\S1.$auto$bmuxmap.cc:60:execute$3920 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3b.\S1.$auto$bmuxmap.cc:60:execute$3921 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3b.\S1.$auto$bmuxmap.cc:60:execute$3923 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3b.\S1.$auto$bmuxmap.cc:60:execute$3925 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3b.\S1.$auto$bmuxmap.cc:60:execute$3927 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3b.\S1.$auto$bmuxmap.cc:60:execute$3929 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3b.\S1.$auto$bmuxmap.cc:60:execute$3933 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3b.\S1.$auto$bmuxmap.cc:60:execute$3938 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3b.\S1.$auto$bmuxmap.cc:60:execute$3939 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3b.\S1.$auto$bmuxmap.cc:60:execute$3940 ($mux).
Removed top 3 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3b.\S1.$auto$bmuxmap.cc:60:execute$3942 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3b.\S1.$auto$bmuxmap.cc:60:execute$3944 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3b.\S1.$auto$bmuxmap.cc:60:execute$3945 ($mux).
Removed top 5 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3b.\S1.$auto$bmuxmap.cc:60:execute$3946 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3b.\S1.$auto$bmuxmap.cc:60:execute$3947 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3b.\S1.$auto$bmuxmap.cc:60:execute$3948 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3b.\S1.$auto$bmuxmap.cc:60:execute$3950 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3b.\S1.$auto$bmuxmap.cc:60:execute$3953 ($mux).
Removed top 3 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3b.\S1.$auto$bmuxmap.cc:60:execute$3955 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3b.\S1.$auto$bmuxmap.cc:60:execute$3965 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3b.\S1.$auto$bmuxmap.cc:60:execute$3972 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3b.\S1.$auto$bmuxmap.cc:60:execute$3975 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3b.\S1.$auto$bmuxmap.cc:60:execute$3976 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3b.\S1.$auto$bmuxmap.cc:60:execute$3978 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3b.\S1.$auto$bmuxmap.cc:60:execute$3981 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3b.\S1.$auto$bmuxmap.cc:60:execute$4012 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S3b.\S1.$auto$bmuxmap.cc:60:execute$4015 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4a.\S1.$auto$bmuxmap.cc:60:execute$3831 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4a.\S1.$auto$bmuxmap.cc:60:execute$3832 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4a.\S1.$auto$bmuxmap.cc:60:execute$3833 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4a.\S1.$auto$bmuxmap.cc:60:execute$3838 ($mux).
Removed top 7 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4a.\S1.$auto$bmuxmap.cc:60:execute$3841 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4a.\S1.$auto$bmuxmap.cc:60:execute$3842 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4a.\S1.$auto$bmuxmap.cc:60:execute$3843 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4a.\S1.$auto$bmuxmap.cc:60:execute$3844 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4a.\S1.$auto$bmuxmap.cc:60:execute$3845 ($mux).
Removed top 4 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4a.\S1.$auto$bmuxmap.cc:60:execute$3848 ($mux).
Removed top 3 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4a.\S1.$auto$bmuxmap.cc:60:execute$3851 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4a.\S1.$auto$bmuxmap.cc:60:execute$3852 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4a.\S1.$auto$bmuxmap.cc:60:execute$3855 ($mux).
Removed top 5 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4a.\S1.$auto$bmuxmap.cc:60:execute$3858 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4a.\S1.$auto$bmuxmap.cc:60:execute$3859 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4a.\S1.$auto$bmuxmap.cc:60:execute$3862 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4a.\S1.$auto$bmuxmap.cc:60:execute$3864 ($mux).
Removed top 4 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4a.\S1.$auto$bmuxmap.cc:60:execute$3865 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4a.\S1.$auto$bmuxmap.cc:60:execute$3866 ($mux).
Removed top 3 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4a.\S1.$auto$bmuxmap.cc:60:execute$3867 ($mux).
Removed top 4 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4a.\S1.$auto$bmuxmap.cc:60:execute$3869 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4a.\S1.$auto$bmuxmap.cc:60:execute$3870 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4a.\S1.$auto$bmuxmap.cc:60:execute$3871 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4a.\S1.$auto$bmuxmap.cc:60:execute$3876 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4a.\S1.$auto$bmuxmap.cc:60:execute$3877 ($mux).
Removed top 4 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4a.\S1.$auto$bmuxmap.cc:60:execute$3879 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4a.\S1.$auto$bmuxmap.cc:60:execute$3880 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4a.\S1.$auto$bmuxmap.cc:60:execute$3882 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4a.\S1.$auto$bmuxmap.cc:60:execute$3885 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4a.\S1.$auto$bmuxmap.cc:60:execute$3886 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4a.\S1.$auto$bmuxmap.cc:60:execute$3888 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4a.\S1.$auto$bmuxmap.cc:60:execute$3889 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4a.\S1.$auto$bmuxmap.cc:60:execute$3891 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4a.\S1.$auto$bmuxmap.cc:60:execute$3892 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4a.\S1.$auto$bmuxmap.cc:60:execute$3894 ($mux).
Removed top 4 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4a.\S1.$auto$bmuxmap.cc:60:execute$3896 ($mux).
Removed top 3 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4a.\S1.$auto$bmuxmap.cc:60:execute$3898 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4a.\S1.$auto$bmuxmap.cc:60:execute$3901 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4a.\S1.$auto$bmuxmap.cc:60:execute$3902 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4a.\S1.$auto$bmuxmap.cc:60:execute$3905 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4a.\S1.$auto$bmuxmap.cc:60:execute$3906 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4a.\S1.$auto$bmuxmap.cc:60:execute$3907 ($mux).
Removed top 3 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4a.\S1.$auto$bmuxmap.cc:60:execute$3912 ($mux).
Removed top 5 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4a.\S1.$auto$bmuxmap.cc:60:execute$3913 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4a.\S1.$auto$bmuxmap.cc:60:execute$3915 ($mux).
Removed top 3 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4a.\S1.$auto$bmuxmap.cc:60:execute$3920 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4a.\S1.$auto$bmuxmap.cc:60:execute$3921 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4a.\S1.$auto$bmuxmap.cc:60:execute$3923 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4a.\S1.$auto$bmuxmap.cc:60:execute$3925 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4a.\S1.$auto$bmuxmap.cc:60:execute$3927 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4a.\S1.$auto$bmuxmap.cc:60:execute$3929 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4a.\S1.$auto$bmuxmap.cc:60:execute$3933 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4a.\S1.$auto$bmuxmap.cc:60:execute$3938 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4a.\S1.$auto$bmuxmap.cc:60:execute$3939 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4a.\S1.$auto$bmuxmap.cc:60:execute$3940 ($mux).
Removed top 3 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4a.\S1.$auto$bmuxmap.cc:60:execute$3942 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4a.\S1.$auto$bmuxmap.cc:60:execute$3944 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4a.\S1.$auto$bmuxmap.cc:60:execute$3945 ($mux).
Removed top 5 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4a.\S1.$auto$bmuxmap.cc:60:execute$3946 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4a.\S1.$auto$bmuxmap.cc:60:execute$3947 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4a.\S1.$auto$bmuxmap.cc:60:execute$3948 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4a.\S1.$auto$bmuxmap.cc:60:execute$3950 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4a.\S1.$auto$bmuxmap.cc:60:execute$3953 ($mux).
Removed top 3 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4a.\S1.$auto$bmuxmap.cc:60:execute$3955 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4a.\S1.$auto$bmuxmap.cc:60:execute$3965 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4a.\S1.$auto$bmuxmap.cc:60:execute$3972 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4a.\S1.$auto$bmuxmap.cc:60:execute$3975 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4a.\S1.$auto$bmuxmap.cc:60:execute$3976 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4a.\S1.$auto$bmuxmap.cc:60:execute$3978 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4a.\S1.$auto$bmuxmap.cc:60:execute$3981 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4a.\S1.$auto$bmuxmap.cc:60:execute$4012 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4a.\S1.$auto$bmuxmap.cc:60:execute$4015 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4b.\S1.$auto$bmuxmap.cc:60:execute$3831 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4b.\S1.$auto$bmuxmap.cc:60:execute$3832 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4b.\S1.$auto$bmuxmap.cc:60:execute$3833 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4b.\S1.$auto$bmuxmap.cc:60:execute$3838 ($mux).
Removed top 7 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4b.\S1.$auto$bmuxmap.cc:60:execute$3841 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4b.\S1.$auto$bmuxmap.cc:60:execute$3842 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4b.\S1.$auto$bmuxmap.cc:60:execute$3843 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4b.\S1.$auto$bmuxmap.cc:60:execute$3844 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4b.\S1.$auto$bmuxmap.cc:60:execute$3845 ($mux).
Removed top 4 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4b.\S1.$auto$bmuxmap.cc:60:execute$3848 ($mux).
Removed top 3 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4b.\S1.$auto$bmuxmap.cc:60:execute$3851 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4b.\S1.$auto$bmuxmap.cc:60:execute$3852 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4b.\S1.$auto$bmuxmap.cc:60:execute$3855 ($mux).
Removed top 5 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4b.\S1.$auto$bmuxmap.cc:60:execute$3858 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4b.\S1.$auto$bmuxmap.cc:60:execute$3859 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4b.\S1.$auto$bmuxmap.cc:60:execute$3862 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4b.\S1.$auto$bmuxmap.cc:60:execute$3864 ($mux).
Removed top 4 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4b.\S1.$auto$bmuxmap.cc:60:execute$3865 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4b.\S1.$auto$bmuxmap.cc:60:execute$3866 ($mux).
Removed top 3 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4b.\S1.$auto$bmuxmap.cc:60:execute$3867 ($mux).
Removed top 4 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4b.\S1.$auto$bmuxmap.cc:60:execute$3869 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4b.\S1.$auto$bmuxmap.cc:60:execute$3870 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4b.\S1.$auto$bmuxmap.cc:60:execute$3871 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4b.\S1.$auto$bmuxmap.cc:60:execute$3876 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4b.\S1.$auto$bmuxmap.cc:60:execute$3877 ($mux).
Removed top 4 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4b.\S1.$auto$bmuxmap.cc:60:execute$3879 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4b.\S1.$auto$bmuxmap.cc:60:execute$3880 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4b.\S1.$auto$bmuxmap.cc:60:execute$3882 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4b.\S1.$auto$bmuxmap.cc:60:execute$3885 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4b.\S1.$auto$bmuxmap.cc:60:execute$3886 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4b.\S1.$auto$bmuxmap.cc:60:execute$3888 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4b.\S1.$auto$bmuxmap.cc:60:execute$3889 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4b.\S1.$auto$bmuxmap.cc:60:execute$3891 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4b.\S1.$auto$bmuxmap.cc:60:execute$3892 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4b.\S1.$auto$bmuxmap.cc:60:execute$3894 ($mux).
Removed top 4 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4b.\S1.$auto$bmuxmap.cc:60:execute$3896 ($mux).
Removed top 3 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4b.\S1.$auto$bmuxmap.cc:60:execute$3898 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4b.\S1.$auto$bmuxmap.cc:60:execute$3901 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4b.\S1.$auto$bmuxmap.cc:60:execute$3902 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4b.\S1.$auto$bmuxmap.cc:60:execute$3905 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4b.\S1.$auto$bmuxmap.cc:60:execute$3906 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4b.\S1.$auto$bmuxmap.cc:60:execute$3907 ($mux).
Removed top 3 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4b.\S1.$auto$bmuxmap.cc:60:execute$3912 ($mux).
Removed top 5 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4b.\S1.$auto$bmuxmap.cc:60:execute$3913 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4b.\S1.$auto$bmuxmap.cc:60:execute$3915 ($mux).
Removed top 3 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4b.\S1.$auto$bmuxmap.cc:60:execute$3920 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4b.\S1.$auto$bmuxmap.cc:60:execute$3921 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4b.\S1.$auto$bmuxmap.cc:60:execute$3923 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4b.\S1.$auto$bmuxmap.cc:60:execute$3925 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4b.\S1.$auto$bmuxmap.cc:60:execute$3927 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4b.\S1.$auto$bmuxmap.cc:60:execute$3929 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4b.\S1.$auto$bmuxmap.cc:60:execute$3933 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4b.\S1.$auto$bmuxmap.cc:60:execute$3938 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4b.\S1.$auto$bmuxmap.cc:60:execute$3939 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4b.\S1.$auto$bmuxmap.cc:60:execute$3940 ($mux).
Removed top 3 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4b.\S1.$auto$bmuxmap.cc:60:execute$3942 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4b.\S1.$auto$bmuxmap.cc:60:execute$3944 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4b.\S1.$auto$bmuxmap.cc:60:execute$3945 ($mux).
Removed top 5 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4b.\S1.$auto$bmuxmap.cc:60:execute$3946 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4b.\S1.$auto$bmuxmap.cc:60:execute$3947 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4b.\S1.$auto$bmuxmap.cc:60:execute$3948 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4b.\S1.$auto$bmuxmap.cc:60:execute$3950 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4b.\S1.$auto$bmuxmap.cc:60:execute$3953 ($mux).
Removed top 3 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4b.\S1.$auto$bmuxmap.cc:60:execute$3955 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4b.\S1.$auto$bmuxmap.cc:60:execute$3965 ($mux).
Removed top 2 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4b.\S1.$auto$bmuxmap.cc:60:execute$3972 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4b.\S1.$auto$bmuxmap.cc:60:execute$3975 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4b.\S1.$auto$bmuxmap.cc:60:execute$3976 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4b.\S1.$auto$bmuxmap.cc:60:execute$3978 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4b.\S1.$auto$bmuxmap.cc:60:execute$3981 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4b.\S1.$auto$bmuxmap.cc:60:execute$4012 ($mux).
Removed top 1 bits (of 8) from mux cell CAMELLIA_IF.$flatten\core.\DP.\F1.\S4b.\S1.$auto$bmuxmap.cc:60:execute$4015 ($mux).
Removed top 45 bits (of 96) from wire CAMELLIA_IF.$flatten\core.\CTRL.$auto$bmuxmap.cc:58:execute$4090.
Removed top 24 bits (of 48) from wire CAMELLIA_IF.$flatten\core.\CTRL.$auto$bmuxmap.cc:58:execute$4123.
Removed top 12 bits (of 24) from wire CAMELLIA_IF.$flatten\core.\CTRL.$auto$bmuxmap.cc:58:execute$4140.
Removed top 6 bits (of 12) from wire CAMELLIA_IF.$flatten\core.\CTRL.$auto$bmuxmap.cc:58:execute$4149.
Removed top 3 bits (of 6) from wire CAMELLIA_IF.$flatten\core.\CTRL.$auto$bmuxmap.cc:58:execute$4154.
Removed top 1920 bits (of 4096) from wire CAMELLIA_IF.$flatten\core.\CTRL.$auto$bmuxmap.cc:58:execute$4195.
Removed top 896 bits (of 2048) from wire CAMELLIA_IF.$flatten\core.\CTRL.$auto$bmuxmap.cc:58:execute$4228.
Removed top 384 bits (of 1024) from wire CAMELLIA_IF.$flatten\core.\CTRL.$auto$bmuxmap.cc:58:execute$4245.
Removed top 128 bits (of 512) from wire CAMELLIA_IF.$flatten\core.\CTRL.$auto$bmuxmap.cc:58:execute$4254.
Removed top 1920 bits (of 4096) from wire CAMELLIA_IF.$flatten\core.\CTRL.$auto$bmuxmap.cc:58:execute$4264.
Removed top 1024 bits (of 2048) from wire CAMELLIA_IF.$flatten\core.\CTRL.$auto$bmuxmap.cc:58:execute$4297.
Removed top 512 bits (of 1024) from wire CAMELLIA_IF.$flatten\core.\CTRL.$auto$bmuxmap.cc:58:execute$4314.
Removed top 256 bits (of 512) from wire CAMELLIA_IF.$flatten\core.\CTRL.$auto$bmuxmap.cc:58:execute$4323.
Removed top 128 bits (of 256) from wire CAMELLIA_IF.$flatten\core.\CTRL.$auto$bmuxmap.cc:58:execute$4328.
Removed top 1920 bits (of 4096) from wire CAMELLIA_IF.$flatten\core.\CTRL.$auto$bmuxmap.cc:58:execute$4333.
Removed top 1024 bits (of 2048) from wire CAMELLIA_IF.$flatten\core.\CTRL.$auto$bmuxmap.cc:58:execute$4366.
Removed top 512 bits (of 1024) from wire CAMELLIA_IF.$flatten\core.\CTRL.$auto$bmuxmap.cc:58:execute$4383.
Removed top 256 bits (of 512) from wire CAMELLIA_IF.$flatten\core.\CTRL.$auto$bmuxmap.cc:58:execute$4392.
Removed top 128 bits (of 256) from wire CAMELLIA_IF.$flatten\core.\CTRL.$auto$bmuxmap.cc:58:execute$4397.
Removed top 1920 bits (of 4096) from wire CAMELLIA_IF.$flatten\core.\CTRL.$auto$bmuxmap.cc:58:execute$4402.
Removed top 1024 bits (of 2048) from wire CAMELLIA_IF.$flatten\core.\CTRL.$auto$bmuxmap.cc:58:execute$4435.
Removed top 512 bits (of 1024) from wire CAMELLIA_IF.$flatten\core.\CTRL.$auto$bmuxmap.cc:58:execute$4452.
Removed top 256 bits (of 512) from wire CAMELLIA_IF.$flatten\core.\CTRL.$auto$bmuxmap.cc:58:execute$4461.
Removed top 128 bits (of 256) from wire CAMELLIA_IF.$flatten\core.\CTRL.$auto$bmuxmap.cc:58:execute$4466.
Removed top 60 bits (of 128) from wire CAMELLIA_IF.$flatten\core.\CTRL.$auto$bmuxmap.cc:58:execute$4471.
Removed top 28 bits (of 64) from wire CAMELLIA_IF.$flatten\core.\CTRL.$auto$bmuxmap.cc:58:execute$4504.
Removed top 12 bits (of 32) from wire CAMELLIA_IF.$flatten\core.\CTRL.$auto$bmuxmap.cc:58:execute$4521.
Removed top 4 bits (of 16) from wire CAMELLIA_IF.$flatten\core.\CTRL.$auto$bmuxmap.cc:58:execute$4530.
Removed top 1920 bits (of 4096) from wire CAMELLIA_IF.$flatten\core.\CTRL.$auto$bmuxmap.cc:58:execute$4540.
Removed top 1024 bits (of 2048) from wire CAMELLIA_IF.$flatten\core.\CTRL.$auto$bmuxmap.cc:58:execute$4573.
Removed top 512 bits (of 1024) from wire CAMELLIA_IF.$flatten\core.\CTRL.$auto$bmuxmap.cc:58:execute$4590.
Removed top 256 bits (of 512) from wire CAMELLIA_IF.$flatten\core.\CTRL.$auto$bmuxmap.cc:58:execute$4599.
Removed top 128 bits (of 256) from wire CAMELLIA_IF.$flatten\core.\CTRL.$auto$bmuxmap.cc:58:execute$4604.
Removed top 512 bits (of 1024) from wire CAMELLIA_IF.$flatten\core.\CTRL.$auto$bmuxmap.cc:58:execute$4659.
Removed top 256 bits (of 512) from wire CAMELLIA_IF.$flatten\core.\CTRL.$auto$bmuxmap.cc:58:execute$4668.
Removed top 128 bits (of 256) from wire CAMELLIA_IF.$flatten\core.\CTRL.$auto$bmuxmap.cc:58:execute$4673.
Removed top 30 bits (of 64) from wire CAMELLIA_IF.$flatten\core.\CTRL.$auto$bmuxmap.cc:58:execute$4678.
Removed top 16 bits (of 32) from wire CAMELLIA_IF.$flatten\core.\CTRL.$auto$bmuxmap.cc:58:execute$4711.
Removed top 8 bits (of 16) from wire CAMELLIA_IF.$flatten\core.\CTRL.$auto$bmuxmap.cc:58:execute$4728.
Removed top 4 bits (of 8) from wire CAMELLIA_IF.$flatten\core.\CTRL.$auto$bmuxmap.cc:58:execute$4737.
Removed top 2 bits (of 4) from wire CAMELLIA_IF.$flatten\core.\CTRL.$auto$bmuxmap.cc:58:execute$4742.
Removed top 1920 bits (of 4096) from wire CAMELLIA_IF.$flatten\core.\CTRL.$auto$bmuxmap.cc:58:execute$4747.
Removed top 896 bits (of 2048) from wire CAMELLIA_IF.$flatten\core.\CTRL.$auto$bmuxmap.cc:58:execute$4780.
Removed top 384 bits (of 1024) from wire CAMELLIA_IF.$flatten\core.\CTRL.$auto$bmuxmap.cc:58:execute$4797.
Removed top 128 bits (of 512) from wire CAMELLIA_IF.$flatten\core.\CTRL.$auto$bmuxmap.cc:58:execute$4806.
Removed top 512 bits (of 1024) from wire CAMELLIA_IF.$flatten\core.\CTRL.$auto$bmuxmap.cc:58:execute$4866.
Removed top 256 bits (of 512) from wire CAMELLIA_IF.$flatten\core.\CTRL.$auto$bmuxmap.cc:58:execute$4875.
Removed top 128 bits (of 256) from wire CAMELLIA_IF.$flatten\core.\CTRL.$auto$bmuxmap.cc:58:execute$4880.
Removed top 15 bits (of 32) from wire CAMELLIA_IF.$flatten\core.\CTRL.$auto$bmuxmap.cc:58:execute$4885.
Removed top 8 bits (of 16) from wire CAMELLIA_IF.$flatten\core.\CTRL.$auto$bmuxmap.cc:58:execute$4918.
Removed top 4 bits (of 8) from wire CAMELLIA_IF.$flatten\core.\CTRL.$auto$bmuxmap.cc:58:execute$4935.
Removed top 2 bits (of 4) from wire CAMELLIA_IF.$flatten\core.\CTRL.$auto$bmuxmap.cc:58:execute$4944.
Removed top 1 bits (of 2) from wire CAMELLIA_IF.$flatten\core.\CTRL.$auto$bmuxmap.cc:58:execute$4949.
Removed top 90 bits (of 192) from wire CAMELLIA_IF.$flatten\core.\CTRL.$auto$bmuxmap.cc:58:execute$4959.
Removed top 42 bits (of 96) from wire CAMELLIA_IF.$flatten\core.\CTRL.$auto$bmuxmap.cc:58:execute$4992.
Removed top 18 bits (of 48) from wire CAMELLIA_IF.$flatten\core.\CTRL.$auto$bmuxmap.cc:58:execute$5009.
Removed top 6 bits (of 24) from wire CAMELLIA_IF.$flatten\core.\CTRL.$auto$bmuxmap.cc:58:execute$5018.
Removed top 256 bits (of 512) from wire CAMELLIA_IF.$flatten\core.\CTRL.$auto$bmuxmap.cc:58:execute$5028.
Removed top 128 bits (of 256) from wire CAMELLIA_IF.$flatten\core.\CTRL.$auto$bmuxmap.cc:58:execute$5033.
Removed top 1 bits (of 4) from wire CAMELLIA_IF.$flatten\core.\CTRL.$verific$n28197$2599.
Removed top 2 bits (of 4) from wire CAMELLIA_IF.$flatten\core.\CTRL.$verific$n30197$2621.
Removed top 2 bits (of 3) from wire CAMELLIA_IF.$flatten\core.\CTRL.$verific$n34302$2661.
Removed top 1 bits (of 2) from wire CAMELLIA_IF.$flatten\core.\CTRL.$verific$n34331$2667.
Removed top 5 bits (of 6) from wire CAMELLIA_IF.$flatten\core.\CTRL.$verific$n35831$2693.
Removed top 3 bits (of 1024) from wire CAMELLIA_IF.$flatten\core.\DP.\F1.\S1a.$auto$bmuxmap.cc:58:execute$3827.
Removed top 58 bits (of 512) from wire CAMELLIA_IF.$flatten\core.\DP.\F1.\S1a.$auto$bmuxmap.cc:58:execute$3956.
Removed top 58 bits (of 256) from wire CAMELLIA_IF.$flatten\core.\DP.\F1.\S1a.$auto$bmuxmap.cc:58:execute$4021.
Removed top 58 bits (of 128) from wire CAMELLIA_IF.$flatten\core.\DP.\F1.\S1a.$auto$bmuxmap.cc:58:execute$4054.
Removed top 58 bits (of 64) from wire CAMELLIA_IF.$flatten\core.\DP.\F1.\S1a.$auto$bmuxmap.cc:58:execute$4071.
Removed top 3 bits (of 1024) from wire CAMELLIA_IF.$flatten\core.\DP.\F1.\S1b.$auto$bmuxmap.cc:58:execute$3827.
Removed top 3 bits (of 1024) from wire CAMELLIA_IF.$flatten\core.\DP.\F1.\S2a.\S1.$auto$bmuxmap.cc:58:execute$3827.

yosys> peepopt

3.19. Executing PEEPOPT pass (run peephole optimizers).

yosys> opt_clean

3.20. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \CAMELLIA_IF..
Removed 0 unused cells and 71 unused wires.
<suppressed ~1 debug messages>

yosys> bmuxmap

3.21. Executing BMUXMAP pass.

yosys> demuxmap

3.22. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> alumacc

3.23. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module CAMELLIA_IF:
  creating $macc model for $verific$add_45$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$618 ($add).
  creating $macc model for $verific$add_70$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$636 ($add).
  creating $macc model for $verific$add_8$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$591 ($add).
  creating $alu model for $macc $verific$add_8$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$591.
  creating $alu model for $macc $verific$add_70$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$636.
  creating $alu model for $macc $verific$add_45$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$618.
  creating $alu cell for $verific$add_45$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$618: $auto$alumacc.cc:485:replace_alu$5470
  creating $alu cell for $verific$add_70$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$636: $auto$alumacc.cc:485:replace_alu$5473
  creating $alu cell for $verific$add_8$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$591: $auto$alumacc.cc:485:replace_alu$5476
  created 3 $alu and 0 $macc cells.

yosys> opt_expr

3.24. Executing OPT_EXPR pass (perform const folding).
Optimizing module CAMELLIA_IF.

yosys> opt_merge -nomux

3.25. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\CAMELLIA_IF'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.26. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \CAMELLIA_IF..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~63 debug messages>

yosys> opt_reduce

3.27. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \CAMELLIA_IF.
Performed a total of 0 changes.

yosys> opt_merge

3.28. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\CAMELLIA_IF'.
<suppressed ~27 debug messages>
Removed a total of 9 cells.

yosys> opt_share

3.29. Executing OPT_SHARE pass.

yosys> opt_dff -nodffe -nosdff

3.30. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.31. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \CAMELLIA_IF..

yosys> opt_expr

3.32. Executing OPT_EXPR pass (perform const folding).
Optimizing module CAMELLIA_IF.

yosys> opt_muxtree

3.33. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \CAMELLIA_IF..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~66 debug messages>

yosys> opt_reduce

3.34. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \CAMELLIA_IF.
Performed a total of 0 changes.

yosys> opt_merge

3.35. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\CAMELLIA_IF'.
Removed a total of 0 cells.

yosys> opt_share

3.36. Executing OPT_SHARE pass.

yosys> opt_dff -nodffe -nosdff

3.37. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.38. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \CAMELLIA_IF..

yosys> opt_expr

3.39. Executing OPT_EXPR pass (perform const folding).
Optimizing module CAMELLIA_IF.
MAX OPT ITERATION = 2

yosys> stat

3.40. Printing statistics.

=== CAMELLIA_IF ===

   Number of wires:                660
   Number of wire bits:          92582
   Number of public wires:         223
   Number of public wire bits:    8276
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               2552
     $adff                          10
     $adffe                         19
     $alu                            3
     $and                            7
     $dffe                           9
     $eq                            15
     $logic_not                      3
     $mux                         2360
     $ne                            60
     $not                            9
     $or                             8
     $pmux                           2
     $reduce_and                    12
     $reduce_bool                    7
     $reduce_or                      3
     $xor                           25


yosys> memory -nomap

3.41. Executing MEMORY pass.

yosys> opt_mem

3.41.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

yosys> opt_mem_priority

3.41.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

yosys> opt_mem_feedback

3.41.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

yosys> memory_bmux2rom

3.41.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

yosys> memory_dff

3.41.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

yosys> opt_clean

3.41.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \CAMELLIA_IF..

yosys> memory_share

3.41.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

yosys> opt_mem_widen

3.41.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

yosys> opt_clean

3.41.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \CAMELLIA_IF..

yosys> memory_collect

3.41.10. Executing MEMORY_COLLECT pass (generating $mem cells).

yosys> stat

3.42. Printing statistics.

=== CAMELLIA_IF ===

   Number of wires:                660
   Number of wire bits:          92582
   Number of public wires:         223
   Number of public wire bits:    8276
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               2552
     $adff                          10
     $adffe                         19
     $alu                            3
     $and                            7
     $dffe                           9
     $eq                            15
     $logic_not                      3
     $mux                         2360
     $ne                            60
     $not                            9
     $or                             8
     $pmux                           2
     $reduce_and                    12
     $reduce_bool                    7
     $reduce_or                      3
     $xor                           25


yosys> muxpack

3.43. Executing MUXPACK pass ($mux cell cascades to $pmux).
Converted 0 (p)mux cells into 0 pmux cells.
<suppressed ~1429 debug messages>

yosys> opt_clean

3.44. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \CAMELLIA_IF..

yosys> pmuxtree

3.45. Executing PMUXTREE pass.

yosys> muxpack

3.46. Executing MUXPACK pass ($mux cell cascades to $pmux).
Converted 0 (p)mux cells into 0 pmux cells.
<suppressed ~1434 debug messages>

yosys> memory_map

3.47. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

yosys> stat

3.48. Printing statistics.

=== CAMELLIA_IF ===

   Number of wires:                672
   Number of wire bits:          92603
   Number of public wires:         223
   Number of public wire bits:    8276
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               2562
     $adff                          10
     $adffe                         19
     $alu                            3
     $and                            7
     $dffe                           9
     $eq                            15
     $logic_not                      3
     $mux                         2366
     $ne                            60
     $not                           11
     $or                            10
     $reduce_and                    12
     $reduce_bool                    7
     $reduce_or                      5
     $xor                           25


yosys> techmap -map +/techmap.v -map +/rapidsilicon/genesis/arith_map.v

3.49. Executing TECHMAP pass (map to technology primitives).

3.49.1. Executing Verilog-2005 frontend: /home/users/khyber.runner/yosys_verific_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/khyber.runner/yosys_verific_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.49.2. Executing Verilog-2005 frontend: /home/users/khyber.runner/yosys_verific_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/arith_map.v
Parsing Verilog input from `/home/users/khyber.runner/yosys_verific_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_rs_alu'.
Successfully finished Verilog frontend.

3.49.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $adffe.
Using extmapper simplemap for cells of type $adff.
Using template $paramod$3ef7d3dd227da7627a99c5e5a6a4deb817573e39\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $ne.
Using template $paramod$32a7b7b86c07519b7537abc18e96f0331f97914d\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $dffe.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000011 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000100 for cells of type $lcu.
No more expansions possible.
<suppressed ~3106 debug messages>

yosys> stat

3.50. Printing statistics.

=== CAMELLIA_IF ===

   Number of wires:               1121
   Number of wire bits:          97028
   Number of public wires:         223
   Number of public wire bits:    8276
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:              50161
     $_AND_                        194
     $_DFFE_PN_                    137
     $_DFFE_PP0P_                 1545
     $_DFFE_PP1P_                    2
     $_DFFE_PP_                      7
     $_DFF_PP0_                    272
     $_MUX_                      46321
     $_NOT_                        102
     $_OR_                         476
     $_XOR_                       1105


yosys> opt_expr

3.51. Executing OPT_EXPR pass (perform const folding).
Optimizing module CAMELLIA_IF.
<suppressed ~11403 debug messages>

yosys> opt_merge -nomux

3.52. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\CAMELLIA_IF'.
<suppressed ~22074 debug messages>
Removed a total of 7358 cells.

yosys> opt_muxtree

3.53. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \CAMELLIA_IF..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.54. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \CAMELLIA_IF.
Performed a total of 0 changes.

yosys> opt_merge

3.55. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\CAMELLIA_IF'.
Removed a total of 0 cells.

yosys> opt_share

3.56. Executing OPT_SHARE pass.

yosys> opt_dff -nodffe -nosdff

3.57. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.58. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \CAMELLIA_IF..
Removed 8 unused cells and 598 unused wires.
<suppressed ~9 debug messages>

yosys> opt_expr

3.59. Executing OPT_EXPR pass (perform const folding).
Optimizing module CAMELLIA_IF.
<suppressed ~337 debug messages>

yosys> opt_muxtree

3.60. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \CAMELLIA_IF..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.61. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \CAMELLIA_IF.
Performed a total of 0 changes.

yosys> opt_merge

3.62. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\CAMELLIA_IF'.
Removed a total of 0 cells.

yosys> opt_share

3.63. Executing OPT_SHARE pass.

yosys> opt_dff -nodffe -nosdff

3.64. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.65. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \CAMELLIA_IF..
Removed 0 unused cells and 5 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.66. Executing OPT_EXPR pass (perform const folding).
Optimizing module CAMELLIA_IF.
MAX OPT ITERATION = 2

yosys> opt -nodffe -fast -full -nosdff

3.67. Executing OPT pass (performing simple optimizations).

yosys> opt_expr -full

3.67.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module CAMELLIA_IF.
<suppressed ~12679 debug messages>

yosys> opt_merge

3.67.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\CAMELLIA_IF'.
<suppressed ~390 debug messages>
Removed a total of 130 cells.

yosys> opt_dff -nodffe -nosdff

3.67.3. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.67.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \CAMELLIA_IF..
Removed 0 unused cells and 86 unused wires.
<suppressed ~1 debug messages>

3.67.5. Finished fast OPT passes.

yosys> techmap -map +/techmap.v

3.68. Executing TECHMAP pass (map to technology primitives).

3.68.1. Executing Verilog-2005 frontend: /home/users/khyber.runner/yosys_verific_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/khyber.runner/yosys_verific_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.68.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~71 debug messages>

yosys> opt -nodffe -sat -nosdff

3.69. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.69.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module CAMELLIA_IF.

yosys> opt_merge -nomux

3.69.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\CAMELLIA_IF'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.69.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \CAMELLIA_IF..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.69.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \CAMELLIA_IF.
Performed a total of 0 changes.

yosys> opt_merge

3.69.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\CAMELLIA_IF'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -sat -nosdff

3.69.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.69.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \CAMELLIA_IF..

yosys> opt_expr

3.69.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module CAMELLIA_IF.

3.69.9. Finished OPT passes. (There is nothing left to do.)

yosys> abc -dff

3.70. Executing ABC pass (technology mapping using ABC).

3.70.1. Summary of detected clock domains:
  2586 cells in clk=\clk, en=$auto$opt_dff.cc:219:make_patterns_logic$5340, arst=\reset, srst={ }
  650 cells in clk=\clk, en=$auto$opt_dff.cc:219:make_patterns_logic$5316, arst=\reset, srst={ }
  1447 cells in clk=\clk, en=$auto$opt_dff.cc:219:make_patterns_logic$5297, arst=\reset, srst={ }
  395 cells in clk=\clk, en=$auto$opt_dff.cc:219:make_patterns_logic$5252, arst=\reset, srst={ }
  856 cells in clk=\clk, en=$auto$opt_dff.cc:219:make_patterns_logic$5233, arst=\reset, srst={ }
  1438 cells in clk=\clk, en=$auto$opt_dff.cc:219:make_patterns_logic$5187, arst=\reset, srst={ }
  841 cells in clk=\clk, en=$auto$opt_dff.cc:219:make_patterns_logic$5154, arst=\reset, srst={ }
  1305 cells in clk=\clk, en=$auto$opt_dff.cc:219:make_patterns_logic$5139, arst=\reset, srst={ }
  258 cells in clk=\clk, en=\en_data, arst=\reset, srst={ }
  2 cells in clk=\clk, en=$auto$opt_dff.cc:194:make_patterns_logic$5086, arst=\reset, srst={ }
  816 cells in clk=\clk, en=\en_key, arst=\reset, srst={ }
  8 cells in clk=\clk, en=$auto$opt_dff.cc:194:make_patterns_logic$5083, arst=\reset, srst={ }
  139 cells in clk=\clk, en=$auto$opt_dff.cc:219:make_patterns_logic$5097, arst=\reset, srst={ }
  3 cells in clk=\clk, en=$auto$opt_dff.cc:194:make_patterns_logic$5089, arst=\reset, srst={ }
  20 cells in clk=\clk, en=$auto$opt_dff.cc:194:make_patterns_logic$5080, arst=\reset, srst={ }
  10414 cells in clk=\clk, en={ }, arst=\reset, srst={ }
  9 cells in clk=\clk, en=$auto$opt_dff.cc:219:make_patterns_logic$5397, arst=\reset, srst={ }
  1087 cells in clk=\clk, en=!\reset, arst={ }, srst={ }
  338 cells in clk=\clk, en=$auto$opt_dff.cc:219:make_patterns_logic$5378, arst={ }, srst={ }
  213 cells in clk=\clk, en=$auto$opt_dff.cc:219:make_patterns_logic$5371, arst={ }, srst={ }

3.70.2. Extracting gate netlist of module `\CAMELLIA_IF' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:219:make_patterns_logic$5340, asynchronously reset by \reset
Extracted 2586 gates and 4777 wires to a netlist network with 2189 inputs and 2583 outputs.

3.70.2.1. Executing ABC.

3.70.3. Extracting gate netlist of module `\CAMELLIA_IF' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:219:make_patterns_logic$5316, asynchronously reset by \reset
Extracted 650 gates and 920 wires to a netlist network with 270 inputs and 260 outputs.

3.70.3.1. Executing ABC.

3.70.4. Extracting gate netlist of module `\CAMELLIA_IF' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:219:make_patterns_logic$5297, asynchronously reset by \reset
Extracted 1447 gates and 2254 wires to a netlist network with 807 inputs and 1282 outputs.

3.70.4.1. Executing ABC.

3.70.5. Extracting gate netlist of module `\CAMELLIA_IF' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:219:make_patterns_logic$5252, asynchronously reset by \reset
Extracted 395 gates and 535 wires to a netlist network with 140 inputs and 132 outputs.

3.70.5.1. Executing ABC.

3.70.6. Extracting gate netlist of module `\CAMELLIA_IF' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:219:make_patterns_logic$5233, asynchronously reset by \reset
Extracted 856 gates and 1010 wires to a netlist network with 154 inputs and 642 outputs.

3.70.6.1. Executing ABC.

3.70.7. Extracting gate netlist of module `\CAMELLIA_IF' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:219:make_patterns_logic$5187, asynchronously reset by \reset
Extracted 1438 gates and 1981 wires to a netlist network with 543 inputs and 1287 outputs.

3.70.7.1. Executing ABC.

3.70.8. Extracting gate netlist of module `\CAMELLIA_IF' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:219:make_patterns_logic$5154, asynchronously reset by \reset
Extracted 841 gates and 1492 wires to a netlist network with 651 inputs and 389 outputs.

3.70.8.1. Executing ABC.

3.70.9. Extracting gate netlist of module `\CAMELLIA_IF' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:219:make_patterns_logic$5139, asynchronously reset by \reset
Extracted 1305 gates and 1844 wires to a netlist network with 539 inputs and 902 outputs.

3.70.9.1. Executing ABC.

3.70.10. Extracting gate netlist of module `\CAMELLIA_IF' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by \en_data, asynchronously reset by \reset
Extracted 258 gates and 405 wires to a netlist network with 147 inputs and 130 outputs.

3.70.10.1. Executing ABC.

3.70.11. Extracting gate netlist of module `\CAMELLIA_IF' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:194:make_patterns_logic$5086, asynchronously reset by \reset
Extracted 2 gates and 3 wires to a netlist network with 1 inputs and 1 outputs.

3.70.11.1. Executing ABC.

3.70.12. Extracting gate netlist of module `\CAMELLIA_IF' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by \en_key, asynchronously reset by \reset
Extracted 816 gates and 964 wires to a netlist network with 147 inputs and 512 outputs.

3.70.12.1. Executing ABC.

3.70.13. Extracting gate netlist of module `\CAMELLIA_IF' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:194:make_patterns_logic$5083, asynchronously reset by \reset
Extracted 8 gates and 15 wires to a netlist network with 6 inputs and 4 outputs.

3.70.13.1. Executing ABC.

3.70.14. Extracting gate netlist of module `\CAMELLIA_IF' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:219:make_patterns_logic$5097, asynchronously reset by \reset
Extracted 139 gates and 273 wires to a netlist network with 134 inputs and 134 outputs.

3.70.14.1. Executing ABC.

3.70.15. Extracting gate netlist of module `\CAMELLIA_IF' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:194:make_patterns_logic$5089, asynchronously reset by \reset
Extracted 3 gates and 5 wires to a netlist network with 2 inputs and 2 outputs.

3.70.15.1. Executing ABC.

3.70.16. Extracting gate netlist of module `\CAMELLIA_IF' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:194:make_patterns_logic$5080, asynchronously reset by \reset
Extracted 20 gates and 31 wires to a netlist network with 10 inputs and 4 outputs.

3.70.16.1. Executing ABC.

3.70.17. Extracting gate netlist of module `\CAMELLIA_IF' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, asynchronously reset by \reset
Extracted 10414 gates and 15812 wires to a netlist network with 5396 inputs and 1222 outputs.

3.70.17.1. Executing ABC.

3.70.18. Extracting gate netlist of module `\CAMELLIA_IF' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:219:make_patterns_logic$5397, asynchronously reset by \reset
Extracted 9 gates and 16 wires to a netlist network with 7 inputs and 7 outputs.

3.70.18.1. Executing ABC.

3.70.19. Extracting gate netlist of module `\CAMELLIA_IF' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by !\reset
Extracted 1087 gates and 1749 wires to a netlist network with 660 inputs and 399 outputs.

3.70.19.1. Executing ABC.

3.70.20. Extracting gate netlist of module `\CAMELLIA_IF' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:219:make_patterns_logic$5378
Extracted 338 gates and 603 wires to a netlist network with 263 inputs and 69 outputs.

3.70.20.1. Executing ABC.

3.70.21. Extracting gate netlist of module `\CAMELLIA_IF' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:219:make_patterns_logic$5371
Extracted 213 gates and 488 wires to a netlist network with 275 inputs and 68 outputs.

3.70.21.1. Executing ABC.

yosys> abc -dff

3.71. Executing ABC pass (technology mapping using ABC).

3.71.1. Summary of detected clock domains:
  15 cells in clk=\clk, en=$abc$87218$auto$opt_dff.cc:194:make_patterns_logic$5080, arst=\reset, srst={ }
  3 cells in clk=\clk, en=$abc$68679$auto$opt_dff.cc:194:make_patterns_logic$5089, arst=\reset, srst={ }
  859 cells in clk=\clk, en=$abc$65517$auto$opt_dff.cc:219:make_patterns_logic$5139, arst=\reset, srst={ }
  2192 cells in clk=\clk, en=$abc$56789$auto$opt_dff.cc:219:make_patterns_logic$5340, arst=\reset, srst={ }
  525 cells in clk=\clk, en=$abc$59378$auto$opt_dff.cc:219:make_patterns_logic$5316, arst=\reset, srst={ }
  1252 cells in clk=\clk, en=$abc$59902$auto$opt_dff.cc:219:make_patterns_logic$5297, arst=\reset, srst={ }
  464 cells in clk=\clk, en=$abc$61474$auto$opt_dff.cc:219:make_patterns_logic$5252, arst=\reset, srst={ }
  138 cells in clk=\clk, en=$abc$87206$auto$opt_dff.cc:219:make_patterns_logic$5397, arst=\reset, srst={ }
  1067 cells in clk=\clk, en=!\reset, arst={ }, srst={ }
  624 cells in clk=\clk, en=$abc$88683$auto$opt_dff.cc:219:make_patterns_logic$5378, arst={ }, srst={ }
  19055 cells in clk=\clk, en={ }, arst=\reset, srst={ }
  130 cells in clk=\clk, en=\en_data, arst=\reset, srst={ }
  2 cells in clk=\clk, en=$abc$87218$auto$opt_dff.cc:194:make_patterns_logic$5086, arst=\reset, srst={ }
  4 cells in clk=\clk, en=$abc$68272$auto$opt_dff.cc:194:make_patterns_logic$5083, arst=\reset, srst={ }
  721 cells in clk=\clk, en=\en_key, arst=\reset, srst={ }
  316 cells in clk=\clk, en=$abc$68280$auto$opt_dff.cc:219:make_patterns_logic$5097, arst=\reset, srst={ }
  403 cells in clk=\clk, en=$abc$61869$auto$opt_dff.cc:219:make_patterns_logic$5233, arst=\reset, srst={ }
  217 cells in clk=\clk, en=$abc$62789$auto$opt_dff.cc:219:make_patterns_logic$5187, arst=\reset, srst={ }
  2968 cells in clk=\clk, en=$abc$64354$auto$opt_dff.cc:219:make_patterns_logic$5154, arst=\reset, srst={ }
  219 cells in clk=\clk, en=$abc$89317$auto$opt_dff.cc:219:make_patterns_logic$5371, arst={ }, srst={ }

3.71.2. Extracting gate netlist of module `\CAMELLIA_IF' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$87218$auto$opt_dff.cc:194:make_patterns_logic$5080, asynchronously reset by \reset
Extracted 15 gates and 27 wires to a netlist network with 12 inputs and 4 outputs.

3.71.2.1. Executing ABC.

3.71.3. Extracting gate netlist of module `\CAMELLIA_IF' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$68679$auto$opt_dff.cc:194:make_patterns_logic$5089, asynchronously reset by \reset
Extracted 3 gates and 5 wires to a netlist network with 2 inputs and 2 outputs.

3.71.3.1. Executing ABC.

3.71.4. Extracting gate netlist of module `\CAMELLIA_IF' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$65517$auto$opt_dff.cc:219:make_patterns_logic$5139, asynchronously reset by \reset
Extracted 859 gates and 1523 wires to a netlist network with 664 inputs and 842 outputs.

3.71.4.1. Executing ABC.

3.71.5. Extracting gate netlist of module `\CAMELLIA_IF' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$56789$auto$opt_dff.cc:219:make_patterns_logic$5340, asynchronously reset by \reset
Extracted 2192 gates and 3995 wires to a netlist network with 1803 inputs and 2190 outputs.

3.71.5.1. Executing ABC.

3.71.6. Extracting gate netlist of module `\CAMELLIA_IF' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$59378$auto$opt_dff.cc:219:make_patterns_logic$5316, asynchronously reset by \reset
Extracted 525 gates and 794 wires to a netlist network with 269 inputs and 263 outputs.

3.71.6.1. Executing ABC.

3.71.7. Extracting gate netlist of module `\CAMELLIA_IF' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$59902$auto$opt_dff.cc:219:make_patterns_logic$5297, asynchronously reset by \reset
Extracted 1252 gates and 2058 wires to a netlist network with 806 inputs and 451 outputs.

3.71.7.1. Executing ABC.

3.71.8. Extracting gate netlist of module `\CAMELLIA_IF' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$61474$auto$opt_dff.cc:219:make_patterns_logic$5252, asynchronously reset by \reset
Extracted 464 gates and 921 wires to a netlist network with 457 inputs and 363 outputs.

3.71.8.1. Executing ABC.

3.71.9. Extracting gate netlist of module `\CAMELLIA_IF' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$87206$auto$opt_dff.cc:219:make_patterns_logic$5397, asynchronously reset by \reset
Extracted 138 gates and 402 wires to a netlist network with 264 inputs and 136 outputs.

3.71.9.1. Executing ABC.

3.71.10. Extracting gate netlist of module `\CAMELLIA_IF' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by !\reset
Extracted 1067 gates and 1846 wires to a netlist network with 779 inputs and 407 outputs.

3.71.10.1. Executing ABC.

3.71.11. Extracting gate netlist of module `\CAMELLIA_IF' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$88683$auto$opt_dff.cc:219:make_patterns_logic$5378
Extracted 624 gates and 1105 wires to a netlist network with 481 inputs and 178 outputs.

3.71.11.1. Executing ABC.

3.71.12. Extracting gate netlist of module `\CAMELLIA_IF' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, asynchronously reset by \reset
Extracted 19055 gates and 24837 wires to a netlist network with 5782 inputs and 1099 outputs.

3.71.12.1. Executing ABC.

3.71.13. Extracting gate netlist of module `\CAMELLIA_IF' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by \en_data, asynchronously reset by \reset
Extracted 130 gates and 149 wires to a netlist network with 19 inputs and 128 outputs.

3.71.13.1. Executing ABC.

3.71.14. Extracting gate netlist of module `\CAMELLIA_IF' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$95761$abc$87218$auto$opt_dff.cc:194:make_patterns_logic$5086, asynchronously reset by \reset
Extracted 2 gates and 3 wires to a netlist network with 1 inputs and 1 outputs.

3.71.14.1. Executing ABC.

3.71.15. Extracting gate netlist of module `\CAMELLIA_IF' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$95761$abc$68272$auto$opt_dff.cc:194:make_patterns_logic$5083, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 3 outputs.

3.71.15.1. Executing ABC.

3.71.16. Extracting gate netlist of module `\CAMELLIA_IF' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by \en_key, asynchronously reset by \reset
Extracted 721 gates and 773 wires to a netlist network with 52 inputs and 415 outputs.

3.71.16.1. Executing ABC.

3.71.17. Extracting gate netlist of module `\CAMELLIA_IF' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$68280$auto$opt_dff.cc:219:make_patterns_logic$5097, asynchronously reset by \reset
Extracted 316 gates and 500 wires to a netlist network with 184 inputs and 47 outputs.

3.71.17.1. Executing ABC.

3.71.18. Extracting gate netlist of module `\CAMELLIA_IF' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$61869$auto$opt_dff.cc:219:make_patterns_logic$5233, asynchronously reset by \reset
Extracted 403 gates and 553 wires to a netlist network with 150 inputs and 387 outputs.

3.71.18.1. Executing ABC.

3.71.19. Extracting gate netlist of module `\CAMELLIA_IF' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$62789$auto$opt_dff.cc:219:make_patterns_logic$5187, asynchronously reset by \reset
Extracted 217 gates and 367 wires to a netlist network with 150 inputs and 198 outputs.

3.71.19.1. Executing ABC.

3.71.20. Extracting gate netlist of module `\CAMELLIA_IF' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$64354$auto$opt_dff.cc:219:make_patterns_logic$5154, asynchronously reset by \reset
Extracted 2968 gates and 4282 wires to a netlist network with 1314 inputs and 2468 outputs.

3.71.20.1. Executing ABC.

3.71.21. Extracting gate netlist of module `\CAMELLIA_IF' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$89317$auto$opt_dff.cc:219:make_patterns_logic$5371
Extracted 219 gates and 498 wires to a netlist network with 279 inputs and 69 outputs.

3.71.21.1. Executing ABC.

yosys> abc -dff

3.72. Executing ABC pass (technology mapping using ABC).

3.72.1. Summary of detected clock domains:
  14 cells in clk=\clk, en=$abc$89533$abc$87218$auto$opt_dff.cc:194:make_patterns_logic$5080, arst=\reset, srst={ }
  2 cells in clk=\clk, en=$abc$89548$abc$68679$auto$opt_dff.cc:194:make_patterns_logic$5089, arst=\reset, srst={ }
  4319 cells in clk=\clk, en=$abc$89553$abc$65517$auto$opt_dff.cc:219:make_patterns_logic$5139, arst=\reset, srst={ }
  2140 cells in clk=\clk, en=$abc$90669$abc$56789$auto$opt_dff.cc:219:make_patterns_logic$5340, arst=\reset, srst={ }
  525 cells in clk=\clk, en=$abc$92864$abc$59378$auto$opt_dff.cc:219:make_patterns_logic$5316, arst=\reset, srst={ }
  4519 cells in clk=\clk, en=$abc$93390$abc$59902$auto$opt_dff.cc:219:make_patterns_logic$5297, arst=\reset, srst={ }
  188 cells in clk=\clk, en=$abc$95620$abc$87206$auto$opt_dff.cc:219:make_patterns_logic$5397, arst=\reset, srst={ }
  401 cells in clk=\clk, en=$abc$96843$abc$88683$auto$opt_dff.cc:219:make_patterns_logic$5378, arst={ }, srst={ }
  392 cells in clk=\clk, en=$abc$94899$abc$61474$auto$opt_dff.cc:219:make_patterns_logic$5252, arst=\reset, srst={ }
  2 cells in clk=\clk, en=$abc$95761$abc$87218$auto$opt_dff.cc:194:make_patterns_logic$5086, arst=\reset, srst={ }
  133 cells in clk=\clk, en=\en_data, arst=\reset, srst={ }
  4 cells in clk=\clk, en=$abc$95761$abc$68272$auto$opt_dff.cc:194:make_patterns_logic$5083, arst=\reset, srst={ }
  459 cells in clk=\clk, en=$abc$118603$abc$68280$auto$opt_dff.cc:219:make_patterns_logic$5097, arst=\reset, srst={ }
  2588 cells in clk=\clk, en=$abc$118939$abc$61869$auto$opt_dff.cc:219:make_patterns_logic$5233, arst=\reset, srst={ }
  3964 cells in clk=\clk, en=$abc$119599$abc$62789$auto$opt_dff.cc:219:make_patterns_logic$5187, arst=\reset, srst={ }
  9920 cells in clk=\clk, en={ }, arst=\reset, srst={ }
  748 cells in clk=\clk, en=!\reset, arst={ }, srst={ }
  922 cells in clk=\clk, en=\en_key, arst=\reset, srst={ }
  894 cells in clk=\clk, en=$abc$120073$abc$64354$auto$opt_dff.cc:219:make_patterns_logic$5154, arst=\reset, srst={ }
  221 cells in clk=\clk, en=$abc$123648$abc$89317$auto$opt_dff.cc:219:make_patterns_logic$5371, arst={ }, srst={ }

3.72.2. Extracting gate netlist of module `\CAMELLIA_IF' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$89533$abc$87218$auto$opt_dff.cc:194:make_patterns_logic$5080, asynchronously reset by \reset
Extracted 14 gates and 26 wires to a netlist network with 12 inputs and 4 outputs.

3.72.2.1. Executing ABC.

3.72.3. Extracting gate netlist of module `\CAMELLIA_IF' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$89548$abc$68679$auto$opt_dff.cc:194:make_patterns_logic$5089, asynchronously reset by \reset
Extracted 2 gates and 3 wires to a netlist network with 1 inputs and 1 outputs.

3.72.3.1. Executing ABC.

3.72.4. Extracting gate netlist of module `\CAMELLIA_IF' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$89553$abc$65517$auto$opt_dff.cc:219:make_patterns_logic$5139, asynchronously reset by \reset
Extracted 4319 gates and 5230 wires to a netlist network with 911 inputs and 526 outputs.

3.72.4.1. Executing ABC.

3.72.5. Extracting gate netlist of module `\CAMELLIA_IF' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$90669$abc$56789$auto$opt_dff.cc:219:make_patterns_logic$5340, asynchronously reset by \reset
Extracted 2140 gates and 3948 wires to a netlist network with 1808 inputs and 2110 outputs.

3.72.5.1. Executing ABC.

3.72.6. Extracting gate netlist of module `\CAMELLIA_IF' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$92864$abc$59378$auto$opt_dff.cc:219:make_patterns_logic$5316, asynchronously reset by \reset
Extracted 525 gates and 795 wires to a netlist network with 270 inputs and 262 outputs.

3.72.6.1. Executing ABC.

3.72.7. Extracting gate netlist of module `\CAMELLIA_IF' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$93390$abc$59902$auto$opt_dff.cc:219:make_patterns_logic$5297, asynchronously reset by \reset
Extracted 4519 gates and 5997 wires to a netlist network with 1478 inputs and 1067 outputs.

3.72.7.1. Executing ABC.

3.72.8. Extracting gate netlist of module `\CAMELLIA_IF' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$95620$abc$87206$auto$opt_dff.cc:219:make_patterns_logic$5397, asynchronously reset by \reset
Extracted 188 gates and 413 wires to a netlist network with 225 inputs and 185 outputs.

3.72.8.1. Executing ABC.

3.72.9. Extracting gate netlist of module `\CAMELLIA_IF' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$96843$abc$88683$auto$opt_dff.cc:219:make_patterns_logic$5378
Extracted 401 gates and 616 wires to a netlist network with 215 inputs and 114 outputs.

3.72.9.1. Executing ABC.

3.72.10. Extracting gate netlist of module `\CAMELLIA_IF' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$94899$abc$61474$auto$opt_dff.cc:219:make_patterns_logic$5252, asynchronously reset by \reset
Extracted 392 gates and 532 wires to a netlist network with 140 inputs and 133 outputs.

3.72.10.1. Executing ABC.

3.72.11. Extracting gate netlist of module `\CAMELLIA_IF' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$95761$abc$87218$auto$opt_dff.cc:194:make_patterns_logic$5086, asynchronously reset by \reset
Extracted 2 gates and 3 wires to a netlist network with 1 inputs and 1 outputs.

3.72.11.1. Executing ABC.

3.72.12. Extracting gate netlist of module `\CAMELLIA_IF' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by \en_data, asynchronously reset by \reset
Extracted 133 gates and 155 wires to a netlist network with 22 inputs and 129 outputs.

3.72.12.1. Executing ABC.

3.72.13. Extracting gate netlist of module `\CAMELLIA_IF' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$95761$abc$68272$auto$opt_dff.cc:194:make_patterns_logic$5083, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 3 outputs.

3.72.13.1. Executing ABC.

3.72.14. Extracting gate netlist of module `\CAMELLIA_IF' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$118603$abc$68280$auto$opt_dff.cc:219:make_patterns_logic$5097, asynchronously reset by \reset
Extracted 459 gates and 784 wires to a netlist network with 325 inputs and 131 outputs.

3.72.14.1. Executing ABC.

3.72.15. Extracting gate netlist of module `\CAMELLIA_IF' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$118939$abc$61869$auto$opt_dff.cc:219:make_patterns_logic$5233, asynchronously reset by \reset
Extracted 2588 gates and 3389 wires to a netlist network with 801 inputs and 774 outputs.

3.72.15.1. Executing ABC.

3.72.16. Extracting gate netlist of module `\CAMELLIA_IF' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$119599$abc$62789$auto$opt_dff.cc:219:make_patterns_logic$5187, asynchronously reset by \reset
Extracted 3964 gates and 4969 wires to a netlist network with 1005 inputs and 1099 outputs.

3.72.16.1. Executing ABC.

3.72.17. Extracting gate netlist of module `\CAMELLIA_IF' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, asynchronously reset by \reset
Extracted 9920 gates and 12950 wires to a netlist network with 3030 inputs and 1757 outputs.

3.72.17.1. Executing ABC.

3.72.18. Extracting gate netlist of module `\CAMELLIA_IF' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by !\reset
Extracted 748 gates and 1472 wires to a netlist network with 724 inputs and 402 outputs.

3.72.18.1. Executing ABC.

3.72.19. Extracting gate netlist of module `\CAMELLIA_IF' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by \en_key, asynchronously reset by \reset
Extracted 922 gates and 1175 wires to a netlist network with 253 inputs and 616 outputs.

3.72.19.1. Executing ABC.

3.72.20. Extracting gate netlist of module `\CAMELLIA_IF' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$120073$abc$64354$auto$opt_dff.cc:219:make_patterns_logic$5154, asynchronously reset by \reset
Extracted 894 gates and 1435 wires to a netlist network with 541 inputs and 522 outputs.

3.72.20.1. Executing ABC.

3.72.21. Extracting gate netlist of module `\CAMELLIA_IF' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$123648$abc$89317$auto$opt_dff.cc:219:make_patterns_logic$5371
Extracted 221 gates and 500 wires to a netlist network with 279 inputs and 70 outputs.

3.72.21.1. Executing ABC.

yosys> abc -dff

3.73. Executing ABC pass (technology mapping using ABC).

3.73.1. Summary of detected clock domains:
  14 cells in clk=\clk, en=$abc$123871$abc$89533$abc$87218$auto$opt_dff.cc:194:make_patterns_logic$5080, arst=\reset, srst={ }
  2 cells in clk=\clk, en=$abc$155787$abc$89548$abc$68679$auto$opt_dff.cc:194:make_patterns_logic$5089, arst=\reset, srst={ }
  4996 cells in clk=\clk, en=$abc$123890$abc$89553$abc$65517$auto$opt_dff.cc:219:make_patterns_logic$5139, arst=\reset, srst={ }
  1996 cells in clk=\clk, en=$abc$129258$abc$90669$abc$56789$auto$opt_dff.cc:219:make_patterns_logic$5340, arst=\reset, srst={ }
  521 cells in clk=\clk, en=$abc$131403$abc$92864$abc$59378$auto$opt_dff.cc:219:make_patterns_logic$5316, arst=\reset, srst={ }
  311 cells in clk=\clk, en=$abc$136868$abc$95620$abc$87206$auto$opt_dff.cc:219:make_patterns_logic$5397, arst=\reset, srst={ }
  509 cells in clk=\clk, en=$abc$137058$abc$96843$abc$88683$auto$opt_dff.cc:219:make_patterns_logic$5378, arst={ }, srst={ }
  138 cells in clk=\clk, en=$abc$137461$abc$94899$abc$61474$auto$opt_dff.cc:219:make_patterns_logic$5252, arst=\reset, srst={ }
  3 cells in clk=\clk, en=$abc$155787$abc$95761$abc$87218$auto$opt_dff.cc:194:make_patterns_logic$5086, arst=\reset, srst={ }
  130 cells in clk=\clk, en=\en_data, arst=\reset, srst={ }
  4 cells in clk=\clk, en=$abc$155787$abc$95761$abc$68272$auto$opt_dff.cc:194:make_patterns_logic$5083, arst=\reset, srst={ }
  2512 cells in clk=\clk, en=$abc$138733$abc$118939$abc$61869$auto$opt_dff.cc:219:make_patterns_logic$5233, arst=\reset, srst={ }
  3051 cells in clk=\clk, en=$abc$141703$abc$119599$abc$62789$auto$opt_dff.cc:219:make_patterns_logic$5187, arst=\reset, srst={ }
  10854 cells in clk=\clk, en={ }, arst=\reset, srst={ }
  668 cells in clk=\clk, en=!\reset, arst={ }, srst={ }
  899 cells in clk=\clk, en=\en_key, arst=\reset, srst={ }
  4171 cells in clk=\clk, en=$abc$131928$abc$93390$abc$59902$auto$opt_dff.cc:219:make_patterns_logic$5297, arst=\reset, srst={ }
  588 cells in clk=\clk, en=$abc$138254$abc$118603$abc$68280$auto$opt_dff.cc:219:make_patterns_logic$5097, arst=\reset, srst={ }
  2422 cells in clk=\clk, en=$abc$157771$abc$120073$abc$64354$auto$opt_dff.cc:219:make_patterns_logic$5154, arst=\reset, srst={ }
  219 cells in clk=\clk, en=$abc$158820$abc$123648$abc$89317$auto$opt_dff.cc:219:make_patterns_logic$5371, arst={ }, srst={ }

3.73.2. Extracting gate netlist of module `\CAMELLIA_IF' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$123871$abc$89533$abc$87218$auto$opt_dff.cc:194:make_patterns_logic$5080, asynchronously reset by \reset
Extracted 14 gates and 26 wires to a netlist network with 12 inputs and 4 outputs.

3.73.2.1. Executing ABC.

3.73.3. Extracting gate netlist of module `\CAMELLIA_IF' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$155787$abc$89548$abc$68679$auto$opt_dff.cc:194:make_patterns_logic$5089, asynchronously reset by \reset
Extracted 2 gates and 3 wires to a netlist network with 1 inputs and 1 outputs.

3.73.3.1. Executing ABC.

3.73.4. Extracting gate netlist of module `\CAMELLIA_IF' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$123890$abc$89553$abc$65517$auto$opt_dff.cc:219:make_patterns_logic$5139, asynchronously reset by \reset
Extracted 4996 gates and 6165 wires to a netlist network with 1169 inputs and 903 outputs.

3.73.4.1. Executing ABC.

3.73.5. Extracting gate netlist of module `\CAMELLIA_IF' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$129258$abc$90669$abc$56789$auto$opt_dff.cc:219:make_patterns_logic$5340, asynchronously reset by \reset
Extracted 1996 gates and 3736 wires to a netlist network with 1740 inputs and 1994 outputs.

3.73.5.1. Executing ABC.

3.73.6. Extracting gate netlist of module `\CAMELLIA_IF' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$131403$abc$92864$abc$59378$auto$opt_dff.cc:219:make_patterns_logic$5316, asynchronously reset by \reset
Extracted 521 gates and 788 wires to a netlist network with 267 inputs and 260 outputs.

3.73.6.1. Executing ABC.

3.73.7. Extracting gate netlist of module `\CAMELLIA_IF' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$136868$abc$95620$abc$87206$auto$opt_dff.cc:219:make_patterns_logic$5397, asynchronously reset by \reset
Extracted 311 gates and 762 wires to a netlist network with 451 inputs and 306 outputs.

3.73.7.1. Executing ABC.

3.73.8. Extracting gate netlist of module `\CAMELLIA_IF' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$137058$abc$96843$abc$88683$auto$opt_dff.cc:219:make_patterns_logic$5378
Extracted 509 gates and 865 wires to a netlist network with 356 inputs and 168 outputs.

3.73.8.1. Executing ABC.

3.73.9. Extracting gate netlist of module `\CAMELLIA_IF' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$137461$abc$94899$abc$61474$auto$opt_dff.cc:219:make_patterns_logic$5252, asynchronously reset by \reset
Extracted 138 gates and 276 wires to a netlist network with 138 inputs and 132 outputs.

3.73.9.1. Executing ABC.

3.73.10. Extracting gate netlist of module `\CAMELLIA_IF' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$155787$abc$95761$abc$87218$auto$opt_dff.cc:194:make_patterns_logic$5086, asynchronously reset by \reset
Extracted 3 gates and 5 wires to a netlist network with 2 inputs and 2 outputs.

3.73.10.1. Executing ABC.

3.73.11. Extracting gate netlist of module `\CAMELLIA_IF' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by \en_data, asynchronously reset by \reset
Extracted 130 gates and 149 wires to a netlist network with 19 inputs and 129 outputs.

3.73.11.1. Executing ABC.

3.73.12. Extracting gate netlist of module `\CAMELLIA_IF' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$155787$abc$95761$abc$68272$auto$opt_dff.cc:194:make_patterns_logic$5083, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 3 outputs.

3.73.12.1. Executing ABC.

3.73.13. Extracting gate netlist of module `\CAMELLIA_IF' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$138733$abc$118939$abc$61869$auto$opt_dff.cc:219:make_patterns_logic$5233, asynchronously reset by \reset
Extracted 2512 gates and 3325 wires to a netlist network with 813 inputs and 433 outputs.

3.73.13.1. Executing ABC.

3.73.14. Extracting gate netlist of module `\CAMELLIA_IF' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$141703$abc$119599$abc$62789$auto$opt_dff.cc:219:make_patterns_logic$5187, asynchronously reset by \reset
Extracted 3051 gates and 4305 wires to a netlist network with 1254 inputs and 281 outputs.

3.73.14.1. Executing ABC.

3.73.15. Extracting gate netlist of module `\CAMELLIA_IF' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, asynchronously reset by \reset
Extracted 10854 gates and 14407 wires to a netlist network with 3553 inputs and 2548 outputs.

3.73.15.1. Executing ABC.

3.73.16. Extracting gate netlist of module `\CAMELLIA_IF' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by !\reset
Extracted 668 gates and 1312 wires to a netlist network with 644 inputs and 402 outputs.

3.73.16.1. Executing ABC.

3.73.17. Extracting gate netlist of module `\CAMELLIA_IF' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by \en_key, asynchronously reset by \reset
Extracted 899 gates and 1130 wires to a netlist network with 231 inputs and 593 outputs.

3.73.17.1. Executing ABC.

3.73.18. Extracting gate netlist of module `\CAMELLIA_IF' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$131928$abc$93390$abc$59902$auto$opt_dff.cc:219:make_patterns_logic$5297, asynchronously reset by \reset
Extracted 4171 gates and 5833 wires to a netlist network with 1662 inputs and 665 outputs.

3.73.18.1. Executing ABC.

3.73.19. Extracting gate netlist of module `\CAMELLIA_IF' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$138254$abc$118603$abc$68280$auto$opt_dff.cc:219:make_patterns_logic$5097, asynchronously reset by \reset
Extracted 588 gates and 1034 wires to a netlist network with 446 inputs and 188 outputs.

3.73.19.1. Executing ABC.

3.73.20. Extracting gate netlist of module `\CAMELLIA_IF' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$157771$abc$120073$abc$64354$auto$opt_dff.cc:219:make_patterns_logic$5154, asynchronously reset by \reset
Extracted 2422 gates and 3563 wires to a netlist network with 1141 inputs and 2050 outputs.

3.73.20.1. Executing ABC.

3.73.21. Extracting gate netlist of module `\CAMELLIA_IF' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$158820$abc$123648$abc$89317$auto$opt_dff.cc:219:make_patterns_logic$5371
Extracted 219 gates and 498 wires to a netlist network with 279 inputs and 69 outputs.

3.73.21.1. Executing ABC.

yosys> opt_ffinv

3.74. Executing OPT_FFINV pass (push inverters through FFs).
Discovering LUTs.
Pushed 0 inverters.

yosys> opt -sat -nosdff

3.75. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.75.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module CAMELLIA_IF.
<suppressed ~435 debug messages>

yosys> opt_merge -nomux

3.75.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\CAMELLIA_IF'.
<suppressed ~594 debug messages>
Removed a total of 198 cells.

yosys> opt_muxtree

3.75.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \CAMELLIA_IF..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.75.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \CAMELLIA_IF.
Performed a total of 0 changes.

yosys> opt_merge

3.75.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\CAMELLIA_IF'.
Removed a total of 0 cells.

yosys> opt_dff -sat -nosdff

3.75.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166232 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$145792$abc$94899$abc$68699$core.CTRL.data_from[125], Q = $abc$166229$lo002).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166231 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$138254$abc$94899$abc$68699$core.CTRL.data_from[126], Q = $abc$166229$lo001).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166233 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$138254$abc$94899$abc$68699$core.CTRL.data_from[124], Q = $abc$166229$lo003).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166234 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$145792$abc$94899$abc$68699$core.CTRL.data_from[123], Q = $abc$166229$lo004).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166235 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$138254$abc$94899$abc$68699$core.CTRL.data_from[122], Q = $abc$166229$lo005).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166236 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$145792$abc$94899$abc$68699$core.CTRL.data_from[121], Q = $abc$166229$lo006).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166237 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$138254$abc$94899$abc$68699$core.CTRL.data_from[120], Q = $abc$166229$lo007).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166238 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$145792$abc$94899$abc$68699$core.CTRL.data_from[119], Q = $abc$166229$lo008).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166239 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$138254$abc$94899$abc$68699$core.CTRL.data_from[118], Q = $abc$166229$lo009).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166240 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$145792$abc$94899$abc$68699$core.CTRL.data_from[117], Q = $abc$166229$lo010).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166241 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$138254$abc$94899$abc$68699$core.CTRL.data_from[116], Q = $abc$166229$lo011).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166242 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$145792$abc$94899$abc$68699$core.CTRL.data_from[115], Q = $abc$166229$lo012).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166243 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$138254$abc$94899$abc$68699$core.CTRL.data_from[114], Q = $abc$166229$lo013).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166244 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$145792$abc$94899$abc$68699$core.CTRL.data_from[113], Q = $abc$166229$lo014).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166245 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$145792$abc$94899$abc$68699$core.CTRL.data_from[112], Q = $abc$166229$lo015).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166246 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$145792$abc$97518$abc$68699$core.CTRL.data_from[111], Q = $abc$166229$lo016).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166247 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$145792$abc$94899$abc$68699$core.CTRL.data_from[110], Q = $abc$166229$lo017).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166248 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$145792$abc$94899$abc$68699$core.CTRL.data_from[109], Q = $abc$166229$lo018).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166249 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$138254$abc$94899$abc$68699$core.CTRL.data_from[108], Q = $abc$166229$lo019).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166250 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$145792$abc$94899$abc$68699$core.CTRL.data_from[107], Q = $abc$166229$lo020).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166251 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$138254$abc$94899$abc$68699$core.CTRL.data_from[106], Q = $abc$166229$lo021).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166252 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$145792$abc$94899$abc$68699$core.CTRL.data_from[105], Q = $abc$166229$lo022).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166253 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$138254$abc$94899$abc$68699$core.CTRL.data_from[104], Q = $abc$166229$lo023).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166254 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$145792$abc$94899$abc$68699$core.CTRL.data_from[103], Q = $abc$166229$lo024).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166255 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$138254$abc$94899$abc$68699$core.CTRL.data_from[102], Q = $abc$166229$lo025).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166256 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$145792$abc$94899$abc$68699$core.CTRL.data_from[101], Q = $abc$166229$lo026).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166257 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$138254$abc$94899$abc$68699$core.CTRL.data_from[100], Q = $abc$166229$lo027).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166258 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$138254$abc$94899$abc$68699$core.CTRL.data_from[99], Q = $abc$166229$lo028).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166259 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$138254$abc$94899$abc$68699$core.CTRL.data_from[98], Q = $abc$166229$lo029).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166260 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$145792$abc$94899$abc$68699$core.CTRL.data_from[97], Q = $abc$166229$lo030).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166261 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$145792$abc$94899$abc$68699$core.CTRL.data_from[96], Q = $abc$166229$lo031).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166262 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$145792$abc$94899$abc$68699$core.CTRL.data_from[95], Q = $abc$166229$lo032).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166263 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$145792$abc$94899$abc$68699$core.CTRL.data_from[94], Q = $abc$166229$lo033).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166264 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$138254$abc$94899$abc$68699$core.CTRL.data_from[93], Q = $abc$166229$lo034).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166265 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$138254$abc$118603$abc$68699$core.CTRL.data_from[92], Q = $abc$166229$lo035).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166266 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$145792$abc$94899$abc$68699$core.CTRL.data_from[91], Q = $abc$166229$lo036).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166267 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$138254$abc$94899$abc$68699$core.CTRL.data_from[90], Q = $abc$166229$lo037).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166268 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$138254$abc$94899$abc$68699$core.CTRL.data_from[89], Q = $abc$166229$lo038).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166269 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$138254$abc$94899$abc$68699$core.CTRL.data_from[88], Q = $abc$166229$lo039).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166270 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$138254$abc$94899$abc$68699$core.CTRL.data_from[87], Q = $abc$166229$lo040).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166271 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$138254$abc$94899$abc$68699$core.CTRL.data_from[86], Q = $abc$166229$lo041).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166272 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$138254$abc$94899$abc$68699$core.CTRL.data_from[85], Q = $abc$166229$lo042).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166273 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$138254$abc$118603$abc$68699$core.CTRL.data_from[84], Q = $abc$166229$lo043).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166274 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$138254$abc$118603$abc$68699$core.CTRL.data_from[83], Q = $abc$166229$lo044).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166275 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$138254$abc$118603$abc$68699$core.CTRL.data_from[82], Q = $abc$166229$lo045).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166276 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$138254$abc$118603$abc$68699$core.CTRL.data_from[81], Q = $abc$166229$lo046).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166277 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$138254$abc$118603$abc$68699$core.CTRL.data_from[80], Q = $abc$166229$lo047).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166278 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$138254$abc$118603$abc$68699$core.CTRL.data_from[79], Q = $abc$166229$lo048).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166279 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$138254$abc$118603$abc$68699$core.CTRL.data_from[78], Q = $abc$166229$lo049).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166280 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$138254$abc$118603$abc$68699$core.CTRL.data_from[77], Q = $abc$166229$lo050).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166281 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$138254$abc$118603$abc$68699$core.CTRL.data_from[76], Q = $abc$166229$lo051).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166282 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$138254$abc$118603$abc$68699$core.CTRL.data_from[75], Q = $abc$166229$lo052).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166283 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$138254$abc$118603$abc$68699$core.CTRL.data_from[74], Q = $abc$166229$lo053).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166284 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$138254$abc$118603$abc$68699$core.CTRL.data_from[73], Q = $abc$166229$lo054).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166285 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$138254$abc$118603$abc$68699$core.CTRL.data_from[72], Q = $abc$166229$lo055).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166286 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$138254$abc$118603$abc$68699$core.CTRL.data_from[71], Q = $abc$166229$lo056).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166287 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$138254$abc$118603$abc$68699$core.CTRL.data_from[70], Q = $abc$166229$lo057).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166288 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$138254$abc$118603$abc$68699$core.CTRL.data_from[69], Q = $abc$166229$lo058).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166289 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$138254$abc$118603$abc$68699$core.CTRL.data_from[68], Q = $abc$166229$lo059).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166290 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$138254$abc$118603$abc$68699$core.CTRL.data_from[67], Q = $abc$166229$lo060).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166291 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$138254$abc$118603$abc$68699$core.CTRL.data_from[66], Q = $abc$166229$lo061).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166292 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$138254$abc$118603$abc$68699$core.CTRL.data_from[65], Q = $abc$166229$lo062).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166293 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$138254$abc$118603$abc$68699$core.CTRL.data_from[64], Q = $abc$166229$lo063).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166294 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$138254$abc$118603$abc$68699$core.CTRL.data_from[63], Q = $abc$166229$lo064).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166295 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$138254$abc$94899$abc$68699$core.CTRL.data_from[62], Q = $abc$166229$lo065).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166296 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$131928$abc$94899$abc$68699$core.CTRL.data_from[61], Q = $abc$166229$lo066).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166297 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$138254$abc$94899$abc$68699$core.CTRL.data_from[60], Q = $abc$166229$lo067).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166298 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$138254$abc$118603$abc$68699$core.CTRL.data_from[59], Q = $abc$166229$lo068).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166299 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$131928$abc$94899$abc$68699$core.CTRL.data_from[58], Q = $abc$166229$lo069).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166300 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$145792$abc$94899$abc$68699$core.CTRL.data_from[57], Q = $abc$166229$lo070).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166301 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$131928$abc$94899$abc$68699$core.CTRL.data_from[56], Q = $abc$166229$lo071).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166302 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$131928$abc$94899$abc$68699$core.CTRL.data_from[55], Q = $abc$166229$lo072).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166303 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$138254$abc$94899$abc$68699$core.CTRL.data_from[54], Q = $abc$166229$lo073).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166304 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$138254$abc$94899$abc$68699$core.CTRL.data_from[53], Q = $abc$166229$lo074).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166305 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$131928$abc$94899$abc$68699$core.CTRL.data_from[52], Q = $abc$166229$lo075).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166306 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$138254$abc$118603$abc$68699$core.CTRL.data_from[51], Q = $abc$166229$lo076).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166307 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$131928$abc$94899$abc$68699$core.CTRL.data_from[50], Q = $abc$166229$lo077).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166308 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$131928$abc$94899$abc$68699$core.CTRL.data_from[49], Q = $abc$166229$lo078).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166309 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$138254$abc$94899$abc$68699$core.CTRL.data_from[48], Q = $abc$166229$lo079).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166310 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$138254$abc$94899$abc$68699$core.CTRL.data_from[47], Q = $abc$166229$lo080).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166311 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$138254$abc$94899$abc$68699$core.CTRL.data_from[46], Q = $abc$166229$lo081).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166312 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$138254$abc$94899$abc$68699$core.CTRL.data_from[45], Q = $abc$166229$lo082).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166313 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$138254$abc$94899$abc$68699$core.CTRL.data_from[44], Q = $abc$166229$lo083).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166314 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$145792$abc$94899$abc$68699$core.CTRL.data_from[43], Q = $abc$166229$lo084).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166315 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$145792$abc$94899$abc$68699$core.CTRL.data_from[42], Q = $abc$166229$lo085).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166316 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$145792$abc$94899$abc$68699$core.CTRL.data_from[41], Q = $abc$166229$lo086).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166317 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$145792$abc$94899$abc$68699$core.CTRL.data_from[40], Q = $abc$166229$lo087).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166318 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$145792$abc$94899$abc$68699$core.CTRL.data_from[39], Q = $abc$166229$lo088).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166319 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$145792$abc$94899$abc$68699$core.CTRL.data_from[38], Q = $abc$166229$lo089).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166320 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$145792$abc$94899$abc$68699$core.CTRL.data_from[37], Q = $abc$166229$lo090).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166321 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$145792$abc$94899$abc$68699$core.CTRL.data_from[36], Q = $abc$166229$lo091).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166322 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$145792$abc$94899$abc$68699$core.CTRL.data_from[35], Q = $abc$166229$lo092).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166323 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$145792$abc$94899$abc$68699$core.CTRL.data_from[34], Q = $abc$166229$lo093).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166324 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$145792$abc$94899$abc$68699$core.CTRL.data_from[33], Q = $abc$166229$lo094).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166325 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$145792$abc$94899$abc$68699$core.CTRL.data_from[32], Q = $abc$166229$lo095).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166326 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$145792$abc$94899$abc$68699$core.CTRL.data_from[31], Q = $abc$166229$lo096).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166327 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$145792$abc$94899$abc$68699$core.CTRL.data_from[30], Q = $abc$166229$lo097).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166328 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$145792$abc$94899$abc$68699$core.CTRL.data_from[29], Q = $abc$166229$lo098).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166329 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$145792$abc$94899$abc$68699$core.CTRL.data_from[28], Q = $abc$166229$lo099).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166330 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$145792$abc$94899$abc$68699$core.CTRL.data_from[27], Q = $abc$166229$lo100).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166331 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$145792$abc$94899$abc$68699$core.CTRL.data_from[26], Q = $abc$166229$lo101).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166332 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$145792$abc$94899$abc$68699$core.CTRL.data_from[25], Q = $abc$166229$lo102).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166333 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$145792$abc$94899$abc$68699$core.CTRL.data_from[24], Q = $abc$166229$lo103).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166334 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$145792$abc$94899$abc$68699$core.CTRL.data_from[23], Q = $abc$166229$lo104).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166335 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$145792$abc$94899$abc$68699$core.CTRL.data_from[22], Q = $abc$166229$lo105).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166336 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$145792$abc$94899$abc$68699$core.CTRL.data_from[21], Q = $abc$166229$lo106).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166337 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$145792$abc$94899$abc$68699$core.CTRL.data_from[20], Q = $abc$166229$lo107).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166338 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$145792$abc$94899$abc$68699$core.CTRL.data_from[19], Q = $abc$166229$lo108).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166339 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$145792$abc$94899$abc$68699$core.CTRL.data_from[18], Q = $abc$166229$lo109).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166340 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$145792$abc$94899$abc$68699$core.CTRL.data_from[17], Q = $abc$166229$lo110).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166341 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$145792$abc$94899$abc$68699$core.CTRL.data_from[16], Q = $abc$166229$lo111).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166342 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$145792$abc$94899$abc$68699$core.CTRL.data_from[15], Q = $abc$166229$lo112).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166343 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$145792$abc$94899$abc$68699$core.CTRL.data_from[14], Q = $abc$166229$lo113).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166344 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$145792$abc$94899$abc$68699$core.CTRL.data_from[13], Q = $abc$166229$lo114).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166345 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$145792$abc$94899$abc$68699$core.CTRL.data_from[12], Q = $abc$166229$lo115).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166346 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$145792$abc$94899$abc$68699$core.CTRL.data_from[11], Q = $abc$166229$lo116).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166347 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$138254$abc$94899$abc$68699$core.CTRL.data_from[10], Q = $abc$166229$lo117).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166348 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$145792$abc$94899$abc$68699$core.CTRL.data_from[9], Q = $abc$166229$lo118).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166349 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$138254$abc$94899$abc$68699$core.CTRL.data_from[8], Q = $abc$166229$lo119).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166350 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$145792$abc$94899$abc$68699$core.CTRL.data_from[7], Q = $abc$166229$lo120).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166351 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$138254$abc$94899$abc$68699$core.CTRL.data_from[6], Q = $abc$166229$lo121).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166352 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$145792$abc$94899$abc$68699$core.CTRL.data_from[5], Q = $abc$166229$lo122).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166353 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$138254$abc$94899$abc$68699$core.CTRL.data_from[4], Q = $abc$166229$lo123).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166354 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$145792$abc$94899$abc$68699$core.CTRL.data_from[3], Q = $abc$166229$lo124).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166355 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$138254$abc$94899$abc$68699$core.CTRL.data_from[2], Q = $abc$166229$lo125).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166356 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$145792$abc$94899$abc$68699$core.CTRL.data_from[1], Q = $abc$166229$lo126).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166357 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$138254$abc$94899$abc$68699$core.CTRL.data_from[0], Q = $abc$166229$lo127).
Adding EN signal on $abc$166229$auto$blifparse.cc:362:parse_blif$166230 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = $abc$166229$abc$145792$abc$94899$abc$68699$core.CTRL.data_from[127], Q = $abc$166229$lo000).

yosys> opt_clean

3.75.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \CAMELLIA_IF..
Removed 130 unused cells and 157513 unused wires.
<suppressed ~292 debug messages>

yosys> opt_expr

3.75.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module CAMELLIA_IF.

3.75.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.75.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \CAMELLIA_IF..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.75.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \CAMELLIA_IF.
Performed a total of 0 changes.

yosys> opt_merge

3.75.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\CAMELLIA_IF'.
<suppressed ~762 debug messages>
Removed a total of 254 cells.

yosys> opt_dff -sat -nosdff

3.75.13. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167721 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [124], Q = $abc$137461$lo127).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167720 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [123], Q = $abc$137461$lo126).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167719 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [122], Q = $abc$137461$lo125).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167718 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [121], Q = $abc$137461$lo124).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167717 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [120], Q = $abc$137461$lo123).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167716 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [119], Q = $abc$137461$lo122).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167715 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [118], Q = $abc$137461$lo121).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167714 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [126], Q = $abc$137461$lo120).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167713 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [117], Q = $abc$137461$lo119).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167712 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [116], Q = $abc$137461$lo118).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167711 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [115], Q = $abc$137461$lo117).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167710 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [114], Q = $abc$137461$lo116).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167709 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [113], Q = $abc$137461$lo115).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167708 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [112], Q = $abc$137461$lo114).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167707 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [111], Q = $abc$137461$lo113).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167706 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [1], Q = $abc$120073$abc$94899$lo126).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167705 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [110], Q = $abc$137461$lo112).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167704 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [109], Q = $abc$137461$lo111).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167703 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [0], Q = $abc$120073$abc$94899$lo127).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167702 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [108], Q = $abc$137461$lo110).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167701 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [107], Q = $abc$137461$lo109).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167700 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [106], Q = $abc$137461$lo108).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167699 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [105], Q = $abc$137461$lo107).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167698 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [104], Q = $abc$137461$lo106).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167697 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [103], Q = $abc$137461$lo105).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167696 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [102], Q = $abc$137461$lo104).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167695 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [101], Q = $abc$137461$lo103).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167694 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [100], Q = $abc$137461$lo102).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167693 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [99], Q = $abc$137461$lo101).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167692 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [98], Q = $abc$137461$lo100).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167691 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [97], Q = $abc$137461$lo099).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167690 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [96], Q = $abc$137461$lo098).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167689 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [95], Q = $abc$137461$lo097).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167688 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [94], Q = $abc$137461$lo096).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167687 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [93], Q = $abc$137461$lo095).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167686 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [92], Q = $abc$137461$lo094).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167685 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [91], Q = $abc$137461$lo093).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167684 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [90], Q = $abc$137461$lo092).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167683 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [89], Q = $abc$137461$lo091).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167682 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [88], Q = $abc$137461$lo090).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167681 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [87], Q = $abc$137461$lo089).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167680 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [86], Q = $abc$137461$lo088).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167679 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [85], Q = $abc$137461$lo087).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167678 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [84], Q = $abc$137461$lo086).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167677 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [83], Q = $abc$137461$lo085).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167676 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [82], Q = $abc$137461$lo084).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167675 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [81], Q = $abc$137461$lo083).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167674 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [80], Q = $abc$137461$lo082).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167673 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [79], Q = $abc$137461$lo081).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167672 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [78], Q = $abc$137461$lo080).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167671 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [77], Q = $abc$137461$lo079).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167670 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [76], Q = $abc$137461$lo078).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167669 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [75], Q = $abc$137461$lo077).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167668 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [74], Q = $abc$137461$lo076).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167667 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [73], Q = $abc$137461$lo075).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167666 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [72], Q = $abc$137461$lo074).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167665 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [125], Q = $abc$137461$lo073).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167664 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [71], Q = $abc$137461$lo072).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167663 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [70], Q = $abc$137461$lo071).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167662 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [69], Q = $abc$137461$lo070).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167661 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [68], Q = $abc$137461$lo069).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167660 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [67], Q = $abc$137461$lo068).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167659 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [66], Q = $abc$137461$lo067).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167658 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [65], Q = $abc$137461$lo066).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167657 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [64], Q = $abc$137461$lo065).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167656 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [63], Q = $abc$137461$lo064).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167655 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [62], Q = $abc$137461$lo063).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167654 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [61], Q = $abc$137461$lo062).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167653 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [60], Q = $abc$137461$lo061).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167652 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [59], Q = $abc$137461$lo060).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167651 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [58], Q = $abc$137461$lo059).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167650 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [57], Q = $abc$137461$lo058).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167649 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [56], Q = $abc$137461$lo057).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167648 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [55], Q = $abc$137461$lo056).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167647 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [54], Q = $abc$137461$lo055).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167646 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [53], Q = $abc$137461$lo054).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167645 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [52], Q = $abc$137461$lo053).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167644 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [51], Q = $abc$137461$lo052).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167643 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [50], Q = $abc$137461$lo051).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167642 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [49], Q = $abc$137461$lo050).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167641 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [48], Q = $abc$137461$lo049).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167640 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [47], Q = $abc$137461$lo048).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167639 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [46], Q = $abc$137461$lo047).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167638 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [45], Q = $abc$137461$lo046).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167637 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [44], Q = $abc$137461$lo045).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167636 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [43], Q = $abc$137461$lo044).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167635 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [42], Q = $abc$137461$lo043).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167634 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [41], Q = $abc$137461$lo042).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167633 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [40], Q = $abc$137461$lo041).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167632 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [39], Q = $abc$137461$lo040).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167631 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [38], Q = $abc$137461$lo039).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167630 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [37], Q = $abc$137461$lo038).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167629 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [36], Q = $abc$137461$lo037).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167628 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [35], Q = $abc$137461$lo036).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167627 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [34], Q = $abc$137461$lo035).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167626 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [33], Q = $abc$137461$lo034).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167625 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [32], Q = $abc$137461$lo033).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167624 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [31], Q = $abc$137461$lo032).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167623 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [30], Q = $abc$137461$lo031).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167622 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [29], Q = $abc$137461$lo030).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167621 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [28], Q = $abc$137461$lo029).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167620 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [27], Q = $abc$137461$lo028).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167619 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [26], Q = $abc$137461$lo027).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167618 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [25], Q = $abc$137461$lo026).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167617 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [24], Q = $abc$137461$lo025).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167616 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [127], Q = $abc$137461$lo024).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167615 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [23], Q = $abc$137461$lo023).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167614 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [22], Q = $abc$137461$lo022).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167613 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [21], Q = $abc$137461$lo021).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167612 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [20], Q = $abc$137461$lo020).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167611 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [19], Q = $abc$137461$lo019).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167610 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [18], Q = $abc$137461$lo018).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167609 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [17], Q = $abc$137461$lo017).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167608 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [16], Q = $abc$137461$lo016).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167607 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [15], Q = $abc$137461$lo015).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167606 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [14], Q = $abc$137461$lo014).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167605 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [13], Q = $abc$137461$lo013).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167604 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [12], Q = $abc$137461$lo012).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167603 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [11], Q = $abc$137461$lo011).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167602 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [10], Q = $abc$137461$lo010).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167601 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [9], Q = $abc$137461$lo009).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167600 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [8], Q = $abc$137461$lo008).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167599 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [7], Q = $abc$137461$lo007).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167598 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [6], Q = $abc$137461$lo006).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167597 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [5], Q = $abc$137461$lo005).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167596 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [4], Q = $abc$137461$lo004).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167595 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [3], Q = $abc$137461$lo003).
Adding EN signal on $abc$167593$auto$blifparse.cc:362:parse_blif$167594 ($_DFFE_PP0P_) from module CAMELLIA_IF (D = \core.CTRL.data_from [2], Q = $abc$120073$abc$94899$lo125).

yosys> opt_clean

3.75.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \CAMELLIA_IF..
Removed 128 unused cells and 510 unused wires.
<suppressed ~129 debug messages>

yosys> opt_expr

3.75.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module CAMELLIA_IF.

3.75.16. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.75.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \CAMELLIA_IF..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.75.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \CAMELLIA_IF.
Performed a total of 0 changes.

yosys> opt_merge

3.75.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\CAMELLIA_IF'.
<suppressed ~381 debug messages>
Removed a total of 127 cells.

yosys> opt_dff -sat -nosdff

3.75.20. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.75.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \CAMELLIA_IF..
Removed 0 unused cells and 127 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.75.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module CAMELLIA_IF.

3.75.23. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.75.24. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \CAMELLIA_IF..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.75.25. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \CAMELLIA_IF.
Performed a total of 0 changes.

yosys> opt_merge

3.75.26. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\CAMELLIA_IF'.
Removed a total of 0 cells.

yosys> opt_dff -sat -nosdff

3.75.27. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.75.28. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \CAMELLIA_IF..

yosys> opt_expr

3.75.29. Executing OPT_EXPR pass (perform const folding).
Optimizing module CAMELLIA_IF.

3.75.30. Finished OPT passes. (There is nothing left to do.)

yosys> bmuxmap

3.76. Executing BMUXMAP pass.

yosys> demuxmap

3.77. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> abc -script /home/users/temp_dir/yosys_oBVqpJ/abc_tmp_1.scr

3.78. Executing ABC pass (technology mapping using ABC).

3.78.1. Extracting gate netlist of module `\CAMELLIA_IF' to `<abc-temp-dir>/input.blif'..
Extracted 31605 gates and 33572 wires to a netlist network with 1967 inputs and 1480 outputs.

3.78.1.1. Executing ABC.
DE:   #PIs = 1967  #Luts =  8604  Max Lvl =  21  Avg Lvl =   6.17  [   0.76 sec. at Pass 0]
DE:   #PIs = 1967  #Luts =  7019  Max Lvl =  18  Avg Lvl =   5.62  [  39.00 sec. at Pass 1]
DE:   #PIs = 1967  #Luts =  6925  Max Lvl =  16  Avg Lvl =   5.60  [   8.32 sec. at Pass 2]
DE:   #PIs = 1967  #Luts =  6678  Max Lvl =  15  Avg Lvl =   5.63  [  16.26 sec. at Pass 3]
DE:   #PIs = 1967  #Luts =  6645  Max Lvl =  16  Avg Lvl =   5.50  [   9.25 sec. at Pass 4]
DE:   #PIs = 1967  #Luts =  6493  Max Lvl =  15  Avg Lvl =   5.58  [  17.43 sec. at Pass 5]
DE:   #PIs = 1967  #Luts =  6454  Max Lvl =  15  Avg Lvl =   5.47  [   9.13 sec. at Pass 6]
DE:   #PIs = 1967  #Luts =  6372  Max Lvl =  15  Avg Lvl =   5.66  [  16.72 sec. at Pass 7]
DE:   #PIs = 1967  #Luts =  6340  Max Lvl =  16  Avg Lvl =   5.63  [   8.92 sec. at Pass 8]
DE:   #PIs = 1967  #Luts =  6291  Max Lvl =  15  Avg Lvl =   5.57  [  18.66 sec. at Pass 9]
DE:   #PIs = 1967  #Luts =  6256  Max Lvl =  15  Avg Lvl =   5.56  [   2.39 sec. at Pass 10]

yosys> opt_expr

3.79. Executing OPT_EXPR pass (perform const folding).
Optimizing module CAMELLIA_IF.

yosys> opt_merge -nomux

3.80. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\CAMELLIA_IF'.
<suppressed ~12 debug messages>
Removed a total of 4 cells.

yosys> opt_muxtree

3.81. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \CAMELLIA_IF..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.82. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \CAMELLIA_IF.
Performed a total of 0 changes.

yosys> opt_merge

3.83. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\CAMELLIA_IF'.
Removed a total of 0 cells.

yosys> opt_share

3.84. Executing OPT_SHARE pass.

yosys> opt_dff -nodffe -nosdff

3.85. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.86. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \CAMELLIA_IF..
Removed 0 unused cells and 33521 unused wires.
<suppressed ~9 debug messages>

yosys> opt_expr

3.87. Executing OPT_EXPR pass (perform const folding).
Optimizing module CAMELLIA_IF.
MAX OPT ITERATION = 1

yosys> opt_ffinv

3.88. Executing OPT_FFINV pass (push inverters through FFs).
Discovering LUTs.
Pushed 2 inverters.

yosys> stat

3.89. Printing statistics.

=== CAMELLIA_IF ===

   Number of wires:               7602
   Number of wire bits:          10204
   Number of public wires:          54
   Number of public wire bits:    2656
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               8213
     $_DFFE_PN_                    137
     $_DFFE_PP0P_                 1545
     $_DFFE_PP1P_                    1
     $_DFFE_PP_                      7
     $_DFF_PP0_                    272
     $lut                         6251


yosys> shregmap -minlen 8 -maxlen 20

3.90. Executing SHREGMAP pass (map shift registers).
Converted 0 dff cells into 0 shift registers.

yosys> dfflegalize -cell $_DFF_?_ 0 -cell $_DFF_???_ 0 -cell $_DFFE_????_ 0 -cell $_DFFSR_???_ 0 -cell $_DFFSRE_????_ 0 -cell $_DLATCHSR_PPP_ 0

3.91. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

yosys> stat

3.92. Printing statistics.

=== CAMELLIA_IF ===

   Number of wires:               7602
   Number of wire bits:          10204
   Number of public wires:          54
   Number of public wire bits:    2656
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               8213
     $_DFFE_PP0N_                  137
     $_DFFE_PP0P_                 1552
     $_DFFE_PP1P_                    1
     $_DFF_PP0_                    272
     $lut                         6251


yosys> techmap -map +/techmap.v -map +/rapidsilicon/genesis/ffs_map.v

3.93. Executing TECHMAP pass (map to technology primitives).

3.93.1. Executing Verilog-2005 frontend: /home/users/khyber.runner/yosys_verific_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/khyber.runner/yosys_verific_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.93.2. Executing Verilog-2005 frontend: /home/users/khyber.runner/yosys_verific_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/ffs_map.v
Parsing Verilog input from `/home/users/khyber.runner/yosys_verific_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/ffs_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP0N_'.
Generating RTLIL representation for module `\$_DFFE_PN0P_'.
Generating RTLIL representation for module `\$_DFFE_PN0N_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP1N_'.
Generating RTLIL representation for module `\$_DFFE_PN1P_'.
Generating RTLIL representation for module `\$_DFFE_PN1N_'.
Generating RTLIL representation for module `\$_DFFSR_PPP_'.
Generating RTLIL representation for module `\$_DFFSR_PNP_'.
Generating RTLIL representation for module `\$_DFFSR_PNN_'.
Generating RTLIL representation for module `\$_DFFSR_PPN_'.
Generating RTLIL representation for module `\$_DFFSR_NPP_'.
Generating RTLIL representation for module `\$_DFFSR_NNP_'.
Generating RTLIL representation for module `\$_DFFSR_NNN_'.
Generating RTLIL representation for module `\$_DFFSR_NPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PNPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPNP_'.
Generating RTLIL representation for module `\$_DFFSRE_PNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PNPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PPNN_'.
Generating RTLIL representation for module `\$_DFFSRE_PNNN_'.
Generating RTLIL representation for module `\$_DLATCHSR_PPP_'.
Generating RTLIL representation for module `\$_DLATCHSR_NPP_'.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP0N_'.
Generating RTLIL representation for module `\$_DFFE_NN0P_'.
Generating RTLIL representation for module `\$_DFFE_NN0N_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_NP1N_'.
Generating RTLIL representation for module `\$_DFFE_NN1P_'.
Generating RTLIL representation for module `\$_DFFE_NN1N_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNPP_'.
Generating RTLIL representation for module `\$_DFFSRE_NPNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPN_'.
Generating RTLIL representation for module `\$_DFFSRE_NNPN_'.
Generating RTLIL representation for module `\$_DFFSRE_NPNN_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNN_'.
Generating RTLIL representation for module `\$__SHREG_DFF_P_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PN0_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NN0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFF_PN1_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_NN1_'.
Successfully finished Verilog frontend.

3.93.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $lut.
Using template \$_DFFE_PP0P_ for cells of type $_DFFE_PP0P_.
Using template \$_DFFE_PP0N_ for cells of type $_DFFE_PP0N_.
Using template \$_DFF_PP0_ for cells of type $_DFF_PP0_.
Using template \$_DFFE_PP1P_ for cells of type $_DFFE_PP1P_.
Using extmapper simplemap for cells of type $logic_not.
No more expansions possible.
<suppressed ~10448 debug messages>

yosys> opt_expr -mux_undef

3.94. Executing OPT_EXPR pass (perform const folding).
Optimizing module CAMELLIA_IF.
<suppressed ~202739 debug messages>

yosys> simplemap

3.95. Executing SIMPLEMAP pass (map simple cells to gate primitives).

yosys> opt_expr

3.96. Executing OPT_EXPR pass (perform const folding).
Optimizing module CAMELLIA_IF.

yosys> opt_merge

3.97. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\CAMELLIA_IF'.
<suppressed ~102480 debug messages>
Removed a total of 34160 cells.

yosys> opt_dff -nodffe -nosdff

3.98. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.99. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \CAMELLIA_IF..
Removed 0 unused cells and 26576 unused wires.
<suppressed ~1 debug messages>

yosys> opt -nodffe -nosdff

3.100. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.100.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module CAMELLIA_IF.
<suppressed ~8174 debug messages>

yosys> opt_merge -nomux

3.100.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\CAMELLIA_IF'.
<suppressed ~201 debug messages>
Removed a total of 67 cells.

yosys> opt_muxtree

3.100.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \CAMELLIA_IF..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.100.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \CAMELLIA_IF.
Performed a total of 0 changes.

yosys> opt_merge

3.100.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\CAMELLIA_IF'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.100.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.100.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \CAMELLIA_IF..
Removed 0 unused cells and 2121 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.100.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module CAMELLIA_IF.

3.100.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.100.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \CAMELLIA_IF..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.100.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \CAMELLIA_IF.
Performed a total of 0 changes.

yosys> opt_merge

3.100.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\CAMELLIA_IF'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.100.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.100.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \CAMELLIA_IF..

yosys> opt_expr

3.100.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module CAMELLIA_IF.

3.100.16. Finished OPT passes. (There is nothing left to do.)

yosys> abc -script /home/users/temp_dir/yosys_oBVqpJ/abc_tmp_2.scr

3.101. Executing ABC pass (technology mapping using ABC).

3.101.1. Extracting gate netlist of module `\CAMELLIA_IF' to `<abc-temp-dir>/input.blif'..
Extracted 32432 gates and 34401 wires to a netlist network with 1967 inputs and 1478 outputs.

3.101.1.1. Executing ABC.
DE:   #PIs = 1967  #Luts =  6261  Max Lvl =  15  Avg Lvl =   5.38  [   1.03 sec. at Pass 0]
DE:   #PIs = 1967  #Luts =  6261  Max Lvl =  15  Avg Lvl =   5.38  [  39.51 sec. at Pass 1]
DE:   #PIs = 1967  #Luts =  6224  Max Lvl =  15  Avg Lvl =   5.42  [   9.46 sec. at Pass 2]
DE:   #PIs = 1967  #Luts =  6211  Max Lvl =  15  Avg Lvl =   5.42  [  16.53 sec. at Pass 3]
DE:   #PIs = 1967  #Luts =  6199  Max Lvl =  15  Avg Lvl =   5.37  [   8.50 sec. at Pass 4]
DE:   #PIs = 1967  #Luts =  6199  Max Lvl =  15  Avg Lvl =   5.37  [  22.67 sec. at Pass 5]
DE:   #PIs = 1967  #Luts =  6160  Max Lvl =  15  Avg Lvl =   5.59  [  11.20 sec. at Pass 6]
DE:   #PIs = 1967  #Luts =  6136  Max Lvl =  16  Avg Lvl =   5.68  [  20.99 sec. at Pass 7]
DE:   #PIs = 1967  #Luts =  6122  Max Lvl =  15  Avg Lvl =   5.38  [   8.59 sec. at Pass 8]
DE:   #PIs = 1967  #Luts =  6115  Max Lvl =  15  Avg Lvl =   5.54  [  17.40 sec. at Pass 9]
DE:   #PIs = 1967  #Luts =  6067  Max Lvl =  15  Avg Lvl =   5.54  [   2.34 sec. at Pass 10]

yosys> opt_expr

3.102. Executing OPT_EXPR pass (perform const folding).
Optimizing module CAMELLIA_IF.

yosys> opt_merge -nomux

3.103. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\CAMELLIA_IF'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

yosys> opt_muxtree

3.104. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \CAMELLIA_IF..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.105. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \CAMELLIA_IF.
Performed a total of 0 changes.

yosys> opt_merge

3.106. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\CAMELLIA_IF'.
Removed a total of 0 cells.

yosys> opt_share

3.107. Executing OPT_SHARE pass.

yosys> opt_dff -nodffe -nosdff

3.108. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.109. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \CAMELLIA_IF..
Removed 0 unused cells and 23125 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.110. Executing OPT_EXPR pass (perform const folding).
Optimizing module CAMELLIA_IF.
MAX OPT ITERATION = 1

yosys> hierarchy -check

3.111. Executing HIERARCHY pass (managing design hierarchy).

3.111.1. Analyzing design hierarchy..
Top module:  \CAMELLIA_IF

3.111.2. Analyzing design hierarchy..
Top module:  \CAMELLIA_IF
Removed 0 unused modules.

yosys> stat

3.112. Printing statistics.

=== CAMELLIA_IF ===

   Number of wires:               7416
   Number of wire bits:          10018
   Number of public wires:          54
   Number of public wire bits:    2656
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               8027
     $lut                         6065
     dffsre                       1962


yosys> opt_clean -purge

3.113. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \CAMELLIA_IF..
Removed 0 unused cells and 32 unused wires.
<suppressed ~32 debug messages>

yosys> write_verilog -noattr -nohex synthesized.v

3.114. Executing Verilog backend.
Dumping module `\CAMELLIA_IF'.

Warnings: 3 unique messages, 3 total
End of script. Logfile hash: 448c58cfac, CPU: user 191.28s system 2.45s, MEM: 581.91 MB peak
Yosys 0.18+10 (git sha1 7a7a25778, gcc 9.1.0 -fPIC -Os)
Time spent: 94% 6x abc (2815 sec), 3% 22x opt_dff (97 sec), ...
real 527.26
user 2821.02
sys 173.26
