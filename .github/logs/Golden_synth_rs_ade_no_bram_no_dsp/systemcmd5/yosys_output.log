
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys-Verific 0.0.32
 Yosys 0.16+65 (git sha1 7987105a9, gcc 9.1.0 -fPIC -Os)


-- Executing script file `yosys.ys' --
echo on

yosys> plugin -i synth-rs

yosys> read -verific

yosys> read -incdir .

yosys> verific -vlog-incdir .

1. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Apr22_SW_Release, released at Thu Apr 28 20:08:21 2022.

yosys> verilog_defaults -add -I.

yosys> read -vlog2k md5.v

yosys> verific -vlog2k md5.v

2. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Apr22_SW_Release, released at Thu Apr 28 20:08:21 2022.
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'md5.v'

yosys> synth_rs -top md5 -tech genesis -goal area -de -no_dsp -no_bram -verilog synthesized.v

3. Executing synth_rs pass: v0.4.50

yosys> read_verilog -lib -specify -nomem2reg +/rapidsilicon/common/cells_sim.v +/rapidsilicon/genesis/cells_sim.v

3.1. Executing Verilog-2005 frontend: /home/users/meri/Documents/workspace/de-issue/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v
Parsing Verilog input from `/home/users/meri/Documents/workspace/de-issue/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\inv'.
Generating RTLIL representation for module `\buff'.
Generating RTLIL representation for module `\logic_0'.
Generating RTLIL representation for module `\logic_1'.
Generating RTLIL representation for module `\gclkbuff'.
Successfully finished Verilog frontend.

3.2. Executing Verilog-2005 frontend: /home/users/meri/Documents/workspace/de-issue/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/cells_sim.v
Parsing Verilog input from `/home/users/meri/Documents/workspace/de-issue/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\dffsre'.
Generating RTLIL representation for module `\dffnsre'.
Generating RTLIL representation for module `\latchsre'.
Generating RTLIL representation for module `\latchnsre'.
Generating RTLIL representation for module `\io_scff'.
Generating RTLIL representation for module `\scff'.
Generating RTLIL representation for module `\sh_dff'.
Generating RTLIL representation for module `\adder_carry'.
Generating RTLIL representation for module `\sdffr'.
Generating RTLIL representation for module `\sdffs'.
Generating RTLIL representation for module `\TDP_BRAM18'.
Generating RTLIL representation for module `\TDP36K'.
Generating RTLIL representation for module `\RS_DSP1'.
Generating RTLIL representation for module `\RS_DSP2'.
Generating RTLIL representation for module `\dsp_t1_sim'.
Generating RTLIL representation for module `\dsp_t1_20x18x64'.
Generating RTLIL representation for module `\dsp_t1_10x9x32'.
Successfully finished Verilog frontend.

yosys> hierarchy -check -top md5

3.3. Executing HIERARCHY pass (managing design hierarchy).
VERIFIC-INFO [VERI-1018] md5.v:51: compiling module 'md5'
VERIFIC-WARNING [VERI-1209] md5.v:240: expression size 4 truncated to fit in target size 3
VERIFIC-WARNING [VERI-1209] md5.v:241: expression size 7 truncated to fit in target size 6
VERIFIC-WARNING [VERI-1209] md5.v:251: expression size 7 truncated to fit in target size 6
VERIFIC-WARNING [VERI-2580] md5.v:431: latch inferred for net 'data_o_var[127]'
Importing module md5.

3.3.1. Analyzing design hierarchy..
Top module:  \md5

3.3.2. Analyzing design hierarchy..
Top module:  \md5
Removed 0 unused modules.

yosys> proc

3.4. Executing PROC pass (convert processes to netlists).

yosys> proc_clean

3.4.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> proc_rmdead

3.4.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

yosys> proc_prune

3.4.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

yosys> proc_init

3.4.4. Executing PROC_INIT pass (extract init attributes).

yosys> proc_arst

3.4.5. Executing PROC_ARST pass (detect async resets in processes).

yosys> proc_mux

3.4.6. Executing PROC_MUX pass (convert decision trees to multiplexers).

yosys> proc_dlatch

3.4.7. Executing PROC_DLATCH pass (convert process syncs to latches).

yosys> proc_dff

3.4.8. Executing PROC_DFF pass (convert process syncs to FFs).

yosys> proc_memwr

3.4.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

yosys> proc_clean

3.4.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> opt_expr -keepdc

3.4.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module md5.
<suppressed ~24 debug messages>

yosys> flatten

3.5. Executing FLATTEN pass (flatten design).

yosys> tribuf -logic

3.6. Executing TRIBUF pass.

yosys> deminout

3.7. Executing DEMINOUT pass (demote inout ports to input or output).

yosys> opt_expr

3.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module md5.

yosys> opt_clean

3.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \md5..
Removed 6 unused cells and 77 unused wires.
<suppressed ~74 debug messages>

yosys> check

3.10. Executing CHECK pass (checking for obvious problems).
Checking module md5...
Found and reported 0 problems.

yosys> opt -nodffe -nosdff

3.11. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module md5.

yosys> opt_merge -nomux

3.11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\md5'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.11.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \md5..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~21 debug messages>

yosys> opt_reduce

3.11.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \md5.
    New ctrl vector for $pmux cell $verific$select_42$md5.v:194$169: { $verific$n1138$4 $verific$n1139$5 $verific$n1140$6 $verific$n1141$7 }
    New ctrl vector for $pmux cell $verific$select_86$md5.v:253$208: { $auto$opt_reduce.cc:134:opt_pmux$312 $verific$n2091$14 }
    New ctrl vector for $pmux cell $verific$select_87$md5.v:253$209: { $verific$n2086$9 $auto$opt_reduce.cc:134:opt_pmux$314 }
  Optimizing cells in module \md5.
Performed a total of 3 changes.

yosys> opt_merge

3.11.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\md5'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.11.6. Executing OPT_DFF pass (perform DFF optimizations).
Changing const-value async load to async reset on $verific$round_reg$md5.v:324$253 ($aldff) from module md5.
Changing const-value async load to async reset on $verific$round64_reg$md5.v:324$254 ($aldff) from module md5.
Changing const-value async load to async reset on $verific$ready_o_reg$md5.v:324$244 ($aldff) from module md5.
Changing const-value async load to async reset on $verific$message_reg$md5.v:324$246 ($aldff) from module md5.
Changing const-value async load to async reset on $verific$getdata_state_reg$md5.v:324$251 ($aldff) from module md5.
Changing const-value async load to async reset on $verific$generate_hash_reg$md5.v:324$252 ($aldff) from module md5.
Changing const-value async load to async reset on $verific$dr_reg$md5.v:324$250 ($aldff) from module md5.
Changing const-value async load to async reset on $verific$data_o_reg$md5.v:324$245 ($aldff) from module md5.
Changing const-value async load to async reset on $verific$cr_reg$md5.v:324$249 ($aldff) from module md5.
Changing const-value async load to async reset on $verific$br_reg$md5.v:324$248 ($aldff) from module md5.
Changing const-value async load to async reset on $verific$ar_reg$md5.v:324$247 ($aldff) from module md5.
Changing const-value async load to async reset on $verific$D_reg$md5.v:324$258 ($aldff) from module md5.
Changing const-value async load to async reset on $verific$C_reg$md5.v:324$257 ($aldff) from module md5.
Changing const-value async load to async reset on $verific$B_reg$md5.v:324$256 ($aldff) from module md5.
Changing const-value async load to async reset on $verific$A_reg$md5.v:324$255 ($aldff) from module md5.

yosys> opt_clean

3.11.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \md5..
Removed 2 unused cells and 2 unused wires.
<suppressed ~3 debug messages>

yosys> opt_expr

3.11.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module md5.

3.11.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.11.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \md5..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~21 debug messages>

yosys> opt_reduce

3.11.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \md5.
Performed a total of 0 changes.

yosys> opt_merge

3.11.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\md5'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.11.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.11.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \md5..

yosys> opt_expr

3.11.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module md5.

3.11.16. Finished OPT passes. (There is nothing left to do.)

yosys> fsm -encoding binary

3.12. Executing FSM pass (extract and optimize FSM).

yosys> fsm_detect

3.12.1. Executing FSM_DETECT pass (finding FSMs in design).

yosys> fsm_extract

3.12.2. Executing FSM_EXTRACT pass (extracting FSM from design).

yosys> fsm_opt

3.12.3. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> opt_clean

3.12.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \md5..

yosys> fsm_opt

3.12.5. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> fsm_recode -encoding binary

3.12.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

yosys> fsm_info

3.12.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

yosys> fsm_map

3.12.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

yosys> opt -sat

3.13. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module md5.

yosys> opt_merge -nomux

3.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\md5'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \md5..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~21 debug messages>

yosys> opt_reduce

3.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \md5.
Performed a total of 0 changes.

yosys> opt_merge

3.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\md5'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.13.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $verific$round_reg$md5.v:324$253 ($adff) from module md5 (D = \next_round, Q = \round).
Adding EN signal on $verific$round64_reg$md5.v:324$254 ($adff) from module md5 (D = \next_round64, Q = \round64).
Adding EN signal on $verific$dr_reg$md5.v:324$250 ($adff) from module md5 (D = \next_dr, Q = \dr).
Adding EN signal on $verific$cr_reg$md5.v:324$249 ($adff) from module md5 (D = \next_cr, Q = \cr).
Adding EN signal on $verific$br_reg$md5.v:324$248 ($adff) from module md5 (D = \next_br, Q = \br).
Adding EN signal on $verific$ar_reg$md5.v:324$247 ($adff) from module md5 (D = \next_ar, Q = \ar).

yosys> opt_clean

3.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \md5..

yosys> opt_expr

3.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module md5.

3.13.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.13.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \md5..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~21 debug messages>

yosys> opt_reduce

3.13.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \md5.
Performed a total of 0 changes.

yosys> opt_merge

3.13.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\md5'.
<suppressed ~9 debug messages>
Removed a total of 3 cells.

yosys> opt_dff -sat

3.13.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.13.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \md5..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.13.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module md5.

3.13.16. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.13.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \md5..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~21 debug messages>

yosys> opt_reduce

3.13.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \md5.
Performed a total of 0 changes.

yosys> opt_merge

3.13.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\md5'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.13.20. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.13.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \md5..

yosys> opt_expr

3.13.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module md5.

3.13.23. Finished OPT passes. (There is nothing left to do.)

yosys> wreduce -keepdc

3.14. Executing WREDUCE pass (reducing word size of cells).
Removed top 2 bits (of 3) from port B of cell md5.$verific$equal_38$md5.v:191$163 ($eq).
Removed top 1 bits (of 3) from port B of cell md5.$verific$equal_39$md5.v:192$164 ($eq).
Removed top 1 bits (of 3) from port B of cell md5.$verific$equal_40$md5.v:193$165 ($eq).
Removed top 3 bits (of 9) from port A of cell md5.$verific$sub_53$md5.v:204$180 ($sub).
Removed top 1 bits (of 9) from port B of cell md5.$verific$sub_53$md5.v:204$180 ($sub).
Removed top 384 bits (of 2048) from mux cell md5.$verific$mux_1104$md5.v:405$189 ($mux).
Removed top 2 bits (of 3) from port B of cell md5.$verific$add_74$md5.v:240$196 ($add).
Removed top 5 bits (of 6) from port B of cell md5.$verific$add_76$md5.v:241$198 ($add).
Removed top 2 bits (of 6) from port B of cell md5.$verific$equal_81$md5.v:238$201 ($eq).
Removed top 1 bits (of 6) from port B of cell md5.$verific$equal_82$md5.v:238$202 ($eq).

yosys> peepopt

3.15. Executing PEEPOPT pass (run peephole optimizers).

yosys> pmuxtree

3.16. Executing PMUXTREE pass.

yosys> opt_clean

3.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \md5..
Removed 6 unused cells and 9 unused wires.
<suppressed ~7 debug messages>

yosys> alumacc

3.18. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module md5:
  creating $macc model for $verific$add_137$md5.v:335$259 ($add).
  creating $macc model for $verific$add_139$md5.v:336$261 ($add).
  creating $macc model for $verific$add_141$md5.v:337$263 ($add).
  creating $macc model for $verific$add_143$md5.v:338$265 ($add).
  creating $macc model for $verific$add_46$md5.v:201$173 ($add).
  creating $macc model for $verific$add_48$md5.v:201$175 ($add).
  creating $macc model for $verific$add_49$md5.v:201$176 ($add).
  creating $macc model for $verific$add_57$md5.v:205$184 ($add).
  creating $macc model for $verific$add_74$md5.v:240$196 ($add).
  creating $macc model for $verific$add_76$md5.v:241$198 ($add).
  creating $macc model for $verific$sub_53$md5.v:204$180 ($sub).
  merging $macc model for $verific$add_48$md5.v:201$175 into $verific$add_49$md5.v:201$176.
  merging $macc model for $verific$add_46$md5.v:201$173 into $verific$add_49$md5.v:201$176.
  creating $alu model for $macc $verific$add_74$md5.v:240$196.
  creating $alu model for $macc $verific$add_57$md5.v:205$184.
  creating $alu model for $macc $verific$add_76$md5.v:241$198.
  creating $alu model for $macc $verific$sub_53$md5.v:204$180.
  creating $alu model for $macc $verific$add_143$md5.v:338$265.
  creating $alu model for $macc $verific$add_141$md5.v:337$263.
  creating $alu model for $macc $verific$add_139$md5.v:336$261.
  creating $alu model for $macc $verific$add_137$md5.v:335$259.
  creating $macc cell for $verific$add_49$md5.v:201$176: $auto$alumacc.cc:365:replace_macc$363
  creating $alu cell for $verific$add_137$md5.v:335$259: $auto$alumacc.cc:485:replace_alu$364
  creating $alu cell for $verific$add_139$md5.v:336$261: $auto$alumacc.cc:485:replace_alu$367
  creating $alu cell for $verific$add_141$md5.v:337$263: $auto$alumacc.cc:485:replace_alu$370
  creating $alu cell for $verific$add_143$md5.v:338$265: $auto$alumacc.cc:485:replace_alu$373
  creating $alu cell for $verific$sub_53$md5.v:204$180: $auto$alumacc.cc:485:replace_alu$376
  creating $alu cell for $verific$add_76$md5.v:241$198: $auto$alumacc.cc:485:replace_alu$379
  creating $alu cell for $verific$add_57$md5.v:205$184: $auto$alumacc.cc:485:replace_alu$382
  creating $alu cell for $verific$add_74$md5.v:240$196: $auto$alumacc.cc:485:replace_alu$385
  created 8 $alu and 1 $macc cells.

yosys> opt

3.19. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module md5.
<suppressed ~1 debug messages>

yosys> opt_merge -nomux

3.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\md5'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \md5..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~21 debug messages>

yosys> opt_reduce

3.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \md5.
Performed a total of 0 changes.

yosys> opt_merge

3.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\md5'.
Removed a total of 0 cells.

yosys> opt_dff

3.19.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.19.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \md5..
Removed 2 unused cells and 2 unused wires.
<suppressed ~3 debug messages>

yosys> opt_expr

3.19.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module md5.

3.19.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.19.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \md5..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~21 debug messages>

yosys> opt_reduce

3.19.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \md5.
Performed a total of 0 changes.

yosys> opt_merge

3.19.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\md5'.
Removed a total of 0 cells.

yosys> opt_dff

3.19.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.19.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \md5..

yosys> opt_expr

3.19.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module md5.

3.19.16. Finished OPT passes. (There is nothing left to do.)

yosys> stat

3.20. Printing statistics.

=== md5 ===

   Number of wires:                152
   Number of wire bits:           6381
   Number of public wires:          65
   Number of public wire bits:    2841
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                101
     $adff                           9
     $adffe                          6
     $alu                            8
     $and                            1
     $bmux                          11
     $eq                             7
     $logic_not                      2
     $macc                           1
     $mux                           37
     $ne                             3
     $not                            4
     $or                             4
     $reduce_or                      4
     $shl                            1
     $shr                            1
     $xor                            2


yosys> memory -nomap

3.21. Executing MEMORY pass.

yosys> opt_mem

3.21.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

yosys> opt_mem_priority

3.21.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

yosys> opt_mem_feedback

3.21.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

yosys> memory_dff

3.21.4. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

yosys> opt_clean

3.21.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \md5..

yosys> memory_share

3.21.6. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

yosys> opt_mem_widen

3.21.7. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

yosys> opt_clean

3.21.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \md5..

yosys> memory_collect

3.21.9. Executing MEMORY_COLLECT pass (generating $mem cells).

yosys> stat

3.22. Printing statistics.

=== md5 ===

   Number of wires:                152
   Number of wire bits:           6381
   Number of public wires:          65
   Number of public wire bits:    2841
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                101
     $adff                           9
     $adffe                          6
     $alu                            8
     $and                            1
     $bmux                          11
     $eq                             7
     $logic_not                      2
     $macc                           1
     $mux                           37
     $ne                             3
     $not                            4
     $or                             4
     $reduce_or                      4
     $shl                            1
     $shr                            1
     $xor                            2


yosys> opt_clean

3.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \md5..

yosys> stat

3.24. Printing statistics.

=== md5 ===

   Number of wires:                152
   Number of wire bits:           6381
   Number of public wires:          65
   Number of public wire bits:    2841
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                101
     $adff                           9
     $adffe                          6
     $alu                            8
     $and                            1
     $bmux                          11
     $eq                             7
     $logic_not                      2
     $macc                           1
     $mux                           37
     $ne                             3
     $not                            4
     $or                             4
     $reduce_or                      4
     $shl                            1
     $shr                            1
     $xor                            2


yosys> techmap -map +/techmap.v -map +/rapidsilicon/genesis/arith_map.v

3.25. Executing TECHMAP pass (map to technology primitives).

3.25.1. Executing Verilog-2005 frontend: /home/users/meri/Documents/workspace/de-issue/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/meri/Documents/workspace/de-issue/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.25.2. Executing Verilog-2005 frontend: /home/users/meri/Documents/workspace/de-issue/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/arith_map.v
Parsing Verilog input from `/home/users/meri/Documents/workspace/de-issue/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_rs_alu'.
Successfully finished Verilog frontend.

3.25.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $mux.
Using extmapper maccmap for cells of type $macc.
  add \ar (32 bits, unsigned)
  add \t [43:12] (32 bits, unsigned)
  add $verific$n1257$40 (32 bits, unsigned)
  add \fr_var (32 bits, unsigned)
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $bmux.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $adffe.
Using template $paramod$be80489e44a49c29884f59fd81c31ed03229cfc1\_80_rs_alu for cells of type $alu.
Using template $paramod$constmap:b07c6788ac040741d0f2f36f509f85fa42b75d08$paramod$f2dfef6e0670d1a78056b6e8b09255cd89e540e0\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using template $paramod$32efbfac1c4dc57230cf86180788fdfd12e3b511\_90_alu for cells of type $alu.
Using template $paramod$9f6287aee284fbe22761e3274ffeab5b5a3751bd\_90_alu for cells of type $alu.
Using template $paramod$constmap:a9df98387b1e82cb33310b520f7c2cacb940f54b$paramod$56955d0f36f77738c952d3505dc563df3ee11b94\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using template $paramod$3ef7d3dd227da7627a99c5e5a6a4deb817573e39\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $adff.
Using template $paramod\_90_fa\WIDTH=32'00000000000000000000000000100000 for cells of type $fa.
Using template $paramod$fbc7873bff55778c0b3173955b7e4bce1d9d6834\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000110 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001001 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000011 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000100000 for cells of type $lcu.
No more expansions possible.
<suppressed ~2378 debug messages>

yosys> stat

3.26. Printing statistics.

=== md5 ===

   Number of wires:                664
   Number of wire bits:          28737
   Number of public wires:          65
   Number of public wire bits:    2841
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:              14460
     $_AND_                        420
     $_DFFE_PN0P_                   73
     $_DFFE_PN1P_                   64
     $_DFF_PN0_                    709
     $_DFF_PN1_                     64
     $_MUX_                      11816
     $_NOT_                        285
     $_OR_                         330
     $_XOR_                        539
     adder_carry                   160


yosys> opt

3.27. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.27.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module md5.
<suppressed ~6280 debug messages>

yosys> opt_merge -nomux

3.27.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\md5'.
<suppressed ~3276 debug messages>
Removed a total of 1092 cells.

yosys> opt_muxtree

3.27.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \md5..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.27.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \md5.
Performed a total of 0 changes.

yosys> opt_merge

3.27.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\md5'.
Removed a total of 0 cells.

yosys> opt_dff

3.27.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.27.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \md5..
Removed 159 unused cells and 369 unused wires.
<suppressed ~160 debug messages>

yosys> opt_expr

3.27.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module md5.
<suppressed ~31 debug messages>

3.27.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.27.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \md5..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.27.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \md5.
Performed a total of 0 changes.

yosys> opt_merge

3.27.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\md5'.
Removed a total of 0 cells.

yosys> opt_dff

3.27.13. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $auto$ff.cc:262:slice$8497 ($_DFF_PN0_) from module md5 (D = \next_generate_hash, Q = \generate_hash).
Adding EN signal on $auto$ff.cc:262:slice$8365 ($_DFF_PN0_) from module md5 (D = \data_i [127], Q = \message [511]).
Adding EN signal on $auto$ff.cc:262:slice$8364 ($_DFF_PN0_) from module md5 (D = \data_i [126], Q = \message [510]).
Adding EN signal on $auto$ff.cc:262:slice$8363 ($_DFF_PN0_) from module md5 (D = \data_i [125], Q = \message [509]).
Adding EN signal on $auto$ff.cc:262:slice$8362 ($_DFF_PN0_) from module md5 (D = \data_i [124], Q = \message [508]).
Adding EN signal on $auto$ff.cc:262:slice$8361 ($_DFF_PN0_) from module md5 (D = \data_i [123], Q = \message [507]).
Adding EN signal on $auto$ff.cc:262:slice$8360 ($_DFF_PN0_) from module md5 (D = \data_i [122], Q = \message [506]).
Adding EN signal on $auto$ff.cc:262:slice$8359 ($_DFF_PN0_) from module md5 (D = \data_i [121], Q = \message [505]).
Adding EN signal on $auto$ff.cc:262:slice$8358 ($_DFF_PN0_) from module md5 (D = \data_i [120], Q = \message [504]).
Adding EN signal on $auto$ff.cc:262:slice$8357 ($_DFF_PN0_) from module md5 (D = \data_i [119], Q = \message [503]).
Adding EN signal on $auto$ff.cc:262:slice$8356 ($_DFF_PN0_) from module md5 (D = \data_i [118], Q = \message [502]).
Adding EN signal on $auto$ff.cc:262:slice$8355 ($_DFF_PN0_) from module md5 (D = \data_i [117], Q = \message [501]).
Adding EN signal on $auto$ff.cc:262:slice$8354 ($_DFF_PN0_) from module md5 (D = \data_i [116], Q = \message [500]).
Adding EN signal on $auto$ff.cc:262:slice$8353 ($_DFF_PN0_) from module md5 (D = \data_i [115], Q = \message [499]).
Adding EN signal on $auto$ff.cc:262:slice$8352 ($_DFF_PN0_) from module md5 (D = \data_i [114], Q = \message [498]).
Adding EN signal on $auto$ff.cc:262:slice$8351 ($_DFF_PN0_) from module md5 (D = \data_i [113], Q = \message [497]).
Adding EN signal on $auto$ff.cc:262:slice$8350 ($_DFF_PN0_) from module md5 (D = \data_i [112], Q = \message [496]).
Adding EN signal on $auto$ff.cc:262:slice$8349 ($_DFF_PN0_) from module md5 (D = \data_i [111], Q = \message [495]).
Adding EN signal on $auto$ff.cc:262:slice$8348 ($_DFF_PN0_) from module md5 (D = \data_i [110], Q = \message [494]).
Adding EN signal on $auto$ff.cc:262:slice$8347 ($_DFF_PN0_) from module md5 (D = \data_i [109], Q = \message [493]).
Adding EN signal on $auto$ff.cc:262:slice$8346 ($_DFF_PN0_) from module md5 (D = \data_i [108], Q = \message [492]).
Adding EN signal on $auto$ff.cc:262:slice$8345 ($_DFF_PN0_) from module md5 (D = \data_i [107], Q = \message [491]).
Adding EN signal on $auto$ff.cc:262:slice$8344 ($_DFF_PN0_) from module md5 (D = \data_i [106], Q = \message [490]).
Adding EN signal on $auto$ff.cc:262:slice$8343 ($_DFF_PN0_) from module md5 (D = \data_i [105], Q = \message [489]).
Adding EN signal on $auto$ff.cc:262:slice$8342 ($_DFF_PN0_) from module md5 (D = \data_i [104], Q = \message [488]).
Adding EN signal on $auto$ff.cc:262:slice$8341 ($_DFF_PN0_) from module md5 (D = \data_i [103], Q = \message [487]).
Adding EN signal on $auto$ff.cc:262:slice$8340 ($_DFF_PN0_) from module md5 (D = \data_i [102], Q = \message [486]).
Adding EN signal on $auto$ff.cc:262:slice$8339 ($_DFF_PN0_) from module md5 (D = \data_i [101], Q = \message [485]).
Adding EN signal on $auto$ff.cc:262:slice$8338 ($_DFF_PN0_) from module md5 (D = \data_i [100], Q = \message [484]).
Adding EN signal on $auto$ff.cc:262:slice$8337 ($_DFF_PN0_) from module md5 (D = \data_i [99], Q = \message [483]).
Adding EN signal on $auto$ff.cc:262:slice$8336 ($_DFF_PN0_) from module md5 (D = \data_i [98], Q = \message [482]).
Adding EN signal on $auto$ff.cc:262:slice$8335 ($_DFF_PN0_) from module md5 (D = \data_i [97], Q = \message [481]).
Adding EN signal on $auto$ff.cc:262:slice$8334 ($_DFF_PN0_) from module md5 (D = \data_i [96], Q = \message [480]).
Adding EN signal on $auto$ff.cc:262:slice$8333 ($_DFF_PN0_) from module md5 (D = \data_i [95], Q = \message [479]).
Adding EN signal on $auto$ff.cc:262:slice$8332 ($_DFF_PN0_) from module md5 (D = \data_i [94], Q = \message [478]).
Adding EN signal on $auto$ff.cc:262:slice$8331 ($_DFF_PN0_) from module md5 (D = \data_i [93], Q = \message [477]).
Adding EN signal on $auto$ff.cc:262:slice$8330 ($_DFF_PN0_) from module md5 (D = \data_i [92], Q = \message [476]).
Adding EN signal on $auto$ff.cc:262:slice$8329 ($_DFF_PN0_) from module md5 (D = \data_i [91], Q = \message [475]).
Adding EN signal on $auto$ff.cc:262:slice$8328 ($_DFF_PN0_) from module md5 (D = \data_i [90], Q = \message [474]).
Adding EN signal on $auto$ff.cc:262:slice$8327 ($_DFF_PN0_) from module md5 (D = \data_i [89], Q = \message [473]).
Adding EN signal on $auto$ff.cc:262:slice$8326 ($_DFF_PN0_) from module md5 (D = \data_i [88], Q = \message [472]).
Adding EN signal on $auto$ff.cc:262:slice$8325 ($_DFF_PN0_) from module md5 (D = \data_i [87], Q = \message [471]).
Adding EN signal on $auto$ff.cc:262:slice$8324 ($_DFF_PN0_) from module md5 (D = \data_i [86], Q = \message [470]).
Adding EN signal on $auto$ff.cc:262:slice$8323 ($_DFF_PN0_) from module md5 (D = \data_i [85], Q = \message [469]).
Adding EN signal on $auto$ff.cc:262:slice$8322 ($_DFF_PN0_) from module md5 (D = \data_i [84], Q = \message [468]).
Adding EN signal on $auto$ff.cc:262:slice$8321 ($_DFF_PN0_) from module md5 (D = \data_i [83], Q = \message [467]).
Adding EN signal on $auto$ff.cc:262:slice$8320 ($_DFF_PN0_) from module md5 (D = \data_i [82], Q = \message [466]).
Adding EN signal on $auto$ff.cc:262:slice$8319 ($_DFF_PN0_) from module md5 (D = \data_i [81], Q = \message [465]).
Adding EN signal on $auto$ff.cc:262:slice$8318 ($_DFF_PN0_) from module md5 (D = \data_i [80], Q = \message [464]).
Adding EN signal on $auto$ff.cc:262:slice$8317 ($_DFF_PN0_) from module md5 (D = \data_i [79], Q = \message [463]).
Adding EN signal on $auto$ff.cc:262:slice$8316 ($_DFF_PN0_) from module md5 (D = \data_i [78], Q = \message [462]).
Adding EN signal on $auto$ff.cc:262:slice$8315 ($_DFF_PN0_) from module md5 (D = \data_i [77], Q = \message [461]).
Adding EN signal on $auto$ff.cc:262:slice$8314 ($_DFF_PN0_) from module md5 (D = \data_i [76], Q = \message [460]).
Adding EN signal on $auto$ff.cc:262:slice$8313 ($_DFF_PN0_) from module md5 (D = \data_i [75], Q = \message [459]).
Adding EN signal on $auto$ff.cc:262:slice$8312 ($_DFF_PN0_) from module md5 (D = \data_i [74], Q = \message [458]).
Adding EN signal on $auto$ff.cc:262:slice$8311 ($_DFF_PN0_) from module md5 (D = \data_i [73], Q = \message [457]).
Adding EN signal on $auto$ff.cc:262:slice$8310 ($_DFF_PN0_) from module md5 (D = \data_i [72], Q = \message [456]).
Adding EN signal on $auto$ff.cc:262:slice$8309 ($_DFF_PN0_) from module md5 (D = \data_i [71], Q = \message [455]).
Adding EN signal on $auto$ff.cc:262:slice$8308 ($_DFF_PN0_) from module md5 (D = \data_i [70], Q = \message [454]).
Adding EN signal on $auto$ff.cc:262:slice$8307 ($_DFF_PN0_) from module md5 (D = \data_i [69], Q = \message [453]).
Adding EN signal on $auto$ff.cc:262:slice$8306 ($_DFF_PN0_) from module md5 (D = \data_i [68], Q = \message [452]).
Adding EN signal on $auto$ff.cc:262:slice$8305 ($_DFF_PN0_) from module md5 (D = \data_i [67], Q = \message [451]).
Adding EN signal on $auto$ff.cc:262:slice$8304 ($_DFF_PN0_) from module md5 (D = \data_i [66], Q = \message [450]).
Adding EN signal on $auto$ff.cc:262:slice$8303 ($_DFF_PN0_) from module md5 (D = \data_i [65], Q = \message [449]).
Adding EN signal on $auto$ff.cc:262:slice$8302 ($_DFF_PN0_) from module md5 (D = \data_i [64], Q = \message [448]).
Adding EN signal on $auto$ff.cc:262:slice$8301 ($_DFF_PN0_) from module md5 (D = \data_i [63], Q = \message [447]).
Adding EN signal on $auto$ff.cc:262:slice$8300 ($_DFF_PN0_) from module md5 (D = \data_i [62], Q = \message [446]).
Adding EN signal on $auto$ff.cc:262:slice$8299 ($_DFF_PN0_) from module md5 (D = \data_i [61], Q = \message [445]).
Adding EN signal on $auto$ff.cc:262:slice$8298 ($_DFF_PN0_) from module md5 (D = \data_i [60], Q = \message [444]).
Adding EN signal on $auto$ff.cc:262:slice$8297 ($_DFF_PN0_) from module md5 (D = \data_i [59], Q = \message [443]).
Adding EN signal on $auto$ff.cc:262:slice$8296 ($_DFF_PN0_) from module md5 (D = \data_i [58], Q = \message [442]).
Adding EN signal on $auto$ff.cc:262:slice$8295 ($_DFF_PN0_) from module md5 (D = \data_i [57], Q = \message [441]).
Adding EN signal on $auto$ff.cc:262:slice$8294 ($_DFF_PN0_) from module md5 (D = \data_i [56], Q = \message [440]).
Adding EN signal on $auto$ff.cc:262:slice$8293 ($_DFF_PN0_) from module md5 (D = \data_i [55], Q = \message [439]).
Adding EN signal on $auto$ff.cc:262:slice$8292 ($_DFF_PN0_) from module md5 (D = \data_i [54], Q = \message [438]).
Adding EN signal on $auto$ff.cc:262:slice$8291 ($_DFF_PN0_) from module md5 (D = \data_i [53], Q = \message [437]).
Adding EN signal on $auto$ff.cc:262:slice$8290 ($_DFF_PN0_) from module md5 (D = \data_i [52], Q = \message [436]).
Adding EN signal on $auto$ff.cc:262:slice$8289 ($_DFF_PN0_) from module md5 (D = \data_i [51], Q = \message [435]).
Adding EN signal on $auto$ff.cc:262:slice$8288 ($_DFF_PN0_) from module md5 (D = \data_i [50], Q = \message [434]).
Adding EN signal on $auto$ff.cc:262:slice$8287 ($_DFF_PN0_) from module md5 (D = \data_i [49], Q = \message [433]).
Adding EN signal on $auto$ff.cc:262:slice$8286 ($_DFF_PN0_) from module md5 (D = \data_i [48], Q = \message [432]).
Adding EN signal on $auto$ff.cc:262:slice$8285 ($_DFF_PN0_) from module md5 (D = \data_i [47], Q = \message [431]).
Adding EN signal on $auto$ff.cc:262:slice$8284 ($_DFF_PN0_) from module md5 (D = \data_i [46], Q = \message [430]).
Adding EN signal on $auto$ff.cc:262:slice$8283 ($_DFF_PN0_) from module md5 (D = \data_i [45], Q = \message [429]).
Adding EN signal on $auto$ff.cc:262:slice$8282 ($_DFF_PN0_) from module md5 (D = \data_i [44], Q = \message [428]).
Adding EN signal on $auto$ff.cc:262:slice$8281 ($_DFF_PN0_) from module md5 (D = \data_i [43], Q = \message [427]).
Adding EN signal on $auto$ff.cc:262:slice$8280 ($_DFF_PN0_) from module md5 (D = \data_i [42], Q = \message [426]).
Adding EN signal on $auto$ff.cc:262:slice$8279 ($_DFF_PN0_) from module md5 (D = \data_i [41], Q = \message [425]).
Adding EN signal on $auto$ff.cc:262:slice$8278 ($_DFF_PN0_) from module md5 (D = \data_i [40], Q = \message [424]).
Adding EN signal on $auto$ff.cc:262:slice$8277 ($_DFF_PN0_) from module md5 (D = \data_i [39], Q = \message [423]).
Adding EN signal on $auto$ff.cc:262:slice$8276 ($_DFF_PN0_) from module md5 (D = \data_i [38], Q = \message [422]).
Adding EN signal on $auto$ff.cc:262:slice$8275 ($_DFF_PN0_) from module md5 (D = \data_i [37], Q = \message [421]).
Adding EN signal on $auto$ff.cc:262:slice$8274 ($_DFF_PN0_) from module md5 (D = \data_i [36], Q = \message [420]).
Adding EN signal on $auto$ff.cc:262:slice$8273 ($_DFF_PN0_) from module md5 (D = \data_i [35], Q = \message [419]).
Adding EN signal on $auto$ff.cc:262:slice$8272 ($_DFF_PN0_) from module md5 (D = \data_i [34], Q = \message [418]).
Adding EN signal on $auto$ff.cc:262:slice$8271 ($_DFF_PN0_) from module md5 (D = \data_i [33], Q = \message [417]).
Adding EN signal on $auto$ff.cc:262:slice$8270 ($_DFF_PN0_) from module md5 (D = \data_i [32], Q = \message [416]).
Adding EN signal on $auto$ff.cc:262:slice$8269 ($_DFF_PN0_) from module md5 (D = \data_i [31], Q = \message [415]).
Adding EN signal on $auto$ff.cc:262:slice$8268 ($_DFF_PN0_) from module md5 (D = \data_i [30], Q = \message [414]).
Adding EN signal on $auto$ff.cc:262:slice$8267 ($_DFF_PN0_) from module md5 (D = \data_i [29], Q = \message [413]).
Adding EN signal on $auto$ff.cc:262:slice$8266 ($_DFF_PN0_) from module md5 (D = \data_i [28], Q = \message [412]).
Adding EN signal on $auto$ff.cc:262:slice$8265 ($_DFF_PN0_) from module md5 (D = \data_i [27], Q = \message [411]).
Adding EN signal on $auto$ff.cc:262:slice$8264 ($_DFF_PN0_) from module md5 (D = \data_i [26], Q = \message [410]).
Adding EN signal on $auto$ff.cc:262:slice$8263 ($_DFF_PN0_) from module md5 (D = \data_i [25], Q = \message [409]).
Adding EN signal on $auto$ff.cc:262:slice$8262 ($_DFF_PN0_) from module md5 (D = \data_i [24], Q = \message [408]).
Adding EN signal on $auto$ff.cc:262:slice$8261 ($_DFF_PN0_) from module md5 (D = \data_i [23], Q = \message [407]).
Adding EN signal on $auto$ff.cc:262:slice$8260 ($_DFF_PN0_) from module md5 (D = \data_i [22], Q = \message [406]).
Adding EN signal on $auto$ff.cc:262:slice$8259 ($_DFF_PN0_) from module md5 (D = \data_i [21], Q = \message [405]).
Adding EN signal on $auto$ff.cc:262:slice$8258 ($_DFF_PN0_) from module md5 (D = \data_i [20], Q = \message [404]).
Adding EN signal on $auto$ff.cc:262:slice$8257 ($_DFF_PN0_) from module md5 (D = \data_i [19], Q = \message [403]).
Adding EN signal on $auto$ff.cc:262:slice$8256 ($_DFF_PN0_) from module md5 (D = \data_i [18], Q = \message [402]).
Adding EN signal on $auto$ff.cc:262:slice$8255 ($_DFF_PN0_) from module md5 (D = \data_i [17], Q = \message [401]).
Adding EN signal on $auto$ff.cc:262:slice$8254 ($_DFF_PN0_) from module md5 (D = \data_i [16], Q = \message [400]).
Adding EN signal on $auto$ff.cc:262:slice$8253 ($_DFF_PN0_) from module md5 (D = \data_i [15], Q = \message [399]).
Adding EN signal on $auto$ff.cc:262:slice$8252 ($_DFF_PN0_) from module md5 (D = \data_i [14], Q = \message [398]).
Adding EN signal on $auto$ff.cc:262:slice$8251 ($_DFF_PN0_) from module md5 (D = \data_i [13], Q = \message [397]).
Adding EN signal on $auto$ff.cc:262:slice$8250 ($_DFF_PN0_) from module md5 (D = \data_i [12], Q = \message [396]).
Adding EN signal on $auto$ff.cc:262:slice$8249 ($_DFF_PN0_) from module md5 (D = \data_i [11], Q = \message [395]).
Adding EN signal on $auto$ff.cc:262:slice$8248 ($_DFF_PN0_) from module md5 (D = \data_i [10], Q = \message [394]).
Adding EN signal on $auto$ff.cc:262:slice$8247 ($_DFF_PN0_) from module md5 (D = \data_i [9], Q = \message [393]).
Adding EN signal on $auto$ff.cc:262:slice$8246 ($_DFF_PN0_) from module md5 (D = \data_i [8], Q = \message [392]).
Adding EN signal on $auto$ff.cc:262:slice$8245 ($_DFF_PN0_) from module md5 (D = \data_i [7], Q = \message [391]).
Adding EN signal on $auto$ff.cc:262:slice$8244 ($_DFF_PN0_) from module md5 (D = \data_i [6], Q = \message [390]).
Adding EN signal on $auto$ff.cc:262:slice$8243 ($_DFF_PN0_) from module md5 (D = \data_i [5], Q = \message [389]).
Adding EN signal on $auto$ff.cc:262:slice$8242 ($_DFF_PN0_) from module md5 (D = \data_i [4], Q = \message [388]).
Adding EN signal on $auto$ff.cc:262:slice$8241 ($_DFF_PN0_) from module md5 (D = \data_i [3], Q = \message [387]).
Adding EN signal on $auto$ff.cc:262:slice$8240 ($_DFF_PN0_) from module md5 (D = \data_i [2], Q = \message [386]).
Adding EN signal on $auto$ff.cc:262:slice$8239 ($_DFF_PN0_) from module md5 (D = \data_i [1], Q = \message [385]).
Adding EN signal on $auto$ff.cc:262:slice$8238 ($_DFF_PN0_) from module md5 (D = \data_i [0], Q = \message [384]).
Adding EN signal on $auto$ff.cc:262:slice$8237 ($_DFF_PN0_) from module md5 (D = \data_i [127], Q = \message [383]).
Adding EN signal on $auto$ff.cc:262:slice$8236 ($_DFF_PN0_) from module md5 (D = \data_i [126], Q = \message [382]).
Adding EN signal on $auto$ff.cc:262:slice$8235 ($_DFF_PN0_) from module md5 (D = \data_i [125], Q = \message [381]).
Adding EN signal on $auto$ff.cc:262:slice$8234 ($_DFF_PN0_) from module md5 (D = \data_i [124], Q = \message [380]).
Adding EN signal on $auto$ff.cc:262:slice$8233 ($_DFF_PN0_) from module md5 (D = \data_i [123], Q = \message [379]).
Adding EN signal on $auto$ff.cc:262:slice$8232 ($_DFF_PN0_) from module md5 (D = \data_i [122], Q = \message [378]).
Adding EN signal on $auto$ff.cc:262:slice$8231 ($_DFF_PN0_) from module md5 (D = \data_i [121], Q = \message [377]).
Adding EN signal on $auto$ff.cc:262:slice$8230 ($_DFF_PN0_) from module md5 (D = \data_i [120], Q = \message [376]).
Adding EN signal on $auto$ff.cc:262:slice$8229 ($_DFF_PN0_) from module md5 (D = \data_i [119], Q = \message [375]).
Adding EN signal on $auto$ff.cc:262:slice$8228 ($_DFF_PN0_) from module md5 (D = \data_i [118], Q = \message [374]).
Adding EN signal on $auto$ff.cc:262:slice$8227 ($_DFF_PN0_) from module md5 (D = \data_i [117], Q = \message [373]).
Adding EN signal on $auto$ff.cc:262:slice$8226 ($_DFF_PN0_) from module md5 (D = \data_i [116], Q = \message [372]).
Adding EN signal on $auto$ff.cc:262:slice$8225 ($_DFF_PN0_) from module md5 (D = \data_i [115], Q = \message [371]).
Adding EN signal on $auto$ff.cc:262:slice$8224 ($_DFF_PN0_) from module md5 (D = \data_i [114], Q = \message [370]).
Adding EN signal on $auto$ff.cc:262:slice$8223 ($_DFF_PN0_) from module md5 (D = \data_i [113], Q = \message [369]).
Adding EN signal on $auto$ff.cc:262:slice$8222 ($_DFF_PN0_) from module md5 (D = \data_i [112], Q = \message [368]).
Adding EN signal on $auto$ff.cc:262:slice$8221 ($_DFF_PN0_) from module md5 (D = \data_i [111], Q = \message [367]).
Adding EN signal on $auto$ff.cc:262:slice$8220 ($_DFF_PN0_) from module md5 (D = \data_i [110], Q = \message [366]).
Adding EN signal on $auto$ff.cc:262:slice$8219 ($_DFF_PN0_) from module md5 (D = \data_i [109], Q = \message [365]).
Adding EN signal on $auto$ff.cc:262:slice$8218 ($_DFF_PN0_) from module md5 (D = \data_i [108], Q = \message [364]).
Adding EN signal on $auto$ff.cc:262:slice$8217 ($_DFF_PN0_) from module md5 (D = \data_i [107], Q = \message [363]).
Adding EN signal on $auto$ff.cc:262:slice$8216 ($_DFF_PN0_) from module md5 (D = \data_i [106], Q = \message [362]).
Adding EN signal on $auto$ff.cc:262:slice$8215 ($_DFF_PN0_) from module md5 (D = \data_i [105], Q = \message [361]).
Adding EN signal on $auto$ff.cc:262:slice$8214 ($_DFF_PN0_) from module md5 (D = \data_i [104], Q = \message [360]).
Adding EN signal on $auto$ff.cc:262:slice$8213 ($_DFF_PN0_) from module md5 (D = \data_i [103], Q = \message [359]).
Adding EN signal on $auto$ff.cc:262:slice$8212 ($_DFF_PN0_) from module md5 (D = \data_i [102], Q = \message [358]).
Adding EN signal on $auto$ff.cc:262:slice$8211 ($_DFF_PN0_) from module md5 (D = \data_i [101], Q = \message [357]).
Adding EN signal on $auto$ff.cc:262:slice$8210 ($_DFF_PN0_) from module md5 (D = \data_i [100], Q = \message [356]).
Adding EN signal on $auto$ff.cc:262:slice$8209 ($_DFF_PN0_) from module md5 (D = \data_i [99], Q = \message [355]).
Adding EN signal on $auto$ff.cc:262:slice$8208 ($_DFF_PN0_) from module md5 (D = \data_i [98], Q = \message [354]).
Adding EN signal on $auto$ff.cc:262:slice$8207 ($_DFF_PN0_) from module md5 (D = \data_i [97], Q = \message [353]).
Adding EN signal on $auto$ff.cc:262:slice$8206 ($_DFF_PN0_) from module md5 (D = \data_i [96], Q = \message [352]).
Adding EN signal on $auto$ff.cc:262:slice$8205 ($_DFF_PN0_) from module md5 (D = \data_i [95], Q = \message [351]).
Adding EN signal on $auto$ff.cc:262:slice$8204 ($_DFF_PN0_) from module md5 (D = \data_i [94], Q = \message [350]).
Adding EN signal on $auto$ff.cc:262:slice$8203 ($_DFF_PN0_) from module md5 (D = \data_i [93], Q = \message [349]).
Adding EN signal on $auto$ff.cc:262:slice$8202 ($_DFF_PN0_) from module md5 (D = \data_i [92], Q = \message [348]).
Adding EN signal on $auto$ff.cc:262:slice$8201 ($_DFF_PN0_) from module md5 (D = \data_i [91], Q = \message [347]).
Adding EN signal on $auto$ff.cc:262:slice$8200 ($_DFF_PN0_) from module md5 (D = \data_i [90], Q = \message [346]).
Adding EN signal on $auto$ff.cc:262:slice$8199 ($_DFF_PN0_) from module md5 (D = \data_i [89], Q = \message [345]).
Adding EN signal on $auto$ff.cc:262:slice$8198 ($_DFF_PN0_) from module md5 (D = \data_i [88], Q = \message [344]).
Adding EN signal on $auto$ff.cc:262:slice$8197 ($_DFF_PN0_) from module md5 (D = \data_i [87], Q = \message [343]).
Adding EN signal on $auto$ff.cc:262:slice$8196 ($_DFF_PN0_) from module md5 (D = \data_i [86], Q = \message [342]).
Adding EN signal on $auto$ff.cc:262:slice$8195 ($_DFF_PN0_) from module md5 (D = \data_i [85], Q = \message [341]).
Adding EN signal on $auto$ff.cc:262:slice$8194 ($_DFF_PN0_) from module md5 (D = \data_i [84], Q = \message [340]).
Adding EN signal on $auto$ff.cc:262:slice$8193 ($_DFF_PN0_) from module md5 (D = \data_i [83], Q = \message [339]).
Adding EN signal on $auto$ff.cc:262:slice$8192 ($_DFF_PN0_) from module md5 (D = \data_i [82], Q = \message [338]).
Adding EN signal on $auto$ff.cc:262:slice$8191 ($_DFF_PN0_) from module md5 (D = \data_i [81], Q = \message [337]).
Adding EN signal on $auto$ff.cc:262:slice$8190 ($_DFF_PN0_) from module md5 (D = \data_i [80], Q = \message [336]).
Adding EN signal on $auto$ff.cc:262:slice$8189 ($_DFF_PN0_) from module md5 (D = \data_i [79], Q = \message [335]).
Adding EN signal on $auto$ff.cc:262:slice$8188 ($_DFF_PN0_) from module md5 (D = \data_i [78], Q = \message [334]).
Adding EN signal on $auto$ff.cc:262:slice$8187 ($_DFF_PN0_) from module md5 (D = \data_i [77], Q = \message [333]).
Adding EN signal on $auto$ff.cc:262:slice$8186 ($_DFF_PN0_) from module md5 (D = \data_i [76], Q = \message [332]).
Adding EN signal on $auto$ff.cc:262:slice$8185 ($_DFF_PN0_) from module md5 (D = \data_i [75], Q = \message [331]).
Adding EN signal on $auto$ff.cc:262:slice$8184 ($_DFF_PN0_) from module md5 (D = \data_i [74], Q = \message [330]).
Adding EN signal on $auto$ff.cc:262:slice$8183 ($_DFF_PN0_) from module md5 (D = \data_i [73], Q = \message [329]).
Adding EN signal on $auto$ff.cc:262:slice$8182 ($_DFF_PN0_) from module md5 (D = \data_i [72], Q = \message [328]).
Adding EN signal on $auto$ff.cc:262:slice$8181 ($_DFF_PN0_) from module md5 (D = \data_i [71], Q = \message [327]).
Adding EN signal on $auto$ff.cc:262:slice$8180 ($_DFF_PN0_) from module md5 (D = \data_i [70], Q = \message [326]).
Adding EN signal on $auto$ff.cc:262:slice$8179 ($_DFF_PN0_) from module md5 (D = \data_i [69], Q = \message [325]).
Adding EN signal on $auto$ff.cc:262:slice$8178 ($_DFF_PN0_) from module md5 (D = \data_i [68], Q = \message [324]).
Adding EN signal on $auto$ff.cc:262:slice$8177 ($_DFF_PN0_) from module md5 (D = \data_i [67], Q = \message [323]).
Adding EN signal on $auto$ff.cc:262:slice$8176 ($_DFF_PN0_) from module md5 (D = \data_i [66], Q = \message [322]).
Adding EN signal on $auto$ff.cc:262:slice$8175 ($_DFF_PN0_) from module md5 (D = \data_i [65], Q = \message [321]).
Adding EN signal on $auto$ff.cc:262:slice$8174 ($_DFF_PN0_) from module md5 (D = \data_i [64], Q = \message [320]).
Adding EN signal on $auto$ff.cc:262:slice$8173 ($_DFF_PN0_) from module md5 (D = \data_i [63], Q = \message [319]).
Adding EN signal on $auto$ff.cc:262:slice$8172 ($_DFF_PN0_) from module md5 (D = \data_i [62], Q = \message [318]).
Adding EN signal on $auto$ff.cc:262:slice$8171 ($_DFF_PN0_) from module md5 (D = \data_i [61], Q = \message [317]).
Adding EN signal on $auto$ff.cc:262:slice$8170 ($_DFF_PN0_) from module md5 (D = \data_i [60], Q = \message [316]).
Adding EN signal on $auto$ff.cc:262:slice$8169 ($_DFF_PN0_) from module md5 (D = \data_i [59], Q = \message [315]).
Adding EN signal on $auto$ff.cc:262:slice$8168 ($_DFF_PN0_) from module md5 (D = \data_i [58], Q = \message [314]).
Adding EN signal on $auto$ff.cc:262:slice$8167 ($_DFF_PN0_) from module md5 (D = \data_i [57], Q = \message [313]).
Adding EN signal on $auto$ff.cc:262:slice$8166 ($_DFF_PN0_) from module md5 (D = \data_i [56], Q = \message [312]).
Adding EN signal on $auto$ff.cc:262:slice$8165 ($_DFF_PN0_) from module md5 (D = \data_i [55], Q = \message [311]).
Adding EN signal on $auto$ff.cc:262:slice$8164 ($_DFF_PN0_) from module md5 (D = \data_i [54], Q = \message [310]).
Adding EN signal on $auto$ff.cc:262:slice$8163 ($_DFF_PN0_) from module md5 (D = \data_i [53], Q = \message [309]).
Adding EN signal on $auto$ff.cc:262:slice$8162 ($_DFF_PN0_) from module md5 (D = \data_i [52], Q = \message [308]).
Adding EN signal on $auto$ff.cc:262:slice$8161 ($_DFF_PN0_) from module md5 (D = \data_i [51], Q = \message [307]).
Adding EN signal on $auto$ff.cc:262:slice$8160 ($_DFF_PN0_) from module md5 (D = \data_i [50], Q = \message [306]).
Adding EN signal on $auto$ff.cc:262:slice$8159 ($_DFF_PN0_) from module md5 (D = \data_i [49], Q = \message [305]).
Adding EN signal on $auto$ff.cc:262:slice$8158 ($_DFF_PN0_) from module md5 (D = \data_i [48], Q = \message [304]).
Adding EN signal on $auto$ff.cc:262:slice$8157 ($_DFF_PN0_) from module md5 (D = \data_i [47], Q = \message [303]).
Adding EN signal on $auto$ff.cc:262:slice$8156 ($_DFF_PN0_) from module md5 (D = \data_i [46], Q = \message [302]).
Adding EN signal on $auto$ff.cc:262:slice$8155 ($_DFF_PN0_) from module md5 (D = \data_i [45], Q = \message [301]).
Adding EN signal on $auto$ff.cc:262:slice$8154 ($_DFF_PN0_) from module md5 (D = \data_i [44], Q = \message [300]).
Adding EN signal on $auto$ff.cc:262:slice$8153 ($_DFF_PN0_) from module md5 (D = \data_i [43], Q = \message [299]).
Adding EN signal on $auto$ff.cc:262:slice$8152 ($_DFF_PN0_) from module md5 (D = \data_i [42], Q = \message [298]).
Adding EN signal on $auto$ff.cc:262:slice$8151 ($_DFF_PN0_) from module md5 (D = \data_i [41], Q = \message [297]).
Adding EN signal on $auto$ff.cc:262:slice$8150 ($_DFF_PN0_) from module md5 (D = \data_i [40], Q = \message [296]).
Adding EN signal on $auto$ff.cc:262:slice$8149 ($_DFF_PN0_) from module md5 (D = \data_i [39], Q = \message [295]).
Adding EN signal on $auto$ff.cc:262:slice$8148 ($_DFF_PN0_) from module md5 (D = \data_i [38], Q = \message [294]).
Adding EN signal on $auto$ff.cc:262:slice$8147 ($_DFF_PN0_) from module md5 (D = \data_i [37], Q = \message [293]).
Adding EN signal on $auto$ff.cc:262:slice$8146 ($_DFF_PN0_) from module md5 (D = \data_i [36], Q = \message [292]).
Adding EN signal on $auto$ff.cc:262:slice$8145 ($_DFF_PN0_) from module md5 (D = \data_i [35], Q = \message [291]).
Adding EN signal on $auto$ff.cc:262:slice$8144 ($_DFF_PN0_) from module md5 (D = \data_i [34], Q = \message [290]).
Adding EN signal on $auto$ff.cc:262:slice$8143 ($_DFF_PN0_) from module md5 (D = \data_i [33], Q = \message [289]).
Adding EN signal on $auto$ff.cc:262:slice$8142 ($_DFF_PN0_) from module md5 (D = \data_i [32], Q = \message [288]).
Adding EN signal on $auto$ff.cc:262:slice$8141 ($_DFF_PN0_) from module md5 (D = \data_i [31], Q = \message [287]).
Adding EN signal on $auto$ff.cc:262:slice$8140 ($_DFF_PN0_) from module md5 (D = \data_i [30], Q = \message [286]).
Adding EN signal on $auto$ff.cc:262:slice$8139 ($_DFF_PN0_) from module md5 (D = \data_i [29], Q = \message [285]).
Adding EN signal on $auto$ff.cc:262:slice$8138 ($_DFF_PN0_) from module md5 (D = \data_i [28], Q = \message [284]).
Adding EN signal on $auto$ff.cc:262:slice$8137 ($_DFF_PN0_) from module md5 (D = \data_i [27], Q = \message [283]).
Adding EN signal on $auto$ff.cc:262:slice$8136 ($_DFF_PN0_) from module md5 (D = \data_i [26], Q = \message [282]).
Adding EN signal on $auto$ff.cc:262:slice$8135 ($_DFF_PN0_) from module md5 (D = \data_i [25], Q = \message [281]).
Adding EN signal on $auto$ff.cc:262:slice$8134 ($_DFF_PN0_) from module md5 (D = \data_i [24], Q = \message [280]).
Adding EN signal on $auto$ff.cc:262:slice$8133 ($_DFF_PN0_) from module md5 (D = \data_i [23], Q = \message [279]).
Adding EN signal on $auto$ff.cc:262:slice$8132 ($_DFF_PN0_) from module md5 (D = \data_i [22], Q = \message [278]).
Adding EN signal on $auto$ff.cc:262:slice$8131 ($_DFF_PN0_) from module md5 (D = \data_i [21], Q = \message [277]).
Adding EN signal on $auto$ff.cc:262:slice$8130 ($_DFF_PN0_) from module md5 (D = \data_i [20], Q = \message [276]).
Adding EN signal on $auto$ff.cc:262:slice$8129 ($_DFF_PN0_) from module md5 (D = \data_i [19], Q = \message [275]).
Adding EN signal on $auto$ff.cc:262:slice$8128 ($_DFF_PN0_) from module md5 (D = \data_i [18], Q = \message [274]).
Adding EN signal on $auto$ff.cc:262:slice$8127 ($_DFF_PN0_) from module md5 (D = \data_i [17], Q = \message [273]).
Adding EN signal on $auto$ff.cc:262:slice$8126 ($_DFF_PN0_) from module md5 (D = \data_i [16], Q = \message [272]).
Adding EN signal on $auto$ff.cc:262:slice$8125 ($_DFF_PN0_) from module md5 (D = \data_i [15], Q = \message [271]).
Adding EN signal on $auto$ff.cc:262:slice$8124 ($_DFF_PN0_) from module md5 (D = \data_i [14], Q = \message [270]).
Adding EN signal on $auto$ff.cc:262:slice$8123 ($_DFF_PN0_) from module md5 (D = \data_i [13], Q = \message [269]).
Adding EN signal on $auto$ff.cc:262:slice$8122 ($_DFF_PN0_) from module md5 (D = \data_i [12], Q = \message [268]).
Adding EN signal on $auto$ff.cc:262:slice$8121 ($_DFF_PN0_) from module md5 (D = \data_i [11], Q = \message [267]).
Adding EN signal on $auto$ff.cc:262:slice$8120 ($_DFF_PN0_) from module md5 (D = \data_i [10], Q = \message [266]).
Adding EN signal on $auto$ff.cc:262:slice$8119 ($_DFF_PN0_) from module md5 (D = \data_i [9], Q = \message [265]).
Adding EN signal on $auto$ff.cc:262:slice$8118 ($_DFF_PN0_) from module md5 (D = \data_i [8], Q = \message [264]).
Adding EN signal on $auto$ff.cc:262:slice$8117 ($_DFF_PN0_) from module md5 (D = \data_i [7], Q = \message [263]).
Adding EN signal on $auto$ff.cc:262:slice$8116 ($_DFF_PN0_) from module md5 (D = \data_i [6], Q = \message [262]).
Adding EN signal on $auto$ff.cc:262:slice$8115 ($_DFF_PN0_) from module md5 (D = \data_i [5], Q = \message [261]).
Adding EN signal on $auto$ff.cc:262:slice$8114 ($_DFF_PN0_) from module md5 (D = \data_i [4], Q = \message [260]).
Adding EN signal on $auto$ff.cc:262:slice$8113 ($_DFF_PN0_) from module md5 (D = \data_i [3], Q = \message [259]).
Adding EN signal on $auto$ff.cc:262:slice$8112 ($_DFF_PN0_) from module md5 (D = \data_i [2], Q = \message [258]).
Adding EN signal on $auto$ff.cc:262:slice$8111 ($_DFF_PN0_) from module md5 (D = \data_i [1], Q = \message [257]).
Adding EN signal on $auto$ff.cc:262:slice$8110 ($_DFF_PN0_) from module md5 (D = \data_i [0], Q = \message [256]).
Adding EN signal on $auto$ff.cc:262:slice$8109 ($_DFF_PN0_) from module md5 (D = \data_i [127], Q = \message [255]).
Adding EN signal on $auto$ff.cc:262:slice$8108 ($_DFF_PN0_) from module md5 (D = \data_i [126], Q = \message [254]).
Adding EN signal on $auto$ff.cc:262:slice$8107 ($_DFF_PN0_) from module md5 (D = \data_i [125], Q = \message [253]).
Adding EN signal on $auto$ff.cc:262:slice$8106 ($_DFF_PN0_) from module md5 (D = \data_i [124], Q = \message [252]).
Adding EN signal on $auto$ff.cc:262:slice$8105 ($_DFF_PN0_) from module md5 (D = \data_i [123], Q = \message [251]).
Adding EN signal on $auto$ff.cc:262:slice$8104 ($_DFF_PN0_) from module md5 (D = \data_i [122], Q = \message [250]).
Adding EN signal on $auto$ff.cc:262:slice$8103 ($_DFF_PN0_) from module md5 (D = \data_i [121], Q = \message [249]).
Adding EN signal on $auto$ff.cc:262:slice$8102 ($_DFF_PN0_) from module md5 (D = \data_i [120], Q = \message [248]).
Adding EN signal on $auto$ff.cc:262:slice$8101 ($_DFF_PN0_) from module md5 (D = \data_i [119], Q = \message [247]).
Adding EN signal on $auto$ff.cc:262:slice$8100 ($_DFF_PN0_) from module md5 (D = \data_i [118], Q = \message [246]).
Adding EN signal on $auto$ff.cc:262:slice$8099 ($_DFF_PN0_) from module md5 (D = \data_i [117], Q = \message [245]).
Adding EN signal on $auto$ff.cc:262:slice$8098 ($_DFF_PN0_) from module md5 (D = \data_i [116], Q = \message [244]).
Adding EN signal on $auto$ff.cc:262:slice$8097 ($_DFF_PN0_) from module md5 (D = \data_i [115], Q = \message [243]).
Adding EN signal on $auto$ff.cc:262:slice$8096 ($_DFF_PN0_) from module md5 (D = \data_i [114], Q = \message [242]).
Adding EN signal on $auto$ff.cc:262:slice$8095 ($_DFF_PN0_) from module md5 (D = \data_i [113], Q = \message [241]).
Adding EN signal on $auto$ff.cc:262:slice$8094 ($_DFF_PN0_) from module md5 (D = \data_i [112], Q = \message [240]).
Adding EN signal on $auto$ff.cc:262:slice$8093 ($_DFF_PN0_) from module md5 (D = \data_i [111], Q = \message [239]).
Adding EN signal on $auto$ff.cc:262:slice$8092 ($_DFF_PN0_) from module md5 (D = \data_i [110], Q = \message [238]).
Adding EN signal on $auto$ff.cc:262:slice$8091 ($_DFF_PN0_) from module md5 (D = \data_i [109], Q = \message [237]).
Adding EN signal on $auto$ff.cc:262:slice$8090 ($_DFF_PN0_) from module md5 (D = \data_i [108], Q = \message [236]).
Adding EN signal on $auto$ff.cc:262:slice$8089 ($_DFF_PN0_) from module md5 (D = \data_i [107], Q = \message [235]).
Adding EN signal on $auto$ff.cc:262:slice$8088 ($_DFF_PN0_) from module md5 (D = \data_i [106], Q = \message [234]).
Adding EN signal on $auto$ff.cc:262:slice$8087 ($_DFF_PN0_) from module md5 (D = \data_i [105], Q = \message [233]).
Adding EN signal on $auto$ff.cc:262:slice$8086 ($_DFF_PN0_) from module md5 (D = \data_i [104], Q = \message [232]).
Adding EN signal on $auto$ff.cc:262:slice$8085 ($_DFF_PN0_) from module md5 (D = \data_i [103], Q = \message [231]).
Adding EN signal on $auto$ff.cc:262:slice$8084 ($_DFF_PN0_) from module md5 (D = \data_i [102], Q = \message [230]).
Adding EN signal on $auto$ff.cc:262:slice$8083 ($_DFF_PN0_) from module md5 (D = \data_i [101], Q = \message [229]).
Adding EN signal on $auto$ff.cc:262:slice$8082 ($_DFF_PN0_) from module md5 (D = \data_i [100], Q = \message [228]).
Adding EN signal on $auto$ff.cc:262:slice$8081 ($_DFF_PN0_) from module md5 (D = \data_i [99], Q = \message [227]).
Adding EN signal on $auto$ff.cc:262:slice$8080 ($_DFF_PN0_) from module md5 (D = \data_i [98], Q = \message [226]).
Adding EN signal on $auto$ff.cc:262:slice$8079 ($_DFF_PN0_) from module md5 (D = \data_i [97], Q = \message [225]).
Adding EN signal on $auto$ff.cc:262:slice$8078 ($_DFF_PN0_) from module md5 (D = \data_i [96], Q = \message [224]).
Adding EN signal on $auto$ff.cc:262:slice$8077 ($_DFF_PN0_) from module md5 (D = \data_i [95], Q = \message [223]).
Adding EN signal on $auto$ff.cc:262:slice$8076 ($_DFF_PN0_) from module md5 (D = \data_i [94], Q = \message [222]).
Adding EN signal on $auto$ff.cc:262:slice$8075 ($_DFF_PN0_) from module md5 (D = \data_i [93], Q = \message [221]).
Adding EN signal on $auto$ff.cc:262:slice$8074 ($_DFF_PN0_) from module md5 (D = \data_i [92], Q = \message [220]).
Adding EN signal on $auto$ff.cc:262:slice$8073 ($_DFF_PN0_) from module md5 (D = \data_i [91], Q = \message [219]).
Adding EN signal on $auto$ff.cc:262:slice$8072 ($_DFF_PN0_) from module md5 (D = \data_i [90], Q = \message [218]).
Adding EN signal on $auto$ff.cc:262:slice$8071 ($_DFF_PN0_) from module md5 (D = \data_i [89], Q = \message [217]).
Adding EN signal on $auto$ff.cc:262:slice$8070 ($_DFF_PN0_) from module md5 (D = \data_i [88], Q = \message [216]).
Adding EN signal on $auto$ff.cc:262:slice$8069 ($_DFF_PN0_) from module md5 (D = \data_i [87], Q = \message [215]).
Adding EN signal on $auto$ff.cc:262:slice$8068 ($_DFF_PN0_) from module md5 (D = \data_i [86], Q = \message [214]).
Adding EN signal on $auto$ff.cc:262:slice$8067 ($_DFF_PN0_) from module md5 (D = \data_i [85], Q = \message [213]).
Adding EN signal on $auto$ff.cc:262:slice$8066 ($_DFF_PN0_) from module md5 (D = \data_i [84], Q = \message [212]).
Adding EN signal on $auto$ff.cc:262:slice$8065 ($_DFF_PN0_) from module md5 (D = \data_i [83], Q = \message [211]).
Adding EN signal on $auto$ff.cc:262:slice$8064 ($_DFF_PN0_) from module md5 (D = \data_i [82], Q = \message [210]).
Adding EN signal on $auto$ff.cc:262:slice$8063 ($_DFF_PN0_) from module md5 (D = \data_i [81], Q = \message [209]).
Adding EN signal on $auto$ff.cc:262:slice$8062 ($_DFF_PN0_) from module md5 (D = \data_i [80], Q = \message [208]).
Adding EN signal on $auto$ff.cc:262:slice$8061 ($_DFF_PN0_) from module md5 (D = \data_i [79], Q = \message [207]).
Adding EN signal on $auto$ff.cc:262:slice$8060 ($_DFF_PN0_) from module md5 (D = \data_i [78], Q = \message [206]).
Adding EN signal on $auto$ff.cc:262:slice$8059 ($_DFF_PN0_) from module md5 (D = \data_i [77], Q = \message [205]).
Adding EN signal on $auto$ff.cc:262:slice$8058 ($_DFF_PN0_) from module md5 (D = \data_i [76], Q = \message [204]).
Adding EN signal on $auto$ff.cc:262:slice$8057 ($_DFF_PN0_) from module md5 (D = \data_i [75], Q = \message [203]).
Adding EN signal on $auto$ff.cc:262:slice$8056 ($_DFF_PN0_) from module md5 (D = \data_i [74], Q = \message [202]).
Adding EN signal on $auto$ff.cc:262:slice$8055 ($_DFF_PN0_) from module md5 (D = \data_i [73], Q = \message [201]).
Adding EN signal on $auto$ff.cc:262:slice$8054 ($_DFF_PN0_) from module md5 (D = \data_i [72], Q = \message [200]).
Adding EN signal on $auto$ff.cc:262:slice$8053 ($_DFF_PN0_) from module md5 (D = \data_i [71], Q = \message [199]).
Adding EN signal on $auto$ff.cc:262:slice$8052 ($_DFF_PN0_) from module md5 (D = \data_i [70], Q = \message [198]).
Adding EN signal on $auto$ff.cc:262:slice$8051 ($_DFF_PN0_) from module md5 (D = \data_i [69], Q = \message [197]).
Adding EN signal on $auto$ff.cc:262:slice$8050 ($_DFF_PN0_) from module md5 (D = \data_i [68], Q = \message [196]).
Adding EN signal on $auto$ff.cc:262:slice$8049 ($_DFF_PN0_) from module md5 (D = \data_i [67], Q = \message [195]).
Adding EN signal on $auto$ff.cc:262:slice$8048 ($_DFF_PN0_) from module md5 (D = \data_i [66], Q = \message [194]).
Adding EN signal on $auto$ff.cc:262:slice$8047 ($_DFF_PN0_) from module md5 (D = \data_i [65], Q = \message [193]).
Adding EN signal on $auto$ff.cc:262:slice$8046 ($_DFF_PN0_) from module md5 (D = \data_i [64], Q = \message [192]).
Adding EN signal on $auto$ff.cc:262:slice$8045 ($_DFF_PN0_) from module md5 (D = \data_i [63], Q = \message [191]).
Adding EN signal on $auto$ff.cc:262:slice$8044 ($_DFF_PN0_) from module md5 (D = \data_i [62], Q = \message [190]).
Adding EN signal on $auto$ff.cc:262:slice$8043 ($_DFF_PN0_) from module md5 (D = \data_i [61], Q = \message [189]).
Adding EN signal on $auto$ff.cc:262:slice$8042 ($_DFF_PN0_) from module md5 (D = \data_i [60], Q = \message [188]).
Adding EN signal on $auto$ff.cc:262:slice$8041 ($_DFF_PN0_) from module md5 (D = \data_i [59], Q = \message [187]).
Adding EN signal on $auto$ff.cc:262:slice$8040 ($_DFF_PN0_) from module md5 (D = \data_i [58], Q = \message [186]).
Adding EN signal on $auto$ff.cc:262:slice$8039 ($_DFF_PN0_) from module md5 (D = \data_i [57], Q = \message [185]).
Adding EN signal on $auto$ff.cc:262:slice$8038 ($_DFF_PN0_) from module md5 (D = \data_i [56], Q = \message [184]).
Adding EN signal on $auto$ff.cc:262:slice$8037 ($_DFF_PN0_) from module md5 (D = \data_i [55], Q = \message [183]).
Adding EN signal on $auto$ff.cc:262:slice$8036 ($_DFF_PN0_) from module md5 (D = \data_i [54], Q = \message [182]).
Adding EN signal on $auto$ff.cc:262:slice$8035 ($_DFF_PN0_) from module md5 (D = \data_i [53], Q = \message [181]).
Adding EN signal on $auto$ff.cc:262:slice$8034 ($_DFF_PN0_) from module md5 (D = \data_i [52], Q = \message [180]).
Adding EN signal on $auto$ff.cc:262:slice$8033 ($_DFF_PN0_) from module md5 (D = \data_i [51], Q = \message [179]).
Adding EN signal on $auto$ff.cc:262:slice$8032 ($_DFF_PN0_) from module md5 (D = \data_i [50], Q = \message [178]).
Adding EN signal on $auto$ff.cc:262:slice$8031 ($_DFF_PN0_) from module md5 (D = \data_i [49], Q = \message [177]).
Adding EN signal on $auto$ff.cc:262:slice$8030 ($_DFF_PN0_) from module md5 (D = \data_i [48], Q = \message [176]).
Adding EN signal on $auto$ff.cc:262:slice$8029 ($_DFF_PN0_) from module md5 (D = \data_i [47], Q = \message [175]).
Adding EN signal on $auto$ff.cc:262:slice$8028 ($_DFF_PN0_) from module md5 (D = \data_i [46], Q = \message [174]).
Adding EN signal on $auto$ff.cc:262:slice$8027 ($_DFF_PN0_) from module md5 (D = \data_i [45], Q = \message [173]).
Adding EN signal on $auto$ff.cc:262:slice$8026 ($_DFF_PN0_) from module md5 (D = \data_i [44], Q = \message [172]).
Adding EN signal on $auto$ff.cc:262:slice$8025 ($_DFF_PN0_) from module md5 (D = \data_i [43], Q = \message [171]).
Adding EN signal on $auto$ff.cc:262:slice$8024 ($_DFF_PN0_) from module md5 (D = \data_i [42], Q = \message [170]).
Adding EN signal on $auto$ff.cc:262:slice$8023 ($_DFF_PN0_) from module md5 (D = \data_i [41], Q = \message [169]).
Adding EN signal on $auto$ff.cc:262:slice$8022 ($_DFF_PN0_) from module md5 (D = \data_i [40], Q = \message [168]).
Adding EN signal on $auto$ff.cc:262:slice$8021 ($_DFF_PN0_) from module md5 (D = \data_i [39], Q = \message [167]).
Adding EN signal on $auto$ff.cc:262:slice$8020 ($_DFF_PN0_) from module md5 (D = \data_i [38], Q = \message [166]).
Adding EN signal on $auto$ff.cc:262:slice$8019 ($_DFF_PN0_) from module md5 (D = \data_i [37], Q = \message [165]).
Adding EN signal on $auto$ff.cc:262:slice$8018 ($_DFF_PN0_) from module md5 (D = \data_i [36], Q = \message [164]).
Adding EN signal on $auto$ff.cc:262:slice$8017 ($_DFF_PN0_) from module md5 (D = \data_i [35], Q = \message [163]).
Adding EN signal on $auto$ff.cc:262:slice$8016 ($_DFF_PN0_) from module md5 (D = \data_i [34], Q = \message [162]).
Adding EN signal on $auto$ff.cc:262:slice$8015 ($_DFF_PN0_) from module md5 (D = \data_i [33], Q = \message [161]).
Adding EN signal on $auto$ff.cc:262:slice$8014 ($_DFF_PN0_) from module md5 (D = \data_i [32], Q = \message [160]).
Adding EN signal on $auto$ff.cc:262:slice$8013 ($_DFF_PN0_) from module md5 (D = \data_i [31], Q = \message [159]).
Adding EN signal on $auto$ff.cc:262:slice$8012 ($_DFF_PN0_) from module md5 (D = \data_i [30], Q = \message [158]).
Adding EN signal on $auto$ff.cc:262:slice$8011 ($_DFF_PN0_) from module md5 (D = \data_i [29], Q = \message [157]).
Adding EN signal on $auto$ff.cc:262:slice$8010 ($_DFF_PN0_) from module md5 (D = \data_i [28], Q = \message [156]).
Adding EN signal on $auto$ff.cc:262:slice$8009 ($_DFF_PN0_) from module md5 (D = \data_i [27], Q = \message [155]).
Adding EN signal on $auto$ff.cc:262:slice$8008 ($_DFF_PN0_) from module md5 (D = \data_i [26], Q = \message [154]).
Adding EN signal on $auto$ff.cc:262:slice$8007 ($_DFF_PN0_) from module md5 (D = \data_i [25], Q = \message [153]).
Adding EN signal on $auto$ff.cc:262:slice$8006 ($_DFF_PN0_) from module md5 (D = \data_i [24], Q = \message [152]).
Adding EN signal on $auto$ff.cc:262:slice$8005 ($_DFF_PN0_) from module md5 (D = \data_i [23], Q = \message [151]).
Adding EN signal on $auto$ff.cc:262:slice$8004 ($_DFF_PN0_) from module md5 (D = \data_i [22], Q = \message [150]).
Adding EN signal on $auto$ff.cc:262:slice$8003 ($_DFF_PN0_) from module md5 (D = \data_i [21], Q = \message [149]).
Adding EN signal on $auto$ff.cc:262:slice$8002 ($_DFF_PN0_) from module md5 (D = \data_i [20], Q = \message [148]).
Adding EN signal on $auto$ff.cc:262:slice$8001 ($_DFF_PN0_) from module md5 (D = \data_i [19], Q = \message [147]).
Adding EN signal on $auto$ff.cc:262:slice$8000 ($_DFF_PN0_) from module md5 (D = \data_i [18], Q = \message [146]).
Adding EN signal on $auto$ff.cc:262:slice$7999 ($_DFF_PN0_) from module md5 (D = \data_i [17], Q = \message [145]).
Adding EN signal on $auto$ff.cc:262:slice$7998 ($_DFF_PN0_) from module md5 (D = \data_i [16], Q = \message [144]).
Adding EN signal on $auto$ff.cc:262:slice$7997 ($_DFF_PN0_) from module md5 (D = \data_i [15], Q = \message [143]).
Adding EN signal on $auto$ff.cc:262:slice$7996 ($_DFF_PN0_) from module md5 (D = \data_i [14], Q = \message [142]).
Adding EN signal on $auto$ff.cc:262:slice$7995 ($_DFF_PN0_) from module md5 (D = \data_i [13], Q = \message [141]).
Adding EN signal on $auto$ff.cc:262:slice$7994 ($_DFF_PN0_) from module md5 (D = \data_i [12], Q = \message [140]).
Adding EN signal on $auto$ff.cc:262:slice$7993 ($_DFF_PN0_) from module md5 (D = \data_i [11], Q = \message [139]).
Adding EN signal on $auto$ff.cc:262:slice$7992 ($_DFF_PN0_) from module md5 (D = \data_i [10], Q = \message [138]).
Adding EN signal on $auto$ff.cc:262:slice$7991 ($_DFF_PN0_) from module md5 (D = \data_i [9], Q = \message [137]).
Adding EN signal on $auto$ff.cc:262:slice$7990 ($_DFF_PN0_) from module md5 (D = \data_i [8], Q = \message [136]).
Adding EN signal on $auto$ff.cc:262:slice$7989 ($_DFF_PN0_) from module md5 (D = \data_i [7], Q = \message [135]).
Adding EN signal on $auto$ff.cc:262:slice$7988 ($_DFF_PN0_) from module md5 (D = \data_i [6], Q = \message [134]).
Adding EN signal on $auto$ff.cc:262:slice$7987 ($_DFF_PN0_) from module md5 (D = \data_i [5], Q = \message [133]).
Adding EN signal on $auto$ff.cc:262:slice$7986 ($_DFF_PN0_) from module md5 (D = \data_i [4], Q = \message [132]).
Adding EN signal on $auto$ff.cc:262:slice$7985 ($_DFF_PN0_) from module md5 (D = \data_i [3], Q = \message [131]).
Adding EN signal on $auto$ff.cc:262:slice$7984 ($_DFF_PN0_) from module md5 (D = \data_i [2], Q = \message [130]).
Adding EN signal on $auto$ff.cc:262:slice$7983 ($_DFF_PN0_) from module md5 (D = \data_i [1], Q = \message [129]).
Adding EN signal on $auto$ff.cc:262:slice$7982 ($_DFF_PN0_) from module md5 (D = \data_i [0], Q = \message [128]).
Adding EN signal on $auto$ff.cc:262:slice$7981 ($_DFF_PN0_) from module md5 (D = \data_i [127], Q = \message [127]).
Adding EN signal on $auto$ff.cc:262:slice$7980 ($_DFF_PN0_) from module md5 (D = \data_i [126], Q = \message [126]).
Adding EN signal on $auto$ff.cc:262:slice$7979 ($_DFF_PN0_) from module md5 (D = \data_i [125], Q = \message [125]).
Adding EN signal on $auto$ff.cc:262:slice$7978 ($_DFF_PN0_) from module md5 (D = \data_i [124], Q = \message [124]).
Adding EN signal on $auto$ff.cc:262:slice$7977 ($_DFF_PN0_) from module md5 (D = \data_i [123], Q = \message [123]).
Adding EN signal on $auto$ff.cc:262:slice$7976 ($_DFF_PN0_) from module md5 (D = \data_i [122], Q = \message [122]).
Adding EN signal on $auto$ff.cc:262:slice$7975 ($_DFF_PN0_) from module md5 (D = \data_i [121], Q = \message [121]).
Adding EN signal on $auto$ff.cc:262:slice$7974 ($_DFF_PN0_) from module md5 (D = \data_i [120], Q = \message [120]).
Adding EN signal on $auto$ff.cc:262:slice$7973 ($_DFF_PN0_) from module md5 (D = \data_i [119], Q = \message [119]).
Adding EN signal on $auto$ff.cc:262:slice$7972 ($_DFF_PN0_) from module md5 (D = \data_i [118], Q = \message [118]).
Adding EN signal on $auto$ff.cc:262:slice$7971 ($_DFF_PN0_) from module md5 (D = \data_i [117], Q = \message [117]).
Adding EN signal on $auto$ff.cc:262:slice$7970 ($_DFF_PN0_) from module md5 (D = \data_i [116], Q = \message [116]).
Adding EN signal on $auto$ff.cc:262:slice$7969 ($_DFF_PN0_) from module md5 (D = \data_i [115], Q = \message [115]).
Adding EN signal on $auto$ff.cc:262:slice$7968 ($_DFF_PN0_) from module md5 (D = \data_i [114], Q = \message [114]).
Adding EN signal on $auto$ff.cc:262:slice$7967 ($_DFF_PN0_) from module md5 (D = \data_i [113], Q = \message [113]).
Adding EN signal on $auto$ff.cc:262:slice$7966 ($_DFF_PN0_) from module md5 (D = \data_i [112], Q = \message [112]).
Adding EN signal on $auto$ff.cc:262:slice$7965 ($_DFF_PN0_) from module md5 (D = \data_i [111], Q = \message [111]).
Adding EN signal on $auto$ff.cc:262:slice$7964 ($_DFF_PN0_) from module md5 (D = \data_i [110], Q = \message [110]).
Adding EN signal on $auto$ff.cc:262:slice$7963 ($_DFF_PN0_) from module md5 (D = \data_i [109], Q = \message [109]).
Adding EN signal on $auto$ff.cc:262:slice$7962 ($_DFF_PN0_) from module md5 (D = \data_i [108], Q = \message [108]).
Adding EN signal on $auto$ff.cc:262:slice$7961 ($_DFF_PN0_) from module md5 (D = \data_i [107], Q = \message [107]).
Adding EN signal on $auto$ff.cc:262:slice$7960 ($_DFF_PN0_) from module md5 (D = \data_i [106], Q = \message [106]).
Adding EN signal on $auto$ff.cc:262:slice$7959 ($_DFF_PN0_) from module md5 (D = \data_i [105], Q = \message [105]).
Adding EN signal on $auto$ff.cc:262:slice$7958 ($_DFF_PN0_) from module md5 (D = \data_i [104], Q = \message [104]).
Adding EN signal on $auto$ff.cc:262:slice$7957 ($_DFF_PN0_) from module md5 (D = \data_i [103], Q = \message [103]).
Adding EN signal on $auto$ff.cc:262:slice$7956 ($_DFF_PN0_) from module md5 (D = \data_i [102], Q = \message [102]).
Adding EN signal on $auto$ff.cc:262:slice$7955 ($_DFF_PN0_) from module md5 (D = \data_i [101], Q = \message [101]).
Adding EN signal on $auto$ff.cc:262:slice$7954 ($_DFF_PN0_) from module md5 (D = \data_i [100], Q = \message [100]).
Adding EN signal on $auto$ff.cc:262:slice$7953 ($_DFF_PN0_) from module md5 (D = \data_i [99], Q = \message [99]).
Adding EN signal on $auto$ff.cc:262:slice$7952 ($_DFF_PN0_) from module md5 (D = \data_i [98], Q = \message [98]).
Adding EN signal on $auto$ff.cc:262:slice$7951 ($_DFF_PN0_) from module md5 (D = \data_i [97], Q = \message [97]).
Adding EN signal on $auto$ff.cc:262:slice$7950 ($_DFF_PN0_) from module md5 (D = \data_i [96], Q = \message [96]).
Adding EN signal on $auto$ff.cc:262:slice$7949 ($_DFF_PN0_) from module md5 (D = \data_i [95], Q = \message [95]).
Adding EN signal on $auto$ff.cc:262:slice$7948 ($_DFF_PN0_) from module md5 (D = \data_i [94], Q = \message [94]).
Adding EN signal on $auto$ff.cc:262:slice$7947 ($_DFF_PN0_) from module md5 (D = \data_i [93], Q = \message [93]).
Adding EN signal on $auto$ff.cc:262:slice$7946 ($_DFF_PN0_) from module md5 (D = \data_i [92], Q = \message [92]).
Adding EN signal on $auto$ff.cc:262:slice$7945 ($_DFF_PN0_) from module md5 (D = \data_i [91], Q = \message [91]).
Adding EN signal on $auto$ff.cc:262:slice$7944 ($_DFF_PN0_) from module md5 (D = \data_i [90], Q = \message [90]).
Adding EN signal on $auto$ff.cc:262:slice$7943 ($_DFF_PN0_) from module md5 (D = \data_i [89], Q = \message [89]).
Adding EN signal on $auto$ff.cc:262:slice$7942 ($_DFF_PN0_) from module md5 (D = \data_i [88], Q = \message [88]).
Adding EN signal on $auto$ff.cc:262:slice$7941 ($_DFF_PN0_) from module md5 (D = \data_i [87], Q = \message [87]).
Adding EN signal on $auto$ff.cc:262:slice$7940 ($_DFF_PN0_) from module md5 (D = \data_i [86], Q = \message [86]).
Adding EN signal on $auto$ff.cc:262:slice$7939 ($_DFF_PN0_) from module md5 (D = \data_i [85], Q = \message [85]).
Adding EN signal on $auto$ff.cc:262:slice$7938 ($_DFF_PN0_) from module md5 (D = \data_i [84], Q = \message [84]).
Adding EN signal on $auto$ff.cc:262:slice$7937 ($_DFF_PN0_) from module md5 (D = \data_i [83], Q = \message [83]).
Adding EN signal on $auto$ff.cc:262:slice$7936 ($_DFF_PN0_) from module md5 (D = \data_i [82], Q = \message [82]).
Adding EN signal on $auto$ff.cc:262:slice$7935 ($_DFF_PN0_) from module md5 (D = \data_i [81], Q = \message [81]).
Adding EN signal on $auto$ff.cc:262:slice$7934 ($_DFF_PN0_) from module md5 (D = \data_i [80], Q = \message [80]).
Adding EN signal on $auto$ff.cc:262:slice$7933 ($_DFF_PN0_) from module md5 (D = \data_i [79], Q = \message [79]).
Adding EN signal on $auto$ff.cc:262:slice$7932 ($_DFF_PN0_) from module md5 (D = \data_i [78], Q = \message [78]).
Adding EN signal on $auto$ff.cc:262:slice$7931 ($_DFF_PN0_) from module md5 (D = \data_i [77], Q = \message [77]).
Adding EN signal on $auto$ff.cc:262:slice$7930 ($_DFF_PN0_) from module md5 (D = \data_i [76], Q = \message [76]).
Adding EN signal on $auto$ff.cc:262:slice$7929 ($_DFF_PN0_) from module md5 (D = \data_i [75], Q = \message [75]).
Adding EN signal on $auto$ff.cc:262:slice$7928 ($_DFF_PN0_) from module md5 (D = \data_i [74], Q = \message [74]).
Adding EN signal on $auto$ff.cc:262:slice$7927 ($_DFF_PN0_) from module md5 (D = \data_i [73], Q = \message [73]).
Adding EN signal on $auto$ff.cc:262:slice$7926 ($_DFF_PN0_) from module md5 (D = \data_i [72], Q = \message [72]).
Adding EN signal on $auto$ff.cc:262:slice$7925 ($_DFF_PN0_) from module md5 (D = \data_i [71], Q = \message [71]).
Adding EN signal on $auto$ff.cc:262:slice$7924 ($_DFF_PN0_) from module md5 (D = \data_i [70], Q = \message [70]).
Adding EN signal on $auto$ff.cc:262:slice$7923 ($_DFF_PN0_) from module md5 (D = \data_i [69], Q = \message [69]).
Adding EN signal on $auto$ff.cc:262:slice$7922 ($_DFF_PN0_) from module md5 (D = \data_i [68], Q = \message [68]).
Adding EN signal on $auto$ff.cc:262:slice$7921 ($_DFF_PN0_) from module md5 (D = \data_i [67], Q = \message [67]).
Adding EN signal on $auto$ff.cc:262:slice$7920 ($_DFF_PN0_) from module md5 (D = \data_i [66], Q = \message [66]).
Adding EN signal on $auto$ff.cc:262:slice$7919 ($_DFF_PN0_) from module md5 (D = \data_i [65], Q = \message [65]).
Adding EN signal on $auto$ff.cc:262:slice$7918 ($_DFF_PN0_) from module md5 (D = \data_i [64], Q = \message [64]).
Adding EN signal on $auto$ff.cc:262:slice$7917 ($_DFF_PN0_) from module md5 (D = \data_i [63], Q = \message [63]).
Adding EN signal on $auto$ff.cc:262:slice$7916 ($_DFF_PN0_) from module md5 (D = \data_i [62], Q = \message [62]).
Adding EN signal on $auto$ff.cc:262:slice$7915 ($_DFF_PN0_) from module md5 (D = \data_i [61], Q = \message [61]).
Adding EN signal on $auto$ff.cc:262:slice$7914 ($_DFF_PN0_) from module md5 (D = \data_i [60], Q = \message [60]).
Adding EN signal on $auto$ff.cc:262:slice$7913 ($_DFF_PN0_) from module md5 (D = \data_i [59], Q = \message [59]).
Adding EN signal on $auto$ff.cc:262:slice$7912 ($_DFF_PN0_) from module md5 (D = \data_i [58], Q = \message [58]).
Adding EN signal on $auto$ff.cc:262:slice$7911 ($_DFF_PN0_) from module md5 (D = \data_i [57], Q = \message [57]).
Adding EN signal on $auto$ff.cc:262:slice$7910 ($_DFF_PN0_) from module md5 (D = \data_i [56], Q = \message [56]).
Adding EN signal on $auto$ff.cc:262:slice$7909 ($_DFF_PN0_) from module md5 (D = \data_i [55], Q = \message [55]).
Adding EN signal on $auto$ff.cc:262:slice$7908 ($_DFF_PN0_) from module md5 (D = \data_i [54], Q = \message [54]).
Adding EN signal on $auto$ff.cc:262:slice$7907 ($_DFF_PN0_) from module md5 (D = \data_i [53], Q = \message [53]).
Adding EN signal on $auto$ff.cc:262:slice$7906 ($_DFF_PN0_) from module md5 (D = \data_i [52], Q = \message [52]).
Adding EN signal on $auto$ff.cc:262:slice$7905 ($_DFF_PN0_) from module md5 (D = \data_i [51], Q = \message [51]).
Adding EN signal on $auto$ff.cc:262:slice$7904 ($_DFF_PN0_) from module md5 (D = \data_i [50], Q = \message [50]).
Adding EN signal on $auto$ff.cc:262:slice$7903 ($_DFF_PN0_) from module md5 (D = \data_i [49], Q = \message [49]).
Adding EN signal on $auto$ff.cc:262:slice$7902 ($_DFF_PN0_) from module md5 (D = \data_i [48], Q = \message [48]).
Adding EN signal on $auto$ff.cc:262:slice$7901 ($_DFF_PN0_) from module md5 (D = \data_i [47], Q = \message [47]).
Adding EN signal on $auto$ff.cc:262:slice$7900 ($_DFF_PN0_) from module md5 (D = \data_i [46], Q = \message [46]).
Adding EN signal on $auto$ff.cc:262:slice$7899 ($_DFF_PN0_) from module md5 (D = \data_i [45], Q = \message [45]).
Adding EN signal on $auto$ff.cc:262:slice$7898 ($_DFF_PN0_) from module md5 (D = \data_i [44], Q = \message [44]).
Adding EN signal on $auto$ff.cc:262:slice$7897 ($_DFF_PN0_) from module md5 (D = \data_i [43], Q = \message [43]).
Adding EN signal on $auto$ff.cc:262:slice$7896 ($_DFF_PN0_) from module md5 (D = \data_i [42], Q = \message [42]).
Adding EN signal on $auto$ff.cc:262:slice$7895 ($_DFF_PN0_) from module md5 (D = \data_i [41], Q = \message [41]).
Adding EN signal on $auto$ff.cc:262:slice$7894 ($_DFF_PN0_) from module md5 (D = \data_i [40], Q = \message [40]).
Adding EN signal on $auto$ff.cc:262:slice$7893 ($_DFF_PN0_) from module md5 (D = \data_i [39], Q = \message [39]).
Adding EN signal on $auto$ff.cc:262:slice$7892 ($_DFF_PN0_) from module md5 (D = \data_i [38], Q = \message [38]).
Adding EN signal on $auto$ff.cc:262:slice$7891 ($_DFF_PN0_) from module md5 (D = \data_i [37], Q = \message [37]).
Adding EN signal on $auto$ff.cc:262:slice$7890 ($_DFF_PN0_) from module md5 (D = \data_i [36], Q = \message [36]).
Adding EN signal on $auto$ff.cc:262:slice$7889 ($_DFF_PN0_) from module md5 (D = \data_i [35], Q = \message [35]).
Adding EN signal on $auto$ff.cc:262:slice$7888 ($_DFF_PN0_) from module md5 (D = \data_i [34], Q = \message [34]).
Adding EN signal on $auto$ff.cc:262:slice$7887 ($_DFF_PN0_) from module md5 (D = \data_i [33], Q = \message [33]).
Adding EN signal on $auto$ff.cc:262:slice$7886 ($_DFF_PN0_) from module md5 (D = \data_i [32], Q = \message [32]).
Adding EN signal on $auto$ff.cc:262:slice$7885 ($_DFF_PN0_) from module md5 (D = \data_i [31], Q = \message [31]).
Adding EN signal on $auto$ff.cc:262:slice$7884 ($_DFF_PN0_) from module md5 (D = \data_i [30], Q = \message [30]).
Adding EN signal on $auto$ff.cc:262:slice$7883 ($_DFF_PN0_) from module md5 (D = \data_i [29], Q = \message [29]).
Adding EN signal on $auto$ff.cc:262:slice$7882 ($_DFF_PN0_) from module md5 (D = \data_i [28], Q = \message [28]).
Adding EN signal on $auto$ff.cc:262:slice$7881 ($_DFF_PN0_) from module md5 (D = \data_i [27], Q = \message [27]).
Adding EN signal on $auto$ff.cc:262:slice$7880 ($_DFF_PN0_) from module md5 (D = \data_i [26], Q = \message [26]).
Adding EN signal on $auto$ff.cc:262:slice$7879 ($_DFF_PN0_) from module md5 (D = \data_i [25], Q = \message [25]).
Adding EN signal on $auto$ff.cc:262:slice$7878 ($_DFF_PN0_) from module md5 (D = \data_i [24], Q = \message [24]).
Adding EN signal on $auto$ff.cc:262:slice$7877 ($_DFF_PN0_) from module md5 (D = \data_i [23], Q = \message [23]).
Adding EN signal on $auto$ff.cc:262:slice$7876 ($_DFF_PN0_) from module md5 (D = \data_i [22], Q = \message [22]).
Adding EN signal on $auto$ff.cc:262:slice$7875 ($_DFF_PN0_) from module md5 (D = \data_i [21], Q = \message [21]).
Adding EN signal on $auto$ff.cc:262:slice$7874 ($_DFF_PN0_) from module md5 (D = \data_i [20], Q = \message [20]).
Adding EN signal on $auto$ff.cc:262:slice$7873 ($_DFF_PN0_) from module md5 (D = \data_i [19], Q = \message [19]).
Adding EN signal on $auto$ff.cc:262:slice$7872 ($_DFF_PN0_) from module md5 (D = \data_i [18], Q = \message [18]).
Adding EN signal on $auto$ff.cc:262:slice$7871 ($_DFF_PN0_) from module md5 (D = \data_i [17], Q = \message [17]).
Adding EN signal on $auto$ff.cc:262:slice$7870 ($_DFF_PN0_) from module md5 (D = \data_i [16], Q = \message [16]).
Adding EN signal on $auto$ff.cc:262:slice$7869 ($_DFF_PN0_) from module md5 (D = \data_i [15], Q = \message [15]).
Adding EN signal on $auto$ff.cc:262:slice$7868 ($_DFF_PN0_) from module md5 (D = \data_i [14], Q = \message [14]).
Adding EN signal on $auto$ff.cc:262:slice$7867 ($_DFF_PN0_) from module md5 (D = \data_i [13], Q = \message [13]).
Adding EN signal on $auto$ff.cc:262:slice$7866 ($_DFF_PN0_) from module md5 (D = \data_i [12], Q = \message [12]).
Adding EN signal on $auto$ff.cc:262:slice$7865 ($_DFF_PN0_) from module md5 (D = \data_i [11], Q = \message [11]).
Adding EN signal on $auto$ff.cc:262:slice$7864 ($_DFF_PN0_) from module md5 (D = \data_i [10], Q = \message [10]).
Adding EN signal on $auto$ff.cc:262:slice$7863 ($_DFF_PN0_) from module md5 (D = \data_i [9], Q = \message [9]).
Adding EN signal on $auto$ff.cc:262:slice$7862 ($_DFF_PN0_) from module md5 (D = \data_i [8], Q = \message [8]).
Adding EN signal on $auto$ff.cc:262:slice$7861 ($_DFF_PN0_) from module md5 (D = \data_i [7], Q = \message [7]).
Adding EN signal on $auto$ff.cc:262:slice$7860 ($_DFF_PN0_) from module md5 (D = \data_i [6], Q = \message [6]).
Adding EN signal on $auto$ff.cc:262:slice$7859 ($_DFF_PN0_) from module md5 (D = \data_i [5], Q = \message [5]).
Adding EN signal on $auto$ff.cc:262:slice$7858 ($_DFF_PN0_) from module md5 (D = \data_i [4], Q = \message [4]).
Adding EN signal on $auto$ff.cc:262:slice$7857 ($_DFF_PN0_) from module md5 (D = \data_i [3], Q = \message [3]).
Adding EN signal on $auto$ff.cc:262:slice$7856 ($_DFF_PN0_) from module md5 (D = \data_i [2], Q = \message [2]).
Adding EN signal on $auto$ff.cc:262:slice$7855 ($_DFF_PN0_) from module md5 (D = \data_i [1], Q = \message [1]).
Adding EN signal on $auto$ff.cc:262:slice$7854 ($_DFF_PN0_) from module md5 (D = \data_i [0], Q = \message [0]).

yosys> opt_clean

3.27.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \md5..
Removed 2048 unused cells and 525 unused wires.
<suppressed ~2050 debug messages>

yosys> opt_expr

3.27.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module md5.
<suppressed ~14 debug messages>

3.27.16. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.27.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \md5..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.27.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \md5.
Performed a total of 0 changes.

yosys> opt_merge

3.27.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\md5'.
<suppressed ~7668 debug messages>
Removed a total of 2556 cells.

yosys> opt_dff

3.27.20. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.27.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \md5..
Removed 0 unused cells and 2050 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.27.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module md5.

3.27.23. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.27.24. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \md5..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.27.25. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \md5.
Performed a total of 0 changes.

yosys> opt_merge

3.27.26. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\md5'.
Removed a total of 0 cells.

yosys> opt_dff

3.27.27. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.27.28. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \md5..

yosys> opt_expr

3.27.29. Executing OPT_EXPR pass (perform const folding).
Optimizing module md5.

3.27.30. Finished OPT passes. (There is nothing left to do.)

yosys> opt -fast -full

3.28. Executing OPT pass (performing simple optimizations).

yosys> opt_expr -full

3.28.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module md5.
<suppressed ~428 debug messages>

yosys> opt_merge

3.28.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\md5'.
<suppressed ~12 debug messages>
Removed a total of 4 cells.

yosys> opt_dff

3.28.3. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.28.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \md5..
Removed 0 unused cells and 10 unused wires.
<suppressed ~1 debug messages>

3.28.5. Finished fast OPT passes.

yosys> memory_map

3.29. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

yosys> opt -full

3.30. Executing OPT pass (performing simple optimizations).

yosys> opt_expr -full

3.30.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module md5.
<suppressed ~5 debug messages>

yosys> opt_merge -nomux

3.30.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\md5'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.30.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \md5..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce -full

3.30.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \md5.
Performed a total of 0 changes.

yosys> opt_merge

3.30.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\md5'.
Removed a total of 0 cells.

yosys> opt_share

3.30.6. Executing OPT_SHARE pass.

yosys> opt_dff

3.30.7. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.30.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \md5..

yosys> opt_expr -full

3.30.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module md5.

3.30.10. Finished OPT passes. (There is nothing left to do.)

yosys> techmap -map +/techmap.v

3.31. Executing TECHMAP pass (map to technology primitives).

3.31.1. Executing Verilog-2005 frontend: /home/users/meri/Documents/workspace/de-issue/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/meri/Documents/workspace/de-issue/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.31.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~71 debug messages>

yosys> opt -sat

3.32. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.32.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module md5.

yosys> opt_merge -nomux

3.32.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\md5'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.32.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \md5..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.32.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \md5.
Performed a total of 0 changes.

yosys> opt_merge

3.32.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\md5'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.32.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.32.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \md5..

yosys> opt_expr

3.32.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module md5.

3.32.9. Finished OPT passes. (There is nothing left to do.)

yosys> abc -dff

3.33. Executing ABC pass (technology mapping using ABC).

3.33.1. Summary of detected clock domains:
  459 cells in clk=\clk, en=$auto$opt_dff.cc:194:make_patterns_logic$319, arst=!\reset, srst={ }
  1954 cells in clk=\clk, en=$auto$opt_dff.cc:194:make_patterns_logic$322, arst=!\reset, srst={ }
  1763 cells in clk=\clk, en={ }, arst=!\reset, srst={ }
  35 cells in clk=\clk, en=$auto$opt_dff.cc:194:make_patterns_logic$316, arst=!\reset, srst={ }
  193 cells in clk=\clk, en=$auto$opt_dff.cc:219:make_patterns_logic$20901, arst=!\reset, srst={ }
  193 cells in clk=\clk, en=$auto$opt_dff.cc:219:make_patterns_logic$19367, arst=!\reset, srst={ }
  193 cells in clk=\clk, en=$auto$opt_dff.cc:219:make_patterns_logic$17831, arst=!\reset, srst={ }
  195 cells in clk=\clk, en=$auto$opt_dff.cc:219:make_patterns_logic$16041, arst=!\reset, srst={ }
  10 cells in clk=\clk, en=$auto$opt_dff.cc:219:make_patterns_logic$16025, arst=!\reset, srst={ }

3.33.2. Extracting gate netlist of module `\md5' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:194:make_patterns_logic$319, asynchronously reset by !\reset
Extracted 459 gates and 466 wires to a netlist network with 5 inputs and 52 outputs.

3.33.2.1. Executing ABC.

3.33.3. Extracting gate netlist of module `\md5' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:194:make_patterns_logic$322, asynchronously reset by !\reset
Extracted 1922 gates and 2355 wires to a netlist network with 432 inputs and 226 outputs.

3.33.3.1. Executing ABC.

3.33.4. Extracting gate netlist of module `\md5' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, asynchronously reset by !\reset
Extracted 1635 gates and 1995 wires to a netlist network with 358 inputs and 510 outputs.

3.33.4.1. Executing ABC.

3.33.5. Extracting gate netlist of module `\md5' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:194:make_patterns_logic$316, asynchronously reset by !\reset
Extracted 35 gates and 43 wires to a netlist network with 7 inputs and 8 outputs.

3.33.5.1. Executing ABC.

3.33.6. Extracting gate netlist of module `\md5' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:219:make_patterns_logic$20901, asynchronously reset by !\reset
Extracted 193 gates and 324 wires to a netlist network with 131 inputs and 65 outputs.

3.33.6.1. Executing ABC.

3.33.7. Extracting gate netlist of module `\md5' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:219:make_patterns_logic$19367, asynchronously reset by !\reset
Extracted 193 gates and 324 wires to a netlist network with 131 inputs and 65 outputs.

3.33.7.1. Executing ABC.

3.33.8. Extracting gate netlist of module `\md5' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:219:make_patterns_logic$17831, asynchronously reset by !\reset
Extracted 193 gates and 324 wires to a netlist network with 131 inputs and 65 outputs.

3.33.8.1. Executing ABC.

3.33.9. Extracting gate netlist of module `\md5' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:219:make_patterns_logic$16041, asynchronously reset by !\reset
Extracted 195 gates and 328 wires to a netlist network with 133 inputs and 67 outputs.

3.33.9.1. Executing ABC.

3.33.10. Extracting gate netlist of module `\md5' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:219:make_patterns_logic$16025, asynchronously reset by !\reset
Extracted 10 gates and 20 wires to a netlist network with 10 inputs and 2 outputs.

3.33.10.1. Executing ABC.

yosys> abc -dff

3.34. Executing ABC pass (technology mapping using ABC).

3.34.1. Summary of detected clock domains:
  249 cells in clk=\clk, en=$abc$22269$auto$opt_dff.cc:194:make_patterns_logic$319, arst=!\reset, srst={ }
  26 cells in clk=\clk, en=$abc$26356$auto$opt_dff.cc:194:make_patterns_logic$316, arst=!\reset, srst={ }
  2325 cells in clk=\clk, en=$abc$22916$auto$opt_dff.cc:194:make_patterns_logic$322, arst=!\reset, srst={ }
  194 cells in clk=\clk, en=$abc$27025$auto$opt_dff.cc:219:make_patterns_logic$17831, arst=!\reset, srst={ }
  192 cells in clk=\clk, en=$abc$26703$auto$opt_dff.cc:219:make_patterns_logic$19367, arst=!\reset, srst={ }
  193 cells in clk=\clk, en=$abc$26381$auto$opt_dff.cc:219:make_patterns_logic$20901, arst=!\reset, srst={ }
  1370 cells in clk=\clk, en={ }, arst=!\reset, srst={ }
  194 cells in clk=\clk, en=$abc$27347$auto$opt_dff.cc:219:make_patterns_logic$16041, arst=!\reset, srst={ }
  10 cells in clk=\clk, en=$abc$27671$auto$opt_dff.cc:219:make_patterns_logic$16025, arst=!\reset, srst={ }

3.34.2. Extracting gate netlist of module `\md5' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$22269$auto$opt_dff.cc:194:make_patterns_logic$319, asynchronously reset by !\reset
Extracted 249 gates and 254 wires to a netlist network with 5 inputs and 159 outputs.

3.34.2.1. Executing ABC.

3.34.3. Extracting gate netlist of module `\md5' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$26356$auto$opt_dff.cc:194:make_patterns_logic$316, asynchronously reset by !\reset
Extracted 26 gates and 33 wires to a netlist network with 7 inputs and 9 outputs.

3.34.3.1. Executing ABC.

3.34.4. Extracting gate netlist of module `\md5' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$22916$auto$opt_dff.cc:194:make_patterns_logic$322, asynchronously reset by !\reset
Extracted 2313 gates and 2904 wires to a netlist network with 591 inputs and 249 outputs.

3.34.4.1. Executing ABC.

3.34.5. Extracting gate netlist of module `\md5' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$27025$auto$opt_dff.cc:219:make_patterns_logic$17831, asynchronously reset by !\reset
Extracted 194 gates and 326 wires to a netlist network with 132 inputs and 66 outputs.

3.34.5.1. Executing ABC.

3.34.6. Extracting gate netlist of module `\md5' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$26703$auto$opt_dff.cc:219:make_patterns_logic$19367, asynchronously reset by !\reset
Extracted 192 gates and 321 wires to a netlist network with 129 inputs and 64 outputs.

3.34.6.1. Executing ABC.

3.34.7. Extracting gate netlist of module `\md5' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$26381$auto$opt_dff.cc:219:make_patterns_logic$20901, asynchronously reset by !\reset
Extracted 193 gates and 324 wires to a netlist network with 131 inputs and 65 outputs.

3.34.7.1. Executing ABC.

3.34.8. Extracting gate netlist of module `\md5' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, asynchronously reset by !\reset
Extracted 1222 gates and 1608 wires to a netlist network with 386 inputs and 410 outputs.

3.34.8.1. Executing ABC.

3.34.9. Extracting gate netlist of module `\md5' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$27347$auto$opt_dff.cc:219:make_patterns_logic$16041, asynchronously reset by !\reset
Extracted 194 gates and 326 wires to a netlist network with 132 inputs and 66 outputs.

3.34.9.1. Executing ABC.

3.34.10. Extracting gate netlist of module `\md5' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$27671$auto$opt_dff.cc:219:make_patterns_logic$16025, asynchronously reset by !\reset
Extracted 10 gates and 20 wires to a netlist network with 10 inputs and 2 outputs.

3.34.10.1. Executing ABC.

yosys> abc -dff

3.35. Executing ABC pass (technology mapping using ABC).

3.35.1. Summary of detected clock domains:
  206 cells in clk=\clk, en=$abc$27682$abc$22269$auto$opt_dff.cc:194:make_patterns_logic$319, arst=!\reset, srst={ }
  23 cells in clk=\clk, en=$abc$27942$abc$26356$auto$opt_dff.cc:194:make_patterns_logic$316, arst=!\reset, srst={ }
  194 cells in clk=\clk, en=$abc$31341$abc$26703$auto$opt_dff.cc:219:make_patterns_logic$19367, arst=!\reset, srst={ }
  194 cells in clk=\clk, en=$abc$30375$abc$27025$auto$opt_dff.cc:219:make_patterns_logic$17831, arst=!\reset, srst={ }
  2412 cells in clk=\clk, en=$abc$27968$abc$22916$auto$opt_dff.cc:194:make_patterns_logic$322, arst=!\reset, srst={ }
  193 cells in clk=\clk, en=$abc$31019$abc$26381$auto$opt_dff.cc:219:make_patterns_logic$20901, arst=!\reset, srst={ }
  1415 cells in clk=\clk, en={ }, arst=!\reset, srst={ }
  195 cells in clk=\clk, en=$abc$32786$abc$27347$auto$opt_dff.cc:219:make_patterns_logic$16041, arst=!\reset, srst={ }
  11 cells in clk=\clk, en=$abc$33109$abc$27671$auto$opt_dff.cc:219:make_patterns_logic$16025, arst=!\reset, srst={ }

3.35.2. Extracting gate netlist of module `\md5' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$27682$abc$22269$auto$opt_dff.cc:194:make_patterns_logic$319, asynchronously reset by !\reset
Extracted 206 gates and 211 wires to a netlist network with 5 inputs and 142 outputs.

3.35.2.1. Executing ABC.

3.35.3. Extracting gate netlist of module `\md5' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$27942$abc$26356$auto$opt_dff.cc:194:make_patterns_logic$316, asynchronously reset by !\reset
Extracted 23 gates and 30 wires to a netlist network with 7 inputs and 8 outputs.

3.35.3.1. Executing ABC.

3.35.4. Extracting gate netlist of module `\md5' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$31341$abc$26703$auto$opt_dff.cc:219:make_patterns_logic$19367, asynchronously reset by !\reset
Extracted 194 gates and 326 wires to a netlist network with 132 inputs and 66 outputs.

3.35.4.1. Executing ABC.

3.35.5. Extracting gate netlist of module `\md5' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$30375$abc$27025$auto$opt_dff.cc:219:make_patterns_logic$17831, asynchronously reset by !\reset
Extracted 194 gates and 326 wires to a netlist network with 132 inputs and 66 outputs.

3.35.5.1. Executing ABC.

3.35.6. Extracting gate netlist of module `\md5' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$27968$abc$22916$auto$opt_dff.cc:194:make_patterns_logic$322, asynchronously reset by !\reset
Extracted 2395 gates and 2947 wires to a netlist network with 552 inputs and 270 outputs.

3.35.6.1. Executing ABC.

3.35.7. Extracting gate netlist of module `\md5' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$31019$abc$26381$auto$opt_dff.cc:219:make_patterns_logic$20901, asynchronously reset by !\reset
Extracted 193 gates and 324 wires to a netlist network with 131 inputs and 65 outputs.

3.35.7.1. Executing ABC.

3.35.8. Extracting gate netlist of module `\md5' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, asynchronously reset by !\reset
Extracted 1272 gates and 1724 wires to a netlist network with 452 inputs and 469 outputs.

3.35.8.1. Executing ABC.

3.35.9. Extracting gate netlist of module `\md5' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$32786$abc$27347$auto$opt_dff.cc:219:make_patterns_logic$16041, asynchronously reset by !\reset
Extracted 195 gates and 328 wires to a netlist network with 133 inputs and 66 outputs.

3.35.9.1. Executing ABC.

3.35.10. Extracting gate netlist of module `\md5' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$33109$abc$27671$auto$opt_dff.cc:219:make_patterns_logic$16025, asynchronously reset by !\reset
Extracted 11 gates and 21 wires to a netlist network with 10 inputs and 2 outputs.

3.35.10.1. Executing ABC.

yosys> abc -dff

3.36. Executing ABC pass (technology mapping using ABC).

3.36.1. Summary of detected clock domains:
  202 cells in clk=\clk, en=$abc$33120$abc$27682$abc$22269$auto$opt_dff.cc:194:make_patterns_logic$319, arst=!\reset, srst={ }
  193 cells in clk=\clk, en=$abc$36534$abc$31019$abc$26381$auto$opt_dff.cc:219:make_patterns_logic$20901, arst=!\reset, srst={ }
  21 cells in clk=\clk, en=$abc$33328$abc$27942$abc$26356$auto$opt_dff.cc:194:make_patterns_logic$316, arst=!\reset, srst={ }
  194 cells in clk=\clk, en=$abc$33351$abc$31341$abc$26703$auto$opt_dff.cc:219:make_patterns_logic$19367, arst=!\reset, srst={ }
  194 cells in clk=\clk, en=$abc$33674$abc$30375$abc$27025$auto$opt_dff.cc:219:make_patterns_logic$17831, arst=!\reset, srst={ }
  2518 cells in clk=\clk, en=$abc$33997$abc$27968$abc$22916$auto$opt_dff.cc:194:make_patterns_logic$322, arst=!\reset, srst={ }
  1375 cells in clk=\clk, en={ }, arst=!\reset, srst={ }
  195 cells in clk=\clk, en=$abc$38331$abc$32786$abc$27347$auto$opt_dff.cc:219:make_patterns_logic$16041, arst=!\reset, srst={ }
  10 cells in clk=\clk, en=$abc$38655$abc$33109$abc$27671$auto$opt_dff.cc:219:make_patterns_logic$16025, arst=!\reset, srst={ }

3.36.2. Extracting gate netlist of module `\md5' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$33120$abc$27682$abc$22269$auto$opt_dff.cc:194:make_patterns_logic$319, asynchronously reset by !\reset
Extracted 202 gates and 208 wires to a netlist network with 6 inputs and 139 outputs.

3.36.2.1. Executing ABC.

3.36.3. Extracting gate netlist of module `\md5' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$36534$abc$31019$abc$26381$auto$opt_dff.cc:219:make_patterns_logic$20901, asynchronously reset by !\reset
Extracted 193 gates and 324 wires to a netlist network with 131 inputs and 65 outputs.

3.36.3.1. Executing ABC.

3.36.4. Extracting gate netlist of module `\md5' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$33328$abc$27942$abc$26356$auto$opt_dff.cc:194:make_patterns_logic$316, asynchronously reset by !\reset
Extracted 21 gates and 28 wires to a netlist network with 7 inputs and 8 outputs.

3.36.4.1. Executing ABC.

3.36.5. Extracting gate netlist of module `\md5' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$33351$abc$31341$abc$26703$auto$opt_dff.cc:219:make_patterns_logic$19367, asynchronously reset by !\reset
Extracted 194 gates and 326 wires to a netlist network with 132 inputs and 66 outputs.

3.36.5.1. Executing ABC.

3.36.6. Extracting gate netlist of module `\md5' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$33674$abc$30375$abc$27025$auto$opt_dff.cc:219:make_patterns_logic$17831, asynchronously reset by !\reset
Extracted 194 gates and 326 wires to a netlist network with 132 inputs and 66 outputs.

3.36.6.1. Executing ABC.

3.36.7. Extracting gate netlist of module `\md5' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$33997$abc$27968$abc$22916$auto$opt_dff.cc:194:make_patterns_logic$322, asynchronously reset by !\reset
Extracted 2502 gates and 3079 wires to a netlist network with 577 inputs and 246 outputs.

3.36.7.1. Executing ABC.

3.36.8. Extracting gate netlist of module `\md5' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, asynchronously reset by !\reset
Extracted 1231 gates and 1623 wires to a netlist network with 392 inputs and 463 outputs.

3.36.8.1. Executing ABC.

3.36.9. Extracting gate netlist of module `\md5' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$38331$abc$32786$abc$27347$auto$opt_dff.cc:219:make_patterns_logic$16041, asynchronously reset by !\reset
Extracted 195 gates and 328 wires to a netlist network with 133 inputs and 66 outputs.

3.36.9.1. Executing ABC.

3.36.10. Extracting gate netlist of module `\md5' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$38655$abc$33109$abc$27671$auto$opt_dff.cc:219:make_patterns_logic$16025, asynchronously reset by !\reset
Extracted 10 gates and 20 wires to a netlist network with 10 inputs and 3 outputs.

3.36.10.1. Executing ABC.

yosys> opt_ffinv

3.37. Executing OPT_FFINV pass (push inverters through FFs).
Discovering LUTs.
Pushed 0 inverters.

yosys> opt -sat

3.38. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.38.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module md5.
<suppressed ~152 debug messages>

yosys> opt_merge -nomux

3.38.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\md5'.
<suppressed ~18 debug messages>
Removed a total of 6 cells.

yosys> opt_muxtree

3.38.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \md5..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.38.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \md5.
Performed a total of 0 changes.

yosys> opt_merge

3.38.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\md5'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.38.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.38.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \md5..
Removed 1 unused cells and 23851 unused wires.
<suppressed ~41 debug messages>

yosys> opt_expr

3.38.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module md5.

3.38.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.38.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \md5..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.38.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \md5.
Performed a total of 0 changes.

yosys> opt_merge

3.38.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\md5'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.38.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.38.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \md5..

yosys> opt_expr

3.38.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module md5.

3.38.16. Finished OPT passes. (There is nothing left to do.)

yosys> abc -script /tmp/yosys_kqSb3W/abc_tmp_1.scr

3.39. Executing ABC pass (technology mapping using ABC).

3.39.1. Extracting gate netlist of module `\md5' to `<abc-temp-dir>/input.blif'..
Extracted 3910 gates and 4848 wires to a netlist network with 938 inputs and 634 outputs.

3.39.1.1. Executing ABC.
DE:   #PIs = 938  #Luts =  1279  Max Lvl =  41  Avg Lvl =   3.89  [   0.31 sec. at Pass 0]
DE:   #PIs = 938  #Luts =  1202  Max Lvl =  38  Avg Lvl =   3.89  [  25.63 sec. at Pass 1]
DE:   #PIs = 938  #Luts =  1142  Max Lvl =  27  Avg Lvl =   2.84  [   4.08 sec. at Pass 2]
DE:   #PIs = 938  #Luts =  1139  Max Lvl =  28  Avg Lvl =   2.64  [   9.10 sec. at Pass 3]
DE:   #PIs = 938  #Luts =  1130  Max Lvl =  27  Avg Lvl =   2.77  [   4.48 sec. at Pass 4]
DE:   #PIs = 938  #Luts =  1129  Max Lvl =  30  Avg Lvl =   2.98  [  10.15 sec. at Pass 5]
DE:   #PIs = 938  #Luts =  1125  Max Lvl =  28  Avg Lvl =   3.07  [   4.81 sec. at Pass 6]
DE:   #PIs = 938  #Luts =  1125  Max Lvl =  27  Avg Lvl =   2.80  [   9.24 sec. at Pass 7]
DE:   #PIs = 938  #Luts =  1121  Max Lvl =  27  Avg Lvl =   3.03  [   4.75 sec. at Pass 8]
DE:   #PIs = 938  #Luts =  1121  Max Lvl =  27  Avg Lvl =   3.03  [   8.74 sec. at Pass 9]
DE:   #PIs = 938  #Luts =  1120  Max Lvl =  27  Avg Lvl =   2.82  [   4.44 sec. at Pass 10]
DE:   #PIs = 938  #Luts =  1120  Max Lvl =  27  Avg Lvl =   2.82  [   9.63 sec. at Pass 11]
DE:   #PIs = 938  #Luts =  1119  Max Lvl =  28  Avg Lvl =   2.88  [   4.44 sec. at Pass 12]
DE:   #PIs = 938  #Luts =  1119  Max Lvl =  27  Avg Lvl =   3.00  [   8.09 sec. at Pass 13]
DE:   #PIs = 938  #Luts =  1117  Max Lvl =  27  Avg Lvl =   2.85  [   5.28 sec. at Pass 14]
DE:   #PIs = 938  #Luts =  1117  Max Lvl =  27  Avg Lvl =   2.85  [   8.90 sec. at Pass 15]
DE:   #PIs = 938  #Luts =  1117  Max Lvl =  27  Avg Lvl =   2.85  [   5.49 sec. at Pass 16]
DE:   #PIs = 938  #Luts =  1117  Max Lvl =  27  Avg Lvl =   2.85  [   8.12 sec. at Pass 17]
DE:   #PIs = 938  #Luts =  1116  Max Lvl =  26  Avg Lvl =   2.74  [   0.95 sec. at Pass 18]

yosys> opt

3.40. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.40.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module md5.

yosys> opt_merge -nomux

3.40.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\md5'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.40.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \md5..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.40.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \md5.
Performed a total of 0 changes.

yosys> opt_merge

3.40.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\md5'.
Removed a total of 0 cells.

yosys> opt_dff

3.40.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.40.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \md5..
Removed 0 unused cells and 4811 unused wires.
<suppressed ~6 debug messages>

yosys> opt_expr

3.40.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module md5.

3.40.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.40.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \md5..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.40.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \md5.
Performed a total of 0 changes.

yosys> opt_merge

3.40.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\md5'.
Removed a total of 0 cells.

yosys> opt_dff

3.40.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.40.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \md5..

yosys> opt_expr

3.40.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module md5.

3.40.16. Finished OPT passes. (There is nothing left to do.)

yosys> opt_ffinv

3.41. Executing OPT_FFINV pass (push inverters through FFs).
Discovering LUTs.
Pushed 1 inverters.

yosys> stat

3.42. Printing statistics.

=== md5 ===

   Number of wires:               1632
   Number of wire bits:           2592
   Number of public wires:          20
   Number of public wire bits:     665
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               2186
     $_DFFE_PN0P_                  649
     $_DFFE_PN1P_                    1
     $_DFF_PN0_                    260
     $lut                         1116
     adder_carry                   160


yosys> shregmap -minlen 8 -maxlen 20

3.43. Executing SHREGMAP pass (map shift registers).
Converted 0 dff cells into 0 shift registers.

yosys> dfflegalize -cell $_DFF_?_ 0 -cell $_DFF_???_ 0 -cell $_DFFE_????_ 0 -cell $_DFFSR_???_ 0 -cell $_DFFSRE_????_ 0 -cell $_DLATCHSR_PPP_ 0

3.44. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

yosys> stat

3.45. Printing statistics.

=== md5 ===

   Number of wires:               1632
   Number of wire bits:           2592
   Number of public wires:          20
   Number of public wire bits:     665
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               2186
     $_DFFE_PN0P_                  649
     $_DFFE_PN1P_                    1
     $_DFF_PN0_                    260
     $lut                         1116
     adder_carry                   160


yosys> techmap -map +/techmap.v -map +/rapidsilicon/genesis/ffs_map.v

3.46. Executing TECHMAP pass (map to technology primitives).

3.46.1. Executing Verilog-2005 frontend: /home/users/meri/Documents/workspace/de-issue/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/meri/Documents/workspace/de-issue/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.46.2. Executing Verilog-2005 frontend: /home/users/meri/Documents/workspace/de-issue/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/ffs_map.v
Parsing Verilog input from `/home/users/meri/Documents/workspace/de-issue/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/ffs_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP0N_'.
Generating RTLIL representation for module `\$_DFFE_PN0P_'.
Generating RTLIL representation for module `\$_DFFE_PN0N_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP1N_'.
Generating RTLIL representation for module `\$_DFFE_PN1P_'.
Generating RTLIL representation for module `\$_DFFE_PN1N_'.
Generating RTLIL representation for module `\$_DFFSR_PPP_'.
Generating RTLIL representation for module `\$_DFFSR_PNP_'.
Generating RTLIL representation for module `\$_DFFSR_PNN_'.
Generating RTLIL representation for module `\$_DFFSR_PPN_'.
Generating RTLIL representation for module `\$_DFFSR_NPP_'.
Generating RTLIL representation for module `\$_DFFSR_NNP_'.
Generating RTLIL representation for module `\$_DFFSR_NNN_'.
Generating RTLIL representation for module `\$_DFFSR_NPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PNPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPNP_'.
Generating RTLIL representation for module `\$_DFFSRE_PNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PNPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PPNN_'.
Generating RTLIL representation for module `\$_DFFSRE_PNNN_'.
Generating RTLIL representation for module `\$_DLATCHSR_PPP_'.
Generating RTLIL representation for module `\$_DLATCHSR_NPP_'.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP0N_'.
Generating RTLIL representation for module `\$_DFFE_NN0P_'.
Generating RTLIL representation for module `\$_DFFE_NN0N_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_NP1N_'.
Generating RTLIL representation for module `\$_DFFE_NN1P_'.
Generating RTLIL representation for module `\$_DFFE_NN1N_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNPP_'.
Generating RTLIL representation for module `\$_DFFSRE_NPNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPN_'.
Generating RTLIL representation for module `\$_DFFSRE_NNPN_'.
Generating RTLIL representation for module `\$_DFFSRE_NPNN_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNN_'.
Generating RTLIL representation for module `\$__SHREG_DFF_P_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PN0_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NN0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFF_PN1_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_NN1_'.
Successfully finished Verilog frontend.

3.46.3. Continuing TECHMAP pass.
Using template \$_DFFE_PN0P_ for cells of type $_DFFE_PN0P_.
Using template \$_DFF_PN0_ for cells of type $_DFF_PN0_.
Using extmapper simplemap for cells of type $lut.
Using template \$_DFFE_PN1P_ for cells of type $_DFFE_PN1P_.
No more expansions possible.
<suppressed ~2162 debug messages>

yosys> opt_expr -mux_undef

3.47. Executing OPT_EXPR pass (perform const folding).
Optimizing module md5.
<suppressed ~21450 debug messages>

yosys> simplemap

3.48. Executing SIMPLEMAP pass (map simple cells to gate primitives).

yosys> opt_expr

3.49. Executing OPT_EXPR pass (perform const folding).
Optimizing module md5.

yosys> opt_merge

3.50. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\md5'.
<suppressed ~10770 debug messages>
Removed a total of 3590 cells.

yosys> opt_dff -nodffe -nosdff

3.51. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.52. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \md5..
Removed 1 unused cells and 6705 unused wires.
<suppressed ~2 debug messages>

yosys> opt -nodffe -nosdff

3.53. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.53.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module md5.
<suppressed ~611 debug messages>

yosys> opt_merge -nomux

3.53.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\md5'.
<suppressed ~45 debug messages>
Removed a total of 15 cells.

yosys> opt_muxtree

3.53.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \md5..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.53.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \md5.
Performed a total of 0 changes.

yosys> opt_merge

3.53.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\md5'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.53.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.53.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \md5..
Removed 0 unused cells and 304 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.53.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module md5.

3.53.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.53.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \md5..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.53.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \md5.
Performed a total of 0 changes.

yosys> opt_merge

3.53.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\md5'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.53.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.53.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \md5..

yosys> opt_expr

3.53.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module md5.

3.53.16. Finished OPT passes. (There is nothing left to do.)

yosys> abc -script /tmp/yosys_kqSb3W/abc_tmp_2.scr

3.54. Executing ABC pass (technology mapping using ABC).

3.54.1. Extracting gate netlist of module `\md5' to `<abc-temp-dir>/input.blif'..
Extracted 4387 gates and 5327 wires to a netlist network with 938 inputs and 633 outputs.

3.54.1.1. Executing ABC.
DE:   #PIs = 938  #Luts =  1136  Max Lvl =  26  Avg Lvl =   2.75  [   0.83 sec. at Pass 0]
DE:   #PIs = 938  #Luts =  1136  Max Lvl =  26  Avg Lvl =   2.75  [  23.90 sec. at Pass 1]
DE:   #PIs = 938  #Luts =  1112  Max Lvl =  27  Avg Lvl =   2.82  [   3.64 sec. at Pass 2]
DE:   #PIs = 938  #Luts =  1112  Max Lvl =  27  Avg Lvl =   2.82  [   8.01 sec. at Pass 3]
DE:   #PIs = 938  #Luts =  1112  Max Lvl =  27  Avg Lvl =   2.82  [   6.18 sec. at Pass 4]
DE:   #PIs = 938  #Luts =  1112  Max Lvl =  27  Avg Lvl =   2.82  [  11.97 sec. at Pass 5]
DE:   #PIs = 938  #Luts =  1112  Max Lvl =  27  Avg Lvl =   2.82  [   1.01 sec. at Pass 6]

yosys> opt

3.55. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.55.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module md5.

yosys> opt_merge -nomux

3.55.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\md5'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.55.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \md5..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.55.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \md5.
Performed a total of 0 changes.

yosys> opt_merge

3.55.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\md5'.
Removed a total of 0 cells.

yosys> opt_dff

3.55.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.55.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \md5..
Removed 0 unused cells and 3765 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.55.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module md5.

3.55.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.55.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \md5..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.55.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \md5.
Performed a total of 0 changes.

yosys> opt_merge

3.55.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\md5'.
Removed a total of 0 cells.

yosys> opt_dff

3.55.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.55.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \md5..

yosys> opt_expr

3.55.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module md5.

3.55.16. Finished OPT passes. (There is nothing left to do.)

yosys> hierarchy -check

3.56. Executing HIERARCHY pass (managing design hierarchy).

3.56.1. Analyzing design hierarchy..
Top module:  \md5

3.56.2. Analyzing design hierarchy..
Top module:  \md5
Removed 0 unused modules.

yosys> stat

3.57. Printing statistics.

=== md5 ===

   Number of wires:               1628
   Number of wire bits:           2588
   Number of public wires:          20
   Number of public wire bits:     665
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               2182
     $lut                         1112
     adder_carry                   160
     dffsre                        910


yosys> opt_clean -purge

3.58. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \md5..
Removed 0 unused cells and 3 unused wires.
<suppressed ~3 debug messages>

yosys> write_verilog -noattr -nohex synthesized.v

3.59. Executing Verilog backend.

yosys> bmuxmap

3.59.1. Executing BMUXMAP pass.

yosys> demuxmap

3.59.2. Executing DEMUXMAP pass.

yosys> clean_zerowidth
Dumping module `\md5'.

Warnings: 4 unique messages, 4 total
End of script. Logfile hash: 9f678400e3, CPU: user 44.11s system 0.59s, MEM: 85.43 MB peak
Yosys 0.16+65 (git sha1 7987105a9, gcc 9.1.0 -fPIC -Os)
Time spent: 95% 6x abc (929 sec), 1% 27x opt_dff (18 sec), ...
real 282.24
user 900.60
sys 70.35
