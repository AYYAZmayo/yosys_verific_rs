
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys-Verific 0.0.49
 Yosys 0.18+10 (git sha1 7a7a25778, gcc 9.1.0 -fPIC -Os)


-- Executing script file `yosys.ys' --
echo on

yosys> plugin -i synth-rs

yosys> read -verific

yosys> read -incdir .

yosys> verific -vlog-incdir .

1. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific May22_SW_Release, released at Wed Jun  1 05:39:28 2022.

yosys> verilog_defaults -add -I.

yosys> read -vlog2k md5.v

yosys> verific -vlog2k md5.v

2. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific May22_SW_Release, released at Wed Jun  1 05:39:28 2022.
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'md5.v'

yosys> synth_rs -top md5 -tech genesis -goal area -de -no_dsp -no_bram -verilog synthesized.v

3. Executing synth_rs pass: v0.4.58

yosys> read_verilog -lib -specify -nomem2reg +/rapidsilicon/common/cells_sim.v +/rapidsilicon/genesis/cells_sim.v

3.1. Executing Verilog-2005 frontend: /home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v
Parsing Verilog input from `/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\inv'.
Generating RTLIL representation for module `\buff'.
Generating RTLIL representation for module `\logic_0'.
Generating RTLIL representation for module `\logic_1'.
Generating RTLIL representation for module `\gclkbuff'.
Successfully finished Verilog frontend.

3.2. Executing Verilog-2005 frontend: /home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/cells_sim.v
Parsing Verilog input from `/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\dffsre'.
Generating RTLIL representation for module `\dffnsre'.
Generating RTLIL representation for module `\latchsre'.
Generating RTLIL representation for module `\latchnsre'.
Generating RTLIL representation for module `\io_scff'.
Generating RTLIL representation for module `\scff'.
Generating RTLIL representation for module `\sh_dff'.
Generating RTLIL representation for module `\adder_carry'.
Generating RTLIL representation for module `\sdffr'.
Generating RTLIL representation for module `\sdffs'.
Generating RTLIL representation for module `\TDP_BRAM18'.
Generating RTLIL representation for module `\TDP36K'.
Generating RTLIL representation for module `\RS_DSP1'.
Generating RTLIL representation for module `\RS_DSP2'.
Generating RTLIL representation for module `\RS_DSP2_MULT'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGIN_REGOUT'.
Generating RTLIL representation for module `\dsp_t1_sim'.
Generating RTLIL representation for module `\dsp_t1_20x18x64'.
Generating RTLIL representation for module `\dsp_t1_10x9x32'.
Successfully finished Verilog frontend.

yosys> hierarchy -check -top md5

3.3. Executing HIERARCHY pass (managing design hierarchy).
VERIFIC-INFO [VERI-1018] md5.v:51: compiling module 'md5'
VERIFIC-WARNING [VERI-1209] md5.v:240: expression size 4 truncated to fit in target size 3
VERIFIC-WARNING [VERI-1209] md5.v:241: expression size 7 truncated to fit in target size 6
VERIFIC-WARNING [VERI-1209] md5.v:251: expression size 7 truncated to fit in target size 6
VERIFIC-WARNING [VERI-2580] md5.v:431: latch inferred for net 'data_o_var[127]'
Importing module md5.

3.3.1. Analyzing design hierarchy..
Top module:  \md5

3.3.2. Analyzing design hierarchy..
Top module:  \md5
Removed 0 unused modules.

yosys> proc

3.4. Executing PROC pass (convert processes to netlists).

yosys> proc_clean

3.4.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> proc_rmdead

3.4.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

yosys> proc_prune

3.4.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

yosys> proc_init

3.4.4. Executing PROC_INIT pass (extract init attributes).

yosys> proc_arst

3.4.5. Executing PROC_ARST pass (detect async resets in processes).

yosys> proc_rom

3.4.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

yosys> proc_mux

3.4.7. Executing PROC_MUX pass (convert decision trees to multiplexers).

yosys> proc_dlatch

3.4.8. Executing PROC_DLATCH pass (convert process syncs to latches).

yosys> proc_dff

3.4.9. Executing PROC_DFF pass (convert process syncs to FFs).

yosys> proc_memwr

3.4.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

yosys> proc_clean

3.4.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> opt_expr -keepdc

3.4.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module md5.
<suppressed ~24 debug messages>

yosys> bmuxmap

3.5. Executing BMUXMAP pass.

yosys> demuxmap

3.6. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> flatten

3.7. Executing FLATTEN pass (flatten design).

yosys> bmuxmap

3.8. Executing BMUXMAP pass.

yosys> demuxmap

3.9. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> tribuf -logic

3.10. Executing TRIBUF pass.

yosys> deminout

3.11. Executing DEMINOUT pass (demote inout ports to input or output).

yosys> opt_expr

3.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module md5.
<suppressed ~37 debug messages>

yosys> opt_clean

3.13. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \md5..
Removed 11 unused cells and 99 unused wires.
<suppressed ~79 debug messages>

yosys> check

3.14. Executing CHECK pass (checking for obvious problems).
Checking module md5...
Found and reported 0 problems.

yosys> opt -nodffe -nosdff

3.15. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module md5.

yosys> opt_merge -nomux

3.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\md5'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.15.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \md5..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~26 debug messages>

yosys> opt_reduce

3.15.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \md5.
    New ctrl vector for $pmux cell $verific$select_42$md5.v:194$169: { $verific$n1138$4 $verific$n1139$5 $verific$n1140$6 $verific$n1141$7 }
    New ctrl vector for $pmux cell $verific$select_86$md5.v:253$208: { $auto$opt_reduce.cc:134:opt_pmux$510 $verific$n2091$14 }
    New ctrl vector for $pmux cell $verific$select_87$md5.v:253$209: { $verific$n2086$9 $auto$opt_reduce.cc:134:opt_pmux$512 }
  Optimizing cells in module \md5.
Performed a total of 3 changes.

yosys> opt_merge

3.15.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\md5'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.15.6. Executing OPT_DFF pass (perform DFF optimizations).
Changing const-value async load to async reset on $verific$round_reg$md5.v:324$253 ($aldff) from module md5.
Changing const-value async load to async reset on $verific$round64_reg$md5.v:324$254 ($aldff) from module md5.
Changing const-value async load to async reset on $verific$ready_o_reg$md5.v:324$244 ($aldff) from module md5.
Changing const-value async load to async reset on $verific$message_reg$md5.v:324$246 ($aldff) from module md5.
Changing const-value async load to async reset on $verific$getdata_state_reg$md5.v:324$251 ($aldff) from module md5.
Changing const-value async load to async reset on $verific$generate_hash_reg$md5.v:324$252 ($aldff) from module md5.
Changing const-value async load to async reset on $verific$dr_reg$md5.v:324$250 ($aldff) from module md5.
Changing const-value async load to async reset on $verific$data_o_reg$md5.v:324$245 ($aldff) from module md5.
Changing const-value async load to async reset on $verific$cr_reg$md5.v:324$249 ($aldff) from module md5.
Changing const-value async load to async reset on $verific$br_reg$md5.v:324$248 ($aldff) from module md5.
Changing const-value async load to async reset on $verific$ar_reg$md5.v:324$247 ($aldff) from module md5.
Changing const-value async load to async reset on $verific$D_reg$md5.v:324$258 ($aldff) from module md5.
Changing const-value async load to async reset on $verific$C_reg$md5.v:324$257 ($aldff) from module md5.
Changing const-value async load to async reset on $verific$B_reg$md5.v:324$256 ($aldff) from module md5.
Changing const-value async load to async reset on $verific$A_reg$md5.v:324$255 ($aldff) from module md5.

yosys> opt_clean

3.15.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \md5..
Removed 2 unused cells and 2 unused wires.
<suppressed ~3 debug messages>

yosys> opt_expr

3.15.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module md5.

3.15.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.15.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \md5..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~26 debug messages>

yosys> opt_reduce

3.15.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \md5.
Performed a total of 0 changes.

yosys> opt_merge

3.15.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\md5'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.15.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.15.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \md5..

yosys> opt_expr

3.15.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module md5.

3.15.16. Finished OPT passes. (There is nothing left to do.)

yosys> fsm -encoding binary

3.16. Executing FSM pass (extract and optimize FSM).

yosys> fsm_detect

3.16.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking md5.getdata_state as FSM state register:
    Users of register don't seem to benefit from recoding.

yosys> fsm_extract

3.16.2. Executing FSM_EXTRACT pass (extracting FSM from design).

yosys> fsm_opt

3.16.3. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> opt_clean

3.16.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \md5..

yosys> fsm_opt

3.16.5. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> fsm_recode -encoding binary

3.16.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

yosys> fsm_info

3.16.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

yosys> fsm_map

3.16.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

yosys> opt -sat

3.17. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.17.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module md5.

yosys> opt_merge -nomux

3.17.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\md5'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.17.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \md5..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~26 debug messages>

yosys> opt_reduce

3.17.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \md5.
Performed a total of 0 changes.

yosys> opt_merge

3.17.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\md5'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.17.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $verific$round_reg$md5.v:324$253 ($adff) from module md5 (D = \next_round, Q = \round).
Adding EN signal on $verific$round64_reg$md5.v:324$254 ($adff) from module md5 (D = \next_round64, Q = \round64).
Adding EN signal on $verific$message_reg$md5.v:324$246 ($adff) from module md5 (D = $auto$bmuxmap.cc:58:execute$326 [127:0], Q = \message [127:0]).
Adding EN signal on $verific$message_reg$md5.v:324$246 ($adff) from module md5 (D = $auto$bmuxmap.cc:58:execute$326 [383:256], Q = \message [383:256]).
Adding EN signal on $verific$message_reg$md5.v:324$246 ($adff) from module md5 (D = $auto$bmuxmap.cc:58:execute$326 [255:128], Q = \message [255:128]).
Adding EN signal on $verific$message_reg$md5.v:324$246 ($adff) from module md5 (D = $auto$bmuxmap.cc:58:execute$326 [511:384], Q = \message [511:384]).
Adding EN signal on $verific$generate_hash_reg$md5.v:324$252 ($adff) from module md5 (D = \next_generate_hash, Q = \generate_hash).
Adding EN signal on $verific$dr_reg$md5.v:324$250 ($adff) from module md5 (D = \next_dr, Q = \dr).
Adding EN signal on $verific$cr_reg$md5.v:324$249 ($adff) from module md5 (D = \next_cr, Q = \cr).
Adding EN signal on $verific$br_reg$md5.v:324$248 ($adff) from module md5 (D = \next_br, Q = \br).
Adding EN signal on $verific$ar_reg$md5.v:324$247 ($adff) from module md5 (D = \next_ar, Q = \ar).

yosys> opt_clean

3.17.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \md5..
Removed 1 unused cells and 1 unused wires.
<suppressed ~2 debug messages>

yosys> opt_expr

3.17.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module md5.
<suppressed ~5 debug messages>

3.17.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.17.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \md5..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~26 debug messages>

yosys> opt_reduce

3.17.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \md5.
Performed a total of 0 changes.

yosys> opt_merge

3.17.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\md5'.
<suppressed ~78 debug messages>
Removed a total of 26 cells.

yosys> opt_dff -sat

3.17.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.17.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \md5..
Removed 0 unused cells and 26 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.17.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module md5.

3.17.16. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.17.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \md5..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~26 debug messages>

yosys> opt_reduce

3.17.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \md5.
Performed a total of 0 changes.

yosys> opt_merge

3.17.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\md5'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.17.20. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.17.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \md5..

yosys> opt_expr

3.17.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module md5.

3.17.23. Finished OPT passes. (There is nothing left to do.)

yosys> wreduce -keepdc

3.18. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 4) from port B of cell md5.$auto$opt_dff.cc:195:make_patterns_logic$597 ($ne).
Removed top 1 bits (of 3) from port B of cell md5.$auto$opt_dff.cc:195:make_patterns_logic$599 ($ne).
Removed top 2 bits (of 3) from port B of cell md5.$verific$equal_38$md5.v:191$163 ($eq).
Removed top 1 bits (of 3) from port B of cell md5.$verific$equal_39$md5.v:192$164 ($eq).
Removed top 1 bits (of 3) from port B of cell md5.$verific$equal_40$md5.v:193$165 ($eq).
Removed top 3 bits (of 9) from port A of cell md5.$verific$sub_53$md5.v:204$180 ($sub).
Removed top 1 bits (of 9) from port B of cell md5.$verific$sub_53$md5.v:204$180 ($sub).
Removed top 384 bits (of 2048) from mux cell md5.$verific$mux_1104$md5.v:405$189 ($mux).
Removed top 2 bits (of 3) from port B of cell md5.$verific$add_74$md5.v:240$196 ($add).
Removed top 5 bits (of 6) from port B of cell md5.$verific$add_76$md5.v:241$198 ($add).
Removed top 2 bits (of 6) from port B of cell md5.$verific$equal_81$md5.v:238$201 ($eq).
Removed top 1 bits (of 6) from port B of cell md5.$verific$equal_82$md5.v:238$202 ($eq).
Removed top 1 bits (of 3) from port B of cell md5.$auto$opt_dff.cc:195:make_patterns_logic$533 ($ne).
Removed top 1 bits (of 3) from port B of cell md5.$auto$opt_dff.cc:195:make_patterns_logic$525 ($ne).
Removed top 2 bits (of 3) from port B of cell md5.$auto$opt_dff.cc:195:make_patterns_logic$529 ($ne).
Removed top 2 bits (of 44) from mux cell md5.$auto$bmuxmap.cc:60:execute$441 ($mux).
Removed top 1 bits (of 44) from mux cell md5.$auto$bmuxmap.cc:60:execute$444 ($mux).
Removed top 1 bits (of 44) from mux cell md5.$auto$bmuxmap.cc:60:execute$446 ($mux).
Removed top 2 bits (of 44) from mux cell md5.$auto$bmuxmap.cc:60:execute$449 ($mux).
Removed top 2 bits (of 44) from mux cell md5.$auto$bmuxmap.cc:60:execute$452 ($mux).
Removed top 1 bits (of 44) from mux cell md5.$auto$bmuxmap.cc:60:execute$455 ($mux).
Removed top 1 bits (of 44) from mux cell md5.$auto$bmuxmap.cc:60:execute$457 ($mux).
Removed top 1 bits (of 44) from mux cell md5.$auto$bmuxmap.cc:60:execute$460 ($mux).
Removed top 2 bits (of 44) from mux cell md5.$auto$bmuxmap.cc:60:execute$463 ($mux).
Removed top 1 bits (of 44) from mux cell md5.$auto$bmuxmap.cc:60:execute$466 ($mux).
Removed top 1 bits (of 44) from mux cell md5.$auto$bmuxmap.cc:60:execute$468 ($mux).
Removed top 1 bits (of 44) from mux cell md5.$auto$bmuxmap.cc:60:execute$471 ($mux).
Removed top 1 bits (of 4) from wire md5.$auto$bmuxmap.cc:58:execute$341.
Removed top 128 bits (of 512) from wire md5.$auto$bmuxmap.cc:58:execute$401.
Removed top 5 bits (of 256) from wire md5.$auto$bmuxmap.cc:58:execute$421.
Removed top 69 bits (of 1408) from wire md5.$auto$bmuxmap.cc:58:execute$440.
Removed top 384 bits (of 512) from wire md5.$verific$n10559$117.
Removed top 2 bits (of 3) from wire md5.$verific$n11072$118.
Removed top 33 bits (of 512) from wire md5.$verific$n9272$113.

yosys> peepopt

3.19. Executing PEEPOPT pass (run peephole optimizers).

yosys> opt_clean

3.20. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \md5..
Removed 0 unused cells and 5 unused wires.
<suppressed ~1 debug messages>

yosys> bmuxmap

3.21. Executing BMUXMAP pass.

yosys> demuxmap

3.22. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> alumacc

3.23. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module md5:
  creating $macc model for $verific$add_137$md5.v:335$259 ($add).
  creating $macc model for $verific$add_139$md5.v:336$261 ($add).
  creating $macc model for $verific$add_141$md5.v:337$263 ($add).
  creating $macc model for $verific$add_143$md5.v:338$265 ($add).
  creating $macc model for $verific$add_46$md5.v:201$173 ($add).
  creating $macc model for $verific$add_48$md5.v:201$175 ($add).
  creating $macc model for $verific$add_49$md5.v:201$176 ($add).
  creating $macc model for $verific$add_57$md5.v:205$184 ($add).
  creating $macc model for $verific$add_74$md5.v:240$196 ($add).
  creating $macc model for $verific$add_76$md5.v:241$198 ($add).
  creating $macc model for $verific$sub_53$md5.v:204$180 ($sub).
  merging $macc model for $verific$add_48$md5.v:201$175 into $verific$add_49$md5.v:201$176.
  merging $macc model for $verific$add_46$md5.v:201$173 into $verific$add_49$md5.v:201$176.
  creating $alu model for $macc $verific$add_74$md5.v:240$196.
  creating $alu model for $macc $verific$add_57$md5.v:205$184.
  creating $alu model for $macc $verific$add_76$md5.v:241$198.
  creating $alu model for $macc $verific$sub_53$md5.v:204$180.
  creating $alu model for $macc $verific$add_143$md5.v:338$265.
  creating $alu model for $macc $verific$add_141$md5.v:337$263.
  creating $alu model for $macc $verific$add_139$md5.v:336$261.
  creating $alu model for $macc $verific$add_137$md5.v:335$259.
  creating $macc cell for $verific$add_49$md5.v:201$176: $auto$alumacc.cc:365:replace_macc$627
  creating $alu cell for $verific$add_137$md5.v:335$259: $auto$alumacc.cc:485:replace_alu$628
  creating $alu cell for $verific$add_139$md5.v:336$261: $auto$alumacc.cc:485:replace_alu$631
  creating $alu cell for $verific$add_141$md5.v:337$263: $auto$alumacc.cc:485:replace_alu$634
  creating $alu cell for $verific$add_143$md5.v:338$265: $auto$alumacc.cc:485:replace_alu$637
  creating $alu cell for $verific$sub_53$md5.v:204$180: $auto$alumacc.cc:485:replace_alu$640
  creating $alu cell for $verific$add_76$md5.v:241$198: $auto$alumacc.cc:485:replace_alu$643
  creating $alu cell for $verific$add_57$md5.v:205$184: $auto$alumacc.cc:485:replace_alu$646
  creating $alu cell for $verific$add_74$md5.v:240$196: $auto$alumacc.cc:485:replace_alu$649
  created 8 $alu and 1 $macc cells.

yosys> opt_expr

3.24. Executing OPT_EXPR pass (perform const folding).
Optimizing module md5.

yosys> opt_merge -nomux

3.25. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\md5'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.26. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \md5..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~26 debug messages>

yosys> opt_reduce

3.27. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \md5.
Performed a total of 0 changes.

yosys> opt_merge

3.28. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\md5'.
Removed a total of 0 cells.

yosys> opt_share

3.29. Executing OPT_SHARE pass.

yosys> opt_dff

3.30. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.31. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \md5..
Removed 2 unused cells and 2 unused wires.
<suppressed ~3 debug messages>

yosys> opt_expr

3.32. Executing OPT_EXPR pass (perform const folding).
Optimizing module md5.

yosys> opt_muxtree

3.33. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \md5..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~26 debug messages>

yosys> opt_reduce

3.34. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \md5.
Performed a total of 0 changes.

yosys> opt_merge

3.35. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\md5'.
Removed a total of 0 cells.

yosys> opt_share

3.36. Executing OPT_SHARE pass.

yosys> opt_dff

3.37. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.38. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \md5..

yosys> opt_expr

3.39. Executing OPT_EXPR pass (perform const folding).
Optimizing module md5.
MAX OPT ITERATION = 2

yosys> stat

3.40. Printing statistics.

=== md5 ===

   Number of wires:                187
   Number of wire bits:          14926
   Number of public wires:          64
   Number of public wire bits:    2329
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                216
     $adff                           7
     $adffe                         11
     $alu                            8
     $and                            1
     $eq                             7
     $logic_not                      2
     $macc                           1
     $mux                          139
     $ne                            14
     $not                            5
     $or                             3
     $pmux                           3
     $reduce_and                     5
     $reduce_bool                    2
     $reduce_or                      4
     $shl                            1
     $shr                            1
     $xor                            2


yosys> memory -nomap

3.41. Executing MEMORY pass.

yosys> opt_mem

3.41.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

yosys> opt_mem_priority

3.41.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

yosys> opt_mem_feedback

3.41.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

yosys> memory_bmux2rom

3.41.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

yosys> memory_dff

3.41.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

yosys> opt_clean

3.41.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \md5..

yosys> memory_share

3.41.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

yosys> opt_mem_widen

3.41.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

yosys> opt_clean

3.41.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \md5..

yosys> memory_collect

3.41.10. Executing MEMORY_COLLECT pass (generating $mem cells).

yosys> stat

3.42. Printing statistics.

=== md5 ===

   Number of wires:                187
   Number of wire bits:          14926
   Number of public wires:          64
   Number of public wire bits:    2329
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                216
     $adff                           7
     $adffe                         11
     $alu                            8
     $and                            1
     $eq                             7
     $logic_not                      2
     $macc                           1
     $mux                          139
     $ne                            14
     $not                            5
     $or                             3
     $pmux                           3
     $reduce_and                     5
     $reduce_bool                    2
     $reduce_or                      4
     $shl                            1
     $shr                            1
     $xor                            2


yosys> muxpack

3.43. Executing MUXPACK pass ($mux cell cascades to $pmux).
Converted 0 (p)mux cells into 0 pmux cells.
<suppressed ~138 debug messages>

yosys> opt_clean

3.44. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \md5..

yosys> pmuxtree

3.45. Executing PMUXTREE pass.

yosys> muxpack

3.46. Executing MUXPACK pass ($mux cell cascades to $pmux).
Converting md5.$auto$pmuxtree.cc:65:recursive_mux_generator$658 ... md5.$auto$pmuxtree.cc:65:recursive_mux_generator$660 to a pmux with 2 cases.
Converted 2 (p)mux cells into 1 pmux cells.
<suppressed ~145 debug messages>

yosys> memory_map

3.47. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

yosys> stat

3.48. Printing statistics.

=== md5 ===

   Number of wires:                202
   Number of wire bits:          15079
   Number of public wires:          64
   Number of public wire bits:    2329
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                227
     $adff                           7
     $adffe                         11
     $alu                            8
     $and                            1
     $eq                             7
     $logic_not                      2
     $macc                           1
     $mux                          145
     $ne                            14
     $not                            8
     $or                             4
     $pmux                           1
     $reduce_and                     5
     $reduce_bool                    2
     $reduce_or                      7
     $shl                            1
     $shr                            1
     $xor                            2


yosys> techmap -map +/techmap.v -map +/rapidsilicon/genesis/arith_map.v

3.49. Executing TECHMAP pass (map to technology primitives).

3.49.1. Executing Verilog-2005 frontend: /home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.49.2. Executing Verilog-2005 frontend: /home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/arith_map.v
Parsing Verilog input from `/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_rs_alu'.
Successfully finished Verilog frontend.

3.49.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $ne.
Using template $paramod$8fabc56b80a569262acfc42757a02ca0b8e91278\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $adffe.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper maccmap for cells of type $macc.
  add \ar (32 bits, unsigned)
  add \t [43:12] (32 bits, unsigned)
  add $auto$bmuxmap.cc:58:execute$438 (32 bits, unsigned)
  add \fr_var (32 bits, unsigned)
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $eq.
Using template $paramod$be80489e44a49c29884f59fd81c31ed03229cfc1\_80_rs_alu for cells of type $alu.
Using template $paramod$constmap:b07c6788ac040741d0f2f36f509f85fa42b75d08$paramod$f2dfef6e0670d1a78056b6e8b09255cd89e540e0\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using template $paramod$32efbfac1c4dc57230cf86180788fdfd12e3b511\_90_alu for cells of type $alu.
Using template $paramod$9f6287aee284fbe22761e3274ffeab5b5a3751bd\_90_alu for cells of type $alu.
Using template $paramod$constmap:a9df98387b1e82cb33310b520f7c2cacb940f54b$paramod$56955d0f36f77738c952d3505dc563df3ee11b94\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using template $paramod$3ef7d3dd227da7627a99c5e5a6a4deb817573e39\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $adff.
Using template $paramod\_90_fa\WIDTH=32'00000000000000000000000000100000 for cells of type $fa.
Using template $paramod$fbc7873bff55778c0b3173955b7e4bce1d9d6834\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000110 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001001 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000011 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000100000 for cells of type $lcu.
No more expansions possible.
<suppressed ~2615 debug messages>

yosys> stat

3.50. Printing statistics.

=== md5 ===

   Number of wires:                838
   Number of wire bits:          29319
   Number of public wires:          64
   Number of public wire bits:    2329
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:              11527
     $_AND_                        516
     $_DFFE_PN0P_                  586
     $_DFFE_PN1P_                   64
     $_DFF_PN0_                    196
     $_DFF_PN1_                     64
     $_MUX_                       8687
     $_NOT_                        289
     $_OR_                         393
     $_XOR_                        572
     adder_carry                   160


yosys> opt_expr

3.51. Executing OPT_EXPR pass (perform const folding).
Optimizing module md5.
<suppressed ~3667 debug messages>

yosys> opt_merge -nomux

3.52. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\md5'.
<suppressed ~5388 debug messages>
Removed a total of 1796 cells.

yosys> opt_muxtree

3.53. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \md5..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.54. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \md5.
Performed a total of 0 changes.

yosys> opt_merge

3.55. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\md5'.
Removed a total of 0 cells.

yosys> opt_share

3.56. Executing OPT_SHARE pass.

yosys> opt_dff

3.57. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.58. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \md5..
Removed 131 unused cells and 527 unused wires.
<suppressed ~132 debug messages>

yosys> opt_expr

3.59. Executing OPT_EXPR pass (perform const folding).
Optimizing module md5.
<suppressed ~31 debug messages>

yosys> opt_muxtree

3.60. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \md5..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.61. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \md5.
Performed a total of 0 changes.

yosys> opt_merge

3.62. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\md5'.
Removed a total of 0 cells.

yosys> opt_share

3.63. Executing OPT_SHARE pass.

yosys> opt_dff

3.64. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.65. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \md5..

yosys> opt_expr

3.66. Executing OPT_EXPR pass (perform const folding).
Optimizing module md5.
MAX OPT ITERATION = 2

yosys> opt -fast -full

3.67. Executing OPT pass (performing simple optimizations).

yosys> opt_expr -full

3.67.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module md5.
<suppressed ~1356 debug messages>

yosys> opt_merge

3.67.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\md5'.
<suppressed ~12 debug messages>
Removed a total of 4 cells.

yosys> opt_dff

3.67.3. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.67.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \md5..
Removed 0 unused cells and 13 unused wires.
<suppressed ~1 debug messages>

3.67.5. Finished fast OPT passes.

yosys> techmap -map +/techmap.v

3.68. Executing TECHMAP pass (map to technology primitives).

3.68.1. Executing Verilog-2005 frontend: /home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.68.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~71 debug messages>

yosys> opt -sat

3.69. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.69.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module md5.

yosys> opt_merge -nomux

3.69.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\md5'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.69.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \md5..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.69.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \md5.
Performed a total of 0 changes.

yosys> opt_merge

3.69.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\md5'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.69.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.69.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \md5..

yosys> opt_expr

3.69.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module md5.

3.69.9. Finished OPT passes. (There is nothing left to do.)

yosys> abc -dff

3.70. Executing ABC pass (technology mapping using ABC).

3.70.1. Summary of detected clock domains:
  199 cells in clk=\clk, en=$auto$opt_dff.cc:219:make_patterns_logic$574, arst=!\reset, srst={ }
  197 cells in clk=\clk, en=$auto$opt_dff.cc:219:make_patterns_logic$536, arst=!\reset, srst={ }
  459 cells in clk=\clk, en=$auto$opt_dff.cc:194:make_patterns_logic$517, arst=!\reset, srst={ }
  1988 cells in clk=\clk, en=$auto$opt_dff.cc:194:make_patterns_logic$609, arst=!\reset, srst={ }
  9 cells in clk=\clk, en=$auto$opt_dff.cc:219:make_patterns_logic$606, arst=!\reset, srst={ }
  1803 cells in clk=\clk, en={ }, arst=!\reset, srst={ }
  35 cells in clk=\clk, en=$auto$opt_dff.cc:194:make_patterns_logic$514, arst=!\reset, srst={ }
  199 cells in clk=\clk, en=$auto$opt_dff.cc:219:make_patterns_logic$555, arst=!\reset, srst={ }
  196 cells in clk=\clk, en=$auto$opt_dff.cc:219:make_patterns_logic$593, arst=!\reset, srst={ }

3.70.2. Extracting gate netlist of module `\md5' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:219:make_patterns_logic$574, asynchronously reset by !\reset
Extracted 199 gates and 336 wires to a netlist network with 137 inputs and 67 outputs.

3.70.2.1. Executing ABC.

3.70.3. Extracting gate netlist of module `\md5' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:219:make_patterns_logic$536, asynchronously reset by !\reset
Extracted 197 gates and 332 wires to a netlist network with 135 inputs and 67 outputs.

3.70.3.1. Executing ABC.

3.70.4. Extracting gate netlist of module `\md5' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:194:make_patterns_logic$517, asynchronously reset by !\reset
Extracted 459 gates and 466 wires to a netlist network with 5 inputs and 52 outputs.

3.70.4.1. Executing ABC.

3.70.5. Extracting gate netlist of module `\md5' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:194:make_patterns_logic$609, asynchronously reset by !\reset
Extracted 1988 gates and 2420 wires to a netlist network with 431 inputs and 256 outputs.

3.70.5.1. Executing ABC.

3.70.6. Extracting gate netlist of module `\md5' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:219:make_patterns_logic$606, asynchronously reset by !\reset
Extracted 9 gates and 18 wires to a netlist network with 9 inputs and 2 outputs.

3.70.6.1. Executing ABC.

3.70.7. Extracting gate netlist of module `\md5' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, asynchronously reset by !\reset
Extracted 1643 gates and 2003 wires to a netlist network with 358 inputs and 515 outputs.

3.70.7.1. Executing ABC.

3.70.8. Extracting gate netlist of module `\md5' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:194:make_patterns_logic$514, asynchronously reset by !\reset
Extracted 35 gates and 43 wires to a netlist network with 7 inputs and 8 outputs.

3.70.8.1. Executing ABC.

3.70.9. Extracting gate netlist of module `\md5' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:219:make_patterns_logic$555, asynchronously reset by !\reset
Extracted 199 gates and 335 wires to a netlist network with 136 inputs and 68 outputs.

3.70.9.1. Executing ABC.

3.70.10. Extracting gate netlist of module `\md5' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:219:make_patterns_logic$593, asynchronously reset by !\reset
Extracted 196 gates and 330 wires to a netlist network with 134 inputs and 66 outputs.

3.70.10.1. Executing ABC.

yosys> abc -dff

3.71. Executing ABC pass (technology mapping using ABC).

3.71.1. Summary of detected clock domains:
  249 cells in clk=\clk, en=$abc$14206$auto$opt_dff.cc:194:make_patterns_logic$517, arst=!\reset, srst={ }
  200 cells in clk=\clk, en=$abc$13552$auto$opt_dff.cc:219:make_patterns_logic$574, arst=!\reset, srst={ }
  25 cells in clk=\clk, en=$abc$18326$auto$opt_dff.cc:194:make_patterns_logic$514, arst=!\reset, srst={ }
  9 cells in clk=\clk, en=$abc$16971$auto$opt_dff.cc:219:make_patterns_logic$606, arst=!\reset, srst={ }
  198 cells in clk=\clk, en=$abc$13880$auto$opt_dff.cc:219:make_patterns_logic$536, arst=!\reset, srst={ }
  198 cells in clk=\clk, en=$abc$18351$auto$opt_dff.cc:219:make_patterns_logic$555, arst=!\reset, srst={ }
  2441 cells in clk=\clk, en=$abc$14853$auto$opt_dff.cc:194:make_patterns_logic$609, arst=!\reset, srst={ }
  1275 cells in clk=\clk, en={ }, arst=!\reset, srst={ }
  198 cells in clk=\clk, en=$abc$18679$auto$opt_dff.cc:219:make_patterns_logic$593, arst=!\reset, srst={ }

3.71.2. Extracting gate netlist of module `\md5' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$14206$auto$opt_dff.cc:194:make_patterns_logic$517, asynchronously reset by !\reset
Extracted 249 gates and 254 wires to a netlist network with 5 inputs and 159 outputs.

3.71.2.1. Executing ABC.

3.71.3. Extracting gate netlist of module `\md5' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$13552$auto$opt_dff.cc:219:make_patterns_logic$574, asynchronously reset by !\reset
Extracted 200 gates and 338 wires to a netlist network with 138 inputs and 68 outputs.

3.71.3.1. Executing ABC.

3.71.4. Extracting gate netlist of module `\md5' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$18326$auto$opt_dff.cc:194:make_patterns_logic$514, asynchronously reset by !\reset
Extracted 25 gates and 32 wires to a netlist network with 7 inputs and 8 outputs.

3.71.4.1. Executing ABC.

3.71.5. Extracting gate netlist of module `\md5' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$16971$auto$opt_dff.cc:219:make_patterns_logic$606, asynchronously reset by !\reset
Extracted 9 gates and 18 wires to a netlist network with 9 inputs and 2 outputs.

3.71.5.1. Executing ABC.

3.71.6. Extracting gate netlist of module `\md5' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$13880$auto$opt_dff.cc:219:make_patterns_logic$536, asynchronously reset by !\reset
Extracted 198 gates and 334 wires to a netlist network with 136 inputs and 68 outputs.

3.71.6.1. Executing ABC.

3.71.7. Extracting gate netlist of module `\md5' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$18351$auto$opt_dff.cc:219:make_patterns_logic$555, asynchronously reset by !\reset
Extracted 198 gates and 334 wires to a netlist network with 136 inputs and 67 outputs.

3.71.7.1. Executing ABC.

3.71.8. Extracting gate netlist of module `\md5' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$14853$auto$opt_dff.cc:194:make_patterns_logic$609, asynchronously reset by !\reset
Extracted 2441 gates and 3050 wires to a netlist network with 609 inputs and 235 outputs.

3.71.8.1. Executing ABC.

3.71.9. Extracting gate netlist of module `\md5' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, asynchronously reset by !\reset
Extracted 1115 gates and 1433 wires to a netlist network with 318 inputs and 439 outputs.

3.71.9.1. Executing ABC.

3.71.10. Extracting gate netlist of module `\md5' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$18679$auto$opt_dff.cc:219:make_patterns_logic$593, asynchronously reset by !\reset
Extracted 198 gates and 334 wires to a netlist network with 136 inputs and 68 outputs.

3.71.10.1. Executing ABC.

yosys> abc -dff

3.72. Executing ABC pass (technology mapping using ABC).

3.72.1. Summary of detected clock domains:
  10 cells in clk=\clk, en=$abc$19619$abc$16971$auto$opt_dff.cc:219:make_patterns_logic$606, arst=!\reset, srst={ }
  214 cells in clk=\clk, en=$abc$19004$abc$14206$auto$opt_dff.cc:194:make_patterns_logic$517, arst=!\reset, srst={ }
  24 cells in clk=\clk, en=$abc$19594$abc$18326$auto$opt_dff.cc:194:make_patterns_logic$514, arst=!\reset, srst={ }
  200 cells in clk=\clk, en=$abc$19265$abc$13552$auto$opt_dff.cc:219:make_patterns_logic$574, arst=!\reset, srst={ }
  198 cells in clk=\clk, en=$abc$19629$abc$13880$auto$opt_dff.cc:219:make_patterns_logic$536, arst=!\reset, srst={ }
  2435 cells in clk=\clk, en=$abc$20283$abc$14853$auto$opt_dff.cc:194:make_patterns_logic$609, arst=!\reset, srst={ }
  198 cells in clk=\clk, en=$abc$19956$abc$18351$auto$opt_dff.cc:219:make_patterns_logic$555, arst=!\reset, srst={ }
  1447 cells in clk=\clk, en={ }, arst=!\reset, srst={ }
  198 cells in clk=\clk, en=$abc$24181$abc$18679$auto$opt_dff.cc:219:make_patterns_logic$593, arst=!\reset, srst={ }

3.72.2. Extracting gate netlist of module `\md5' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$19619$abc$16971$auto$opt_dff.cc:219:make_patterns_logic$606, asynchronously reset by !\reset
Extracted 10 gates and 19 wires to a netlist network with 9 inputs and 2 outputs.

3.72.2.1. Executing ABC.

3.72.3. Extracting gate netlist of module `\md5' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$19004$abc$14206$auto$opt_dff.cc:194:make_patterns_logic$517, asynchronously reset by !\reset
Extracted 214 gates and 221 wires to a netlist network with 7 inputs and 143 outputs.

3.72.3.1. Executing ABC.

3.72.4. Extracting gate netlist of module `\md5' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$19594$abc$18326$auto$opt_dff.cc:194:make_patterns_logic$514, asynchronously reset by !\reset
Extracted 24 gates and 31 wires to a netlist network with 7 inputs and 7 outputs.

3.72.4.1. Executing ABC.

3.72.5. Extracting gate netlist of module `\md5' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$19265$abc$13552$auto$opt_dff.cc:219:make_patterns_logic$574, asynchronously reset by !\reset
Extracted 200 gates and 338 wires to a netlist network with 138 inputs and 68 outputs.

3.72.5.1. Executing ABC.

3.72.6. Extracting gate netlist of module `\md5' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$19629$abc$13880$auto$opt_dff.cc:219:make_patterns_logic$536, asynchronously reset by !\reset
Extracted 198 gates and 334 wires to a netlist network with 136 inputs and 68 outputs.

3.72.6.1. Executing ABC.

3.72.7. Extracting gate netlist of module `\md5' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$20283$abc$14853$auto$opt_dff.cc:194:make_patterns_logic$609, asynchronously reset by !\reset
Extracted 2435 gates and 3030 wires to a netlist network with 595 inputs and 264 outputs.

3.72.7.1. Executing ABC.

3.72.8. Extracting gate netlist of module `\md5' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$19956$abc$18351$auto$opt_dff.cc:219:make_patterns_logic$555, asynchronously reset by !\reset
Extracted 198 gates and 334 wires to a netlist network with 136 inputs and 67 outputs.

3.72.8.1. Executing ABC.

3.72.9. Extracting gate netlist of module `\md5' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, asynchronously reset by !\reset
Extracted 1287 gates and 1678 wires to a netlist network with 391 inputs and 527 outputs.

3.72.9.1. Executing ABC.

3.72.10. Extracting gate netlist of module `\md5' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$24181$abc$18679$auto$opt_dff.cc:219:make_patterns_logic$593, asynchronously reset by !\reset
Extracted 198 gates and 334 wires to a netlist network with 136 inputs and 68 outputs.

3.72.10.1. Executing ABC.

yosys> abc -dff

3.73. Executing ABC pass (technology mapping using ABC).

3.73.1. Summary of detected clock domains:
  9 cells in clk=\clk, en=$abc$24508$abc$19619$abc$16971$auto$opt_dff.cc:219:make_patterns_logic$606, arst=!\reset, srst={ }
  21 cells in clk=\clk, en=$abc$24732$abc$19594$abc$18326$auto$opt_dff.cc:194:make_patterns_logic$514, arst=!\reset, srst={ }
  199 cells in clk=\clk, en=$abc$24518$abc$19004$abc$14206$auto$opt_dff.cc:194:make_patterns_logic$517, arst=!\reset, srst={ }
  198 cells in clk=\clk, en=$abc$24756$abc$19265$abc$13552$auto$opt_dff.cc:219:make_patterns_logic$574, arst=!\reset, srst={ }
  198 cells in clk=\clk, en=$abc$25085$abc$19629$abc$13880$auto$opt_dff.cc:219:make_patterns_logic$536, arst=!\reset, srst={ }
  2514 cells in clk=\clk, en=$abc$25412$abc$20283$abc$14853$auto$opt_dff.cc:194:make_patterns_logic$609, arst=!\reset, srst={ }
  200 cells in clk=\clk, en=$abc$27895$abc$19956$abc$18351$auto$opt_dff.cc:219:make_patterns_logic$555, arst=!\reset, srst={ }
  1386 cells in clk=\clk, en={ }, arst=!\reset, srst={ }
  198 cells in clk=\clk, en=$abc$29697$abc$24181$abc$18679$auto$opt_dff.cc:219:make_patterns_logic$593, arst=!\reset, srst={ }

3.73.2. Extracting gate netlist of module `\md5' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$24508$abc$19619$abc$16971$auto$opt_dff.cc:219:make_patterns_logic$606, asynchronously reset by !\reset
Extracted 9 gates and 18 wires to a netlist network with 9 inputs and 3 outputs.

3.73.2.1. Executing ABC.

3.73.3. Extracting gate netlist of module `\md5' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$24732$abc$19594$abc$18326$auto$opt_dff.cc:194:make_patterns_logic$514, asynchronously reset by !\reset
Extracted 21 gates and 26 wires to a netlist network with 5 inputs and 6 outputs.

3.73.3.1. Executing ABC.

3.73.4. Extracting gate netlist of module `\md5' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$24518$abc$19004$abc$14206$auto$opt_dff.cc:194:make_patterns_logic$517, asynchronously reset by !\reset
Extracted 199 gates and 204 wires to a netlist network with 5 inputs and 141 outputs.

3.73.4.1. Executing ABC.

3.73.5. Extracting gate netlist of module `\md5' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$24756$abc$19265$abc$13552$auto$opt_dff.cc:219:make_patterns_logic$574, asynchronously reset by !\reset
Extracted 198 gates and 334 wires to a netlist network with 136 inputs and 67 outputs.

3.73.5.1. Executing ABC.

3.73.6. Extracting gate netlist of module `\md5' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$25085$abc$19629$abc$13880$auto$opt_dff.cc:219:make_patterns_logic$536, asynchronously reset by !\reset
Extracted 198 gates and 334 wires to a netlist network with 136 inputs and 68 outputs.

3.73.6.1. Executing ABC.

3.73.7. Extracting gate netlist of module `\md5' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$25412$abc$20283$abc$14853$auto$opt_dff.cc:194:make_patterns_logic$609, asynchronously reset by !\reset
Extracted 2514 gates and 3129 wires to a netlist network with 615 inputs and 255 outputs.

3.73.7.1. Executing ABC.

3.73.8. Extracting gate netlist of module `\md5' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$27895$abc$19956$abc$18351$auto$opt_dff.cc:219:make_patterns_logic$555, asynchronously reset by !\reset
Extracted 200 gates and 337 wires to a netlist network with 137 inputs and 68 outputs.

3.73.8.1. Executing ABC.

3.73.9. Extracting gate netlist of module `\md5' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, asynchronously reset by !\reset
Extracted 1226 gates and 1580 wires to a netlist network with 354 inputs and 511 outputs.

3.73.9.1. Executing ABC.

3.73.10. Extracting gate netlist of module `\md5' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$29697$abc$24181$abc$18679$auto$opt_dff.cc:219:make_patterns_logic$593, asynchronously reset by !\reset
Extracted 198 gates and 334 wires to a netlist network with 136 inputs and 68 outputs.

3.73.10.1. Executing ABC.

yosys> opt_ffinv

3.74. Executing OPT_FFINV pass (push inverters through FFs).
Discovering LUTs.
Pushed 0 inverters.

yosys> opt -sat

3.75. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.75.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module md5.
<suppressed ~98 debug messages>

yosys> opt_merge -nomux

3.75.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\md5'.
<suppressed ~24 debug messages>
Removed a total of 8 cells.

yosys> opt_muxtree

3.75.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \md5..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.75.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \md5.
Performed a total of 0 changes.

yosys> opt_merge

3.75.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\md5'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.75.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.75.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \md5..
Removed 2 unused cells and 23919 unused wires.
<suppressed ~42 debug messages>

yosys> opt_expr

3.75.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module md5.

3.75.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.75.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \md5..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.75.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \md5.
Performed a total of 0 changes.

yosys> opt_merge

3.75.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\md5'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.75.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.75.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \md5..

yosys> opt_expr

3.75.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module md5.

3.75.16. Finished OPT passes. (There is nothing left to do.)

yosys> bmuxmap

3.76. Executing BMUXMAP pass.

yosys> demuxmap

3.77. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> abc -script /home/users/temp_dir/yosys_5z2Omy/abc_tmp_1.scr

3.78. Executing ABC pass (technology mapping using ABC).

3.78.1. Extracting gate netlist of module `\md5' to `<abc-temp-dir>/input.blif'..
Extracted 3910 gates and 4848 wires to a netlist network with 938 inputs and 646 outputs.

3.78.1.1. Executing ABC.
DE:   #PIs = 938  #Luts =  1276  Max Lvl =  42  Avg Lvl =   5.48  [   0.97 sec. at Pass 0]
DE:   #PIs = 938  #Luts =  1207  Max Lvl =  41  Avg Lvl =   5.42  [  21.23 sec. at Pass 1]
DE:   #PIs = 938  #Luts =  1153  Max Lvl =  30  Avg Lvl =   4.35  [   4.17 sec. at Pass 2]
DE:   #PIs = 938  #Luts =  1153  Max Lvl =  30  Avg Lvl =   4.35  [   5.58 sec. at Pass 3]
DE:   #PIs = 938  #Luts =  1142  Max Lvl =  31  Avg Lvl =   4.43  [   2.97 sec. at Pass 4]
DE:   #PIs = 938  #Luts =  1142  Max Lvl =  31  Avg Lvl =   4.43  [   6.00 sec. at Pass 5]
DE:   #PIs = 938  #Luts =  1142  Max Lvl =  31  Avg Lvl =   4.43  [   4.49 sec. at Pass 6]
DE:   #PIs = 938  #Luts =  1140  Max Lvl =  31  Avg Lvl =   4.35  [   8.86 sec. at Pass 7]
DE:   #PIs = 938  #Luts =  1140  Max Lvl =  30  Avg Lvl =   4.30  [   5.78 sec. at Pass 8]
DE:   #PIs = 938  #Luts =  1138  Max Lvl =  28  Avg Lvl =   4.20  [   6.40 sec. at Pass 9]
DE:   #PIs = 938  #Luts =  1138  Max Lvl =  27  Avg Lvl =   4.05  [   4.84 sec. at Pass 10]
DE:   #PIs = 938  #Luts =  1138  Max Lvl =  27  Avg Lvl =   4.05  [   6.88 sec. at Pass 11]
DE:   #PIs = 938  #Luts =  1135  Max Lvl =  29  Avg Lvl =   4.23  [   4.34 sec. at Pass 12]
DE:   #PIs = 938  #Luts =  1134  Max Lvl =  29  Avg Lvl =   4.13  [   8.25 sec. at Pass 13]
DE:   #PIs = 938  #Luts =  1132  Max Lvl =  26  Avg Lvl =   3.98  [   3.95 sec. at Pass 14]
DE:   #PIs = 938  #Luts =  1132  Max Lvl =  26  Avg Lvl =   3.98  [   5.57 sec. at Pass 15]
DE:   #PIs = 938  #Luts =  1129  Max Lvl =  26  Avg Lvl =   3.99  [   3.35 sec. at Pass 16]
DE:   #PIs = 938  #Luts =  1128  Max Lvl =  27  Avg Lvl =   4.09  [   8.22 sec. at Pass 17]
DE:   #PIs = 938  #Luts =  1128  Max Lvl =  27  Avg Lvl =   4.09  [   4.94 sec. at Pass 18]
DE:   #PIs = 938  #Luts =  1128  Max Lvl =  27  Avg Lvl =   4.09  [   7.06 sec. at Pass 19]
DE:   #PIs = 938  #Luts =  1127  Max Lvl =  29  Avg Lvl =   4.15  [   3.52 sec. at Pass 20]
DE:   #PIs = 938  #Luts =  1127  Max Lvl =  29  Avg Lvl =   4.15  [   7.65 sec. at Pass 21]
DE:   #PIs = 938  #Luts =  1127  Max Lvl =  28  Avg Lvl =   4.11  [   4.70 sec. at Pass 22]
DE:   #PIs = 938  #Luts =  1127  Max Lvl =  28  Avg Lvl =   4.11  [   8.57 sec. at Pass 23]
DE:   #PIs = 938  #Luts =  1127  Max Lvl =  28  Avg Lvl =   4.11  [   6.50 sec. at Pass 24]
DE:   #PIs = 938  #Luts =  1127  Max Lvl =  28  Avg Lvl =   4.11  [  10.54 sec. at Pass 25]
DE:   #PIs = 938  #Luts =  1117  Max Lvl =  27  Avg Lvl =   4.12  [   1.16 sec. at Pass 26]

yosys> opt_expr

3.79. Executing OPT_EXPR pass (perform const folding).
Optimizing module md5.

yosys> opt_merge -nomux

3.80. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\md5'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

yosys> opt_muxtree

3.81. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \md5..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.82. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \md5.
Performed a total of 0 changes.

yosys> opt_merge

3.83. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\md5'.
Removed a total of 0 cells.

yosys> opt_share

3.84. Executing OPT_SHARE pass.

yosys> opt_dff

3.85. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.86. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \md5..
Removed 0 unused cells and 4795 unused wires.
<suppressed ~7 debug messages>

yosys> opt_expr

3.87. Executing OPT_EXPR pass (perform const folding).
Optimizing module md5.
MAX OPT ITERATION = 1

yosys> opt_ffinv

3.88. Executing OPT_FFINV pass (push inverters through FFs).
Discovering LUTs.
Pushed 1 inverters.

yosys> stat

3.89. Printing statistics.

=== md5 ===

   Number of wires:               1632
   Number of wire bits:           2592
   Number of public wires:          19
   Number of public wire bits:     633
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               2186
     $_DFFE_PN0P_                  649
     $_DFFE_PN1P_                    1
     $_DFF_PN0_                    260
     $lut                         1116
     adder_carry                   160


yosys> shregmap -minlen 8 -maxlen 20

3.90. Executing SHREGMAP pass (map shift registers).
Converted 0 dff cells into 0 shift registers.

yosys> dfflegalize -cell $_DFF_?_ 0 -cell $_DFF_???_ 0 -cell $_DFFE_????_ 0 -cell $_DFFSR_???_ 0 -cell $_DFFSRE_????_ 0 -cell $_DLATCHSR_PPP_ 0

3.91. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

yosys> stat

3.92. Printing statistics.

=== md5 ===

   Number of wires:               1632
   Number of wire bits:           2592
   Number of public wires:          19
   Number of public wire bits:     633
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               2186
     $_DFFE_PN0P_                  649
     $_DFFE_PN1P_                    1
     $_DFF_PN0_                    260
     $lut                         1116
     adder_carry                   160


yosys> techmap -map +/techmap.v -map +/rapidsilicon/genesis/ffs_map.v

3.93. Executing TECHMAP pass (map to technology primitives).

3.93.1. Executing Verilog-2005 frontend: /home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.93.2. Executing Verilog-2005 frontend: /home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/ffs_map.v
Parsing Verilog input from `/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/ffs_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP0N_'.
Generating RTLIL representation for module `\$_DFFE_PN0P_'.
Generating RTLIL representation for module `\$_DFFE_PN0N_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP1N_'.
Generating RTLIL representation for module `\$_DFFE_PN1P_'.
Generating RTLIL representation for module `\$_DFFE_PN1N_'.
Generating RTLIL representation for module `\$_DFFSR_PPP_'.
Generating RTLIL representation for module `\$_DFFSR_PNP_'.
Generating RTLIL representation for module `\$_DFFSR_PNN_'.
Generating RTLIL representation for module `\$_DFFSR_PPN_'.
Generating RTLIL representation for module `\$_DFFSR_NPP_'.
Generating RTLIL representation for module `\$_DFFSR_NNP_'.
Generating RTLIL representation for module `\$_DFFSR_NNN_'.
Generating RTLIL representation for module `\$_DFFSR_NPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PNPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPNP_'.
Generating RTLIL representation for module `\$_DFFSRE_PNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PNPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PPNN_'.
Generating RTLIL representation for module `\$_DFFSRE_PNNN_'.
Generating RTLIL representation for module `\$_DLATCHSR_PPP_'.
Generating RTLIL representation for module `\$_DLATCHSR_NPP_'.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP0N_'.
Generating RTLIL representation for module `\$_DFFE_NN0P_'.
Generating RTLIL representation for module `\$_DFFE_NN0N_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_NP1N_'.
Generating RTLIL representation for module `\$_DFFE_NN1P_'.
Generating RTLIL representation for module `\$_DFFE_NN1N_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNPP_'.
Generating RTLIL representation for module `\$_DFFSRE_NPNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPN_'.
Generating RTLIL representation for module `\$_DFFSRE_NNPN_'.
Generating RTLIL representation for module `\$_DFFSRE_NPNN_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNN_'.
Generating RTLIL representation for module `\$__SHREG_DFF_P_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PN0_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NN0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFF_PN1_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_NN1_'.
Successfully finished Verilog frontend.

3.93.3. Continuing TECHMAP pass.
Using template \$_DFFE_PN0P_ for cells of type $_DFFE_PN0P_.
Using extmapper simplemap for cells of type $lut.
Using template \$_DFFE_PN1P_ for cells of type $_DFFE_PN1P_.
Using template \$_DFF_PN0_ for cells of type $_DFF_PN0_.
No more expansions possible.
<suppressed ~2162 debug messages>

yosys> opt_expr -mux_undef

3.94. Executing OPT_EXPR pass (perform const folding).
Optimizing module md5.
<suppressed ~21710 debug messages>

yosys> simplemap

3.95. Executing SIMPLEMAP pass (map simple cells to gate primitives).

yosys> opt_expr

3.96. Executing OPT_EXPR pass (perform const folding).
Optimizing module md5.

yosys> opt_merge

3.97. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\md5'.
<suppressed ~10650 debug messages>
Removed a total of 3550 cells.

yosys> opt_dff -nodffe -nosdff

3.98. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.99. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \md5..
Removed 1 unused cells and 6726 unused wires.
<suppressed ~2 debug messages>

yosys> opt -nodffe -nosdff

3.100. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.100.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module md5.
<suppressed ~610 debug messages>

yosys> opt_merge -nomux

3.100.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\md5'.
<suppressed ~45 debug messages>
Removed a total of 15 cells.

yosys> opt_muxtree

3.100.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \md5..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.100.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \md5.
Performed a total of 0 changes.

yosys> opt_merge

3.100.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\md5'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.100.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.100.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \md5..
Removed 0 unused cells and 307 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.100.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module md5.

3.100.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.100.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \md5..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.100.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \md5.
Performed a total of 0 changes.

yosys> opt_merge

3.100.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\md5'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.100.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.100.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \md5..

yosys> opt_expr

3.100.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module md5.

3.100.16. Finished OPT passes. (There is nothing left to do.)

yosys> abc -script /home/users/temp_dir/yosys_5z2Omy/abc_tmp_2.scr

3.101. Executing ABC pass (technology mapping using ABC).

3.101.1. Extracting gate netlist of module `\md5' to `<abc-temp-dir>/input.blif'..
Extracted 4384 gates and 5324 wires to a netlist network with 938 inputs and 645 outputs.

3.101.1.1. Executing ABC.
DE:   #PIs = 938  #Luts =  1135  Max Lvl =  27  Avg Lvl =   4.16  [   0.66 sec. at Pass 0]
DE:   #PIs = 938  #Luts =  1135  Max Lvl =  27  Avg Lvl =   4.16  [  26.07 sec. at Pass 1]
DE:   #PIs = 938  #Luts =  1123  Max Lvl =  26  Avg Lvl =   3.82  [   4.91 sec. at Pass 2]
DE:   #PIs = 938  #Luts =  1123  Max Lvl =  26  Avg Lvl =   3.82  [   9.77 sec. at Pass 3]
DE:   #PIs = 938  #Luts =  1119  Max Lvl =  27  Avg Lvl =   4.02  [   5.74 sec. at Pass 4]
DE:   #PIs = 938  #Luts =  1119  Max Lvl =  27  Avg Lvl =   4.02  [   8.71 sec. at Pass 5]
DE:   #PIs = 938  #Luts =  1119  Max Lvl =  27  Avg Lvl =   4.02  [   5.10 sec. at Pass 6]
DE:   #PIs = 938  #Luts =  1119  Max Lvl =  27  Avg Lvl =   4.02  [   7.14 sec. at Pass 7]
DE:   #PIs = 938  #Luts =  1116  Max Lvl =  27  Avg Lvl =   3.92  [   0.91 sec. at Pass 8]

yosys> opt_expr

3.102. Executing OPT_EXPR pass (perform const folding).
Optimizing module md5.

yosys> opt_merge -nomux

3.103. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\md5'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

yosys> opt_muxtree

3.104. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \md5..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.105. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \md5.
Performed a total of 0 changes.

yosys> opt_merge

3.106. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\md5'.
Removed a total of 0 cells.

yosys> opt_share

3.107. Executing OPT_SHARE pass.

yosys> opt_dff

3.108. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.109. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \md5..
Removed 0 unused cells and 3766 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.110. Executing OPT_EXPR pass (perform const folding).
Optimizing module md5.
MAX OPT ITERATION = 1

yosys> hierarchy -check

3.111. Executing HIERARCHY pass (managing design hierarchy).

3.111.1. Analyzing design hierarchy..
Top module:  \md5

3.111.2. Analyzing design hierarchy..
Top module:  \md5
Removed 0 unused modules.

yosys> stat

3.112. Printing statistics.

=== md5 ===

   Number of wires:               1631
   Number of wire bits:           2591
   Number of public wires:          19
   Number of public wire bits:     633
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               2185
     $lut                         1115
     adder_carry                   160
     dffsre                        910


yosys> opt_clean -purge

3.113. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \md5..
Removed 0 unused cells and 3 unused wires.
<suppressed ~3 debug messages>

yosys> write_verilog -noattr -nohex synthesized.v

3.114. Executing Verilog backend.
Dumping module `\md5'.

Warnings: 4 unique messages, 4 total
End of script. Logfile hash: 58c51309df, CPU: user 35.03s system 0.68s, MEM: 89.21 MB peak
Yosys 0.18+10 (git sha1 7a7a25778, gcc 9.1.0 -fPIC -Os)
Time spent: 97% 6x abc (1363 sec), 0% 22x opt_dff (12 sec), ...
real 330.59
user 1284.91
sys 110.83
