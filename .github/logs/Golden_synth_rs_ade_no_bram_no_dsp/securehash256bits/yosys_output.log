
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys-Verific 0.0.49
 Yosys 0.18+10 (git sha1 7a7a25778, gcc 9.1.0 -fPIC -Os)


-- Executing script file `yosys.ys' --
echo on

yosys> plugin -i synth-rs

yosys> read -verific

yosys> read -incdir .

yosys> verific -vlog-incdir .

1. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific May22_SW_Release, released at Wed Jun  1 05:39:28 2022.

yosys> verilog_defaults -add -I.

yosys> read -vhdl sha256_control.vhd sha256_hash_core.vhd sha256_Ki_rom.vhd sha256_Kt_rom.vhd sha256_msg_sch.vhd sha256_padding.vhd sha256_regs.vhd gv_sha256.vhd

yosys> verific -vhdl sha256_control.vhd sha256_hash_core.vhd sha256_Ki_rom.vhd sha256_Kt_rom.vhd sha256_msg_sch.vhd sha256_padding.vhd sha256_regs.vhd gv_sha256.vhd

2. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific May22_SW_Release, released at Wed Jun  1 05:39:28 2022.
VERIFIC-INFO [VHDL-1504] default VHDL library search path is now "/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008"
VERIFIC-COMMENT [VHDL-1481] Analyzing VHDL file 'sha256_control.vhd'
VERIFIC-COMMENT [VHDL-1493] Restoring VHDL unit 'ieee.std_logic_1164' from file '/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008/ieee/std_logic_1164.vdb'
VERIFIC-COMMENT [VHDL-1493] Restoring VHDL unit 'std.standard' from file '/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008/std/standard.vdb'
VERIFIC-COMMENT [VHDL-1493] Restoring VHDL unit 'std.textio' from file '/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008/std/textio.vdb'
VERIFIC-COMMENT [VHDL-1493] Restoring VHDL unit 'ieee.numeric_std' from file '/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008/ieee/numeric_std.vdb'
VERIFIC-INFO [VHDL-1012] sha256_control.vhd:250: analyzing entity 'sha256_control'
VERIFIC-INFO [VHDL-1010] sha256_control.vhd:278: analyzing architecture 'rtl'
VERIFIC-COMMENT [VHDL-1481] Analyzing VHDL file 'sha256_hash_core.vhd'
VERIFIC-INFO [VHDL-1012] sha256_hash_core.vhd:60: analyzing entity 'sha256_hash_core'
VERIFIC-INFO [VHDL-1010] sha256_hash_core.vhd:86: analyzing architecture 'rtl'
VERIFIC-COMMENT [VHDL-1481] Analyzing VHDL file 'sha256_Ki_rom.vhd'
VERIFIC-INFO [VHDL-1012] sha256_Ki_rom.vhd:56: analyzing entity 'sha256_ki_rom'
VERIFIC-INFO [VHDL-1010] sha256_Ki_rom.vhd:69: analyzing architecture 'behavioral'
VERIFIC-COMMENT [VHDL-1481] Analyzing VHDL file 'sha256_Kt_rom.vhd'
VERIFIC-INFO [VHDL-1012] sha256_Kt_rom.vhd:59: analyzing entity 'sha256_kt_rom'
VERIFIC-INFO [VHDL-1010] sha256_Kt_rom.vhd:66: analyzing architecture 'behavioral'
VERIFIC-COMMENT [VHDL-1481] Analyzing VHDL file 'sha256_msg_sch.vhd'
VERIFIC-INFO [VHDL-1012] sha256_msg_sch.vhd:54: analyzing entity 'sha256_msg_sch'
VERIFIC-INFO [VHDL-1010] sha256_msg_sch.vhd:64: analyzing architecture 'rtl'
VERIFIC-COMMENT [VHDL-1481] Analyzing VHDL file 'sha256_padding.vhd'
VERIFIC-INFO [VHDL-1012] sha256_padding.vhd:58: analyzing entity 'sha256_padding'
VERIFIC-INFO [VHDL-1010] sha256_padding.vhd:70: analyzing architecture 'rtl'
VERIFIC-COMMENT [VHDL-1481] Analyzing VHDL file 'sha256_regs.vhd'
VERIFIC-INFO [VHDL-1012] sha256_regs.vhd:55: analyzing entity 'sha256_regs'
VERIFIC-INFO [VHDL-1010] sha256_regs.vhd:95: analyzing architecture 'rtl'
VERIFIC-COMMENT [VHDL-1481] Analyzing VHDL file 'gv_sha256.vhd'
VERIFIC-INFO [VHDL-1012] gv_sha256.vhd:80: analyzing entity 'gv_sha256'
VERIFIC-INFO [VHDL-1010] gv_sha256.vhd:108: analyzing architecture 'rtl'

yosys> synth_rs -top gv_sha256 -tech genesis -goal area -de -no_dsp -no_bram -verilog synthesized.v

3. Executing synth_rs pass: v0.4.58

yosys> read_verilog -lib -specify -nomem2reg +/rapidsilicon/common/cells_sim.v +/rapidsilicon/genesis/cells_sim.v

3.1. Executing Verilog-2005 frontend: /home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v
Parsing Verilog input from `/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\inv'.
Generating RTLIL representation for module `\buff'.
Generating RTLIL representation for module `\logic_0'.
Generating RTLIL representation for module `\logic_1'.
Generating RTLIL representation for module `\gclkbuff'.
Successfully finished Verilog frontend.

3.2. Executing Verilog-2005 frontend: /home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/cells_sim.v
Parsing Verilog input from `/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\dffsre'.
Generating RTLIL representation for module `\dffnsre'.
Generating RTLIL representation for module `\latchsre'.
Generating RTLIL representation for module `\latchnsre'.
Generating RTLIL representation for module `\io_scff'.
Generating RTLIL representation for module `\scff'.
Generating RTLIL representation for module `\sh_dff'.
Generating RTLIL representation for module `\adder_carry'.
Generating RTLIL representation for module `\sdffr'.
Generating RTLIL representation for module `\sdffs'.
Generating RTLIL representation for module `\TDP_BRAM18'.
Generating RTLIL representation for module `\TDP36K'.
Generating RTLIL representation for module `\RS_DSP1'.
Generating RTLIL representation for module `\RS_DSP2'.
Generating RTLIL representation for module `\RS_DSP2_MULT'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGIN_REGOUT'.
Generating RTLIL representation for module `\dsp_t1_sim'.
Generating RTLIL representation for module `\dsp_t1_20x18x64'.
Generating RTLIL representation for module `\dsp_t1_10x9x32'.
Successfully finished Verilog frontend.

yosys> hierarchy -check -top gv_sha256

3.3. Executing HIERARCHY pass (managing design hierarchy).
VERIFIC-INFO [VHDL-1067] gv_sha256.vhd:80: processing 'gv_sha256(rtl)'
VERIFIC-INFO [VHDL-1067] sha256_control.vhd:250: processing 'sha256_control(rtl)'
VERIFIC-INFO [VHDL-1172] sha256_control.vhd:553: 'others' clause is never selected
VERIFIC-INFO [VHDL-1067] sha256_padding.vhd:58: processing 'sha256_padding(rtl)'
VERIFIC-INFO [VHDL-1067] sha256_msg_sch.vhd:54: processing 'sha256_msg_sch(rtl)'
VERIFIC-INFO [VHDL-1067] sha256_hash_core.vhd:60: processing 'sha256_hash_core(rtl)'
VERIFIC-INFO [VHDL-1067] sha256_regs.vhd:55: processing 'sha256_regs(rtl)'
VERIFIC-INFO [VHDL-1067] sha256_Kt_rom.vhd:59: processing 'sha256_kt_rom(behavioral)'
VERIFIC-INFO [VHDL-1067] sha256_Ki_rom.vhd:56: processing 'sha256_ki_rom(behavioral)'
Importing module gv_sha256.
Importing module sha256_control(rtl).
Importing module sha256_hash_core(rtl).
Importing module sha256_ki_rom(behavioral).
Importing module sha256_kt_rom(behavioral).
Importing module sha256_msg_sch(rtl).
Importing module sha256_padding(rtl).
Importing module sha256_regs(rtl).

3.3.1. Analyzing design hierarchy..
Top module:  \gv_sha256
Used module:     \sha256_ki_rom(behavioral)
Used module:     \sha256_kt_rom(behavioral)
Used module:     \sha256_regs(rtl)
Used module:     \sha256_hash_core(rtl)
Used module:     \sha256_msg_sch(rtl)
Used module:     \sha256_padding(rtl)
Used module:     \sha256_control(rtl)

3.3.2. Analyzing design hierarchy..
Top module:  \gv_sha256
Used module:     \sha256_ki_rom(behavioral)
Used module:     \sha256_kt_rom(behavioral)
Used module:     \sha256_regs(rtl)
Used module:     \sha256_hash_core(rtl)
Used module:     \sha256_msg_sch(rtl)
Used module:     \sha256_padding(rtl)
Used module:     \sha256_control(rtl)
Removed 0 unused modules.

yosys> proc

3.4. Executing PROC pass (convert processes to netlists).

yosys> proc_clean

3.4.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> proc_rmdead

3.4.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

yosys> proc_prune

3.4.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

yosys> proc_init

3.4.4. Executing PROC_INIT pass (extract init attributes).

yosys> proc_arst

3.4.5. Executing PROC_ARST pass (detect async resets in processes).

yosys> proc_rom

3.4.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

yosys> proc_mux

3.4.7. Executing PROC_MUX pass (convert decision trees to multiplexers).

yosys> proc_dlatch

3.4.8. Executing PROC_DLATCH pass (convert process syncs to latches).

yosys> proc_dff

3.4.9. Executing PROC_DFF pass (convert process syncs to FFs).

yosys> proc_memwr

3.4.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

yosys> proc_clean

3.4.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> opt_expr -keepdc

3.4.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module sha256_regs(rtl).
Optimizing module sha256_padding(rtl).
Optimizing module sha256_msg_sch(rtl).
Optimizing module sha256_kt_rom(behavioral).
<suppressed ~1 debug messages>
Optimizing module sha256_ki_rom(behavioral).
<suppressed ~8 debug messages>
Optimizing module sha256_hash_core(rtl).
Optimizing module sha256_control(rtl).
<suppressed ~16 debug messages>
Optimizing module gv_sha256.

yosys> bmuxmap

3.5. Executing BMUXMAP pass.

yosys> demuxmap

3.6. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> flatten

3.7. Executing FLATTEN pass (flatten design).
Deleting now unused module sha256_control(rtl).
Deleting now unused module sha256_hash_core(rtl).
Deleting now unused module sha256_ki_rom(behavioral).
Deleting now unused module sha256_kt_rom(behavioral).
Deleting now unused module sha256_msg_sch(rtl).
Deleting now unused module sha256_padding(rtl).
Deleting now unused module sha256_regs(rtl).
<suppressed ~7 debug messages>

yosys> bmuxmap

3.8. Executing BMUXMAP pass.

yosys> demuxmap

3.9. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> tribuf -logic

3.10. Executing TRIBUF pass.

yosys> deminout

3.11. Executing DEMINOUT pass (demote inout ports to input or output).

yosys> opt_expr

3.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module gv_sha256.
<suppressed ~30 debug messages>

yosys> opt_clean

3.13. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gv_sha256..
Removed 0 unused cells and 284 unused wires.
<suppressed ~202 debug messages>

yosys> check

3.14. Executing CHECK pass (checking for obvious problems).
Checking module gv_sha256...
Found and reported 0 problems.

yosys> opt -nodffe -nosdff

3.15. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module gv_sha256.

yosys> opt_merge -nomux

3.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gv_sha256'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.15.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \gv_sha256..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port A of cell $flatten\Inst_sha256_control.$auto$bmuxmap.cc:60:execute$1205: \Inst_sha256_control.hash_control_st_reg -> 3'110
      Replacing known input bits on port B of cell $flatten\Inst_sha256_control.$auto$bmuxmap.cc:60:execute$1204: \Inst_sha256_control.hash_control_st_reg -> 3'101
      Replacing known input bits on port A of cell $flatten\Inst_sha256_control.$verific$mux_116$sha256_control.vhd:537$278: \Inst_sha256_control.hash_control_st_reg -> 3'100
      Replacing known input bits on port A of cell $flatten\Inst_sha256_control.$verific$mux_81$sha256_control.vhd:492$263: \Inst_sha256_control.hash_control_st_reg -> 3'010
      Replacing known input bits on port A of cell $flatten\Inst_sha256_control.$verific$mux_74$sha256_control.vhd:481$260: \Inst_sha256_control.hash_control_st_reg -> 3'001
      Replacing known input bits on port A of cell $flatten\Inst_sha256_control.$verific$mux_72$sha256_control.vhd:480$258: \Inst_sha256_control.hash_control_st_reg -> 3'001
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~66 debug messages>

yosys> opt_reduce

3.15.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \gv_sha256.
Performed a total of 0 changes.

yosys> opt_merge

3.15.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gv_sha256'.
<suppressed ~117 debug messages>
Removed a total of 39 cells.

yosys> opt_dff -nodffe -nosdff

3.15.6. Executing OPT_DFF pass (perform DFF optimizations).
Removing never-active async load on $flatten\Inst_sha256_regs.$verific$reg_H7_reg$sha256_regs.vhd:144$1048 ($aldff) from module gv_sha256.
Removing never-active async load on $flatten\Inst_sha256_regs.$verific$reg_H6_reg$sha256_regs.vhd:144$1047 ($aldff) from module gv_sha256.
Removing never-active async load on $flatten\Inst_sha256_regs.$verific$reg_H5_reg$sha256_regs.vhd:144$1046 ($aldff) from module gv_sha256.
Removing never-active async load on $flatten\Inst_sha256_regs.$verific$reg_H4_reg$sha256_regs.vhd:144$1045 ($aldff) from module gv_sha256.
Removing never-active async load on $flatten\Inst_sha256_regs.$verific$reg_H3_reg$sha256_regs.vhd:144$1044 ($aldff) from module gv_sha256.
Removing never-active async load on $flatten\Inst_sha256_regs.$verific$reg_H2_reg$sha256_regs.vhd:144$1043 ($aldff) from module gv_sha256.
Removing never-active async load on $flatten\Inst_sha256_regs.$verific$reg_H1_reg$sha256_regs.vhd:144$1042 ($aldff) from module gv_sha256.
Removing never-active async load on $flatten\Inst_sha256_regs.$verific$reg_H0_reg$sha256_regs.vhd:144$1041 ($aldff) from module gv_sha256.
Removing never-active async load on $flatten\Inst_sha256_msg_sch.$verific$r9_reg$sha256_msg_sch.vhd:141$865 ($aldff) from module gv_sha256.
Removing never-active async load on $flatten\Inst_sha256_msg_sch.$verific$r8_reg$sha256_msg_sch.vhd:141$864 ($aldff) from module gv_sha256.
Removing never-active async load on $flatten\Inst_sha256_msg_sch.$verific$r7_reg$sha256_msg_sch.vhd:141$863 ($aldff) from module gv_sha256.
Removing never-active async load on $flatten\Inst_sha256_msg_sch.$verific$r6_reg$sha256_msg_sch.vhd:141$862 ($aldff) from module gv_sha256.
Removing never-active async load on $flatten\Inst_sha256_msg_sch.$verific$r5_reg$sha256_msg_sch.vhd:141$861 ($aldff) from module gv_sha256.
Removing never-active async load on $flatten\Inst_sha256_msg_sch.$verific$r4_reg$sha256_msg_sch.vhd:141$860 ($aldff) from module gv_sha256.
Removing never-active async load on $flatten\Inst_sha256_msg_sch.$verific$r3_reg$sha256_msg_sch.vhd:141$859 ($aldff) from module gv_sha256.
Removing never-active async load on $flatten\Inst_sha256_msg_sch.$verific$r2_reg$sha256_msg_sch.vhd:141$858 ($aldff) from module gv_sha256.
Removing never-active async load on $flatten\Inst_sha256_msg_sch.$verific$r1_reg$sha256_msg_sch.vhd:141$857 ($aldff) from module gv_sha256.
Removing never-active async load on $flatten\Inst_sha256_msg_sch.$verific$r15_reg$sha256_msg_sch.vhd:141$871 ($aldff) from module gv_sha256.
Removing never-active async load on $flatten\Inst_sha256_msg_sch.$verific$r14_reg$sha256_msg_sch.vhd:141$870 ($aldff) from module gv_sha256.
Removing never-active async load on $flatten\Inst_sha256_msg_sch.$verific$r13_reg$sha256_msg_sch.vhd:141$869 ($aldff) from module gv_sha256.
Removing never-active async load on $flatten\Inst_sha256_msg_sch.$verific$r12_reg$sha256_msg_sch.vhd:141$868 ($aldff) from module gv_sha256.
Removing never-active async load on $flatten\Inst_sha256_msg_sch.$verific$r11_reg$sha256_msg_sch.vhd:141$867 ($aldff) from module gv_sha256.
Removing never-active async load on $flatten\Inst_sha256_msg_sch.$verific$r10_reg$sha256_msg_sch.vhd:141$866 ($aldff) from module gv_sha256.
Removing never-active async load on $flatten\Inst_sha256_msg_sch.$verific$r0_reg$sha256_msg_sch.vhd:141$856 ($aldff) from module gv_sha256.
Removing never-active async load on $flatten\Inst_sha256_hash_core.$verific$reg_h_reg$sha256_hash_core.vhd:142$441 ($aldff) from module gv_sha256.
Removing never-active async load on $flatten\Inst_sha256_hash_core.$verific$reg_g_reg$sha256_hash_core.vhd:142$440 ($aldff) from module gv_sha256.
Removing never-active async load on $flatten\Inst_sha256_hash_core.$verific$reg_f_reg$sha256_hash_core.vhd:142$439 ($aldff) from module gv_sha256.
Removing never-active async load on $flatten\Inst_sha256_hash_core.$verific$reg_e_reg$sha256_hash_core.vhd:142$438 ($aldff) from module gv_sha256.
Removing never-active async load on $flatten\Inst_sha256_hash_core.$verific$reg_d_reg$sha256_hash_core.vhd:142$437 ($aldff) from module gv_sha256.
Removing never-active async load on $flatten\Inst_sha256_hash_core.$verific$reg_c_reg$sha256_hash_core.vhd:142$436 ($aldff) from module gv_sha256.
Removing never-active async load on $flatten\Inst_sha256_hash_core.$verific$reg_b_reg$sha256_hash_core.vhd:142$435 ($aldff) from module gv_sha256.
Removing never-active async load on $flatten\Inst_sha256_hash_core.$verific$reg_a_reg$sha256_hash_core.vhd:142$434 ($aldff) from module gv_sha256.
Removing never-active async load on $flatten\Inst_sha256_control.$verific$st_cnt_reg_reg$sha256_control.vhd:403$243 ($aldff) from module gv_sha256.
Removing never-active async load on $flatten\Inst_sha256_control.$verific$msg_bit_cnt_reg_reg$sha256_control.vhd:390$236 ($aldff) from module gv_sha256.
Removing never-active async load on $flatten\Inst_sha256_control.$verific$hash_control_st_reg_reg$sha256_control.vhd:365$221 ($aldff) from module gv_sha256.

yosys> opt_clean

3.15.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gv_sha256..
Removed 0 unused cells and 13 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.15.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module gv_sha256.

3.15.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.15.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \gv_sha256..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~70 debug messages>

yosys> opt_reduce

3.15.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \gv_sha256.
Performed a total of 0 changes.

yosys> opt_merge

3.15.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gv_sha256'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.15.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.15.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gv_sha256..

yosys> opt_expr

3.15.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module gv_sha256.

3.15.16. Finished OPT passes. (There is nothing left to do.)

yosys> fsm -encoding binary

3.16. Executing FSM pass (extract and optimize FSM).

yosys> fsm_detect

3.16.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking gv_sha256.Inst_sha256_control.hash_control_st_reg as FSM state register:
    Users of register don't seem to benefit from recoding.
    Register has an initialization value.

yosys> fsm_extract

3.16.2. Executing FSM_EXTRACT pass (extracting FSM from design).

yosys> fsm_opt

3.16.3. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> opt_clean

3.16.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gv_sha256..

yosys> fsm_opt

3.16.5. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> fsm_recode -encoding binary

3.16.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

yosys> fsm_info

3.16.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

yosys> fsm_map

3.16.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

yosys> opt -sat

3.17. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.17.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module gv_sha256.

yosys> opt_merge -nomux

3.17.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gv_sha256'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.17.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \gv_sha256..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~70 debug messages>

yosys> opt_reduce

3.17.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \gv_sha256.
Performed a total of 0 changes.

yosys> opt_merge

3.17.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gv_sha256'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.17.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $flatten\Inst_sha256_regs.$verific$reg_H7_reg$sha256_regs.vhd:144$1048 ($dff) from module gv_sha256 (D = \Inst_sha256_hash_core.H_i, Q = \Inst_sha256_regs.reg_H7).
Adding EN signal on $flatten\Inst_sha256_regs.$verific$reg_H6_reg$sha256_regs.vhd:144$1047 ($dff) from module gv_sha256 (D = \Inst_sha256_hash_core.G_i, Q = \Inst_sha256_regs.reg_H6).
Adding EN signal on $flatten\Inst_sha256_regs.$verific$reg_H5_reg$sha256_regs.vhd:144$1046 ($dff) from module gv_sha256 (D = \Inst_sha256_hash_core.F_i, Q = \Inst_sha256_regs.reg_H5).
Adding EN signal on $flatten\Inst_sha256_regs.$verific$reg_H4_reg$sha256_regs.vhd:144$1045 ($dff) from module gv_sha256 (D = \Inst_sha256_hash_core.E_i, Q = \Inst_sha256_regs.reg_H4).
Adding EN signal on $flatten\Inst_sha256_regs.$verific$reg_H3_reg$sha256_regs.vhd:144$1044 ($dff) from module gv_sha256 (D = \Inst_sha256_hash_core.D_i, Q = \Inst_sha256_regs.reg_H3).
Adding EN signal on $flatten\Inst_sha256_regs.$verific$reg_H2_reg$sha256_regs.vhd:144$1043 ($dff) from module gv_sha256 (D = \Inst_sha256_hash_core.C_i, Q = \Inst_sha256_regs.reg_H2).
Adding EN signal on $flatten\Inst_sha256_regs.$verific$reg_H1_reg$sha256_regs.vhd:144$1042 ($dff) from module gv_sha256 (D = \Inst_sha256_hash_core.B_i, Q = \Inst_sha256_regs.reg_H1).
Adding EN signal on $flatten\Inst_sha256_regs.$verific$reg_H0_reg$sha256_regs.vhd:144$1041 ($dff) from module gv_sha256 (D = \Inst_sha256_hash_core.A_i, Q = \Inst_sha256_regs.reg_H0).
Adding EN signal on $flatten\Inst_sha256_msg_sch.$verific$r9_reg$sha256_msg_sch.vhd:141$865 ($dff) from module gv_sha256 (D = \Inst_sha256_msg_sch.r10, Q = \Inst_sha256_msg_sch.r9).
Adding EN signal on $flatten\Inst_sha256_msg_sch.$verific$r8_reg$sha256_msg_sch.vhd:141$864 ($dff) from module gv_sha256 (D = \Inst_sha256_msg_sch.r9, Q = \Inst_sha256_msg_sch.r8).
Adding EN signal on $flatten\Inst_sha256_msg_sch.$verific$r7_reg$sha256_msg_sch.vhd:141$863 ($dff) from module gv_sha256 (D = \Inst_sha256_msg_sch.r8, Q = \Inst_sha256_msg_sch.r7).
Adding EN signal on $flatten\Inst_sha256_msg_sch.$verific$r6_reg$sha256_msg_sch.vhd:141$862 ($dff) from module gv_sha256 (D = \Inst_sha256_msg_sch.r7, Q = \Inst_sha256_msg_sch.r6).
Adding EN signal on $flatten\Inst_sha256_msg_sch.$verific$r5_reg$sha256_msg_sch.vhd:141$861 ($dff) from module gv_sha256 (D = \Inst_sha256_msg_sch.r6, Q = \Inst_sha256_msg_sch.r5).
Adding EN signal on $flatten\Inst_sha256_msg_sch.$verific$r4_reg$sha256_msg_sch.vhd:141$860 ($dff) from module gv_sha256 (D = \Inst_sha256_msg_sch.r5, Q = \Inst_sha256_msg_sch.r4).
Adding EN signal on $flatten\Inst_sha256_msg_sch.$verific$r3_reg$sha256_msg_sch.vhd:141$859 ($dff) from module gv_sha256 (D = \Inst_sha256_msg_sch.r4, Q = \Inst_sha256_msg_sch.r3).
Adding EN signal on $flatten\Inst_sha256_msg_sch.$verific$r2_reg$sha256_msg_sch.vhd:141$858 ($dff) from module gv_sha256 (D = \Inst_sha256_msg_sch.r3, Q = \Inst_sha256_msg_sch.r2).
Adding EN signal on $flatten\Inst_sha256_msg_sch.$verific$r1_reg$sha256_msg_sch.vhd:141$857 ($dff) from module gv_sha256 (D = \Inst_sha256_msg_sch.r2, Q = \Inst_sha256_msg_sch.r1).
Adding EN signal on $flatten\Inst_sha256_msg_sch.$verific$r15_reg$sha256_msg_sch.vhd:141$871 ($dff) from module gv_sha256 (D = \Inst_sha256_msg_sch.r0, Q = \Inst_sha256_msg_sch.r15).
Adding EN signal on $flatten\Inst_sha256_msg_sch.$verific$r14_reg$sha256_msg_sch.vhd:141$870 ($dff) from module gv_sha256 (D = \Inst_sha256_msg_sch.r15, Q = \Inst_sha256_msg_sch.r14).
Adding EN signal on $flatten\Inst_sha256_msg_sch.$verific$r13_reg$sha256_msg_sch.vhd:141$869 ($dff) from module gv_sha256 (D = \Inst_sha256_msg_sch.r14, Q = \Inst_sha256_msg_sch.r13).
Adding EN signal on $flatten\Inst_sha256_msg_sch.$verific$r12_reg$sha256_msg_sch.vhd:141$868 ($dff) from module gv_sha256 (D = \Inst_sha256_msg_sch.r13, Q = \Inst_sha256_msg_sch.r12).
Adding EN signal on $flatten\Inst_sha256_msg_sch.$verific$r11_reg$sha256_msg_sch.vhd:141$867 ($dff) from module gv_sha256 (D = \Inst_sha256_msg_sch.r12, Q = \Inst_sha256_msg_sch.r11).
Adding EN signal on $flatten\Inst_sha256_msg_sch.$verific$r10_reg$sha256_msg_sch.vhd:141$866 ($dff) from module gv_sha256 (D = \Inst_sha256_msg_sch.r11, Q = \Inst_sha256_msg_sch.r10).
Adding EN signal on $flatten\Inst_sha256_msg_sch.$verific$r0_reg$sha256_msg_sch.vhd:141$856 ($dff) from module gv_sha256 (D = \Inst_sha256_hash_core.Wt_i, Q = \Inst_sha256_msg_sch.r0).
Adding EN signal on $flatten\Inst_sha256_hash_core.$verific$reg_h_reg$sha256_hash_core.vhd:142$441 ($dff) from module gv_sha256 (D = \Inst_sha256_hash_core.next_reg_h, Q = \Inst_sha256_hash_core.reg_h).
Adding EN signal on $flatten\Inst_sha256_hash_core.$verific$reg_g_reg$sha256_hash_core.vhd:142$440 ($dff) from module gv_sha256 (D = \Inst_sha256_hash_core.next_reg_g, Q = \Inst_sha256_hash_core.reg_g).
Adding EN signal on $flatten\Inst_sha256_hash_core.$verific$reg_f_reg$sha256_hash_core.vhd:142$439 ($dff) from module gv_sha256 (D = \Inst_sha256_hash_core.next_reg_f, Q = \Inst_sha256_hash_core.reg_f).
Adding EN signal on $flatten\Inst_sha256_hash_core.$verific$reg_e_reg$sha256_hash_core.vhd:142$438 ($dff) from module gv_sha256 (D = \Inst_sha256_hash_core.next_reg_e, Q = \Inst_sha256_hash_core.reg_e).
Adding EN signal on $flatten\Inst_sha256_hash_core.$verific$reg_d_reg$sha256_hash_core.vhd:142$437 ($dff) from module gv_sha256 (D = \Inst_sha256_hash_core.next_reg_d, Q = \Inst_sha256_hash_core.reg_d).
Adding EN signal on $flatten\Inst_sha256_hash_core.$verific$reg_c_reg$sha256_hash_core.vhd:142$436 ($dff) from module gv_sha256 (D = \Inst_sha256_hash_core.next_reg_c, Q = \Inst_sha256_hash_core.reg_c).
Adding EN signal on $flatten\Inst_sha256_hash_core.$verific$reg_b_reg$sha256_hash_core.vhd:142$435 ($dff) from module gv_sha256 (D = \Inst_sha256_hash_core.next_reg_b, Q = \Inst_sha256_hash_core.reg_b).
Adding EN signal on $flatten\Inst_sha256_hash_core.$verific$reg_a_reg$sha256_hash_core.vhd:142$434 ($dff) from module gv_sha256 (D = \Inst_sha256_hash_core.next_reg_a, Q = \Inst_sha256_hash_core.reg_a).
Adding SRST signal on $flatten\Inst_sha256_control.$verific$st_cnt_reg_reg$sha256_control.vhd:403$243 ($dff) from module gv_sha256 (D = $flatten\Inst_sha256_control.$verific$n386$171, Q = \Inst_sha256_control.st_cnt_reg, rval = 7'0000000).
Adding EN signal on $auto$ff.cc:262:slice$1313 ($sdff) from module gv_sha256 (D = \Inst_sha256_control.st_cnt_next, Q = \Inst_sha256_control.st_cnt_reg).
Adding SRST signal on $flatten\Inst_sha256_control.$verific$sha_last_blk_reg_reg$sha256_control.vhd:377$229 ($dff) from module gv_sha256 (D = $flatten\Inst_sha256_control.$verific$n36$115, Q = \Inst_sha256_control.sha_last_blk_reg, rval = 1'0).
Adding EN signal on $auto$ff.cc:262:slice$1315 ($sdff) from module gv_sha256 (D = \Inst_sha256_control.sha_last_blk_next, Q = \Inst_sha256_control.sha_last_blk_reg).
Adding SRST signal on $flatten\Inst_sha256_control.$verific$padding_reg_reg$sha256_control.vhd:377$230 ($dff) from module gv_sha256 (D = $flatten\Inst_sha256_control.$verific$n38$117, Q = \Inst_sha256_control.padding_reg, rval = 1'0).
Adding EN signal on $auto$ff.cc:262:slice$1317 ($sdff) from module gv_sha256 (D = $flatten\Inst_sha256_control.$auto$bmuxmap.cc:58:execute$1156 [1], Q = \Inst_sha256_control.padding_reg).
Adding SRST signal on $flatten\Inst_sha256_control.$verific$pad_one_reg_reg$sha256_control.vhd:417$249 ($dff) from module gv_sha256 (D = $flatten\Inst_sha256_control.$verific$n413$124, Q = \Inst_sha256_control.pad_one_reg, rval = 1'1).
Adding EN signal on $auto$ff.cc:262:slice$1325 ($sdff) from module gv_sha256 (D = 1'0, Q = \Inst_sha256_control.pad_one_reg).
Adding SRST signal on $flatten\Inst_sha256_control.$verific$msg_bit_cnt_reg_reg$sha256_control.vhd:390$236 ($dff) from module gv_sha256 (D = $flatten\Inst_sha256_control.$verific$n173$167, Q = \Inst_sha256_control.msg_bit_cnt_reg, rval = 64'0000000000000000000000000000000000000000000000000000000000000000).
Adding EN signal on $auto$ff.cc:262:slice$1329 ($sdff) from module gv_sha256 (D = \Inst_sha256_control.msg_bit_cnt_next, Q = \Inst_sha256_control.msg_bit_cnt_reg).
Adding SRST signal on $flatten\Inst_sha256_control.$verific$hash_control_st_reg_reg$sha256_control.vhd:365$221 ($dff) from module gv_sha256 (D = $flatten\Inst_sha256_control.$verific$n20$163 [2:1], Q = \Inst_sha256_control.hash_control_st_reg [2:1], rval = 2'00).
Adding SRST signal on $flatten\Inst_sha256_control.$verific$hash_control_st_reg_reg$sha256_control.vhd:365$221 ($dff) from module gv_sha256 (D = $flatten\Inst_sha256_control.$verific$n16$162 [0], Q = \Inst_sha256_control.hash_control_st_reg [0], rval = 1'0).
Adding EN signal on $auto$ff.cc:262:slice$1332 ($sdff) from module gv_sha256 (D = \Inst_sha256_control.hash_control_st_next [0], Q = \Inst_sha256_control.hash_control_st_reg [0]).
Adding EN signal on $auto$ff.cc:262:slice$1331 ($sdff) from module gv_sha256 (D = $flatten\Inst_sha256_control.$verific$n20$163 [2:1], Q = \Inst_sha256_control.hash_control_st_reg [2:1]).
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$1330 ($sdffe) from module gv_sha256.
Setting constant 0-bit at position 1 on $auto$ff.cc:262:slice$1330 ($sdffe) from module gv_sha256.
Setting constant 0-bit at position 2 on $auto$ff.cc:262:slice$1330 ($sdffe) from module gv_sha256.

yosys> opt_clean

3.17.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gv_sha256..
Removed 45 unused cells and 45 unused wires.
<suppressed ~48 debug messages>

yosys> opt_expr

3.17.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module gv_sha256.
<suppressed ~2 debug messages>

3.17.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.17.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \gv_sha256..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~43 debug messages>

yosys> opt_reduce

3.17.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \gv_sha256.
Performed a total of 0 changes.

yosys> opt_merge

3.17.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gv_sha256'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

yosys> opt_dff -sat

3.17.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.17.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gv_sha256..

yosys> opt_expr

3.17.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module gv_sha256.

3.17.16. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.17.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \gv_sha256..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~43 debug messages>

yosys> opt_reduce

3.17.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \gv_sha256.
Performed a total of 0 changes.

yosys> opt_merge

3.17.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gv_sha256'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.17.20. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.17.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gv_sha256..

yosys> opt_expr

3.17.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module gv_sha256.

3.17.23. Finished OPT passes. (There is nothing left to do.)

yosys> wreduce -keepdc

3.18. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 2) from port A of cell gv_sha256.$flatten\Inst_sha256_padding.$verific$equal_35$sha256_padding.vhd:138$968 ($eq).
Removed top 3 bits (of 32) from port A of cell gv_sha256.$flatten\Inst_sha256_msg_sch.$verific$xor_75$../vhdl_packages/vhdl_2008/src/numeric_std-body.vhdl:3548$896 ($xor).
Removed top 10 bits (of 32) from port A of cell gv_sha256.$flatten\Inst_sha256_msg_sch.$verific$xor_80$../vhdl_packages/vhdl_2008/src/numeric_std-body.vhdl:3548$901 ($xor).
Removed top 3 bits (of 6) from port A of cell gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$equal_10$sha256_Kt_rom.vhd:84$655 ($eq).
Removed top 3 bits (of 6) from port A of cell gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$equal_11$sha256_Kt_rom.vhd:85$656 ($eq).
Removed top 2 bits (of 6) from port A of cell gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$equal_12$sha256_Kt_rom.vhd:86$657 ($eq).
Removed top 2 bits (of 6) from port A of cell gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$equal_13$sha256_Kt_rom.vhd:87$658 ($eq).
Removed top 2 bits (of 6) from port A of cell gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$equal_14$sha256_Kt_rom.vhd:88$659 ($eq).
Removed top 2 bits (of 6) from port A of cell gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$equal_15$sha256_Kt_rom.vhd:89$660 ($eq).
Removed top 2 bits (of 6) from port A of cell gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$equal_16$sha256_Kt_rom.vhd:90$661 ($eq).
Removed top 2 bits (of 6) from port A of cell gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$equal_17$sha256_Kt_rom.vhd:91$662 ($eq).
Removed top 2 bits (of 6) from port A of cell gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$equal_18$sha256_Kt_rom.vhd:92$663 ($eq).
Removed top 2 bits (of 6) from port A of cell gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$equal_19$sha256_Kt_rom.vhd:93$664 ($eq).
Removed top 1 bits (of 6) from port A of cell gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$equal_20$sha256_Kt_rom.vhd:94$665 ($eq).
Removed top 1 bits (of 6) from port A of cell gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$equal_21$sha256_Kt_rom.vhd:95$666 ($eq).
Removed top 1 bits (of 6) from port A of cell gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$equal_22$sha256_Kt_rom.vhd:96$667 ($eq).
Removed top 1 bits (of 6) from port A of cell gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$equal_23$sha256_Kt_rom.vhd:97$668 ($eq).
Removed top 1 bits (of 6) from port A of cell gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$equal_24$sha256_Kt_rom.vhd:98$669 ($eq).
Removed top 1 bits (of 6) from port A of cell gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$equal_25$sha256_Kt_rom.vhd:99$670 ($eq).
Removed top 1 bits (of 6) from port A of cell gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$equal_26$sha256_Kt_rom.vhd:100$671 ($eq).
Removed top 1 bits (of 6) from port A of cell gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$equal_27$sha256_Kt_rom.vhd:101$672 ($eq).
Removed top 1 bits (of 6) from port A of cell gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$equal_28$sha256_Kt_rom.vhd:102$673 ($eq).
Removed top 1 bits (of 6) from port A of cell gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$equal_29$sha256_Kt_rom.vhd:103$674 ($eq).
Removed top 1 bits (of 6) from port A of cell gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$equal_30$sha256_Kt_rom.vhd:104$675 ($eq).
Removed top 1 bits (of 6) from port A of cell gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$equal_31$sha256_Kt_rom.vhd:105$676 ($eq).
Removed top 1 bits (of 6) from port A of cell gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$equal_32$sha256_Kt_rom.vhd:106$677 ($eq).
Removed top 1 bits (of 6) from port A of cell gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$equal_33$sha256_Kt_rom.vhd:107$678 ($eq).
Removed top 1 bits (of 6) from port A of cell gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$equal_34$sha256_Kt_rom.vhd:108$679 ($eq).
Removed top 1 bits (of 6) from port A of cell gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$equal_35$sha256_Kt_rom.vhd:109$680 ($eq).
Removed top 5 bits (of 6) from port A of cell gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$equal_5$sha256_Kt_rom.vhd:79$650 ($eq).
Removed top 4 bits (of 6) from port A of cell gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$equal_6$sha256_Kt_rom.vhd:80$651 ($eq).
Removed top 4 bits (of 6) from port A of cell gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$equal_7$sha256_Kt_rom.vhd:81$652 ($eq).
Removed top 3 bits (of 6) from port A of cell gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$equal_8$sha256_Kt_rom.vhd:82$653 ($eq).
Removed top 3 bits (of 6) from port A of cell gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$equal_9$sha256_Kt_rom.vhd:83$654 ($eq).
Removed top 1 bits (of 32) from mux cell gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$mux_68$sha256_Kt_rom.vhd:139$712 ($mux).
Removed top 1 bits (of 32) from mux cell gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$mux_69$sha256_Kt_rom.vhd:138$713 ($mux).
Removed top 1 bits (of 32) from mux cell gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$mux_70$sha256_Kt_rom.vhd:137$714 ($mux).
Removed top 1 bits (of 32) from mux cell gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$mux_71$sha256_Kt_rom.vhd:136$715 ($mux).
Removed top 1 bits (of 2) from port B of cell gv_sha256.$auto$opt_dff.cc:195:make_patterns_logic$1322 ($ne).
Removed top 2 bits (of 6) from mux cell gv_sha256.$flatten\Inst_sha256_control.$auto$bmuxmap.cc:60:execute$1098 ($mux).
Removed top 1 bits (of 6) from mux cell gv_sha256.$flatten\Inst_sha256_control.$auto$bmuxmap.cc:60:execute$1099 ($mux).
Removed top 1 bits (of 6) from mux cell gv_sha256.$flatten\Inst_sha256_control.$auto$bmuxmap.cc:60:execute$1101 ($mux).
Removed top 1 bits (of 6) from mux cell gv_sha256.$flatten\Inst_sha256_control.$auto$bmuxmap.cc:60:execute$1107 ($mux).
Removed top 1 bits (of 6) from mux cell gv_sha256.$flatten\Inst_sha256_control.$auto$bmuxmap.cc:60:execute$1108 ($mux).
Removed top 1 bits (of 6) from mux cell gv_sha256.$flatten\Inst_sha256_control.$auto$bmuxmap.cc:60:execute$1112 ($mux).
Removed top 1 bits (of 4) from mux cell gv_sha256.$flatten\Inst_sha256_control.$auto$bmuxmap.cc:60:execute$1118 ($mux).
Removed top 58 bits (of 64) from port B of cell gv_sha256.$flatten\Inst_sha256_control.$verific$add_175$sha256_control.vhd:607$321 ($add).
Removed top 6 bits (of 7) from port B of cell gv_sha256.$flatten\Inst_sha256_control.$verific$add_184$../vhdl_packages/vhdl_2008/src/numeric_std-body.vhdl:482$327 ($add).
Removed top 3 bits (of 7) from port B of cell gv_sha256.$flatten\Inst_sha256_control.$verific$equal_108$sha256_control.vhd:532$272 ($eq).
Removed top 3 bits (of 7) from port B of cell gv_sha256.$flatten\Inst_sha256_control.$verific$equal_112$sha256_control.vhd:535$275 ($eq).
Removed top 3 bits (of 7) from port B of cell gv_sha256.$flatten\Inst_sha256_control.$verific$equal_70$sha256_control.vhd:478$256 ($eq).
Removed top 1 bits (of 7) from port B of cell gv_sha256.$flatten\Inst_sha256_control.$verific$equal_79$sha256_control.vhd:490$261 ($eq).
Removed top 2 bits (of 7) from port B of cell gv_sha256.$flatten\Inst_sha256_control.$verific$equal_93$sha256_control.vhd:513$267 ($eq).
Removed top 1 bits (of 2) from mux cell gv_sha256.$flatten\Inst_sha256_control.$verific$mux_114$sha256_control.vhd:537$276 ($mux).
Removed top 1 bits (of 3) from mux cell gv_sha256.$flatten\Inst_sha256_control.$verific$mux_72$sha256_control.vhd:480$258 ($mux).
Removed top 2 bits (of 3) from mux cell gv_sha256.$flatten\Inst_sha256_control.$verific$mux_81$sha256_control.vhd:492$263 ($mux).
Removed top 1 bits (of 8) from wire gv_sha256.$flatten\Inst_sha256_control.$auto$bmuxmap.cc:58:execute$1116.
Removed top 1 bits (of 4) from wire gv_sha256.$flatten\Inst_sha256_control.$auto$bmuxmap.cc:58:execute$1151.
Removed top 1 bits (of 4) from wire gv_sha256.$flatten\Inst_sha256_control.$auto$bmuxmap.cc:58:execute$1161.
Removed top 1 bits (of 3) from wire gv_sha256.$flatten\Inst_sha256_control.$verific$n463$178.
Removed top 2 bits (of 3) from wire gv_sha256.$flatten\Inst_sha256_control.$verific$n484$182.
Removed top 1 bits (of 2) from wire gv_sha256.$flatten\Inst_sha256_control.$verific$n547$192.
Removed top 1 bits (of 32) from wire gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$n107$583.
Removed top 1 bits (of 32) from wire gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$n140$584.
Removed top 1 bits (of 32) from wire gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$n173$585.
Removed top 1 bits (of 32) from wire gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$n206$586.
Removed top 17 bits (of 32) from wire gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$n74$582.

yosys> peepopt

3.19. Executing PEEPOPT pass (run peephole optimizers).

yosys> opt_clean

3.20. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gv_sha256..
Removed 0 unused cells and 12 unused wires.
<suppressed ~1 debug messages>

yosys> bmuxmap

3.21. Executing BMUXMAP pass.

yosys> demuxmap

3.22. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> alumacc

3.23. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module gv_sha256:
  creating $macc model for $flatten\Inst_sha256_control.$verific$add_175$sha256_control.vhd:607$321 ($add).
  creating $macc model for $flatten\Inst_sha256_control.$verific$add_184$../vhdl_packages/vhdl_2008/src/numeric_std-body.vhdl:482$327 ($add).
  creating $macc model for $flatten\Inst_sha256_hash_core.$verific$add_43$sha256_hash_core.vhd:161$458 ($add).
  creating $macc model for $flatten\Inst_sha256_hash_core.$verific$add_45$sha256_hash_core.vhd:162$460 ($add).
  creating $macc model for $flatten\Inst_sha256_hash_core.$verific$add_47$sha256_hash_core.vhd:163$462 ($add).
  creating $macc model for $flatten\Inst_sha256_hash_core.$verific$add_49$sha256_hash_core.vhd:164$464 ($add).
  creating $macc model for $flatten\Inst_sha256_hash_core.$verific$add_51$sha256_hash_core.vhd:165$466 ($add).
  creating $macc model for $flatten\Inst_sha256_hash_core.$verific$add_53$sha256_hash_core.vhd:166$468 ($add).
  creating $macc model for $flatten\Inst_sha256_hash_core.$verific$add_55$sha256_hash_core.vhd:167$470 ($add).
  creating $macc model for $flatten\Inst_sha256_msg_sch.$verific$add_69$sha256_msg_sch.vhd:166$890 ($add).
  creating $macc model for $flatten\Inst_sha256_msg_sch.$verific$add_71$sha256_msg_sch.vhd:167$892 ($add).
  creating $macc model for $flatten\Inst_sha256_msg_sch.$verific$add_73$sha256_msg_sch.vhd:168$894 ($add).
  creating $macc model for $flatten\Inst_sha256_regs.$verific$add_43$sha256_regs.vhd:158$1065 ($add).
  creating $macc model for $flatten\Inst_sha256_regs.$verific$add_45$sha256_regs.vhd:159$1067 ($add).
  creating $macc model for $flatten\Inst_sha256_regs.$verific$add_47$sha256_regs.vhd:160$1069 ($add).
  creating $macc model for $flatten\Inst_sha256_regs.$verific$add_49$sha256_regs.vhd:161$1071 ($add).
  creating $macc model for $flatten\Inst_sha256_regs.$verific$add_51$sha256_regs.vhd:162$1073 ($add).
  creating $macc model for $flatten\Inst_sha256_regs.$verific$add_53$sha256_regs.vhd:163$1075 ($add).
  creating $macc model for $flatten\Inst_sha256_regs.$verific$add_55$sha256_regs.vhd:164$1077 ($add).
  creating $macc model for $flatten\Inst_sha256_regs.$verific$add_57$sha256_regs.vhd:165$1079 ($add).
  merging $macc model for $flatten\Inst_sha256_msg_sch.$verific$add_73$sha256_msg_sch.vhd:168$894 into $flatten\Inst_sha256_msg_sch.$verific$add_71$sha256_msg_sch.vhd:167$892.
  merging $macc model for $flatten\Inst_sha256_msg_sch.$verific$add_71$sha256_msg_sch.vhd:167$892 into $flatten\Inst_sha256_msg_sch.$verific$add_69$sha256_msg_sch.vhd:166$890.
  merging $macc model for $flatten\Inst_sha256_hash_core.$verific$add_55$sha256_hash_core.vhd:167$470 into $flatten\Inst_sha256_hash_core.$verific$add_53$sha256_hash_core.vhd:166$468.
  merging $macc model for $flatten\Inst_sha256_hash_core.$verific$add_53$sha256_hash_core.vhd:166$468 into $flatten\Inst_sha256_hash_core.$verific$add_51$sha256_hash_core.vhd:165$466.
  merging $macc model for $flatten\Inst_sha256_hash_core.$verific$add_51$sha256_hash_core.vhd:165$466 into $flatten\Inst_sha256_hash_core.$verific$add_49$sha256_hash_core.vhd:164$464.
  merging $macc model for $flatten\Inst_sha256_hash_core.$verific$add_45$sha256_hash_core.vhd:162$460 into $flatten\Inst_sha256_hash_core.$verific$add_43$sha256_hash_core.vhd:161$458.
  creating $alu model for $macc $flatten\Inst_sha256_regs.$verific$add_45$sha256_regs.vhd:159$1067.
  creating $alu model for $macc $flatten\Inst_sha256_regs.$verific$add_43$sha256_regs.vhd:158$1065.
  creating $alu model for $macc $flatten\Inst_sha256_regs.$verific$add_47$sha256_regs.vhd:160$1069.
  creating $alu model for $macc $flatten\Inst_sha256_regs.$verific$add_49$sha256_regs.vhd:161$1071.
  creating $alu model for $macc $flatten\Inst_sha256_regs.$verific$add_51$sha256_regs.vhd:162$1073.
  creating $alu model for $macc $flatten\Inst_sha256_regs.$verific$add_53$sha256_regs.vhd:163$1075.
  creating $alu model for $macc $flatten\Inst_sha256_regs.$verific$add_55$sha256_regs.vhd:164$1077.
  creating $alu model for $macc $flatten\Inst_sha256_hash_core.$verific$add_47$sha256_hash_core.vhd:163$462.
  creating $alu model for $macc $flatten\Inst_sha256_regs.$verific$add_57$sha256_regs.vhd:165$1079.
  creating $alu model for $macc $flatten\Inst_sha256_control.$verific$add_184$../vhdl_packages/vhdl_2008/src/numeric_std-body.vhdl:482$327.
  creating $alu model for $macc $flatten\Inst_sha256_control.$verific$add_175$sha256_control.vhd:607$321.
  creating $macc cell for $flatten\Inst_sha256_hash_core.$verific$add_43$sha256_hash_core.vhd:161$458: $auto$alumacc.cc:365:replace_macc$1351
  creating $macc cell for $flatten\Inst_sha256_msg_sch.$verific$add_69$sha256_msg_sch.vhd:166$890: $auto$alumacc.cc:365:replace_macc$1352
  creating $macc cell for $flatten\Inst_sha256_hash_core.$verific$add_49$sha256_hash_core.vhd:164$464: $auto$alumacc.cc:365:replace_macc$1353
  creating $alu cell for $flatten\Inst_sha256_control.$verific$add_175$sha256_control.vhd:607$321: $auto$alumacc.cc:485:replace_alu$1354
  creating $alu cell for $flatten\Inst_sha256_control.$verific$add_184$../vhdl_packages/vhdl_2008/src/numeric_std-body.vhdl:482$327: $auto$alumacc.cc:485:replace_alu$1357
  creating $alu cell for $flatten\Inst_sha256_regs.$verific$add_57$sha256_regs.vhd:165$1079: $auto$alumacc.cc:485:replace_alu$1360
  creating $alu cell for $flatten\Inst_sha256_hash_core.$verific$add_47$sha256_hash_core.vhd:163$462: $auto$alumacc.cc:485:replace_alu$1363
  creating $alu cell for $flatten\Inst_sha256_regs.$verific$add_55$sha256_regs.vhd:164$1077: $auto$alumacc.cc:485:replace_alu$1366
  creating $alu cell for $flatten\Inst_sha256_regs.$verific$add_53$sha256_regs.vhd:163$1075: $auto$alumacc.cc:485:replace_alu$1369
  creating $alu cell for $flatten\Inst_sha256_regs.$verific$add_51$sha256_regs.vhd:162$1073: $auto$alumacc.cc:485:replace_alu$1372
  creating $alu cell for $flatten\Inst_sha256_regs.$verific$add_49$sha256_regs.vhd:161$1071: $auto$alumacc.cc:485:replace_alu$1375
  creating $alu cell for $flatten\Inst_sha256_regs.$verific$add_47$sha256_regs.vhd:160$1069: $auto$alumacc.cc:485:replace_alu$1378
  creating $alu cell for $flatten\Inst_sha256_regs.$verific$add_43$sha256_regs.vhd:158$1065: $auto$alumacc.cc:485:replace_alu$1381
  creating $alu cell for $flatten\Inst_sha256_regs.$verific$add_45$sha256_regs.vhd:159$1067: $auto$alumacc.cc:485:replace_alu$1384
  created 11 $alu and 3 $macc cells.

yosys> opt_expr

3.24. Executing OPT_EXPR pass (perform const folding).
Optimizing module gv_sha256.

yosys> opt_merge -nomux

3.25. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gv_sha256'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.26. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \gv_sha256..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~43 debug messages>

yosys> opt_reduce

3.27. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \gv_sha256.
Performed a total of 0 changes.

yosys> opt_merge

3.28. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gv_sha256'.
Removed a total of 0 cells.

yosys> opt_share

3.29. Executing OPT_SHARE pass.

yosys> opt_dff

3.30. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.31. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gv_sha256..
Removed 6 unused cells and 6 unused wires.
<suppressed ~12 debug messages>

yosys> opt_expr

3.32. Executing OPT_EXPR pass (perform const folding).
Optimizing module gv_sha256.

yosys> opt_muxtree

3.33. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \gv_sha256..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~43 debug messages>

yosys> opt_reduce

3.34. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \gv_sha256.
Performed a total of 0 changes.

yosys> opt_merge

3.35. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gv_sha256'.
Removed a total of 0 cells.

yosys> opt_share

3.36. Executing OPT_SHARE pass.

yosys> opt_dff

3.37. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.38. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gv_sha256..

yosys> opt_expr

3.39. Executing OPT_EXPR pass (perform const folding).
Optimizing module gv_sha256.
MAX OPT ITERATION = 2

yosys> stat

3.40. Printing statistics.

=== gv_sha256 ===

   Number of wires:                549
   Number of wire bits:          10159
   Number of public wires:         303
   Number of public wire bits:    6754
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                350
     $alu                           11
     $and                           24
     $dffe                          32
     $eq                            70
     $logic_not                      1
     $macc                           3
     $mux                          166
     $ne                             3
     $not                            9
     $or                             8
     $reduce_and                     2
     $reduce_bool                    2
     $reduce_or                      1
     $sdffe                          7
     $xor                           11


yosys> memory -nomap

3.41. Executing MEMORY pass.

yosys> opt_mem

3.41.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

yosys> opt_mem_priority

3.41.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

yosys> opt_mem_feedback

3.41.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

yosys> memory_bmux2rom

3.41.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

yosys> memory_dff

3.41.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

yosys> opt_clean

3.41.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gv_sha256..

yosys> memory_share

3.41.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

yosys> opt_mem_widen

3.41.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

yosys> opt_clean

3.41.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gv_sha256..

yosys> memory_collect

3.41.10. Executing MEMORY_COLLECT pass (generating $mem cells).

yosys> stat

3.42. Printing statistics.

=== gv_sha256 ===

   Number of wires:                549
   Number of wire bits:          10159
   Number of public wires:         303
   Number of public wire bits:    6754
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                350
     $alu                           11
     $and                           24
     $dffe                          32
     $eq                            70
     $logic_not                      1
     $macc                           3
     $mux                          166
     $ne                             3
     $not                            9
     $or                             8
     $reduce_and                     2
     $reduce_bool                    2
     $reduce_or                      1
     $sdffe                          7
     $xor                           11


yosys> muxpack

3.43. Executing MUXPACK pass ($mux cell cascades to $pmux).
Converting gv_sha256.$flatten\Inst_sha256_control.$verific$i120$sha256_control.vhd:537$281 ... gv_sha256.$flatten\Inst_sha256_control.$verific$i127$sha256_control.vhd:538$287 to a pmux with 2 cases.
Converting gv_sha256.$flatten\Inst_sha256_control.$verific$mux_115$sha256_control.vhd:537$277 ... gv_sha256.$flatten\Inst_sha256_control.$verific$mux_125$sha256_control.vhd:538$286 to a pmux with 2 cases.
Converting gv_sha256.$flatten\Inst_sha256_control.$verific$mux_116$sha256_control.vhd:537$278 ... gv_sha256.$flatten\Inst_sha256_control.$verific$mux_124$sha256_control.vhd:538$285 to a pmux with 2 cases.
Converting gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$mux_68$sha256_Kt_rom.vhd:139$712 ... gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$mux_71$sha256_Kt_rom.vhd:136$715 to a pmux with 4 cases.
Converting gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$mux_72$sha256_Kt_rom.vhd:135$716 ... gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$mux_129$sha256_Kt_rom.vhd:141$773 to a pmux with 58 cases.
Converting gv_sha256.$flatten\Inst_sha256_padding.$verific$mux_37$sha256_padding.vhd:139$970 ... gv_sha256.$flatten\Inst_sha256_padding.$verific$mux_38$sha256_padding.vhd:140$971 to a pmux with 2 cases.
Converted 70 (p)mux cells into 6 pmux cells.
<suppressed ~148 debug messages>

yosys> opt_clean

3.44. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gv_sha256..
Removed 0 unused cells and 64 unused wires.
<suppressed ~1 debug messages>

yosys> pmuxtree

3.45. Executing PMUXTREE pass.

yosys> muxpack

3.46. Executing MUXPACK pass ($mux cell cascades to $pmux).
Converting gv_sha256.$auto$pmuxtree.cc:65:recursive_mux_generator$1601 ... gv_sha256.$auto$pmuxtree.cc:65:recursive_mux_generator$1603 to a pmux with 2 cases.
Converting gv_sha256.$auto$pmuxtree.cc:65:recursive_mux_generator$1549 ... gv_sha256.$auto$pmuxtree.cc:65:recursive_mux_generator$1551 to a pmux with 2 cases.
Converting gv_sha256.$auto$pmuxtree.cc:65:recursive_mux_generator$1509 ... gv_sha256.$auto$pmuxtree.cc:65:recursive_mux_generator$1511 to a pmux with 2 cases.
Converting gv_sha256.$auto$pmuxtree.cc:65:recursive_mux_generator$1465 ... gv_sha256.$auto$pmuxtree.cc:65:recursive_mux_generator$1467 to a pmux with 2 cases.
Converting gv_sha256.$auto$pmuxtree.cc:65:recursive_mux_generator$1445 ... gv_sha256.$auto$pmuxtree.cc:65:recursive_mux_generator$1447 to a pmux with 2 cases.
Converting gv_sha256.$auto$pmuxtree.cc:65:recursive_mux_generator$1429 ... gv_sha256.$auto$pmuxtree.cc:65:recursive_mux_generator$1431 to a pmux with 2 cases.
Converting gv_sha256.$auto$pmuxtree.cc:65:recursive_mux_generator$1417 ... gv_sha256.$auto$pmuxtree.cc:65:recursive_mux_generator$1419 to a pmux with 2 cases.
Converting gv_sha256.$auto$pmuxtree.cc:65:recursive_mux_generator$1407 ... gv_sha256.$auto$pmuxtree.cc:65:recursive_mux_generator$1409 to a pmux with 2 cases.
Converting gv_sha256.$auto$pmuxtree.cc:65:recursive_mux_generator$1391 ... gv_sha256.$auto$pmuxtree.cc:65:recursive_mux_generator$1393 to a pmux with 2 cases.
Converted 18 (p)mux cells into 9 pmux cells.
<suppressed ~148 debug messages>

yosys> memory_map

3.47. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

yosys> stat

3.48. Printing statistics.

=== gv_sha256 ===

   Number of wires:                594
   Number of wire bits:          10296
   Number of public wires:         303
   Number of public wire bits:    6754
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                380
     $alu                           11
     $and                           24
     $dffe                          32
     $eq                            70
     $logic_not                      1
     $macc                           3
     $mux                          148
     $ne                             3
     $not                           15
     $or                            20
     $pmux                           9
     $reduce_and                     2
     $reduce_bool                    2
     $reduce_or                     22
     $sdffe                          7
     $xor                           11


yosys> techmap -map +/techmap.v -map +/rapidsilicon/genesis/arith_map.v

3.49. Executing TECHMAP pass (map to technology primitives).

3.49.1. Executing Verilog-2005 frontend: /home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.49.2. Executing Verilog-2005 frontend: /home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/arith_map.v
Parsing Verilog input from `/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_rs_alu'.
Successfully finished Verilog frontend.

3.49.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $mux.
Using template $paramod$8fabc56b80a569262acfc42757a02ca0b8e91278\_90_pmux for cells of type $pmux.
Using template $paramod$be80489e44a49c29884f59fd81c31ed03229cfc1\_80_rs_alu for cells of type $alu.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $dffe.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper maccmap for cells of type $macc.
  add \Inst_sha256_hash_core.reg_h (32 bits, unsigned)
  add \Inst_sha256_hash_core.SIG1 (32 bits, unsigned)
  add \Inst_sha256_hash_core.Wt_i (32 bits, unsigned)
  add \Inst_sha256_hash_core.Kt_i (32 bits, unsigned)
  add \Inst_sha256_hash_core.Ch (32 bits, unsigned)
Using extmapper simplemap for cells of type $xor.
Using template $paramod$32e7c4d6f92ff4337599ece53082d2e88a82a9f2\_90_pmux for cells of type $pmux.
Using template $paramod$f08cf4b531f7b2bd95251b79857dfb970a6679fc\_90_pmux for cells of type $pmux.
  add \Inst_sha256_hash_core.SIG0 (32 bits, unsigned)
  add \Inst_sha256_hash_core.sum3 (32 bits, unsigned)
  add \Inst_sha256_hash_core.Maj (32 bits, unsigned)
Using extmapper simplemap for cells of type $logic_not.
  add \Inst_sha256_msg_sch.r10 (32 bits, unsigned)
  add \Inst_sha256_msg_sch.r1 (32 bits, unsigned)
  add \Inst_sha256_msg_sch.s0 (32 bits, unsigned)
  add \Inst_sha256_msg_sch.s1 (32 bits, unsigned)
Using template $paramod$e598a152554f0e84fd1ae44a5db9971b90dff028\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $sdffe.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $reduce_and.
Using template $paramod$c5c783b17ab1d780abfad8cfe6563a0a7b47a3b0\_90_pmux for cells of type $pmux.
Using template $paramod$103b4016182df467cceab67bcf3e18e6361ec0fd\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_fa\WIDTH=32'00000000000000000000000000100000 for cells of type $fa.
Using template $paramod$fbc7873bff55778c0b3173955b7e4bce1d9d6834\_90_alu for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000001000000 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000111 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000100000 for cells of type $lcu.
No more expansions possible.
<suppressed ~2535 debug messages>

yosys> stat

3.50. Printing statistics.

=== gv_sha256 ===

   Number of wires:               2779
   Number of wire bits:          30894
   Number of public wires:         303
   Number of public wire bits:    6754
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               9646
     $_AND_                       1631
     $_DFFE_PP_                   1024
     $_MUX_                       3042
     $_NOT_                        572
     $_OR_                        1213
     $_SDFFE_PP0P_                  73
     $_SDFFE_PP1P_                   1
     $_XOR_                       1802
     adder_carry                   288


yosys> opt_expr

3.51. Executing OPT_EXPR pass (perform const folding).
Optimizing module gv_sha256.
<suppressed ~3226 debug messages>

yosys> opt_merge -nomux

3.52. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gv_sha256'.
<suppressed ~3093 debug messages>
Removed a total of 1031 cells.

yosys> opt_muxtree

3.53. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \gv_sha256..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.54. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \gv_sha256.
Performed a total of 0 changes.

yosys> opt_merge

3.55. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gv_sha256'.
Removed a total of 0 cells.

yosys> opt_share

3.56. Executing OPT_SHARE pass.

yosys> opt_dff

3.57. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.58. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gv_sha256..
Removed 573 unused cells and 1962 unused wires.
<suppressed ~574 debug messages>

yosys> opt_expr

3.59. Executing OPT_EXPR pass (perform const folding).
Optimizing module gv_sha256.
<suppressed ~1 debug messages>

yosys> opt_muxtree

3.60. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \gv_sha256..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.61. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \gv_sha256.
Performed a total of 0 changes.

yosys> opt_merge

3.62. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gv_sha256'.
Removed a total of 0 cells.

yosys> opt_share

3.63. Executing OPT_SHARE pass.

yosys> opt_dff

3.64. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $auto$ff.cc:262:slice$7192 ($_SDFFE_PP0P_) from module gv_sha256 (D = \Inst_sha256_control.hash_control_st_next [0], Q = \Inst_sha256_control.hash_control_st_reg [0]).

yosys> opt_clean

3.65. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gv_sha256..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.66. Executing OPT_EXPR pass (perform const folding).
Optimizing module gv_sha256.
<suppressed ~2 debug messages>

yosys> opt_muxtree

3.67. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \gv_sha256..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.68. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \gv_sha256.
Performed a total of 0 changes.

yosys> opt_merge

3.69. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gv_sha256'.
Removed a total of 0 cells.

yosys> opt_share

3.70. Executing OPT_SHARE pass.

yosys> opt_dff

3.71. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.72. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gv_sha256..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.73. Executing OPT_EXPR pass (perform const folding).
Optimizing module gv_sha256.
MAX OPT ITERATION = 3

yosys> opt -fast -full

3.74. Executing OPT pass (performing simple optimizations).

yosys> opt_expr -full

3.74.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module gv_sha256.
<suppressed ~299 debug messages>

yosys> opt_merge

3.74.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gv_sha256'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

yosys> opt_dff

3.74.3. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.74.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gv_sha256..
Removed 0 unused cells and 10 unused wires.
<suppressed ~1 debug messages>

3.74.5. Finished fast OPT passes.

yosys> techmap -map +/techmap.v

3.75. Executing TECHMAP pass (map to technology primitives).

3.75.1. Executing Verilog-2005 frontend: /home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.75.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~71 debug messages>

yosys> opt -sat

3.76. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.76.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module gv_sha256.

yosys> opt_merge -nomux

3.76.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gv_sha256'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.76.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \gv_sha256..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.76.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \gv_sha256.
Performed a total of 0 changes.

yosys> opt_merge

3.76.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gv_sha256'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.76.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.76.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gv_sha256..

yosys> opt_expr

3.76.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module gv_sha256.

3.76.9. Finished OPT passes. (There is nothing left to do.)

yosys> abc -dff

3.77. Executing ABC pass (technology mapping using ABC).

3.77.1. Summary of detected clock domains:
  41 cells in clk=\clk_i, en=$flatten\Inst_sha256_control.$verific$n377$121, arst={ }, srst=$flatten\Inst_sha256_control.$verific$n368$120
  19 cells in clk=\clk_i, en=\ce_i, arst={ }, srst=\Inst_sha256_control.sha_init
  4 cells in clk=\clk_i, en=$auto$opt_dff.cc:219:make_patterns_logic$1323, arst={ }, srst=\Inst_sha256_control.sha_init
  26 cells in clk=\clk_i, en=$auto$opt_dff.cc:219:make_patterns_logic$1327, arst={ }, srst=\Inst_sha256_control.sha_init
  38 cells in clk=\clk_i, en=$auto$opt_dff.cc:194:make_patterns_logic$1337, arst={ }, srst=\start_i
  324 cells in clk=\clk_i, en=$flatten\Inst_sha256_control.$verific$n107$119, arst={ }, srst=\Inst_sha256_control.sha_init
  3412 cells in clk=\clk_i, en=\Inst_sha256_hash_core.ce_i, arst={ }, srst={ }
  560 cells in clk=\clk_i, en=\Inst_sha256_hash_core.ld_i, arst={ }, srst={ }
  1279 cells in clk=\clk_i, en=\Inst_sha256_control.sch_ce, arst={ }, srst={ }
  57 cells in clk=\clk_i, en=$auto$opt_dff.cc:219:make_patterns_logic$13067, arst={ }, srst=$auto$opt_dff.cc:253:combine_resets$1333

3.77.2. Extracting gate netlist of module `\gv_sha256' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk_i, enabled by $flatten\Inst_sha256_control.$verific$n377$121, synchronously reset by $flatten\Inst_sha256_control.$verific$n368$120
Extracted 41 gates and 45 wires to a netlist network with 4 inputs and 19 outputs.

3.77.2.1. Executing ABC.

3.77.3. Extracting gate netlist of module `\gv_sha256' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk_i, enabled by \ce_i, synchronously reset by \Inst_sha256_control.sha_init
Extracted 19 gates and 35 wires to a netlist network with 14 inputs and 9 outputs.

3.77.3.1. Executing ABC.

3.77.4. Extracting gate netlist of module `\gv_sha256' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk_i, enabled by $auto$opt_dff.cc:219:make_patterns_logic$1323, synchronously reset by $abc$13189$Inst_sha256_control.sha_init
Extracted 4 gates and 8 wires to a netlist network with 3 inputs and 3 outputs.

3.77.4.1. Executing ABC.

3.77.5. Extracting gate netlist of module `\gv_sha256' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk_i, enabled by $auto$opt_dff.cc:219:make_patterns_logic$1327, synchronously reset by $abc$13189$Inst_sha256_control.sha_init
Extracted 26 gates and 36 wires to a netlist network with 9 inputs and 14 outputs.

3.77.5.1. Executing ABC.

3.77.6. Extracting gate netlist of module `\gv_sha256' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk_i, enabled by $auto$opt_dff.cc:194:make_patterns_logic$1337, synchronously reset by \start_i
Extracted 38 gates and 56 wires to a netlist network with 16 inputs and 19 outputs.

3.77.6.1. Executing ABC.

3.77.7. Extracting gate netlist of module `\gv_sha256' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk_i, enabled by $flatten\Inst_sha256_control.$verific$n107$119, synchronously reset by $abc$13189$Inst_sha256_control.sha_init
Extracted 324 gates and 337 wires to a netlist network with 12 inputs and 70 outputs.

3.77.7.1. Executing ABC.

3.77.8. Extracting gate netlist of module `\gv_sha256' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk_i, enabled by $abc$13245$Inst_sha256_hash_core.ce_i
Extracted 3124 gates and 3695 wires to a netlist network with 569 inputs and 504 outputs.

3.77.8.1. Executing ABC.

3.77.9. Extracting gate netlist of module `\gv_sha256' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk_i, enabled by $abc$13245$Inst_sha256_hash_core.ld_i
Extracted 560 gates and 864 wires to a netlist network with 303 inputs and 543 outputs.

3.77.9.1. Executing ABC.

3.77.10. Extracting gate netlist of module `\gv_sha256' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk_i, enabled by $abc$13245$Inst_sha256_control.sch_ce
Extracted 1279 gates and 1383 wires to a netlist network with 104 inputs and 32 outputs.

3.77.10.1. Executing ABC.

3.77.11. Extracting gate netlist of module `\gv_sha256' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk_i, enabled by $auto$opt_dff.cc:219:make_patterns_logic$13067, synchronously reset by $auto$opt_dff.cc:253:combine_resets$1333
Extracted 57 gates and 97 wires to a netlist network with 38 inputs and 26 outputs.

3.77.11.1. Executing ABC.

yosys> abc -dff

3.78. Executing ABC pass (technology mapping using ABC).

3.78.1. Summary of detected clock domains:
  38 cells in clk=\clk_i, en=$abc$13245$auto$opt_dff.cc:194:make_patterns_logic$1337, arst={ }, srst=\start_i
  17 cells in clk=\clk_i, en=$abc$13219$auto$opt_dff.cc:219:make_patterns_logic$1327, arst={ }, srst=$abc$13189$Inst_sha256_control.sha_init
  5 cells in clk=\clk_i, en=$abc$13212$auto$opt_dff.cc:219:make_patterns_logic$1323, arst={ }, srst=$abc$13189$Inst_sha256_control.sha_init
  15 cells in clk=\clk_i, en=\ce_i, arst={ }, srst=$abc$13189$Inst_sha256_control.sha_init
  38 cells in clk=\clk_i, en=$abc$13150$flatten\Inst_sha256_control.$verific$n377$121, arst={ }, srst=$abc$13150$flatten\Inst_sha256_control.$verific$n368$120
  271 cells in clk=\clk_i, en=$abc$13292$flatten\Inst_sha256_control.$verific$n107$119, arst={ }, srst=$abc$13189$Inst_sha256_control.sha_init
  697 cells in clk=\clk_i, en=$abc$13245$Inst_sha256_hash_core.ld_i, arst={ }, srst={ }
  3393 cells in clk=\clk_i, en=$abc$13245$Inst_sha256_hash_core.ce_i, arst={ }, srst={ }
  1247 cells in clk=\clk_i, en=$abc$13245$Inst_sha256_control.sch_ce, arst={ }, srst={ }
  48 cells in clk=\clk_i, en=$abc$19576$auto$opt_dff.cc:219:make_patterns_logic$13067, arst={ }, srst=$abc$19576$auto$opt_dff.cc:253:combine_resets$1333

3.78.2. Extracting gate netlist of module `\gv_sha256' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk_i, enabled by $abc$13245$auto$opt_dff.cc:194:make_patterns_logic$1337, synchronously reset by \start_i
Extracted 38 gates and 47 wires to a netlist network with 9 inputs and 16 outputs.

3.78.2.1. Executing ABC.

3.78.3. Extracting gate netlist of module `\gv_sha256' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk_i, enabled by $abc$13219$auto$opt_dff.cc:219:make_patterns_logic$1327, synchronously reset by $abc$13189$Inst_sha256_control.sha_init
Extracted 17 gates and 27 wires to a netlist network with 9 inputs and 12 outputs.

3.78.3.1. Executing ABC.

3.78.4. Extracting gate netlist of module `\gv_sha256' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk_i, enabled by $abc$13212$auto$opt_dff.cc:219:make_patterns_logic$1323, synchronously reset by $abc$13189$Inst_sha256_control.sha_init
Extracted 5 gates and 10 wires to a netlist network with 4 inputs and 3 outputs.

3.78.4.1. Executing ABC.

3.78.5. Extracting gate netlist of module `\gv_sha256' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk_i, enabled by \ce_i, synchronously reset by $abc$13189$Inst_sha256_control.sha_init
Extracted 15 gates and 25 wires to a netlist network with 10 inputs and 7 outputs.

3.78.5.1. Executing ABC.

3.78.6. Extracting gate netlist of module `\gv_sha256' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk_i, enabled by $abc$13150$flatten\Inst_sha256_control.$verific$n377$121, synchronously reset by $abc$13150$flatten\Inst_sha256_control.$verific$n368$120
Extracted 38 gates and 42 wires to a netlist network with 4 inputs and 19 outputs.

3.78.6.1. Executing ABC.

3.78.7. Extracting gate netlist of module `\gv_sha256' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk_i, enabled by $abc$13292$flatten\Inst_sha256_control.$verific$n107$119, synchronously reset by $abc$13189$Inst_sha256_control.sha_init
Extracted 271 gates and 290 wires to a netlist network with 19 inputs and 69 outputs.

3.78.7.1. Executing ABC.

3.78.8. Extracting gate netlist of module `\gv_sha256' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk_i, enabled by $abc$13245$Inst_sha256_hash_core.ld_i
Extracted 690 gates and 1092 wires to a netlist network with 402 inputs and 403 outputs.

3.78.8.1. Executing ABC.

3.78.9. Extracting gate netlist of module `\gv_sha256' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk_i, enabled by $abc$13245$Inst_sha256_hash_core.ce_i
Extracted 3112 gates and 3608 wires to a netlist network with 496 inputs and 404 outputs.

3.78.9.1. Executing ABC.

3.78.10. Extracting gate netlist of module `\gv_sha256' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk_i, enabled by $abc$13245$Inst_sha256_control.sch_ce
Extracted 1247 gates and 1359 wires to a netlist network with 112 inputs and 67 outputs.

3.78.10.1. Executing ABC.

3.78.11. Extracting gate netlist of module `\gv_sha256' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk_i, enabled by $abc$19576$auto$opt_dff.cc:219:make_patterns_logic$13067, synchronously reset by $abc$19576$auto$opt_dff.cc:253:combine_resets$1333
Extracted 48 gates and 78 wires to a netlist network with 30 inputs and 20 outputs.

3.78.11.1. Executing ABC.

yosys> abc -dff

3.79. Executing ABC pass (technology mapping using ABC).

3.79.1. Summary of detected clock domains:
  35 cells in clk=\clk_i, en=$abc$19627$abc$13245$auto$opt_dff.cc:194:make_patterns_logic$1337, arst={ }, srst=\start_i
  18 cells in clk=\clk_i, en=$abc$19664$abc$13219$auto$opt_dff.cc:219:make_patterns_logic$1327, arst={ }, srst=$abc$19746$abc$13189$Inst_sha256_control.sha_init
  5 cells in clk=\clk_i, en=$abc$19683$abc$13212$auto$opt_dff.cc:219:make_patterns_logic$1323, arst={ }, srst=$abc$19746$abc$13189$Inst_sha256_control.sha_init
  20 cells in clk=\clk_i, en=\ce_i, arst={ }, srst=$abc$19746$abc$13189$Inst_sha256_control.sha_init
  38 cells in clk=\clk_i, en=$abc$19707$abc$13150$flatten\Inst_sha256_control.$verific$n377$121, arst={ }, srst=$abc$19707$abc$13150$flatten\Inst_sha256_control.$verific$n368$120
  269 cells in clk=\clk_i, en=$abc$19746$abc$13292$flatten\Inst_sha256_control.$verific$n107$119, arst={ }, srst=$abc$19746$abc$13189$Inst_sha256_control.sha_init
  3599 cells in clk=\clk_i, en=$abc$20973$abc$13245$Inst_sha256_hash_core.ce_i, arst={ }, srst={ }
  756 cells in clk=\clk_i, en=$abc$20018$abc$13245$Inst_sha256_hash_core.ld_i, arst={ }, srst={ }
  1262 cells in clk=\clk_i, en=$abc$24590$abc$13245$Inst_sha256_control.sch_ce, arst={ }, srst={ }
  35 cells in clk=\clk_i, en=$abc$26332$abc$19576$auto$opt_dff.cc:219:make_patterns_logic$13067, arst={ }, srst=$abc$26332$abc$19576$auto$opt_dff.cc:253:combine_resets$1333

3.79.2. Extracting gate netlist of module `\gv_sha256' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk_i, enabled by $abc$19627$abc$13245$auto$opt_dff.cc:194:make_patterns_logic$1337, synchronously reset by \start_i
Extracted 35 gates and 45 wires to a netlist network with 10 inputs and 15 outputs.

3.79.2.1. Executing ABC.

3.79.3. Extracting gate netlist of module `\gv_sha256' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk_i, enabled by $abc$19664$abc$13219$auto$opt_dff.cc:219:make_patterns_logic$1327, synchronously reset by $abc$26375$abc$19746$abc$13189$Inst_sha256_control.sha_init
Extracted 18 gates and 27 wires to a netlist network with 8 inputs and 10 outputs.

3.79.3.1. Executing ABC.

3.79.4. Extracting gate netlist of module `\gv_sha256' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk_i, enabled by $abc$19683$abc$13212$auto$opt_dff.cc:219:make_patterns_logic$1323, synchronously reset by $abc$26375$abc$19746$abc$13189$Inst_sha256_control.sha_init
Extracted 5 gates and 10 wires to a netlist network with 4 inputs and 3 outputs.

3.79.4.1. Executing ABC.

3.79.5. Extracting gate netlist of module `\gv_sha256' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk_i, enabled by \ce_i, synchronously reset by $abc$26375$abc$19746$abc$13189$Inst_sha256_control.sha_init
Extracted 20 gates and 32 wires to a netlist network with 12 inputs and 12 outputs.

3.79.5.1. Executing ABC.

3.79.6. Extracting gate netlist of module `\gv_sha256' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk_i, enabled by $abc$19707$abc$13150$flatten\Inst_sha256_control.$verific$n377$121, synchronously reset by $abc$19707$abc$13150$flatten\Inst_sha256_control.$verific$n368$120
Extracted 38 gates and 42 wires to a netlist network with 4 inputs and 19 outputs.

3.79.6.1. Executing ABC.

3.79.7. Extracting gate netlist of module `\gv_sha256' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk_i, enabled by $abc$19746$abc$13292$flatten\Inst_sha256_control.$verific$n107$119, synchronously reset by $abc$26375$abc$19746$abc$13189$Inst_sha256_control.sha_init
Extracted 269 gates and 283 wires to a netlist network with 14 inputs and 68 outputs.

3.79.7.1. Executing ABC.

3.79.8. Extracting gate netlist of module `\gv_sha256' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk_i, enabled by $abc$20973$abc$13245$Inst_sha256_hash_core.ce_i
Extracted 3319 gates and 3771 wires to a netlist network with 452 inputs and 363 outputs.

3.79.8.1. Executing ABC.

3.79.9. Extracting gate netlist of module `\gv_sha256' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk_i, enabled by $abc$20018$abc$13245$Inst_sha256_hash_core.ld_i
Extracted 748 gates and 1183 wires to a netlist network with 435 inputs and 440 outputs.

3.79.9.1. Executing ABC.

3.79.10. Extracting gate netlist of module `\gv_sha256' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk_i, enabled by $abc$24590$abc$13245$Inst_sha256_control.sch_ce
Extracted 1262 gates and 1375 wires to a netlist network with 113 inputs and 68 outputs.

3.79.10.1. Executing ABC.

3.79.11. Extracting gate netlist of module `\gv_sha256' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk_i, enabled by $abc$26332$abc$19576$auto$opt_dff.cc:219:make_patterns_logic$13067, synchronously reset by $abc$26332$abc$19576$auto$opt_dff.cc:253:combine_resets$1333
Extracted 35 gates and 61 wires to a netlist network with 26 inputs and 14 outputs.

3.79.11.1. Executing ABC.

yosys> abc -dff

3.80. Executing ABC pass (technology mapping using ABC).

3.80.1. Summary of detected clock domains:
  34 cells in clk=\clk_i, en=$abc$26375$abc$19627$abc$13245$auto$opt_dff.cc:194:make_patterns_logic$1337, arst={ }, srst=\start_i
  18 cells in clk=\clk_i, en=$abc$26411$abc$19664$abc$13219$auto$opt_dff.cc:219:make_patterns_logic$1327, arst={ }, srst=$abc$26375$abc$19746$abc$13189$Inst_sha256_control.sha_init
  721 cells in clk=\clk_i, en=$abc$30337$abc$20018$abc$13245$Inst_sha256_hash_core.ld_i, arst={ }, srst={ }
  5 cells in clk=\clk_i, en=$abc$26431$abc$19683$abc$13212$auto$opt_dff.cc:219:make_patterns_logic$1323, arst={ }, srst=$abc$26375$abc$19746$abc$13189$Inst_sha256_control.sha_init
  18 cells in clk=\clk_i, en=\ce_i, arst={ }, srst=$abc$26375$abc$19746$abc$13189$Inst_sha256_control.sha_init
  38 cells in clk=\clk_i, en=$abc$26460$abc$19707$abc$13150$flatten\Inst_sha256_control.$verific$n377$121, arst={ }, srst=$abc$26460$abc$19707$abc$13150$flatten\Inst_sha256_control.$verific$n368$120
  273 cells in clk=\clk_i, en=$abc$26499$abc$19746$abc$13292$flatten\Inst_sha256_control.$verific$n107$119, arst={ }, srst=$abc$26375$abc$19746$abc$13189$Inst_sha256_control.sha_init
  3624 cells in clk=\clk_i, en=$abc$26768$abc$20973$abc$13245$Inst_sha256_hash_core.ce_i, arst={ }, srst={ }
  1242 cells in clk=\clk_i, en=$abc$31336$abc$24590$abc$13245$Inst_sha256_control.sch_ce, arst={ }, srst={ }
  33 cells in clk=\clk_i, en=$abc$33061$abc$26332$abc$19576$auto$opt_dff.cc:219:make_patterns_logic$13067, arst={ }, srst=$abc$33061$abc$26332$abc$19576$auto$opt_dff.cc:253:combine_resets$1333

3.80.2. Extracting gate netlist of module `\gv_sha256' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk_i, enabled by $abc$26375$abc$19627$abc$13245$auto$opt_dff.cc:194:make_patterns_logic$1337, synchronously reset by \start_i
Extracted 34 gates and 44 wires to a netlist network with 10 inputs and 14 outputs.

3.80.2.1. Executing ABC.

3.80.3. Extracting gate netlist of module `\gv_sha256' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk_i, enabled by $abc$26411$abc$19664$abc$13219$auto$opt_dff.cc:219:make_patterns_logic$1327, synchronously reset by $abc$26375$abc$19746$abc$13189$Inst_sha256_control.sha_init
Extracted 18 gates and 29 wires to a netlist network with 10 inputs and 11 outputs.

3.80.3.1. Executing ABC.

3.80.4. Extracting gate netlist of module `\gv_sha256' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk_i, enabled by $abc$30337$abc$20018$abc$13245$Inst_sha256_hash_core.ld_i
Extracted 713 gates and 1126 wires to a netlist network with 413 inputs and 416 outputs.

3.80.4.1. Executing ABC.

3.80.5. Extracting gate netlist of module `\gv_sha256' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk_i, enabled by $abc$26431$abc$19683$abc$13212$auto$opt_dff.cc:219:make_patterns_logic$1323, synchronously reset by $abc$33132$abc$26375$abc$19746$abc$13189$Inst_sha256_control.sha_init
Extracted 5 gates and 10 wires to a netlist network with 4 inputs and 3 outputs.

3.80.5.1. Executing ABC.

3.80.6. Extracting gate netlist of module `\gv_sha256' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk_i, enabled by \ce_i, synchronously reset by $abc$33132$abc$26375$abc$19746$abc$13189$Inst_sha256_control.sha_init
Extracted 18 gates and 30 wires to a netlist network with 12 inputs and 11 outputs.

3.80.6.1. Executing ABC.

3.80.7. Extracting gate netlist of module `\gv_sha256' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk_i, enabled by $abc$26460$abc$19707$abc$13150$flatten\Inst_sha256_control.$verific$n377$121, synchronously reset by $abc$26460$abc$19707$abc$13150$flatten\Inst_sha256_control.$verific$n368$120
Extracted 38 gates and 42 wires to a netlist network with 4 inputs and 19 outputs.

3.80.7.1. Executing ABC.

3.80.8. Extracting gate netlist of module `\gv_sha256' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk_i, enabled by $abc$26499$abc$19746$abc$13292$flatten\Inst_sha256_control.$verific$n107$119, synchronously reset by $abc$33132$abc$26375$abc$19746$abc$13189$Inst_sha256_control.sha_init
Extracted 273 gates and 289 wires to a netlist network with 16 inputs and 70 outputs.

3.80.8.1. Executing ABC.

3.80.9. Extracting gate netlist of module `\gv_sha256' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk_i, enabled by $abc$26768$abc$20973$abc$13245$Inst_sha256_hash_core.ce_i
Extracted 3344 gates and 3823 wires to a netlist network with 479 inputs and 389 outputs.

3.80.9.1. Executing ABC.

3.80.10. Extracting gate netlist of module `\gv_sha256' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk_i, enabled by $abc$31336$abc$24590$abc$13245$Inst_sha256_control.sch_ce
Extracted 1242 gates and 1353 wires to a netlist network with 111 inputs and 67 outputs.

3.80.10.1. Executing ABC.

3.80.11. Extracting gate netlist of module `\gv_sha256' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk_i, enabled by $abc$33061$abc$26332$abc$19576$auto$opt_dff.cc:219:make_patterns_logic$13067, synchronously reset by $abc$33061$abc$26332$abc$19576$auto$opt_dff.cc:253:combine_resets$1333
Extracted 33 gates and 59 wires to a netlist network with 26 inputs and 14 outputs.

3.80.11.1. Executing ABC.

yosys> opt_ffinv

3.81. Executing OPT_FFINV pass (push inverters through FFs).
Discovering LUTs.
Pushed 0 inverters.

yosys> opt -sat

3.82. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.82.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module gv_sha256.
<suppressed ~3 debug messages>

yosys> opt_merge -nomux

3.82.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gv_sha256'.
<suppressed ~120 debug messages>
Removed a total of 40 cells.

yosys> opt_muxtree

3.82.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \gv_sha256..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.82.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \gv_sha256.
Performed a total of 0 changes.

yosys> opt_merge

3.82.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gv_sha256'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.82.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $abc$34133$auto$blifparse.cc:362:parse_blif$34134 ($_SDFFE_PP0P_) from module gv_sha256 (D = $abc$34133$abc$26438$new_n43_, Q = $abc$34133$lo0).

yosys> opt_clean

3.82.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gv_sha256..
Removed 1 unused cells and 26938 unused wires.
<suppressed ~122 debug messages>

yosys> opt_expr

3.82.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module gv_sha256.

3.82.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.82.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \gv_sha256..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.82.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \gv_sha256.
Performed a total of 0 changes.

yosys> opt_merge

3.82.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gv_sha256'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.82.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.82.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gv_sha256..

yosys> opt_expr

3.82.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module gv_sha256.

3.82.16. Finished OPT passes. (There is nothing left to do.)

yosys> bmuxmap

3.83. Executing BMUXMAP pass.

yosys> demuxmap

3.84. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> abc -script /home/users/temp_dir/yosys_EByoyZ/abc_tmp_1.scr

3.85. Executing ABC pass (technology mapping using ABC).

3.85.1. Extracting gate netlist of module `\gv_sha256' to `<abc-temp-dir>/input.blif'..
Extracted 4585 gates and 5616 wires to a netlist network with 1031 inputs and 902 outputs.

3.85.1.1. Executing ABC.
DE:   #PIs = 1031  #Luts =  1612  Max Lvl =  42  Avg Lvl =   5.39  [   0.86 sec. at Pass 0]
DE:   #PIs = 1031  #Luts =  1560  Max Lvl =  34  Avg Lvl =   4.22  [  30.86 sec. at Pass 1]
DE:   #PIs = 1031  #Luts =  1522  Max Lvl =  28  Avg Lvl =   3.79  [   3.74 sec. at Pass 2]
DE:   #PIs = 1031  #Luts =  1516  Max Lvl =  29  Avg Lvl =   3.81  [   6.57 sec. at Pass 3]
DE:   #PIs = 1031  #Luts =  1510  Max Lvl =  30  Avg Lvl =   3.85  [   6.30 sec. at Pass 4]
DE:   #PIs = 1031  #Luts =  1510  Max Lvl =  30  Avg Lvl =   3.85  [  13.28 sec. at Pass 5]
DE:   #PIs = 1031  #Luts =  1507  Max Lvl =  30  Avg Lvl =   3.88  [   6.41 sec. at Pass 6]
DE:   #PIs = 1031  #Luts =  1507  Max Lvl =  30  Avg Lvl =   3.88  [   8.78 sec. at Pass 7]
DE:   #PIs = 1031  #Luts =  1507  Max Lvl =  30  Avg Lvl =   3.88  [   5.47 sec. at Pass 8]
DE:   #PIs = 1031  #Luts =  1507  Max Lvl =  30  Avg Lvl =   3.88  [  10.04 sec. at Pass 9]
DE:   #PIs = 1031  #Luts =  1507  Max Lvl =  30  Avg Lvl =   3.88  [   1.02 sec. at Pass 10]

yosys> opt_expr

3.86. Executing OPT_EXPR pass (perform const folding).
Optimizing module gv_sha256.

yosys> opt_merge -nomux

3.87. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gv_sha256'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.88. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \gv_sha256..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.89. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \gv_sha256.
Performed a total of 0 changes.

yosys> opt_merge

3.90. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gv_sha256'.
Removed a total of 0 cells.

yosys> opt_share

3.91. Executing OPT_SHARE pass.

yosys> opt_dff

3.92. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.93. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gv_sha256..
Removed 0 unused cells and 5560 unused wires.
<suppressed ~16 debug messages>

yosys> opt_expr

3.94. Executing OPT_EXPR pass (perform const folding).
Optimizing module gv_sha256.
MAX OPT ITERATION = 1

yosys> opt_ffinv

3.95. Executing OPT_FFINV pass (push inverters through FFs).
Discovering LUTs.
Pushed 0 inverters.

yosys> stat

3.96. Printing statistics.

=== gv_sha256 ===

   Number of wires:               2025
   Number of wire bits:           6096
   Number of public wires:         168
   Number of public wire bits:    3672
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               2893
     $_DFFE_PP_                   1024
     $_SDFFE_PP0P_                  74
     $lut                         1507
     adder_carry                   288


yosys> shregmap -minlen 8 -maxlen 20

3.97. Executing SHREGMAP pass (map shift registers).
Converted 0 dff cells into 0 shift registers.

yosys> dfflegalize -cell $_DFF_?_ 0 -cell $_DFF_???_ 0 -cell $_DFFE_????_ 0 -cell $_DFFSR_???_ 0 -cell $_DFFSRE_????_ 0 -cell $_DLATCHSR_PPP_ 0

3.98. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

yosys> stat

3.99. Printing statistics.

=== gv_sha256 ===

   Number of wires:               2173
   Number of wire bits:           6244
   Number of public wires:         168
   Number of public wire bits:    3672
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               3041
     $_DFFE_PP0P_                 1024
     $_DFF_P_                       74
     $_MUX_                        148
     $lut                         1507
     adder_carry                   288


yosys> techmap -map +/techmap.v -map +/rapidsilicon/genesis/ffs_map.v

3.100. Executing TECHMAP pass (map to technology primitives).

3.100.1. Executing Verilog-2005 frontend: /home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.100.2. Executing Verilog-2005 frontend: /home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/ffs_map.v
Parsing Verilog input from `/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/ffs_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP0N_'.
Generating RTLIL representation for module `\$_DFFE_PN0P_'.
Generating RTLIL representation for module `\$_DFFE_PN0N_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP1N_'.
Generating RTLIL representation for module `\$_DFFE_PN1P_'.
Generating RTLIL representation for module `\$_DFFE_PN1N_'.
Generating RTLIL representation for module `\$_DFFSR_PPP_'.
Generating RTLIL representation for module `\$_DFFSR_PNP_'.
Generating RTLIL representation for module `\$_DFFSR_PNN_'.
Generating RTLIL representation for module `\$_DFFSR_PPN_'.
Generating RTLIL representation for module `\$_DFFSR_NPP_'.
Generating RTLIL representation for module `\$_DFFSR_NNP_'.
Generating RTLIL representation for module `\$_DFFSR_NNN_'.
Generating RTLIL representation for module `\$_DFFSR_NPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PNPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPNP_'.
Generating RTLIL representation for module `\$_DFFSRE_PNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PNPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PPNN_'.
Generating RTLIL representation for module `\$_DFFSRE_PNNN_'.
Generating RTLIL representation for module `\$_DLATCHSR_PPP_'.
Generating RTLIL representation for module `\$_DLATCHSR_NPP_'.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP0N_'.
Generating RTLIL representation for module `\$_DFFE_NN0P_'.
Generating RTLIL representation for module `\$_DFFE_NN0N_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_NP1N_'.
Generating RTLIL representation for module `\$_DFFE_NN1P_'.
Generating RTLIL representation for module `\$_DFFE_NN1N_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNPP_'.
Generating RTLIL representation for module `\$_DFFSRE_NPNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPN_'.
Generating RTLIL representation for module `\$_DFFSRE_NNPN_'.
Generating RTLIL representation for module `\$_DFFSRE_NPNN_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNN_'.
Generating RTLIL representation for module `\$__SHREG_DFF_P_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PN0_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NN0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFF_PN1_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_NN1_'.
Successfully finished Verilog frontend.

3.100.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $lut.
Using template \$_DFF_P_ for cells of type $_DFF_P_.
Using template \$_DFFE_PP0P_ for cells of type $_DFFE_PP0P_.
Using extmapper simplemap for cells of type $logic_not.
No more expansions possible.
<suppressed ~3765 debug messages>

yosys> opt_expr -mux_undef

3.101. Executing OPT_EXPR pass (perform const folding).
Optimizing module gv_sha256.
<suppressed ~15722 debug messages>

yosys> simplemap

3.102. Executing SIMPLEMAP pass (map simple cells to gate primitives).

yosys> opt_expr

3.103. Executing OPT_EXPR pass (perform const folding).
Optimizing module gv_sha256.

yosys> opt_merge

3.104. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gv_sha256'.
<suppressed ~18846 debug messages>
Removed a total of 6282 cells.

yosys> opt_dff -nodffe -nosdff

3.105. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.106. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gv_sha256..
Removed 0 unused cells and 9102 unused wires.
<suppressed ~1 debug messages>

yosys> opt -nodffe -nosdff

3.107. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.107.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module gv_sha256.
<suppressed ~211 debug messages>

yosys> opt_merge -nomux

3.107.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gv_sha256'.
<suppressed ~9 debug messages>
Removed a total of 3 cells.

yosys> opt_muxtree

3.107.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \gv_sha256..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.107.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \gv_sha256.
Performed a total of 0 changes.

yosys> opt_merge

3.107.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gv_sha256'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.107.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.107.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gv_sha256..
Removed 0 unused cells and 30 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.107.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module gv_sha256.

3.107.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.107.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \gv_sha256..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.107.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \gv_sha256.
Performed a total of 0 changes.

yosys> opt_merge

3.107.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gv_sha256'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.107.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.107.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gv_sha256..

yosys> opt_expr

3.107.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module gv_sha256.

3.107.16. Finished OPT passes. (There is nothing left to do.)

yosys> abc -script /home/users/temp_dir/yosys_EByoyZ/abc_tmp_2.scr

3.108. Executing ABC pass (technology mapping using ABC).

3.108.1. Extracting gate netlist of module `\gv_sha256' to `<abc-temp-dir>/input.blif'..
Extracted 6497 gates and 7530 wires to a netlist network with 1031 inputs and 894 outputs.

3.108.1.1. Executing ABC.
DE:   #PIs = 1031  #Luts =  1540  Max Lvl =  30  Avg Lvl =   3.98  [   1.00 sec. at Pass 0]
DE:   #PIs = 1031  #Luts =  1540  Max Lvl =  30  Avg Lvl =   3.98  [  32.37 sec. at Pass 1]
DE:   #PIs = 1031  #Luts =  1530  Max Lvl =  29  Avg Lvl =   4.01  [   5.29 sec. at Pass 2]
DE:   #PIs = 1031  #Luts =  1526  Max Lvl =  29  Avg Lvl =   3.82  [   7.63 sec. at Pass 3]
DE:   #PIs = 1031  #Luts =  1525  Max Lvl =  30  Avg Lvl =   3.91  [   6.79 sec. at Pass 4]
DE:   #PIs = 1031  #Luts =  1523  Max Lvl =  29  Avg Lvl =   3.85  [  12.34 sec. at Pass 5]
DE:   #PIs = 1031  #Luts =  1523  Max Lvl =  29  Avg Lvl =   3.85  [   6.87 sec. at Pass 6]
DE:   #PIs = 1031  #Luts =  1523  Max Lvl =  29  Avg Lvl =   3.85  [   9.00 sec. at Pass 7]
DE:   #PIs = 1031  #Luts =  1521  Max Lvl =  30  Avg Lvl =   4.07  [   7.59 sec. at Pass 8]
DE:   #PIs = 1031  #Luts =  1521  Max Lvl =  28  Avg Lvl =   3.85  [  10.63 sec. at Pass 9]
DE:   #PIs = 1031  #Luts =  1521  Max Lvl =  28  Avg Lvl =   3.85  [   5.56 sec. at Pass 10]
DE:   #PIs = 1031  #Luts =  1521  Max Lvl =  28  Avg Lvl =   3.85  [  12.18 sec. at Pass 11]
DE:   #PIs = 1031  #Luts =  1521  Max Lvl =  28  Avg Lvl =   3.85  [   7.16 sec. at Pass 12]
DE:   #PIs = 1031  #Luts =  1520  Max Lvl =  29  Avg Lvl =   3.97  [   1.38 sec. at Pass 13]

yosys> opt_expr

3.109. Executing OPT_EXPR pass (perform const folding).
Optimizing module gv_sha256.

yosys> opt_merge -nomux

3.110. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gv_sha256'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.111. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \gv_sha256..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.112. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \gv_sha256.
Performed a total of 0 changes.

yosys> opt_merge

3.113. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gv_sha256'.
Removed a total of 0 cells.

yosys> opt_share

3.114. Executing OPT_SHARE pass.

yosys> opt_dff

3.115. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.116. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gv_sha256..
Removed 0 unused cells and 5173 unused wires.
<suppressed ~7 debug messages>

yosys> opt_expr

3.117. Executing OPT_EXPR pass (perform const folding).
Optimizing module gv_sha256.
MAX OPT ITERATION = 1

yosys> hierarchy -check

3.118. Executing HIERARCHY pass (managing design hierarchy).

3.118.1. Analyzing design hierarchy..
Top module:  \gv_sha256

3.118.2. Analyzing design hierarchy..
Top module:  \gv_sha256
Removed 0 unused modules.

yosys> stat

3.119. Printing statistics.

=== gv_sha256 ===

   Number of wires:               2034
   Number of wire bits:           6099
   Number of public wires:         162
   Number of public wire bits:    3660
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               2906
     $lut                         1520
     adder_carry                   288
     dffsre                       1098


yosys> opt_clean -purge

3.120. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gv_sha256..
Removed 0 unused cells and 123 unused wires.
<suppressed ~123 debug messages>

yosys> write_verilog -noattr -nohex synthesized.v

3.121. Executing Verilog backend.
Dumping module `\gv_sha256'.

End of script. Logfile hash: a88b1338c7, CPU: user 48.68s system 0.79s, MEM: 92.51 MB peak
Yosys 0.18+10 (git sha1 7a7a25778, gcc 9.1.0 -fPIC -Os)
Time spent: 95% 6x abc (1004 sec), 1% 22x opt_dff (20 sec), ...
real 335.68
user 970.40
sys 79.24
