
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys-Verific 0.0.36
 Yosys 0.17+76 (git sha1 ba67c2ec9, gcc 9.1.0 -fPIC -Os)


-- Executing script file `yosys.ys' --
echo on

yosys> plugin -i synth-rs

yosys> read -verific

yosys> read -incdir .

yosys> verific -vlog-incdir .

1. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Apr22_SW_Release, released at Thu Apr 28 20:08:21 2022.

yosys> verilog_defaults -add -I.

yosys> read -vlog2k baud_generator.v ql_clkgate_x4.v ql_mux2_x2.v registers.v serializer_deserializer.v spi_master_top.v

yosys> verific -vlog2k baud_generator.v ql_clkgate_x4.v ql_mux2_x2.v registers.v serializer_deserializer.v spi_master_top.v

2. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Apr22_SW_Release, released at Thu Apr 28 20:08:21 2022.
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'baud_generator.v'
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'ql_clkgate_x4.v'
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'ql_mux2_x2.v'
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'registers.v'
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'serializer_deserializer.v'
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'spi_master_top.v'

yosys> synth_rs -top spi_master_top -tech genesis -goal area -de -no_dsp -no_bram -verilog synthesized.v

3. Executing synth_rs pass: v0.4.52

yosys> read_verilog -lib -specify -nomem2reg +/rapidsilicon/common/cells_sim.v +/rapidsilicon/genesis/cells_sim.v

3.1. Executing Verilog-2005 frontend: /home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v
Parsing Verilog input from `/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\inv'.
Generating RTLIL representation for module `\buff'.
Generating RTLIL representation for module `\logic_0'.
Generating RTLIL representation for module `\logic_1'.
Generating RTLIL representation for module `\gclkbuff'.
Successfully finished Verilog frontend.

3.2. Executing Verilog-2005 frontend: /home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/cells_sim.v
Parsing Verilog input from `/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\dffsre'.
Generating RTLIL representation for module `\dffnsre'.
Generating RTLIL representation for module `\latchsre'.
Generating RTLIL representation for module `\latchnsre'.
Generating RTLIL representation for module `\io_scff'.
Generating RTLIL representation for module `\scff'.
Generating RTLIL representation for module `\sh_dff'.
Generating RTLIL representation for module `\adder_carry'.
Generating RTLIL representation for module `\sdffr'.
Generating RTLIL representation for module `\sdffs'.
Generating RTLIL representation for module `\TDP_BRAM18'.
Generating RTLIL representation for module `\TDP36K'.
Generating RTLIL representation for module `\RS_DSP1'.
Generating RTLIL representation for module `\RS_DSP2'.
Generating RTLIL representation for module `\RS_DSP2_MULT'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGIN_REGOUT'.
Generating RTLIL representation for module `\dsp_t1_sim'.
Generating RTLIL representation for module `\dsp_t1_20x18x64'.
Generating RTLIL representation for module `\dsp_t1_10x9x32'.
Successfully finished Verilog frontend.

yosys> hierarchy -check -top spi_master_top

3.3. Executing HIERARCHY pass (managing design hierarchy).
VERIFIC-INFO [VERI-1018] spi_master_top.v:26: compiling module 'spi_master_top'
VERIFIC-WARNING [VERI-2371] spi_master_top.v:109: delay control is not supported for synthesis
VERIFIC-INFO [VERI-1018] registers.v:15: compiling module 'registers'
VERIFIC-WARNING [VERI-1209] registers.v:104: expression size 8 truncated to fit in target size 3
VERIFIC-WARNING [VERI-2371] registers.v:205: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] registers.v:206: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] registers.v:207: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] registers.v:208: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] registers.v:209: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] registers.v:210: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] registers.v:211: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] registers.v:221: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] registers.v:224: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] registers.v:229: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] registers.v:234: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] registers.v:241: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] registers.v:244: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] registers.v:249: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] registers.v:254: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] registers.v:261: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] registers.v:264: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] registers.v:269: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] registers.v:274: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] registers.v:282: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] registers.v:285: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] registers.v:290: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] registers.v:295: delay control is not supported for synthesis
VERIFIC-INFO [VERI-1018] serializer_deserializer.v:16: compiling module 'serializer_deserializer'
VERIFIC-INFO [VERI-1018] ql_mux2_x2.v:1: compiling module 'ql_mux2_x2'
VERIFIC-INFO [VERI-1018] ql_clkgate_x4.v:1: compiling module 'ql_clkgate_x4'
VERIFIC-INFO [VERI-1018] baud_generator.v:14: compiling module 'baud_generator'
VERIFIC-WARNING [VERI-1209] baud_generator.v:45: expression size 18 truncated to fit in target size 17
VERIFIC-WARNING [VERI-1209] serializer_deserializer.v:130: expression size 4 truncated to fit in target size 3
Importing module spi_master_top.
Importing module registers.
Importing module serializer_deserializer.
Importing module baud_generator.
Importing module ql_clkgate_x4.
Importing module ql_mux2_x2.

3.3.1. Analyzing design hierarchy..
Top module:  \spi_master_top
Used module:     \serializer_deserializer
Used module:         \baud_generator
Used module:         \ql_clkgate_x4
Used module:         \ql_mux2_x2
Used module:     \registers

3.3.2. Analyzing design hierarchy..
Top module:  \spi_master_top
Used module:     \serializer_deserializer
Used module:         \baud_generator
Used module:         \ql_clkgate_x4
Used module:         \ql_mux2_x2
Used module:     \registers
Removed 0 unused modules.

yosys> proc

3.4. Executing PROC pass (convert processes to netlists).

yosys> proc_clean

3.4.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> proc_rmdead

3.4.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

yosys> proc_prune

3.4.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

yosys> proc_init

3.4.4. Executing PROC_INIT pass (extract init attributes).

yosys> proc_arst

3.4.5. Executing PROC_ARST pass (detect async resets in processes).

yosys> proc_rom

3.4.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

yosys> proc_mux

3.4.7. Executing PROC_MUX pass (convert decision trees to multiplexers).

yosys> proc_dlatch

3.4.8. Executing PROC_DLATCH pass (convert process syncs to latches).

yosys> proc_dff

3.4.9. Executing PROC_DFF pass (convert process syncs to FFs).

yosys> proc_memwr

3.4.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

yosys> proc_clean

3.4.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> opt_expr -keepdc

3.4.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module ql_mux2_x2.
Optimizing module ql_clkgate_x4.
Optimizing module baud_generator.
<suppressed ~2 debug messages>
Optimizing module serializer_deserializer.
<suppressed ~10 debug messages>
Optimizing module registers.
<suppressed ~4 debug messages>
Optimizing module spi_master_top.

yosys> flatten

3.5. Executing FLATTEN pass (flatten design).
Deleting now unused module ql_mux2_x2.
Deleting now unused module ql_clkgate_x4.
Deleting now unused module baud_generator.
Deleting now unused module serializer_deserializer.
Deleting now unused module registers.
<suppressed ~5 debug messages>

yosys> tribuf -logic

3.6. Executing TRIBUF pass.

yosys> deminout

3.7. Executing DEMINOUT pass (demote inout ports to input or output).

yosys> opt_expr

3.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_master_top.
<suppressed ~1 debug messages>

yosys> opt_clean

3.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_master_top..
Removed 0 unused cells and 290 unused wires.
<suppressed ~86 debug messages>

yosys> check

3.10. Executing CHECK pass (checking for obvious problems).
Checking module spi_master_top...
Found and reported 0 problems.

yosys> opt -nodffe -nosdff

3.11. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_master_top.

yosys> opt_merge -nomux

3.11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_master_top'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.11.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \spi_master_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~35 debug messages>

yosys> opt_reduce

3.11.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \spi_master_top.
Performed a total of 0 changes.

yosys> opt_merge

3.11.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_master_top'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.11.6. Executing OPT_DFF pass (perform DFF optimizations).
Changing const-value async load to async reset on $verific$wb_ack_i_reg$spi_master_top.v:109$19 ($aldff) from module spi_master_top.
Changing const-value async load to async reset on $flatten\spi_register.$verific$tx_reg_reg$registers.v:214$362 ($aldff) from module spi_master_top.
Changing const-value async load to async reset on $flatten\spi_register.$verific$ss_reg_reg$registers.v:214$363 ($aldff) from module spi_master_top.
Changing const-value async load to async reset on $flatten\spi_register.$verific$spi_ctrl_reg_reg$registers.v:214$364 ($aldff) from module spi_master_top.
Changing const-value async load to async reset on $flatten\spi_register.$verific$spi_clk_cnt_reg_reg$registers.v:214$365 ($aldff) from module spi_master_top.
Changing const-value async load to async reset on $flatten\spi_register.$verific$irq_wr2_reg$registers.v:132$309 ($aldff) from module spi_master_top.
Changing const-value async load to async reset on $flatten\spi_register.$verific$irq_wr1_reg$registers.v:132$308 ($aldff) from module spi_master_top.
Changing const-value async load to async reset on $flatten\spi_register.$verific$irq_rd2_reg$registers.v:132$307 ($aldff) from module spi_master_top.
Changing const-value async load to async reset on $flatten\spi_register.$verific$irq_rd1_reg$registers.v:132$306 ($aldff) from module spi_master_top.
Changing const-value async load to async reset on $flatten\spi_register.$verific$cmd_reg7_reg$registers.v:296$396 ($aldff) from module spi_master_top.
Changing const-value async load to async reset on $flatten\spi_register.$verific$cmd_reg32_reg$registers.v:275$387 ($aldff) from module spi_master_top.
Changing const-value async load to async reset on $flatten\spi_register.$verific$cmd_reg1_reg$registers.v:255$380 ($aldff) from module spi_master_top.
Changing const-value async load to async reset on $flatten\spi_register.$verific$cmd_reg0_reg$registers.v:235$374 ($aldff) from module spi_master_top.
Changing const-value async load to async reset on $flatten\spi_register.$verific$TIP_reg$registers.v:174$328 ($aldff) from module spi_master_top.
Changing const-value async load to async reset on $flatten\spi_register.$verific$SPICR1_reg$registers.v:214$361 ($aldff) from module spi_master_top.
Changing const-value async load to async reset on $flatten\spi_register.$verific$SPIBR_reg$registers.v:214$360 ($aldff) from module spi_master_top.
Changing const-value async load to async reset on $flatten\spi_register.$verific$INTR_write_reg$registers.v:163$324 ($aldff) from module spi_master_top.
Changing const-value async load to async reset on $flatten\spi_register.$verific$INTR_read_reg$registers.v:149$320 ($aldff) from module spi_master_top.
Removing never-active async load on $flatten\spi_register.$verific$Data_out_r_reg$registers.v:316$399 ($aldff) from module spi_master_top.
Changing const-value async load to async reset on $flatten\ser_des.\BG.$verific$count16_reg$baud_generator.v:46$691 ($aldff) from module spi_master_top.
Changing const-value async load to async reset on $flatten\ser_des.\BG.$verific$Baud_Rate_r_reg$baud_generator.v:62$698 ($aldff) from module spi_master_top.
Changing const-value async load to async reset on $flatten\ser_des.$verific$trnsfer_done_reg$serializer_deserializer.v:196$606 ($aldff) from module spi_master_top.
Changing const-value async load to async reset on $flatten\ser_des.$verific$bit_count_reg$serializer_deserializer.v:132$562 ($aldff) from module spi_master_top.
Changing const-value async load to async reset on $flatten\ser_des.$verific$Shift_Reg_reg$serializer_deserializer.v:302$643 ($aldff) from module spi_master_top.
Changing const-value async load to async reset on $flatten\ser_des.$verific$SS_bar_reg$serializer_deserializer.v:153$572 ($aldff) from module spi_master_top.
Changing const-value async load to async reset on $flatten\ser_des.$verific$SPI_Read_Data_reg$serializer_deserializer.v:338$662 ($aldff) from module spi_master_top.
Changing const-value async load to async reset on $flatten\ser_des.$verific$IRQ_read_reg$serializer_deserializer.v:179$602 ($aldff) from module spi_master_top.
Changing const-value async load to async reset on $flatten\ser_des.$verific$FSM_spi_state_reg$serializer_deserializer.v:283$636 ($aldff) from module spi_master_top.

yosys> opt_clean

3.11.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_master_top..

yosys> opt_expr

3.11.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_master_top.

3.11.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.11.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \spi_master_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~35 debug messages>

yosys> opt_reduce

3.11.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \spi_master_top.
Performed a total of 0 changes.

yosys> opt_merge

3.11.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_master_top'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.11.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.11.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_master_top..

yosys> opt_expr

3.11.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_master_top.

3.11.16. Finished OPT passes. (There is nothing left to do.)

yosys> fsm -encoding binary

3.12. Executing FSM pass (extract and optimize FSM).

yosys> fsm_detect

3.12.1. Executing FSM_DETECT pass (finding FSMs in design).

yosys> fsm_extract

3.12.2. Executing FSM_EXTRACT pass (extracting FSM from design).

yosys> fsm_opt

3.12.3. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> opt_clean

3.12.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_master_top..

yosys> fsm_opt

3.12.5. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> fsm_recode -encoding binary

3.12.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

yosys> fsm_info

3.12.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

yosys> fsm_map

3.12.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

yosys> opt -sat

3.13. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_master_top.

yosys> opt_merge -nomux

3.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_master_top'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \spi_master_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~35 debug messages>

yosys> opt_reduce

3.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \spi_master_top.
Performed a total of 0 changes.

yosys> opt_merge

3.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_master_top'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.13.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $flatten\spi_register.$verific$tx_reg_reg$registers.v:214$362 ($adff) from module spi_master_top (D = $flatten\spi_register.$verific$n439$256, Q = \spi_register.tx_reg).
Adding EN signal on $flatten\spi_register.$verific$ss_reg_reg$registers.v:214$363 ($adff) from module spi_master_top (D = $flatten\spi_register.$verific$n448$257, Q = \spi_register.ss_reg).
Adding EN signal on $flatten\spi_register.$verific$spi_ctrl_reg_reg$registers.v:214$364 ($adff) from module spi_master_top (D = $flatten\spi_register.$verific$n457$258, Q = \spi_register.spi_ctrl_reg).
Adding EN signal on $flatten\spi_register.$verific$spi_clk_cnt_reg_reg$registers.v:214$365 ($adff) from module spi_master_top (D = $flatten\spi_register.$verific$n461$259, Q = \spi_register.spi_clk_cnt_reg).
Adding EN signal on $flatten\spi_register.$verific$cmd_reg7_reg$registers.v:296$396 ($adff) from module spi_master_top (D = $flatten\spi_register.$verific$n596$232, Q = \spi_register.cmd_reg7).
Adding EN signal on $flatten\spi_register.$verific$cmd_reg32_reg$registers.v:275$387 ($adff) from module spi_master_top (D = $flatten\spi_register.$verific$n577$265, Q = \spi_register.cmd_reg32).
Adding EN signal on $flatten\spi_register.$verific$cmd_reg1_reg$registers.v:255$380 ($adff) from module spi_master_top (D = $flatten\spi_register.$verific$n550$224, Q = \spi_register.cmd_reg1).
Adding EN signal on $flatten\spi_register.$verific$cmd_reg0_reg$registers.v:235$374 ($adff) from module spi_master_top (D = $flatten\spi_register.$verific$n538$219, Q = \spi_register.cmd_reg0).
Adding EN signal on $flatten\spi_register.$verific$SPICR1_reg$registers.v:214$361 ($adff) from module spi_master_top (D = $flatten\spi_register.$verific$n430$255, Q = \spi_register.SPICR1).
Adding EN signal on $flatten\spi_register.$verific$SPIBR_reg$registers.v:214$360 ($adff) from module spi_master_top (D = $flatten\spi_register.$verific$n413$254, Q = \spi_register.SPIBR).
Adding EN signal on $flatten\spi_register.$verific$INTR_write_reg$registers.v:163$324 ($adff) from module spi_master_top (D = $flatten\spi_register.$verific$n112$205, Q = \spi_register.INTR_write).
Adding EN signal on $flatten\spi_register.$verific$INTR_read_reg$registers.v:149$320 ($adff) from module spi_master_top (D = $flatten\spi_register.$verific$n103$202, Q = \spi_register.INTR_read).
Adding EN signal on $flatten\ser_des.\BG.$verific$Baud_Rate_r_reg$baud_generator.v:62$698 ($adff) from module spi_master_top (D = $flatten\ser_des.\BG.$verific$n162$674, Q = \ser_des.BG.Baud_Rate_r).
Adding EN signal on $flatten\ser_des.$verific$bit_count_reg$serializer_deserializer.v:132$562 ($adff) from module spi_master_top (D = $flatten\ser_des.$verific$n59$469, Q = \ser_des.bit_count).
Adding EN signal on $flatten\ser_des.$verific$SS_bar_reg$serializer_deserializer.v:153$572 ($adff) from module spi_master_top (D = $flatten\ser_des.$verific$n90$419, Q = \ser_des.SS_bar).
Adding EN signal on $flatten\ser_des.$verific$SPI_Read_Data_reg$serializer_deserializer.v:338$662 ($adff) from module spi_master_top (D = $flatten\ser_des.$verific$n473$512, Q = \ser_des.SPI_Read_Data).
Setting constant 0-bit at position 1 on $auto$ff.cc:262:slice$748 ($adffe) from module spi_master_top.
Setting constant 0-bit at position 3 on $auto$ff.cc:262:slice$717 ($adffe) from module spi_master_top.
Setting constant 0-bit at position 4 on $auto$ff.cc:262:slice$717 ($adffe) from module spi_master_top.
Setting constant 0-bit at position 5 on $auto$ff.cc:262:slice$717 ($adffe) from module spi_master_top.
Setting constant 0-bit at position 6 on $auto$ff.cc:262:slice$717 ($adffe) from module spi_master_top.

yosys> opt_clean

3.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_master_top..

yosys> opt_expr

3.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_master_top.
<suppressed ~16 debug messages>

3.13.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.13.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \spi_master_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~35 debug messages>

yosys> opt_reduce

3.13.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \spi_master_top.
Performed a total of 0 changes.

yosys> opt_merge

3.13.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_master_top'.
<suppressed ~33 debug messages>
Removed a total of 11 cells.

yosys> opt_dff -sat

3.13.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.13.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_master_top..
Removed 0 unused cells and 11 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.13.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_master_top.

3.13.16. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.13.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \spi_master_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~36 debug messages>

yosys> opt_reduce

3.13.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \spi_master_top.
Performed a total of 0 changes.

yosys> opt_merge

3.13.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_master_top'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.13.20. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.13.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_master_top..

yosys> opt_expr

3.13.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_master_top.

3.13.23. Finished OPT passes. (There is nothing left to do.)

yosys> wreduce -keepdc

3.14. Executing WREDUCE pass (reducing word size of cells).
Removed top 16 bits (of 17) from port B of cell spi_master_top.$flatten\ser_des.\BG.$verific$add_12$baud_generator.v:45$689 ($add).
Removed top 1 bits (of 17) from port B of cell spi_master_top.$flatten\ser_des.\BG.$verific$equal_20$baud_generator.v:58$693 ($eq).
Removed top 1 bits (of 6) from mux cell spi_master_top.$flatten\ser_des.$verific$mux_220$serializer_deserializer.v:261$632 ($mux).
Removed top 1 bits (of 3) from mux cell spi_master_top.$flatten\ser_des.$verific$mux_113$serializer_deserializer.v:219$621 ($mux).
Removed top 2 bits (of 3) from port B of cell spi_master_top.$flatten\ser_des.$verific$equal_90$serializer_deserializer.v:201$609 ($eq).
Removed top 2 bits (of 3) from port B of cell spi_master_top.$flatten\ser_des.$verific$add_19$serializer_deserializer.v:130$556 ($add).
Removed top 1 bits (of 3) from port B of cell spi_master_top.$flatten\ser_des.$verific$equal_14$serializer_deserializer.v:129$551 ($eq).
Removed top 1 bits (of 3) from port B of cell spi_master_top.$flatten\ser_des.$verific$equal_5$serializer_deserializer.v:95$517 ($eq).
Removed top 1 bits (of 3) from wire spi_master_top.$flatten\ser_des.$verific$n176$473.
Removed top 1 bits (of 3) from wire spi_master_top.$flatten\ser_des.$verific$n251$491.

yosys> peepopt

3.15. Executing PEEPOPT pass (run peephole optimizers).

yosys> pmuxtree

3.16. Executing PMUXTREE pass.

yosys> opt_clean

3.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_master_top..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

yosys> alumacc

3.18. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module spi_master_top:
  creating $macc model for $flatten\ser_des.$verific$add_19$serializer_deserializer.v:130$556 ($add).
  creating $macc model for $flatten\ser_des.\BG.$verific$add_12$baud_generator.v:45$689 ($add).
  creating $alu model for $macc $flatten\ser_des.\BG.$verific$add_12$baud_generator.v:45$689.
  creating $alu model for $macc $flatten\ser_des.$verific$add_19$serializer_deserializer.v:130$556.
  creating $alu cell for $flatten\ser_des.$verific$add_19$serializer_deserializer.v:130$556: $auto$alumacc.cc:485:replace_alu$776
  creating $alu cell for $flatten\ser_des.\BG.$verific$add_12$baud_generator.v:45$689: $auto$alumacc.cc:485:replace_alu$779
  created 2 $alu and 0 $macc cells.

yosys> opt

3.19. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_master_top.

yosys> opt_merge -nomux

3.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_master_top'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \spi_master_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~36 debug messages>

yosys> opt_reduce

3.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \spi_master_top.
Performed a total of 0 changes.

yosys> opt_merge

3.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_master_top'.
Removed a total of 0 cells.

yosys> opt_dff

3.19.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.19.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_master_top..

yosys> opt_expr

3.19.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_master_top.

3.19.9. Finished OPT passes. (There is nothing left to do.)

yosys> stat

3.20. Printing statistics.

=== spi_master_top ===

   Number of wires:                317
   Number of wire bits:            898
   Number of public wires:         170
   Number of public wire bits:     463
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                191
     $adff                          11
     $adffe                         16
     $alu                            2
     $and                           25
     $bmux                           8
     $dff                            1
     $eq                            12
     $logic_not                      2
     $mux                           72
     $ne                             1
     $not                           15
     $or                            12
     $reduce_and                     3
     $reduce_bool                   10
     $xor                            1


yosys> memory -nomap

3.21. Executing MEMORY pass.

yosys> opt_mem

3.21.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

yosys> opt_mem_priority

3.21.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

yosys> opt_mem_feedback

3.21.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

yosys> memory_bmux2rom

3.21.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

yosys> memory_dff

3.21.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

yosys> opt_clean

3.21.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_master_top..

yosys> memory_share

3.21.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

yosys> opt_mem_widen

3.21.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

yosys> opt_clean

3.21.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_master_top..

yosys> memory_collect

3.21.10. Executing MEMORY_COLLECT pass (generating $mem cells).

yosys> stat

3.22. Printing statistics.

=== spi_master_top ===

   Number of wires:                317
   Number of wire bits:            898
   Number of public wires:         170
   Number of public wire bits:     463
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                191
     $adff                          11
     $adffe                         16
     $alu                            2
     $and                           25
     $bmux                           8
     $dff                            1
     $eq                            12
     $logic_not                      2
     $mux                           72
     $ne                             1
     $not                           15
     $or                            12
     $reduce_and                     3
     $reduce_bool                   10
     $xor                            1


yosys> opt_clean

3.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_master_top..

yosys> stat

3.24. Printing statistics.

=== spi_master_top ===

   Number of wires:                317
   Number of wire bits:            898
   Number of public wires:         170
   Number of public wire bits:     463
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                191
     $adff                          11
     $adffe                         16
     $alu                            2
     $and                           25
     $bmux                           8
     $dff                            1
     $eq                            12
     $logic_not                      2
     $mux                           72
     $ne                             1
     $not                           15
     $or                            12
     $reduce_and                     3
     $reduce_bool                   10
     $xor                            1


yosys> techmap -map +/techmap.v -map +/rapidsilicon/genesis/arith_map.v

3.25. Executing TECHMAP pass (map to technology primitives).

3.25.1. Executing Verilog-2005 frontend: /home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.25.2. Executing Verilog-2005 frontend: /home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/arith_map.v
Parsing Verilog input from `/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_rs_alu'.
Successfully finished Verilog frontend.

3.25.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $adff.
Using extmapper simplemap for cells of type $adffe.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $bmux.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $reduce_bool.
Using template $paramod$3ef7d3dd227da7627a99c5e5a6a4deb817573e39\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $logic_not.
Using template $paramod$18205a5da979f93ffab44671dcc4a48cf14e25e2\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000011 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010001 for cells of type $lcu.
No more expansions possible.
<suppressed ~801 debug messages>

yosys> stat

3.26. Printing statistics.

=== spi_master_top ===

   Number of wires:                527
   Number of wire bits:           4101
   Number of public wires:         170
   Number of public wire bits:     463
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1197
     $_AND_                         90
     $_DFFE_PP0P_                   62
     $_DFFE_PP1P_                    4
     $_DFF_PP0_                     36
     $_DFF_P_                        8
     $_MUX_                        707
     $_NOT_                         49
     $_OR_                         131
     $_XOR_                        110


yosys> opt

3.27. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.27.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_master_top.
<suppressed ~416 debug messages>

yosys> opt_merge -nomux

3.27.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_master_top'.
<suppressed ~96 debug messages>
Removed a total of 32 cells.

yosys> opt_muxtree

3.27.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \spi_master_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.27.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \spi_master_top.
Performed a total of 0 changes.

yosys> opt_merge

3.27.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_master_top'.
Removed a total of 0 cells.

yosys> opt_dff

3.27.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $auto$ff.cc:262:slice$898 ($_DFFE_PP0P_) from module spi_master_top (D = $flatten\spi_register.$verific$n461$259 [7], Q = \spi_register.spi_clk_cnt_reg [7]).
Adding EN signal on $auto$ff.cc:262:slice$1846 ($_DFFE_PP0P_) from module spi_master_top (D = $flatten\spi_register.$verific$n430$255 [7], Q = \spi_register.SPICR1 [7]).
Adding EN signal on $auto$ff.cc:262:slice$945 ($_DFFE_PP0P_) from module spi_master_top (D = $flatten\spi_register.$verific$n413$254 [15], Q = \spi_register.SPIBR [15]).
Adding EN signal on $auto$ff.cc:262:slice$921 ($_DFFE_PP1P_) from module spi_master_top (D = $flatten\spi_register.$verific$n457$258 [2], Q = \spi_register.spi_ctrl_reg [2]).
Adding EN signal on $auto$ff.cc:262:slice$929 ($_DFFE_PP0P_) from module spi_master_top (D = $flatten\spi_register.$verific$n448$257 [7], Q = \spi_register.ss_reg [7]).
Adding EN signal on $auto$ff.cc:262:slice$1585 ($_DFFE_PP0P_) from module spi_master_top (D = $flatten\spi_register.$verific$n439$256 [7], Q = \spi_register.tx_reg [7]).
Adding EN signal on $auto$ff.cc:262:slice$895 ($_DFFE_PP0P_) from module spi_master_top (D = $flatten\spi_register.$verific$n461$259 [0], Q = \spi_register.spi_clk_cnt_reg [0]).
Adding EN signal on $auto$ff.cc:262:slice$896 ($_DFFE_PP0P_) from module spi_master_top (D = $flatten\spi_register.$verific$n461$259 [1], Q = \spi_register.spi_clk_cnt_reg [1]).
Adding EN signal on $auto$ff.cc:262:slice$897 ($_DFFE_PP0P_) from module spi_master_top (D = $flatten\spi_register.$verific$n461$259 [2], Q = \spi_register.spi_clk_cnt_reg [2]).
Adding EN signal on $auto$ff.cc:262:slice$919 ($_DFFE_PP1P_) from module spi_master_top (D = $flatten\spi_register.$verific$n457$258 [0], Q = \spi_register.spi_ctrl_reg [0]).
Adding EN signal on $auto$ff.cc:262:slice$920 ($_DFFE_PP1P_) from module spi_master_top (D = $flatten\spi_register.$verific$n457$258 [1], Q = \spi_register.spi_ctrl_reg [1]).
Adding EN signal on $auto$ff.cc:262:slice$922 ($_DFFE_PP0P_) from module spi_master_top (D = $flatten\spi_register.$verific$n448$257 [0], Q = \spi_register.ss_reg [0]).
Adding EN signal on $auto$ff.cc:262:slice$923 ($_DFFE_PP0P_) from module spi_master_top (D = $flatten\spi_register.$verific$n448$257 [1], Q = \spi_register.ss_reg [1]).
Adding EN signal on $auto$ff.cc:262:slice$924 ($_DFFE_PP0P_) from module spi_master_top (D = $flatten\spi_register.$verific$n448$257 [2], Q = \spi_register.ss_reg [2]).
Adding EN signal on $auto$ff.cc:262:slice$925 ($_DFFE_PP0P_) from module spi_master_top (D = $flatten\spi_register.$verific$n448$257 [3], Q = \spi_register.ss_reg [3]).
Adding EN signal on $auto$ff.cc:262:slice$926 ($_DFFE_PP0P_) from module spi_master_top (D = $flatten\spi_register.$verific$n448$257 [4], Q = \spi_register.ss_reg [4]).
Adding EN signal on $auto$ff.cc:262:slice$927 ($_DFFE_PP0P_) from module spi_master_top (D = $flatten\spi_register.$verific$n448$257 [5], Q = \spi_register.ss_reg [5]).
Adding EN signal on $auto$ff.cc:262:slice$928 ($_DFFE_PP0P_) from module spi_master_top (D = $flatten\spi_register.$verific$n448$257 [6], Q = \spi_register.ss_reg [6]).
Adding EN signal on $auto$ff.cc:262:slice$930 ($_DFFE_PP1P_) from module spi_master_top (D = $flatten\spi_register.$verific$n413$254 [0], Q = \spi_register.SPIBR [0]).
Adding EN signal on $auto$ff.cc:262:slice$931 ($_DFFE_PP0P_) from module spi_master_top (D = $flatten\spi_register.$verific$n413$254 [1], Q = \spi_register.SPIBR [1]).
Adding EN signal on $auto$ff.cc:262:slice$932 ($_DFFE_PP0P_) from module spi_master_top (D = $flatten\spi_register.$verific$n413$254 [2], Q = \spi_register.SPIBR [2]).
Adding EN signal on $auto$ff.cc:262:slice$933 ($_DFFE_PP0P_) from module spi_master_top (D = $flatten\spi_register.$verific$n413$254 [3], Q = \spi_register.SPIBR [3]).
Adding EN signal on $auto$ff.cc:262:slice$934 ($_DFFE_PP0P_) from module spi_master_top (D = $flatten\spi_register.$verific$n413$254 [4], Q = \spi_register.SPIBR [4]).
Adding EN signal on $auto$ff.cc:262:slice$935 ($_DFFE_PP0P_) from module spi_master_top (D = $flatten\spi_register.$verific$n413$254 [5], Q = \spi_register.SPIBR [5]).
Adding EN signal on $auto$ff.cc:262:slice$936 ($_DFFE_PP0P_) from module spi_master_top (D = $flatten\spi_register.$verific$n413$254 [6], Q = \spi_register.SPIBR [6]).
Adding EN signal on $auto$ff.cc:262:slice$937 ($_DFFE_PP0P_) from module spi_master_top (D = $flatten\spi_register.$verific$n413$254 [7], Q = \spi_register.SPIBR [7]).
Adding EN signal on $auto$ff.cc:262:slice$938 ($_DFFE_PP0P_) from module spi_master_top (D = $flatten\spi_register.$verific$n413$254 [8], Q = \spi_register.SPIBR [8]).
Adding EN signal on $auto$ff.cc:262:slice$939 ($_DFFE_PP0P_) from module spi_master_top (D = $flatten\spi_register.$verific$n413$254 [9], Q = \spi_register.SPIBR [9]).
Adding EN signal on $auto$ff.cc:262:slice$940 ($_DFFE_PP0P_) from module spi_master_top (D = $flatten\spi_register.$verific$n413$254 [10], Q = \spi_register.SPIBR [10]).
Adding EN signal on $auto$ff.cc:262:slice$941 ($_DFFE_PP0P_) from module spi_master_top (D = $flatten\spi_register.$verific$n413$254 [11], Q = \spi_register.SPIBR [11]).
Adding EN signal on $auto$ff.cc:262:slice$942 ($_DFFE_PP0P_) from module spi_master_top (D = $flatten\spi_register.$verific$n413$254 [12], Q = \spi_register.SPIBR [12]).
Adding EN signal on $auto$ff.cc:262:slice$943 ($_DFFE_PP0P_) from module spi_master_top (D = $flatten\spi_register.$verific$n413$254 [13], Q = \spi_register.SPIBR [13]).
Adding EN signal on $auto$ff.cc:262:slice$944 ($_DFFE_PP0P_) from module spi_master_top (D = $flatten\spi_register.$verific$n413$254 [14], Q = \spi_register.SPIBR [14]).
Adding EN signal on $auto$ff.cc:262:slice$1843 ($_DFFE_PP0P_) from module spi_master_top (D = $flatten\spi_register.$verific$n430$255 [4], Q = \spi_register.SPICR1 [4]).
Adding EN signal on $auto$ff.cc:262:slice$1841 ($_DFFE_PP0P_) from module spi_master_top (D = $flatten\spi_register.$verific$n430$255 [2], Q = \spi_register.SPICR1 [2]).
Adding EN signal on $auto$ff.cc:262:slice$1845 ($_DFFE_PP0P_) from module spi_master_top (D = $flatten\spi_register.$verific$n430$255 [6], Q = \spi_register.SPICR1 [6]).
Adding EN signal on $auto$ff.cc:262:slice$1842 ($_DFFE_PP0P_) from module spi_master_top (D = $flatten\spi_register.$verific$n430$255 [3], Q = \spi_register.SPICR1 [3]).
Adding EN signal on $auto$ff.cc:262:slice$1840 ($_DFFE_PP0P_) from module spi_master_top (D = $flatten\spi_register.$verific$n430$255 [0], Q = \spi_register.SPICR1 [0]).
Adding EN signal on $auto$ff.cc:262:slice$1844 ($_DFFE_PP0P_) from module spi_master_top (D = $flatten\spi_register.$verific$n430$255 [5], Q = \spi_register.SPICR1 [5]).
Adding EN signal on $auto$ff.cc:262:slice$1578 ($_DFFE_PP0P_) from module spi_master_top (D = $flatten\spi_register.$verific$n439$256 [0], Q = \spi_register.tx_reg [0]).
Adding EN signal on $auto$ff.cc:262:slice$1579 ($_DFFE_PP0P_) from module spi_master_top (D = $flatten\spi_register.$verific$n439$256 [1], Q = \spi_register.tx_reg [1]).
Adding EN signal on $auto$ff.cc:262:slice$1580 ($_DFFE_PP0P_) from module spi_master_top (D = $flatten\spi_register.$verific$n439$256 [2], Q = \spi_register.tx_reg [2]).
Adding EN signal on $auto$ff.cc:262:slice$1581 ($_DFFE_PP0P_) from module spi_master_top (D = $flatten\spi_register.$verific$n439$256 [3], Q = \spi_register.tx_reg [3]).
Adding EN signal on $auto$ff.cc:262:slice$1582 ($_DFFE_PP0P_) from module spi_master_top (D = $flatten\spi_register.$verific$n439$256 [4], Q = \spi_register.tx_reg [4]).
Adding EN signal on $auto$ff.cc:262:slice$1583 ($_DFFE_PP0P_) from module spi_master_top (D = $flatten\spi_register.$verific$n439$256 [5], Q = \spi_register.tx_reg [5]).
Adding EN signal on $auto$ff.cc:262:slice$1584 ($_DFFE_PP0P_) from module spi_master_top (D = $flatten\spi_register.$verific$n439$256 [6], Q = \spi_register.tx_reg [6]).

yosys> opt_clean

3.27.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_master_top..
Removed 24 unused cells and 346 unused wires.
<suppressed ~25 debug messages>

yosys> opt_expr

3.27.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_master_top.
<suppressed ~552 debug messages>

3.27.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.27.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \spi_master_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.27.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \spi_master_top.
Performed a total of 0 changes.

yosys> opt_merge

3.27.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_master_top'.
<suppressed ~2427 debug messages>
Removed a total of 809 cells.

yosys> opt_dff

3.27.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.27.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_master_top..
Removed 0 unused cells and 777 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.27.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_master_top.

3.27.16. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.27.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \spi_master_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.27.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \spi_master_top.
Performed a total of 0 changes.

yosys> opt_merge

3.27.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_master_top'.
Removed a total of 0 cells.

yosys> opt_dff

3.27.20. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.27.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_master_top..

yosys> opt_expr

3.27.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_master_top.

3.27.23. Finished OPT passes. (There is nothing left to do.)

yosys> opt -fast -full

3.28. Executing OPT pass (performing simple optimizations).

yosys> opt_expr -full

3.28.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_master_top.
<suppressed ~198 debug messages>

yosys> opt_merge

3.28.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_master_top'.
<suppressed ~108 debug messages>
Removed a total of 36 cells.

yosys> opt_dff

3.28.3. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.28.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_master_top..
Removed 0 unused cells and 38 unused wires.
<suppressed ~1 debug messages>

3.28.5. Finished fast OPT passes.

yosys> memory_map

3.29. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

yosys> opt -full

3.30. Executing OPT pass (performing simple optimizations).

yosys> opt_expr -full

3.30.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_master_top.
<suppressed ~8 debug messages>

yosys> opt_merge -nomux

3.30.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_master_top'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.30.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \spi_master_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce -full

3.30.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \spi_master_top.
Performed a total of 0 changes.

yosys> opt_merge

3.30.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_master_top'.
Removed a total of 0 cells.

yosys> opt_share

3.30.6. Executing OPT_SHARE pass.
    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$1473 in front of them:
        $auto$simplemap.cc:312:simplemap_bmux$1456
        $auto$simplemap.cc:312:simplemap_bmux$1448

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$1778 in front of them:
        $auto$simplemap.cc:312:simplemap_bmux$1771
        $auto$simplemap.cc:312:simplemap_bmux$1768


yosys> opt_dff

3.30.7. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.30.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_master_top..

yosys> opt_expr -full

3.30.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_master_top.
<suppressed ~2 debug messages>

3.30.10. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.30.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \spi_master_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

yosys> opt_reduce -full

3.30.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \spi_master_top.
Performed a total of 0 changes.

yosys> opt_merge

3.30.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_master_top'.
Removed a total of 0 cells.

yosys> opt_share

3.30.14. Executing OPT_SHARE pass.

yosys> opt_dff

3.30.15. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.30.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_master_top..

yosys> opt_expr -full

3.30.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_master_top.

3.30.18. Finished OPT passes. (There is nothing left to do.)

yosys> techmap -map +/techmap.v

3.31. Executing TECHMAP pass (map to technology primitives).

3.31.1. Executing Verilog-2005 frontend: /home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.31.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $mux.
No more expansions possible.
<suppressed ~73 debug messages>

yosys> opt -sat

3.32. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.32.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_master_top.

yosys> opt_merge -nomux

3.32.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_master_top'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.32.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \spi_master_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.32.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \spi_master_top.
Performed a total of 0 changes.

yosys> opt_merge

3.32.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_master_top'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.32.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.32.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_master_top..

yosys> opt_expr

3.32.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_master_top.

3.32.9. Finished OPT passes. (There is nothing left to do.)

yosys> abc -dff

3.33. Executing ABC pass (technology mapping using ABC).

3.33.1. Summary of detected clock domains:
  7 cells in clk=\wb_clk_i, en=$auto$opt_dff.cc:194:make_patterns_logic$755, arst=\arst_i, srst={ }
  9 cells in clk=\wb_clk_i, en=$auto$opt_dff.cc:219:make_patterns_logic$725, arst=\arst_i, srst={ }
  11 cells in clk=\wb_clk_i, en=$auto$opt_dff.cc:219:make_patterns_logic$739, arst=\arst_i, srst={ }
  17 cells in clk=\wb_clk_i, en=$auto$opt_dff.cc:219:make_patterns_logic$732, arst=\arst_i, srst={ }
  39 cells in clk=\wb_clk_i, en=$auto$opt_dff.cc:219:make_patterns_logic$3319, arst=\arst_i, srst={ }
  30 cells in clk=\wb_clk_i, en=$auto$opt_dff.cc:219:make_patterns_logic$2656, arst=\arst_i, srst={ }
  39 cells in clk=\wb_clk_i, en=$auto$opt_dff.cc:219:make_patterns_logic$2605, arst=\arst_i, srst={ }
  18 cells in clk=\wb_clk_i, en=$auto$opt_dff.cc:219:make_patterns_logic$2554, arst=\arst_i, srst={ }
  42 cells in clk=\wb_clk_i, en=$auto$opt_dff.cc:219:make_patterns_logic$2503, arst=\arst_i, srst={ }
  60 cells in clk=\wb_clk_i, en=$auto$opt_dff.cc:219:make_patterns_logic$2452, arst=\arst_i, srst={ }
  17 cells in clk=\wb_clk_i, en=$auto$opt_dff.cc:219:make_patterns_logic$2401, arst=\arst_i, srst={ }
  8 cells in clk=\ser_des.Baud_Rate, en=$auto$opt_dff.cc:194:make_patterns_logic$767, arst=\arst_i, srst={ }
  24 cells in clk=\ser_des.Baud_Rate, en=$auto$opt_dff.cc:194:make_patterns_logic$770, arst=\arst_i, srst={ }
  61 cells in clk=\ser_des.Baud_Rate, en={ }, arst=\arst_i, srst={ }
  19 cells in clk=\ser_des.Baud_Rate, en=$auto$opt_dff.cc:194:make_patterns_logic$764, arst=\arst_i, srst={ }
  27 cells in clk=\wb_clk_i, en=$auto$opt_dff.cc:194:make_patterns_logic$761, arst=\arst_i, srst={ }
  3 cells in clk=\wb_clk_i, en=$auto$opt_dff.cc:194:make_patterns_logic$758, arst=\arst_i, srst={ }
  115 cells in clk=\wb_clk_i, en={ }, arst=\arst_i, srst={ }
  32 cells in clk=\wb_clk_i, en={ }, arst={ }, srst={ }

3.33.2. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i, enabled by $auto$opt_dff.cc:194:make_patterns_logic$755, asynchronously reset by \arst_i
Extracted 7 gates and 14 wires to a netlist network with 6 inputs and 4 outputs.

3.33.2.1. Executing ABC.

3.33.3. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i, enabled by $auto$opt_dff.cc:219:make_patterns_logic$725, asynchronously reset by \arst_i
Extracted 9 gates and 17 wires to a netlist network with 7 inputs and 3 outputs.

3.33.3.1. Executing ABC.

3.33.4. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i, enabled by $auto$opt_dff.cc:219:make_patterns_logic$739, asynchronously reset by \arst_i
Extracted 11 gates and 18 wires to a netlist network with 6 inputs and 5 outputs.

3.33.4.1. Executing ABC.

3.33.5. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i, enabled by $auto$opt_dff.cc:219:make_patterns_logic$732, asynchronously reset by \arst_i
Extracted 17 gates and 28 wires to a netlist network with 10 inputs and 5 outputs.

3.33.5.1. Executing ABC.

3.33.6. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i, enabled by $auto$opt_dff.cc:219:make_patterns_logic$3319, asynchronously reset by \arst_i
Extracted 39 gates and 66 wires to a netlist network with 26 inputs and 33 outputs.

3.33.6.1. Executing ABC.

3.33.7. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2656, asynchronously reset by \arst_i
Extracted 30 gates and 56 wires to a netlist network with 25 inputs and 19 outputs.

3.33.7.1. Executing ABC.

3.33.8. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2605, asynchronously reset by \arst_i
Extracted 39 gates and 59 wires to a netlist network with 20 inputs and 19 outputs.

3.33.8.1. Executing ABC.

3.33.9. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2554, asynchronously reset by \arst_i
Extracted 18 gates and 34 wires to a netlist network with 16 inputs and 11 outputs.

3.33.9.1. Executing ABC.

3.33.10. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2503, asynchronously reset by \arst_i
Extracted 42 gates and 73 wires to a netlist network with 31 inputs and 32 outputs.

3.33.10.1. Executing ABC.

3.33.11. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2452, asynchronously reset by \arst_i
Extracted 60 gates and 103 wires to a netlist network with 43 inputs and 34 outputs.

3.33.11.1. Executing ABC.

3.33.12. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2401, asynchronously reset by \arst_i
Extracted 17 gates and 36 wires to a netlist network with 19 inputs and 11 outputs.

3.33.12.1. Executing ABC.

3.33.13. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \ser_des.Baud_Rate, enabled by $auto$opt_dff.cc:194:make_patterns_logic$767, asynchronously reset by \arst_i
Extracted 8 gates and 16 wires to a netlist network with 7 inputs and 4 outputs.

3.33.13.1. Executing ABC.

3.33.14. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: $abc$5661$ser_des.Baud_Rate, enabled by $auto$opt_dff.cc:194:make_patterns_logic$770, asynchronously reset by \arst_i
Extracted 24 gates and 40 wires to a netlist network with 15 inputs and 13 outputs.

3.33.14.1. Executing ABC.

3.33.15. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: $abc$5661$ser_des.Baud_Rate, asynchronously reset by \arst_i
Extracted 61 gates and 84 wires to a netlist network with 22 inputs and 23 outputs.

3.33.15.1. Executing ABC.

3.33.16. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: $abc$5661$ser_des.Baud_Rate, enabled by $auto$opt_dff.cc:194:make_patterns_logic$764, asynchronously reset by \arst_i
Extracted 19 gates and 26 wires to a netlist network with 6 inputs and 5 outputs.

3.33.16.1. Executing ABC.

3.33.17. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i, enabled by $auto$opt_dff.cc:194:make_patterns_logic$761, asynchronously reset by \arst_i
Extracted 27 gates and 53 wires to a netlist network with 26 inputs and 3 outputs.

3.33.17.1. Executing ABC.

3.33.18. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i, enabled by $abc$5322$auto$opt_dff.cc:194:make_patterns_logic$758, asynchronously reset by \arst_i
Extracted 3 gates and 6 wires to a netlist network with 2 inputs and 2 outputs.

3.33.18.1. Executing ABC.

3.33.19. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i, asynchronously reset by \arst_i
Extracted 115 gates and 143 wires to a netlist network with 26 inputs and 25 outputs.

3.33.19.1. Executing ABC.

3.33.20. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i
Extracted 32 gates and 63 wires to a netlist network with 30 inputs and 8 outputs.

3.33.20.1. Executing ABC.

yosys> abc -dff

3.34. Executing ABC pass (technology mapping using ABC).

3.34.1. Summary of detected clock domains:
  7 cells in clk=\wb_clk_i, en=$abc$5322$auto$opt_dff.cc:194:make_patterns_logic$758, arst=\arst_i, srst={ }
  13 cells in clk=\wb_clk_i, en=$abc$5344$auto$opt_dff.cc:219:make_patterns_logic$732, arst=\arst_i, srst={ }
  20 cells in clk=\wb_clk_i, en=$abc$5497$auto$opt_dff.cc:219:make_patterns_logic$2554, arst=\arst_i, srst={ }
  8 cells in clk=\ser_des.Baud_Rate, en=$abc$5661$auto$opt_dff.cc:194:make_patterns_logic$767, arst=\arst_i, srst={ }
  32 cells in clk=\wb_clk_i, en=$abc$5456$auto$opt_dff.cc:219:make_patterns_logic$2605, arst=\arst_i, srst={ }
  49 cells in clk=\wb_clk_i, en=$abc$5572$auto$opt_dff.cc:219:make_patterns_logic$2452, arst=\arst_i, srst={ }
  38 cells in clk=\wb_clk_i, en=$abc$5520$auto$opt_dff.cc:219:make_patterns_logic$2503, arst=\arst_i, srst={ }
  30 cells in clk=\wb_clk_i, en=$abc$5362$auto$opt_dff.cc:219:make_patterns_logic$3319, arst=\arst_i, srst={ }
  8 cells in clk=\wb_clk_i, en=$abc$5322$auto$opt_dff.cc:219:make_patterns_logic$725, arst=\arst_i, srst={ }
  10 cells in clk=\wb_clk_i, en=$abc$5333$auto$opt_dff.cc:219:make_patterns_logic$739, arst=\arst_i, srst={ }
  4 cells in clk=\wb_clk_i, en=$abc$5314$auto$opt_dff.cc:194:make_patterns_logic$755, arst=\arst_i, srst={ }
  35 cells in clk=\wb_clk_i, en=$abc$5417$auto$opt_dff.cc:219:make_patterns_logic$2656, arst=\arst_i, srst={ }
  21 cells in clk=$abc$5661$ser_des.Baud_Rate, en=$abc$5671$auto$opt_dff.cc:194:make_patterns_logic$770, arst=\arst_i, srst={ }
  41 cells in clk=\wb_clk_i, en=$abc$5804$auto$opt_dff.cc:194:make_patterns_logic$761, arst=\arst_i, srst={ }
  118 cells in clk=\wb_clk_i, en={ }, arst=\arst_i, srst={ }
  16 cells in clk=$abc$5661$ser_des.Baud_Rate, en=$abc$5785$auto$opt_dff.cc:194:make_patterns_logic$764, arst=\arst_i, srst={ }
  83 cells in clk=$abc$5661$ser_des.Baud_Rate, en={ }, arst=\arst_i, srst={ }
  16 cells in clk=\wb_clk_i, en=$abc$5636$auto$opt_dff.cc:219:make_patterns_logic$2401, arst=\arst_i, srst={ }
  37 cells in clk=\wb_clk_i, en={ }, arst={ }, srst={ }

3.34.2. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i, enabled by $abc$5322$auto$opt_dff.cc:194:make_patterns_logic$758, asynchronously reset by \arst_i
Extracted 7 gates and 13 wires to a netlist network with 6 inputs and 4 outputs.

3.34.2.1. Executing ABC.

3.34.3. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i, enabled by $abc$5344$auto$opt_dff.cc:219:make_patterns_logic$732, asynchronously reset by \arst_i
Extracted 13 gates and 21 wires to a netlist network with 8 inputs and 5 outputs.

3.34.3.1. Executing ABC.

3.34.4. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i, enabled by $abc$5497$auto$opt_dff.cc:219:make_patterns_logic$2554, asynchronously reset by \arst_i
Extracted 20 gates and 34 wires to a netlist network with 14 inputs and 10 outputs.

3.34.4.1. Executing ABC.

3.34.5. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: $abc$5661$ser_des.Baud_Rate, enabled by $abc$5661$auto$opt_dff.cc:194:make_patterns_logic$767, asynchronously reset by \arst_i
Extracted 8 gates and 14 wires to a netlist network with 6 inputs and 4 outputs.

3.34.5.1. Executing ABC.

3.34.6. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i, enabled by $abc$5456$auto$opt_dff.cc:219:make_patterns_logic$2605, asynchronously reset by \arst_i
Extracted 32 gates and 51 wires to a netlist network with 19 inputs and 22 outputs.

3.34.6.1. Executing ABC.

3.34.7. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i, enabled by $abc$5572$auto$opt_dff.cc:219:make_patterns_logic$2452, asynchronously reset by \arst_i
Extracted 49 gates and 88 wires to a netlist network with 39 inputs and 34 outputs.

3.34.7.1. Executing ABC.

3.34.8. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i, enabled by $abc$5520$auto$opt_dff.cc:219:make_patterns_logic$2503, asynchronously reset by \arst_i
Extracted 38 gates and 68 wires to a netlist network with 30 inputs and 31 outputs.

3.34.8.1. Executing ABC.

3.34.9. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i, enabled by $abc$5362$auto$opt_dff.cc:219:make_patterns_logic$3319, asynchronously reset by \arst_i
Extracted 30 gates and 51 wires to a netlist network with 21 inputs and 23 outputs.

3.34.9.1. Executing ABC.

3.34.10. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i, enabled by $abc$5322$auto$opt_dff.cc:219:make_patterns_logic$725, asynchronously reset by \arst_i
Extracted 8 gates and 15 wires to a netlist network with 7 inputs and 3 outputs.

3.34.10.1. Executing ABC.

3.34.11. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i, enabled by $abc$5333$auto$opt_dff.cc:219:make_patterns_logic$739, asynchronously reset by \arst_i
Extracted 10 gates and 18 wires to a netlist network with 8 inputs and 4 outputs.

3.34.11.1. Executing ABC.

3.34.12. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i, enabled by $abc$5314$auto$opt_dff.cc:194:make_patterns_logic$755, asynchronously reset by \arst_i
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 3 outputs.

3.34.12.1. Executing ABC.

3.34.13. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i, enabled by $abc$5417$auto$opt_dff.cc:219:make_patterns_logic$2656, asynchronously reset by \arst_i
Extracted 35 gates and 63 wires to a netlist network with 28 inputs and 16 outputs.

3.34.13.1. Executing ABC.

3.34.14. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: $abc$5661$ser_des.Baud_Rate, enabled by $abc$5671$auto$opt_dff.cc:194:make_patterns_logic$770, asynchronously reset by \arst_i
Extracted 21 gates and 34 wires to a netlist network with 13 inputs and 11 outputs.

3.34.14.1. Executing ABC.

3.34.15. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i, enabled by $abc$5804$auto$opt_dff.cc:194:make_patterns_logic$761, asynchronously reset by \arst_i
Extracted 41 gates and 82 wires to a netlist network with 41 inputs and 3 outputs.

3.34.15.1. Executing ABC.

3.34.16. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i, asynchronously reset by \arst_i
Extracted 118 gates and 138 wires to a netlist network with 20 inputs and 34 outputs.

3.34.16.1. Executing ABC.

3.34.17. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: $abc$5661$ser_des.Baud_Rate, enabled by $abc$5785$auto$opt_dff.cc:194:make_patterns_logic$764, asynchronously reset by \arst_i
Extracted 16 gates and 22 wires to a netlist network with 6 inputs and 7 outputs.

3.34.17.1. Executing ABC.

3.34.18. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: $abc$5661$ser_des.Baud_Rate, asynchronously reset by \arst_i
Extracted 83 gates and 113 wires to a netlist network with 30 inputs and 23 outputs.

3.34.18.1. Executing ABC.

3.34.19. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i, enabled by $abc$5636$auto$opt_dff.cc:219:make_patterns_logic$2401, asynchronously reset by \arst_i
Extracted 16 gates and 33 wires to a netlist network with 17 inputs and 9 outputs.

3.34.19.1. Executing ABC.

3.34.20. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i
Extracted 37 gates and 67 wires to a netlist network with 30 inputs and 8 outputs.

3.34.20.1. Executing ABC.

yosys> abc -dff

3.35. Executing ABC pass (technology mapping using ABC).

3.35.1. Summary of detected clock domains:
  6 cells in clk=\wb_clk_i, en=$abc$6017$abc$5322$auto$opt_dff.cc:194:make_patterns_logic$758, arst=\arst_i, srst={ }
  14 cells in clk=\wb_clk_i, en=$abc$6025$abc$5344$auto$opt_dff.cc:219:make_patterns_logic$732, arst=\arst_i, srst={ }
  18 cells in clk=\wb_clk_i, en=$abc$6040$abc$5497$auto$opt_dff.cc:219:make_patterns_logic$2554, arst=\arst_i, srst={ }
  7 cells in clk=$abc$5661$ser_des.Baud_Rate, en=$abc$6060$abc$5661$auto$opt_dff.cc:194:make_patterns_logic$767, arst=\arst_i, srst={ }
  33 cells in clk=\wb_clk_i, en=$abc$6070$abc$5456$auto$opt_dff.cc:219:make_patterns_logic$2605, arst=\arst_i, srst={ }
  55 cells in clk=\wb_clk_i, en=$abc$6111$abc$5572$auto$opt_dff.cc:219:make_patterns_logic$2452, arst=\arst_i, srst={ }
  35 cells in clk=\wb_clk_i, en=$abc$6171$abc$5520$auto$opt_dff.cc:219:make_patterns_logic$2503, arst=\arst_i, srst={ }
  9 cells in clk=\wb_clk_i, en=$abc$6267$abc$5322$auto$opt_dff.cc:219:make_patterns_logic$725, arst=\arst_i, srst={ }
  10 cells in clk=\wb_clk_i, en=$abc$6277$abc$5333$auto$opt_dff.cc:219:make_patterns_logic$739, arst=\arst_i, srst={ }
  4 cells in clk=\wb_clk_i, en=$abc$6289$abc$5314$auto$opt_dff.cc:194:make_patterns_logic$755, arst=\arst_i, srst={ }
  36 cells in clk=\wb_clk_i, en=$abc$6295$abc$5417$auto$opt_dff.cc:219:make_patterns_logic$2656, arst=\arst_i, srst={ }
  26 cells in clk=$abc$5661$ser_des.Baud_Rate, en=$abc$6333$abc$5671$auto$opt_dff.cc:194:make_patterns_logic$770, arst=\arst_i, srst={ }
  17 cells in clk=\wb_clk_i, en=$abc$6649$abc$5636$auto$opt_dff.cc:219:make_patterns_logic$2401, arst=\arst_i, srst={ }
  41 cells in clk=\wb_clk_i, en=$abc$6363$abc$5804$auto$opt_dff.cc:194:make_patterns_logic$761, arst=\arst_i, srst={ }
  118 cells in clk=\wb_clk_i, en={ }, arst=\arst_i, srst={ }
  16 cells in clk=$abc$5661$ser_des.Baud_Rate, en=$abc$6535$abc$5785$auto$opt_dff.cc:194:make_patterns_logic$764, arst=\arst_i, srst={ }
  74 cells in clk=$abc$5661$ser_des.Baud_Rate, en={ }, arst=\arst_i, srst={ }
  38 cells in clk=\wb_clk_i, en=$abc$6222$abc$5362$auto$opt_dff.cc:219:make_patterns_logic$3319, arst=\arst_i, srst={ }
  37 cells in clk=\wb_clk_i, en={ }, arst={ }, srst={ }

3.35.2. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i, enabled by $abc$6017$abc$5322$auto$opt_dff.cc:194:make_patterns_logic$758, asynchronously reset by \arst_i
Extracted 6 gates and 12 wires to a netlist network with 6 inputs and 4 outputs.

3.35.2.1. Executing ABC.

3.35.3. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i, enabled by $abc$6025$abc$5344$auto$opt_dff.cc:219:make_patterns_logic$732, asynchronously reset by \arst_i
Extracted 14 gates and 23 wires to a netlist network with 9 inputs and 5 outputs.

3.35.3.1. Executing ABC.

3.35.4. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i, enabled by $abc$6040$abc$5497$auto$opt_dff.cc:219:make_patterns_logic$2554, asynchronously reset by \arst_i
Extracted 18 gates and 31 wires to a netlist network with 13 inputs and 9 outputs.

3.35.4.1. Executing ABC.

3.35.5. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: $abc$6555$abc$5661$ser_des.Baud_Rate, enabled by $abc$6060$abc$5661$auto$opt_dff.cc:194:make_patterns_logic$767, asynchronously reset by \arst_i
Extracted 7 gates and 12 wires to a netlist network with 5 inputs and 3 outputs.

3.35.5.1. Executing ABC.

3.35.6. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i, enabled by $abc$6070$abc$5456$auto$opt_dff.cc:219:make_patterns_logic$2605, asynchronously reset by \arst_i
Extracted 33 gates and 51 wires to a netlist network with 18 inputs and 23 outputs.

3.35.6.1. Executing ABC.

3.35.7. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i, enabled by $abc$6111$abc$5572$auto$opt_dff.cc:219:make_patterns_logic$2452, asynchronously reset by \arst_i
Extracted 55 gates and 98 wires to a netlist network with 43 inputs and 34 outputs.

3.35.7.1. Executing ABC.

3.35.8. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i, enabled by $abc$6171$abc$5520$auto$opt_dff.cc:219:make_patterns_logic$2503, asynchronously reset by \arst_i
Extracted 35 gates and 59 wires to a netlist network with 24 inputs and 24 outputs.

3.35.8.1. Executing ABC.

3.35.9. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i, enabled by $abc$6267$abc$5322$auto$opt_dff.cc:219:make_patterns_logic$725, asynchronously reset by \arst_i
Extracted 9 gates and 17 wires to a netlist network with 8 inputs and 3 outputs.

3.35.9.1. Executing ABC.

3.35.10. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i, enabled by $abc$6277$abc$5333$auto$opt_dff.cc:219:make_patterns_logic$739, asynchronously reset by \arst_i
Extracted 10 gates and 18 wires to a netlist network with 8 inputs and 4 outputs.

3.35.10.1. Executing ABC.

3.35.11. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i, enabled by $abc$6289$abc$5314$auto$opt_dff.cc:194:make_patterns_logic$755, asynchronously reset by \arst_i
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 3 outputs.

3.35.11.1. Executing ABC.

3.35.12. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i, enabled by $abc$6295$abc$5417$auto$opt_dff.cc:219:make_patterns_logic$2656, asynchronously reset by \arst_i
Extracted 36 gates and 64 wires to a netlist network with 28 inputs and 16 outputs.

3.35.12.1. Executing ABC.

3.35.13. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: $abc$6555$abc$5661$ser_des.Baud_Rate, enabled by $abc$6333$abc$5671$auto$opt_dff.cc:194:make_patterns_logic$770, asynchronously reset by \arst_i
Extracted 26 gates and 43 wires to a netlist network with 17 inputs and 15 outputs.

3.35.13.1. Executing ABC.

3.35.14. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i, enabled by $abc$6649$abc$5636$auto$opt_dff.cc:219:make_patterns_logic$2401, asynchronously reset by \arst_i
Extracted 17 gates and 35 wires to a netlist network with 18 inputs and 11 outputs.

3.35.14.1. Executing ABC.

3.35.15. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i, enabled by $abc$6363$abc$5804$auto$opt_dff.cc:194:make_patterns_logic$761, asynchronously reset by \arst_i
Extracted 41 gates and 82 wires to a netlist network with 41 inputs and 3 outputs.

3.35.15.1. Executing ABC.

3.35.16. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i, asynchronously reset by \arst_i
Extracted 118 gates and 142 wires to a netlist network with 24 inputs and 34 outputs.

3.35.16.1. Executing ABC.

3.35.17. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: $abc$6990$abc$6555$abc$5661$ser_des.Baud_Rate, enabled by $abc$6535$abc$5785$auto$opt_dff.cc:194:make_patterns_logic$764, asynchronously reset by \arst_i
Extracted 16 gates and 22 wires to a netlist network with 6 inputs and 7 outputs.

3.35.17.1. Executing ABC.

3.35.18. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: $abc$6990$abc$6555$abc$5661$ser_des.Baud_Rate, asynchronously reset by \arst_i
Extracted 74 gates and 99 wires to a netlist network with 25 inputs and 19 outputs.

3.35.18.1. Executing ABC.

3.35.19. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i, enabled by $abc$6222$abc$5362$auto$opt_dff.cc:219:make_patterns_logic$3319, asynchronously reset by \arst_i
Extracted 38 gates and 63 wires to a netlist network with 25 inputs and 29 outputs.

3.35.19.1. Executing ABC.

3.35.20. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i
Extracted 37 gates and 67 wires to a netlist network with 30 inputs and 8 outputs.

3.35.20.1. Executing ABC.

yosys> abc -dff

3.36. Executing ABC pass (technology mapping using ABC).

3.36.1. Summary of detected clock domains:
  41 cells in clk=\wb_clk_i, en=$abc$7319$abc$6222$abc$5362$auto$opt_dff.cc:219:make_patterns_logic$3319, arst=\arst_i, srst={ }
  6 cells in clk=\wb_clk_i, en=$abc$6718$abc$6017$abc$5322$auto$opt_dff.cc:194:make_patterns_logic$758, arst=\arst_i, srst={ }
  14 cells in clk=\wb_clk_i, en=$abc$6725$abc$6025$abc$5344$auto$opt_dff.cc:219:make_patterns_logic$732, arst=\arst_i, srst={ }
  21 cells in clk=\wb_clk_i, en=$abc$6740$abc$6040$abc$5497$auto$opt_dff.cc:219:make_patterns_logic$2554, arst=\arst_i, srst={ }
  8 cells in clk=$abc$6555$abc$5661$ser_des.Baud_Rate, en=$abc$6759$abc$6060$abc$5661$auto$opt_dff.cc:194:make_patterns_logic$767, arst=\arst_i, srst={ }
  35 cells in clk=\wb_clk_i, en=$abc$6768$abc$6070$abc$5456$auto$opt_dff.cc:219:make_patterns_logic$2605, arst=\arst_i, srst={ }
  36 cells in clk=\wb_clk_i, en=$abc$6814$abc$6111$abc$5572$auto$opt_dff.cc:219:make_patterns_logic$2452, arst=\arst_i, srst={ }
  9 cells in clk=\wb_clk_i, en=$abc$6924$abc$6267$abc$5322$auto$opt_dff.cc:219:make_patterns_logic$725, arst=\arst_i, srst={ }
  10 cells in clk=\wb_clk_i, en=$abc$6934$abc$6277$abc$5333$auto$opt_dff.cc:219:make_patterns_logic$739, arst=\arst_i, srst={ }
  4 cells in clk=\wb_clk_i, en=$abc$6946$abc$6289$abc$5314$auto$opt_dff.cc:194:make_patterns_logic$755, arst=\arst_i, srst={ }
  30 cells in clk=\wb_clk_i, en=$abc$6952$abc$6295$abc$5417$auto$opt_dff.cc:219:make_patterns_logic$2656, arst=\arst_i, srst={ }
  36 cells in clk=\wb_clk_i, en=$abc$6879$abc$6171$abc$5520$auto$opt_dff.cc:219:make_patterns_logic$2503, arst=\arst_i, srst={ }
  36 cells in clk=$abc$6555$abc$5661$ser_des.Baud_Rate, en=$abc$6990$abc$6333$abc$5671$auto$opt_dff.cc:194:make_patterns_logic$770, arst=\arst_i, srst={ }
  41 cells in clk=\wb_clk_i, en=$abc$7047$abc$6363$abc$5804$auto$opt_dff.cc:194:make_patterns_logic$761, arst=\arst_i, srst={ }
  116 cells in clk=\wb_clk_i, en={ }, arst=\arst_i, srst={ }
  17 cells in clk=$abc$6990$abc$6555$abc$5661$ser_des.Baud_Rate, en=$abc$7219$abc$6535$abc$5785$auto$opt_dff.cc:194:make_patterns_logic$764, arst=\arst_i, srst={ }
  82 cells in clk=$abc$6990$abc$6555$abc$5661$ser_des.Baud_Rate, en={ }, arst=\arst_i, srst={ }
  19 cells in clk=\wb_clk_i, en=$abc$7024$abc$6649$abc$5636$auto$opt_dff.cc:219:make_patterns_logic$2401, arst=\arst_i, srst={ }
  37 cells in clk=\wb_clk_i, en={ }, arst={ }, srst={ }

3.36.2. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i, enabled by $abc$7319$abc$6222$abc$5362$auto$opt_dff.cc:219:make_patterns_logic$3319, asynchronously reset by \arst_i
Extracted 41 gates and 68 wires to a netlist network with 27 inputs and 28 outputs.

3.36.2.1. Executing ABC.

3.36.3. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i, enabled by $abc$6718$abc$6017$abc$5322$auto$opt_dff.cc:194:make_patterns_logic$758, asynchronously reset by \arst_i
Extracted 6 gates and 12 wires to a netlist network with 6 inputs and 4 outputs.

3.36.3.1. Executing ABC.

3.36.4. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i, enabled by $abc$6725$abc$6025$abc$5344$auto$opt_dff.cc:219:make_patterns_logic$732, asynchronously reset by \arst_i
Extracted 14 gates and 23 wires to a netlist network with 9 inputs and 5 outputs.

3.36.4.1. Executing ABC.

3.36.5. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i, enabled by $abc$6740$abc$6040$abc$5497$auto$opt_dff.cc:219:make_patterns_logic$2554, asynchronously reset by \arst_i
Extracted 21 gates and 35 wires to a netlist network with 14 inputs and 11 outputs.

3.36.5.1. Executing ABC.

3.36.6. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: $abc$6990$abc$6555$abc$5661$ser_des.Baud_Rate, enabled by $abc$6759$abc$6060$abc$5661$auto$opt_dff.cc:194:make_patterns_logic$767, asynchronously reset by \arst_i
Extracted 8 gates and 14 wires to a netlist network with 6 inputs and 4 outputs.

3.36.6.1. Executing ABC.

3.36.7. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i, enabled by $abc$6768$abc$6070$abc$5456$auto$opt_dff.cc:219:make_patterns_logic$2605, asynchronously reset by \arst_i
Extracted 35 gates and 54 wires to a netlist network with 19 inputs and 20 outputs.

3.36.7.1. Executing ABC.

3.36.8. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i, enabled by $abc$6814$abc$6111$abc$5572$auto$opt_dff.cc:219:make_patterns_logic$2452, asynchronously reset by \arst_i
Extracted 36 gates and 65 wires to a netlist network with 29 inputs and 20 outputs.

3.36.8.1. Executing ABC.

3.36.9. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i, enabled by $abc$6924$abc$6267$abc$5322$auto$opt_dff.cc:219:make_patterns_logic$725, asynchronously reset by \arst_i
Extracted 9 gates and 17 wires to a netlist network with 8 inputs and 3 outputs.

3.36.9.1. Executing ABC.

3.36.10. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i, enabled by $abc$6934$abc$6277$abc$5333$auto$opt_dff.cc:219:make_patterns_logic$739, asynchronously reset by \arst_i
Extracted 10 gates and 18 wires to a netlist network with 8 inputs and 4 outputs.

3.36.10.1. Executing ABC.

3.36.11. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i, enabled by $abc$6946$abc$6289$abc$5314$auto$opt_dff.cc:194:make_patterns_logic$755, asynchronously reset by \arst_i
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 3 outputs.

3.36.11.1. Executing ABC.

3.36.12. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i, enabled by $abc$6952$abc$6295$abc$5417$auto$opt_dff.cc:219:make_patterns_logic$2656, asynchronously reset by \arst_i
Extracted 30 gates and 56 wires to a netlist network with 26 inputs and 11 outputs.

3.36.12.1. Executing ABC.

3.36.13. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i, enabled by $abc$6879$abc$6171$abc$5520$auto$opt_dff.cc:219:make_patterns_logic$2503, asynchronously reset by \arst_i
Extracted 36 gates and 60 wires to a netlist network with 24 inputs and 25 outputs.

3.36.13.1. Executing ABC.

3.36.14. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: $abc$6990$abc$6555$abc$5661$ser_des.Baud_Rate, enabled by $abc$6990$abc$6333$abc$5671$auto$opt_dff.cc:194:make_patterns_logic$770, asynchronously reset by \arst_i
Extracted 36 gates and 51 wires to a netlist network with 15 inputs and 12 outputs.

3.36.14.1. Executing ABC.

3.36.15. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i, enabled by $abc$7047$abc$6363$abc$5804$auto$opt_dff.cc:194:make_patterns_logic$761, asynchronously reset by \arst_i
Extracted 41 gates and 82 wires to a netlist network with 41 inputs and 3 outputs.

3.36.15.1. Executing ABC.

3.36.16. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i, asynchronously reset by \arst_i
Extracted 116 gates and 138 wires to a netlist network with 22 inputs and 36 outputs.

3.36.16.1. Executing ABC.

3.36.17. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: $abc$7712$abc$6990$abc$6555$abc$5661$ser_des.Baud_Rate, enabled by $abc$7219$abc$6535$abc$5785$auto$opt_dff.cc:194:make_patterns_logic$764, asynchronously reset by \arst_i
Extracted 17 gates and 24 wires to a netlist network with 7 inputs and 6 outputs.

3.36.17.1. Executing ABC.

3.36.18. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: $abc$7712$abc$6990$abc$6555$abc$5661$ser_des.Baud_Rate, asynchronously reset by \arst_i
Extracted 82 gates and 108 wires to a netlist network with 26 inputs and 22 outputs.

3.36.18.1. Executing ABC.

3.36.19. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i, enabled by $abc$7024$abc$6649$abc$5636$auto$opt_dff.cc:219:make_patterns_logic$2401, asynchronously reset by \arst_i
Extracted 19 gates and 35 wires to a netlist network with 16 inputs and 12 outputs.

3.36.19.1. Executing ABC.

3.36.20. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i
Extracted 37 gates and 67 wires to a netlist network with 30 inputs and 8 outputs.

3.36.20.1. Executing ABC.

yosys> opt_ffinv

3.37. Executing OPT_FFINV pass (push inverters through FFs).
Discovering LUTs.
Pushed 0 inverters.

yosys> opt -sat

3.38. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.38.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_master_top.
<suppressed ~1 debug messages>

yosys> opt_merge -nomux

3.38.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_master_top'.
<suppressed ~120 debug messages>
Removed a total of 40 cells.

yosys> opt_muxtree

3.38.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \spi_master_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.38.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \spi_master_top.
Performed a total of 0 changes.

yosys> opt_merge

3.38.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_master_top'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.38.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.38.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_master_top..
Removed 0 unused cells and 3812 unused wires.
<suppressed ~29 debug messages>

yosys> opt_expr

3.38.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_master_top.

3.38.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.38.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \spi_master_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.38.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \spi_master_top.
Performed a total of 0 changes.

yosys> opt_merge

3.38.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_master_top'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.38.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.38.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_master_top..

yosys> opt_expr

3.38.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_master_top.

3.38.16. Finished OPT passes. (There is nothing left to do.)

yosys> abc -script /home/users/temp_dir/yosys_GtTDf2/abc_tmp_1.scr

3.39. Executing ABC pass (technology mapping using ABC).

3.39.1. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Extracted 456 gates and 577 wires to a netlist network with 121 inputs and 104 outputs.

3.39.1.1. Executing ABC.
DE:   #PIs = 121  #Luts =   159  Max Lvl =   6  Avg Lvl =   2.32  [   0.17 sec. at Pass 0]
DE:   #PIs = 121  #Luts =   156  Max Lvl =   5  Avg Lvl =   2.26  [   1.26 sec. at Pass 1]
DE:   #PIs = 121  #Luts =   156  Max Lvl =   5  Avg Lvl =   2.26  [   0.54 sec. at Pass 2]
DE:   #PIs = 121  #Luts =   152  Max Lvl =   5  Avg Lvl =   2.10  [   1.01 sec. at Pass 3]
DE:   #PIs = 121  #Luts =   152  Max Lvl =   5  Avg Lvl =   2.10  [   0.52 sec. at Pass 4]
DE:   #PIs = 121  #Luts =   151  Max Lvl =   4  Avg Lvl =   2.07  [   1.04 sec. at Pass 5]
DE:   #PIs = 121  #Luts =   151  Max Lvl =   4  Avg Lvl =   2.07  [   0.76 sec. at Pass 6]
DE:   #PIs = 121  #Luts =   151  Max Lvl =   4  Avg Lvl =   2.07  [   0.84 sec. at Pass 7]
DE:   #PIs = 121  #Luts =   151  Max Lvl =   4  Avg Lvl =   2.07  [   0.81 sec. at Pass 8]
DE:   #PIs = 121  #Luts =   150  Max Lvl =   4  Avg Lvl =   2.08  [   2.66 sec. at Pass 9]
DE:   #PIs = 121  #Luts =   150  Max Lvl =   4  Avg Lvl =   2.08  [   0.90 sec. at Pass 10]
DE:   #PIs = 121  #Luts =   150  Max Lvl =   4  Avg Lvl =   2.08  [   0.71 sec. at Pass 11]
DE:   #PIs = 121  #Luts =   149  Max Lvl =   4  Avg Lvl =   2.08  [   0.92 sec. at Pass 12]
DE:   #PIs = 121  #Luts =   149  Max Lvl =   4  Avg Lvl =   2.08  [   0.56 sec. at Pass 13]
DE:   #PIs = 121  #Luts =   149  Max Lvl =   4  Avg Lvl =   2.08  [   1.05 sec. at Pass 14]
DE:   #PIs = 121  #Luts =   149  Max Lvl =   4  Avg Lvl =   2.08  [   0.68 sec. at Pass 15]
DE:   #PIs = 121  #Luts =   149  Max Lvl =   4  Avg Lvl =   2.08  [   3.25 sec. at Pass 16]
DE:   #PIs = 121  #Luts =   149  Max Lvl =   4  Avg Lvl =   2.08  [   0.34 sec. at Pass 17]

yosys> opt

3.40. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.40.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_master_top.

yosys> opt_merge -nomux

3.40.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_master_top'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.40.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \spi_master_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.40.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \spi_master_top.
Performed a total of 0 changes.

yosys> opt_merge

3.40.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_master_top'.
Removed a total of 0 cells.

yosys> opt_dff

3.40.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.40.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_master_top..
Removed 0 unused cells and 577 unused wires.
<suppressed ~10 debug messages>

yosys> opt_expr

3.40.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_master_top.

3.40.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.40.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \spi_master_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.40.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \spi_master_top.
Performed a total of 0 changes.

yosys> opt_merge

3.40.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_master_top'.
Removed a total of 0 cells.

yosys> opt_dff

3.40.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.40.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_master_top..

yosys> opt_expr

3.40.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_master_top.

3.40.16. Finished OPT passes. (There is nothing left to do.)

yosys> opt_ffinv

3.41. Executing OPT_FFINV pass (push inverters through FFs).
Discovering LUTs.
Pushed 1 inverters.

yosys> stat

3.42. Printing statistics.

=== spi_master_top ===

   Number of wires:                355
   Number of wire bits:            639
   Number of public wires:         133
   Number of public wire bits:     417
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                258
     $_DFFE_PP0P_                   66
     $_DFF_PP0_                     35
     $_DFF_PP1_                      1
     $_DFF_P_                        8
     $lut                          148


yosys> shregmap -minlen 8 -maxlen 20

3.43. Executing SHREGMAP pass (map shift registers).
Converted 0 dff cells into 0 shift registers.

yosys> dfflegalize -cell $_DFF_?_ 0 -cell $_DFF_???_ 0 -cell $_DFFE_????_ 0 -cell $_DFFSR_???_ 0 -cell $_DFFSRE_????_ 0 -cell $_DLATCHSR_PPP_ 0

3.44. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

yosys> stat

3.45. Printing statistics.

=== spi_master_top ===

   Number of wires:                355
   Number of wire bits:            639
   Number of public wires:         133
   Number of public wire bits:     417
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                258
     $_DFFE_PP0P_                   66
     $_DFF_PP0_                     35
     $_DFF_PP1_                      1
     $_DFF_P_                        8
     $lut                          148


yosys> techmap -map +/techmap.v -map +/rapidsilicon/genesis/ffs_map.v

3.46. Executing TECHMAP pass (map to technology primitives).

3.46.1. Executing Verilog-2005 frontend: /home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.46.2. Executing Verilog-2005 frontend: /home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/ffs_map.v
Parsing Verilog input from `/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/ffs_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP0N_'.
Generating RTLIL representation for module `\$_DFFE_PN0P_'.
Generating RTLIL representation for module `\$_DFFE_PN0N_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP1N_'.
Generating RTLIL representation for module `\$_DFFE_PN1P_'.
Generating RTLIL representation for module `\$_DFFE_PN1N_'.
Generating RTLIL representation for module `\$_DFFSR_PPP_'.
Generating RTLIL representation for module `\$_DFFSR_PNP_'.
Generating RTLIL representation for module `\$_DFFSR_PNN_'.
Generating RTLIL representation for module `\$_DFFSR_PPN_'.
Generating RTLIL representation for module `\$_DFFSR_NPP_'.
Generating RTLIL representation for module `\$_DFFSR_NNP_'.
Generating RTLIL representation for module `\$_DFFSR_NNN_'.
Generating RTLIL representation for module `\$_DFFSR_NPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PNPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPNP_'.
Generating RTLIL representation for module `\$_DFFSRE_PNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PNPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PPNN_'.
Generating RTLIL representation for module `\$_DFFSRE_PNNN_'.
Generating RTLIL representation for module `\$_DLATCHSR_PPP_'.
Generating RTLIL representation for module `\$_DLATCHSR_NPP_'.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP0N_'.
Generating RTLIL representation for module `\$_DFFE_NN0P_'.
Generating RTLIL representation for module `\$_DFFE_NN0N_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_NP1N_'.
Generating RTLIL representation for module `\$_DFFE_NN1P_'.
Generating RTLIL representation for module `\$_DFFE_NN1N_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNPP_'.
Generating RTLIL representation for module `\$_DFFSRE_NPNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPN_'.
Generating RTLIL representation for module `\$_DFFSRE_NNPN_'.
Generating RTLIL representation for module `\$_DFFSRE_NPNN_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNN_'.
Generating RTLIL representation for module `\$__SHREG_DFF_P_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PN0_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NN0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFF_PN1_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_NN1_'.
Successfully finished Verilog frontend.

3.46.3. Continuing TECHMAP pass.
Using template \$_DFFE_PP0P_ for cells of type $_DFFE_PP0P_.
Using extmapper simplemap for cells of type $lut.
Using template \$_DFF_PP0_ for cells of type $_DFF_PP0_.
Using template \$_DFF_PP1_ for cells of type $_DFF_PP1_.
Using template \$_DFF_P_ for cells of type $_DFF_P_.
Using extmapper simplemap for cells of type $logic_not.
No more expansions possible.
<suppressed ~496 debug messages>

yosys> opt_expr -mux_undef

3.47. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_master_top.
<suppressed ~3547 debug messages>

yosys> simplemap

3.48. Executing SIMPLEMAP pass (map simple cells to gate primitives).

yosys> opt_expr

3.49. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_master_top.

yosys> opt_merge

3.50. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_master_top'.
<suppressed ~1116 debug messages>
Removed a total of 372 cells.

yosys> opt_dff -nodffe -nosdff

3.51. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.52. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_master_top..
Removed 0 unused cells and 905 unused wires.
<suppressed ~1 debug messages>

yosys> opt -nodffe -nosdff

3.53. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.53.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_master_top.
<suppressed ~36 debug messages>

yosys> opt_merge -nomux

3.53.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_master_top'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.53.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \spi_master_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.53.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \spi_master_top.
Performed a total of 0 changes.

yosys> opt_merge

3.53.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_master_top'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.53.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.53.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_master_top..
Removed 0 unused cells and 10 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.53.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_master_top.

3.53.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.53.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \spi_master_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.53.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \spi_master_top.
Performed a total of 0 changes.

yosys> opt_merge

3.53.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_master_top'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.53.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.53.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_master_top..

yosys> opt_expr

3.53.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_master_top.

3.53.16. Finished OPT passes. (There is nothing left to do.)

yosys> abc -script /home/users/temp_dir/yosys_GtTDf2/abc_tmp_2.scr

3.54. Executing ABC pass (technology mapping using ABC).

3.54.1. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Extracted 567 gates and 691 wires to a netlist network with 122 inputs and 104 outputs.

3.54.1.1. Executing ABC.
DE:   #PIs = 122  #Luts =   149  Max Lvl =   5  Avg Lvl =   2.11  [   0.18 sec. at Pass 0]
DE:   #PIs = 122  #Luts =   148  Max Lvl =   5  Avg Lvl =   2.14  [   1.22 sec. at Pass 1]
DE:   #PIs = 122  #Luts =   148  Max Lvl =   5  Avg Lvl =   2.14  [   0.35 sec. at Pass 2]
DE:   #PIs = 122  #Luts =   147  Max Lvl =   5  Avg Lvl =   2.29  [   1.06 sec. at Pass 3]
DE:   #PIs = 122  #Luts =   147  Max Lvl =   5  Avg Lvl =   2.29  [   0.50 sec. at Pass 4]
DE:   #PIs = 122  #Luts =   147  Max Lvl =   5  Avg Lvl =   2.29  [   0.62 sec. at Pass 5]
DE:   #PIs = 122  #Luts =   147  Max Lvl =   5  Avg Lvl =   2.29  [   0.73 sec. at Pass 6]
DE:   #PIs = 122  #Luts =   147  Max Lvl =   4  Avg Lvl =   2.12  [   2.44 sec. at Pass 7]
DE:   #PIs = 122  #Luts =   147  Max Lvl =   4  Avg Lvl =   2.12  [   0.77 sec. at Pass 8]
DE:   #PIs = 122  #Luts =   147  Max Lvl =   4  Avg Lvl =   2.12  [   0.58 sec. at Pass 9]
DE:   #PIs = 122  #Luts =   147  Max Lvl =   4  Avg Lvl =   2.12  [   1.01 sec. at Pass 10]
DE:   #PIs = 122  #Luts =   147  Max Lvl =   4  Avg Lvl =   2.12  [   4.32 sec. at Pass 11]
DE:   #PIs = 122  #Luts =   147  Max Lvl =   4  Avg Lvl =   2.12  [   0.41 sec. at Pass 12]

yosys> opt

3.55. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.55.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_master_top.

yosys> opt_merge -nomux

3.55.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_master_top'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.55.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \spi_master_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.55.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \spi_master_top.
Performed a total of 0 changes.

yosys> opt_merge

3.55.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_master_top'.
Removed a total of 0 cells.

yosys> opt_dff

3.55.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.55.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_master_top..
Removed 0 unused cells and 587 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.55.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_master_top.

3.55.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.55.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \spi_master_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.55.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \spi_master_top.
Performed a total of 0 changes.

yosys> opt_merge

3.55.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_master_top'.
Removed a total of 0 cells.

yosys> opt_dff

3.55.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.55.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_master_top..

yosys> opt_expr

3.55.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_master_top.

3.55.16. Finished OPT passes. (There is nothing left to do.)

yosys> hierarchy -check

3.56. Executing HIERARCHY pass (managing design hierarchy).

3.56.1. Analyzing design hierarchy..
Top module:  \spi_master_top

3.56.2. Analyzing design hierarchy..
Top module:  \spi_master_top
Removed 0 unused modules.

yosys> stat

3.57. Printing statistics.

=== spi_master_top ===

   Number of wires:                353
   Number of wire bits:            637
   Number of public wires:         133
   Number of public wire bits:     417
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                257
     $lut                          147
     dffsre                        110


yosys> opt_clean -purge

3.58. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_master_top..
Removed 0 unused cells and 99 unused wires.
<suppressed ~99 debug messages>

yosys> write_verilog -noattr -nohex synthesized.v

3.59. Executing Verilog backend.

yosys> bmuxmap

3.59.1. Executing BMUXMAP pass.

yosys> demuxmap

3.59.2. Executing DEMUXMAP pass.

yosys> clean_zerowidth
Dumping module `\spi_master_top'.

Warnings: 27 unique messages, 27 total
End of script. Logfile hash: d18ce49079, CPU: user 4.51s system 0.27s, MEM: 30.45 MB peak
Yosys 0.17+76 (git sha1 ba67c2ec9, gcc 9.1.0 -fPIC -Os)
Time spent: 97% 6x abc (166 sec), 0% 39x opt_expr (1 sec), ...
real 67.89
user 151.31
sys 19.33
