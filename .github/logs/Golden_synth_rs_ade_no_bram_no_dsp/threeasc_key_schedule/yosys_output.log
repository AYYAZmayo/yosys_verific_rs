
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys-Verific 0.0.49
 Yosys 0.18+10 (git sha1 7a7a25778, gcc 9.1.0 -fPIC -Os)


-- Executing script file `yosys.ys' --
echo on

yosys> plugin -i synth-rs

yosys> read -verific

yosys> read -incdir .

yosys> verific -vlog-incdir .

1. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific May22_SW_Release, released at Wed Jun  1 05:39:28 2022.

yosys> verilog_defaults -add -I.

yosys> read -vhdl tb_key_schedule.vhd dual_mem.vhd key_schedule.vhd

yosys> verific -vhdl tb_key_schedule.vhd dual_mem.vhd key_schedule.vhd

2. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific May22_SW_Release, released at Wed Jun  1 05:39:28 2022.
VERIFIC-INFO [VHDL-1504] default VHDL library search path is now "/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008"
VERIFIC-COMMENT [VHDL-1481] Analyzing VHDL file 'tb_key_schedule.vhd'
VERIFIC-COMMENT [VHDL-1493] Restoring VHDL unit 'ieee.std_logic_1164' from file '/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008/ieee/std_logic_1164.vdb'
VERIFIC-COMMENT [VHDL-1493] Restoring VHDL unit 'std.standard' from file '/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008/std/standard.vdb'
VERIFIC-COMMENT [VHDL-1493] Restoring VHDL unit 'std.textio' from file '/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008/std/textio.vdb'
VERIFIC-INFO [VHDL-1012] tb_key_schedule.vhd:20: analyzing entity 'tb_key_schedule'
VERIFIC-INFO [VHDL-1010] tb_key_schedule.vhd:23: analyzing architecture 'behavior'
VERIFIC-COMMENT [VHDL-1481] Analyzing VHDL file 'dual_mem.vhd'
VERIFIC-COMMENT [VHDL-1493] Restoring VHDL unit 'ieee.std_logic_unsigned' from file '/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008/ieee/std_logic_unsigned.vdb'
VERIFIC-COMMENT [VHDL-1493] Restoring VHDL unit 'ieee.std_logic_arith' from file '/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008/ieee/std_logic_arith.vdb'
VERIFIC-INFO [VHDL-1012] dual_mem.vhd:20: analyzing entity 'dual_mem'
VERIFIC-INFO [VHDL-1010] dual_mem.vhd:33: analyzing architecture 'rtl'
VERIFIC-COMMENT [VHDL-1481] Analyzing VHDL file 'key_schedule.vhd'
VERIFIC-INFO [VHDL-1012] key_schedule.vhd:22: analyzing entity 'key_schedule'
VERIFIC-INFO [VHDL-1010] key_schedule.vhd:35: analyzing architecture 'behavioral'

yosys> synth_rs -top key_schedule -tech genesis -goal area -de -no_dsp -no_bram -verilog synthesized.v

3. Executing synth_rs pass: v0.4.58

yosys> read_verilog -lib -specify -nomem2reg +/rapidsilicon/common/cells_sim.v +/rapidsilicon/genesis/cells_sim.v

3.1. Executing Verilog-2005 frontend: /home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v
Parsing Verilog input from `/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\inv'.
Generating RTLIL representation for module `\buff'.
Generating RTLIL representation for module `\logic_0'.
Generating RTLIL representation for module `\logic_1'.
Generating RTLIL representation for module `\gclkbuff'.
Successfully finished Verilog frontend.

3.2. Executing Verilog-2005 frontend: /home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/cells_sim.v
Parsing Verilog input from `/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\dffsre'.
Generating RTLIL representation for module `\dffnsre'.
Generating RTLIL representation for module `\latchsre'.
Generating RTLIL representation for module `\latchnsre'.
Generating RTLIL representation for module `\io_scff'.
Generating RTLIL representation for module `\scff'.
Generating RTLIL representation for module `\sh_dff'.
Generating RTLIL representation for module `\adder_carry'.
Generating RTLIL representation for module `\sdffr'.
Generating RTLIL representation for module `\sdffs'.
Generating RTLIL representation for module `\TDP_BRAM18'.
Generating RTLIL representation for module `\TDP36K'.
Generating RTLIL representation for module `\RS_DSP1'.
Generating RTLIL representation for module `\RS_DSP2'.
Generating RTLIL representation for module `\RS_DSP2_MULT'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGIN_REGOUT'.
Generating RTLIL representation for module `\dsp_t1_sim'.
Generating RTLIL representation for module `\dsp_t1_20x18x64'.
Generating RTLIL representation for module `\dsp_t1_10x9x32'.
Successfully finished Verilog frontend.

yosys> hierarchy -check -top key_schedule

3.3. Executing HIERARCHY pass (managing design hierarchy).
VERIFIC-INFO [VHDL-1067] key_schedule.vhd:22: processing 'key_schedule(Behavioral)'
VERIFIC-INFO [VHDL-1067] dual_mem.vhd:20: processing 'dual_mem(rtl)'
VERIFIC-INFO [VHDL-1754] dual_mem.vhd:35: extracting RAM for identifier 'RAM'
Importing module key_schedule.
Importing module dual_mem(rtl).

3.3.1. Analyzing design hierarchy..
Top module:  \key_schedule
Used module:     \dual_mem(rtl)

3.3.2. Analyzing design hierarchy..
Top module:  \key_schedule
Used module:     \dual_mem(rtl)
Removed 0 unused modules.

yosys> proc

3.4. Executing PROC pass (convert processes to netlists).

yosys> proc_clean

3.4.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> proc_rmdead

3.4.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

yosys> proc_prune

3.4.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

yosys> proc_init

3.4.4. Executing PROC_INIT pass (extract init attributes).

yosys> proc_arst

3.4.5. Executing PROC_ARST pass (detect async resets in processes).

yosys> proc_rom

3.4.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

yosys> proc_mux

3.4.7. Executing PROC_MUX pass (convert decision trees to multiplexers).

yosys> proc_dlatch

3.4.8. Executing PROC_DLATCH pass (convert process syncs to latches).

yosys> proc_dff

3.4.9. Executing PROC_DFF pass (convert process syncs to FFs).

yosys> proc_memwr

3.4.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

yosys> proc_clean

3.4.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> opt_expr -keepdc

3.4.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module dual_mem(rtl).
Optimizing module key_schedule.
<suppressed ~1 debug messages>

yosys> bmuxmap

3.5. Executing BMUXMAP pass.

yosys> demuxmap

3.6. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> flatten

3.7. Executing FLATTEN pass (flatten design).
Deleting now unused module dual_mem(rtl).
<suppressed ~2 debug messages>

yosys> bmuxmap

3.8. Executing BMUXMAP pass.

yosys> demuxmap

3.9. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> tribuf -logic

3.10. Executing TRIBUF pass.

yosys> deminout

3.11. Executing DEMINOUT pass (demote inout ports to input or output).

yosys> opt_expr

3.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.
<suppressed ~56 debug messages>

yosys> opt_clean

3.13. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..
Removed 0 unused cells and 65 unused wires.
<suppressed ~30 debug messages>

yosys> check

3.14. Executing CHECK pass (checking for obvious problems).
Checking module key_schedule...
Found and reported 0 problems.

yosys> opt -nodffe -nosdff

3.15. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.

yosys> opt_merge -nomux

3.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.15.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \key_schedule..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~18 debug messages>

yosys> opt_reduce

3.15.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \key_schedule.
Performed a total of 0 changes.

yosys> opt_merge

3.15.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
<suppressed ~51 debug messages>
Removed a total of 17 cells.

yosys> opt_dff -nodffe -nosdff

3.15.6. Executing OPT_DFF pass (perform DFF optimizations).
Removing never-active async load on $verific$gen_sub_keys.w_3_i_tmp_old_reg$key_schedule.vhd:130$187 ($aldff) from module key_schedule.
Removing never-active async load on $verific$gen_sub_keys.w_2_i_tmp_old_reg$key_schedule.vhd:130$186 ($aldff) from module key_schedule.
Removing never-active async load on $verific$gen_sub_keys.w_1_i_tmp_old_reg$key_schedule.vhd:130$185 ($aldff) from module key_schedule.
Removing never-active async load on $verific$gen_sub_keys.w_0_i_tmp_old_reg$key_schedule.vhd:130$184 ($aldff) from module key_schedule.
Removing never-active async load on $verific$gen_sub_keys.tmp_3_reg$key_schedule.vhd:130$191 ($aldff) from module key_schedule.
Removing never-active async load on $verific$gen_sub_keys.tmp_2_reg$key_schedule.vhd:130$190 ($aldff) from module key_schedule.
Removing never-active async load on $verific$gen_sub_keys.tmp_1_reg$key_schedule.vhd:130$189 ($aldff) from module key_schedule.
Removing never-active async load on $verific$gen_sub_keys.tmp_0_reg$key_schedule.vhd:130$188 ($aldff) from module key_schedule.
Removing never-active async load on $verific$count_5_reg$key_schedule.vhd:62$104 ($aldff) from module key_schedule.
Removing never-active async load on $verific$count_10_reg$key_schedule.vhd:77$111 ($aldff) from module key_schedule.
Removing never-active async load on $flatten\S_BOX_DUAL_2.$verific$read_dpra_reg$dual_mem.vhd:51$230 ($aldff) from module key_schedule.
Removing never-active async load on $flatten\S_BOX_DUAL_2.$verific$read_a_reg$dual_mem.vhd:51$229 ($aldff) from module key_schedule.
Removing never-active async load on $flatten\S_BOX_DUAL_1.$verific$read_dpra_reg$dual_mem.vhd:51$230 ($aldff) from module key_schedule.
Removing never-active async load on $flatten\S_BOX_DUAL_1.$verific$read_a_reg$dual_mem.vhd:51$229 ($aldff) from module key_schedule.

yosys> opt_clean

3.15.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..
Removed 0 unused cells and 10 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.15.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.

3.15.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.15.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \key_schedule..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~26 debug messages>

yosys> opt_reduce

3.15.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \key_schedule.
Performed a total of 0 changes.

yosys> opt_merge

3.15.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.15.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.15.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..

yosys> opt_expr

3.15.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.

3.15.16. Finished OPT passes. (There is nothing left to do.)

yosys> fsm -encoding binary

3.16. Executing FSM pass (extract and optimize FSM).

yosys> fsm_detect

3.16.1. Executing FSM_DETECT pass (finding FSMs in design).

yosys> fsm_extract

3.16.2. Executing FSM_EXTRACT pass (extracting FSM from design).

yosys> fsm_opt

3.16.3. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> opt_clean

3.16.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..

yosys> fsm_opt

3.16.5. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> fsm_recode -encoding binary

3.16.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

yosys> fsm_info

3.16.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

yosys> fsm_map

3.16.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

yosys> opt -sat

3.17. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.17.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.

yosys> opt_merge -nomux

3.17.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.17.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \key_schedule..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~26 debug messages>

yosys> opt_reduce

3.17.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \key_schedule.
Performed a total of 0 changes.

yosys> opt_merge

3.17.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.17.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $verific$gen_sub_keys.w_3_i_tmp_old_reg$key_schedule.vhd:130$187 ($dff) from module key_schedule (D = $verific$n1740$80, Q = \gen_sub_keys.w_3_i_tmp_old, rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$362 ($sdff) from module key_schedule (D = $verific$n1740$80, Q = \gen_sub_keys.w_3_i_tmp_old).
Adding SRST signal on $verific$gen_sub_keys.w_2_i_tmp_old_reg$key_schedule.vhd:130$186 ($dff) from module key_schedule (D = $verific$n1641$77, Q = \gen_sub_keys.w_2_i_tmp_old, rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$376 ($sdff) from module key_schedule (D = $verific$n1641$77, Q = \gen_sub_keys.w_2_i_tmp_old).
Adding SRST signal on $verific$gen_sub_keys.w_1_i_tmp_old_reg$key_schedule.vhd:130$185 ($dff) from module key_schedule (D = $verific$n1542$74, Q = \gen_sub_keys.w_1_i_tmp_old, rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$388 ($sdff) from module key_schedule (D = $verific$n1542$74, Q = \gen_sub_keys.w_1_i_tmp_old).
Adding SRST signal on $verific$gen_sub_keys.w_0_i_tmp_old_reg$key_schedule.vhd:130$184 ($dff) from module key_schedule (D = $verific$n1443$71, Q = \gen_sub_keys.w_0_i_tmp_old, rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$398 ($sdff) from module key_schedule (D = $verific$n1443$71, Q = \gen_sub_keys.w_0_i_tmp_old).
Adding SRST signal on $verific$gen_sub_keys.tmp_3_reg$key_schedule.vhd:130$191 ($dff) from module key_schedule (D = $verific$n2136$92, Q = \gen_sub_keys.tmp_3, rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$406 ($sdff) from module key_schedule (D = $verific$n651$47, Q = \gen_sub_keys.tmp_3).
Adding SRST signal on $verific$gen_sub_keys.tmp_2_reg$key_schedule.vhd:130$190 ($dff) from module key_schedule (D = $verific$n2037$89, Q = \gen_sub_keys.tmp_2, rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$418 ($sdff) from module key_schedule (D = $verific$n551$44, Q = \gen_sub_keys.tmp_2).
Adding SRST signal on $verific$gen_sub_keys.tmp_1_reg$key_schedule.vhd:130$189 ($dff) from module key_schedule (D = $verific$n1938$86, Q = \gen_sub_keys.tmp_1, rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$428 ($sdff) from module key_schedule (D = $verific$n451$41, Q = \gen_sub_keys.tmp_1).
Adding SRST signal on $verific$gen_sub_keys.tmp_0_reg$key_schedule.vhd:130$188 ($dff) from module key_schedule (D = $verific$n1839$83, Q = \gen_sub_keys.tmp_0, rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$436 ($sdff) from module key_schedule (D = $verific$n351$38, Q = \gen_sub_keys.tmp_0).
Adding SRST signal on $verific$count_5_reg$key_schedule.vhd:62$104 ($dff) from module key_schedule (D = $verific$n86$24, Q = \count_5, rval = 3'000).
Adding EN signal on $auto$ff.cc:262:slice$442 ($sdff) from module key_schedule (D = $verific$n82$23, Q = \count_5).
Adding SRST signal on $verific$count_10_reg$key_schedule.vhd:77$111 ($dff) from module key_schedule (D = $verific$n185$31, Q = \count_10, rval = 4'0000).
Adding EN signal on $auto$ff.cc:262:slice$444 ($sdff) from module key_schedule (D = $verific$n180$30, Q = \count_10).

yosys> opt_clean

3.17.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..
Removed 30 unused cells and 30 unused wires.
<suppressed ~31 debug messages>

yosys> opt_expr

3.17.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.
<suppressed ~4 debug messages>

3.17.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.17.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \key_schedule..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~22 debug messages>

yosys> opt_reduce

3.17.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \key_schedule.
Performed a total of 0 changes.

yosys> opt_merge

3.17.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
<suppressed ~36 debug messages>
Removed a total of 12 cells.

yosys> opt_dff -sat

3.17.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.17.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..
Removed 0 unused cells and 12 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.17.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.

3.17.16. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.17.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \key_schedule..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~22 debug messages>

yosys> opt_reduce

3.17.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \key_schedule.
Performed a total of 0 changes.

yosys> opt_merge

3.17.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.17.20. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.17.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..

yosys> opt_expr

3.17.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.

3.17.23. Finished OPT passes. (There is nothing left to do.)

yosys> wreduce -keepdc

3.18. Executing WREDUCE pass (reducing word size of cells).
Removed top 2 bits (of 3) from port B of cell key_schedule.$verific$add_7$key_schedule.vhd:59$100 ($add).
Removed top 3 bits (of 4) from port B of cell key_schedule.$verific$add_19$key_schedule.vhd:74$107 ($add).
Removed top 2 bits (of 3) from port A of cell key_schedule.$verific$equal_30$key_schedule.vhd:116$116 ($eq).
Removed top 4 bits (of 6) from port B of cell key_schedule.$auto$opt_dff.cc:195:make_patterns_logic$367 ($ne).
Removed top 1 bits (of 3) from port A of cell key_schedule.$verific$equal_43$key_schedule.vhd:119$129 ($eq).
Removed top 1 bits (of 3) from port A of cell key_schedule.$verific$equal_47$key_schedule.vhd:122$133 ($eq).
Removed top 2 bits (of 4) from port B of cell key_schedule.$auto$opt_dff.cc:195:make_patterns_logic$393 ($ne).
Removed top 3 bits (of 5) from port B of cell key_schedule.$auto$opt_dff.cc:195:make_patterns_logic$381 ($ne).
Removed top 1 bits (of 3) from port B of cell key_schedule.$auto$opt_dff.cc:195:make_patterns_logic$403 ($ne).
Removed top 3 bits (of 4) from wire key_schedule.$auto$bmuxmap.cc:58:execute$237.
Removed top 1 bits (of 2) from wire key_schedule.$auto$bmuxmap.cc:58:execute$242.
Removed top 7 bits (of 8) from wire key_schedule.$auto$bmuxmap.cc:58:execute$247.
Removed top 1 bits (of 4) from wire key_schedule.$auto$bmuxmap.cc:58:execute$256.
Removed top 1 bits (of 4) from wire key_schedule.$auto$bmuxmap.cc:58:execute$275.
Removed top 1 bits (of 4) from wire key_schedule.$auto$bmuxmap.cc:58:execute$294.

yosys> peepopt

3.19. Executing PEEPOPT pass (run peephole optimizers).

yosys> opt_clean

3.20. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..
Removed 0 unused cells and 6 unused wires.
<suppressed ~1 debug messages>

yosys> bmuxmap

3.21. Executing BMUXMAP pass.

yosys> demuxmap

3.22. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> alumacc

3.23. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module key_schedule:
  creating $macc model for $verific$add_19$key_schedule.vhd:74$107 ($add).
  creating $macc model for $verific$add_7$key_schedule.vhd:59$100 ($add).
  creating $alu model for $macc $verific$add_7$key_schedule.vhd:59$100.
  creating $alu model for $macc $verific$add_19$key_schedule.vhd:74$107.
  creating $alu cell for $verific$add_19$key_schedule.vhd:74$107: $auto$alumacc.cc:485:replace_alu$452
  creating $alu cell for $verific$add_7$key_schedule.vhd:59$100: $auto$alumacc.cc:485:replace_alu$455
  created 2 $alu and 0 $macc cells.

yosys> opt_expr

3.24. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.

yosys> opt_merge -nomux

3.25. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.26. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \key_schedule..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~22 debug messages>

yosys> opt_reduce

3.27. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \key_schedule.
Performed a total of 0 changes.

yosys> opt_merge

3.28. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
Removed a total of 0 cells.

yosys> opt_share

3.29. Executing OPT_SHARE pass.

yosys> opt_dff

3.30. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.31. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..

yosys> opt_expr

3.32. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.
MAX OPT ITERATION = 1

yosys> stat

3.33. Printing statistics.

=== key_schedule ===

   Number of wires:                116
   Number of wire bits:           1500
   Number of public wires:          40
   Number of public wire bits:     704
   Number of memories:               2
   Number of memory bits:         4096
   Number of processes:              0
   Number of cells:                 99
     $alu                            2
     $and                            2
     $dff                            4
     $eq                             5
     $memrd_v2                       4
     $memwr_v2                       2
     $mux                           45
     $ne                             7
     $not                            4
     $reduce_and                     8
     $reduce_bool                    1
     $sdffe                         10
     $xor                            5


yosys> memory -nomap

3.34. Executing MEMORY pass.

yosys> opt_mem

3.34.1. Executing OPT_MEM pass (optimize memories).
key_schedule.S_BOX_DUAL_1.RAM: removing const-0 lane 0
key_schedule.S_BOX_DUAL_1.RAM: removing const-0 lane 1
key_schedule.S_BOX_DUAL_1.RAM: removing const-0 lane 2
key_schedule.S_BOX_DUAL_1.RAM: removing const-0 lane 3
key_schedule.S_BOX_DUAL_1.RAM: removing const-0 lane 4
key_schedule.S_BOX_DUAL_1.RAM: removing const-0 lane 5
key_schedule.S_BOX_DUAL_1.RAM: removing const-0 lane 6
key_schedule.S_BOX_DUAL_1.RAM: removing const-0 lane 7
key_schedule.S_BOX_DUAL_2.RAM: removing const-0 lane 0
key_schedule.S_BOX_DUAL_2.RAM: removing const-0 lane 1
key_schedule.S_BOX_DUAL_2.RAM: removing const-0 lane 2
key_schedule.S_BOX_DUAL_2.RAM: removing const-0 lane 3
key_schedule.S_BOX_DUAL_2.RAM: removing const-0 lane 4
key_schedule.S_BOX_DUAL_2.RAM: removing const-0 lane 5
key_schedule.S_BOX_DUAL_2.RAM: removing const-0 lane 6
key_schedule.S_BOX_DUAL_2.RAM: removing const-0 lane 7
Performed a total of 2 transformations.

yosys> opt_mem_priority

3.34.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

yosys> opt_mem_feedback

3.34.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

yosys> memory_bmux2rom

3.34.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

yosys> memory_dff

3.34.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

yosys> opt_clean

3.34.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..
Removed 4 unused cells and 4 unused wires.
<suppressed ~8 debug messages>

yosys> memory_share

3.34.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

yosys> opt_mem_widen

3.34.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

yosys> opt_clean

3.34.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..

yosys> memory_collect

3.34.10. Executing MEMORY_COLLECT pass (generating $mem cells).

yosys> stat

3.35. Printing statistics.

=== key_schedule ===

   Number of wires:                112
   Number of wire bits:           1468
   Number of public wires:          36
   Number of public wire bits:     672
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 89
     $alu                            2
     $and                            2
     $eq                             5
     $mux                           45
     $ne                             7
     $not                            4
     $reduce_and                     8
     $reduce_bool                    1
     $sdffe                         10
     $xor                            5


yosys> muxpack

3.36. Executing MUXPACK pass ($mux cell cascades to $pmux).
Converting key_schedule.$verific$mux_59$key_schedule.vhd:128$144 ... key_schedule.$verific$mux_60$key_schedule.vhd:128$145 to a pmux with 2 cases.
Converting key_schedule.$verific$mux_64$key_schedule.vhd:128$149 ... key_schedule.$verific$mux_66$key_schedule.vhd:128$151 to a pmux with 3 cases.
Converting key_schedule.$verific$mux_71$key_schedule.vhd:128$156 ... key_schedule.$verific$mux_74$key_schedule.vhd:128$159 to a pmux with 4 cases.
Converted 9 (p)mux cells into 3 pmux cells.
<suppressed ~36 debug messages>

yosys> opt_clean

3.37. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..
Removed 0 unused cells and 6 unused wires.
<suppressed ~1 debug messages>

yosys> pmuxtree

3.38. Executing PMUXTREE pass.

yosys> muxpack

3.39. Executing MUXPACK pass ($mux cell cascades to $pmux).
Converted 0 (p)mux cells into 0 pmux cells.
<suppressed ~32 debug messages>

yosys> memory_map

3.40. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

yosys> stat

3.41. Printing statistics.

=== key_schedule ===

   Number of wires:                113
   Number of wire bits:           1469
   Number of public wires:          36
   Number of public wire bits:     672
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 87
     $alu                            2
     $and                            2
     $eq                             5
     $mux                           42
     $ne                             7
     $not                            4
     $or                             1
     $reduce_and                     8
     $reduce_bool                    1
     $sdffe                         10
     $xor                            5


yosys> techmap -map +/techmap.v -map +/rapidsilicon/genesis/arith_map.v

3.42. Executing TECHMAP pass (map to technology primitives).

3.42.1. Executing Verilog-2005 frontend: /home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.42.2. Executing Verilog-2005 frontend: /home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/arith_map.v
Parsing Verilog input from `/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_rs_alu'.
Successfully finished Verilog frontend.

3.42.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $sdffe.
Using extmapper simplemap for cells of type $and.
Using template $paramod$3ef7d3dd227da7627a99c5e5a6a4deb817573e39\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $not.
Using template $paramod$32a7b7b86c07519b7537abc18e96f0331f97914d\_90_alu for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000011 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000100 for cells of type $lcu.
No more expansions possible.
<suppressed ~617 debug messages>

yosys> stat

3.43. Printing statistics.

=== key_schedule ===

   Number of wires:                236
   Number of wire bits:           3901
   Number of public wires:          36
   Number of public wire bits:     672
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1082
     $_AND_                         42
     $_MUX_                        519
     $_NOT_                         16
     $_OR_                          44
     $_SDFFE_PP0P_                 263
     $_XOR_                        198


yosys> opt_expr

3.44. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.
<suppressed ~384 debug messages>

yosys> opt_merge -nomux

3.45. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
<suppressed ~90 debug messages>
Removed a total of 30 cells.

yosys> opt_muxtree

3.46. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \key_schedule..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.47. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \key_schedule.
Performed a total of 0 changes.

yosys> opt_merge

3.48. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
Removed a total of 0 cells.

yosys> opt_share

3.49. Executing OPT_SHARE pass.

yosys> opt_dff

3.50. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $auto$ff.cc:262:slice$1348 ($_SDFFE_PP0P_) from module key_schedule (D = $verific$n1443$71 [31], Q = \gen_sub_keys.w_0_i_tmp_old [31]).
Adding EN signal on $auto$ff.cc:262:slice$1325 ($_SDFFE_PP0P_) from module key_schedule (D = $verific$n1443$71 [8], Q = \gen_sub_keys.w_0_i_tmp_old [8]).
Adding EN signal on $auto$ff.cc:262:slice$1326 ($_SDFFE_PP0P_) from module key_schedule (D = $verific$n1443$71 [9], Q = \gen_sub_keys.w_0_i_tmp_old [9]).
Adding EN signal on $auto$ff.cc:262:slice$1327 ($_SDFFE_PP0P_) from module key_schedule (D = $verific$n1443$71 [10], Q = \gen_sub_keys.w_0_i_tmp_old [10]).
Adding EN signal on $auto$ff.cc:262:slice$1328 ($_SDFFE_PP0P_) from module key_schedule (D = $verific$n1443$71 [11], Q = \gen_sub_keys.w_0_i_tmp_old [11]).
Adding EN signal on $auto$ff.cc:262:slice$1329 ($_SDFFE_PP0P_) from module key_schedule (D = $verific$n1443$71 [12], Q = \gen_sub_keys.w_0_i_tmp_old [12]).
Adding EN signal on $auto$ff.cc:262:slice$1330 ($_SDFFE_PP0P_) from module key_schedule (D = $verific$n1443$71 [13], Q = \gen_sub_keys.w_0_i_tmp_old [13]).
Adding EN signal on $auto$ff.cc:262:slice$1331 ($_SDFFE_PP0P_) from module key_schedule (D = $verific$n1443$71 [14], Q = \gen_sub_keys.w_0_i_tmp_old [14]).
Adding EN signal on $auto$ff.cc:262:slice$1332 ($_SDFFE_PP0P_) from module key_schedule (D = $verific$n1443$71 [15], Q = \gen_sub_keys.w_0_i_tmp_old [15]).
Adding EN signal on $auto$ff.cc:262:slice$1333 ($_SDFFE_PP0P_) from module key_schedule (D = $verific$n1443$71 [16], Q = \gen_sub_keys.w_0_i_tmp_old [16]).
Adding EN signal on $auto$ff.cc:262:slice$1334 ($_SDFFE_PP0P_) from module key_schedule (D = $verific$n1443$71 [17], Q = \gen_sub_keys.w_0_i_tmp_old [17]).
Adding EN signal on $auto$ff.cc:262:slice$1335 ($_SDFFE_PP0P_) from module key_schedule (D = $verific$n1443$71 [18], Q = \gen_sub_keys.w_0_i_tmp_old [18]).
Adding EN signal on $auto$ff.cc:262:slice$1336 ($_SDFFE_PP0P_) from module key_schedule (D = $verific$n1443$71 [19], Q = \gen_sub_keys.w_0_i_tmp_old [19]).
Adding EN signal on $auto$ff.cc:262:slice$1337 ($_SDFFE_PP0P_) from module key_schedule (D = $verific$n1443$71 [20], Q = \gen_sub_keys.w_0_i_tmp_old [20]).
Adding EN signal on $auto$ff.cc:262:slice$1338 ($_SDFFE_PP0P_) from module key_schedule (D = $verific$n1443$71 [21], Q = \gen_sub_keys.w_0_i_tmp_old [21]).
Adding EN signal on $auto$ff.cc:262:slice$1339 ($_SDFFE_PP0P_) from module key_schedule (D = $verific$n1443$71 [22], Q = \gen_sub_keys.w_0_i_tmp_old [22]).
Adding EN signal on $auto$ff.cc:262:slice$1340 ($_SDFFE_PP0P_) from module key_schedule (D = $verific$n1443$71 [23], Q = \gen_sub_keys.w_0_i_tmp_old [23]).
Adding EN signal on $auto$ff.cc:262:slice$1341 ($_SDFFE_PP0P_) from module key_schedule (D = $verific$n1443$71 [24], Q = \gen_sub_keys.w_0_i_tmp_old [24]).
Adding EN signal on $auto$ff.cc:262:slice$1342 ($_SDFFE_PP0P_) from module key_schedule (D = $verific$n1443$71 [25], Q = \gen_sub_keys.w_0_i_tmp_old [25]).
Adding EN signal on $auto$ff.cc:262:slice$1343 ($_SDFFE_PP0P_) from module key_schedule (D = $verific$n1443$71 [26], Q = \gen_sub_keys.w_0_i_tmp_old [26]).
Adding EN signal on $auto$ff.cc:262:slice$1344 ($_SDFFE_PP0P_) from module key_schedule (D = $verific$n1443$71 [27], Q = \gen_sub_keys.w_0_i_tmp_old [27]).
Adding EN signal on $auto$ff.cc:262:slice$1345 ($_SDFFE_PP0P_) from module key_schedule (D = $verific$n1443$71 [28], Q = \gen_sub_keys.w_0_i_tmp_old [28]).
Adding EN signal on $auto$ff.cc:262:slice$1346 ($_SDFFE_PP0P_) from module key_schedule (D = $verific$n1443$71 [29], Q = \gen_sub_keys.w_0_i_tmp_old [29]).
Adding EN signal on $auto$ff.cc:262:slice$1347 ($_SDFFE_PP0P_) from module key_schedule (D = $verific$n1443$71 [30], Q = \gen_sub_keys.w_0_i_tmp_old [30]).

yosys> opt_clean

3.51. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..
Removed 6 unused cells and 177 unused wires.
<suppressed ~7 debug messages>

yosys> opt_expr

3.52. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.
<suppressed ~120 debug messages>

yosys> opt_muxtree

3.53. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \key_schedule..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.54. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \key_schedule.
Performed a total of 0 changes.

yosys> opt_merge

3.55. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
<suppressed ~285 debug messages>
Removed a total of 95 cells.

yosys> opt_share

3.56. Executing OPT_SHARE pass.

yosys> opt_dff

3.57. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.58. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..
Removed 0 unused cells and 119 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.59. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.

yosys> opt_muxtree

3.60. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \key_schedule..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.61. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \key_schedule.
Performed a total of 0 changes.

yosys> opt_merge

3.62. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
Removed a total of 0 cells.

yosys> opt_share

3.63. Executing OPT_SHARE pass.

yosys> opt_dff

3.64. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.65. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..

yosys> opt_expr

3.66. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.
MAX OPT ITERATION = 3

yosys> opt -fast -full

3.67. Executing OPT pass (performing simple optimizations).

yosys> opt_expr -full

3.67.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.
<suppressed ~283 debug messages>

yosys> opt_merge

3.67.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

yosys> opt_dff

3.67.3. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.67.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..
Removed 1 unused cells and 12 unused wires.
<suppressed ~2 debug messages>

3.67.5. Finished fast OPT passes.

yosys> techmap -map +/techmap.v

3.68. Executing TECHMAP pass (map to technology primitives).

3.68.1. Executing Verilog-2005 frontend: /home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.68.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~71 debug messages>

yosys> opt -sat

3.69. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.69.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.

yosys> opt_merge -nomux

3.69.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.69.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \key_schedule..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.69.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \key_schedule.
Performed a total of 0 changes.

yosys> opt_merge

3.69.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.69.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.69.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..

yosys> opt_expr

3.69.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.

3.69.9. Finished OPT passes. (There is nothing left to do.)

yosys> abc -dff

3.70. Executing ABC pass (technology mapping using ABC).

3.70.1. Summary of detected clock domains:
  35 cells in clk=\clk, en=$auto$simplemap.cc:128:simplemap_reduce$1664 [0], arst={ }, srst=\rst
  20 cells in clk=\clk, en=\start, arst={ }, srst=\rst
  49 cells in clk=\clk, en=$auto$opt_dff.cc:219:make_patterns_logic$1829, arst={ }, srst=\rst
  67 cells in clk=\clk, en=$auto$opt_dff.cc:219:make_patterns_logic$416, arst={ }, srst=\rst
  67 cells in clk=\clk, en=$auto$opt_dff.cc:219:make_patterns_logic$426, arst={ }, srst=\rst
  44 cells in clk=\clk, en=$auto$opt_dff.cc:219:make_patterns_logic$434, arst={ }, srst=\rst
  44 cells in clk=\clk, en=$auto$opt_dff.cc:219:make_patterns_logic$440, arst={ }, srst=\rst
  73 cells in clk=\clk, en=$auto$opt_dff.cc:219:make_patterns_logic$374, arst={ }, srst=\rst
  71 cells in clk=\clk, en=$auto$opt_dff.cc:219:make_patterns_logic$386, arst={ }, srst=\rst
  71 cells in clk=\clk, en=$auto$opt_dff.cc:219:make_patterns_logic$396, arst={ }, srst=\rst
  19 cells in clk=\clk, en=$auto$opt_dff.cc:219:make_patterns_logic$404, arst={ }, srst=\rst

3.70.2. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$simplemap.cc:128:simplemap_reduce$1664 [0], synchronously reset by \rst
Extracted 35 gates and 39 wires to a netlist network with 2 inputs and 10 outputs.

3.70.2.1. Executing ABC.

3.70.3. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by \start, synchronously reset by \rst
Extracted 20 gates and 20 wires to a netlist network with 0 inputs and 4 outputs.

3.70.3.1. Executing ABC.

3.70.4. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:219:make_patterns_logic$1829, synchronously reset by \rst
Extracted 49 gates and 99 wires to a netlist network with 50 inputs and 49 outputs.

3.70.4.1. Executing ABC.

3.70.5. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:219:make_patterns_logic$416, synchronously reset by \rst
Extracted 67 gates and 135 wires to a netlist network with 68 inputs and 65 outputs.

3.70.5.1. Executing ABC.

3.70.6. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:219:make_patterns_logic$426, synchronously reset by \rst
Extracted 67 gates and 135 wires to a netlist network with 68 inputs and 65 outputs.

3.70.6.1. Executing ABC.

3.70.7. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:219:make_patterns_logic$434, synchronously reset by \rst
Extracted 44 gates and 88 wires to a netlist network with 44 inputs and 43 outputs.

3.70.7.1. Executing ABC.

3.70.8. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:219:make_patterns_logic$440, synchronously reset by \rst
Extracted 44 gates and 87 wires to a netlist network with 43 inputs and 44 outputs.

3.70.8.1. Executing ABC.

3.70.9. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:219:make_patterns_logic$374, synchronously reset by \rst
Extracted 73 gates and 148 wires to a netlist network with 75 inputs and 33 outputs.

3.70.9.1. Executing ABC.

3.70.10. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:219:make_patterns_logic$386, synchronously reset by \rst
Extracted 71 gates and 143 wires to a netlist network with 72 inputs and 35 outputs.

3.70.10.1. Executing ABC.

3.70.11. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:219:make_patterns_logic$396, synchronously reset by \rst
Extracted 71 gates and 141 wires to a netlist network with 70 inputs and 36 outputs.

3.70.11.1. Executing ABC.

3.70.12. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:219:make_patterns_logic$404, synchronously reset by \rst
Extracted 19 gates and 39 wires to a netlist network with 20 inputs and 10 outputs.

3.70.12.1. Executing ABC.

yosys> abc -dff

3.71. Executing ABC pass (technology mapping using ABC).

3.71.1. Summary of detected clock domains:
  139 cells in clk=\clk, en=$abc$2971$auto$opt_dff.cc:219:make_patterns_logic$374, arst={ }, srst=\rst
  26 cells in clk=\clk, en=$abc$2349$auto$simplemap.cc:128:simplemap_reduce$1664[0], arst={ }, srst=\rst
  126 cells in clk=\clk, en=$abc$3077$auto$opt_dff.cc:219:make_patterns_logic$386, arst={ }, srst=\rst
  10 cells in clk=\clk, en=\start, arst={ }, srst=\rst
  40 cells in clk=\clk, en=$abc$2391$auto$opt_dff.cc:219:make_patterns_logic$1829, arst={ }, srst=\rst
  35 cells in clk=\clk, en=$abc$2489$auto$opt_dff.cc:219:make_patterns_logic$416, arst={ }, srst=\rst
  36 cells in clk=\clk, en=$abc$2621$auto$opt_dff.cc:219:make_patterns_logic$426, arst={ }, srst=\rst
  35 cells in clk=\clk, en=$abc$2753$auto$opt_dff.cc:219:make_patterns_logic$434, arst={ }, srst=\rst
  43 cells in clk=\clk, en=$abc$2862$auto$opt_dff.cc:219:make_patterns_logic$440, arst={ }, srst=\rst
  103 cells in clk=\clk, en=$abc$3181$auto$opt_dff.cc:219:make_patterns_logic$396, arst={ }, srst=\rst
  31 cells in clk=\clk, en=$abc$3284$auto$opt_dff.cc:219:make_patterns_logic$404, arst={ }, srst=\rst

3.71.2. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$2971$auto$opt_dff.cc:219:make_patterns_logic$374, synchronously reset by \rst
Extracted 139 gates and 214 wires to a netlist network with 75 inputs and 34 outputs.

3.71.2.1. Executing ABC.

3.71.3. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$2349$auto$simplemap.cc:128:simplemap_reduce$1664[0], synchronously reset by \rst
Extracted 26 gates and 28 wires to a netlist network with 2 inputs and 11 outputs.

3.71.3.1. Executing ABC.

3.71.4. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$3077$auto$opt_dff.cc:219:make_patterns_logic$386, synchronously reset by \rst
Extracted 126 gates and 198 wires to a netlist network with 72 inputs and 62 outputs.

3.71.4.1. Executing ABC.

3.71.5. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by \start, synchronously reset by \rst
Extracted 10 gates and 10 wires to a netlist network with 0 inputs and 4 outputs.

3.71.5.1. Executing ABC.

3.71.6. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$2391$auto$opt_dff.cc:219:make_patterns_logic$1829, synchronously reset by \rst
Extracted 40 gates and 81 wires to a netlist network with 41 inputs and 40 outputs.

3.71.6.1. Executing ABC.

3.71.7. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$2489$auto$opt_dff.cc:219:make_patterns_logic$416, synchronously reset by \rst
Extracted 35 gates and 71 wires to a netlist network with 36 inputs and 33 outputs.

3.71.7.1. Executing ABC.

3.71.8. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$2621$auto$opt_dff.cc:219:make_patterns_logic$426, synchronously reset by \rst
Extracted 36 gates and 72 wires to a netlist network with 36 inputs and 34 outputs.

3.71.8.1. Executing ABC.

3.71.9. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$2753$auto$opt_dff.cc:219:make_patterns_logic$434, synchronously reset by \rst
Extracted 35 gates and 71 wires to a netlist network with 36 inputs and 34 outputs.

3.71.9.1. Executing ABC.

3.71.10. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$2862$auto$opt_dff.cc:219:make_patterns_logic$440, synchronously reset by \rst
Extracted 43 gates and 86 wires to a netlist network with 43 inputs and 35 outputs.

3.71.10.1. Executing ABC.

3.71.11. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$3181$auto$opt_dff.cc:219:make_patterns_logic$396, synchronously reset by \rst
Extracted 103 gates and 177 wires to a netlist network with 74 inputs and 57 outputs.

3.71.11.1. Executing ABC.

3.71.12. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$3284$auto$opt_dff.cc:219:make_patterns_logic$404, synchronously reset by \rst
Extracted 31 gates and 53 wires to a netlist network with 22 inputs and 14 outputs.

3.71.12.1. Executing ABC.

yosys> abc -dff

3.72. Executing ABC pass (technology mapping using ABC).

3.72.1. Summary of detected clock domains:
  43 cells in clk=\clk, en=$abc$3978$abc$2862$auto$opt_dff.cc:219:make_patterns_logic$440, arst={ }, srst=\rst
  26 cells in clk=\clk, en=$abc$3419$abc$2349$auto$simplemap.cc:128:simplemap_reduce$1664[0], arst={ }, srst=\rst
  107 cells in clk=\clk, en=$abc$3312$abc$2971$auto$opt_dff.cc:219:make_patterns_logic$374, arst={ }, srst=\rst
  73 cells in clk=\clk, en=$abc$3446$abc$3077$auto$opt_dff.cc:219:make_patterns_logic$386, arst={ }, srst=\rst
  10 cells in clk=\clk, en=\start, arst={ }, srst=\rst
  26 cells in clk=\clk, en=$abc$3588$abc$2391$auto$opt_dff.cc:219:make_patterns_logic$1829, arst={ }, srst=\rst
  35 cells in clk=\clk, en=$abc$3677$abc$2489$auto$opt_dff.cc:219:make_patterns_logic$416, arst={ }, srst=\rst
  35 cells in clk=\clk, en=$abc$3777$abc$2621$auto$opt_dff.cc:219:make_patterns_logic$426, arst={ }, srst=\rst
  51 cells in clk=\clk, en=$abc$3878$abc$2753$auto$opt_dff.cc:219:make_patterns_logic$434, arst={ }, srst=\rst
  119 cells in clk=\clk, en=$abc$4078$abc$3181$auto$opt_dff.cc:219:make_patterns_logic$396, arst={ }, srst=\rst
  30 cells in clk=\clk, en=$abc$4202$abc$3284$auto$opt_dff.cc:219:make_patterns_logic$404, arst={ }, srst=\rst

3.72.2. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$3978$abc$2862$auto$opt_dff.cc:219:make_patterns_logic$440, synchronously reset by \rst
Extracted 43 gates and 86 wires to a netlist network with 43 inputs and 35 outputs.

3.72.2.1. Executing ABC.

3.72.3. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$3419$abc$2349$auto$simplemap.cc:128:simplemap_reduce$1664[0], synchronously reset by \rst
Extracted 26 gates and 28 wires to a netlist network with 2 inputs and 11 outputs.

3.72.3.1. Executing ABC.

3.72.4. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$3312$abc$2971$auto$opt_dff.cc:219:make_patterns_logic$374, synchronously reset by \rst
Extracted 107 gates and 181 wires to a netlist network with 74 inputs and 34 outputs.

3.72.4.1. Executing ABC.

3.72.5. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$3446$abc$3077$auto$opt_dff.cc:219:make_patterns_logic$386, synchronously reset by \rst
Extracted 73 gates and 145 wires to a netlist network with 72 inputs and 36 outputs.

3.72.5.1. Executing ABC.

3.72.6. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by \start, synchronously reset by \rst
Extracted 10 gates and 10 wires to a netlist network with 0 inputs and 4 outputs.

3.72.6.1. Executing ABC.

3.72.7. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$3588$abc$2391$auto$opt_dff.cc:219:make_patterns_logic$1829, synchronously reset by \rst
Extracted 26 gates and 53 wires to a netlist network with 27 inputs and 26 outputs.

3.72.7.1. Executing ABC.

3.72.8. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$3677$abc$2489$auto$opt_dff.cc:219:make_patterns_logic$416, synchronously reset by \rst
Extracted 35 gates and 71 wires to a netlist network with 36 inputs and 33 outputs.

3.72.8.1. Executing ABC.

3.72.9. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$3777$abc$2621$auto$opt_dff.cc:219:make_patterns_logic$426, synchronously reset by \rst
Extracted 35 gates and 71 wires to a netlist network with 36 inputs and 33 outputs.

3.72.9.1. Executing ABC.

3.72.10. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$3878$abc$2753$auto$opt_dff.cc:219:make_patterns_logic$434, synchronously reset by \rst
Extracted 51 gates and 103 wires to a netlist network with 52 inputs and 50 outputs.

3.72.10.1. Executing ABC.

3.72.11. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$4078$abc$3181$auto$opt_dff.cc:219:make_patterns_logic$396, synchronously reset by \rst
Extracted 119 gates and 220 wires to a netlist network with 101 inputs and 68 outputs.

3.72.11.1. Executing ABC.

3.72.12. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$4202$abc$3284$auto$opt_dff.cc:219:make_patterns_logic$404, synchronously reset by \rst
Extracted 30 gates and 52 wires to a netlist network with 22 inputs and 13 outputs.

3.72.12.1. Executing ABC.

yosys> abc -dff

3.73. Executing ABC pass (technology mapping using ABC).

3.73.1. Summary of detected clock domains:
  56 cells in clk=\clk, en=$abc$4767$abc$3777$abc$2621$auto$opt_dff.cc:219:make_patterns_logic$426, arst={ }, srst=\rst
  43 cells in clk=\clk, en=$abc$4242$abc$3978$abc$2862$auto$opt_dff.cc:219:make_patterns_logic$440, arst={ }, srst=\rst
  55 cells in clk=\clk, en=$abc$4867$abc$3878$abc$2753$auto$opt_dff.cc:219:make_patterns_logic$434, arst={ }, srst=\rst
  26 cells in clk=\clk, en=$abc$4342$abc$3419$abc$2349$auto$simplemap.cc:128:simplemap_reduce$1664[0], arst={ }, srst=\rst
  99 cells in clk=\clk, en=$abc$4369$abc$3312$abc$2971$auto$opt_dff.cc:219:make_patterns_logic$374, arst={ }, srst=\rst
  10 cells in clk=\clk, en=\start, arst={ }, srst=\rst
  70 cells in clk=\clk, en=$abc$4476$abc$3446$abc$3077$auto$opt_dff.cc:219:make_patterns_logic$386, arst={ }, srst=\rst
  28 cells in clk=\clk, en=$abc$4592$abc$3588$abc$2391$auto$opt_dff.cc:219:make_patterns_logic$1829, arst={ }, srst=\rst
  42 cells in clk=\clk, en=$abc$4667$abc$3677$abc$2489$auto$opt_dff.cc:219:make_patterns_logic$416, arst={ }, srst=\rst
  109 cells in clk=\clk, en=$abc$4983$abc$4078$abc$3181$auto$opt_dff.cc:219:make_patterns_logic$396, arst={ }, srst=\rst
  30 cells in clk=\clk, en=$abc$5118$abc$4202$abc$3284$auto$opt_dff.cc:219:make_patterns_logic$404, arst={ }, srst=\rst

3.73.2. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$4767$abc$3777$abc$2621$auto$opt_dff.cc:219:make_patterns_logic$426, synchronously reset by \rst
Extracted 56 gates and 113 wires to a netlist network with 57 inputs and 54 outputs.

3.73.2.1. Executing ABC.

3.73.3. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$4242$abc$3978$abc$2862$auto$opt_dff.cc:219:make_patterns_logic$440, synchronously reset by \rst
Extracted 43 gates and 86 wires to a netlist network with 43 inputs and 35 outputs.

3.73.3.1. Executing ABC.

3.73.4. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$4867$abc$3878$abc$2753$auto$opt_dff.cc:219:make_patterns_logic$434, synchronously reset by \rst
Extracted 55 gates and 111 wires to a netlist network with 56 inputs and 42 outputs.

3.73.4.1. Executing ABC.

3.73.5. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$4342$abc$3419$abc$2349$auto$simplemap.cc:128:simplemap_reduce$1664[0], synchronously reset by \rst
Extracted 26 gates and 28 wires to a netlist network with 2 inputs and 11 outputs.

3.73.5.1. Executing ABC.

3.73.6. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$4369$abc$3312$abc$2971$auto$opt_dff.cc:219:make_patterns_logic$374, synchronously reset by \rst
Extracted 99 gates and 173 wires to a netlist network with 74 inputs and 34 outputs.

3.73.6.1. Executing ABC.

3.73.7. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by \start, synchronously reset by \rst
Extracted 10 gates and 10 wires to a netlist network with 0 inputs and 4 outputs.

3.73.7.1. Executing ABC.

3.73.8. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$4476$abc$3446$abc$3077$auto$opt_dff.cc:219:make_patterns_logic$386, synchronously reset by \rst
Extracted 70 gates and 142 wires to a netlist network with 72 inputs and 34 outputs.

3.73.8.1. Executing ABC.

3.73.9. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$4592$abc$3588$abc$2391$auto$opt_dff.cc:219:make_patterns_logic$1829, synchronously reset by \rst
Extracted 28 gates and 57 wires to a netlist network with 29 inputs and 28 outputs.

3.73.9.1. Executing ABC.

3.73.10. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$4667$abc$3677$abc$2489$auto$opt_dff.cc:219:make_patterns_logic$416, synchronously reset by \rst
Extracted 42 gates and 85 wires to a netlist network with 43 inputs and 40 outputs.

3.73.10.1. Executing ABC.

3.73.11. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$4983$abc$4078$abc$3181$auto$opt_dff.cc:219:make_patterns_logic$396, synchronously reset by \rst
Extracted 109 gates and 190 wires to a netlist network with 81 inputs and 54 outputs.

3.73.11.1. Executing ABC.

3.73.12. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$5118$abc$4202$abc$3284$auto$opt_dff.cc:219:make_patterns_logic$404, synchronously reset by \rst
Extracted 30 gates and 52 wires to a netlist network with 22 inputs and 13 outputs.

3.73.12.1. Executing ABC.

yosys> opt_ffinv

3.74. Executing OPT_FFINV pass (push inverters through FFs).
Discovering LUTs.
Pushed 0 inverters.

yosys> opt -sat

3.75. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.75.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.

yosys> opt_merge -nomux

3.75.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
<suppressed ~180 debug messages>
Removed a total of 60 cells.

yosys> opt_muxtree

3.75.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \key_schedule..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.75.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \key_schedule.
Performed a total of 0 changes.

yosys> opt_merge

3.75.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.75.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.75.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..
Removed 0 unused cells and 5345 unused wires.
<suppressed ~8 debug messages>

yosys> opt_expr

3.75.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.

3.75.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.75.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \key_schedule..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.75.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \key_schedule.
Performed a total of 0 changes.

yosys> opt_merge

3.75.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.75.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.75.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..

yosys> opt_expr

3.75.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.

3.75.16. Finished OPT passes. (There is nothing left to do.)

yosys> bmuxmap

3.76. Executing BMUXMAP pass.

yosys> demuxmap

3.77. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> abc -script /home/users/temp_dir/yosys_wdUqxA/abc_tmp_1.scr

3.78. Executing ABC pass (technology mapping using ABC).

3.78.1. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Extracted 277 gates and 518 wires to a netlist network with 241 inputs and 226 outputs.

3.78.1.1. Executing ABC.
DE:   #PIs = 241  #Luts =   226  Max Lvl =   2  Avg Lvl =   1.46  [   0.25 sec. at Pass 0]
DE:   #PIs = 241  #Luts =   226  Max Lvl =   2  Avg Lvl =   1.46  [   0.85 sec. at Pass 1]
DE:   #PIs = 241  #Luts =   226  Max Lvl =   2  Avg Lvl =   1.46  [   0.39 sec. at Pass 2]
DE:   #PIs = 241  #Luts =   226  Max Lvl =   2  Avg Lvl =   1.46  [   1.21 sec. at Pass 3]
DE:   #PIs = 241  #Luts =   226  Max Lvl =   2  Avg Lvl =   1.46  [   0.43 sec. at Pass 4]
DE:   #PIs = 241  #Luts =   226  Max Lvl =   2  Avg Lvl =   1.46  [   0.77 sec. at Pass 5]
DE:   #PIs = 241  #Luts =   226  Max Lvl =   2  Avg Lvl =   1.46  [   0.70 sec. at Pass 6]
DE:   #PIs = 241  #Luts =   226  Max Lvl =   2  Avg Lvl =   1.46  [   0.47 sec. at Pass 7]

yosys> opt_expr

3.79. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.

yosys> opt_merge -nomux

3.80. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.81. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \key_schedule..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.82. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \key_schedule.
Performed a total of 0 changes.

yosys> opt_merge

3.83. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
Removed a total of 0 cells.

yosys> opt_share

3.84. Executing OPT_SHARE pass.

yosys> opt_dff

3.85. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.86. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..
Removed 0 unused cells and 519 unused wires.
<suppressed ~2 debug messages>

yosys> opt_expr

3.87. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.
MAX OPT ITERATION = 1

yosys> opt_ffinv

3.88. Executing OPT_FFINV pass (push inverters through FFs).
Discovering LUTs.
Pushed 0 inverters.

yosys> stat

3.89. Printing statistics.

=== key_schedule ===

   Number of wires:                310
   Number of wire bits:            851
   Number of public wires:          28
   Number of public wire bits:     569
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                489
     $_SDFFE_PP0P_                 263
     $lut                          226


yosys> shregmap -minlen 8 -maxlen 20

3.90. Executing SHREGMAP pass (map shift registers).
Converted 0 dff cells into 0 shift registers.

yosys> dfflegalize -cell $_DFF_?_ 0 -cell $_DFF_???_ 0 -cell $_DFFE_????_ 0 -cell $_DFFSR_???_ 0 -cell $_DFFSRE_????_ 0 -cell $_DLATCHSR_PPP_ 0

3.91. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

yosys> stat

3.92. Printing statistics.

=== key_schedule ===

   Number of wires:                836
   Number of wire bits:           1377
   Number of public wires:          28
   Number of public wire bits:     569
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1015
     $_DFF_P_                      263
     $_MUX_                        526
     $lut                          226


yosys> techmap -map +/techmap.v -map +/rapidsilicon/genesis/ffs_map.v

3.93. Executing TECHMAP pass (map to technology primitives).

3.93.1. Executing Verilog-2005 frontend: /home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.93.2. Executing Verilog-2005 frontend: /home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/ffs_map.v
Parsing Verilog input from `/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/ffs_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP0N_'.
Generating RTLIL representation for module `\$_DFFE_PN0P_'.
Generating RTLIL representation for module `\$_DFFE_PN0N_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP1N_'.
Generating RTLIL representation for module `\$_DFFE_PN1P_'.
Generating RTLIL representation for module `\$_DFFE_PN1N_'.
Generating RTLIL representation for module `\$_DFFSR_PPP_'.
Generating RTLIL representation for module `\$_DFFSR_PNP_'.
Generating RTLIL representation for module `\$_DFFSR_PNN_'.
Generating RTLIL representation for module `\$_DFFSR_PPN_'.
Generating RTLIL representation for module `\$_DFFSR_NPP_'.
Generating RTLIL representation for module `\$_DFFSR_NNP_'.
Generating RTLIL representation for module `\$_DFFSR_NNN_'.
Generating RTLIL representation for module `\$_DFFSR_NPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PNPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPNP_'.
Generating RTLIL representation for module `\$_DFFSRE_PNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PNPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PPNN_'.
Generating RTLIL representation for module `\$_DFFSRE_PNNN_'.
Generating RTLIL representation for module `\$_DLATCHSR_PPP_'.
Generating RTLIL representation for module `\$_DLATCHSR_NPP_'.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP0N_'.
Generating RTLIL representation for module `\$_DFFE_NN0P_'.
Generating RTLIL representation for module `\$_DFFE_NN0N_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_NP1N_'.
Generating RTLIL representation for module `\$_DFFE_NN1P_'.
Generating RTLIL representation for module `\$_DFFE_NN1N_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNPP_'.
Generating RTLIL representation for module `\$_DFFSRE_NPNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPN_'.
Generating RTLIL representation for module `\$_DFFSRE_NNPN_'.
Generating RTLIL representation for module `\$_DFFSRE_NPNN_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNN_'.
Generating RTLIL representation for module `\$__SHREG_DFF_P_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PN0_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NN0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFF_PN1_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_NN1_'.
Successfully finished Verilog frontend.

3.93.3. Continuing TECHMAP pass.
Using template \$_DFF_P_ for cells of type $_DFF_P_.
Using extmapper simplemap for cells of type $lut.
No more expansions possible.
<suppressed ~625 debug messages>

yosys> opt_expr -mux_undef

3.94. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.
<suppressed ~990 debug messages>

yosys> simplemap

3.95. Executing SIMPLEMAP pass (map simple cells to gate primitives).

yosys> opt_expr

3.96. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.

yosys> opt_merge

3.97. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
<suppressed ~183 debug messages>
Removed a total of 61 cells.

yosys> opt_dff -nodffe -nosdff

3.98. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.99. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..
Removed 0 unused cells and 1280 unused wires.
<suppressed ~1 debug messages>

yosys> opt -nodffe -nosdff

3.100. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.100.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.
<suppressed ~2 debug messages>

yosys> opt_merge -nomux

3.100.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.100.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \key_schedule..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.100.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \key_schedule.
Performed a total of 0 changes.

yosys> opt_merge

3.100.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.100.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.100.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..

yosys> opt_expr

3.100.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.

3.100.9. Finished OPT passes. (There is nothing left to do.)

yosys> abc -script /home/users/temp_dir/yosys_wdUqxA/abc_tmp_2.scr

3.101. Executing ABC pass (technology mapping using ABC).

3.101.1. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Extracted 877 gates and 1273 wires to a netlist network with 394 inputs and 264 outputs.

3.101.1.1. Executing ABC.
DE:   #PIs = 394  #Luts =   280  Max Lvl =   3  Avg Lvl =   2.00  [   0.33 sec. at Pass 0]
DE:   #PIs = 394  #Luts =   277  Max Lvl =   4  Avg Lvl =   2.02  [   5.38 sec. at Pass 1]
DE:   #PIs = 394  #Luts =   277  Max Lvl =   4  Avg Lvl =   2.02  [   1.45 sec. at Pass 2]
DE:   #PIs = 394  #Luts =   276  Max Lvl =   3  Avg Lvl =   2.02  [   1.80 sec. at Pass 3]
DE:   #PIs = 394  #Luts =   276  Max Lvl =   3  Avg Lvl =   2.02  [   1.44 sec. at Pass 4]
DE:   #PIs = 394  #Luts =   276  Max Lvl =   3  Avg Lvl =   2.02  [   1.68 sec. at Pass 5]
DE:   #PIs = 394  #Luts =   276  Max Lvl =   3  Avg Lvl =   2.02  [   1.42 sec. at Pass 6]
DE:   #PIs = 394  #Luts =   276  Max Lvl =   3  Avg Lvl =   2.02  [   1.05 sec. at Pass 7]
DE:   #PIs = 394  #Luts =   276  Max Lvl =   3  Avg Lvl =   2.02  [   0.44 sec. at Pass 8]

yosys> opt_expr

3.102. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.

yosys> opt_merge -nomux

3.103. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.104. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \key_schedule..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.105. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \key_schedule.
Performed a total of 0 changes.

yosys> opt_merge

3.106. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
Removed a total of 0 cells.

yosys> opt_share

3.107. Executing OPT_SHARE pass.

yosys> opt_dff

3.108. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.109. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..
Removed 0 unused cells and 1253 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.110. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.
MAX OPT ITERATION = 1

yosys> hierarchy -check

3.111. Executing HIERARCHY pass (managing design hierarchy).

3.111.1. Analyzing design hierarchy..
Top module:  \key_schedule

3.111.2. Analyzing design hierarchy..
Top module:  \key_schedule
Removed 0 unused modules.

yosys> stat

3.112. Printing statistics.

=== key_schedule ===

   Number of wires:                360
   Number of wire bits:            901
   Number of public wires:          28
   Number of public wire bits:     569
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                539
     $lut                          276
     dffsre                        263


yosys> opt_clean -purge

3.113. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..
Removed 0 unused cells and 18 unused wires.
<suppressed ~18 debug messages>

yosys> write_verilog -noattr -nohex synthesized.v

3.114. Executing Verilog backend.
Dumping module `\key_schedule'.

End of script. Logfile hash: 6c3520fde5, CPU: user 4.99s system 0.17s, MEM: 27.68 MB peak
Yosys 0.18+10 (git sha1 7a7a25778, gcc 9.1.0 -fPIC -Os)
Time spent: 91% 6x abc (47 sec), 2% 19x opt_dff (1 sec), ...
real 51.82
user 43.68
sys 8.33
