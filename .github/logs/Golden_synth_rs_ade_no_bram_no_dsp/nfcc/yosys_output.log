
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys-Verific 0.0.49
 Yosys 0.18+10 (git sha1 7a7a25778, gcc 9.1.0 -fPIC -Os)


-- Executing script file `yosys.ys' --
echo on

yosys> plugin -i synth-rs

yosys> read -verific

yosys> read -incdir .

yosys> verific -vlog-incdir .

1. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific May22_SW_Release, released at Wed Jun  1 05:39:28 2022.

yosys> verilog_defaults -add -I.

yosys> read -vhdl kasumi.vhdl keyschedule.vhdl sbox.vhdl

yosys> verific -vhdl kasumi.vhdl keyschedule.vhdl sbox.vhdl

2. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific May22_SW_Release, released at Wed Jun  1 05:39:28 2022.
VERIFIC-INFO [VHDL-1504] default VHDL library search path is now "/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008"
VERIFIC-COMMENT [VHDL-1481] Analyzing VHDL file 'kasumi.vhdl'
VERIFIC-COMMENT [VHDL-1493] Restoring VHDL unit 'ieee.std_logic_1164' from file '/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008/ieee/std_logic_1164.vdb'
VERIFIC-COMMENT [VHDL-1493] Restoring VHDL unit 'std.standard' from file '/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008/std/standard.vdb'
VERIFIC-COMMENT [VHDL-1493] Restoring VHDL unit 'std.textio' from file '/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008/std/textio.vdb'
VERIFIC-COMMENT [VHDL-1493] Restoring VHDL unit 'ieee.std_logic_unsigned' from file '/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008/ieee/std_logic_unsigned.vdb'
VERIFIC-COMMENT [VHDL-1493] Restoring VHDL unit 'ieee.std_logic_arith' from file '/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008/ieee/std_logic_arith.vdb'
VERIFIC-INFO [VHDL-1012] kasumi.vhdl:34: analyzing entity 'kasumi'
VERIFIC-INFO [VHDL-1010] kasumi.vhdl:58: analyzing architecture 'phy'
VERIFIC-COMMENT [VHDL-1481] Analyzing VHDL file 'keyschedule.vhdl'
VERIFIC-INFO [VHDL-1012] keyschedule.vhdl:34: analyzing entity 'keyschedule'
VERIFIC-INFO [VHDL-1010] keyschedule.vhdl:49: analyzing architecture 'phy'
VERIFIC-COMMENT [VHDL-1481] Analyzing VHDL file 'sbox.vhdl'
VERIFIC-INFO [VHDL-1012] sbox.vhdl:34: analyzing entity 'sbox'
VERIFIC-INFO [VHDL-1010] sbox.vhdl:43: analyzing architecture 'phy'

yosys> synth_rs -top kasumi -tech genesis -goal area -de -no_dsp -no_bram -verilog synthesized.v

3. Executing synth_rs pass: v0.4.58

yosys> read_verilog -lib -specify -nomem2reg +/rapidsilicon/common/cells_sim.v +/rapidsilicon/genesis/cells_sim.v

3.1. Executing Verilog-2005 frontend: /home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v
Parsing Verilog input from `/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\inv'.
Generating RTLIL representation for module `\buff'.
Generating RTLIL representation for module `\logic_0'.
Generating RTLIL representation for module `\logic_1'.
Generating RTLIL representation for module `\gclkbuff'.
Successfully finished Verilog frontend.

3.2. Executing Verilog-2005 frontend: /home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/cells_sim.v
Parsing Verilog input from `/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\dffsre'.
Generating RTLIL representation for module `\dffnsre'.
Generating RTLIL representation for module `\latchsre'.
Generating RTLIL representation for module `\latchnsre'.
Generating RTLIL representation for module `\io_scff'.
Generating RTLIL representation for module `\scff'.
Generating RTLIL representation for module `\sh_dff'.
Generating RTLIL representation for module `\adder_carry'.
Generating RTLIL representation for module `\sdffr'.
Generating RTLIL representation for module `\sdffs'.
Generating RTLIL representation for module `\TDP_BRAM18'.
Generating RTLIL representation for module `\TDP36K'.
Generating RTLIL representation for module `\RS_DSP1'.
Generating RTLIL representation for module `\RS_DSP2'.
Generating RTLIL representation for module `\RS_DSP2_MULT'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGIN_REGOUT'.
Generating RTLIL representation for module `\dsp_t1_sim'.
Generating RTLIL representation for module `\dsp_t1_20x18x64'.
Generating RTLIL representation for module `\dsp_t1_10x9x32'.
Successfully finished Verilog frontend.

yosys> hierarchy -check -top kasumi

3.3. Executing HIERARCHY pass (managing design hierarchy).
VERIFIC-INFO [VHDL-1067] kasumi.vhdl:34: processing 'kasumi(phy)'
VERIFIC-INFO [VHDL-1067] sbox.vhdl:34: processing 'sbox(phy)'
VERIFIC-INFO [VHDL-1067] keyschedule.vhdl:34: processing 'keyschedule(phy)'
Importing module kasumi.
Importing module keyschedule(phy).
Importing module sbox(phy).

3.3.1. Analyzing design hierarchy..
Top module:  \kasumi
Used module:     \keyschedule(phy)
Used module:     \sbox(phy)

3.3.2. Analyzing design hierarchy..
Top module:  \kasumi
Used module:     \keyschedule(phy)
Used module:     \sbox(phy)
Removed 0 unused modules.

yosys> proc

3.4. Executing PROC pass (convert processes to netlists).

yosys> proc_clean

3.4.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> proc_rmdead

3.4.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

yosys> proc_prune

3.4.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

yosys> proc_init

3.4.4. Executing PROC_INIT pass (extract init attributes).

yosys> proc_arst

3.4.5. Executing PROC_ARST pass (detect async resets in processes).

yosys> proc_rom

3.4.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

yosys> proc_mux

3.4.7. Executing PROC_MUX pass (convert decision trees to multiplexers).

yosys> proc_dlatch

3.4.8. Executing PROC_DLATCH pass (convert process syncs to latches).

yosys> proc_dff

3.4.9. Executing PROC_DFF pass (convert process syncs to FFs).

yosys> proc_memwr

3.4.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

yosys> proc_clean

3.4.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> opt_expr -keepdc

3.4.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module sbox(phy).
Optimizing module keyschedule(phy).
<suppressed ~3 debug messages>
Optimizing module kasumi.
<suppressed ~3 debug messages>

yosys> bmuxmap

3.5. Executing BMUXMAP pass.

yosys> demuxmap

3.6. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> flatten

3.7. Executing FLATTEN pass (flatten design).
Deleting now unused module keyschedule(phy).
Deleting now unused module sbox(phy).
<suppressed ~3 debug messages>

yosys> bmuxmap

3.8. Executing BMUXMAP pass.

yosys> demuxmap

3.9. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> tribuf -logic

3.10. Executing TRIBUF pass.

yosys> deminout

3.11. Executing DEMINOUT pass (demote inout ports to input or output).

yosys> opt_expr

3.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module kasumi.

yosys> opt_clean

3.13. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \kasumi..
Removed 0 unused cells and 119 unused wires.
<suppressed ~63 debug messages>

yosys> check

3.14. Executing CHECK pass (checking for obvious problems).
Checking module kasumi...
Warning: found logic loop in module kasumi:
    cell $verific$and_171$kasumi.vhdl:188$149 ($and)
    cell $verific$or_31$kasumi.vhdl:188$146 ($or)
    cell $verific$or_33$kasumi.vhdl:188$148 ($or)
    wire $verific$n441$30 [0]
    wire $verific$n447$32 [0]
    wire \c3b_cr [1]
Warning: found logic loop in module kasumi:
    cell $verific$and_171$kasumi.vhdl:188$149 ($and)
    cell $verific$or_31$kasumi.vhdl:188$146 ($or)
    cell $verific$or_33$kasumi.vhdl:188$148 ($or)
    wire $verific$n441$30 [1]
    wire $verific$n447$32 [0]
    wire \c3b_cr [1]
Warning: found logic loop in module kasumi:
    cell $verific$and_171$kasumi.vhdl:188$149 ($and)
    cell $verific$or_31$kasumi.vhdl:188$146 ($or)
    cell $verific$or_33$kasumi.vhdl:188$148 ($or)
    wire $verific$n444$31 [0]
    wire $verific$n447$32 [0]
    wire \c3b_cr [1]
Warning: found logic loop in module kasumi:
    cell $verific$and_171$kasumi.vhdl:188$149 ($and)
    cell $verific$or_31$kasumi.vhdl:188$146 ($or)
    cell $verific$or_33$kasumi.vhdl:188$148 ($or)
    wire $verific$n444$31 [1]
    wire $verific$n447$32 [0]
    wire \c3b_cr [1]
Warning: found logic loop in module kasumi:
    cell $verific$and_32$kasumi.vhdl:188$147 ($and)
    cell $verific$or_33$kasumi.vhdl:188$148 ($or)
    wire $verific$n450$33 [0]
    wire \c3b_cr [1]
Warning: found logic loop in module kasumi:
    cell $verific$xor_168$kasumi.vhdl:311$200 ($xor)
    wire \FI [0]
Warning: found logic loop in module kasumi:
    cell $verific$xor_168$kasumi.vhdl:311$200 ($xor)
    wire \FI [1]
Warning: found logic loop in module kasumi:
    cell $verific$xor_168$kasumi.vhdl:311$200 ($xor)
    wire \FI [2]
Warning: found logic loop in module kasumi:
    cell $verific$xor_168$kasumi.vhdl:311$200 ($xor)
    wire \FI [3]
Warning: found logic loop in module kasumi:
    cell $verific$xor_168$kasumi.vhdl:311$200 ($xor)
    wire \FI [4]
Warning: found logic loop in module kasumi:
    cell $verific$xor_168$kasumi.vhdl:311$200 ($xor)
    wire \FI [5]
Warning: found logic loop in module kasumi:
    cell $verific$xor_168$kasumi.vhdl:311$200 ($xor)
    wire \FI [6]
Found and reported 12 problems.

yosys> opt -nodffe -nosdff

3.15. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module kasumi.

yosys> opt_merge -nomux

3.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\kasumi'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

yosys> opt_muxtree

3.15.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \kasumi..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux $verific$mux_95$kasumi.vhdl:269$173.
    dead port 1/2 on $mux $verific$mux_96$kasumi.vhdl:269$174.
Removed 2 multiplexer ports.
<suppressed ~17 debug messages>

yosys> opt_reduce

3.15.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \kasumi.
Performed a total of 0 changes.

yosys> opt_merge

3.15.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\kasumi'.
<suppressed ~24 debug messages>
Removed a total of 8 cells.

yosys> opt_dff -nodffe -nosdff

3.15.6. Executing OPT_DFF pass (perform DFF optimizations).
Removing never-active async load on $verific$rnd_reg$kasumi.vhdl:341$218 ($aldff) from module kasumi.
Removing never-active async load on $verific$ireg1_reg$kasumi.vhdl:329$209 ($aldff) from module kasumi.
Removing never-active async load on $verific$iptt_reg$kasumi.vhdl:173$139 ($aldff) from module kasumi.
Removing never-active async load on $verific$ipt_reg$kasumi.vhdl:173$138 ($aldff) from module kasumi.
Removing never-active async load on $verific$c3b_reg$kasumi.vhdl:198$154 ($aldff) from module kasumi.
Removing never-active async load on $verific$FL_reg$kasumi.vhdl:287$187 ($aldff) from module kasumi.
Removing never-active async load on $flatten\roundkey.$verific$keyreg2_reg$keyschedule.vhdl:111$283 ($aldff) from module kasumi.
Removing never-active async load on $flatten\roundkey.$verific$keyreg1_reg$keyschedule.vhdl:111$282 ($aldff) from module kasumi.

yosys> opt_clean

3.15.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \kasumi..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.15.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module kasumi.
<suppressed ~2 debug messages>

3.15.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.15.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \kasumi..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~19 debug messages>

yosys> opt_reduce

3.15.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \kasumi.
Performed a total of 0 changes.

yosys> opt_merge

3.15.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\kasumi'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.15.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.15.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \kasumi..

yosys> opt_expr

3.15.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module kasumi.

3.15.16. Finished OPT passes. (There is nothing left to do.)

yosys> fsm -encoding binary

3.16. Executing FSM pass (extract and optimize FSM).

yosys> fsm_detect

3.16.1. Executing FSM_DETECT pass (finding FSMs in design).

yosys> fsm_extract

3.16.2. Executing FSM_EXTRACT pass (extracting FSM from design).

yosys> fsm_opt

3.16.3. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> opt_clean

3.16.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \kasumi..

yosys> fsm_opt

3.16.5. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> fsm_recode -encoding binary

3.16.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

yosys> fsm_info

3.16.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

yosys> fsm_map

3.16.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

yosys> opt -sat

3.17. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.17.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module kasumi.

yosys> opt_merge -nomux

3.17.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\kasumi'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.17.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \kasumi..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~19 debug messages>

yosys> opt_reduce

3.17.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \kasumi.
Performed a total of 0 changes.

yosys> opt_merge

3.17.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\kasumi'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.17.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $verific$vld_reg$kasumi.vhdl:354$223 ($dff) from module kasumi (D = $verific$n2381$22, Q = \vld, rval = 1'0).
Adding SRST signal on $verific$rnd_reg$kasumi.vhdl:341$218 ($dff) from module kasumi (D = $verific$n2368$108, Q = \rnd, rval = 2'00).
Adding EN signal on $auto$ff.cc:262:slice$616 ($sdff) from module kasumi (D = $verific$n2362$106, Q = \rnd).
Adding SRST signal on $verific$ireg1_reg$kasumi.vhdl:329$209 ($dff) from module kasumi (D = $verific$n2157$102, Q = \ireg1, rval = 64'0000000000000000000000000000000000000000000000000000000000000000).
Adding EN signal on $auto$ff.cc:262:slice$618 ($sdff) from module kasumi (D = $verific$n2157$102, Q = \ireg1).
Adding SRST signal on $verific$iptt_reg$kasumi.vhdl:173$139 ($dff) from module kasumi (D = \pt, Q = \iptt, rval = 0).
Adding SRST signal on $verific$ipt_reg$kasumi.vhdl:173$138 ($dff) from module kasumi (D = \iptt, Q = \ipt, rval = 0).
Adding SRST signal on $verific$ildptt_reg$kasumi.vhdl:173$137 ($dff) from module kasumi (D = \ldpt, Q = \ildptt, rval = 1'0).
Adding SRST signal on $verific$ildpt_reg$kasumi.vhdl:173$136 ($dff) from module kasumi (D = \ildptt, Q = \ildpt, rval = 1'0).
Adding SRST signal on $verific$even_reg$kasumi.vhdl:184$145 ($dff) from module kasumi (D = $verific$n431$12, Q = \even, rval = 1'0).
Adding EN signal on $auto$ff.cc:262:slice$626 ($sdff) from module kasumi (D = $verific$n429$10, Q = \even).
Adding SRST signal on $verific$c3b_reg$kasumi.vhdl:198$154 ($dff) from module kasumi (D = $verific$n467$37, Q = \c3b, rval = 3'000).
Adding SRST signal on $verific$FL_reg$kasumi.vhdl:287$187 ($dff) from module kasumi (D = { \LFL \RFL }, Q = \FL, rval = 0).
Adding SRST signal on $flatten\roundkey.$verific$keyreg2_reg$keyschedule.vhdl:111$283 ($dff) from module kasumi (D = $flatten\roundkey.$verific$n1183$239, Q = \roundkey.keyreg2, rval = 128'00000001001000110100010101100111100010011010101111001101111011111111111011011100101110101001100001110110010101000011001000010000).
Adding EN signal on $auto$ff.cc:262:slice$630 ($sdff) from module kasumi (D = { \roundkey.keyreg2 [95:0] \roundkey.keyreg2 [127:96] }, Q = \roundkey.keyreg2).
Adding SRST signal on $flatten\roundkey.$verific$keyreg1_reg$keyschedule.vhdl:111$282 ($dff) from module kasumi (D = $flatten\roundkey.$verific$n925$237, Q = \roundkey.keyreg1, rval = 128'00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000).
Adding EN signal on $auto$ff.cc:262:slice$634 ($sdff) from module kasumi (D = $flatten\roundkey.$verific$n925$237, Q = \roundkey.keyreg1).

yosys> opt_clean

3.17.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \kasumi..
Removed 16 unused cells and 16 unused wires.
<suppressed ~17 debug messages>

yosys> opt_expr

3.17.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module kasumi.
<suppressed ~2 debug messages>

3.17.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.17.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \kasumi..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~10 debug messages>

yosys> opt_reduce

3.17.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \kasumi.
Performed a total of 0 changes.

yosys> opt_merge

3.17.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\kasumi'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.17.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.17.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \kasumi..

yosys> opt_expr

3.17.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module kasumi.

3.17.16. Finished OPT passes. (There is nothing left to do.)

yosys> wreduce -keepdc

3.18. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 2) from port B of cell kasumi.$verific$and_32$kasumi.vhdl:188$147 ($and).
Removed top 2 bits (of 3) from port A of cell kasumi.$verific$xor_36$kasumi.vhdl:196$150 ($xor).
Removed top 2 bits (of 9) from port A of cell kasumi.$verific$xor_119$kasumi.vhdl:305$192 ($xor).
Removed top 1 bits (of 2) from port A of cell kasumi.$verific$xor_144$kasumi.vhdl:339$213 ($xor).

yosys> peepopt

3.19. Executing PEEPOPT pass (run peephole optimizers).

yosys> opt_clean

3.20. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \kasumi..

yosys> bmuxmap

3.21. Executing BMUXMAP pass.

yosys> demuxmap

3.22. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> alumacc

3.23. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module kasumi:
  created 0 $alu and 0 $macc cells.

yosys> opt_expr

3.24. Executing OPT_EXPR pass (perform const folding).
Optimizing module kasumi.

yosys> opt_merge -nomux

3.25. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\kasumi'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.26. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \kasumi..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~10 debug messages>

yosys> opt_reduce

3.27. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \kasumi.
Performed a total of 0 changes.

yosys> opt_merge

3.28. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\kasumi'.
Removed a total of 0 cells.

yosys> opt_share

3.29. Executing OPT_SHARE pass.

yosys> opt_dff

3.30. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.31. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \kasumi..

yosys> opt_expr

3.32. Executing OPT_EXPR pass (perform const folding).
Optimizing module kasumi.
MAX OPT ITERATION = 1

yosys> stat

3.33. Printing statistics.

=== kasumi ===

   Number of wires:                364
   Number of wire bits:           3310
   Number of public wires:          77
   Number of public wire bits:    1360
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                341
     $and                          146
     $eq                             3
     $mux                           43
     $not                            5
     $or                             4
     $reduce_bool                    2
     $reduce_or                      1
     $sdff                           7
     $sdffe                          5
     $xor                          125


yosys> memory -nomap

3.34. Executing MEMORY pass.

yosys> opt_mem

3.34.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

yosys> opt_mem_priority

3.34.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

yosys> opt_mem_feedback

3.34.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

yosys> memory_bmux2rom

3.34.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

yosys> memory_dff

3.34.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

yosys> opt_clean

3.34.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \kasumi..

yosys> memory_share

3.34.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

yosys> opt_mem_widen

3.34.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

yosys> opt_clean

3.34.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \kasumi..

yosys> memory_collect

3.34.10. Executing MEMORY_COLLECT pass (generating $mem cells).

yosys> stat

3.35. Printing statistics.

=== kasumi ===

   Number of wires:                364
   Number of wire bits:           3310
   Number of public wires:          77
   Number of public wire bits:    1360
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                341
     $and                          146
     $eq                             3
     $mux                           43
     $not                            5
     $or                             4
     $reduce_bool                    2
     $reduce_or                      1
     $sdff                           7
     $sdffe                          5
     $xor                          125


yosys> muxpack

3.36. Executing MUXPACK pass ($mux cell cascades to $pmux).
Converted 0 (p)mux cells into 0 pmux cells.
<suppressed ~43 debug messages>

yosys> opt_clean

3.37. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \kasumi..

yosys> pmuxtree

3.38. Executing PMUXTREE pass.

yosys> muxpack

3.39. Executing MUXPACK pass ($mux cell cascades to $pmux).
Converted 0 (p)mux cells into 0 pmux cells.
<suppressed ~43 debug messages>

yosys> memory_map

3.40. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

yosys> stat

3.41. Printing statistics.

=== kasumi ===

   Number of wires:                364
   Number of wire bits:           3310
   Number of public wires:          77
   Number of public wire bits:    1360
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                341
     $and                          146
     $eq                             3
     $mux                           43
     $not                            5
     $or                             4
     $reduce_bool                    2
     $reduce_or                      1
     $sdff                           7
     $sdffe                          5
     $xor                          125


yosys> techmap -map +/techmap.v -map +/rapidsilicon/genesis/arith_map.v

3.42. Executing TECHMAP pass (map to technology primitives).

3.42.1. Executing Verilog-2005 frontend: /home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.42.2. Executing Verilog-2005 frontend: /home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/arith_map.v
Parsing Verilog input from `/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_rs_alu'.
Successfully finished Verilog frontend.

3.42.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $sdff.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $sdffe.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $reduce_bool.
No more expansions possible.
<suppressed ~412 debug messages>

yosys> stat

3.43. Printing statistics.

=== kasumi ===

   Number of wires:                380
   Number of wire bits:           3339
   Number of public wires:          77
   Number of public wire bits:    1360
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               2426
     $_AND_                        319
     $_MUX_                        993
     $_NOT_                         22
     $_OR_                          34
     $_SDFFE_PP0P_                 259
     $_SDFFE_PP1P_                  64
     $_SDFF_PP0_                   102
     $_XOR_                        633


yosys> opt_expr

3.44. Executing OPT_EXPR pass (perform const folding).
Optimizing module kasumi.
<suppressed ~357 debug messages>

yosys> opt_merge -nomux

3.45. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\kasumi'.
<suppressed ~411 debug messages>
Removed a total of 137 cells.

yosys> opt_muxtree

3.46. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \kasumi..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.47. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \kasumi.
Performed a total of 0 changes.

yosys> opt_merge

3.48. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\kasumi'.
Removed a total of 0 cells.

yosys> opt_share

3.49. Executing OPT_SHARE pass.

yosys> opt_dff

3.50. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.51. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \kasumi..
Removed 0 unused cells and 43 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.52. Executing OPT_EXPR pass (perform const folding).
Optimizing module kasumi.
MAX OPT ITERATION = 1

yosys> opt -fast -full

3.53. Executing OPT pass (performing simple optimizations).

yosys> opt_expr -full

3.53.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module kasumi.
<suppressed ~192 debug messages>

yosys> opt_merge

3.53.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\kasumi'.
Removed a total of 0 cells.

yosys> opt_dff

3.53.3. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.53.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \kasumi..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

3.53.5. Finished fast OPT passes.

yosys> techmap -map +/techmap.v

3.54. Executing TECHMAP pass (map to technology primitives).

3.54.1. Executing Verilog-2005 frontend: /home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.54.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~71 debug messages>

yosys> opt -sat

3.55. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.55.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module kasumi.

yosys> opt_merge -nomux

3.55.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\kasumi'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.55.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \kasumi..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.55.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \kasumi.
Performed a total of 0 changes.

yosys> opt_merge

3.55.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\kasumi'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.55.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.55.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \kasumi..

yosys> opt_expr

3.55.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module kasumi.

3.55.9. Finished OPT passes. (There is nothing left to do.)

yosys> abc -dff

3.56. Executing ABC pass (technology mapping using ABC).

3.56.1. Summary of detected clock domains:
  19 cells in clk=\clk, en=!$auto$simplemap.cc:257:simplemap_eqne$766, arst={ }, srst=\rst
  458 cells in clk=\clk, en={ }, arst={ }, srst=\c3b_rst
  228 cells in clk=\clk, en=!$auto$simplemap.cc:128:simplemap_reduce$1286, arst={ }, srst=$auto$opt_dff.cc:253:combine_resets$631
  258 cells in clk=\clk, en=$auto$opt_dff.cc:194:make_patterns_logic$636, arst={ }, srst=\rst
  999 cells in clk=\clk, en={ }, arst={ }, srst=\rst
  5 cells in clk=\clk, en=!$auto$simplemap.cc:128:simplemap_reduce$1286, arst={ }, srst=\rst
  112 cells in clk=\clk, en=$auto$opt_dff.cc:194:make_patterns_logic$620, arst={ }, srst=\rst

3.56.2. Extracting gate netlist of module `\kasumi' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by !$auto$simplemap.cc:257:simplemap_eqne$766, synchronously reset by \rst
Extracted 19 gates and 53 wires to a netlist network with 34 inputs and 19 outputs.

3.56.2.1. Executing ABC.

3.56.3. Extracting gate netlist of module `\kasumi' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, synchronously reset by \c3b_rst
Extracted 458 gates and 844 wires to a netlist network with 386 inputs and 117 outputs.

3.56.3.1. Executing ABC.

3.56.4. Extracting gate netlist of module `\kasumi' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by !$auto$simplemap.cc:128:simplemap_reduce$1286, synchronously reset by $auto$opt_dff.cc:253:combine_resets$631
Extracted 228 gates and 330 wires to a netlist network with 102 inputs and 99 outputs.

3.56.4.1. Executing ABC.

3.56.5. Extracting gate netlist of module `\kasumi' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:194:make_patterns_logic$636, synchronously reset by \rst
Extracted 258 gates and 324 wires to a netlist network with 66 inputs and 129 outputs.

3.56.5.1. Executing ABC.

3.56.6. Extracting gate netlist of module `\kasumi' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, synchronously reset by \rst
Extracted 999 gates and 1248 wires to a netlist network with 248 inputs and 291 outputs.

3.56.6.1. Executing ABC.

3.56.7. Extracting gate netlist of module `\kasumi' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by !$abc$4067$auto$simplemap.cc:128:simplemap_reduce$1286, synchronously reset by \rst
Extracted 5 gates and 5 wires to a netlist network with 0 inputs and 2 outputs.

3.56.7.1. Executing ABC.

3.56.8. Extracting gate netlist of module `\kasumi' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$4558$auto$opt_dff.cc:194:make_patterns_logic$620, synchronously reset by \rst
Extracted 112 gates and 224 wires to a netlist network with 112 inputs and 112 outputs.

3.56.8.1. Executing ABC.

yosys> abc -dff

3.57. Executing ABC pass (technology mapping using ABC).

3.57.1. Summary of detected clock domains:
  197 cells in clk=\clk, en={ }, arst={ }, srst=$abc$3302$c3b_rst
  78 cells in clk=\clk, en=!$abc$4067$auto$simplemap.cc:128:simplemap_reduce$1286, arst={ }, srst=$abc$4067$auto$opt_dff.cc:253:combine_resets$631
  1130 cells in clk=\clk, en={ }, arst={ }, srst=\rst
  247 cells in clk=\clk, en=!$abc$3280$auto$simplemap.cc:257:simplemap_eqne$766, arst={ }, srst=\rst
  8 cells in clk=\clk, en=!$abc$4067$auto$simplemap.cc:128:simplemap_reduce$1286, arst={ }, srst=\rst
  281 cells in clk=\clk, en=$abc$4172$auto$opt_dff.cc:194:make_patterns_logic$636, arst={ }, srst=\rst
  240 cells in clk=\clk, en=$abc$4558$auto$opt_dff.cc:194:make_patterns_logic$620, arst={ }, srst=\rst

3.57.2. Extracting gate netlist of module `\kasumi' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, synchronously reset by $abc$3302$c3b_rst
Extracted 197 gates and 408 wires to a netlist network with 211 inputs and 166 outputs.

3.57.2.1. Executing ABC.

3.57.3. Extracting gate netlist of module `\kasumi' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by !$abc$4067$auto$simplemap.cc:128:simplemap_reduce$1286, synchronously reset by $abc$4067$auto$opt_dff.cc:253:combine_resets$631
Extracted 78 gates and 154 wires to a netlist network with 76 inputs and 76 outputs.

3.57.3.1. Executing ABC.

3.57.4. Extracting gate netlist of module `\kasumi' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, synchronously reset by \rst
Extracted 1130 gates and 1343 wires to a netlist network with 213 inputs and 167 outputs.

3.57.4.1. Executing ABC.

3.57.5. Extracting gate netlist of module `\kasumi' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by !$abc$3280$auto$simplemap.cc:257:simplemap_eqne$766, synchronously reset by \rst
Extracted 247 gates and 394 wires to a netlist network with 147 inputs and 20 outputs.

3.57.5.1. Executing ABC.

3.57.6. Extracting gate netlist of module `\kasumi' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by !$abc$4067$auto$simplemap.cc:128:simplemap_reduce$1286, synchronously reset by \rst
Extracted 8 gates and 11 wires to a netlist network with 3 inputs and 3 outputs.

3.57.6.1. Executing ABC.

3.57.7. Extracting gate netlist of module `\kasumi' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$4172$auto$opt_dff.cc:194:make_patterns_logic$636, synchronously reset by \rst
Extracted 281 gates and 349 wires to a netlist network with 68 inputs and 149 outputs.

3.57.7.1. Executing ABC.

3.57.8. Extracting gate netlist of module `\kasumi' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$6080$abc$4558$auto$opt_dff.cc:194:make_patterns_logic$620, synchronously reset by \rst
Extracted 240 gates and 388 wires to a netlist network with 148 inputs and 133 outputs.

3.57.8.1. Executing ABC.

yosys> abc -dff

3.58. Executing ABC pass (technology mapping using ABC).

3.58.1. Summary of detected clock domains:
  80 cells in clk=\clk, en=!$abc$7684$abc$4067$auto$simplemap.cc:128:simplemap_reduce$1286, arst={ }, srst=$abc$5999$abc$4067$auto$opt_dff.cc:253:combine_resets$631
  326 cells in clk=\clk, en={ }, arst={ }, srst=$abc$5794$abc$3302$c3b_rst
  6 cells in clk=\clk, en=!$abc$7684$abc$4067$auto$simplemap.cc:128:simplemap_reduce$1286, arst={ }, srst=\rst
  252 cells in clk=\clk, en=!$abc$7409$abc$3280$auto$simplemap.cc:257:simplemap_eqne$766, arst={ }, srst=\rst
  284 cells in clk=\clk, en=$abc$7693$abc$4172$auto$opt_dff.cc:194:make_patterns_logic$636, arst={ }, srst=\rst
  1156 cells in clk=\clk, en={ }, arst={ }, srst=\rst
  241 cells in clk=\clk, en=$abc$6080$abc$4558$auto$opt_dff.cc:194:make_patterns_logic$620, arst={ }, srst=\rst

3.58.2. Extracting gate netlist of module `\kasumi' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by !$abc$7684$abc$4067$auto$simplemap.cc:128:simplemap_reduce$1286, synchronously reset by $abc$5999$abc$4067$auto$opt_dff.cc:253:combine_resets$631
Extracted 80 gates and 159 wires to a netlist network with 79 inputs and 78 outputs.

3.58.2.1. Executing ABC.

3.58.3. Extracting gate netlist of module `\kasumi' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, synchronously reset by $abc$5794$abc$3302$c3b_rst
Extracted 326 gates and 663 wires to a netlist network with 337 inputs and 285 outputs.

3.58.3.1. Executing ABC.

3.58.4. Extracting gate netlist of module `\kasumi' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by !$abc$8469$abc$7684$abc$4067$auto$simplemap.cc:128:simplemap_reduce$1286, synchronously reset by \rst
Extracted 6 gates and 6 wires to a netlist network with 0 inputs and 2 outputs.

3.58.4.1. Executing ABC.

3.58.5. Extracting gate netlist of module `\kasumi' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by !$abc$7409$abc$3280$auto$simplemap.cc:257:simplemap_eqne$766, synchronously reset by \rst
Extracted 252 gates and 426 wires to a netlist network with 174 inputs and 95 outputs.

3.58.5.1. Executing ABC.

3.58.6. Extracting gate netlist of module `\kasumi' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$7693$abc$4172$auto$opt_dff.cc:194:make_patterns_logic$636, synchronously reset by \rst
Extracted 284 gates and 357 wires to a netlist network with 73 inputs and 144 outputs.

3.58.6.1. Executing ABC.

3.58.7. Extracting gate netlist of module `\kasumi' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, synchronously reset by \rst
Extracted 1156 gates and 1536 wires to a netlist network with 380 inputs and 221 outputs.

3.58.7.1. Executing ABC.

3.58.8. Extracting gate netlist of module `\kasumi' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$9542$abc$6080$abc$4558$auto$opt_dff.cc:194:make_patterns_logic$620, synchronously reset by \rst
Extracted 241 gates and 389 wires to a netlist network with 148 inputs and 133 outputs.

3.58.8.1. Executing ABC.

yosys> abc -dff

3.59. Executing ABC pass (technology mapping using ABC).

3.59.1. Summary of detected clock domains:
  70 cells in clk=\clk, en=!$abc$8469$abc$7684$abc$4067$auto$simplemap.cc:128:simplemap_reduce$1286, arst={ }, srst=$abc$8469$abc$5999$abc$4067$auto$opt_dff.cc:253:combine_resets$631
  157 cells in clk=\clk, en={ }, arst={ }, srst=$abc$8553$abc$5794$abc$3302$c3b_rst
  114 cells in clk=\clk, en=!$abc$8887$abc$7409$abc$3280$auto$simplemap.cc:257:simplemap_eqne$766, arst={ }, srst=\rst
  6 cells in clk=\clk, en=!$abc$8469$abc$7684$abc$4067$auto$simplemap.cc:128:simplemap_reduce$1286, arst={ }, srst=\rst
  1380 cells in clk=\clk, en={ }, arst={ }, srst=\rst
  363 cells in clk=\clk, en=$abc$9141$abc$7693$abc$4172$auto$opt_dff.cc:194:make_patterns_logic$636, arst={ }, srst=\rst
  262 cells in clk=\clk, en=$abc$9542$abc$6080$abc$4558$auto$opt_dff.cc:194:make_patterns_logic$620, arst={ }, srst=\rst

3.59.2. Extracting gate netlist of module `\kasumi' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by !$abc$8469$abc$7684$abc$4067$auto$simplemap.cc:128:simplemap_reduce$1286, synchronously reset by $abc$8469$abc$5999$abc$4067$auto$opt_dff.cc:253:combine_resets$631
Extracted 70 gates and 139 wires to a netlist network with 69 inputs and 68 outputs.

3.59.2.1. Executing ABC.

3.59.3. Extracting gate netlist of module `\kasumi' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, synchronously reset by $abc$8553$abc$5794$abc$3302$c3b_rst
Extracted 157 gates and 311 wires to a netlist network with 154 inputs and 133 outputs.

3.59.3.1. Executing ABC.

3.59.4. Extracting gate netlist of module `\kasumi' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by !$abc$8887$abc$7409$abc$3280$auto$simplemap.cc:257:simplemap_eqne$766, synchronously reset by \rst
Extracted 114 gates and 204 wires to a netlist network with 90 inputs and 53 outputs.

3.59.4.1. Executing ABC.

3.59.5. Extracting gate netlist of module `\kasumi' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by !$abc$11174$abc$8469$abc$7684$abc$4067$auto$simplemap.cc:128:simplemap_reduce$1286, synchronously reset by \rst
Extracted 6 gates and 6 wires to a netlist network with 0 inputs and 2 outputs.

3.59.5.1. Executing ABC.

3.59.6. Extracting gate netlist of module `\kasumi' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, synchronously reset by \rst
Extracted 1380 gates and 1758 wires to a netlist network with 378 inputs and 223 outputs.

3.59.6.1. Executing ABC.

3.59.7. Extracting gate netlist of module `\kasumi' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$9141$abc$7693$abc$4172$auto$opt_dff.cc:194:make_patterns_logic$636, synchronously reset by \rst
Extracted 363 gates and 468 wires to a netlist network with 105 inputs and 172 outputs.

3.59.7.1. Executing ABC.

3.59.8. Extracting gate netlist of module `\kasumi' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$11530$abc$9542$abc$6080$abc$4558$auto$opt_dff.cc:194:make_patterns_logic$620, synchronously reset by \rst
Extracted 262 gates and 433 wires to a netlist network with 171 inputs and 135 outputs.

3.59.8.1. Executing ABC.

yosys> opt_ffinv

3.60. Executing OPT_FFINV pass (push inverters through FFs).
Discovering LUTs.
Pushed 0 inverters.

yosys> opt -sat

3.61. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.61.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module kasumi.
<suppressed ~13 debug messages>

yosys> opt_merge -nomux

3.61.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\kasumi'.
<suppressed ~9 debug messages>
Removed a total of 3 cells.

yosys> opt_muxtree

3.61.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \kasumi..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.61.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \kasumi.
Performed a total of 0 changes.

yosys> opt_merge

3.61.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\kasumi'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.61.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.61.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \kasumi..
Removed 0 unused cells and 12616 unused wires.
<suppressed ~30 debug messages>

yosys> opt_expr

3.61.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module kasumi.

3.61.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.61.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \kasumi..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.61.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \kasumi.
Performed a total of 0 changes.

yosys> opt_merge

3.61.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\kasumi'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.61.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.61.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \kasumi..

yosys> opt_expr

3.61.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module kasumi.

3.61.16. Finished OPT passes. (There is nothing left to do.)

yosys> bmuxmap

3.62. Executing BMUXMAP pass.

yosys> demuxmap

3.63. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> abc -script /home/users/temp_dir/yosys_mwwgCy/abc_tmp_1.scr

3.64. Executing ABC pass (technology mapping using ABC).

3.64.1. Extracting gate netlist of module `\kasumi' to `<abc-temp-dir>/input.blif'..
Extracted 2087 gates and 2419 wires to a netlist network with 332 inputs and 238 outputs.

3.64.1.1. Executing ABC.
DE:   #PIs = 332  #Luts =   710  Max Lvl =  17  Avg Lvl =   3.76  [   0.32 sec. at Pass 0]
DE:   #PIs = 332  #Luts =   659  Max Lvl =  15  Avg Lvl =   3.60  [  11.65 sec. at Pass 1]
DE:   #PIs = 332  #Luts =   652  Max Lvl =  16  Avg Lvl =   3.74  [   2.20 sec. at Pass 2]
DE:   #PIs = 332  #Luts =   617  Max Lvl =  14  Avg Lvl =   3.24  [   4.78 sec. at Pass 3]
DE:   #PIs = 332  #Luts =   607  Max Lvl =  14  Avg Lvl =   3.32  [   2.79 sec. at Pass 4]
DE:   #PIs = 332  #Luts =   597  Max Lvl =  13  Avg Lvl =   3.20  [   6.97 sec. at Pass 5]
DE:   #PIs = 332  #Luts =   593  Max Lvl =  13  Avg Lvl =   3.22  [   2.93 sec. at Pass 6]
DE:   #PIs = 332  #Luts =   593  Max Lvl =  13  Avg Lvl =   3.22  [   6.77 sec. at Pass 7]
DE:   #PIs = 332  #Luts =   591  Max Lvl =  12  Avg Lvl =   3.17  [   2.91 sec. at Pass 8]
DE:   #PIs = 332  #Luts =   589  Max Lvl =  13  Avg Lvl =   3.18  [   7.46 sec. at Pass 9]
DE:   #PIs = 332  #Luts =   586  Max Lvl =  13  Avg Lvl =   3.16  [   3.27 sec. at Pass 10]
DE:   #PIs = 332  #Luts =   584  Max Lvl =  13  Avg Lvl =   3.19  [   7.25 sec. at Pass 11]
DE:   #PIs = 332  #Luts =   578  Max Lvl =  13  Avg Lvl =   3.21  [   3.27 sec. at Pass 12]
DE:   #PIs = 332  #Luts =   578  Max Lvl =  13  Avg Lvl =   3.21  [   7.39 sec. at Pass 13]
DE:   #PIs = 332  #Luts =   578  Max Lvl =  13  Avg Lvl =   3.21  [   2.62 sec. at Pass 14]
DE:   #PIs = 332  #Luts =   578  Max Lvl =  13  Avg Lvl =   3.21  [   7.33 sec. at Pass 15]
DE:   #PIs = 332  #Luts =   571  Max Lvl =  11  Avg Lvl =   3.04  [  37.89 sec. at Pass 16]
DE:   #PIs = 332  #Luts =   570  Max Lvl =  12  Avg Lvl =   3.06  [   2.14 sec. at Pass 17]
DE:   #PIs = 332  #Luts =   570  Max Lvl =  12  Avg Lvl =   3.06  [   6.40 sec. at Pass 18]
DE:   #PIs = 332  #Luts =   570  Max Lvl =  12  Avg Lvl =   3.06  [   2.82 sec. at Pass 19]
DE:   #PIs = 332  #Luts =   569  Max Lvl =  12  Avg Lvl =   3.07  [   7.54 sec. at Pass 20]
DE:   #PIs = 332  #Luts =   565  Max Lvl =  12  Avg Lvl =   3.07  [   2.52 sec. at Pass 21]
DE:   #PIs = 332  #Luts =   565  Max Lvl =  12  Avg Lvl =   3.07  [   7.67 sec. at Pass 22]
DE:   #PIs = 332  #Luts =   565  Max Lvl =  12  Avg Lvl =   3.07  [   2.53 sec. at Pass 23]
DE:   #PIs = 332  #Luts =   565  Max Lvl =  12  Avg Lvl =   3.07  [   6.75 sec. at Pass 24]
DE:   #PIs = 332  #Luts =   563  Max Lvl =  12  Avg Lvl =   3.05  [  29.49 sec. at Pass 25]
DE:   #PIs = 332  #Luts =   563  Max Lvl =  12  Avg Lvl =   3.05  [   1.65 sec. at Pass 26]
DE:   #PIs = 332  #Luts =   563  Max Lvl =  12  Avg Lvl =   3.05  [   4.49 sec. at Pass 27]
DE:   #PIs = 332  #Luts =   562  Max Lvl =  11  Avg Lvl =   3.05  [   1.57 sec. at Pass 28]
DE:   #PIs = 332  #Luts =   562  Max Lvl =  11  Avg Lvl =   3.05  [   4.59 sec. at Pass 29]
DE:   #PIs = 332  #Luts =   562  Max Lvl =  11  Avg Lvl =   3.05  [   2.08 sec. at Pass 30]
DE:   #PIs = 332  #Luts =   562  Max Lvl =  11  Avg Lvl =   3.05  [   5.71 sec. at Pass 31]
DE:   #PIs = 332  #Luts =   560  Max Lvl =  11  Avg Lvl =   3.04  [  30.01 sec. at Pass 32]
DE:   #PIs = 332  #Luts =   560  Max Lvl =  11  Avg Lvl =   3.04  [   1.78 sec. at Pass 33]
DE:   #PIs = 332  #Luts =   560  Max Lvl =  11  Avg Lvl =   3.04  [   6.42 sec. at Pass 34]
DE:   #PIs = 332  #Luts =   560  Max Lvl =  11  Avg Lvl =   3.04  [   2.63 sec. at Pass 35]
DE:   #PIs = 332  #Luts =   559  Max Lvl =  11  Avg Lvl =   3.03  [  37.95 sec. at Pass 36]
DE:   #PIs = 332  #Luts =   559  Max Lvl =  11  Avg Lvl =   3.03  [   6.63 sec. at Pass 37]
DE:   #PIs = 332  #Luts =   559  Max Lvl =  11  Avg Lvl =   3.03  [   2.35 sec. at Pass 38]
DE:   #PIs = 332  #Luts =   559  Max Lvl =  11  Avg Lvl =   3.03  [   7.45 sec. at Pass 39]
DE:   #PIs = 332  #Luts =   559  Max Lvl =  11  Avg Lvl =   3.03  [   0.49 sec. at Pass 40]

yosys> opt_expr

3.65. Executing OPT_EXPR pass (perform const folding).
Optimizing module kasumi.

yosys> opt_merge -nomux

3.66. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\kasumi'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.67. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \kasumi..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.68. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \kasumi.
Performed a total of 0 changes.

yosys> opt_merge

3.69. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\kasumi'.
Removed a total of 0 cells.

yosys> opt_share

3.70. Executing OPT_SHARE pass.

yosys> opt_dff

3.71. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.72. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \kasumi..
Removed 0 unused cells and 2387 unused wires.
<suppressed ~5 debug messages>

yosys> opt_expr

3.73. Executing OPT_EXPR pass (perform const folding).
Optimizing module kasumi.
MAX OPT ITERATION = 1

yosys> opt_ffinv

3.74. Executing OPT_FFINV pass (push inverters through FFs).
Discovering LUTs.
Pushed 0 inverters.

yosys> stat

3.75. Printing statistics.

=== kasumi ===

   Number of wires:                763
   Number of wire bits:           1532
   Number of public wires:          44
   Number of public wire bits:     813
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                858
     $_SDFFE_PP0N_                   5
     $_SDFFE_PP0P_                 192
     $_SDFF_PP0_                   102
     $lut                          559


yosys> shregmap -minlen 8 -maxlen 20

3.76. Executing SHREGMAP pass (map shift registers).
Converted 0 dff cells into 0 shift registers.

yosys> dfflegalize -cell $_DFF_?_ 0 -cell $_DFF_???_ 0 -cell $_DFFE_????_ 0 -cell $_DFFSR_???_ 0 -cell $_DFFSRE_????_ 0 -cell $_DLATCHSR_PPP_ 0

3.77. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

yosys> stat

3.78. Printing statistics.

=== kasumi ===

   Number of wires:               1259
   Number of wire bits:           2028
   Number of public wires:          44
   Number of public wire bits:     813
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1354
     $_DFF_P_                      299
     $_MUX_                        496
     $lut                          559


yosys> techmap -map +/techmap.v -map +/rapidsilicon/genesis/ffs_map.v

3.79. Executing TECHMAP pass (map to technology primitives).

3.79.1. Executing Verilog-2005 frontend: /home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.79.2. Executing Verilog-2005 frontend: /home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/ffs_map.v
Parsing Verilog input from `/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/ffs_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP0N_'.
Generating RTLIL representation for module `\$_DFFE_PN0P_'.
Generating RTLIL representation for module `\$_DFFE_PN0N_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP1N_'.
Generating RTLIL representation for module `\$_DFFE_PN1P_'.
Generating RTLIL representation for module `\$_DFFE_PN1N_'.
Generating RTLIL representation for module `\$_DFFSR_PPP_'.
Generating RTLIL representation for module `\$_DFFSR_PNP_'.
Generating RTLIL representation for module `\$_DFFSR_PNN_'.
Generating RTLIL representation for module `\$_DFFSR_PPN_'.
Generating RTLIL representation for module `\$_DFFSR_NPP_'.
Generating RTLIL representation for module `\$_DFFSR_NNP_'.
Generating RTLIL representation for module `\$_DFFSR_NNN_'.
Generating RTLIL representation for module `\$_DFFSR_NPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PNPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPNP_'.
Generating RTLIL representation for module `\$_DFFSRE_PNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PNPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PPNN_'.
Generating RTLIL representation for module `\$_DFFSRE_PNNN_'.
Generating RTLIL representation for module `\$_DLATCHSR_PPP_'.
Generating RTLIL representation for module `\$_DLATCHSR_NPP_'.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP0N_'.
Generating RTLIL representation for module `\$_DFFE_NN0P_'.
Generating RTLIL representation for module `\$_DFFE_NN0N_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_NP1N_'.
Generating RTLIL representation for module `\$_DFFE_NN1P_'.
Generating RTLIL representation for module `\$_DFFE_NN1N_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNPP_'.
Generating RTLIL representation for module `\$_DFFSRE_NPNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPN_'.
Generating RTLIL representation for module `\$_DFFSRE_NNPN_'.
Generating RTLIL representation for module `\$_DFFSRE_NPNN_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNN_'.
Generating RTLIL representation for module `\$__SHREG_DFF_P_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PN0_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NN0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFF_PN1_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_NN1_'.
Successfully finished Verilog frontend.

3.79.3. Continuing TECHMAP pass.
Using template \$_DFF_P_ for cells of type $_DFF_P_.
Using extmapper simplemap for cells of type $lut.
No more expansions possible.
<suppressed ~994 debug messages>

yosys> opt_expr -mux_undef

3.80. Executing OPT_EXPR pass (perform const folding).
Optimizing module kasumi.
<suppressed ~12065 debug messages>

yosys> simplemap

3.81. Executing SIMPLEMAP pass (map simple cells to gate primitives).

yosys> opt_expr

3.82. Executing OPT_EXPR pass (perform const folding).
Optimizing module kasumi.

yosys> opt_merge

3.83. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\kasumi'.
<suppressed ~7434 debug messages>
Removed a total of 2478 cells.

yosys> opt_dff -nodffe -nosdff

3.84. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.85. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \kasumi..
Removed 0 unused cells and 2132 unused wires.
<suppressed ~1 debug messages>

yosys> opt -nodffe -nosdff

3.86. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.86.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module kasumi.
<suppressed ~531 debug messages>

yosys> opt_merge -nomux

3.86.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\kasumi'.
<suppressed ~27 debug messages>
Removed a total of 9 cells.

yosys> opt_muxtree

3.86.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \kasumi..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.86.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \kasumi.
Performed a total of 0 changes.

yosys> opt_merge

3.86.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\kasumi'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.86.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.86.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \kasumi..
Removed 0 unused cells and 90 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.86.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module kasumi.

3.86.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.86.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \kasumi..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.86.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \kasumi.
Performed a total of 0 changes.

yosys> opt_merge

3.86.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\kasumi'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.86.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.86.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \kasumi..

yosys> opt_expr

3.86.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module kasumi.

3.86.16. Finished OPT passes. (There is nothing left to do.)

yosys> abc -script /home/users/temp_dir/yosys_mwwgCy/abc_tmp_2.scr

3.87. Executing ABC pass (technology mapping using ABC).

3.87.1. Extracting gate netlist of module `\kasumi' to `<abc-temp-dir>/input.blif'..
Extracted 3358 gates and 3757 wires to a netlist network with 397 inputs and 299 outputs.

3.87.1.1. Executing ABC.
DE:   #PIs = 397  #Luts =   656  Max Lvl =  13  Avg Lvl =   3.92  [   0.43 sec. at Pass 0]
DE:   #PIs = 397  #Luts =   656  Max Lvl =  13  Avg Lvl =   3.92  [  15.09 sec. at Pass 1]
DE:   #PIs = 397  #Luts =   656  Max Lvl =  13  Avg Lvl =   3.92  [   2.41 sec. at Pass 2]
DE:   #PIs = 397  #Luts =   655  Max Lvl =  12  Avg Lvl =   4.36  [   7.79 sec. at Pass 3]
DE:   #PIs = 397  #Luts =   653  Max Lvl =  12  Avg Lvl =   4.31  [   3.37 sec. at Pass 4]
DE:   #PIs = 397  #Luts =   653  Max Lvl =  12  Avg Lvl =   4.31  [   8.31 sec. at Pass 5]
DE:   #PIs = 397  #Luts =   653  Max Lvl =  12  Avg Lvl =   4.31  [   4.41 sec. at Pass 6]
DE:   #PIs = 397  #Luts =   653  Max Lvl =  12  Avg Lvl =   4.31  [  10.19 sec. at Pass 7]
DE:   #PIs = 397  #Luts =   653  Max Lvl =  12  Avg Lvl =   4.31  [   0.63 sec. at Pass 8]

yosys> opt_expr

3.88. Executing OPT_EXPR pass (perform const folding).
Optimizing module kasumi.

yosys> opt_merge -nomux

3.89. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\kasumi'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.90. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \kasumi..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.91. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \kasumi.
Performed a total of 0 changes.

yosys> opt_merge

3.92. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\kasumi'.
Removed a total of 0 cells.

yosys> opt_share

3.93. Executing OPT_SHARE pass.

yosys> opt_dff

3.94. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.95. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \kasumi..
Removed 0 unused cells and 2597 unused wires.
<suppressed ~2 debug messages>

yosys> opt_expr

3.96. Executing OPT_EXPR pass (perform const folding).
Optimizing module kasumi.
MAX OPT ITERATION = 1

yosys> hierarchy -check

3.97. Executing HIERARCHY pass (managing design hierarchy).

3.97.1. Analyzing design hierarchy..
Top module:  \kasumi

3.97.2. Analyzing design hierarchy..
Top module:  \kasumi
Removed 0 unused modules.

yosys> stat

3.98. Printing statistics.

=== kasumi ===

   Number of wires:                857
   Number of wire bits:           1626
   Number of public wires:          43
   Number of public wire bits:     812
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                952
     $lut                          653
     dffsre                        299


yosys> opt_clean -purge

3.99. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \kasumi..
Removed 0 unused cells and 25 unused wires.
<suppressed ~25 debug messages>

yosys> write_verilog -noattr -nohex synthesized.v

3.100. Executing Verilog backend.
Dumping module `\kasumi'.

Warnings: 12 unique messages, 12 total
End of script. Logfile hash: 1a5f5aec0d, CPU: user 13.93s system 0.49s, MEM: 54.00 MB peak
Yosys 0.18+10 (git sha1 7a7a25778, gcc 9.1.0 -fPIC -Os)
Time spent: 99% 6x abc (3078 sec), 0% 15x opt_dff (4 sec), ...
real 399.39
user 2954.17
sys 137.48
