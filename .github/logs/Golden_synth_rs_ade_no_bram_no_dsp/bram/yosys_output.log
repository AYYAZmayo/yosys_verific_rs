
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys-Verific 0.0.49
 Yosys 0.18+10 (git sha1 7a7a25778, gcc 9.1.0 -fPIC -Os)


-- Executing script file `yosys.ys' --
echo on

yosys> plugin -i synth-rs

yosys> read -verific

yosys> read -incdir .

yosys> verific -vlog-incdir .

1. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific May22_SW_Release, released at Wed Jun  1 05:39:28 2022.

yosys> verilog_defaults -add -I.

yosys> read -vlog2k bram_v1.v bram_v2.v

yosys> verific -vlog2k bram_v1.v bram_v2.v

2. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific May22_SW_Release, released at Wed Jun  1 05:39:28 2022.
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'bram_v1.v'
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'bram_v2.v'
VERIFIC-WARNING [VERI-1206] bram_v2.v:39: overwriting previous definition of module 'BRAM'
VERIFIC-INFO [VERI-2142] bram_v1.v:39: previous definition of design element 'BRAM' is here
VERIFIC-WARNING [VERI-1206] bram_v2.v:71: overwriting previous definition of module 'BRAM_32x512'
VERIFIC-INFO [VERI-2142] bram_v1.v:71: previous definition of design element 'BRAM_32x512' is here
VERIFIC-WARNING [VERI-1206] bram_v2.v:104: overwriting previous definition of module 'BRAM_16x1024'
VERIFIC-INFO [VERI-2142] bram_v1.v:104: previous definition of design element 'BRAM_16x1024' is here
VERIFIC-WARNING [VERI-1206] bram_v2.v:137: overwriting previous definition of module 'BRAM_8x2048'
VERIFIC-INFO [VERI-2142] bram_v1.v:137: previous definition of design element 'BRAM_8x2048' is here
VERIFIC-WARNING [VERI-1206] bram_v2.v:169: overwriting previous definition of module 'BRAM_4x4096'
VERIFIC-INFO [VERI-2142] bram_v1.v:169: previous definition of design element 'BRAM_4x4096' is here

yosys> synth_rs -top BRAM -tech genesis -goal area -de -no_dsp -no_bram -verilog synthesized.v

3. Executing synth_rs pass: v0.4.58

yosys> read_verilog -lib -specify -nomem2reg +/rapidsilicon/common/cells_sim.v +/rapidsilicon/genesis/cells_sim.v

3.1. Executing Verilog-2005 frontend: /home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v
Parsing Verilog input from `/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\inv'.
Generating RTLIL representation for module `\buff'.
Generating RTLIL representation for module `\logic_0'.
Generating RTLIL representation for module `\logic_1'.
Generating RTLIL representation for module `\gclkbuff'.
Successfully finished Verilog frontend.

3.2. Executing Verilog-2005 frontend: /home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/cells_sim.v
Parsing Verilog input from `/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\dffsre'.
Generating RTLIL representation for module `\dffnsre'.
Generating RTLIL representation for module `\latchsre'.
Generating RTLIL representation for module `\latchnsre'.
Generating RTLIL representation for module `\io_scff'.
Generating RTLIL representation for module `\scff'.
Generating RTLIL representation for module `\sh_dff'.
Generating RTLIL representation for module `\adder_carry'.
Generating RTLIL representation for module `\sdffr'.
Generating RTLIL representation for module `\sdffs'.
Generating RTLIL representation for module `\TDP_BRAM18'.
Generating RTLIL representation for module `\TDP36K'.
Generating RTLIL representation for module `\RS_DSP1'.
Generating RTLIL representation for module `\RS_DSP2'.
Generating RTLIL representation for module `\RS_DSP2_MULT'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGIN_REGOUT'.
Generating RTLIL representation for module `\dsp_t1_sim'.
Generating RTLIL representation for module `\dsp_t1_20x18x64'.
Generating RTLIL representation for module `\dsp_t1_10x9x32'.
Successfully finished Verilog frontend.

yosys> hierarchy -check -top BRAM

3.3. Executing HIERARCHY pass (managing design hierarchy).
VERIFIC-INFO [VERI-1018] bram_v2.v:1: compiling module 'BRAM'
VERIFIC-INFO [VERI-2571] bram_v2.v:22: extracting RAM for identifier 'memory'
Importing module BRAM.

3.3.1. Analyzing design hierarchy..
Top module:  \BRAM

3.3.2. Analyzing design hierarchy..
Top module:  \BRAM
Removed 0 unused modules.

yosys> proc

3.4. Executing PROC pass (convert processes to netlists).

yosys> proc_clean

3.4.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> proc_rmdead

3.4.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

yosys> proc_prune

3.4.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

yosys> proc_init

3.4.4. Executing PROC_INIT pass (extract init attributes).

yosys> proc_arst

3.4.5. Executing PROC_ARST pass (detect async resets in processes).

yosys> proc_rom

3.4.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

yosys> proc_mux

3.4.7. Executing PROC_MUX pass (convert decision trees to multiplexers).

yosys> proc_dlatch

3.4.8. Executing PROC_DLATCH pass (convert process syncs to latches).

yosys> proc_dff

3.4.9. Executing PROC_DFF pass (convert process syncs to FFs).

yosys> proc_memwr

3.4.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

yosys> proc_clean

3.4.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> opt_expr -keepdc

3.4.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module BRAM.
<suppressed ~1 debug messages>

yosys> bmuxmap

3.5. Executing BMUXMAP pass.

yosys> demuxmap

3.6. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> flatten

3.7. Executing FLATTEN pass (flatten design).

yosys> bmuxmap

3.8. Executing BMUXMAP pass.

yosys> demuxmap

3.9. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> tribuf -logic

3.10. Executing TRIBUF pass.

yosys> deminout

3.11. Executing DEMINOUT pass (demote inout ports to input or output).

yosys> opt_expr

3.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module BRAM.

yosys> opt_clean

3.13. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \BRAM..
Removed 1 unused cells and 6 unused wires.
<suppressed ~4 debug messages>

yosys> check

3.14. Executing CHECK pass (checking for obvious problems).
Checking module BRAM...
Found and reported 0 problems.

yosys> opt -nodffe -nosdff

3.15. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module BRAM.

yosys> opt_merge -nomux

3.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\BRAM'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.15.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \BRAM..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

yosys> opt_reduce

3.15.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \BRAM.
Performed a total of 0 changes.

yosys> opt_merge

3.15.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\BRAM'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.15.6. Executing OPT_DFF pass (perform DFF optimizations).
Removing never-active async load on $verific$rq_reg$bram_v2.v:30$36 ($aldff) from module BRAM.

yosys> opt_clean

3.15.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \BRAM..

yosys> opt_expr

3.15.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module BRAM.

3.15.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.15.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \BRAM..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

yosys> opt_reduce

3.15.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \BRAM.
Performed a total of 0 changes.

yosys> opt_merge

3.15.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\BRAM'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.15.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.15.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \BRAM..

yosys> opt_expr

3.15.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module BRAM.

3.15.16. Finished OPT passes. (There is nothing left to do.)

yosys> fsm -encoding binary

3.16. Executing FSM pass (extract and optimize FSM).

yosys> fsm_detect

3.16.1. Executing FSM_DETECT pass (finding FSMs in design).

yosys> fsm_extract

3.16.2. Executing FSM_EXTRACT pass (extracting FSM from design).

yosys> fsm_opt

3.16.3. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> opt_clean

3.16.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \BRAM..

yosys> fsm_opt

3.16.5. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> fsm_recode -encoding binary

3.16.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

yosys> fsm_info

3.16.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

yosys> fsm_map

3.16.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

yosys> opt -sat

3.17. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.17.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module BRAM.

yosys> opt_merge -nomux

3.17.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\BRAM'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.17.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \BRAM..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

yosys> opt_reduce

3.17.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \BRAM.
Performed a total of 0 changes.

yosys> opt_merge

3.17.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\BRAM'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.17.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $verific$rq_reg$bram_v2.v:30$36 ($dff) from module BRAM (D = $verific$n39$16, Q = \rq).

yosys> opt_clean

3.17.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \BRAM..
Removed 1 unused cells and 1 unused wires.
<suppressed ~2 debug messages>

yosys> opt_expr

3.17.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module BRAM.

3.17.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.17.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \BRAM..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

yosys> opt_reduce

3.17.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \BRAM.
Performed a total of 0 changes.

yosys> opt_merge

3.17.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\BRAM'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.17.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.17.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \BRAM..

yosys> opt_expr

3.17.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module BRAM.

3.17.16. Finished OPT passes. (There is nothing left to do.)

yosys> wreduce -keepdc

3.18. Executing WREDUCE pass (reducing word size of cells).
Removed top 28 address bits (of 32) from memory init port BRAM.$verific$memory$bram_v2.v:22$10 (memory).
Removed top 28 address bits (of 32) from memory init port BRAM.$verific$memory$bram_v2.v:22$11 (memory).
Removed top 28 address bits (of 32) from memory init port BRAM.$verific$memory$bram_v2.v:22$4 (memory).
Removed top 28 address bits (of 32) from memory init port BRAM.$verific$memory$bram_v2.v:22$5 (memory).
Removed top 28 address bits (of 32) from memory init port BRAM.$verific$memory$bram_v2.v:22$6 (memory).
Removed top 28 address bits (of 32) from memory init port BRAM.$verific$memory$bram_v2.v:22$7 (memory).
Removed top 28 address bits (of 32) from memory init port BRAM.$verific$memory$bram_v2.v:22$8 (memory).
Removed top 28 address bits (of 32) from memory init port BRAM.$verific$memory$bram_v2.v:22$9 (memory).

yosys> peepopt

3.19. Executing PEEPOPT pass (run peephole optimizers).

yosys> opt_clean

3.20. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \BRAM..

yosys> bmuxmap

3.21. Executing BMUXMAP pass.

yosys> demuxmap

3.22. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> alumacc

3.23. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module BRAM:
  created 0 $alu and 0 $macc cells.

yosys> opt_expr

3.24. Executing OPT_EXPR pass (perform const folding).
Optimizing module BRAM.

yosys> opt_merge -nomux

3.25. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\BRAM'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.26. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \BRAM..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

yosys> opt_reduce

3.27. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \BRAM.
Performed a total of 0 changes.

yosys> opt_merge

3.28. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\BRAM'.
Removed a total of 0 cells.

yosys> opt_share

3.29. Executing OPT_SHARE pass.

yosys> opt_dff

3.30. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.31. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \BRAM..

yosys> opt_expr

3.32. Executing OPT_EXPR pass (perform const folding).
Optimizing module BRAM.
MAX OPT ITERATION = 1

yosys> stat

3.33. Printing statistics.

=== BRAM ===

   Number of wires:                 14
   Number of wire bits:            185
   Number of public wires:           8
   Number of public wire bits:     117
   Number of memories:               1
   Number of memory bits:          288
   Number of processes:              0
   Number of cells:                 16
     $and                            1
     $dffe                           1
     $meminit                        8
     $memrd_v2                       1
     $memwr_v2                       1
     $mux                            1
     $not                            1
     $reduce_or                      2


yosys> memory -nomap

3.34. Executing MEMORY pass.

yosys> opt_mem

3.34.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

yosys> opt_mem_priority

3.34.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

yosys> opt_mem_feedback

3.34.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).
  Analyzing BRAM.memory write port 0.

yosys> memory_bmux2rom

3.34.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

yosys> memory_dff

3.34.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).
Checking read port `\memory'[0] in module `\BRAM': merging output FF to cell.
    Write port 0: non-transparent.

yosys> opt_clean

3.34.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \BRAM..
Removed 3 unused cells and 35 unused wires.
<suppressed ~4 debug messages>

yosys> memory_share

3.34.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

yosys> opt_mem_widen

3.34.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

yosys> opt_clean

3.34.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \BRAM..

yosys> memory_collect

3.34.10. Executing MEMORY_COLLECT pass (generating $mem cells).

yosys> stat

3.35. Printing statistics.

=== BRAM ===

   Number of wires:                 11
   Number of wire bits:            120
   Number of public wires:           8
   Number of public wire bits:     117
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  4
     $and                            1
     $mem_v2                         1
     $not                            1
     $reduce_or                      1


yosys> muxpack

3.36. Executing MUXPACK pass ($mux cell cascades to $pmux).
Converted 0 (p)mux cells into 0 pmux cells.

yosys> opt_clean

3.37. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \BRAM..

yosys> pmuxtree

3.38. Executing PMUXTREE pass.

yosys> muxpack

3.39. Executing MUXPACK pass ($mux cell cascades to $pmux).
Converted 0 (p)mux cells into 0 pmux cells.

yosys> memory_map

3.40. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).
Mapping memory \memory in module \BRAM:
  created 9 $dff cells and 0 static cells of width 32.
Extracted data FF from read port 0 of BRAM.memory: $\memory$rdreg[0]
  read interface: 1 $dff and 15 $mux cells.
  write interface: 9 write mux blocks.

yosys> stat

3.41. Printing statistics.

=== BRAM ===

   Number of wires:                102
   Number of wire bits:           2009
   Number of public wires:          17
   Number of public wire bits:     405
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 70
     $and                           26
     $dff                            9
     $dffe                           1
     $eq                             8
     $mux                           24
     $not                            1
     $reduce_or                      1


yosys> techmap -map +/techmap.v -map +/rapidsilicon/genesis/arith_map.v

3.42. Executing TECHMAP pass (map to technology primitives).

3.42.1. Executing Verilog-2005 frontend: /home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.42.2. Executing Verilog-2005 frontend: /home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/arith_map.v
Parsing Verilog input from `/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_rs_alu'.
Successfully finished Verilog frontend.

3.42.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $dffe.
Using extmapper simplemap for cells of type $eq.
No more expansions possible.
<suppressed ~141 debug messages>

yosys> stat

3.43. Printing statistics.

=== BRAM ===

   Number of wires:                121
   Number of wire bits:           2029
   Number of public wires:          17
   Number of public wire bits:     405
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1135
     $_AND_                         26
     $_DFFE_PP_                     32
     $_DFF_P_                      288
     $_MUX_                        768
     $_NOT_                          9
     $_OR_                           4
     $_XOR_                          8


yosys> opt_expr

3.44. Executing OPT_EXPR pass (perform const folding).
Optimizing module BRAM.
<suppressed ~12 debug messages>

yosys> opt_merge -nomux

3.45. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\BRAM'.
<suppressed ~12 debug messages>
Removed a total of 4 cells.

yosys> opt_muxtree

3.46. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \BRAM..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.47. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \BRAM.
Performed a total of 0 changes.

yosys> opt_merge

3.48. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\BRAM'.
Removed a total of 0 cells.

yosys> opt_share

3.49. Executing OPT_SHARE pass.

yosys> opt_dff

3.50. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.51. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \BRAM..
Removed 0 unused cells and 43 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.52. Executing OPT_EXPR pass (perform const folding).
Optimizing module BRAM.
MAX OPT ITERATION = 1

yosys> opt -fast -full

3.53. Executing OPT pass (performing simple optimizations).

yosys> opt_expr -full

3.53.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module BRAM.
<suppressed ~273 debug messages>

yosys> opt_merge

3.53.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\BRAM'.
Removed a total of 0 cells.

yosys> opt_dff

3.53.3. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $auto$ff.cc:262:slice$557 ($_DFF_P_) from module BRAM (D = \wd [31], Q = \memory[3] [31]).
Adding EN signal on $auto$ff.cc:262:slice$554 ($_DFF_P_) from module BRAM (D = \wd [28], Q = \memory[3] [28]).
Adding EN signal on $auto$ff.cc:262:slice$551 ($_DFF_P_) from module BRAM (D = \wd [25], Q = \memory[3] [25]).
Adding EN signal on $auto$ff.cc:262:slice$548 ($_DFF_P_) from module BRAM (D = \wd [22], Q = \memory[3] [22]).
Adding EN signal on $auto$ff.cc:262:slice$545 ($_DFF_P_) from module BRAM (D = \wd [19], Q = \memory[3] [19]).
Adding EN signal on $auto$ff.cc:262:slice$542 ($_DFF_P_) from module BRAM (D = \wd [16], Q = \memory[3] [16]).
Adding EN signal on $auto$ff.cc:262:slice$539 ($_DFF_P_) from module BRAM (D = \wd [13], Q = \memory[3] [13]).
Adding EN signal on $auto$ff.cc:262:slice$536 ($_DFF_P_) from module BRAM (D = \wd [10], Q = \memory[3] [10]).
Adding EN signal on $auto$ff.cc:262:slice$533 ($_DFF_P_) from module BRAM (D = \wd [7], Q = \memory[3] [7]).
Adding EN signal on $auto$ff.cc:262:slice$530 ($_DFF_P_) from module BRAM (D = \wd [4], Q = \memory[3] [4]).
Adding EN signal on $auto$ff.cc:262:slice$366 ($_DFF_P_) from module BRAM (D = \wd [0], Q = \memory[2] [0]).
Adding EN signal on $auto$ff.cc:262:slice$758 ($_DFF_P_) from module BRAM (D = \wd [31], Q = \memory[7] [31]).
Adding EN signal on $auto$ff.cc:262:slice$757 ($_DFF_P_) from module BRAM (D = \wd [30], Q = \memory[7] [30]).
Adding EN signal on $auto$ff.cc:262:slice$756 ($_DFF_P_) from module BRAM (D = \wd [29], Q = \memory[7] [29]).
Adding EN signal on $auto$ff.cc:262:slice$755 ($_DFF_P_) from module BRAM (D = \wd [28], Q = \memory[7] [28]).
Adding EN signal on $auto$ff.cc:262:slice$754 ($_DFF_P_) from module BRAM (D = \wd [27], Q = \memory[7] [27]).
Adding EN signal on $auto$ff.cc:262:slice$753 ($_DFF_P_) from module BRAM (D = \wd [26], Q = \memory[7] [26]).
Adding EN signal on $auto$ff.cc:262:slice$752 ($_DFF_P_) from module BRAM (D = \wd [25], Q = \memory[7] [25]).
Adding EN signal on $auto$ff.cc:262:slice$751 ($_DFF_P_) from module BRAM (D = \wd [24], Q = \memory[7] [24]).
Adding EN signal on $auto$ff.cc:262:slice$750 ($_DFF_P_) from module BRAM (D = \wd [23], Q = \memory[7] [23]).
Adding EN signal on $auto$ff.cc:262:slice$749 ($_DFF_P_) from module BRAM (D = \wd [22], Q = \memory[7] [22]).
Adding EN signal on $auto$ff.cc:262:slice$748 ($_DFF_P_) from module BRAM (D = \wd [21], Q = \memory[7] [21]).
Adding EN signal on $auto$ff.cc:262:slice$747 ($_DFF_P_) from module BRAM (D = \wd [20], Q = \memory[7] [20]).
Adding EN signal on $auto$ff.cc:262:slice$746 ($_DFF_P_) from module BRAM (D = \wd [19], Q = \memory[7] [19]).
Adding EN signal on $auto$ff.cc:262:slice$745 ($_DFF_P_) from module BRAM (D = \wd [18], Q = \memory[7] [18]).
Adding EN signal on $auto$ff.cc:262:slice$744 ($_DFF_P_) from module BRAM (D = \wd [17], Q = \memory[7] [17]).
Adding EN signal on $auto$ff.cc:262:slice$743 ($_DFF_P_) from module BRAM (D = \wd [16], Q = \memory[7] [16]).
Adding EN signal on $auto$ff.cc:262:slice$742 ($_DFF_P_) from module BRAM (D = \wd [15], Q = \memory[7] [15]).
Adding EN signal on $auto$ff.cc:262:slice$741 ($_DFF_P_) from module BRAM (D = \wd [14], Q = \memory[7] [14]).
Adding EN signal on $auto$ff.cc:262:slice$740 ($_DFF_P_) from module BRAM (D = \wd [13], Q = \memory[7] [13]).
Adding EN signal on $auto$ff.cc:262:slice$739 ($_DFF_P_) from module BRAM (D = \wd [12], Q = \memory[7] [12]).
Adding EN signal on $auto$ff.cc:262:slice$738 ($_DFF_P_) from module BRAM (D = \wd [11], Q = \memory[7] [11]).
Adding EN signal on $auto$ff.cc:262:slice$737 ($_DFF_P_) from module BRAM (D = \wd [10], Q = \memory[7] [10]).
Adding EN signal on $auto$ff.cc:262:slice$736 ($_DFF_P_) from module BRAM (D = \wd [9], Q = \memory[7] [9]).
Adding EN signal on $auto$ff.cc:262:slice$735 ($_DFF_P_) from module BRAM (D = \wd [8], Q = \memory[7] [8]).
Adding EN signal on $auto$ff.cc:262:slice$734 ($_DFF_P_) from module BRAM (D = \wd [7], Q = \memory[7] [7]).
Adding EN signal on $auto$ff.cc:262:slice$733 ($_DFF_P_) from module BRAM (D = \wd [6], Q = \memory[7] [6]).
Adding EN signal on $auto$ff.cc:262:slice$732 ($_DFF_P_) from module BRAM (D = \wd [5], Q = \memory[7] [5]).
Adding EN signal on $auto$ff.cc:262:slice$731 ($_DFF_P_) from module BRAM (D = \wd [4], Q = \memory[7] [4]).
Adding EN signal on $auto$ff.cc:262:slice$730 ($_DFF_P_) from module BRAM (D = \wd [3], Q = \memory[7] [3]).
Adding EN signal on $auto$ff.cc:262:slice$729 ($_DFF_P_) from module BRAM (D = \wd [2], Q = \memory[7] [2]).
Adding EN signal on $auto$ff.cc:262:slice$728 ($_DFF_P_) from module BRAM (D = \wd [1], Q = \memory[7] [1]).
Adding EN signal on $auto$ff.cc:262:slice$372 ($_DFF_P_) from module BRAM (D = \wd [6], Q = \memory[2] [6]).
Adding EN signal on $auto$ff.cc:262:slice$727 ($_DFF_P_) from module BRAM (D = \wd [0], Q = \memory[7] [0]).
Adding EN signal on $auto$ff.cc:262:slice$724 ($_DFF_P_) from module BRAM (D = \wd [29], Q = \memory[8] [29]).
Adding EN signal on $auto$ff.cc:262:slice$721 ($_DFF_P_) from module BRAM (D = \wd [26], Q = \memory[8] [26]).
Adding EN signal on $auto$ff.cc:262:slice$718 ($_DFF_P_) from module BRAM (D = \wd [23], Q = \memory[8] [23]).
Adding EN signal on $auto$ff.cc:262:slice$715 ($_DFF_P_) from module BRAM (D = \wd [20], Q = \memory[8] [20]).
Adding EN signal on $auto$ff.cc:262:slice$712 ($_DFF_P_) from module BRAM (D = \wd [17], Q = \memory[8] [17]).
Adding EN signal on $auto$ff.cc:262:slice$709 ($_DFF_P_) from module BRAM (D = \wd [14], Q = \memory[8] [14]).
Adding EN signal on $auto$ff.cc:262:slice$706 ($_DFF_P_) from module BRAM (D = \wd [11], Q = \memory[8] [11]).
Adding EN signal on $auto$ff.cc:262:slice$703 ($_DFF_P_) from module BRAM (D = \wd [8], Q = \memory[8] [8]).
Adding EN signal on $auto$ff.cc:262:slice$700 ($_DFF_P_) from module BRAM (D = \wd [5], Q = \memory[8] [5]).
Adding EN signal on $auto$ff.cc:262:slice$697 ($_DFF_P_) from module BRAM (D = \wd [2], Q = \memory[8] [2]).
Adding EN signal on $auto$ff.cc:262:slice$556 ($_DFF_P_) from module BRAM (D = \wd [30], Q = \memory[3] [30]).
Adding EN signal on $auto$ff.cc:262:slice$553 ($_DFF_P_) from module BRAM (D = \wd [27], Q = \memory[3] [27]).
Adding EN signal on $auto$ff.cc:262:slice$550 ($_DFF_P_) from module BRAM (D = \wd [24], Q = \memory[3] [24]).
Adding EN signal on $auto$ff.cc:262:slice$547 ($_DFF_P_) from module BRAM (D = \wd [21], Q = \memory[3] [21]).
Adding EN signal on $auto$ff.cc:262:slice$544 ($_DFF_P_) from module BRAM (D = \wd [18], Q = \memory[3] [18]).
Adding EN signal on $auto$ff.cc:262:slice$541 ($_DFF_P_) from module BRAM (D = \wd [15], Q = \memory[3] [15]).
Adding EN signal on $auto$ff.cc:262:slice$538 ($_DFF_P_) from module BRAM (D = \wd [12], Q = \memory[3] [12]).
Adding EN signal on $auto$ff.cc:262:slice$535 ($_DFF_P_) from module BRAM (D = \wd [9], Q = \memory[3] [9]).
Adding EN signal on $auto$ff.cc:262:slice$532 ($_DFF_P_) from module BRAM (D = \wd [6], Q = \memory[3] [6]).
Adding EN signal on $auto$ff.cc:262:slice$368 ($_DFF_P_) from module BRAM (D = \wd [2], Q = \memory[2] [2]).
Adding EN signal on $auto$ff.cc:262:slice$529 ($_DFF_P_) from module BRAM (D = \wd [3], Q = \memory[3] [3]).
Adding EN signal on $auto$ff.cc:262:slice$526 ($_DFF_P_) from module BRAM (D = \wd [0], Q = \memory[3] [0]).
Adding EN signal on $auto$ff.cc:262:slice$459 ($_DFF_P_) from module BRAM (D = \wd [29], Q = \memory[0] [29]).
Adding EN signal on $auto$ff.cc:262:slice$456 ($_DFF_P_) from module BRAM (D = \wd [26], Q = \memory[0] [26]).
Adding EN signal on $auto$ff.cc:262:slice$453 ($_DFF_P_) from module BRAM (D = \wd [23], Q = \memory[0] [23]).
Adding EN signal on $auto$ff.cc:262:slice$450 ($_DFF_P_) from module BRAM (D = \wd [20], Q = \memory[0] [20]).
Adding EN signal on $auto$ff.cc:262:slice$447 ($_DFF_P_) from module BRAM (D = \wd [17], Q = \memory[0] [17]).
Adding EN signal on $auto$ff.cc:262:slice$444 ($_DFF_P_) from module BRAM (D = \wd [14], Q = \memory[0] [14]).
Adding EN signal on $auto$ff.cc:262:slice$441 ($_DFF_P_) from module BRAM (D = \wd [11], Q = \memory[0] [11]).
Adding EN signal on $auto$ff.cc:262:slice$438 ($_DFF_P_) from module BRAM (D = \wd [8], Q = \memory[0] [8]).
Adding EN signal on $auto$ff.cc:262:slice$435 ($_DFF_P_) from module BRAM (D = \wd [5], Q = \memory[0] [5]).
Adding EN signal on $auto$ff.cc:262:slice$432 ($_DFF_P_) from module BRAM (D = \wd [2], Q = \memory[0] [2]).
Adding EN signal on $auto$ff.cc:262:slice$429 ($_DFF_P_) from module BRAM (D = \wd [31], Q = \memory[1] [31]).
Adding EN signal on $auto$ff.cc:262:slice$426 ($_DFF_P_) from module BRAM (D = \wd [28], Q = \memory[1] [28]).
Adding EN signal on $auto$ff.cc:262:slice$423 ($_DFF_P_) from module BRAM (D = \wd [25], Q = \memory[1] [25]).
Adding EN signal on $auto$ff.cc:262:slice$420 ($_DFF_P_) from module BRAM (D = \wd [22], Q = \memory[1] [22]).
Adding EN signal on $auto$ff.cc:262:slice$417 ($_DFF_P_) from module BRAM (D = \wd [19], Q = \memory[1] [19]).
Adding EN signal on $auto$ff.cc:262:slice$414 ($_DFF_P_) from module BRAM (D = \wd [16], Q = \memory[1] [16]).
Adding EN signal on $auto$ff.cc:262:slice$411 ($_DFF_P_) from module BRAM (D = \wd [13], Q = \memory[1] [13]).
Adding EN signal on $auto$ff.cc:262:slice$408 ($_DFF_P_) from module BRAM (D = \wd [10], Q = \memory[1] [10]).
Adding EN signal on $auto$ff.cc:262:slice$405 ($_DFF_P_) from module BRAM (D = \wd [7], Q = \memory[1] [7]).
Adding EN signal on $auto$ff.cc:262:slice$402 ($_DFF_P_) from module BRAM (D = \wd [4], Q = \memory[1] [4]).
Adding EN signal on $auto$ff.cc:262:slice$399 ($_DFF_P_) from module BRAM (D = \wd [1], Q = \memory[1] [1]).
Adding EN signal on $auto$ff.cc:262:slice$396 ($_DFF_P_) from module BRAM (D = \wd [30], Q = \memory[2] [30]).
Adding EN signal on $auto$ff.cc:262:slice$393 ($_DFF_P_) from module BRAM (D = \wd [27], Q = \memory[2] [27]).
Adding EN signal on $auto$ff.cc:262:slice$390 ($_DFF_P_) from module BRAM (D = \wd [24], Q = \memory[2] [24]).
Adding EN signal on $auto$ff.cc:262:slice$387 ($_DFF_P_) from module BRAM (D = \wd [21], Q = \memory[2] [21]).
Adding EN signal on $auto$ff.cc:262:slice$384 ($_DFF_P_) from module BRAM (D = \wd [18], Q = \memory[2] [18]).
Adding EN signal on $auto$ff.cc:262:slice$381 ($_DFF_P_) from module BRAM (D = \wd [15], Q = \memory[2] [15]).
Adding EN signal on $auto$ff.cc:262:slice$378 ($_DFF_P_) from module BRAM (D = \wd [12], Q = \memory[2] [12]).
Adding EN signal on $auto$ff.cc:262:slice$375 ($_DFF_P_) from module BRAM (D = \wd [9], Q = \memory[2] [9]).
Adding EN signal on $auto$ff.cc:262:slice$371 ($_DFF_P_) from module BRAM (D = \wd [5], Q = \memory[2] [5]).
Adding EN signal on $auto$ff.cc:262:slice$528 ($_DFF_P_) from module BRAM (D = \wd [2], Q = \memory[3] [2]).
Adding EN signal on $auto$ff.cc:262:slice$461 ($_DFF_P_) from module BRAM (D = \wd [31], Q = \memory[0] [31]).
Adding EN signal on $auto$ff.cc:262:slice$458 ($_DFF_P_) from module BRAM (D = \wd [28], Q = \memory[0] [28]).
Adding EN signal on $auto$ff.cc:262:slice$455 ($_DFF_P_) from module BRAM (D = \wd [25], Q = \memory[0] [25]).
Adding EN signal on $auto$ff.cc:262:slice$452 ($_DFF_P_) from module BRAM (D = \wd [22], Q = \memory[0] [22]).
Adding EN signal on $auto$ff.cc:262:slice$449 ($_DFF_P_) from module BRAM (D = \wd [19], Q = \memory[0] [19]).
Adding EN signal on $auto$ff.cc:262:slice$446 ($_DFF_P_) from module BRAM (D = \wd [16], Q = \memory[0] [16]).
Adding EN signal on $auto$ff.cc:262:slice$443 ($_DFF_P_) from module BRAM (D = \wd [13], Q = \memory[0] [13]).
Adding EN signal on $auto$ff.cc:262:slice$440 ($_DFF_P_) from module BRAM (D = \wd [10], Q = \memory[0] [10]).
Adding EN signal on $auto$ff.cc:262:slice$437 ($_DFF_P_) from module BRAM (D = \wd [7], Q = \memory[0] [7]).
Adding EN signal on $auto$ff.cc:262:slice$434 ($_DFF_P_) from module BRAM (D = \wd [4], Q = \memory[0] [4]).
Adding EN signal on $auto$ff.cc:262:slice$431 ($_DFF_P_) from module BRAM (D = \wd [1], Q = \memory[0] [1]).
Adding EN signal on $auto$ff.cc:262:slice$428 ($_DFF_P_) from module BRAM (D = \wd [30], Q = \memory[1] [30]).
Adding EN signal on $auto$ff.cc:262:slice$425 ($_DFF_P_) from module BRAM (D = \wd [27], Q = \memory[1] [27]).
Adding EN signal on $auto$ff.cc:262:slice$422 ($_DFF_P_) from module BRAM (D = \wd [24], Q = \memory[1] [24]).
Adding EN signal on $auto$ff.cc:262:slice$419 ($_DFF_P_) from module BRAM (D = \wd [21], Q = \memory[1] [21]).
Adding EN signal on $auto$ff.cc:262:slice$416 ($_DFF_P_) from module BRAM (D = \wd [18], Q = \memory[1] [18]).
Adding EN signal on $auto$ff.cc:262:slice$413 ($_DFF_P_) from module BRAM (D = \wd [15], Q = \memory[1] [15]).
Adding EN signal on $auto$ff.cc:262:slice$410 ($_DFF_P_) from module BRAM (D = \wd [12], Q = \memory[1] [12]).
Adding EN signal on $auto$ff.cc:262:slice$407 ($_DFF_P_) from module BRAM (D = \wd [9], Q = \memory[1] [9]).
Adding EN signal on $auto$ff.cc:262:slice$404 ($_DFF_P_) from module BRAM (D = \wd [6], Q = \memory[1] [6]).
Adding EN signal on $auto$ff.cc:262:slice$401 ($_DFF_P_) from module BRAM (D = \wd [3], Q = \memory[1] [3]).
Adding EN signal on $auto$ff.cc:262:slice$398 ($_DFF_P_) from module BRAM (D = \wd [0], Q = \memory[1] [0]).
Adding EN signal on $auto$ff.cc:262:slice$395 ($_DFF_P_) from module BRAM (D = \wd [29], Q = \memory[2] [29]).
Adding EN signal on $auto$ff.cc:262:slice$392 ($_DFF_P_) from module BRAM (D = \wd [26], Q = \memory[2] [26]).
Adding EN signal on $auto$ff.cc:262:slice$389 ($_DFF_P_) from module BRAM (D = \wd [23], Q = \memory[2] [23]).
Adding EN signal on $auto$ff.cc:262:slice$386 ($_DFF_P_) from module BRAM (D = \wd [20], Q = \memory[2] [20]).
Adding EN signal on $auto$ff.cc:262:slice$383 ($_DFF_P_) from module BRAM (D = \wd [17], Q = \memory[2] [17]).
Adding EN signal on $auto$ff.cc:262:slice$380 ($_DFF_P_) from module BRAM (D = \wd [14], Q = \memory[2] [14]).
Adding EN signal on $auto$ff.cc:262:slice$377 ($_DFF_P_) from module BRAM (D = \wd [11], Q = \memory[2] [11]).
Adding EN signal on $auto$ff.cc:262:slice$374 ($_DFF_P_) from module BRAM (D = \wd [8], Q = \memory[2] [8]).
Adding EN signal on $auto$ff.cc:262:slice$370 ($_DFF_P_) from module BRAM (D = \wd [4], Q = \memory[2] [4]).
Adding EN signal on $auto$ff.cc:262:slice$527 ($_DFF_P_) from module BRAM (D = \wd [1], Q = \memory[3] [1]).
Adding EN signal on $auto$ff.cc:262:slice$460 ($_DFF_P_) from module BRAM (D = \wd [30], Q = \memory[0] [30]).
Adding EN signal on $auto$ff.cc:262:slice$457 ($_DFF_P_) from module BRAM (D = \wd [27], Q = \memory[0] [27]).
Adding EN signal on $auto$ff.cc:262:slice$454 ($_DFF_P_) from module BRAM (D = \wd [24], Q = \memory[0] [24]).
Adding EN signal on $auto$ff.cc:262:slice$451 ($_DFF_P_) from module BRAM (D = \wd [21], Q = \memory[0] [21]).
Adding EN signal on $auto$ff.cc:262:slice$448 ($_DFF_P_) from module BRAM (D = \wd [18], Q = \memory[0] [18]).
Adding EN signal on $auto$ff.cc:262:slice$445 ($_DFF_P_) from module BRAM (D = \wd [15], Q = \memory[0] [15]).
Adding EN signal on $auto$ff.cc:262:slice$442 ($_DFF_P_) from module BRAM (D = \wd [12], Q = \memory[0] [12]).
Adding EN signal on $auto$ff.cc:262:slice$439 ($_DFF_P_) from module BRAM (D = \wd [9], Q = \memory[0] [9]).
Adding EN signal on $auto$ff.cc:262:slice$436 ($_DFF_P_) from module BRAM (D = \wd [6], Q = \memory[0] [6]).
Adding EN signal on $auto$ff.cc:262:slice$433 ($_DFF_P_) from module BRAM (D = \wd [3], Q = \memory[0] [3]).
Adding EN signal on $auto$ff.cc:262:slice$430 ($_DFF_P_) from module BRAM (D = \wd [0], Q = \memory[0] [0]).
Adding EN signal on $auto$ff.cc:262:slice$427 ($_DFF_P_) from module BRAM (D = \wd [29], Q = \memory[1] [29]).
Adding EN signal on $auto$ff.cc:262:slice$424 ($_DFF_P_) from module BRAM (D = \wd [26], Q = \memory[1] [26]).
Adding EN signal on $auto$ff.cc:262:slice$421 ($_DFF_P_) from module BRAM (D = \wd [23], Q = \memory[1] [23]).
Adding EN signal on $auto$ff.cc:262:slice$418 ($_DFF_P_) from module BRAM (D = \wd [20], Q = \memory[1] [20]).
Adding EN signal on $auto$ff.cc:262:slice$415 ($_DFF_P_) from module BRAM (D = \wd [17], Q = \memory[1] [17]).
Adding EN signal on $auto$ff.cc:262:slice$412 ($_DFF_P_) from module BRAM (D = \wd [14], Q = \memory[1] [14]).
Adding EN signal on $auto$ff.cc:262:slice$409 ($_DFF_P_) from module BRAM (D = \wd [11], Q = \memory[1] [11]).
Adding EN signal on $auto$ff.cc:262:slice$406 ($_DFF_P_) from module BRAM (D = \wd [8], Q = \memory[1] [8]).
Adding EN signal on $auto$ff.cc:262:slice$403 ($_DFF_P_) from module BRAM (D = \wd [5], Q = \memory[1] [5]).
Adding EN signal on $auto$ff.cc:262:slice$400 ($_DFF_P_) from module BRAM (D = \wd [2], Q = \memory[1] [2]).
Adding EN signal on $auto$ff.cc:262:slice$397 ($_DFF_P_) from module BRAM (D = \wd [31], Q = \memory[2] [31]).
Adding EN signal on $auto$ff.cc:262:slice$394 ($_DFF_P_) from module BRAM (D = \wd [28], Q = \memory[2] [28]).
Adding EN signal on $auto$ff.cc:262:slice$391 ($_DFF_P_) from module BRAM (D = \wd [25], Q = \memory[2] [25]).
Adding EN signal on $auto$ff.cc:262:slice$388 ($_DFF_P_) from module BRAM (D = \wd [22], Q = \memory[2] [22]).
Adding EN signal on $auto$ff.cc:262:slice$385 ($_DFF_P_) from module BRAM (D = \wd [19], Q = \memory[2] [19]).
Adding EN signal on $auto$ff.cc:262:slice$382 ($_DFF_P_) from module BRAM (D = \wd [16], Q = \memory[2] [16]).
Adding EN signal on $auto$ff.cc:262:slice$379 ($_DFF_P_) from module BRAM (D = \wd [13], Q = \memory[2] [13]).
Adding EN signal on $auto$ff.cc:262:slice$376 ($_DFF_P_) from module BRAM (D = \wd [10], Q = \memory[2] [10]).
Adding EN signal on $auto$ff.cc:262:slice$373 ($_DFF_P_) from module BRAM (D = \wd [7], Q = \memory[2] [7]).
Adding EN signal on $auto$ff.cc:262:slice$369 ($_DFF_P_) from module BRAM (D = \wd [3], Q = \memory[2] [3]).
Adding EN signal on $auto$ff.cc:262:slice$726 ($_DFF_P_) from module BRAM (D = \wd [31], Q = \memory[8] [31]).
Adding EN signal on $auto$ff.cc:262:slice$723 ($_DFF_P_) from module BRAM (D = \wd [28], Q = \memory[8] [28]).
Adding EN signal on $auto$ff.cc:262:slice$720 ($_DFF_P_) from module BRAM (D = \wd [25], Q = \memory[8] [25]).
Adding EN signal on $auto$ff.cc:262:slice$717 ($_DFF_P_) from module BRAM (D = \wd [22], Q = \memory[8] [22]).
Adding EN signal on $auto$ff.cc:262:slice$714 ($_DFF_P_) from module BRAM (D = \wd [19], Q = \memory[8] [19]).
Adding EN signal on $auto$ff.cc:262:slice$711 ($_DFF_P_) from module BRAM (D = \wd [16], Q = \memory[8] [16]).
Adding EN signal on $auto$ff.cc:262:slice$708 ($_DFF_P_) from module BRAM (D = \wd [13], Q = \memory[8] [13]).
Adding EN signal on $auto$ff.cc:262:slice$705 ($_DFF_P_) from module BRAM (D = \wd [10], Q = \memory[8] [10]).
Adding EN signal on $auto$ff.cc:262:slice$702 ($_DFF_P_) from module BRAM (D = \wd [7], Q = \memory[8] [7]).
Adding EN signal on $auto$ff.cc:262:slice$699 ($_DFF_P_) from module BRAM (D = \wd [4], Q = \memory[8] [4]).
Adding EN signal on $auto$ff.cc:262:slice$696 ($_DFF_P_) from module BRAM (D = \wd [1], Q = \memory[8] [1]).
Adding EN signal on $auto$ff.cc:262:slice$555 ($_DFF_P_) from module BRAM (D = \wd [29], Q = \memory[3] [29]).
Adding EN signal on $auto$ff.cc:262:slice$552 ($_DFF_P_) from module BRAM (D = \wd [26], Q = \memory[3] [26]).
Adding EN signal on $auto$ff.cc:262:slice$549 ($_DFF_P_) from module BRAM (D = \wd [23], Q = \memory[3] [23]).
Adding EN signal on $auto$ff.cc:262:slice$546 ($_DFF_P_) from module BRAM (D = \wd [20], Q = \memory[3] [20]).
Adding EN signal on $auto$ff.cc:262:slice$543 ($_DFF_P_) from module BRAM (D = \wd [17], Q = \memory[3] [17]).
Adding EN signal on $auto$ff.cc:262:slice$540 ($_DFF_P_) from module BRAM (D = \wd [14], Q = \memory[3] [14]).
Adding EN signal on $auto$ff.cc:262:slice$537 ($_DFF_P_) from module BRAM (D = \wd [11], Q = \memory[3] [11]).
Adding EN signal on $auto$ff.cc:262:slice$534 ($_DFF_P_) from module BRAM (D = \wd [8], Q = \memory[3] [8]).
Adding EN signal on $auto$ff.cc:262:slice$531 ($_DFF_P_) from module BRAM (D = \wd [5], Q = \memory[3] [5]).
Adding EN signal on $auto$ff.cc:262:slice$367 ($_DFF_P_) from module BRAM (D = \wd [1], Q = \memory[2] [1]).
Adding EN signal on $auto$ff.cc:262:slice$725 ($_DFF_P_) from module BRAM (D = \wd [30], Q = \memory[8] [30]).
Adding EN signal on $auto$ff.cc:262:slice$722 ($_DFF_P_) from module BRAM (D = \wd [27], Q = \memory[8] [27]).
Adding EN signal on $auto$ff.cc:262:slice$719 ($_DFF_P_) from module BRAM (D = \wd [24], Q = \memory[8] [24]).
Adding EN signal on $auto$ff.cc:262:slice$716 ($_DFF_P_) from module BRAM (D = \wd [21], Q = \memory[8] [21]).
Adding EN signal on $auto$ff.cc:262:slice$713 ($_DFF_P_) from module BRAM (D = \wd [18], Q = \memory[8] [18]).
Adding EN signal on $auto$ff.cc:262:slice$710 ($_DFF_P_) from module BRAM (D = \wd [15], Q = \memory[8] [15]).
Adding EN signal on $auto$ff.cc:262:slice$707 ($_DFF_P_) from module BRAM (D = \wd [12], Q = \memory[8] [12]).
Adding EN signal on $auto$ff.cc:262:slice$704 ($_DFF_P_) from module BRAM (D = \wd [9], Q = \memory[8] [9]).
Adding EN signal on $auto$ff.cc:262:slice$701 ($_DFF_P_) from module BRAM (D = \wd [6], Q = \memory[8] [6]).
Adding EN signal on $auto$ff.cc:262:slice$698 ($_DFF_P_) from module BRAM (D = \wd [3], Q = \memory[8] [3]).
Adding EN signal on $auto$ff.cc:262:slice$695 ($_DFF_P_) from module BRAM (D = \wd [0], Q = \memory[8] [0]).
Adding EN signal on $auto$ff.cc:262:slice$854 ($_DFF_P_) from module BRAM (D = \wd [31], Q = \memory[4] [31]).
Adding EN signal on $auto$ff.cc:262:slice$853 ($_DFF_P_) from module BRAM (D = \wd [30], Q = \memory[4] [30]).
Adding EN signal on $auto$ff.cc:262:slice$852 ($_DFF_P_) from module BRAM (D = \wd [29], Q = \memory[4] [29]).
Adding EN signal on $auto$ff.cc:262:slice$851 ($_DFF_P_) from module BRAM (D = \wd [28], Q = \memory[4] [28]).
Adding EN signal on $auto$ff.cc:262:slice$850 ($_DFF_P_) from module BRAM (D = \wd [27], Q = \memory[4] [27]).
Adding EN signal on $auto$ff.cc:262:slice$849 ($_DFF_P_) from module BRAM (D = \wd [26], Q = \memory[4] [26]).
Adding EN signal on $auto$ff.cc:262:slice$848 ($_DFF_P_) from module BRAM (D = \wd [25], Q = \memory[4] [25]).
Adding EN signal on $auto$ff.cc:262:slice$847 ($_DFF_P_) from module BRAM (D = \wd [24], Q = \memory[4] [24]).
Adding EN signal on $auto$ff.cc:262:slice$846 ($_DFF_P_) from module BRAM (D = \wd [23], Q = \memory[4] [23]).
Adding EN signal on $auto$ff.cc:262:slice$845 ($_DFF_P_) from module BRAM (D = \wd [22], Q = \memory[4] [22]).
Adding EN signal on $auto$ff.cc:262:slice$844 ($_DFF_P_) from module BRAM (D = \wd [21], Q = \memory[4] [21]).
Adding EN signal on $auto$ff.cc:262:slice$843 ($_DFF_P_) from module BRAM (D = \wd [20], Q = \memory[4] [20]).
Adding EN signal on $auto$ff.cc:262:slice$842 ($_DFF_P_) from module BRAM (D = \wd [19], Q = \memory[4] [19]).
Adding EN signal on $auto$ff.cc:262:slice$841 ($_DFF_P_) from module BRAM (D = \wd [18], Q = \memory[4] [18]).
Adding EN signal on $auto$ff.cc:262:slice$840 ($_DFF_P_) from module BRAM (D = \wd [17], Q = \memory[4] [17]).
Adding EN signal on $auto$ff.cc:262:slice$839 ($_DFF_P_) from module BRAM (D = \wd [16], Q = \memory[4] [16]).
Adding EN signal on $auto$ff.cc:262:slice$838 ($_DFF_P_) from module BRAM (D = \wd [15], Q = \memory[4] [15]).
Adding EN signal on $auto$ff.cc:262:slice$837 ($_DFF_P_) from module BRAM (D = \wd [14], Q = \memory[4] [14]).
Adding EN signal on $auto$ff.cc:262:slice$836 ($_DFF_P_) from module BRAM (D = \wd [13], Q = \memory[4] [13]).
Adding EN signal on $auto$ff.cc:262:slice$835 ($_DFF_P_) from module BRAM (D = \wd [12], Q = \memory[4] [12]).
Adding EN signal on $auto$ff.cc:262:slice$834 ($_DFF_P_) from module BRAM (D = \wd [11], Q = \memory[4] [11]).
Adding EN signal on $auto$ff.cc:262:slice$833 ($_DFF_P_) from module BRAM (D = \wd [10], Q = \memory[4] [10]).
Adding EN signal on $auto$ff.cc:262:slice$832 ($_DFF_P_) from module BRAM (D = \wd [9], Q = \memory[4] [9]).
Adding EN signal on $auto$ff.cc:262:slice$831 ($_DFF_P_) from module BRAM (D = \wd [8], Q = \memory[4] [8]).
Adding EN signal on $auto$ff.cc:262:slice$830 ($_DFF_P_) from module BRAM (D = \wd [7], Q = \memory[4] [7]).
Adding EN signal on $auto$ff.cc:262:slice$829 ($_DFF_P_) from module BRAM (D = \wd [6], Q = \memory[4] [6]).
Adding EN signal on $auto$ff.cc:262:slice$828 ($_DFF_P_) from module BRAM (D = \wd [5], Q = \memory[4] [5]).
Adding EN signal on $auto$ff.cc:262:slice$827 ($_DFF_P_) from module BRAM (D = \wd [4], Q = \memory[4] [4]).
Adding EN signal on $auto$ff.cc:262:slice$826 ($_DFF_P_) from module BRAM (D = \wd [3], Q = \memory[4] [3]).
Adding EN signal on $auto$ff.cc:262:slice$825 ($_DFF_P_) from module BRAM (D = \wd [2], Q = \memory[4] [2]).
Adding EN signal on $auto$ff.cc:262:slice$824 ($_DFF_P_) from module BRAM (D = \wd [1], Q = \memory[4] [1]).
Adding EN signal on $auto$ff.cc:262:slice$823 ($_DFF_P_) from module BRAM (D = \wd [0], Q = \memory[4] [0]).
Adding EN signal on $auto$ff.cc:262:slice$822 ($_DFF_P_) from module BRAM (D = \wd [31], Q = \memory[5] [31]).
Adding EN signal on $auto$ff.cc:262:slice$821 ($_DFF_P_) from module BRAM (D = \wd [30], Q = \memory[5] [30]).
Adding EN signal on $auto$ff.cc:262:slice$820 ($_DFF_P_) from module BRAM (D = \wd [29], Q = \memory[5] [29]).
Adding EN signal on $auto$ff.cc:262:slice$819 ($_DFF_P_) from module BRAM (D = \wd [28], Q = \memory[5] [28]).
Adding EN signal on $auto$ff.cc:262:slice$818 ($_DFF_P_) from module BRAM (D = \wd [27], Q = \memory[5] [27]).
Adding EN signal on $auto$ff.cc:262:slice$817 ($_DFF_P_) from module BRAM (D = \wd [26], Q = \memory[5] [26]).
Adding EN signal on $auto$ff.cc:262:slice$816 ($_DFF_P_) from module BRAM (D = \wd [25], Q = \memory[5] [25]).
Adding EN signal on $auto$ff.cc:262:slice$815 ($_DFF_P_) from module BRAM (D = \wd [24], Q = \memory[5] [24]).
Adding EN signal on $auto$ff.cc:262:slice$814 ($_DFF_P_) from module BRAM (D = \wd [23], Q = \memory[5] [23]).
Adding EN signal on $auto$ff.cc:262:slice$813 ($_DFF_P_) from module BRAM (D = \wd [22], Q = \memory[5] [22]).
Adding EN signal on $auto$ff.cc:262:slice$812 ($_DFF_P_) from module BRAM (D = \wd [21], Q = \memory[5] [21]).
Adding EN signal on $auto$ff.cc:262:slice$811 ($_DFF_P_) from module BRAM (D = \wd [20], Q = \memory[5] [20]).
Adding EN signal on $auto$ff.cc:262:slice$810 ($_DFF_P_) from module BRAM (D = \wd [19], Q = \memory[5] [19]).
Adding EN signal on $auto$ff.cc:262:slice$809 ($_DFF_P_) from module BRAM (D = \wd [18], Q = \memory[5] [18]).
Adding EN signal on $auto$ff.cc:262:slice$808 ($_DFF_P_) from module BRAM (D = \wd [17], Q = \memory[5] [17]).
Adding EN signal on $auto$ff.cc:262:slice$807 ($_DFF_P_) from module BRAM (D = \wd [16], Q = \memory[5] [16]).
Adding EN signal on $auto$ff.cc:262:slice$806 ($_DFF_P_) from module BRAM (D = \wd [15], Q = \memory[5] [15]).
Adding EN signal on $auto$ff.cc:262:slice$805 ($_DFF_P_) from module BRAM (D = \wd [14], Q = \memory[5] [14]).
Adding EN signal on $auto$ff.cc:262:slice$804 ($_DFF_P_) from module BRAM (D = \wd [13], Q = \memory[5] [13]).
Adding EN signal on $auto$ff.cc:262:slice$803 ($_DFF_P_) from module BRAM (D = \wd [12], Q = \memory[5] [12]).
Adding EN signal on $auto$ff.cc:262:slice$802 ($_DFF_P_) from module BRAM (D = \wd [11], Q = \memory[5] [11]).
Adding EN signal on $auto$ff.cc:262:slice$801 ($_DFF_P_) from module BRAM (D = \wd [10], Q = \memory[5] [10]).
Adding EN signal on $auto$ff.cc:262:slice$800 ($_DFF_P_) from module BRAM (D = \wd [9], Q = \memory[5] [9]).
Adding EN signal on $auto$ff.cc:262:slice$799 ($_DFF_P_) from module BRAM (D = \wd [8], Q = \memory[5] [8]).
Adding EN signal on $auto$ff.cc:262:slice$798 ($_DFF_P_) from module BRAM (D = \wd [7], Q = \memory[5] [7]).
Adding EN signal on $auto$ff.cc:262:slice$797 ($_DFF_P_) from module BRAM (D = \wd [6], Q = \memory[5] [6]).
Adding EN signal on $auto$ff.cc:262:slice$796 ($_DFF_P_) from module BRAM (D = \wd [5], Q = \memory[5] [5]).
Adding EN signal on $auto$ff.cc:262:slice$795 ($_DFF_P_) from module BRAM (D = \wd [4], Q = \memory[5] [4]).
Adding EN signal on $auto$ff.cc:262:slice$794 ($_DFF_P_) from module BRAM (D = \wd [3], Q = \memory[5] [3]).
Adding EN signal on $auto$ff.cc:262:slice$793 ($_DFF_P_) from module BRAM (D = \wd [2], Q = \memory[5] [2]).
Adding EN signal on $auto$ff.cc:262:slice$792 ($_DFF_P_) from module BRAM (D = \wd [1], Q = \memory[5] [1]).
Adding EN signal on $auto$ff.cc:262:slice$791 ($_DFF_P_) from module BRAM (D = \wd [0], Q = \memory[5] [0]).
Adding EN signal on $auto$ff.cc:262:slice$790 ($_DFF_P_) from module BRAM (D = \wd [31], Q = \memory[6] [31]).
Adding EN signal on $auto$ff.cc:262:slice$789 ($_DFF_P_) from module BRAM (D = \wd [30], Q = \memory[6] [30]).
Adding EN signal on $auto$ff.cc:262:slice$788 ($_DFF_P_) from module BRAM (D = \wd [29], Q = \memory[6] [29]).
Adding EN signal on $auto$ff.cc:262:slice$787 ($_DFF_P_) from module BRAM (D = \wd [28], Q = \memory[6] [28]).
Adding EN signal on $auto$ff.cc:262:slice$786 ($_DFF_P_) from module BRAM (D = \wd [27], Q = \memory[6] [27]).
Adding EN signal on $auto$ff.cc:262:slice$785 ($_DFF_P_) from module BRAM (D = \wd [26], Q = \memory[6] [26]).
Adding EN signal on $auto$ff.cc:262:slice$784 ($_DFF_P_) from module BRAM (D = \wd [25], Q = \memory[6] [25]).
Adding EN signal on $auto$ff.cc:262:slice$783 ($_DFF_P_) from module BRAM (D = \wd [24], Q = \memory[6] [24]).
Adding EN signal on $auto$ff.cc:262:slice$782 ($_DFF_P_) from module BRAM (D = \wd [23], Q = \memory[6] [23]).
Adding EN signal on $auto$ff.cc:262:slice$781 ($_DFF_P_) from module BRAM (D = \wd [22], Q = \memory[6] [22]).
Adding EN signal on $auto$ff.cc:262:slice$780 ($_DFF_P_) from module BRAM (D = \wd [21], Q = \memory[6] [21]).
Adding EN signal on $auto$ff.cc:262:slice$779 ($_DFF_P_) from module BRAM (D = \wd [20], Q = \memory[6] [20]).
Adding EN signal on $auto$ff.cc:262:slice$778 ($_DFF_P_) from module BRAM (D = \wd [19], Q = \memory[6] [19]).
Adding EN signal on $auto$ff.cc:262:slice$777 ($_DFF_P_) from module BRAM (D = \wd [18], Q = \memory[6] [18]).
Adding EN signal on $auto$ff.cc:262:slice$776 ($_DFF_P_) from module BRAM (D = \wd [17], Q = \memory[6] [17]).
Adding EN signal on $auto$ff.cc:262:slice$775 ($_DFF_P_) from module BRAM (D = \wd [16], Q = \memory[6] [16]).
Adding EN signal on $auto$ff.cc:262:slice$774 ($_DFF_P_) from module BRAM (D = \wd [15], Q = \memory[6] [15]).
Adding EN signal on $auto$ff.cc:262:slice$773 ($_DFF_P_) from module BRAM (D = \wd [14], Q = \memory[6] [14]).
Adding EN signal on $auto$ff.cc:262:slice$772 ($_DFF_P_) from module BRAM (D = \wd [13], Q = \memory[6] [13]).
Adding EN signal on $auto$ff.cc:262:slice$771 ($_DFF_P_) from module BRAM (D = \wd [12], Q = \memory[6] [12]).
Adding EN signal on $auto$ff.cc:262:slice$770 ($_DFF_P_) from module BRAM (D = \wd [11], Q = \memory[6] [11]).
Adding EN signal on $auto$ff.cc:262:slice$769 ($_DFF_P_) from module BRAM (D = \wd [10], Q = \memory[6] [10]).
Adding EN signal on $auto$ff.cc:262:slice$768 ($_DFF_P_) from module BRAM (D = \wd [9], Q = \memory[6] [9]).
Adding EN signal on $auto$ff.cc:262:slice$767 ($_DFF_P_) from module BRAM (D = \wd [8], Q = \memory[6] [8]).
Adding EN signal on $auto$ff.cc:262:slice$766 ($_DFF_P_) from module BRAM (D = \wd [7], Q = \memory[6] [7]).
Adding EN signal on $auto$ff.cc:262:slice$765 ($_DFF_P_) from module BRAM (D = \wd [6], Q = \memory[6] [6]).
Adding EN signal on $auto$ff.cc:262:slice$764 ($_DFF_P_) from module BRAM (D = \wd [5], Q = \memory[6] [5]).
Adding EN signal on $auto$ff.cc:262:slice$763 ($_DFF_P_) from module BRAM (D = \wd [4], Q = \memory[6] [4]).
Adding EN signal on $auto$ff.cc:262:slice$762 ($_DFF_P_) from module BRAM (D = \wd [3], Q = \memory[6] [3]).
Adding EN signal on $auto$ff.cc:262:slice$761 ($_DFF_P_) from module BRAM (D = \wd [2], Q = \memory[6] [2]).
Adding EN signal on $auto$ff.cc:262:slice$760 ($_DFF_P_) from module BRAM (D = \wd [1], Q = \memory[6] [1]).
Adding EN signal on $auto$ff.cc:262:slice$759 ($_DFF_P_) from module BRAM (D = \wd [0], Q = \memory[6] [0]).

yosys> opt_clean

3.53.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \BRAM..
Removed 288 unused cells and 23 unused wires.
<suppressed ~289 debug messages>

3.53.5. Rerunning OPT passes. (Removed registers in this run.)

yosys> opt_expr -full

3.53.6. Executing OPT_EXPR pass (perform const folding).
Optimizing module BRAM.

yosys> opt_merge

3.53.7. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\BRAM'.
Removed a total of 0 cells.

yosys> opt_dff

3.53.8. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.53.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \BRAM..

3.53.10. Finished fast OPT passes.

yosys> techmap -map +/techmap.v

3.54. Executing TECHMAP pass (map to technology primitives).

3.54.1. Executing Verilog-2005 frontend: /home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.54.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~71 debug messages>

yosys> opt -sat

3.55. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.55.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module BRAM.

yosys> opt_merge -nomux

3.55.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\BRAM'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.55.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \BRAM..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.55.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \BRAM.
Performed a total of 0 changes.

yosys> opt_merge

3.55.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\BRAM'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.55.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.55.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \BRAM..

yosys> opt_expr

3.55.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module BRAM.

3.55.9. Finished OPT passes. (There is nothing left to do.)

yosys> abc -dff

3.56. Executing ABC pass (technology mapping using ABC).

3.56.1. Summary of detected clock domains:
  160 cells in clk=\clk, en=\rce, arst={ }, srst={ }
  68 cells in clk=\clk, en=$memory\memory$wren[6][0][0]$y$199, arst={ }, srst={ }
  67 cells in clk=\clk, en=$memory\memory$wren[5][0][0]$y$193, arst={ }, srst={ }
  37 cells in clk=\clk, en=$memory\memory$wren[4][0][0]$y$187, arst={ }, srst={ }
  44 cells in clk=\clk, en=$memory\memory$wren[1][0][0]$y$159, arst={ }, srst={ }
  56 cells in clk=\clk, en=$memory\memory$wren[0][0][0]$y$149, arst={ }, srst={ }
  35 cells in clk=\clk, en=$memory\memory$wren[8][0][0]$y$215, arst={ }, srst={ }
  40 cells in clk=\clk, en=$memory\memory$wren[7][0][0]$y$205, arst={ }, srst={ }
  57 cells in clk=\clk, en=$memory\memory$wren[2][0][0]$y$169, arst={ }, srst={ }
  47 cells in clk=\clk, en=$memory\memory$wren[3][0][0]$y$177, arst={ }, srst={ }

3.56.2. Extracting gate netlist of module `\BRAM' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by \rce
Extracted 160 gates and 323 wires to a netlist network with 163 inputs and 32 outputs.

3.56.2.1. Executing ABC.

3.56.3. Extracting gate netlist of module `\BRAM' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $memory\memory$wren[6][0][0]$y$199
Extracted 68 gates and 138 wires to a netlist network with 70 inputs and 35 outputs.

3.56.3.1. Executing ABC.

3.56.4. Extracting gate netlist of module `\BRAM' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $memory\memory$wren[5][0][0]$y$193
Extracted 67 gates and 136 wires to a netlist network with 69 inputs and 34 outputs.

3.56.4.1. Executing ABC.

3.56.5. Extracting gate netlist of module `\BRAM' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $memory\memory$wren[4][0][0]$y$187
Extracted 37 gates and 73 wires to a netlist network with 36 inputs and 36 outputs.

3.56.5.1. Executing ABC.

3.56.6. Extracting gate netlist of module `\BRAM' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $memory\memory$wren[1][0][0]$y$159
Extracted 44 gates and 90 wires to a netlist network with 46 inputs and 33 outputs.

3.56.6.1. Executing ABC.

3.56.7. Extracting gate netlist of module `\BRAM' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $memory\memory$wren[0][0][0]$y$149
Extracted 56 gates and 114 wires to a netlist network with 58 inputs and 33 outputs.

3.56.7.1. Executing ABC.

3.56.8. Extracting gate netlist of module `\BRAM' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $memory\memory$wren[8][0][0]$y$215
Extracted 35 gates and 71 wires to a netlist network with 36 inputs and 33 outputs.

3.56.8.1. Executing ABC.

3.56.9. Extracting gate netlist of module `\BRAM' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $memory\memory$wren[7][0][0]$y$205
Extracted 40 gates and 80 wires to a netlist network with 40 inputs and 34 outputs.

3.56.9.1. Executing ABC.

3.56.10. Extracting gate netlist of module `\BRAM' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $memory\memory$wren[2][0][0]$y$169
Extracted 57 gates and 114 wires to a netlist network with 57 inputs and 36 outputs.

3.56.10.1. Executing ABC.

3.56.11. Extracting gate netlist of module `\BRAM' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $memory\memory$wren[3][0][0]$y$177
Extracted 47 gates and 96 wires to a netlist network with 49 inputs and 34 outputs.

3.56.11.1. Executing ABC.

yosys> abc -dff

3.57. Executing ABC pass (technology mapping using ABC).

3.57.1. Summary of detected clock domains:
  57 cells in clk=\clk, en=$abc$2349$memory\memory$wren[1][0][0]$y$159, arst={ }, srst={ }
  67 cells in clk=\clk, en=$abc$2247$memory\memory$wren[4][0][0]$y$187, arst={ }, srst={ }
  164 cells in clk=\clk, en=$abc$2547$memory\memory$wren[8][0][0]$y$215, arst={ }, srst={ }
  32 cells in clk=\clk, en=\rce, arst={ }, srst={ }
  37 cells in clk=\clk, en=$abc$2046$memory\memory$wren[6][0][0]$y$199, arst={ }, srst={ }
  36 cells in clk=\clk, en=$abc$2147$memory\memory$wren[5][0][0]$y$193, arst={ }, srst={ }
  72 cells in clk=\clk, en=$abc$2647$memory\memory$wren[7][0][0]$y$205, arst={ }, srst={ }
  66 cells in clk=\clk, en=$abc$2751$memory\memory$wren[2][0][0]$y$169, arst={ }, srst={ }
  44 cells in clk=\clk, en=$abc$2448$memory\memory$wren[0][0][0]$y$149, arst={ }, srst={ }
  35 cells in clk=\clk, en=$abc$2853$memory\memory$wren[3][0][0]$y$177, arst={ }, srst={ }

3.57.2. Extracting gate netlist of module `\BRAM' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$2349$memory\memory$wren[1][0][0]$y$159
Extracted 57 gates and 116 wires to a netlist network with 59 inputs and 34 outputs.

3.57.2.1. Executing ABC.

3.57.3. Extracting gate netlist of module `\BRAM' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$2247$memory\memory$wren[4][0][0]$y$187
Extracted 67 gates and 136 wires to a netlist network with 69 inputs and 34 outputs.

3.57.3.1. Executing ABC.

3.57.4. Extracting gate netlist of module `\BRAM' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$2547$memory\memory$wren[8][0][0]$y$215
Extracted 164 gates and 331 wires to a netlist network with 167 inputs and 33 outputs.

3.57.4.1. Executing ABC.

3.57.5. Extracting gate netlist of module `\BRAM' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by \rce
Extracted 32 gates and 64 wires to a netlist network with 32 inputs and 32 outputs.

3.57.5.1. Executing ABC.

3.57.6. Extracting gate netlist of module `\BRAM' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$2046$memory\memory$wren[6][0][0]$y$199
Extracted 37 gates and 75 wires to a netlist network with 38 inputs and 34 outputs.

3.57.6.1. Executing ABC.

3.57.7. Extracting gate netlist of module `\BRAM' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$2147$memory\memory$wren[5][0][0]$y$193
Extracted 36 gates and 72 wires to a netlist network with 36 inputs and 34 outputs.

3.57.7.1. Executing ABC.

3.57.8. Extracting gate netlist of module `\BRAM' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$2647$memory\memory$wren[7][0][0]$y$205
Extracted 72 gates and 145 wires to a netlist network with 73 inputs and 35 outputs.

3.57.8.1. Executing ABC.

3.57.9. Extracting gate netlist of module `\BRAM' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$2751$memory\memory$wren[2][0][0]$y$169
Extracted 66 gates and 134 wires to a netlist network with 68 inputs and 33 outputs.

3.57.9.1. Executing ABC.

3.57.10. Extracting gate netlist of module `\BRAM' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$2448$memory\memory$wren[0][0][0]$y$149
Extracted 44 gates and 90 wires to a netlist network with 46 inputs and 33 outputs.

3.57.10.1. Executing ABC.

3.57.11. Extracting gate netlist of module `\BRAM' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$2853$memory\memory$wren[3][0][0]$y$177
Extracted 35 gates and 71 wires to a netlist network with 36 inputs and 34 outputs.

3.57.11.1. Executing ABC.

yosys> abc -dff

3.58. Executing ABC pass (technology mapping using ABC).

3.58.1. Summary of detected clock domains:
  50 cells in clk=\clk, en=$abc$3850$abc$2448$memory\memory$wren[0][0][0]$y$149, arst={ }, srst={ }
  52 cells in clk=\clk, en=$abc$2953$abc$2349$memory\memory$wren[1][0][0]$y$159, arst={ }, srst={ }
  48 cells in clk=\clk, en=$abc$3053$abc$2247$memory\memory$wren[4][0][0]$y$187, arst={ }, srst={ }
  163 cells in clk=\clk, en=$abc$3153$abc$2547$memory\memory$wren[8][0][0]$y$215, arst={ }, srst={ }
  32 cells in clk=\clk, en=\rce, arst={ }, srst={ }
  44 cells in clk=\clk, en=$abc$3446$abc$2046$memory\memory$wren[6][0][0]$y$199, arst={ }, srst={ }
  54 cells in clk=\clk, en=$abc$3546$abc$2147$memory\memory$wren[5][0][0]$y$193, arst={ }, srst={ }
  62 cells in clk=\clk, en=$abc$3646$abc$2647$memory\memory$wren[7][0][0]$y$205, arst={ }, srst={ }
  66 cells in clk=\clk, en=$abc$3751$abc$2751$memory\memory$wren[2][0][0]$y$169, arst={ }, srst={ }
  35 cells in clk=\clk, en=$abc$3949$abc$2853$memory\memory$wren[3][0][0]$y$177, arst={ }, srst={ }

3.58.2. Extracting gate netlist of module `\BRAM' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$3850$abc$2448$memory\memory$wren[0][0][0]$y$149
Extracted 50 gates and 102 wires to a netlist network with 52 inputs and 34 outputs.

3.58.2.1. Executing ABC.

3.58.3. Extracting gate netlist of module `\BRAM' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$2953$abc$2349$memory\memory$wren[1][0][0]$y$159
Extracted 52 gates and 106 wires to a netlist network with 54 inputs and 34 outputs.

3.58.3.1. Executing ABC.

3.58.4. Extracting gate netlist of module `\BRAM' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$3053$abc$2247$memory\memory$wren[4][0][0]$y$187
Extracted 48 gates and 98 wires to a netlist network with 50 inputs and 34 outputs.

3.58.4.1. Executing ABC.

3.58.5. Extracting gate netlist of module `\BRAM' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$3153$abc$2547$memory\memory$wren[8][0][0]$y$215
Extracted 163 gates and 330 wires to a netlist network with 167 inputs and 33 outputs.

3.58.5.1. Executing ABC.

3.58.6. Extracting gate netlist of module `\BRAM' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by \rce
Extracted 32 gates and 64 wires to a netlist network with 32 inputs and 32 outputs.

3.58.6.1. Executing ABC.

3.58.7. Extracting gate netlist of module `\BRAM' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$3446$abc$2046$memory\memory$wren[6][0][0]$y$199
Extracted 44 gates and 90 wires to a netlist network with 46 inputs and 34 outputs.

3.58.7.1. Executing ABC.

3.58.8. Extracting gate netlist of module `\BRAM' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$3546$abc$2147$memory\memory$wren[5][0][0]$y$193
Extracted 54 gates and 110 wires to a netlist network with 56 inputs and 34 outputs.

3.58.8.1. Executing ABC.

3.58.9. Extracting gate netlist of module `\BRAM' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$3646$abc$2647$memory\memory$wren[7][0][0]$y$205
Extracted 62 gates and 126 wires to a netlist network with 64 inputs and 34 outputs.

3.58.9.1. Executing ABC.

3.58.10. Extracting gate netlist of module `\BRAM' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$3751$abc$2751$memory\memory$wren[2][0][0]$y$169
Extracted 66 gates and 134 wires to a netlist network with 68 inputs and 33 outputs.

3.58.10.1. Executing ABC.

3.58.11. Extracting gate netlist of module `\BRAM' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$3949$abc$2853$memory\memory$wren[3][0][0]$y$177
Extracted 35 gates and 71 wires to a netlist network with 36 inputs and 34 outputs.

3.58.11.1. Executing ABC.

yosys> abc -dff

3.59. Executing ABC pass (technology mapping using ABC).

3.59.1. Summary of detected clock domains:
  71 cells in clk=\clk, en=$abc$4946$abc$3751$abc$2751$memory\memory$wren[2][0][0]$y$169, arst={ }, srst={ }
  56 cells in clk=\clk, en=$abc$4049$abc$3850$abc$2448$memory\memory$wren[0][0][0]$y$149, arst={ }, srst={ }
  46 cells in clk=\clk, en=$abc$4149$abc$2953$abc$2349$memory\memory$wren[1][0][0]$y$159, arst={ }, srst={ }
  44 cells in clk=\clk, en=$abc$4249$abc$3053$abc$2247$memory\memory$wren[4][0][0]$y$187, arst={ }, srst={ }
  163 cells in clk=\clk, en=$abc$4349$abc$3153$abc$2547$memory\memory$wren[8][0][0]$y$215, arst={ }, srst={ }
  32 cells in clk=\clk, en=\rce, arst={ }, srst={ }
  49 cells in clk=\clk, en=$abc$4642$abc$3446$abc$2046$memory\memory$wren[6][0][0]$y$199, arst={ }, srst={ }
  58 cells in clk=\clk, en=$abc$4742$abc$3546$abc$2147$memory\memory$wren[5][0][0]$y$193, arst={ }, srst={ }
  52 cells in clk=\clk, en=$abc$4842$abc$3646$abc$2647$memory\memory$wren[7][0][0]$y$205, arst={ }, srst={ }
  35 cells in clk=\clk, en=$abc$5045$abc$3949$abc$2853$memory\memory$wren[3][0][0]$y$177, arst={ }, srst={ }

3.59.2. Extracting gate netlist of module `\BRAM' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$4946$abc$3751$abc$2751$memory\memory$wren[2][0][0]$y$169
Extracted 71 gates and 144 wires to a netlist network with 73 inputs and 34 outputs.

3.59.2.1. Executing ABC.

3.59.3. Extracting gate netlist of module `\BRAM' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$4049$abc$3850$abc$2448$memory\memory$wren[0][0][0]$y$149
Extracted 56 gates and 114 wires to a netlist network with 58 inputs and 34 outputs.

3.59.3.1. Executing ABC.

3.59.4. Extracting gate netlist of module `\BRAM' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$4149$abc$2953$abc$2349$memory\memory$wren[1][0][0]$y$159
Extracted 46 gates and 94 wires to a netlist network with 48 inputs and 34 outputs.

3.59.4.1. Executing ABC.

3.59.5. Extracting gate netlist of module `\BRAM' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$4249$abc$3053$abc$2247$memory\memory$wren[4][0][0]$y$187
Extracted 44 gates and 90 wires to a netlist network with 46 inputs and 34 outputs.

3.59.5.1. Executing ABC.

3.59.6. Extracting gate netlist of module `\BRAM' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$4349$abc$3153$abc$2547$memory\memory$wren[8][0][0]$y$215
Extracted 163 gates and 330 wires to a netlist network with 167 inputs and 33 outputs.

3.59.6.1. Executing ABC.

3.59.7. Extracting gate netlist of module `\BRAM' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by \rce
Extracted 32 gates and 64 wires to a netlist network with 32 inputs and 32 outputs.

3.59.7.1. Executing ABC.

3.59.8. Extracting gate netlist of module `\BRAM' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$4642$abc$3446$abc$2046$memory\memory$wren[6][0][0]$y$199
Extracted 49 gates and 100 wires to a netlist network with 51 inputs and 34 outputs.

3.59.8.1. Executing ABC.

3.59.9. Extracting gate netlist of module `\BRAM' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$4742$abc$3546$abc$2147$memory\memory$wren[5][0][0]$y$193
Extracted 58 gates and 118 wires to a netlist network with 60 inputs and 34 outputs.

3.59.9.1. Executing ABC.

3.59.10. Extracting gate netlist of module `\BRAM' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$4842$abc$3646$abc$2647$memory\memory$wren[7][0][0]$y$205
Extracted 52 gates and 106 wires to a netlist network with 54 inputs and 33 outputs.

3.59.10.1. Executing ABC.

3.59.11. Extracting gate netlist of module `\BRAM' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$5045$abc$3949$abc$2853$memory\memory$wren[3][0][0]$y$177
Extracted 35 gates and 71 wires to a netlist network with 36 inputs and 34 outputs.

3.59.11.1. Executing ABC.

yosys> opt_ffinv

3.60. Executing OPT_FFINV pass (push inverters through FFs).
Discovering LUTs.
Pushed 0 inverters.

yosys> opt -sat

3.61. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.61.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module BRAM.

yosys> opt_merge -nomux

3.61.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\BRAM'.
<suppressed ~9 debug messages>
Removed a total of 3 cells.

yosys> opt_muxtree

3.61.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \BRAM..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.61.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \BRAM.
Performed a total of 0 changes.

yosys> opt_merge

3.61.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\BRAM'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.61.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.61.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \BRAM..
Removed 0 unused cells and 6345 unused wires.
<suppressed ~9 debug messages>

yosys> opt_expr

3.61.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module BRAM.

3.61.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.61.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \BRAM..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.61.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \BRAM.
Performed a total of 0 changes.

yosys> opt_merge

3.61.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\BRAM'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.61.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.61.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \BRAM..

yosys> opt_expr

3.61.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module BRAM.

3.61.16. Finished OPT passes. (There is nothing left to do.)

yosys> bmuxmap

3.62. Executing BMUXMAP pass.

yosys> demuxmap

3.63. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> abc -script /home/users/temp_dir/yosys_e2aw51/abc_tmp_1.scr

3.64. Executing ABC pass (technology mapping using ABC).

3.64.1. Extracting gate netlist of module `\BRAM' to `<abc-temp-dir>/input.blif'..
Extracted 283 gates and 585 wires to a netlist network with 302 inputs and 41 outputs.

3.64.1.1. Executing ABC.
DE:   #PIs = 302  #Luts =   106  Max Lvl =   2  Avg Lvl =   2.00  [   0.30 sec. at Pass 0]
DE:   #PIs = 302  #Luts =   106  Max Lvl =   2  Avg Lvl =   2.00  [   3.13 sec. at Pass 1]
DE:   #PIs = 302  #Luts =   106  Max Lvl =   2  Avg Lvl =   2.00  [   0.91 sec. at Pass 2]
DE:   #PIs = 302  #Luts =   106  Max Lvl =   2  Avg Lvl =   2.00  [   1.31 sec. at Pass 3]
DE:   #PIs = 302  #Luts =   106  Max Lvl =   2  Avg Lvl =   2.00  [   0.96 sec. at Pass 4]
DE:   #PIs = 302  #Luts =   106  Max Lvl =   2  Avg Lvl =   2.00  [   1.28 sec. at Pass 5]
DE:   #PIs = 302  #Luts =   106  Max Lvl =   2  Avg Lvl =   2.00  [   2.87 sec. at Pass 6]
DE:   #PIs = 302  #Luts =   106  Max Lvl =   2  Avg Lvl =   2.00  [   0.37 sec. at Pass 7]

yosys> opt_expr

3.65. Executing OPT_EXPR pass (perform const folding).
Optimizing module BRAM.

yosys> opt_merge -nomux

3.66. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\BRAM'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.67. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \BRAM..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.68. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \BRAM.
Performed a total of 0 changes.

yosys> opt_merge

3.69. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\BRAM'.
Removed a total of 0 cells.

yosys> opt_share

3.70. Executing OPT_SHARE pass.

yosys> opt_dff

3.71. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.72. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \BRAM..
Removed 0 unused cells and 585 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.73. Executing OPT_EXPR pass (perform const folding).
Optimizing module BRAM.
MAX OPT ITERATION = 1

yosys> opt_ffinv

3.74. Executing OPT_FFINV pass (push inverters through FFs).
Discovering LUTs.
Pushed 0 inverters.

yosys> stat

3.75. Printing statistics.

=== BRAM ===

   Number of wires:                383
   Number of wire bits:            523
   Number of public wires:           9
   Number of public wire bits:     149
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                426
     $_DFFE_PP_                    320
     $lut                          106


yosys> shregmap -minlen 8 -maxlen 20

3.76. Executing SHREGMAP pass (map shift registers).
Converted 0 dff cells into 0 shift registers.

yosys> dfflegalize -cell $_DFF_?_ 0 -cell $_DFF_???_ 0 -cell $_DFFE_????_ 0 -cell $_DFFSR_???_ 0 -cell $_DFFSRE_????_ 0 -cell $_DLATCHSR_PPP_ 0

3.77. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

yosys> stat

3.78. Printing statistics.

=== BRAM ===

   Number of wires:                383
   Number of wire bits:            523
   Number of public wires:           9
   Number of public wire bits:     149
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                426
     $_DFFE_PP0P_                  320
     $lut                          106


yosys> techmap -map +/techmap.v -map +/rapidsilicon/genesis/ffs_map.v

3.79. Executing TECHMAP pass (map to technology primitives).

3.79.1. Executing Verilog-2005 frontend: /home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.79.2. Executing Verilog-2005 frontend: /home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/ffs_map.v
Parsing Verilog input from `/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/ffs_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP0N_'.
Generating RTLIL representation for module `\$_DFFE_PN0P_'.
Generating RTLIL representation for module `\$_DFFE_PN0N_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP1N_'.
Generating RTLIL representation for module `\$_DFFE_PN1P_'.
Generating RTLIL representation for module `\$_DFFE_PN1N_'.
Generating RTLIL representation for module `\$_DFFSR_PPP_'.
Generating RTLIL representation for module `\$_DFFSR_PNP_'.
Generating RTLIL representation for module `\$_DFFSR_PNN_'.
Generating RTLIL representation for module `\$_DFFSR_PPN_'.
Generating RTLIL representation for module `\$_DFFSR_NPP_'.
Generating RTLIL representation for module `\$_DFFSR_NNP_'.
Generating RTLIL representation for module `\$_DFFSR_NNN_'.
Generating RTLIL representation for module `\$_DFFSR_NPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PNPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPNP_'.
Generating RTLIL representation for module `\$_DFFSRE_PNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PNPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PPNN_'.
Generating RTLIL representation for module `\$_DFFSRE_PNNN_'.
Generating RTLIL representation for module `\$_DLATCHSR_PPP_'.
Generating RTLIL representation for module `\$_DLATCHSR_NPP_'.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP0N_'.
Generating RTLIL representation for module `\$_DFFE_NN0P_'.
Generating RTLIL representation for module `\$_DFFE_NN0N_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_NP1N_'.
Generating RTLIL representation for module `\$_DFFE_NN1P_'.
Generating RTLIL representation for module `\$_DFFE_NN1N_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNPP_'.
Generating RTLIL representation for module `\$_DFFSRE_NPNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPN_'.
Generating RTLIL representation for module `\$_DFFSRE_NNPN_'.
Generating RTLIL representation for module `\$_DFFSRE_NPNN_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNN_'.
Generating RTLIL representation for module `\$__SHREG_DFF_P_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PN0_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NN0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFF_PN1_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_NN1_'.
Successfully finished Verilog frontend.

3.79.3. Continuing TECHMAP pass.
Using template \$_DFFE_PP0P_ for cells of type $_DFFE_PP0P_.
Using extmapper simplemap for cells of type $lut.
Using extmapper simplemap for cells of type $logic_not.
No more expansions possible.
<suppressed ~882 debug messages>

yosys> opt_expr -mux_undef

3.80. Executing OPT_EXPR pass (perform const folding).
Optimizing module BRAM.
<suppressed ~5379 debug messages>

yosys> simplemap

3.81. Executing SIMPLEMAP pass (map simple cells to gate primitives).

yosys> opt_expr

3.82. Executing OPT_EXPR pass (perform const folding).
Optimizing module BRAM.

yosys> opt_merge

3.83. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\BRAM'.
<suppressed ~27 debug messages>
Removed a total of 9 cells.

yosys> opt_dff -nodffe -nosdff

3.84. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.85. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \BRAM..
Removed 0 unused cells and 2387 unused wires.
<suppressed ~1 debug messages>

yosys> opt -nodffe -nosdff

3.86. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.86.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module BRAM.

yosys> opt_merge -nomux

3.86.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\BRAM'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.86.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \BRAM..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.86.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \BRAM.
Performed a total of 0 changes.

yosys> opt_merge

3.86.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\BRAM'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.86.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.86.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \BRAM..

yosys> opt_expr

3.86.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module BRAM.

3.86.9. Finished OPT passes. (There is nothing left to do.)

yosys> abc -script /home/users/temp_dir/yosys_e2aw51/abc_tmp_2.scr

3.87. Executing ABC pass (technology mapping using ABC).

3.87.1. Extracting gate netlist of module `\BRAM' to `<abc-temp-dir>/input.blif'..
Extracted 298 gates and 601 wires to a netlist network with 302 inputs and 41 outputs.

3.87.1.1. Executing ABC.
DE:   #PIs = 302  #Luts =   106  Max Lvl =   2  Avg Lvl =   2.00  [   0.29 sec. at Pass 0]
DE:   #PIs = 302  #Luts =   106  Max Lvl =   2  Avg Lvl =   2.00  [   2.27 sec. at Pass 1]
DE:   #PIs = 302  #Luts =   106  Max Lvl =   2  Avg Lvl =   2.00  [   0.98 sec. at Pass 2]
DE:   #PIs = 302  #Luts =   106  Max Lvl =   2  Avg Lvl =   2.00  [   1.53 sec. at Pass 3]
DE:   #PIs = 302  #Luts =   106  Max Lvl =   2  Avg Lvl =   2.00  [   1.08 sec. at Pass 4]
DE:   #PIs = 302  #Luts =   106  Max Lvl =   2  Avg Lvl =   2.00  [   1.39 sec. at Pass 5]
DE:   #PIs = 302  #Luts =   106  Max Lvl =   2  Avg Lvl =   2.00  [   3.22 sec. at Pass 6]
DE:   #PIs = 302  #Luts =   106  Max Lvl =   2  Avg Lvl =   2.00  [   0.48 sec. at Pass 7]

yosys> opt_expr

3.88. Executing OPT_EXPR pass (perform const folding).
Optimizing module BRAM.

yosys> opt_merge -nomux

3.89. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\BRAM'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.90. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \BRAM..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.91. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \BRAM.
Performed a total of 0 changes.

yosys> opt_merge

3.92. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\BRAM'.
Removed a total of 0 cells.

yosys> opt_share

3.93. Executing OPT_SHARE pass.

yosys> opt_dff

3.94. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.95. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \BRAM..
Removed 0 unused cells and 536 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.96. Executing OPT_EXPR pass (perform const folding).
Optimizing module BRAM.
MAX OPT ITERATION = 1

yosys> hierarchy -check

3.97. Executing HIERARCHY pass (managing design hierarchy).

3.97.1. Analyzing design hierarchy..
Top module:  \BRAM

3.97.2. Analyzing design hierarchy..
Top module:  \BRAM
Removed 0 unused modules.

yosys> stat

3.98. Printing statistics.

=== BRAM ===

   Number of wires:                383
   Number of wire bits:            523
   Number of public wires:           9
   Number of public wire bits:     149
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                426
     $lut                          106
     dffsre                        320


yosys> opt_clean -purge

3.99. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \BRAM..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

yosys> write_verilog -noattr -nohex synthesized.v

3.100. Executing Verilog backend.
Dumping module `\BRAM'.

Warnings: 5 unique messages, 5 total
End of script. Logfile hash: 693f48e5a4, CPU: user 3.05s system 0.17s, MEM: 34.38 MB peak
Yosys 0.18+10 (git sha1 7a7a25778, gcc 9.1.0 -fPIC -Os)
Time spent: 95% 6x abc (61 sec), 1% 27x opt_expr (0 sec), ...
real 50.23
user 57.06
sys 6.77
