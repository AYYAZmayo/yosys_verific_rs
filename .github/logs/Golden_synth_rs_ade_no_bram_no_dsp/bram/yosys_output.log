
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys-Verific 0.0.47
 Yosys 0.18+10 (git sha1 8217e4c48, gcc 9.1.0 -fPIC -Os)


-- Executing script file `yosys.ys' --
echo on

yosys> plugin -i synth-rs

yosys> read -verific

yosys> read -incdir .

yosys> verific -vlog-incdir .

1. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Apr22_SW_Release, released at Thu Apr 28 20:08:21 2022.

yosys> verilog_defaults -add -I.

yosys> read -vlog2k bram_v1.v bram_v2.v

yosys> verific -vlog2k bram_v1.v bram_v2.v

2. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Apr22_SW_Release, released at Thu Apr 28 20:08:21 2022.
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'bram_v1.v'
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'bram_v2.v'
VERIFIC-WARNING [VERI-1206] bram_v2.v:39: overwriting previous definition of module 'BRAM'
VERIFIC-INFO [VERI-2142] bram_v1.v:39: previous definition of design element 'BRAM' is here
VERIFIC-WARNING [VERI-1206] bram_v2.v:71: overwriting previous definition of module 'BRAM_32x512'
VERIFIC-INFO [VERI-2142] bram_v1.v:71: previous definition of design element 'BRAM_32x512' is here
VERIFIC-WARNING [VERI-1206] bram_v2.v:104: overwriting previous definition of module 'BRAM_16x1024'
VERIFIC-INFO [VERI-2142] bram_v1.v:104: previous definition of design element 'BRAM_16x1024' is here
VERIFIC-WARNING [VERI-1206] bram_v2.v:137: overwriting previous definition of module 'BRAM_8x2048'
VERIFIC-INFO [VERI-2142] bram_v1.v:137: previous definition of design element 'BRAM_8x2048' is here
VERIFIC-WARNING [VERI-1206] bram_v2.v:169: overwriting previous definition of module 'BRAM_4x4096'
VERIFIC-INFO [VERI-2142] bram_v1.v:169: previous definition of design element 'BRAM_4x4096' is here

yosys> synth_rs -top BRAM -tech genesis -goal area -de -no_dsp -no_bram -verilog synthesized.v

3. Executing synth_rs pass: v0.4.57

yosys> read_verilog -lib -specify -nomem2reg +/rapidsilicon/common/cells_sim.v +/rapidsilicon/genesis/cells_sim.v

3.1. Executing Verilog-2005 frontend: /home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v
Parsing Verilog input from `/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\inv'.
Generating RTLIL representation for module `\buff'.
Generating RTLIL representation for module `\logic_0'.
Generating RTLIL representation for module `\logic_1'.
Generating RTLIL representation for module `\gclkbuff'.
Successfully finished Verilog frontend.

3.2. Executing Verilog-2005 frontend: /home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/cells_sim.v
Parsing Verilog input from `/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\dffsre'.
Generating RTLIL representation for module `\dffnsre'.
Generating RTLIL representation for module `\latchsre'.
Generating RTLIL representation for module `\latchnsre'.
Generating RTLIL representation for module `\io_scff'.
Generating RTLIL representation for module `\scff'.
Generating RTLIL representation for module `\sh_dff'.
Generating RTLIL representation for module `\adder_carry'.
Generating RTLIL representation for module `\sdffr'.
Generating RTLIL representation for module `\sdffs'.
Generating RTLIL representation for module `\TDP_BRAM18'.
Generating RTLIL representation for module `\TDP36K'.
Generating RTLIL representation for module `\RS_DSP1'.
Generating RTLIL representation for module `\RS_DSP2'.
Generating RTLIL representation for module `\RS_DSP2_MULT'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGIN_REGOUT'.
Generating RTLIL representation for module `\dsp_t1_sim'.
Generating RTLIL representation for module `\dsp_t1_20x18x64'.
Generating RTLIL representation for module `\dsp_t1_10x9x32'.
Successfully finished Verilog frontend.

yosys> hierarchy -check -top BRAM

3.3. Executing HIERARCHY pass (managing design hierarchy).
VERIFIC-INFO [VERI-1018] bram_v2.v:1: compiling module 'BRAM'
VERIFIC-INFO [VERI-2571] bram_v2.v:22: extracting RAM for identifier 'memory'
Importing module BRAM.

3.3.1. Analyzing design hierarchy..
Top module:  \BRAM

3.3.2. Analyzing design hierarchy..
Top module:  \BRAM
Removed 0 unused modules.

yosys> proc

3.4. Executing PROC pass (convert processes to netlists).

yosys> proc_clean

3.4.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> proc_rmdead

3.4.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

yosys> proc_prune

3.4.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

yosys> proc_init

3.4.4. Executing PROC_INIT pass (extract init attributes).

yosys> proc_arst

3.4.5. Executing PROC_ARST pass (detect async resets in processes).

yosys> proc_rom

3.4.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

yosys> proc_mux

3.4.7. Executing PROC_MUX pass (convert decision trees to multiplexers).

yosys> proc_dlatch

3.4.8. Executing PROC_DLATCH pass (convert process syncs to latches).

yosys> proc_dff

3.4.9. Executing PROC_DFF pass (convert process syncs to FFs).

yosys> proc_memwr

3.4.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

yosys> proc_clean

3.4.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> opt_expr -keepdc

3.4.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module BRAM.
<suppressed ~1 debug messages>

yosys> flatten

3.5. Executing FLATTEN pass (flatten design).

yosys> tribuf -logic

3.6. Executing TRIBUF pass.

yosys> deminout

3.7. Executing DEMINOUT pass (demote inout ports to input or output).

yosys> opt_expr

3.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module BRAM.

yosys> opt_clean

3.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \BRAM..
Removed 1 unused cells and 6 unused wires.
<suppressed ~4 debug messages>

yosys> check

3.10. Executing CHECK pass (checking for obvious problems).
Checking module BRAM...
Found and reported 0 problems.

yosys> opt -nodffe -nosdff

3.11. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module BRAM.

yosys> opt_merge -nomux

3.11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\BRAM'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.11.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \BRAM..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

yosys> opt_reduce

3.11.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \BRAM.
Performed a total of 0 changes.

yosys> opt_merge

3.11.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\BRAM'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.11.6. Executing OPT_DFF pass (perform DFF optimizations).
Removing never-active async load on $verific$rq_reg$bram_v2.v:30$36 ($aldff) from module BRAM.

yosys> opt_clean

3.11.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \BRAM..

yosys> opt_expr

3.11.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module BRAM.

3.11.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.11.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \BRAM..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

yosys> opt_reduce

3.11.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \BRAM.
Performed a total of 0 changes.

yosys> opt_merge

3.11.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\BRAM'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.11.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.11.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \BRAM..

yosys> opt_expr

3.11.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module BRAM.

3.11.16. Finished OPT passes. (There is nothing left to do.)

yosys> fsm -encoding binary

3.12. Executing FSM pass (extract and optimize FSM).

yosys> fsm_detect

3.12.1. Executing FSM_DETECT pass (finding FSMs in design).

yosys> fsm_extract

3.12.2. Executing FSM_EXTRACT pass (extracting FSM from design).

yosys> fsm_opt

3.12.3. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> opt_clean

3.12.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \BRAM..

yosys> fsm_opt

3.12.5. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> fsm_recode -encoding binary

3.12.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

yosys> fsm_info

3.12.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

yosys> fsm_map

3.12.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

yosys> opt -sat

3.13. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module BRAM.

yosys> opt_merge -nomux

3.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\BRAM'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \BRAM..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

yosys> opt_reduce

3.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \BRAM.
Performed a total of 0 changes.

yosys> opt_merge

3.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\BRAM'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.13.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $verific$rq_reg$bram_v2.v:30$36 ($dff) from module BRAM (D = $verific$n39$16, Q = \rq).

yosys> opt_clean

3.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \BRAM..
Removed 1 unused cells and 1 unused wires.
<suppressed ~2 debug messages>

yosys> opt_expr

3.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module BRAM.

3.13.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.13.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \BRAM..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

yosys> opt_reduce

3.13.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \BRAM.
Performed a total of 0 changes.

yosys> opt_merge

3.13.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\BRAM'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.13.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.13.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \BRAM..

yosys> opt_expr

3.13.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module BRAM.

3.13.16. Finished OPT passes. (There is nothing left to do.)

yosys> wreduce -keepdc

3.14. Executing WREDUCE pass (reducing word size of cells).
Removed top 28 address bits (of 32) from memory init port BRAM.$verific$memory$bram_v2.v:22$10 (memory).
Removed top 28 address bits (of 32) from memory init port BRAM.$verific$memory$bram_v2.v:22$11 (memory).
Removed top 28 address bits (of 32) from memory init port BRAM.$verific$memory$bram_v2.v:22$4 (memory).
Removed top 28 address bits (of 32) from memory init port BRAM.$verific$memory$bram_v2.v:22$5 (memory).
Removed top 28 address bits (of 32) from memory init port BRAM.$verific$memory$bram_v2.v:22$6 (memory).
Removed top 28 address bits (of 32) from memory init port BRAM.$verific$memory$bram_v2.v:22$7 (memory).
Removed top 28 address bits (of 32) from memory init port BRAM.$verific$memory$bram_v2.v:22$8 (memory).
Removed top 28 address bits (of 32) from memory init port BRAM.$verific$memory$bram_v2.v:22$9 (memory).

yosys> peepopt

3.15. Executing PEEPOPT pass (run peephole optimizers).

yosys> pmuxtree

3.16. Executing PMUXTREE pass.

yosys> opt_clean

3.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \BRAM..

yosys> alumacc

3.18. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module BRAM:
  created 0 $alu and 0 $macc cells.

yosys> opt

3.19. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module BRAM.

yosys> opt_merge -nomux

3.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\BRAM'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \BRAM..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

yosys> opt_reduce

3.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \BRAM.
Performed a total of 0 changes.

yosys> opt_merge

3.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\BRAM'.
Removed a total of 0 cells.

yosys> opt_dff

3.19.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.19.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \BRAM..

yosys> opt_expr

3.19.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module BRAM.

3.19.9. Finished OPT passes. (There is nothing left to do.)

yosys> stat

3.20. Printing statistics.

=== BRAM ===

   Number of wires:                 14
   Number of wire bits:            185
   Number of public wires:           8
   Number of public wire bits:     117
   Number of memories:               1
   Number of memory bits:          288
   Number of processes:              0
   Number of cells:                 16
     $and                            1
     $dffe                           1
     $meminit                        8
     $memrd                          1
     $memwr                          1
     $mux                            1
     $not                            1
     $reduce_or                      2


yosys> memory -nomap

3.21. Executing MEMORY pass.

yosys> opt_mem

3.21.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

yosys> opt_mem_priority

3.21.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

yosys> opt_mem_feedback

3.21.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).
  Analyzing BRAM.memory write port 0.

yosys> memory_bmux2rom

3.21.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

yosys> memory_dff

3.21.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).
Checking read port `\memory'[0] in module `\BRAM': merging output FF to cell.
    Write port 0: non-transparent.

yosys> opt_clean

3.21.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \BRAM..
Removed 3 unused cells and 35 unused wires.
<suppressed ~4 debug messages>

yosys> memory_share

3.21.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

yosys> opt_mem_widen

3.21.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

yosys> opt_clean

3.21.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \BRAM..

yosys> memory_collect

3.21.10. Executing MEMORY_COLLECT pass (generating $mem cells).

yosys> stat

3.22. Printing statistics.

=== BRAM ===

   Number of wires:                 11
   Number of wire bits:            120
   Number of public wires:           8
   Number of public wire bits:     117
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  4
     $and                            1
     $mem_v2                         1
     $not                            1
     $reduce_or                      1


yosys> opt_clean

3.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \BRAM..

yosys> stat

3.24. Printing statistics.

=== BRAM ===

   Number of wires:                 11
   Number of wire bits:            120
   Number of public wires:           8
   Number of public wire bits:     117
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  4
     $and                            1
     $mem_v2                         1
     $not                            1
     $reduce_or                      1


yosys> techmap -map +/techmap.v -map +/rapidsilicon/genesis/arith_map.v

3.25. Executing TECHMAP pass (map to technology primitives).

3.25.1. Executing Verilog-2005 frontend: /home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.25.2. Executing Verilog-2005 frontend: /home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/arith_map.v
Parsing Verilog input from `/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_rs_alu'.
Successfully finished Verilog frontend.

3.25.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $and.
No more expansions possible.
<suppressed ~74 debug messages>

yosys> stat

3.26. Printing statistics.

=== BRAM ===

   Number of wires:                 14
   Number of wire bits:            124
   Number of public wires:           8
   Number of public wire bits:     117
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  7
     $_AND_                          1
     $_NOT_                          1
     $_OR_                           4
     $mem_v2                         1


yosys> opt

3.27. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.27.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module BRAM.

yosys> opt_merge -nomux

3.27.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\BRAM'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.27.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \BRAM..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.27.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \BRAM.
Performed a total of 0 changes.

yosys> opt_merge

3.27.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\BRAM'.
Removed a total of 0 cells.

yosys> opt_dff

3.27.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.27.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \BRAM..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.27.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module BRAM.

3.27.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.27.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \BRAM..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.27.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \BRAM.
Performed a total of 0 changes.

yosys> opt_merge

3.27.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\BRAM'.
Removed a total of 0 cells.

yosys> opt_dff

3.27.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.27.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \BRAM..

yosys> opt_expr

3.27.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module BRAM.

3.27.16. Finished OPT passes. (There is nothing left to do.)

yosys> opt -fast -full

3.28. Executing OPT pass (performing simple optimizations).

yosys> opt_expr -full

3.28.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module BRAM.
<suppressed ~5 debug messages>

yosys> opt_merge

3.28.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\BRAM'.
Removed a total of 0 cells.

yosys> opt_dff

3.28.3. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.28.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \BRAM..

3.28.5. Finished fast OPT passes.

yosys> memory_map

3.29. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).
Mapping memory \memory in module \BRAM:
  created 9 $dff cells and 0 static cells of width 32.
Extracted data FF from read port 0 of BRAM.memory: $\memory$rdreg[0]
  read interface: 1 $dff and 15 $mux cells.
  write interface: 9 write mux blocks.

yosys> opt -full

3.30. Executing OPT pass (performing simple optimizations).

yosys> opt_expr -full

3.30.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module BRAM.
<suppressed ~21 debug messages>

yosys> opt_merge -nomux

3.30.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\BRAM'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.30.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \BRAM..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~10 debug messages>

yosys> opt_reduce -full

3.30.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \BRAM.
Performed a total of 0 changes.

yosys> opt_merge

3.30.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\BRAM'.
Removed a total of 0 cells.

yosys> opt_share

3.30.6. Executing OPT_SHARE pass.

yosys> opt_dff

3.30.7. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.30.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \BRAM..
Removed 0 unused cells and 33 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr -full

3.30.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module BRAM.
<suppressed ~3 debug messages>

3.30.10. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.30.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \BRAM..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~10 debug messages>

yosys> opt_reduce -full

3.30.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \BRAM.
Performed a total of 0 changes.

yosys> opt_merge

3.30.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\BRAM'.
Removed a total of 0 cells.

yosys> opt_share

3.30.14. Executing OPT_SHARE pass.

yosys> opt_dff

3.30.15. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $memory\memory[8]$180 ($dff) from module BRAM (D = \wd, Q = \memory[8]).
Adding EN signal on $memory\memory[7]$178 ($dff) from module BRAM (D = \wd, Q = \memory[7]).
Adding EN signal on $memory\memory[6]$176 ($dff) from module BRAM (D = \wd, Q = \memory[6]).
Adding EN signal on $memory\memory[5]$174 ($dff) from module BRAM (D = \wd, Q = \memory[5]).
Adding EN signal on $memory\memory[4]$172 ($dff) from module BRAM (D = \wd, Q = \memory[4]).
Adding EN signal on $memory\memory[3]$170 ($dff) from module BRAM (D = \wd, Q = \memory[3]).
Adding EN signal on $memory\memory[2]$168 ($dff) from module BRAM (D = \wd, Q = \memory[2]).
Adding EN signal on $memory\memory[1]$166 ($dff) from module BRAM (D = \wd, Q = \memory[1]).
Adding EN signal on $memory\memory[0]$164 ($dff) from module BRAM (D = \wd, Q = \memory[0]).

yosys> opt_clean

3.30.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \BRAM..
Removed 9 unused cells and 12 unused wires.
<suppressed ~10 debug messages>

yosys> opt_expr -full

3.30.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module BRAM.

3.30.18. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.30.19. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \BRAM..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

yosys> opt_reduce -full

3.30.20. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \BRAM.
Performed a total of 0 changes.

yosys> opt_merge

3.30.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\BRAM'.
Removed a total of 0 cells.

yosys> opt_share

3.30.22. Executing OPT_SHARE pass.

yosys> opt_dff

3.30.23. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.30.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \BRAM..

yosys> opt_expr -full

3.30.25. Executing OPT_EXPR pass (perform const folding).
Optimizing module BRAM.

3.30.26. Finished OPT passes. (There is nothing left to do.)

yosys> techmap -map +/techmap.v

3.31. Executing TECHMAP pass (map to technology primitives).

3.31.1. Executing Verilog-2005 frontend: /home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.31.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $dffe.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $and.
No more expansions possible.
<suppressed ~118 debug messages>

yosys> opt -sat

3.32. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.32.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module BRAM.

yosys> opt_merge -nomux

3.32.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\BRAM'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.32.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \BRAM..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.32.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \BRAM.
Performed a total of 0 changes.

yosys> opt_merge

3.32.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\BRAM'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.32.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.32.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \BRAM..

yosys> opt_expr

3.32.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module BRAM.

3.32.9. Finished OPT passes. (There is nothing left to do.)

yosys> abc -dff

3.33. Executing ABC pass (technology mapping using ABC).

3.33.1. Summary of detected clock domains:
  67 cells in clk=\clk, en=$memory\memory$wren[7][0][0]$y$298, arst={ }, srst={ }
  36 cells in clk=\clk, en=$memory\memory$wren[6][0][0]$y$292, arst={ }, srst={ }
  38 cells in clk=\clk, en=$memory\memory$wren[5][0][0]$y$286, arst={ }, srst={ }
  68 cells in clk=\clk, en=$memory\memory$wren[3][0][0]$y$270, arst={ }, srst={ }
  160 cells in clk=\clk, en=\rce, arst={ }, srst={ }
  36 cells in clk=\clk, en=$memory\memory$wren[8][0][0]$y$308, arst={ }, srst={ }
  34 cells in clk=\clk, en=$memory\memory$wren[2][0][0]$y$262, arst={ }, srst={ }
  66 cells in clk=\clk, en=$memory\memory$wren[0][0][0]$y$242, arst={ }, srst={ }
  40 cells in clk=\clk, en=$memory\memory$wren[1][0][0]$y$252, arst={ }, srst={ }
  66 cells in clk=\clk, en=$memory\memory$wren[4][0][0]$y$280, arst={ }, srst={ }

3.33.2. Extracting gate netlist of module `\BRAM' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $memory\memory$wren[7][0][0]$y$298
Extracted 67 gates and 136 wires to a netlist network with 69 inputs and 34 outputs.

3.33.2.1. Executing ABC.

3.33.3. Extracting gate netlist of module `\BRAM' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $memory\memory$wren[6][0][0]$y$292
Extracted 36 gates and 72 wires to a netlist network with 36 inputs and 35 outputs.

3.33.3.1. Executing ABC.

3.33.4. Extracting gate netlist of module `\BRAM' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $memory\memory$wren[5][0][0]$y$286
Extracted 38 gates and 77 wires to a netlist network with 39 inputs and 35 outputs.

3.33.4.1. Executing ABC.

3.33.5. Extracting gate netlist of module `\BRAM' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $memory\memory$wren[3][0][0]$y$270
Extracted 68 gates and 137 wires to a netlist network with 69 inputs and 35 outputs.

3.33.5.1. Executing ABC.

3.33.6. Extracting gate netlist of module `\BRAM' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by \rce
Extracted 160 gates and 323 wires to a netlist network with 163 inputs and 32 outputs.

3.33.6.1. Executing ABC.

3.33.7. Extracting gate netlist of module `\BRAM' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $memory\memory$wren[8][0][0]$y$308
Extracted 36 gates and 72 wires to a netlist network with 36 inputs and 34 outputs.

3.33.7.1. Executing ABC.

3.33.8. Extracting gate netlist of module `\BRAM' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $memory\memory$wren[2][0][0]$y$262
Extracted 34 gates and 69 wires to a netlist network with 35 inputs and 33 outputs.

3.33.8.1. Executing ABC.

3.33.9. Extracting gate netlist of module `\BRAM' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $memory\memory$wren[0][0][0]$y$242
Extracted 66 gates and 134 wires to a netlist network with 68 inputs and 33 outputs.

3.33.9.1. Executing ABC.

3.33.10. Extracting gate netlist of module `\BRAM' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $memory\memory$wren[1][0][0]$y$252
Extracted 40 gates and 80 wires to a netlist network with 40 inputs and 34 outputs.

3.33.10.1. Executing ABC.

3.33.11. Extracting gate netlist of module `\BRAM' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $memory\memory$wren[4][0][0]$y$280
Extracted 66 gates and 134 wires to a netlist network with 68 inputs and 35 outputs.

3.33.11.1. Executing ABC.

yosys> abc -dff

3.34. Executing ABC pass (technology mapping using ABC).

3.34.1. Summary of detected clock domains:
  66 cells in clk=\clk, en=$abc$1699$memory\memory$wren[2][0][0]$y$262, arst={ }, srst={ }
  163 cells in clk=\clk, en=$abc$1598$memory\memory$wren[8][0][0]$y$308, arst={ }, srst={ }
  32 cells in clk=\clk, en=\rce, arst={ }, srst={ }
  38 cells in clk=\clk, en=$abc$1798$memory\memory$wren[0][0][0]$y$242, arst={ }, srst={ }
  67 cells in clk=\clk, en=$abc$1897$memory\memory$wren[1][0][0]$y$252, arst={ }, srst={ }
  69 cells in clk=\clk, en=$abc$1002$memory\memory$wren[7][0][0]$y$298, arst={ }, srst={ }
  35 cells in clk=\clk, en=$abc$1102$memory\memory$wren[6][0][0]$y$292, arst={ }, srst={ }
  67 cells in clk=\clk, en=$abc$1203$memory\memory$wren[5][0][0]$y$286, arst={ }, srst={ }
  36 cells in clk=\clk, en=$abc$1304$memory\memory$wren[3][0][0]$y$270, arst={ }, srst={ }
  37 cells in clk=\clk, en=$abc$2001$memory\memory$wren[4][0][0]$y$280, arst={ }, srst={ }

3.34.2. Extracting gate netlist of module `\BRAM' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$1699$memory\memory$wren[2][0][0]$y$262
Extracted 66 gates and 134 wires to a netlist network with 68 inputs and 33 outputs.

3.34.2.1. Executing ABC.

3.34.3. Extracting gate netlist of module `\BRAM' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$1598$memory\memory$wren[8][0][0]$y$308
Extracted 163 gates and 330 wires to a netlist network with 167 inputs and 33 outputs.

3.34.3.1. Executing ABC.

3.34.4. Extracting gate netlist of module `\BRAM' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by \rce
Extracted 32 gates and 64 wires to a netlist network with 32 inputs and 32 outputs.

3.34.4.1. Executing ABC.

3.34.5. Extracting gate netlist of module `\BRAM' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$1798$memory\memory$wren[0][0][0]$y$242
Extracted 38 gates and 78 wires to a netlist network with 40 inputs and 33 outputs.

3.34.5.1. Executing ABC.

3.34.6. Extracting gate netlist of module `\BRAM' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$1897$memory\memory$wren[1][0][0]$y$252
Extracted 67 gates and 136 wires to a netlist network with 69 inputs and 34 outputs.

3.34.6.1. Executing ABC.

3.34.7. Extracting gate netlist of module `\BRAM' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$1002$memory\memory$wren[7][0][0]$y$298
Extracted 69 gates and 139 wires to a netlist network with 70 inputs and 35 outputs.

3.34.7.1. Executing ABC.

3.34.8. Extracting gate netlist of module `\BRAM' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$1102$memory\memory$wren[6][0][0]$y$292
Extracted 35 gates and 71 wires to a netlist network with 36 inputs and 34 outputs.

3.34.8.1. Executing ABC.

3.34.9. Extracting gate netlist of module `\BRAM' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$1203$memory\memory$wren[5][0][0]$y$286
Extracted 67 gates and 136 wires to a netlist network with 69 inputs and 34 outputs.

3.34.9.1. Executing ABC.

3.34.10. Extracting gate netlist of module `\BRAM' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$1304$memory\memory$wren[3][0][0]$y$270
Extracted 36 gates and 72 wires to a netlist network with 36 inputs and 34 outputs.

3.34.10.1. Executing ABC.

3.34.11. Extracting gate netlist of module `\BRAM' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$2001$memory\memory$wren[4][0][0]$y$280
Extracted 37 gates and 73 wires to a netlist network with 36 inputs and 34 outputs.

3.34.11.1. Executing ABC.

yosys> abc -dff

3.35. Executing ABC pass (technology mapping using ABC).

3.35.1. Summary of detected clock domains:
  67 cells in clk=\clk, en=$abc$2998$abc$1304$memory\memory$wren[3][0][0]$y$270, arst={ }, srst={ }
  35 cells in clk=\clk, en=$abc$2102$abc$1699$memory\memory$wren[2][0][0]$y$262, arst={ }, srst={ }
  155 cells in clk=\clk, en=$abc$2201$abc$1598$memory\memory$wren[8][0][0]$y$308, arst={ }, srst={ }
  67 cells in clk=\clk, en=$abc$2898$abc$1203$memory\memory$wren[5][0][0]$y$286, arst={ }, srst={ }
  40 cells in clk=\clk, en=\rce, arst={ }, srst={ }
  66 cells in clk=\clk, en=$abc$2494$abc$1798$memory\memory$wren[0][0][0]$y$242, arst={ }, srst={ }
  39 cells in clk=\clk, en=$abc$2593$abc$1897$memory\memory$wren[1][0][0]$y$252, arst={ }, srst={ }
  65 cells in clk=\clk, en=$abc$2697$abc$1002$memory\memory$wren[7][0][0]$y$298, arst={ }, srst={ }
  37 cells in clk=\clk, en=$abc$2798$abc$1102$memory\memory$wren[6][0][0]$y$292, arst={ }, srst={ }
  35 cells in clk=\clk, en=$abc$3098$abc$2001$memory\memory$wren[4][0][0]$y$280, arst={ }, srst={ }

3.35.2. Extracting gate netlist of module `\BRAM' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$2998$abc$1304$memory\memory$wren[3][0][0]$y$270
Extracted 67 gates and 136 wires to a netlist network with 69 inputs and 35 outputs.

3.35.2.1. Executing ABC.

3.35.3. Extracting gate netlist of module `\BRAM' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$2102$abc$1699$memory\memory$wren[2][0][0]$y$262
Extracted 35 gates and 72 wires to a netlist network with 37 inputs and 33 outputs.

3.35.3.1. Executing ABC.

3.35.4. Extracting gate netlist of module `\BRAM' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$2201$abc$1598$memory\memory$wren[8][0][0]$y$308
Extracted 155 gates and 314 wires to a netlist network with 159 inputs and 33 outputs.

3.35.4.1. Executing ABC.

3.35.5. Extracting gate netlist of module `\BRAM' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$2898$abc$1203$memory\memory$wren[5][0][0]$y$286
Extracted 67 gates and 136 wires to a netlist network with 69 inputs and 34 outputs.

3.35.5.1. Executing ABC.

3.35.6. Extracting gate netlist of module `\BRAM' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by \rce
Extracted 40 gates and 83 wires to a netlist network with 43 inputs and 32 outputs.

3.35.6.1. Executing ABC.

3.35.7. Extracting gate netlist of module `\BRAM' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$2494$abc$1798$memory\memory$wren[0][0][0]$y$242
Extracted 66 gates and 134 wires to a netlist network with 68 inputs and 33 outputs.

3.35.7.1. Executing ABC.

3.35.8. Extracting gate netlist of module `\BRAM' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$2593$abc$1897$memory\memory$wren[1][0][0]$y$252
Extracted 39 gates and 79 wires to a netlist network with 40 inputs and 34 outputs.

3.35.8.1. Executing ABC.

3.35.9. Extracting gate netlist of module `\BRAM' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$2697$abc$1002$memory\memory$wren[7][0][0]$y$298
Extracted 65 gates and 132 wires to a netlist network with 67 inputs and 34 outputs.

3.35.9.1. Executing ABC.

3.35.10. Extracting gate netlist of module `\BRAM' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$2798$abc$1102$memory\memory$wren[6][0][0]$y$292
Extracted 37 gates and 76 wires to a netlist network with 39 inputs and 34 outputs.

3.35.10.1. Executing ABC.

3.35.11. Extracting gate netlist of module `\BRAM' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$3098$abc$2001$memory\memory$wren[4][0][0]$y$280
Extracted 35 gates and 71 wires to a netlist network with 36 inputs and 34 outputs.

3.35.11.1. Executing ABC.

yosys> abc -dff

3.36. Executing ABC pass (technology mapping using ABC).

3.36.1. Summary of detected clock domains:
  67 cells in clk=\clk, en=$abc$4094$abc$2798$abc$1102$memory\memory$wren[6][0][0]$y$292, arst={ }, srst={ }
  68 cells in clk=\clk, en=$abc$3198$abc$2998$abc$1304$memory\memory$wren[3][0][0]$y$270, arst={ }, srst={ }
  34 cells in clk=\clk, en=$abc$3299$abc$2102$abc$1699$memory\memory$wren[2][0][0]$y$262, arst={ }, srst={ }
  163 cells in clk=\clk, en=$abc$3398$abc$2201$abc$1598$memory\memory$wren[8][0][0]$y$308, arst={ }, srst={ }
  67 cells in clk=\clk, en=$abc$3588$abc$2898$abc$1203$memory\memory$wren[5][0][0]$y$286, arst={ }, srst={ }
  32 cells in clk=\clk, en=\rce, arst={ }, srst={ }
  66 cells in clk=\clk, en=$abc$3791$abc$2494$abc$1798$memory\memory$wren[0][0][0]$y$242, arst={ }, srst={ }
  39 cells in clk=\clk, en=$abc$3890$abc$2593$abc$1897$memory\memory$wren[1][0][0]$y$252, arst={ }, srst={ }
  35 cells in clk=\clk, en=$abc$3994$abc$2697$abc$1002$memory\memory$wren[7][0][0]$y$298, arst={ }, srst={ }
  35 cells in clk=\clk, en=$abc$4194$abc$3098$abc$2001$memory\memory$wren[4][0][0]$y$280, arst={ }, srst={ }

3.36.2. Extracting gate netlist of module `\BRAM' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$4094$abc$2798$abc$1102$memory\memory$wren[6][0][0]$y$292
Extracted 67 gates and 136 wires to a netlist network with 69 inputs and 34 outputs.

3.36.2.1. Executing ABC.

3.36.3. Extracting gate netlist of module `\BRAM' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$3198$abc$2998$abc$1304$memory\memory$wren[3][0][0]$y$270
Extracted 68 gates and 138 wires to a netlist network with 70 inputs and 35 outputs.

3.36.3.1. Executing ABC.

3.36.4. Extracting gate netlist of module `\BRAM' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$3299$abc$2102$abc$1699$memory\memory$wren[2][0][0]$y$262
Extracted 34 gates and 69 wires to a netlist network with 35 inputs and 33 outputs.

3.36.4.1. Executing ABC.

3.36.5. Extracting gate netlist of module `\BRAM' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$3398$abc$2201$abc$1598$memory\memory$wren[8][0][0]$y$308
Extracted 163 gates and 330 wires to a netlist network with 167 inputs and 33 outputs.

3.36.5.1. Executing ABC.

3.36.6. Extracting gate netlist of module `\BRAM' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$3588$abc$2898$abc$1203$memory\memory$wren[5][0][0]$y$286
Extracted 67 gates and 136 wires to a netlist network with 69 inputs and 34 outputs.

3.36.6.1. Executing ABC.

3.36.7. Extracting gate netlist of module `\BRAM' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by \rce
Extracted 32 gates and 64 wires to a netlist network with 32 inputs and 32 outputs.

3.36.7.1. Executing ABC.

3.36.8. Extracting gate netlist of module `\BRAM' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$3791$abc$2494$abc$1798$memory\memory$wren[0][0][0]$y$242
Extracted 66 gates and 134 wires to a netlist network with 68 inputs and 33 outputs.

3.36.8.1. Executing ABC.

3.36.9. Extracting gate netlist of module `\BRAM' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$3890$abc$2593$abc$1897$memory\memory$wren[1][0][0]$y$252
Extracted 39 gates and 79 wires to a netlist network with 40 inputs and 34 outputs.

3.36.9.1. Executing ABC.

3.36.10. Extracting gate netlist of module `\BRAM' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$3994$abc$2697$abc$1002$memory\memory$wren[7][0][0]$y$298
Extracted 35 gates and 71 wires to a netlist network with 36 inputs and 34 outputs.

3.36.10.1. Executing ABC.

3.36.11. Extracting gate netlist of module `\BRAM' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$4194$abc$3098$abc$2001$memory\memory$wren[4][0][0]$y$280
Extracted 35 gates and 71 wires to a netlist network with 36 inputs and 34 outputs.

3.36.11.1. Executing ABC.

yosys> opt_ffinv

3.37. Executing OPT_FFINV pass (push inverters through FFs).
Discovering LUTs.
Pushed 0 inverters.

yosys> opt -sat

3.38. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.38.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module BRAM.

yosys> opt_merge -nomux

3.38.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\BRAM'.
<suppressed ~12 debug messages>
Removed a total of 4 cells.

yosys> opt_muxtree

3.38.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \BRAM..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.38.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \BRAM.
Performed a total of 0 changes.

yosys> opt_merge

3.38.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\BRAM'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.38.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.38.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \BRAM..
Removed 0 unused cells and 6328 unused wires.
<suppressed ~8 debug messages>

yosys> opt_expr

3.38.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module BRAM.

3.38.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.38.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \BRAM..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.38.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \BRAM.
Performed a total of 0 changes.

yosys> opt_merge

3.38.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\BRAM'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.38.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.38.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \BRAM..

yosys> opt_expr

3.38.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module BRAM.

3.38.16. Finished OPT passes. (There is nothing left to do.)

yosys> abc -script /home/users/temp_dir/yosys_6GVVCT/abc_tmp_1.scr

3.39. Executing ABC pass (technology mapping using ABC).

3.39.1. Extracting gate netlist of module `\BRAM' to `<abc-temp-dir>/input.blif'..
Extracted 282 gates and 584 wires to a netlist network with 302 inputs and 41 outputs.

3.39.1.1. Executing ABC.
DE:   #PIs = 302  #Luts =   106  Max Lvl =   2  Avg Lvl =   2.00  [   0.09 sec. at Pass 0]
DE:   #PIs = 302  #Luts =   106  Max Lvl =   2  Avg Lvl =   2.00  [   0.65 sec. at Pass 1]
DE:   #PIs = 302  #Luts =   106  Max Lvl =   2  Avg Lvl =   2.00  [   0.18 sec. at Pass 2]
DE:   #PIs = 302  #Luts =   106  Max Lvl =   2  Avg Lvl =   2.00  [   0.37 sec. at Pass 3]
DE:   #PIs = 302  #Luts =   106  Max Lvl =   2  Avg Lvl =   2.00  [   0.37 sec. at Pass 4]
DE:   #PIs = 302  #Luts =   106  Max Lvl =   2  Avg Lvl =   2.00  [   0.36 sec. at Pass 5]
DE:   #PIs = 302  #Luts =   106  Max Lvl =   2  Avg Lvl =   2.00  [   1.95 sec. at Pass 6]
DE:   #PIs = 302  #Luts =   106  Max Lvl =   2  Avg Lvl =   2.00  [   0.56 sec. at Pass 7]

yosys> opt

3.40. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.40.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module BRAM.

yosys> opt_merge -nomux

3.40.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\BRAM'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.40.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \BRAM..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.40.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \BRAM.
Performed a total of 0 changes.

yosys> opt_merge

3.40.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\BRAM'.
Removed a total of 0 cells.

yosys> opt_dff

3.40.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.40.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \BRAM..
Removed 0 unused cells and 584 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.40.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module BRAM.

3.40.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.40.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \BRAM..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.40.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \BRAM.
Performed a total of 0 changes.

yosys> opt_merge

3.40.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\BRAM'.
Removed a total of 0 cells.

yosys> opt_dff

3.40.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.40.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \BRAM..

yosys> opt_expr

3.40.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module BRAM.

3.40.16. Finished OPT passes. (There is nothing left to do.)

yosys> opt_ffinv

3.41. Executing OPT_FFINV pass (push inverters through FFs).
Discovering LUTs.
Pushed 0 inverters.

yosys> stat

3.42. Printing statistics.

=== BRAM ===

   Number of wires:                398
   Number of wire bits:            569
   Number of public wires:          10
   Number of public wire bits:     181
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                426
     $_DFFE_PP_                    320
     $lut                          106


yosys> shregmap -minlen 8 -maxlen 20

3.43. Executing SHREGMAP pass (map shift registers).
Converted 0 dff cells into 0 shift registers.

yosys> dfflegalize -cell $_DFF_?_ 0 -cell $_DFF_???_ 0 -cell $_DFFE_????_ 0 -cell $_DFFSR_???_ 0 -cell $_DFFSRE_????_ 0 -cell $_DLATCHSR_PPP_ 0

3.44. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

yosys> stat

3.45. Printing statistics.

=== BRAM ===

   Number of wires:                398
   Number of wire bits:            569
   Number of public wires:          10
   Number of public wire bits:     181
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                426
     $_DFFE_PP0P_                  320
     $lut                          106


yosys> techmap -map +/techmap.v -map +/rapidsilicon/genesis/ffs_map.v

3.46. Executing TECHMAP pass (map to technology primitives).

3.46.1. Executing Verilog-2005 frontend: /home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.46.2. Executing Verilog-2005 frontend: /home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/ffs_map.v
Parsing Verilog input from `/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/ffs_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP0N_'.
Generating RTLIL representation for module `\$_DFFE_PN0P_'.
Generating RTLIL representation for module `\$_DFFE_PN0N_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP1N_'.
Generating RTLIL representation for module `\$_DFFE_PN1P_'.
Generating RTLIL representation for module `\$_DFFE_PN1N_'.
Generating RTLIL representation for module `\$_DFFSR_PPP_'.
Generating RTLIL representation for module `\$_DFFSR_PNP_'.
Generating RTLIL representation for module `\$_DFFSR_PNN_'.
Generating RTLIL representation for module `\$_DFFSR_PPN_'.
Generating RTLIL representation for module `\$_DFFSR_NPP_'.
Generating RTLIL representation for module `\$_DFFSR_NNP_'.
Generating RTLIL representation for module `\$_DFFSR_NNN_'.
Generating RTLIL representation for module `\$_DFFSR_NPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PNPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPNP_'.
Generating RTLIL representation for module `\$_DFFSRE_PNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PNPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PPNN_'.
Generating RTLIL representation for module `\$_DFFSRE_PNNN_'.
Generating RTLIL representation for module `\$_DLATCHSR_PPP_'.
Generating RTLIL representation for module `\$_DLATCHSR_NPP_'.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP0N_'.
Generating RTLIL representation for module `\$_DFFE_NN0P_'.
Generating RTLIL representation for module `\$_DFFE_NN0N_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_NP1N_'.
Generating RTLIL representation for module `\$_DFFE_NN1P_'.
Generating RTLIL representation for module `\$_DFFE_NN1N_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNPP_'.
Generating RTLIL representation for module `\$_DFFSRE_NPNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPN_'.
Generating RTLIL representation for module `\$_DFFSRE_NNPN_'.
Generating RTLIL representation for module `\$_DFFSRE_NPNN_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNN_'.
Generating RTLIL representation for module `\$__SHREG_DFF_P_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PN0_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NN0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFF_PN1_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_NN1_'.
Successfully finished Verilog frontend.

3.46.3. Continuing TECHMAP pass.
Using template \$_DFFE_PP0P_ for cells of type $_DFFE_PP0P_.
Using extmapper simplemap for cells of type $lut.
Using extmapper simplemap for cells of type $logic_not.
No more expansions possible.
<suppressed ~882 debug messages>

yosys> opt_expr -mux_undef

3.47. Executing OPT_EXPR pass (perform const folding).
Optimizing module BRAM.
<suppressed ~5379 debug messages>

yosys> simplemap

3.48. Executing SIMPLEMAP pass (map simple cells to gate primitives).

yosys> opt_expr

3.49. Executing OPT_EXPR pass (perform const folding).
Optimizing module BRAM.

yosys> opt_merge

3.50. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\BRAM'.
<suppressed ~33 debug messages>
Removed a total of 11 cells.

yosys> opt_dff -nodffe -nosdff

3.51. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.52. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \BRAM..
Removed 0 unused cells and 2389 unused wires.
<suppressed ~1 debug messages>

yosys> opt -nodffe -nosdff

3.53. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.53.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module BRAM.

yosys> opt_merge -nomux

3.53.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\BRAM'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.53.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \BRAM..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.53.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \BRAM.
Performed a total of 0 changes.

yosys> opt_merge

3.53.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\BRAM'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.53.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.53.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \BRAM..

yosys> opt_expr

3.53.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module BRAM.

3.53.9. Finished OPT passes. (There is nothing left to do.)

yosys> abc -script /home/users/temp_dir/yosys_6GVVCT/abc_tmp_2.scr

3.54. Executing ABC pass (technology mapping using ABC).

3.54.1. Extracting gate netlist of module `\BRAM' to `<abc-temp-dir>/input.blif'..
Extracted 296 gates and 599 wires to a netlist network with 302 inputs and 41 outputs.

3.54.1.1. Executing ABC.
DE:   #PIs = 302  #Luts =   106  Max Lvl =   2  Avg Lvl =   2.00  [   0.13 sec. at Pass 0]
DE:   #PIs = 302  #Luts =   106  Max Lvl =   2  Avg Lvl =   2.00  [   0.76 sec. at Pass 1]
DE:   #PIs = 302  #Luts =   106  Max Lvl =   2  Avg Lvl =   2.00  [   0.35 sec. at Pass 2]
DE:   #PIs = 302  #Luts =   106  Max Lvl =   2  Avg Lvl =   2.00  [   0.36 sec. at Pass 3]
DE:   #PIs = 302  #Luts =   106  Max Lvl =   2  Avg Lvl =   2.00  [   0.49 sec. at Pass 4]
DE:   #PIs = 302  #Luts =   106  Max Lvl =   2  Avg Lvl =   2.00  [   0.62 sec. at Pass 5]
DE:   #PIs = 302  #Luts =   106  Max Lvl =   2  Avg Lvl =   2.00  [   1.24 sec. at Pass 6]
DE:   #PIs = 302  #Luts =   106  Max Lvl =   2  Avg Lvl =   2.00  [   0.89 sec. at Pass 7]

yosys> opt

3.55. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.55.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module BRAM.

yosys> opt_merge -nomux

3.55.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\BRAM'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.55.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \BRAM..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.55.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \BRAM.
Performed a total of 0 changes.

yosys> opt_merge

3.55.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\BRAM'.
Removed a total of 0 cells.

yosys> opt_dff

3.55.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.55.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \BRAM..
Removed 0 unused cells and 534 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.55.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module BRAM.

3.55.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.55.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \BRAM..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.55.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \BRAM.
Performed a total of 0 changes.

yosys> opt_merge

3.55.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\BRAM'.
Removed a total of 0 cells.

yosys> opt_dff

3.55.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.55.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \BRAM..

yosys> opt_expr

3.55.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module BRAM.

3.55.16. Finished OPT passes. (There is nothing left to do.)

yosys> hierarchy -check

3.56. Executing HIERARCHY pass (managing design hierarchy).

3.56.1. Analyzing design hierarchy..
Top module:  \BRAM

3.56.2. Analyzing design hierarchy..
Top module:  \BRAM
Removed 0 unused modules.

yosys> stat

3.57. Printing statistics.

=== BRAM ===

   Number of wires:                398
   Number of wire bits:            569
   Number of public wires:          10
   Number of public wire bits:     181
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                426
     $lut                          106
     dffsre                        320


yosys> opt_clean -purge

3.58. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \BRAM..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

yosys> write_verilog -noattr -nohex synthesized.v

3.59. Executing Verilog backend.
Dumping module `\BRAM'.

Warnings: 5 unique messages, 5 total
End of script. Logfile hash: 9e851e4a38, CPU: user 2.08s system 0.14s, MEM: 34.52 MB peak
Yosys 0.18+10 (git sha1 8217e4c48, gcc 9.1.0 -fPIC -Os)
Time spent: 97% 6x abc (56 sec), 0% 33x opt_expr (0 sec), ...
real 23.22
user 50.39
sys 7.71
