
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys-Verific 0.0.45
 Yosys 0.17+103 (git sha1 a1babadd5, gcc 9.1.0 -fPIC -Os)


-- Executing script file `yosys.ys' --
echo on

yosys> plugin -i synth-rs

yosys> read -verific

yosys> read -incdir .

yosys> verific -vlog-incdir .

1. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Apr22_SW_Release, released at Thu Apr 28 20:08:21 2022.

yosys> verilog_defaults -add -I.

yosys> read -vlog2k xtea.v

yosys> verific -vlog2k xtea.v

2. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Apr22_SW_Release, released at Thu Apr 28 20:08:21 2022.
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'xtea.v'

yosys> synth_rs -top xtea -tech genesis -goal area -de -no_dsp -no_bram -verilog synthesized.v

3. Executing synth_rs pass: v0.4.56

yosys> read_verilog -lib -specify -nomem2reg +/rapidsilicon/common/cells_sim.v +/rapidsilicon/genesis/cells_sim.v

3.1. Executing Verilog-2005 frontend: /home/users/aram/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v
Parsing Verilog input from `/home/users/aram/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\inv'.
Generating RTLIL representation for module `\buff'.
Generating RTLIL representation for module `\logic_0'.
Generating RTLIL representation for module `\logic_1'.
Generating RTLIL representation for module `\gclkbuff'.
Successfully finished Verilog frontend.

3.2. Executing Verilog-2005 frontend: /home/users/aram/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/cells_sim.v
Parsing Verilog input from `/home/users/aram/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\dffsre'.
Generating RTLIL representation for module `\dffnsre'.
Generating RTLIL representation for module `\latchsre'.
Generating RTLIL representation for module `\latchnsre'.
Generating RTLIL representation for module `\io_scff'.
Generating RTLIL representation for module `\scff'.
Generating RTLIL representation for module `\sh_dff'.
Generating RTLIL representation for module `\adder_carry'.
Generating RTLIL representation for module `\sdffr'.
Generating RTLIL representation for module `\sdffs'.
Generating RTLIL representation for module `\TDP_BRAM18'.
Generating RTLIL representation for module `\TDP36K'.
Generating RTLIL representation for module `\RS_DSP1'.
Generating RTLIL representation for module `\RS_DSP2'.
Generating RTLIL representation for module `\RS_DSP2_MULT'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGIN_REGOUT'.
Generating RTLIL representation for module `\dsp_t1_sim'.
Generating RTLIL representation for module `\dsp_t1_20x18x64'.
Generating RTLIL representation for module `\dsp_t1_10x9x32'.
Successfully finished Verilog frontend.

yosys> hierarchy -check -top xtea

3.3. Executing HIERARCHY pass (managing design hierarchy).
VERIFIC-INFO [VERI-1018] xtea.v:44: compiling module 'xtea'
Importing module xtea.

3.3.1. Analyzing design hierarchy..
Top module:  \xtea

3.3.2. Analyzing design hierarchy..
Top module:  \xtea
Removed 0 unused modules.

yosys> proc

3.4. Executing PROC pass (convert processes to netlists).

yosys> proc_clean

3.4.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> proc_rmdead

3.4.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

yosys> proc_prune

3.4.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

yosys> proc_init

3.4.4. Executing PROC_INIT pass (extract init attributes).

yosys> proc_arst

3.4.5. Executing PROC_ARST pass (detect async resets in processes).

yosys> proc_rom

3.4.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

yosys> proc_mux

3.4.7. Executing PROC_MUX pass (convert decision trees to multiplexers).

yosys> proc_dlatch

3.4.8. Executing PROC_DLATCH pass (convert process syncs to latches).

yosys> proc_dff

3.4.9. Executing PROC_DFF pass (convert process syncs to FFs).

yosys> proc_memwr

3.4.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

yosys> proc_clean

3.4.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> opt_expr -keepdc

3.4.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module xtea.
<suppressed ~1 debug messages>

yosys> flatten

3.5. Executing FLATTEN pass (flatten design).

yosys> tribuf -logic

3.6. Executing TRIBUF pass.

yosys> deminout

3.7. Executing DEMINOUT pass (demote inout ports to input or output).

yosys> opt_expr

3.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module xtea.

yosys> opt_clean

3.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \xtea..
Removed 0 unused cells and 33 unused wires.
<suppressed ~12 debug messages>

yosys> check

3.10. Executing CHECK pass (checking for obvious problems).
Checking module xtea...
Found and reported 0 problems.

yosys> opt -nodffe -nosdff

3.11. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module xtea.

yosys> opt_merge -nomux

3.11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\xtea'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.11.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \xtea..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~140 debug messages>

yosys> opt_reduce

3.11.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \xtea.
    New ctrl vector for $pmux cell $verific$Select_197$xtea.v:188$464: $auto$opt_reduce.cc:134:opt_pmux$789
    New ctrl vector for $pmux cell $verific$Select_198$xtea.v:188$465: { $verific$n3734$23 $auto$opt_reduce.cc:134:opt_pmux$791 }
    New ctrl vector for $pmux cell $verific$Select_199$xtea.v:188$466: $auto$opt_reduce.cc:134:opt_pmux$793
    New ctrl vector for $pmux cell $verific$Select_206$xtea.v:188$471: { $verific$n3734$23 $auto$opt_reduce.cc:134:opt_pmux$795 }
    New ctrl vector for $pmux cell $verific$Select_214$xtea.v:188$476: { $verific$n3734$23 $auto$opt_reduce.cc:134:opt_pmux$797 }
    New ctrl vector for $pmux cell $verific$Select_222$xtea.v:188$481: { $verific$n3734$23 $auto$opt_reduce.cc:134:opt_pmux$799 }
    New ctrl vector for $pmux cell $verific$Select_230$xtea.v:188$486: { $verific$n3734$23 $auto$opt_reduce.cc:134:opt_pmux$801 }
    New ctrl vector for $pmux cell $verific$Select_238$xtea.v:188$491: { $verific$n3734$23 $auto$opt_reduce.cc:134:opt_pmux$803 }
    New ctrl vector for $pmux cell $verific$Select_246$xtea.v:188$496: { $verific$n3734$23 $auto$opt_reduce.cc:134:opt_pmux$805 }
    New ctrl vector for $pmux cell $verific$Select_254$xtea.v:188$501: { $verific$n3734$23 $auto$opt_reduce.cc:134:opt_pmux$807 }
    New ctrl vector for $pmux cell $verific$Select_262$xtea.v:188$506: { $verific$n3734$23 $auto$opt_reduce.cc:134:opt_pmux$809 }
    New ctrl vector for $pmux cell $verific$Select_270$xtea.v:188$511: { $verific$n3734$23 $auto$opt_reduce.cc:134:opt_pmux$811 }
    New ctrl vector for $pmux cell $verific$Select_278$xtea.v:188$516: { $verific$n3734$23 $auto$opt_reduce.cc:134:opt_pmux$813 }
    New ctrl vector for $pmux cell $verific$Select_286$xtea.v:188$521: { $verific$n3734$23 $auto$opt_reduce.cc:134:opt_pmux$815 }
    New ctrl vector for $pmux cell $verific$Select_294$xtea.v:188$526: { $verific$n3734$23 $auto$opt_reduce.cc:134:opt_pmux$817 }
    New ctrl vector for $pmux cell $verific$Select_302$xtea.v:188$531: { $verific$n3734$23 $auto$opt_reduce.cc:134:opt_pmux$819 }
    New ctrl vector for $pmux cell $verific$Select_310$xtea.v:188$536: { $verific$n3734$23 $auto$opt_reduce.cc:134:opt_pmux$821 }
    New ctrl vector for $pmux cell $verific$Select_318$xtea.v:188$541: { $verific$n3734$23 $auto$opt_reduce.cc:134:opt_pmux$823 }
    New ctrl vector for $pmux cell $verific$Select_326$xtea.v:188$546: { $verific$n3734$23 $auto$opt_reduce.cc:134:opt_pmux$825 }
    New ctrl vector for $pmux cell $verific$Select_334$xtea.v:188$551: { $verific$n3734$23 $auto$opt_reduce.cc:134:opt_pmux$827 }
    New ctrl vector for $pmux cell $verific$Select_342$xtea.v:188$556: { $verific$n3734$23 $auto$opt_reduce.cc:134:opt_pmux$829 }
    New ctrl vector for $pmux cell $verific$Select_350$xtea.v:188$561: { $verific$n3734$23 $auto$opt_reduce.cc:134:opt_pmux$831 }
    New ctrl vector for $pmux cell $verific$Select_358$xtea.v:188$566: { $verific$n3734$23 $auto$opt_reduce.cc:134:opt_pmux$833 }
    New ctrl vector for $pmux cell $verific$Select_366$xtea.v:188$571: { $verific$n3734$23 $auto$opt_reduce.cc:134:opt_pmux$835 }
    New ctrl vector for $pmux cell $verific$Select_374$xtea.v:188$576: { $verific$n3734$23 $auto$opt_reduce.cc:134:opt_pmux$837 }
    New ctrl vector for $pmux cell $verific$Select_382$xtea.v:188$581: { $verific$n3734$23 $auto$opt_reduce.cc:134:opt_pmux$839 }
    New ctrl vector for $pmux cell $verific$Select_390$xtea.v:188$586: { $verific$n3734$23 $auto$opt_reduce.cc:134:opt_pmux$841 }
    New ctrl vector for $pmux cell $verific$Select_398$xtea.v:188$591: { $verific$n3734$23 $auto$opt_reduce.cc:134:opt_pmux$843 }
    New ctrl vector for $pmux cell $verific$Select_406$xtea.v:188$596: { $verific$n3734$23 $auto$opt_reduce.cc:134:opt_pmux$845 }
    New ctrl vector for $pmux cell $verific$Select_414$xtea.v:188$601: { $verific$n3734$23 $auto$opt_reduce.cc:134:opt_pmux$847 }
    New ctrl vector for $pmux cell $verific$Select_422$xtea.v:188$606: { $verific$n3734$23 $auto$opt_reduce.cc:134:opt_pmux$849 }
    New ctrl vector for $pmux cell $verific$Select_430$xtea.v:188$611: { $verific$n3734$23 $auto$opt_reduce.cc:134:opt_pmux$851 }
    New ctrl vector for $pmux cell $verific$Select_438$xtea.v:188$616: { $verific$n3734$23 $auto$opt_reduce.cc:134:opt_pmux$853 }
    New ctrl vector for $pmux cell $verific$Select_446$xtea.v:188$621: { $verific$n3734$23 $auto$opt_reduce.cc:134:opt_pmux$855 }
    New ctrl vector for $pmux cell $verific$Select_454$xtea.v:188$626: { $verific$n3734$23 $auto$opt_reduce.cc:134:opt_pmux$857 }
    New ctrl vector for $pmux cell $verific$Select_462$xtea.v:188$631: { $verific$n3734$23 $auto$opt_reduce.cc:134:opt_pmux$859 }
    New ctrl vector for $pmux cell $verific$Select_470$xtea.v:188$636: { $verific$n3734$23 $auto$opt_reduce.cc:134:opt_pmux$861 }
    New ctrl vector for $pmux cell $verific$Select_478$xtea.v:188$641: { $verific$n3734$23 $auto$opt_reduce.cc:134:opt_pmux$863 }
    New ctrl vector for $pmux cell $verific$Select_486$xtea.v:188$646: { $verific$n3734$23 $auto$opt_reduce.cc:134:opt_pmux$865 }
    New ctrl vector for $pmux cell $verific$Select_494$xtea.v:188$651: { $verific$n3734$23 $auto$opt_reduce.cc:134:opt_pmux$867 }
    New ctrl vector for $pmux cell $verific$Select_502$xtea.v:188$656: { $verific$n3734$23 $auto$opt_reduce.cc:134:opt_pmux$869 }
    New ctrl vector for $pmux cell $verific$Select_510$xtea.v:188$661: { $verific$n3734$23 $auto$opt_reduce.cc:134:opt_pmux$871 }
    New ctrl vector for $pmux cell $verific$Select_518$xtea.v:188$666: { $verific$n3734$23 $auto$opt_reduce.cc:134:opt_pmux$873 }
    New ctrl vector for $pmux cell $verific$Select_526$xtea.v:188$671: { $verific$n3734$23 $auto$opt_reduce.cc:134:opt_pmux$875 }
    New ctrl vector for $pmux cell $verific$Select_534$xtea.v:188$676: { $verific$n3734$23 $auto$opt_reduce.cc:134:opt_pmux$877 }
    New ctrl vector for $pmux cell $verific$Select_542$xtea.v:188$681: { $verific$n3734$23 $auto$opt_reduce.cc:134:opt_pmux$879 }
    New ctrl vector for $pmux cell $verific$Select_550$xtea.v:188$686: { $verific$n3734$23 $auto$opt_reduce.cc:134:opt_pmux$881 }
    New ctrl vector for $pmux cell $verific$Select_558$xtea.v:188$691: { $verific$n3734$23 $auto$opt_reduce.cc:134:opt_pmux$883 }
    New ctrl vector for $pmux cell $verific$Select_566$xtea.v:188$696: { $verific$n3734$23 $auto$opt_reduce.cc:134:opt_pmux$885 }
    New ctrl vector for $pmux cell $verific$Select_574$xtea.v:188$701: { $verific$n3734$23 $auto$opt_reduce.cc:134:opt_pmux$887 }
    New ctrl vector for $pmux cell $verific$Select_582$xtea.v:188$706: { $verific$n3734$23 $auto$opt_reduce.cc:134:opt_pmux$889 }
    New ctrl vector for $pmux cell $verific$Select_590$xtea.v:188$711: { $verific$n3734$23 $auto$opt_reduce.cc:134:opt_pmux$891 }
    New ctrl vector for $pmux cell $verific$Select_598$xtea.v:188$716: { $verific$n3734$23 $auto$opt_reduce.cc:134:opt_pmux$893 }
    New ctrl vector for $pmux cell $verific$Select_606$xtea.v:188$721: { $verific$n3734$23 $auto$opt_reduce.cc:134:opt_pmux$895 }
    New ctrl vector for $pmux cell $verific$Select_614$xtea.v:188$726: { $verific$n3734$23 $auto$opt_reduce.cc:134:opt_pmux$897 }
    New ctrl vector for $pmux cell $verific$Select_622$xtea.v:188$731: { $verific$n3734$23 $auto$opt_reduce.cc:134:opt_pmux$899 }
    New ctrl vector for $pmux cell $verific$Select_630$xtea.v:188$736: { $verific$n3734$23 $auto$opt_reduce.cc:134:opt_pmux$901 }
    New ctrl vector for $pmux cell $verific$Select_638$xtea.v:188$741: { $verific$n3734$23 $auto$opt_reduce.cc:134:opt_pmux$903 }
    New ctrl vector for $pmux cell $verific$Select_646$xtea.v:188$746: { $verific$n3734$23 $auto$opt_reduce.cc:134:opt_pmux$905 }
    New ctrl vector for $pmux cell $verific$Select_654$xtea.v:188$751: { $verific$n3734$23 $auto$opt_reduce.cc:134:opt_pmux$907 }
    New ctrl vector for $pmux cell $verific$Select_662$xtea.v:188$756: { $verific$n3734$23 $auto$opt_reduce.cc:134:opt_pmux$909 }
    New ctrl vector for $pmux cell $verific$Select_670$xtea.v:188$761: { $verific$n3734$23 $auto$opt_reduce.cc:134:opt_pmux$911 }
    New ctrl vector for $pmux cell $verific$Select_678$xtea.v:188$766: { $verific$n3734$23 $auto$opt_reduce.cc:134:opt_pmux$913 }
    New ctrl vector for $pmux cell $verific$Select_686$xtea.v:188$771: { $verific$n3734$23 $auto$opt_reduce.cc:134:opt_pmux$915 }
    New ctrl vector for $pmux cell $verific$Select_694$xtea.v:188$777: { $verific$n3734$23 $auto$opt_reduce.cc:134:opt_pmux$917 }
    New ctrl vector for $pmux cell $verific$Select_702$xtea.v:188$782: { $verific$n3734$23 $auto$opt_reduce.cc:134:opt_pmux$919 }
    New ctrl vector for $pmux cell $verific$select_173$xtea.v:188$444: { $verific$n3719$8 $verific$n3727$16 $verific$n3729$18 $auto$opt_reduce.cc:134:opt_pmux$921 }
    New ctrl vector for $pmux cell $verific$select_174$xtea.v:188$445: { $verific$n3719$8 $verific$n3724$13 $verific$n3732$21 $auto$opt_reduce.cc:134:opt_pmux$923 }
    New ctrl vector for $pmux cell $verific$select_175$xtea.v:188$446: { $verific$n3719$8 $auto$opt_reduce.cc:134:opt_pmux$925 }
    New ctrl vector for $pmux cell $verific$select_176$xtea.v:188$447: { $verific$n3719$8 $verific$n3725$14 $verific$n3730$19 $auto$opt_reduce.cc:134:opt_pmux$927 }
    New ctrl vector for $pmux cell $verific$select_180$xtea.v:188$450: { $auto$opt_reduce.cc:134:opt_pmux$933 $auto$opt_reduce.cc:134:opt_pmux$931 $auto$opt_reduce.cc:134:opt_pmux$929 }
    New ctrl vector for $pmux cell $verific$select_181$xtea.v:188$451: { $auto$opt_reduce.cc:134:opt_pmux$937 $auto$opt_reduce.cc:134:opt_pmux$935 }
    New ctrl vector for $pmux cell $verific$select_33$xtea.v:90$392: { $verific$n23$4 $verific$n3720$9 $verific$n3721$10 $verific$n3722$11 $verific$n3723$12 $verific$n3724$13 $verific$n3725$14 $verific$n3726$15 $verific$n3728$17 $verific$n3729$18 $verific$n3730$19 $verific$n3731$20 $auto$opt_reduce.cc:134:opt_pmux$941 $verific$n3733$22 $auto$opt_reduce.cc:134:opt_pmux$939 $verific$n41$5 }
  Optimizing cells in module \xtea.
Performed a total of 73 changes.

yosys> opt_merge

3.11.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\xtea'.
<suppressed ~192 debug messages>
Removed a total of 64 cells.

yosys> opt_dff -nodffe -nosdff

3.11.6. Executing OPT_DFF pass (perform DFF optimizations).
Changing const-value async load to async reset on $verific$x_reg$xtea.v:189$455 ($aldff) from module xtea.
Changing const-value async load to async reset on $verific$workunit2_reg$xtea.v:189$459 ($aldff) from module xtea.
Changing const-value async load to async reset on $verific$workunit1_reg$xtea.v:189$458 ($aldff) from module xtea.
Changing const-value async load to async reset on $verific$while_flag_reg$xtea.v:189$457 ($aldff) from module xtea.
Changing const-value async load to async reset on $verific$sum_reg$xtea.v:189$456 ($aldff) from module xtea.
Changing const-value async load to async reset on $verific$state_reg$xtea.v:91$393 ($aldff) from module xtea.
Changing const-value async load to async reset on $verific$selectslice_reg$xtea.v:189$460 ($aldff) from module xtea.
Changing const-value async load to async reset on $verific$modereg_reg$xtea.v:189$463 ($aldff) from module xtea.
Changing const-value async load to async reset on $verific$i705$xtea.v:189$783 ($aldff) from module xtea.
Changing const-value async load to async reset on $verific$i697$xtea.v:189$778 ($aldff) from module xtea.
Changing const-value async load to async reset on $verific$i689$xtea.v:189$772 ($aldff) from module xtea.
Changing const-value async load to async reset on $verific$i681$xtea.v:189$767 ($aldff) from module xtea.
Changing const-value async load to async reset on $verific$i673$xtea.v:189$762 ($aldff) from module xtea.
Changing const-value async load to async reset on $verific$i665$xtea.v:189$757 ($aldff) from module xtea.
Changing const-value async load to async reset on $verific$i657$xtea.v:189$752 ($aldff) from module xtea.
Changing const-value async load to async reset on $verific$i649$xtea.v:189$747 ($aldff) from module xtea.
Changing const-value async load to async reset on $verific$i641$xtea.v:189$742 ($aldff) from module xtea.
Changing const-value async load to async reset on $verific$i633$xtea.v:189$737 ($aldff) from module xtea.
Changing const-value async load to async reset on $verific$i625$xtea.v:189$732 ($aldff) from module xtea.
Changing const-value async load to async reset on $verific$i617$xtea.v:189$727 ($aldff) from module xtea.
Changing const-value async load to async reset on $verific$i609$xtea.v:189$722 ($aldff) from module xtea.
Changing const-value async load to async reset on $verific$i601$xtea.v:189$717 ($aldff) from module xtea.
Changing const-value async load to async reset on $verific$i593$xtea.v:189$712 ($aldff) from module xtea.
Changing const-value async load to async reset on $verific$i585$xtea.v:189$707 ($aldff) from module xtea.
Changing const-value async load to async reset on $verific$i577$xtea.v:189$702 ($aldff) from module xtea.
Changing const-value async load to async reset on $verific$i569$xtea.v:189$697 ($aldff) from module xtea.
Changing const-value async load to async reset on $verific$i561$xtea.v:189$692 ($aldff) from module xtea.
Changing const-value async load to async reset on $verific$i553$xtea.v:189$687 ($aldff) from module xtea.
Changing const-value async load to async reset on $verific$i545$xtea.v:189$682 ($aldff) from module xtea.
Changing const-value async load to async reset on $verific$i537$xtea.v:189$677 ($aldff) from module xtea.
Changing const-value async load to async reset on $verific$i529$xtea.v:189$672 ($aldff) from module xtea.
Changing const-value async load to async reset on $verific$i521$xtea.v:189$667 ($aldff) from module xtea.
Changing const-value async load to async reset on $verific$i513$xtea.v:189$662 ($aldff) from module xtea.
Changing const-value async load to async reset on $verific$i505$xtea.v:189$657 ($aldff) from module xtea.
Changing const-value async load to async reset on $verific$i497$xtea.v:189$652 ($aldff) from module xtea.
Changing const-value async load to async reset on $verific$i489$xtea.v:189$647 ($aldff) from module xtea.
Changing const-value async load to async reset on $verific$i481$xtea.v:189$642 ($aldff) from module xtea.
Changing const-value async load to async reset on $verific$i473$xtea.v:189$637 ($aldff) from module xtea.
Changing const-value async load to async reset on $verific$i465$xtea.v:189$632 ($aldff) from module xtea.
Changing const-value async load to async reset on $verific$i457$xtea.v:189$627 ($aldff) from module xtea.
Changing const-value async load to async reset on $verific$i449$xtea.v:189$622 ($aldff) from module xtea.
Changing const-value async load to async reset on $verific$i441$xtea.v:189$617 ($aldff) from module xtea.
Changing const-value async load to async reset on $verific$i433$xtea.v:189$612 ($aldff) from module xtea.
Changing const-value async load to async reset on $verific$i425$xtea.v:189$607 ($aldff) from module xtea.
Changing const-value async load to async reset on $verific$i417$xtea.v:189$602 ($aldff) from module xtea.
Changing const-value async load to async reset on $verific$i409$xtea.v:189$597 ($aldff) from module xtea.
Changing const-value async load to async reset on $verific$i401$xtea.v:189$592 ($aldff) from module xtea.
Changing const-value async load to async reset on $verific$i393$xtea.v:189$587 ($aldff) from module xtea.
Changing const-value async load to async reset on $verific$i385$xtea.v:189$582 ($aldff) from module xtea.
Changing const-value async load to async reset on $verific$i377$xtea.v:189$577 ($aldff) from module xtea.
Changing const-value async load to async reset on $verific$i369$xtea.v:189$572 ($aldff) from module xtea.
Changing const-value async load to async reset on $verific$i361$xtea.v:189$567 ($aldff) from module xtea.
Changing const-value async load to async reset on $verific$i353$xtea.v:189$562 ($aldff) from module xtea.
Changing const-value async load to async reset on $verific$i345$xtea.v:189$557 ($aldff) from module xtea.
Changing const-value async load to async reset on $verific$i337$xtea.v:189$552 ($aldff) from module xtea.
Changing const-value async load to async reset on $verific$i329$xtea.v:189$547 ($aldff) from module xtea.
Changing const-value async load to async reset on $verific$i321$xtea.v:189$542 ($aldff) from module xtea.
Changing const-value async load to async reset on $verific$i313$xtea.v:189$537 ($aldff) from module xtea.
Changing const-value async load to async reset on $verific$i305$xtea.v:189$532 ($aldff) from module xtea.
Changing const-value async load to async reset on $verific$i297$xtea.v:189$527 ($aldff) from module xtea.
Changing const-value async load to async reset on $verific$i289$xtea.v:189$522 ($aldff) from module xtea.
Changing const-value async load to async reset on $verific$i281$xtea.v:189$517 ($aldff) from module xtea.
Changing const-value async load to async reset on $verific$i273$xtea.v:189$512 ($aldff) from module xtea.
Changing const-value async load to async reset on $verific$i265$xtea.v:189$507 ($aldff) from module xtea.
Changing const-value async load to async reset on $verific$i257$xtea.v:189$502 ($aldff) from module xtea.
Changing const-value async load to async reset on $verific$i249$xtea.v:189$497 ($aldff) from module xtea.
Changing const-value async load to async reset on $verific$i241$xtea.v:189$492 ($aldff) from module xtea.
Changing const-value async load to async reset on $verific$i233$xtea.v:189$487 ($aldff) from module xtea.
Changing const-value async load to async reset on $verific$i225$xtea.v:189$482 ($aldff) from module xtea.
Changing const-value async load to async reset on $verific$i217$xtea.v:189$477 ($aldff) from module xtea.
Changing const-value async load to async reset on $verific$i209$xtea.v:189$472 ($aldff) from module xtea.
Changing const-value async load to async reset on $verific$i201$xtea.v:189$467 ($aldff) from module xtea.
Changing const-value async load to async reset on $verific$delta_reg$xtea.v:189$462 ($aldff) from module xtea.
Changing const-value async load to async reset on $verific$data_out2_reg$xtea.v:189$454 ($aldff) from module xtea.
Changing const-value async load to async reset on $verific$data_out1_reg$xtea.v:189$453 ($aldff) from module xtea.
Changing const-value async load to async reset on $verific$all_done_reg$xtea.v:189$461 ($aldff) from module xtea.

yosys> opt_clean

3.11.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \xtea..
Removed 0 unused cells and 64 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.11.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module xtea.

3.11.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.11.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \xtea..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~140 debug messages>

yosys> opt_reduce

3.11.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \xtea.
Performed a total of 0 changes.

yosys> opt_merge

3.11.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\xtea'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.11.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.11.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \xtea..

yosys> opt_expr

3.11.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module xtea.

3.11.16. Finished OPT passes. (There is nothing left to do.)

yosys> fsm -encoding binary

3.12. Executing FSM pass (extract and optimize FSM).

yosys> fsm_detect

3.12.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking xtea.delta as FSM state register:
    Users of register don't seem to benefit from recoding.

yosys> fsm_extract

3.12.2. Executing FSM_EXTRACT pass (extracting FSM from design).

yosys> fsm_opt

3.12.3. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> opt_clean

3.12.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \xtea..

yosys> fsm_opt

3.12.5. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> fsm_recode -encoding binary

3.12.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

yosys> fsm_info

3.12.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

yosys> fsm_map

3.12.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

yosys> opt -sat

3.13. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module xtea.

yosys> opt_merge -nomux

3.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\xtea'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \xtea..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~140 debug messages>

yosys> opt_reduce

3.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \xtea.
Performed a total of 0 changes.

yosys> opt_merge

3.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\xtea'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.13.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $verific$x_reg$xtea.v:189$455 ($adff) from module xtea (D = $verific$n3875$362, Q = \x).
Adding EN signal on $verific$workunit2_reg$xtea.v:189$459 ($adff) from module xtea (D = $verific$n3770$358, Q = \workunit2).
Adding EN signal on $verific$workunit1_reg$xtea.v:189$458 ($adff) from module xtea (D = $verific$n3737$357, Q = \workunit1).
Adding EN signal on $verific$while_flag_reg$xtea.v:189$457 ($adff) from module xtea (D = $verific$n129$7, Q = \while_flag).
Adding EN signal on $verific$sum_reg$xtea.v:189$456 ($adff) from module xtea (D = $verific$n3836$360, Q = \sum).
Adding EN signal on $verific$selectslice_reg$xtea.v:189$460 ($adff) from module xtea (D = $verific$n3872$361, Q = \selectslice).
Adding EN signal on $verific$modereg_reg$xtea.v:189$463 ($adff) from module xtea (D = \mode, Q = \modereg).
Adding EN signal on $verific$i705$xtea.v:189$783 ($adff) from module xtea (D = $verific$n4167$31, Q = $verific$n4672$284).
Adding EN signal on $verific$i697$xtea.v:189$778 ($adff) from module xtea (D = $verific$n4167$31, Q = $verific$n4664$280).
Adding EN signal on $verific$i689$xtea.v:189$772 ($adff) from module xtea (D = $verific$n4167$31, Q = $verific$n4656$276).
Adding EN signal on $verific$i681$xtea.v:189$767 ($adff) from module xtea (D = $verific$n4167$31, Q = $verific$n4648$272).
Adding EN signal on $verific$i673$xtea.v:189$762 ($adff) from module xtea (D = $verific$n4167$31, Q = $verific$n4640$268).
Adding EN signal on $verific$i665$xtea.v:189$757 ($adff) from module xtea (D = $verific$n4167$31, Q = $verific$n4632$264).
Adding EN signal on $verific$i657$xtea.v:189$752 ($adff) from module xtea (D = $verific$n4167$31, Q = $verific$n4624$260).
Adding EN signal on $verific$i649$xtea.v:189$747 ($adff) from module xtea (D = $verific$n4167$31, Q = $verific$n4616$256).
Adding EN signal on $verific$i641$xtea.v:189$742 ($adff) from module xtea (D = $verific$n4167$31, Q = $verific$n4608$252).
Adding EN signal on $verific$i633$xtea.v:189$737 ($adff) from module xtea (D = $verific$n4167$31, Q = $verific$n4600$248).
Adding EN signal on $verific$i625$xtea.v:189$732 ($adff) from module xtea (D = $verific$n4167$31, Q = $verific$n4592$244).
Adding EN signal on $verific$i617$xtea.v:189$727 ($adff) from module xtea (D = $verific$n4167$31, Q = $verific$n4584$240).
Adding EN signal on $verific$i609$xtea.v:189$722 ($adff) from module xtea (D = $verific$n4167$31, Q = $verific$n4576$236).
Adding EN signal on $verific$i601$xtea.v:189$717 ($adff) from module xtea (D = $verific$n4167$31, Q = $verific$n4568$232).
Adding EN signal on $verific$i593$xtea.v:189$712 ($adff) from module xtea (D = $verific$n4167$31, Q = $verific$n4560$228).
Adding EN signal on $verific$i585$xtea.v:189$707 ($adff) from module xtea (D = $verific$n4167$31, Q = $verific$n4552$224).
Adding EN signal on $verific$i577$xtea.v:189$702 ($adff) from module xtea (D = $verific$n4167$31, Q = $verific$n4544$220).
Adding EN signal on $verific$i569$xtea.v:189$697 ($adff) from module xtea (D = $verific$n4167$31, Q = $verific$n4536$216).
Adding EN signal on $verific$i561$xtea.v:189$692 ($adff) from module xtea (D = $verific$n4167$31, Q = $verific$n4528$212).
Adding EN signal on $verific$i553$xtea.v:189$687 ($adff) from module xtea (D = $verific$n4167$31, Q = $verific$n4520$208).
Adding EN signal on $verific$i545$xtea.v:189$682 ($adff) from module xtea (D = $verific$n4167$31, Q = $verific$n4512$204).
Adding EN signal on $verific$i537$xtea.v:189$677 ($adff) from module xtea (D = $verific$n4167$31, Q = $verific$n4504$200).
Adding EN signal on $verific$i529$xtea.v:189$672 ($adff) from module xtea (D = $verific$n4167$31, Q = $verific$n4496$196).
Adding EN signal on $verific$i521$xtea.v:189$667 ($adff) from module xtea (D = $verific$n4167$31, Q = $verific$n4488$192).
Adding EN signal on $verific$i513$xtea.v:189$662 ($adff) from module xtea (D = $verific$n4167$31, Q = $verific$n4480$188).
Adding EN signal on $verific$i505$xtea.v:189$657 ($adff) from module xtea (D = $verific$n4167$31, Q = $verific$n4472$184).
Adding EN signal on $verific$i497$xtea.v:189$652 ($adff) from module xtea (D = $verific$n4167$31, Q = $verific$n4464$180).
Adding EN signal on $verific$i489$xtea.v:189$647 ($adff) from module xtea (D = $verific$n4167$31, Q = $verific$n4456$176).
Adding EN signal on $verific$i481$xtea.v:189$642 ($adff) from module xtea (D = $verific$n4167$31, Q = $verific$n4448$172).
Adding EN signal on $verific$i473$xtea.v:189$637 ($adff) from module xtea (D = $verific$n4167$31, Q = $verific$n4440$168).
Adding EN signal on $verific$i465$xtea.v:189$632 ($adff) from module xtea (D = $verific$n4167$31, Q = $verific$n4432$164).
Adding EN signal on $verific$i457$xtea.v:189$627 ($adff) from module xtea (D = $verific$n4167$31, Q = $verific$n4424$160).
Adding EN signal on $verific$i449$xtea.v:189$622 ($adff) from module xtea (D = $verific$n4167$31, Q = $verific$n4416$156).
Adding EN signal on $verific$i441$xtea.v:189$617 ($adff) from module xtea (D = $verific$n4167$31, Q = $verific$n4408$152).
Adding EN signal on $verific$i433$xtea.v:189$612 ($adff) from module xtea (D = $verific$n4167$31, Q = $verific$n4400$148).
Adding EN signal on $verific$i425$xtea.v:189$607 ($adff) from module xtea (D = $verific$n4167$31, Q = $verific$n4392$144).
Adding EN signal on $verific$i417$xtea.v:189$602 ($adff) from module xtea (D = $verific$n4167$31, Q = $verific$n4384$140).
Adding EN signal on $verific$i409$xtea.v:189$597 ($adff) from module xtea (D = $verific$n4167$31, Q = $verific$n4376$136).
Adding EN signal on $verific$i401$xtea.v:189$592 ($adff) from module xtea (D = $verific$n4167$31, Q = $verific$n4368$132).
Adding EN signal on $verific$i393$xtea.v:189$587 ($adff) from module xtea (D = $verific$n4167$31, Q = $verific$n4360$128).
Adding EN signal on $verific$i385$xtea.v:189$582 ($adff) from module xtea (D = $verific$n4167$31, Q = $verific$n4352$124).
Adding EN signal on $verific$i377$xtea.v:189$577 ($adff) from module xtea (D = $verific$n4167$31, Q = $verific$n4344$120).
Adding EN signal on $verific$i369$xtea.v:189$572 ($adff) from module xtea (D = $verific$n4167$31, Q = $verific$n4336$116).
Adding EN signal on $verific$i361$xtea.v:189$567 ($adff) from module xtea (D = $verific$n4167$31, Q = $verific$n4328$112).
Adding EN signal on $verific$i353$xtea.v:189$562 ($adff) from module xtea (D = $verific$n4167$31, Q = $verific$n4320$108).
Adding EN signal on $verific$i345$xtea.v:189$557 ($adff) from module xtea (D = $verific$n4167$31, Q = $verific$n4312$104).
Adding EN signal on $verific$i337$xtea.v:189$552 ($adff) from module xtea (D = $verific$n4167$31, Q = $verific$n4304$100).
Adding EN signal on $verific$i329$xtea.v:189$547 ($adff) from module xtea (D = $verific$n4167$31, Q = $verific$n4296$96).
Adding EN signal on $verific$i321$xtea.v:189$542 ($adff) from module xtea (D = $verific$n4167$31, Q = $verific$n4288$92).
Adding EN signal on $verific$i313$xtea.v:189$537 ($adff) from module xtea (D = $verific$n4167$31, Q = $verific$n4280$88).
Adding EN signal on $verific$i305$xtea.v:189$532 ($adff) from module xtea (D = $verific$n4167$31, Q = $verific$n4272$84).
Adding EN signal on $verific$i297$xtea.v:189$527 ($adff) from module xtea (D = $verific$n4167$31, Q = $verific$n4264$80).
Adding EN signal on $verific$i289$xtea.v:189$522 ($adff) from module xtea (D = $verific$n4167$31, Q = $verific$n4256$76).
Adding EN signal on $verific$i281$xtea.v:189$517 ($adff) from module xtea (D = $verific$n4167$31, Q = $verific$n4248$72).
Adding EN signal on $verific$i273$xtea.v:189$512 ($adff) from module xtea (D = $verific$n4167$31, Q = $verific$n4240$68).
Adding EN signal on $verific$i265$xtea.v:189$507 ($adff) from module xtea (D = $verific$n4167$31, Q = $verific$n4232$64).
Adding EN signal on $verific$i257$xtea.v:189$502 ($adff) from module xtea (D = $verific$n4167$31, Q = $verific$n4224$60).
Adding EN signal on $verific$i249$xtea.v:189$497 ($adff) from module xtea (D = $verific$n4167$31, Q = $verific$n4216$56).
Adding EN signal on $verific$i241$xtea.v:189$492 ($adff) from module xtea (D = $verific$n4167$31, Q = $verific$n4208$52).
Adding EN signal on $verific$i233$xtea.v:189$487 ($adff) from module xtea (D = $verific$n4167$31, Q = $verific$n4200$48).
Adding EN signal on $verific$i225$xtea.v:189$482 ($adff) from module xtea (D = $verific$n4167$31, Q = $verific$n4192$44).
Adding EN signal on $verific$i217$xtea.v:189$477 ($adff) from module xtea (D = $verific$n4167$31, Q = $verific$n4184$40).
Adding EN signal on $verific$i209$xtea.v:189$472 ($adff) from module xtea (D = $verific$n4167$31, Q = $verific$n4176$36).
Adding EN signal on $verific$i201$xtea.v:189$467 ($adff) from module xtea (D = $verific$n4167$31, Q = $verific$n4168$32).
Adding EN signal on $verific$delta_reg$xtea.v:189$462 ($adff) from module xtea (D = $verific$n3803$359, Q = \delta).
Adding EN signal on $verific$all_done_reg$xtea.v:189$461 ($adff) from module xtea (D = 1'1, Q = \all_done).
Setting constant 0-bit at position 1 on $auto$ff.cc:262:slice$1023 ($adffe) from module xtea.
Setting constant 0-bit at position 2 on $auto$ff.cc:262:slice$1023 ($adffe) from module xtea.
Setting constant 0-bit at position 6 on $auto$ff.cc:262:slice$1023 ($adffe) from module xtea.
Setting constant 0-bit at position 9 on $auto$ff.cc:262:slice$1023 ($adffe) from module xtea.
Setting constant 0-bit at position 10 on $auto$ff.cc:262:slice$1023 ($adffe) from module xtea.
Setting constant 0-bit at position 15 on $auto$ff.cc:262:slice$1023 ($adffe) from module xtea.
Setting constant 0-bit at position 19 on $auto$ff.cc:262:slice$1023 ($adffe) from module xtea.
Setting constant 0-bit at position 22 on $auto$ff.cc:262:slice$1023 ($adffe) from module xtea.
Setting constant 0-bit at position 23 on $auto$ff.cc:262:slice$1023 ($adffe) from module xtea.
Setting constant 0-bit at position 24 on $auto$ff.cc:262:slice$1023 ($adffe) from module xtea.
Setting constant 0-bit at position 29 on $auto$ff.cc:262:slice$1023 ($adffe) from module xtea.
Setting constant 0-bit at position 30 on $auto$ff.cc:262:slice$1023 ($adffe) from module xtea.
Setting constant 0-bit at position 5 on $verific$state_reg$xtea.v:91$393 ($adff) from module xtea.
Setting constant 0-bit at position 6 on $verific$state_reg$xtea.v:91$393 ($adff) from module xtea.
Setting constant 0-bit at position 7 on $verific$state_reg$xtea.v:91$393 ($adff) from module xtea.

yosys> opt_clean

3.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \xtea..
Removed 67 unused cells and 67 unused wires.
<suppressed ~68 debug messages>

yosys> opt_expr

3.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module xtea.
<suppressed ~12 debug messages>

3.13.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.13.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \xtea..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~73 debug messages>

yosys> opt_reduce

3.13.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \xtea.
Performed a total of 0 changes.

yosys> opt_merge

3.13.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\xtea'.
<suppressed ~189 debug messages>
Removed a total of 63 cells.

yosys> opt_dff -sat

3.13.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.13.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \xtea..
Removed 6 unused cells and 69 unused wires.
<suppressed ~7 debug messages>

yosys> opt_expr

3.13.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module xtea.

3.13.16. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.13.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \xtea..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~73 debug messages>

yosys> opt_reduce

3.13.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \xtea.
Performed a total of 0 changes.

yosys> opt_merge

3.13.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\xtea'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.13.20. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.13.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \xtea..

yosys> opt_expr

3.13.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module xtea.

3.13.23. Finished OPT passes. (There is nothing left to do.)

yosys> wreduce -keepdc

3.14. Executing WREDUCE pass (reducing word size of cells).
Removed top 4 bits (of 5) from port B of cell xtea.$verific$equal_15$xtea.v:72$372 ($eq).
Removed top 3 bits (of 5) from port B of cell xtea.$verific$equal_16$xtea.v:73$373 ($eq).
Removed top 3 bits (of 5) from port B of cell xtea.$verific$equal_17$xtea.v:74$374 ($eq).
Removed top 2 bits (of 5) from port B of cell xtea.$verific$equal_18$xtea.v:75$375 ($eq).
Removed top 2 bits (of 5) from port B of cell xtea.$verific$equal_19$xtea.v:76$376 ($eq).
Removed top 2 bits (of 5) from port B of cell xtea.$verific$equal_20$xtea.v:77$377 ($eq).
Removed top 2 bits (of 5) from port B of cell xtea.$verific$equal_21$xtea.v:78$378 ($eq).
Removed top 1 bits (of 5) from port B of cell xtea.$verific$equal_22$xtea.v:79$379 ($eq).
Removed top 1 bits (of 5) from port B of cell xtea.$verific$equal_23$xtea.v:80$380 ($eq).
Removed top 1 bits (of 5) from port B of cell xtea.$verific$equal_24$xtea.v:81$381 ($eq).
Removed top 1 bits (of 5) from port B of cell xtea.$verific$equal_25$xtea.v:82$382 ($eq).
Removed top 1 bits (of 5) from port B of cell xtea.$verific$equal_26$xtea.v:83$383 ($eq).
Removed top 1 bits (of 5) from port B of cell xtea.$verific$equal_27$xtea.v:84$384 ($eq).
Removed top 1 bits (of 5) from port B of cell xtea.$verific$equal_28$xtea.v:85$385 ($eq).
Removed top 1 bits (of 5) from port B of cell xtea.$verific$equal_29$xtea.v:86$386 ($eq).
Removed top 3 bits (of 8) from mux cell xtea.$verific$select_33$xtea.v:90$392 ($pmux).
Removed top 2 bits (of 8) from port B of cell xtea.$verific$LessThan_39$xtea.v:120$397 ($lt).
Removed top 5 bits (of 32) from port B of cell xtea.$verific$xor_42$xtea.v:135$399 ($xor).
Removed top 5 bits (of 32) from port B of cell xtea.$verific$xor_70$xtea.v:145$416 ($xor).
Removed top 7 bits (of 8) from port B of cell xtea.$verific$add_95$xtea.v:151$428 ($add).
Removed top 1 bits (of 4) from wire xtea.$verific$n14$288.
Removed top 3 bits (of 8) from wire xtea.$verific$n42$289.
Removed top 3 bits (of 8) from wire xtea.state.

yosys> peepopt

3.15. Executing PEEPOPT pass (run peephole optimizers).

yosys> pmuxtree

3.16. Executing PMUXTREE pass.

yosys> opt_clean

3.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \xtea..
Removed 142 unused cells and 216 unused wires.
<suppressed ~143 debug messages>

yosys> alumacc

3.18. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module xtea:
  creating $macc model for $verific$add_102$xtea.v:156$430 ($add).
  creating $macc model for $verific$add_108$xtea.v:157$431 ($add).
  creating $macc model for $verific$add_114$xtea.v:158$432 ($add).
  creating $macc model for $verific$add_120$xtea.v:159$433 ($add).
  creating $macc model for $verific$add_123$xtea.v:162$434 ($add).
  creating $macc model for $verific$add_130$xtea.v:166$435 ($add).
  creating $macc model for $verific$add_136$xtea.v:167$436 ($add).
  creating $macc model for $verific$add_142$xtea.v:168$437 ($add).
  creating $macc model for $verific$add_148$xtea.v:169$438 ($add).
  creating $macc model for $verific$add_43$xtea.v:135$400 ($add).
  creating $macc model for $verific$add_44$xtea.v:135$401 ($add).
  creating $macc model for $verific$add_50$xtea.v:136$404 ($add).
  creating $macc model for $verific$add_56$xtea.v:137$407 ($add).
  creating $macc model for $verific$add_62$xtea.v:138$410 ($add).
  creating $macc model for $verific$add_71$xtea.v:145$417 ($add).
  creating $macc model for $verific$add_95$xtea.v:151$428 ($add).
  creating $macc model for $verific$sub_46$xtea.v:135$403 ($sub).
  creating $macc model for $verific$sub_52$xtea.v:136$406 ($sub).
  creating $macc model for $verific$sub_58$xtea.v:137$409 ($sub).
  creating $macc model for $verific$sub_64$xtea.v:138$412 ($sub).
  creating $macc model for $verific$sub_67$xtea.v:141$414 ($sub).
  creating $macc model for $verific$sub_74$xtea.v:145$419 ($sub).
  creating $macc model for $verific$sub_80$xtea.v:146$421 ($sub).
  creating $macc model for $verific$sub_86$xtea.v:147$423 ($sub).
  creating $macc model for $verific$sub_92$xtea.v:148$425 ($sub).
  creating $alu model for $macc $verific$sub_92$xtea.v:148$425.
  creating $alu model for $macc $verific$sub_86$xtea.v:147$423.
  creating $alu model for $macc $verific$sub_80$xtea.v:146$421.
  creating $alu model for $macc $verific$sub_74$xtea.v:145$419.
  creating $alu model for $macc $verific$sub_67$xtea.v:141$414.
  creating $alu model for $macc $verific$sub_64$xtea.v:138$412.
  creating $alu model for $macc $verific$sub_58$xtea.v:137$409.
  creating $alu model for $macc $verific$sub_52$xtea.v:136$406.
  creating $alu model for $macc $verific$sub_46$xtea.v:135$403.
  creating $alu model for $macc $verific$add_95$xtea.v:151$428.
  creating $alu model for $macc $verific$add_71$xtea.v:145$417.
  creating $alu model for $macc $verific$add_62$xtea.v:138$410.
  creating $alu model for $macc $verific$add_56$xtea.v:137$407.
  creating $alu model for $macc $verific$add_50$xtea.v:136$404.
  creating $alu model for $macc $verific$add_44$xtea.v:135$401.
  creating $alu model for $macc $verific$add_43$xtea.v:135$400.
  creating $alu model for $macc $verific$add_148$xtea.v:169$438.
  creating $alu model for $macc $verific$add_142$xtea.v:168$437.
  creating $alu model for $macc $verific$add_136$xtea.v:167$436.
  creating $alu model for $macc $verific$add_130$xtea.v:166$435.
  creating $alu model for $macc $verific$add_123$xtea.v:162$434.
  creating $alu model for $macc $verific$add_120$xtea.v:159$433.
  creating $alu model for $macc $verific$add_114$xtea.v:158$432.
  creating $alu model for $macc $verific$add_108$xtea.v:157$431.
  creating $alu model for $macc $verific$add_102$xtea.v:156$430.
  creating $alu model for $verific$LessThan_39$xtea.v:120$397 ($lt): new $alu
  creating $alu cell for $verific$LessThan_39$xtea.v:120$397: $auto$alumacc.cc:485:replace_alu$1665
  creating $alu cell for $verific$add_102$xtea.v:156$430: $auto$alumacc.cc:485:replace_alu$1676
  creating $alu cell for $verific$add_108$xtea.v:157$431: $auto$alumacc.cc:485:replace_alu$1679
  creating $alu cell for $verific$add_114$xtea.v:158$432: $auto$alumacc.cc:485:replace_alu$1682
  creating $alu cell for $verific$add_120$xtea.v:159$433: $auto$alumacc.cc:485:replace_alu$1685
  creating $alu cell for $verific$add_148$xtea.v:169$438: $auto$alumacc.cc:485:replace_alu$1688
  creating $alu cell for $verific$add_43$xtea.v:135$400: $auto$alumacc.cc:485:replace_alu$1691
  creating $alu cell for $verific$add_44$xtea.v:135$401: $auto$alumacc.cc:485:replace_alu$1694
  creating $alu cell for $verific$add_50$xtea.v:136$404: $auto$alumacc.cc:485:replace_alu$1697
  creating $alu cell for $verific$add_56$xtea.v:137$407: $auto$alumacc.cc:485:replace_alu$1700
  creating $alu cell for $verific$add_62$xtea.v:138$410: $auto$alumacc.cc:485:replace_alu$1703
  creating $alu cell for $verific$add_71$xtea.v:145$417: $auto$alumacc.cc:485:replace_alu$1706
  creating $alu cell for $verific$add_95$xtea.v:151$428: $auto$alumacc.cc:485:replace_alu$1709
  creating $alu cell for $verific$add_130$xtea.v:166$435: $auto$alumacc.cc:485:replace_alu$1712
  creating $alu cell for $verific$sub_46$xtea.v:135$403: $auto$alumacc.cc:485:replace_alu$1715
  creating $alu cell for $verific$add_136$xtea.v:167$436: $auto$alumacc.cc:485:replace_alu$1718
  creating $alu cell for $verific$sub_52$xtea.v:136$406: $auto$alumacc.cc:485:replace_alu$1721
  creating $alu cell for $verific$add_142$xtea.v:168$437: $auto$alumacc.cc:485:replace_alu$1724
  creating $alu cell for $verific$sub_58$xtea.v:137$409: $auto$alumacc.cc:485:replace_alu$1727
  creating $alu cell for $verific$sub_64$xtea.v:138$412: $auto$alumacc.cc:485:replace_alu$1730
  creating $alu cell for $verific$add_123$xtea.v:162$434: $auto$alumacc.cc:485:replace_alu$1733
  creating $alu cell for $verific$sub_67$xtea.v:141$414: $auto$alumacc.cc:485:replace_alu$1736
  creating $alu cell for $verific$sub_74$xtea.v:145$419: $auto$alumacc.cc:485:replace_alu$1739
  creating $alu cell for $verific$sub_80$xtea.v:146$421: $auto$alumacc.cc:485:replace_alu$1742
  creating $alu cell for $verific$sub_86$xtea.v:147$423: $auto$alumacc.cc:485:replace_alu$1745
  creating $alu cell for $verific$sub_92$xtea.v:148$425: $auto$alumacc.cc:485:replace_alu$1748
  created 26 $alu and 0 $macc cells.

yosys> opt

3.19. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module xtea.
<suppressed ~1 debug messages>

yosys> opt_merge -nomux

3.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\xtea'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \xtea..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~73 debug messages>

yosys> opt_reduce

3.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \xtea.
    New input vector for $reduce_or cell $auto$pmuxtree.cc:37:or_generator$1634: { $auto$rtlil.cc:2390:Or$1623 $verific$n3733$22 $verific$n3732$21 $verific$n3727$16 $verific$n3719$8 }
    New input vector for $reduce_or cell $auto$pmuxtree.cc:37:or_generator$1660: { $auto$rtlil.cc:2390:Or$1631 $auto$rtlil.cc:2390:Or$1623 $verific$n3733$22 $verific$n3732$21 $verific$n3729$18 $verific$n3728$17 $verific$n3727$16 $verific$n3719$8 }
  Optimizing cells in module \xtea.
Performed a total of 2 changes.

yosys> opt_merge

3.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\xtea'.
Removed a total of 0 cells.

yosys> opt_dff

3.19.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.19.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \xtea..
Removed 1 unused cells and 2 unused wires.
<suppressed ~2 debug messages>

yosys> opt_expr

3.19.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module xtea.

3.19.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.19.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \xtea..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~73 debug messages>

yosys> opt_reduce

3.19.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \xtea.
Performed a total of 0 changes.

yosys> opt_merge

3.19.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\xtea'.
Removed a total of 0 cells.

yosys> opt_dff

3.19.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.19.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \xtea..

yosys> opt_expr

3.19.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module xtea.

3.19.16. Finished OPT passes. (There is nothing left to do.)

yosys> stat

3.20. Printing statistics.

=== xtea ===

   Number of wires:                393
   Number of wire bits:           4075
   Number of public wires:          18
   Number of public wire bits:     405
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                395
     $adff                           3
     $adffe                         10
     $alu                           26
     $bmux                           2
     $eq                            17
     $logic_not                      1
     $mux                          229
     $not                            6
     $or                             9
     $reduce_and                     1
     $reduce_or                     17
     $tribuf                        64
     $xor                           10


yosys> memory -nomap

3.21. Executing MEMORY pass.

yosys> opt_mem

3.21.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

yosys> opt_mem_priority

3.21.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

yosys> opt_mem_feedback

3.21.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

yosys> memory_bmux2rom

3.21.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

yosys> memory_dff

3.21.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

yosys> opt_clean

3.21.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \xtea..

yosys> memory_share

3.21.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

yosys> opt_mem_widen

3.21.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

yosys> opt_clean

3.21.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \xtea..

yosys> memory_collect

3.21.10. Executing MEMORY_COLLECT pass (generating $mem cells).

yosys> stat

3.22. Printing statistics.

=== xtea ===

   Number of wires:                393
   Number of wire bits:           4075
   Number of public wires:          18
   Number of public wire bits:     405
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                395
     $adff                           3
     $adffe                         10
     $alu                           26
     $bmux                           2
     $eq                            17
     $logic_not                      1
     $mux                          229
     $not                            6
     $or                             9
     $reduce_and                     1
     $reduce_or                     17
     $tribuf                        64
     $xor                           10


yosys> opt_clean

3.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \xtea..

yosys> stat

3.24. Printing statistics.

=== xtea ===

   Number of wires:                393
   Number of wire bits:           4075
   Number of public wires:          18
   Number of public wire bits:     405
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                395
     $adff                           3
     $adffe                         10
     $alu                           26
     $bmux                           2
     $eq                            17
     $logic_not                      1
     $mux                          229
     $not                            6
     $or                             9
     $reduce_and                     1
     $reduce_or                     17
     $tribuf                        64
     $xor                           10


yosys> techmap -map +/techmap.v -map +/rapidsilicon/genesis/arith_map.v

3.25. Executing TECHMAP pass (map to technology primitives).

3.25.1. Executing Verilog-2005 frontend: /home/users/aram/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/aram/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.25.2. Executing Verilog-2005 frontend: /home/users/aram/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/arith_map.v
Parsing Verilog input from `/home/users/aram/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_rs_alu'.
Successfully finished Verilog frontend.

3.25.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $eq.
Using template $paramod$be80489e44a49c29884f59fd81c31ed03229cfc1\_80_rs_alu for cells of type $alu.
Using extmapper simplemap for cells of type $xor.
Using template $paramod$79fc87901d7fd8aaad689b5406671422f5fa25b9\_80_rs_alu for cells of type $alu.
Using template $paramod$fbc7873bff55778c0b3173955b7e4bce1d9d6834\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $bmux.
Using template $paramod$c3cd1564c35d873179656addd6052d7ea8b6d991\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $adff.
Using extmapper simplemap for cells of type $adffe.
Using extmapper simplemap for cells of type $tribuf.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $reduce_and.
Using template $paramod$150d098cb9cca1819459bc5073194c8c53d2862d\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $and.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000100000 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001000 for cells of type $lcu.
No more expansions possible.
<suppressed ~1703 debug messages>

yosys> stat

3.26. Printing statistics.

=== xtea ===

   Number of wires:               1385
   Number of wire bits:          20989
   Number of public wires:          18
   Number of public wire bits:     405
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               5712
     $_AND_                        287
     $_DFFE_PP0N_                  126
     $_DFFE_PP0P_                    3
     $_DFFE_PP1P_                    1
     $_DFF_PP0_                     69
     $_MUX_                       1956
     $_NOT_                        808
     $_OR_                         377
     $_TBUF_                        64
     $_XOR_                       1317
     adder_carry                   704


yosys> opt

3.27. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.27.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module xtea.
<suppressed ~1457 debug messages>

yosys> opt_merge -nomux

3.27.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\xtea'.
<suppressed ~1548 debug messages>
Removed a total of 516 cells.

yosys> opt_muxtree

3.27.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \xtea..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.27.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \xtea.
Performed a total of 0 changes.

yosys> opt_merge

3.27.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\xtea'.
Removed a total of 0 cells.

yosys> opt_dff

3.27.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.27.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \xtea..
Removed 281 unused cells and 774 unused wires.
<suppressed ~282 debug messages>

yosys> opt_expr

3.27.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module xtea.

3.27.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.27.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \xtea..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.27.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \xtea.
Performed a total of 0 changes.

yosys> opt_merge

3.27.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\xtea'.
Removed a total of 0 cells.

yosys> opt_dff

3.27.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.27.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \xtea..

yosys> opt_expr

3.27.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module xtea.

3.27.16. Finished OPT passes. (There is nothing left to do.)

yosys> opt -fast -full

3.28. Executing OPT pass (performing simple optimizations).

yosys> opt_expr -full

3.28.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module xtea.
<suppressed ~191 debug messages>

yosys> opt_merge

3.28.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\xtea'.
Removed a total of 0 cells.

yosys> opt_dff

3.28.3. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.28.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \xtea..
Removed 5 unused cells and 74 unused wires.
<suppressed ~6 debug messages>

3.28.5. Finished fast OPT passes.

yosys> memory_map

3.29. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

yosys> opt -full

3.30. Executing OPT pass (performing simple optimizations).

yosys> opt_expr -full

3.30.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module xtea.

yosys> opt_merge -nomux

3.30.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\xtea'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.30.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \xtea..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce -full

3.30.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \xtea.
Performed a total of 0 changes.

yosys> opt_merge

3.30.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\xtea'.
Removed a total of 0 cells.

yosys> opt_share

3.30.6. Executing OPT_SHARE pass.

yosys> opt_dff

3.30.7. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.30.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \xtea..

yosys> opt_expr -full

3.30.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module xtea.

3.30.10. Finished OPT passes. (There is nothing left to do.)

yosys> techmap -map +/techmap.v

3.31. Executing TECHMAP pass (map to technology primitives).

3.31.1. Executing Verilog-2005 frontend: /home/users/aram/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/aram/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.31.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~71 debug messages>

yosys> opt -sat

3.32. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.32.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module xtea.

yosys> opt_merge -nomux

3.32.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\xtea'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.32.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \xtea..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.32.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \xtea.
Performed a total of 0 changes.

yosys> opt_merge

3.32.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\xtea'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.32.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.32.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \xtea..

yosys> opt_expr

3.32.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module xtea.

3.32.9. Finished OPT passes. (There is nothing left to do.)

yosys> abc -dff

3.33. Executing ABC pass (technology mapping using ABC).

3.33.1. Summary of detected clock domains:
  52 cells in clk=\clock, en=!$auto$opt_reduce.cc:134:opt_pmux$935, arst=\reset, srst={ }
  74 cells in clk=\clock, en=$auto$opt_reduce.cc:134:opt_pmux$789, arst=\reset, srst={ }
  3 cells in clk=\clock, en=!$auto$simplemap.cc:257:simplemap_eqne$2210, arst=\reset, srst={ }
  50 cells in clk=\clock, en=!$auto$opt_reduce.cc:134:opt_pmux$925, arst=\reset, srst={ }
  3 cells in clk=\clock, en=!$auto$simplemap.cc:257:simplemap_eqne$1922, arst=\reset, srst={ }
  937 cells in clk=\clock, en=!$auto$opt_reduce.cc:134:opt_pmux$921, arst=\reset, srst={ }
  13 cells in clk=\clock, en=!$auto$simplemap.cc:257:simplemap_eqne$1940, arst=\reset, srst={ }
  722 cells in clk=\clock, en=!$auto$opt_reduce.cc:134:opt_pmux$927, arst=\reset, srst={ }
  593 cells in clk=\clock, en=!$auto$opt_reduce.cc:134:opt_pmux$929, arst=\reset, srst={ }
  981 cells in clk=\clock, en=!$auto$opt_reduce.cc:134:opt_pmux$923, arst=\reset, srst={ }
  232 cells in clk=\clock, en={ }, arst=\reset, srst={ }

3.33.2. Extracting gate netlist of module `\xtea' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by !$auto$opt_reduce.cc:134:opt_pmux$935, asynchronously reset by \reset
Extracted 52 gates and 64 wires to a netlist network with 12 inputs and 15 outputs.

3.33.2.1. Executing ABC.

3.33.3. Extracting gate netlist of module `\xtea' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_reduce.cc:134:opt_pmux$789, asynchronously reset by \reset
Extracted 10 gates and 19 wires to a netlist network with 9 inputs and 5 outputs.

3.33.3.1. Executing ABC.

3.33.4. Extracting gate netlist of module `\xtea' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by !$auto$simplemap.cc:257:simplemap_eqne$2210, asynchronously reset by \reset
Extracted 3 gates and 7 wires to a netlist network with 3 inputs and 3 outputs.

3.33.4.1. Executing ABC.

3.33.5. Extracting gate netlist of module `\xtea' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by !$auto$opt_reduce.cc:134:opt_pmux$925, asynchronously reset by \reset
Extracted 50 gates and 79 wires to a netlist network with 29 inputs and 44 outputs.

3.33.5.1. Executing ABC.

3.33.6. Extracting gate netlist of module `\xtea' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by !$auto$simplemap.cc:257:simplemap_eqne$1922, asynchronously reset by \reset
Extracted 3 gates and 6 wires to a netlist network with 3 inputs and 2 outputs.

3.33.6.1. Executing ABC.

3.33.7. Extracting gate netlist of module `\xtea' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by !$auto$opt_reduce.cc:134:opt_pmux$921, asynchronously reset by \reset
Extracted 755 gates and 1043 wires to a netlist network with 287 inputs and 496 outputs.

3.33.7.1. Executing ABC.

3.33.8. Extracting gate netlist of module `\xtea' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by !$auto$simplemap.cc:257:simplemap_eqne$1940, asynchronously reset by \reset
Extracted 13 gates and 21 wires to a netlist network with 8 inputs and 1 outputs.

3.33.8.1. Executing ABC.

3.33.9. Extracting gate netlist of module `\xtea' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by !$auto$opt_reduce.cc:134:opt_pmux$927, asynchronously reset by \reset
Extracted 594 gates and 782 wires to a netlist network with 187 inputs and 173 outputs.

3.33.9.1. Executing ABC.

3.33.10. Extracting gate netlist of module `\xtea' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by !$auto$opt_reduce.cc:134:opt_pmux$929, asynchronously reset by \reset
Extracted 433 gates and 990 wires to a netlist network with 557 inputs and 132 outputs.

3.33.10.1. Executing ABC.

3.33.11. Extracting gate netlist of module `\xtea' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by !$auto$opt_reduce.cc:134:opt_pmux$923, asynchronously reset by \reset
Extracted 747 gates and 1028 wires to a netlist network with 280 inputs and 416 outputs.

3.33.11.1. Executing ABC.

3.33.12. Extracting gate netlist of module `\xtea' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, asynchronously reset by \reset
Extracted 232 gates and 381 wires to a netlist network with 147 inputs and 90 outputs.

3.33.12.1. Executing ABC.

yosys> abc -dff

3.34. Executing ABC pass (technology mapping using ABC).

3.34.1. Summary of detected clock domains:
  11 cells in clk=\clock, en=!$abc$10038$auto$simplemap.cc:257:simplemap_eqne$1940, arst=\reset, srst={ }
  832 cells in clk=\clock, en=!$abc$8914$auto$opt_reduce.cc:134:opt_pmux$929, arst=\reset, srst={ }
  6 cells in clk=\clock, en=!$abc$10038$auto$simplemap.cc:257:simplemap_eqne$1922, arst=\reset, srst={ }
  793 cells in clk=\clock, en=!$abc$9362$auto$opt_reduce.cc:134:opt_pmux$923, arst=\reset, srst={ }
  685 cells in clk=\clock, en=!$abc$8343$auto$opt_reduce.cc:134:opt_pmux$927, arst=\reset, srst={ }
  746 cells in clk=\clock, en=!$abc$7622$auto$opt_reduce.cc:134:opt_pmux$921, arst=\reset, srst={ }
  59 cells in clk=\clock, en=!$abc$7488$auto$opt_reduce.cc:134:opt_pmux$935, arst=\reset, srst={ }
  15 cells in clk=\clock, en=$abc$7546$auto$opt_reduce.cc:134:opt_pmux$789, arst=\reset, srst={ }
  5 cells in clk=\clock, en=!$abc$7559$auto$simplemap.cc:257:simplemap_eqne$2210, arst=\reset, srst={ }
  12 cells in clk=\clock, en=!$abc$7565$auto$opt_reduce.cc:134:opt_pmux$925, arst=\reset, srst={ }
  268 cells in clk=\clock, en={ }, arst=\reset, srst={ }

3.34.2. Extracting gate netlist of module `\xtea' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by !$abc$10038$auto$simplemap.cc:257:simplemap_eqne$1940, asynchronously reset by \reset
Extracted 11 gates and 21 wires to a netlist network with 10 inputs and 3 outputs.

3.34.2.1. Executing ABC.

3.34.3. Extracting gate netlist of module `\xtea' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by !$abc$8914$auto$opt_reduce.cc:134:opt_pmux$929, asynchronously reset by \reset
Extracted 661 gates and 1394 wires to a netlist network with 733 inputs and 291 outputs.

3.34.3.1. Executing ABC.

3.34.4. Extracting gate netlist of module `\xtea' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by !$abc$10038$auto$simplemap.cc:257:simplemap_eqne$1922, asynchronously reset by \reset
Extracted 6 gates and 12 wires to a netlist network with 6 inputs and 5 outputs.

3.34.4.1. Executing ABC.

3.34.5. Extracting gate netlist of module `\xtea' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by !$abc$9362$auto$opt_reduce.cc:134:opt_pmux$923, asynchronously reset by \reset
Extracted 565 gates and 848 wires to a netlist network with 283 inputs and 355 outputs.

3.34.5.1. Executing ABC.

3.34.6. Extracting gate netlist of module `\xtea' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by !$abc$8343$auto$opt_reduce.cc:134:opt_pmux$927, asynchronously reset by \reset
Extracted 561 gates and 705 wires to a netlist network with 144 inputs and 171 outputs.

3.34.6.1. Executing ABC.

3.34.7. Extracting gate netlist of module `\xtea' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by !$abc$7622$auto$opt_reduce.cc:134:opt_pmux$921, asynchronously reset by \reset
Extracted 565 gates and 852 wires to a netlist network with 287 inputs and 393 outputs.

3.34.7.1. Executing ABC.

3.34.8. Extracting gate netlist of module `\xtea' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by !$abc$7488$auto$opt_reduce.cc:134:opt_pmux$935, asynchronously reset by \reset
Extracted 59 gates and 75 wires to a netlist network with 16 inputs and 18 outputs.

3.34.8.1. Executing ABC.

3.34.9. Extracting gate netlist of module `\xtea' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$7546$auto$opt_reduce.cc:134:opt_pmux$789, asynchronously reset by \reset
Extracted 15 gates and 24 wires to a netlist network with 9 inputs and 8 outputs.

3.34.9.1. Executing ABC.

3.34.10. Extracting gate netlist of module `\xtea' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by !$abc$7559$auto$simplemap.cc:257:simplemap_eqne$2210, asynchronously reset by \reset
Extracted 5 gates and 9 wires to a netlist network with 3 inputs and 3 outputs.

3.34.10.1. Executing ABC.

3.34.11. Extracting gate netlist of module `\xtea' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by !$abc$7565$auto$opt_reduce.cc:134:opt_pmux$925, asynchronously reset by \reset
Extracted 12 gates and 21 wires to a netlist network with 9 inputs and 6 outputs.

3.34.11.1. Executing ABC.

3.34.12. Extracting gate netlist of module `\xtea' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, asynchronously reset by \reset
Extracted 204 gates and 358 wires to a netlist network with 154 inputs and 84 outputs.

3.34.12.1. Executing ABC.

yosys> abc -dff

3.35. Executing ABC pass (technology mapping using ABC).

3.35.1. Summary of detected clock domains:
  41 cells in clk=\clock, en=!$abc$12797$abc$7565$auto$opt_reduce.cc:134:opt_pmux$925, arst=\reset, srst={ }
  10 cells in clk=\clock, en=!$abc$10323$abc$10038$auto$simplemap.cc:257:simplemap_eqne$1940, arst=\reset, srst={ }
  2 cells in clk=\clock, en=!$abc$12791$abc$7559$auto$simplemap.cc:257:simplemap_eqne$2210, arst=\reset, srst={ }
  841 cells in clk=\clock, en=!$abc$10335$abc$8914$auto$opt_reduce.cc:134:opt_pmux$929, arst=\reset, srst={ }
  6 cells in clk=\clock, en=!$abc$10981$abc$10038$auto$simplemap.cc:257:simplemap_eqne$1922, arst=\reset, srst={ }
  763 cells in clk=\clock, en=!$abc$10989$abc$9362$auto$opt_reduce.cc:134:opt_pmux$923, arst=\reset, srst={ }
  17 cells in clk=\clock, en=$abc$12775$abc$7546$auto$opt_reduce.cc:134:opt_pmux$789, arst=\reset, srst={ }
  631 cells in clk=\clock, en=!$abc$11557$abc$8343$auto$opt_reduce.cc:134:opt_pmux$927, arst=\reset, srst={ }
  60 cells in clk=\clock, en=!$abc$12717$abc$7488$auto$opt_reduce.cc:134:opt_pmux$935, arst=\reset, srst={ }
  720 cells in clk=\clock, en=!$abc$12121$abc$7622$auto$opt_reduce.cc:134:opt_pmux$921, arst=\reset, srst={ }
  266 cells in clk=\clock, en={ }, arst=\reset, srst={ }

3.35.2. Extracting gate netlist of module `\xtea' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by !$abc$12797$abc$7565$auto$opt_reduce.cc:134:opt_pmux$925, asynchronously reset by \reset
Extracted 41 gates and 66 wires to a netlist network with 25 inputs and 34 outputs.

3.35.2.1. Executing ABC.

3.35.3. Extracting gate netlist of module `\xtea' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by !$abc$10323$abc$10038$auto$simplemap.cc:257:simplemap_eqne$1940, asynchronously reset by \reset
Extracted 10 gates and 20 wires to a netlist network with 10 inputs and 2 outputs.

3.35.3.1. Executing ABC.

3.35.4. Extracting gate netlist of module `\xtea' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by !$abc$12791$abc$7559$auto$simplemap.cc:257:simplemap_eqne$2210, asynchronously reset by \reset
Extracted 2 gates and 5 wires to a netlist network with 2 inputs and 2 outputs.

3.35.4.1. Executing ABC.

3.35.5. Extracting gate netlist of module `\xtea' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by !$abc$10335$abc$8914$auto$opt_reduce.cc:134:opt_pmux$929, asynchronously reset by \reset
Extracted 670 gates and 1430 wires to a netlist network with 760 inputs and 321 outputs.

3.35.5.1. Executing ABC.

3.35.6. Extracting gate netlist of module `\xtea' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by !$abc$10981$abc$10038$auto$simplemap.cc:257:simplemap_eqne$1922, asynchronously reset by \reset
Extracted 6 gates and 13 wires to a netlist network with 7 inputs and 5 outputs.

3.35.6.1. Executing ABC.

3.35.7. Extracting gate netlist of module `\xtea' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by !$abc$10989$abc$9362$auto$opt_reduce.cc:134:opt_pmux$923, asynchronously reset by \reset
Extracted 535 gates and 817 wires to a netlist network with 282 inputs and 355 outputs.

3.35.7.1. Executing ABC.

3.35.8. Extracting gate netlist of module `\xtea' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$12775$abc$7546$auto$opt_reduce.cc:134:opt_pmux$789, asynchronously reset by \reset
Extracted 17 gates and 29 wires to a netlist network with 12 inputs and 9 outputs.

3.35.8.1. Executing ABC.

3.35.9. Extracting gate netlist of module `\xtea' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by !$abc$11557$abc$8343$auto$opt_reduce.cc:134:opt_pmux$927, asynchronously reset by \reset
Extracted 507 gates and 680 wires to a netlist network with 173 inputs and 172 outputs.

3.35.9.1. Executing ABC.

3.35.10. Extracting gate netlist of module `\xtea' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by !$abc$12717$abc$7488$auto$opt_reduce.cc:134:opt_pmux$935, asynchronously reset by \reset
Extracted 60 gates and 75 wires to a netlist network with 15 inputs and 18 outputs.

3.35.10.1. Executing ABC.

3.35.11. Extracting gate netlist of module `\xtea' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by !$abc$12121$abc$7622$auto$opt_reduce.cc:134:opt_pmux$921, asynchronously reset by \reset
Extracted 539 gates and 826 wires to a netlist network with 287 inputs and 366 outputs.

3.35.11.1. Executing ABC.

3.35.12. Extracting gate netlist of module `\xtea' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, asynchronously reset by \reset
Extracted 202 gates and 356 wires to a netlist network with 154 inputs and 81 outputs.

3.35.12.1. Executing ABC.

yosys> abc -dff

3.36. Executing ABC pass (technology mapping using ABC).

3.36.1. Summary of detected clock domains:
  13 cells in clk=\clock, en=$abc$14393$abc$12775$abc$7546$auto$opt_reduce.cc:134:opt_pmux$789, arst=\reset, srst={ }
  17 cells in clk=\clock, en=!$abc$13082$abc$12797$abc$7565$auto$opt_reduce.cc:134:opt_pmux$925, arst=\reset, srst={ }
  10 cells in clk=\clock, en=!$abc$13124$abc$10323$abc$10038$auto$simplemap.cc:257:simplemap_eqne$1940, arst=\reset, srst={ }
  719 cells in clk=\clock, en=!$abc$15017$abc$12121$abc$7622$auto$opt_reduce.cc:134:opt_pmux$921, arst=\reset, srst={ }
  2 cells in clk=\clock, en=!$abc$13135$abc$12791$abc$7559$auto$simplemap.cc:257:simplemap_eqne$2210, arst=\reset, srst={ }
  846 cells in clk=\clock, en=!$abc$13140$abc$10335$abc$8914$auto$opt_reduce.cc:134:opt_pmux$929, arst=\reset, srst={ }
  666 cells in clk=\clock, en=!$abc$14410$abc$11557$abc$8343$auto$opt_reduce.cc:134:opt_pmux$927, arst=\reset, srst={ }
  6 cells in clk=\clock, en=!$abc$13818$abc$10981$abc$10038$auto$simplemap.cc:257:simplemap_eqne$1922, arst=\reset, srst={ }
  762 cells in clk=\clock, en=!$abc$13826$abc$10989$abc$9362$auto$opt_reduce.cc:134:opt_pmux$923, arst=\reset, srst={ }
  58 cells in clk=\clock, en=!$abc$14959$abc$12717$abc$7488$auto$opt_reduce.cc:134:opt_pmux$935, arst=\reset, srst={ }
  267 cells in clk=\clock, en={ }, arst=\reset, srst={ }

3.36.2. Extracting gate netlist of module `\xtea' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$14393$abc$12775$abc$7546$auto$opt_reduce.cc:134:opt_pmux$789, asynchronously reset by \reset
Extracted 13 gates and 24 wires to a netlist network with 11 inputs and 6 outputs.

3.36.2.1. Executing ABC.

3.36.3. Extracting gate netlist of module `\xtea' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by !$abc$13082$abc$12797$abc$7565$auto$opt_reduce.cc:134:opt_pmux$925, asynchronously reset by \reset
Extracted 17 gates and 30 wires to a netlist network with 13 inputs and 11 outputs.

3.36.3.1. Executing ABC.

3.36.4. Extracting gate netlist of module `\xtea' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by !$abc$13124$abc$10323$abc$10038$auto$simplemap.cc:257:simplemap_eqne$1940, asynchronously reset by \reset
Extracted 10 gates and 20 wires to a netlist network with 10 inputs and 2 outputs.

3.36.4.1. Executing ABC.

3.36.5. Extracting gate netlist of module `\xtea' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by !$abc$15017$abc$12121$abc$7622$auto$opt_reduce.cc:134:opt_pmux$921, asynchronously reset by \reset
Extracted 537 gates and 823 wires to a netlist network with 286 inputs and 362 outputs.

3.36.5.1. Executing ABC.

3.36.6. Extracting gate netlist of module `\xtea' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by !$abc$13135$abc$12791$abc$7559$auto$simplemap.cc:257:simplemap_eqne$2210, asynchronously reset by \reset
Extracted 2 gates and 5 wires to a netlist network with 2 inputs and 2 outputs.

3.36.6.1. Executing ABC.

3.36.7. Extracting gate netlist of module `\xtea' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by !$abc$13140$abc$10335$abc$8914$auto$opt_reduce.cc:134:opt_pmux$929, asynchronously reset by \reset
Extracted 675 gates and 1434 wires to a netlist network with 759 inputs and 320 outputs.

3.36.7.1. Executing ABC.

3.36.8. Extracting gate netlist of module `\xtea' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by !$abc$14410$abc$11557$abc$8343$auto$opt_reduce.cc:134:opt_pmux$927, asynchronously reset by \reset
Extracted 542 gates and 692 wires to a netlist network with 150 inputs and 171 outputs.

3.36.8.1. Executing ABC.

3.36.9. Extracting gate netlist of module `\xtea' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by !$abc$13818$abc$10981$abc$10038$auto$simplemap.cc:257:simplemap_eqne$1922, asynchronously reset by \reset
Extracted 6 gates and 13 wires to a netlist network with 7 inputs and 5 outputs.

3.36.9.1. Executing ABC.

3.36.10. Extracting gate netlist of module `\xtea' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by !$abc$13826$abc$10989$abc$9362$auto$opt_reduce.cc:134:opt_pmux$923, asynchronously reset by \reset
Extracted 535 gates and 822 wires to a netlist network with 287 inputs and 357 outputs.

3.36.10.1. Executing ABC.

3.36.11. Extracting gate netlist of module `\xtea' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by !$abc$14959$abc$12717$abc$7488$auto$opt_reduce.cc:134:opt_pmux$935, asynchronously reset by \reset
Extracted 58 gates and 75 wires to a netlist network with 17 inputs and 19 outputs.

3.36.11.1. Executing ABC.

3.36.12. Extracting gate netlist of module `\xtea' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, asynchronously reset by \reset
Extracted 203 gates and 357 wires to a netlist network with 154 inputs and 79 outputs.

3.36.12.1. Executing ABC.

yosys> opt_ffinv

3.37. Executing OPT_FFINV pass (push inverters through FFs).
Discovering LUTs.
Pushed 0 inverters.

yosys> opt -sat

3.38. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.38.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module xtea.
<suppressed ~64 debug messages>

yosys> opt_merge -nomux

3.38.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\xtea'.
<suppressed ~12 debug messages>
Removed a total of 4 cells.

yosys> opt_muxtree

3.38.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \xtea..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.38.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \xtea.
Performed a total of 0 changes.

yosys> opt_merge

3.38.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\xtea'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.38.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.38.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \xtea..
Removed 2 unused cells and 16523 unused wires.
<suppressed ~8 debug messages>

yosys> opt_expr

3.38.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module xtea.

3.38.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.38.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \xtea..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.38.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \xtea.
Performed a total of 0 changes.

yosys> opt_merge

3.38.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\xtea'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.38.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.38.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \xtea..

yosys> opt_expr

3.38.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module xtea.

3.38.16. Finished OPT passes. (There is nothing left to do.)

yosys> abc -script /home/users/temp_dir/yosys_BpHkde/abc_tmp_1.scr

3.39. Executing ABC pass (technology mapping using ABC).

3.39.1. Extracting gate netlist of module `\xtea' to `<abc-temp-dir>/input.blif'..
Extracted 2428 gates and 3481 wires to a netlist network with 1053 inputs and 1022 outputs.

3.39.1.1. Executing ABC.
DE:   #PIs = 1053  #Luts =  1274  Max Lvl =  20  Avg Lvl =   1.74  [   0.16 sec. at Pass 0]
DE:   #PIs = 1053  #Luts =  1235  Max Lvl =  12  Avg Lvl =   1.65  [   4.26 sec. at Pass 1]
DE:   #PIs = 1053  #Luts =  1232  Max Lvl =  12  Avg Lvl =   1.64  [   1.05 sec. at Pass 2]
DE:   #PIs = 1053  #Luts =  1230  Max Lvl =  12  Avg Lvl =   1.64  [   1.82 sec. at Pass 3]
DE:   #PIs = 1053  #Luts =  1229  Max Lvl =  11  Avg Lvl =   1.62  [   1.62 sec. at Pass 4]
DE:   #PIs = 1053  #Luts =  1229  Max Lvl =  11  Avg Lvl =   1.62  [   2.22 sec. at Pass 5]
DE:   #PIs = 1053  #Luts =  1229  Max Lvl =  11  Avg Lvl =   1.62  [   1.82 sec. at Pass 6]
DE:   #PIs = 1053  #Luts =  1229  Max Lvl =  11  Avg Lvl =   1.62  [   2.51 sec. at Pass 7]
DE:   #PIs = 1053  #Luts =  1229  Max Lvl =  11  Avg Lvl =   1.62  [   0.55 sec. at Pass 8]

yosys> opt

3.40. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.40.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module xtea.

yosys> opt_merge -nomux

3.40.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\xtea'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.40.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \xtea..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.40.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \xtea.
Performed a total of 0 changes.

yosys> opt_merge

3.40.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\xtea'.
Removed a total of 0 cells.

yosys> opt_dff

3.40.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.40.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \xtea..
Removed 0 unused cells and 3462 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.40.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module xtea.

3.40.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.40.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \xtea..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.40.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \xtea.
Performed a total of 0 changes.

yosys> opt_merge

3.40.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\xtea'.
Removed a total of 0 cells.

yosys> opt_dff

3.40.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.40.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \xtea..

yosys> opt_expr

3.40.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module xtea.

3.40.16. Finished OPT passes. (There is nothing left to do.)

yosys> opt_ffinv

3.41. Executing OPT_FFINV pass (push inverters through FFs).
Discovering LUTs.
Pushed 1 inverters.

yosys> stat

3.42. Printing statistics.

=== xtea ===

   Number of wires:                591
   Number of wire bits:           3220
   Number of public wires:          13
   Number of public wire bits:     388
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               2175
     $_DFFE_PP0N_                   46
     $_DFFE_PP0P_                   64
     $_DFFE_PP1P_                    1
     $_DFF_PP0_                     69
     $_TBUF_                        64
     $lut                         1227
     adder_carry                   704


yosys> shregmap -minlen 8 -maxlen 20

3.43. Executing SHREGMAP pass (map shift registers).
Converted 0 dff cells into 0 shift registers.

yosys> dfflegalize -cell $_DFF_?_ 0 -cell $_DFF_???_ 0 -cell $_DFFE_????_ 0 -cell $_DFFSR_???_ 0 -cell $_DFFSRE_????_ 0 -cell $_DLATCHSR_PPP_ 0

3.44. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

yosys> stat

3.45. Printing statistics.

=== xtea ===

   Number of wires:                591
   Number of wire bits:           3220
   Number of public wires:          13
   Number of public wire bits:     388
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               2175
     $_DFFE_PP0N_                   46
     $_DFFE_PP0P_                   64
     $_DFFE_PP1P_                    1
     $_DFF_PP0_                     69
     $_TBUF_                        64
     $lut                         1227
     adder_carry                   704


yosys> techmap -map +/rapidsilicon/genesis/ffs_map.v

3.46. Executing TECHMAP pass (map to technology primitives).

3.46.1. Executing Verilog-2005 frontend: /home/users/aram/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/ffs_map.v
Parsing Verilog input from `/home/users/aram/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/ffs_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP0N_'.
Generating RTLIL representation for module `\$_DFFE_PN0P_'.
Generating RTLIL representation for module `\$_DFFE_PN0N_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP1N_'.
Generating RTLIL representation for module `\$_DFFE_PN1P_'.
Generating RTLIL representation for module `\$_DFFE_PN1N_'.
Generating RTLIL representation for module `\$_DFFSR_PPP_'.
Generating RTLIL representation for module `\$_DFFSR_PNP_'.
Generating RTLIL representation for module `\$_DFFSR_PNN_'.
Generating RTLIL representation for module `\$_DFFSR_PPN_'.
Generating RTLIL representation for module `\$_DFFSR_NPP_'.
Generating RTLIL representation for module `\$_DFFSR_NNP_'.
Generating RTLIL representation for module `\$_DFFSR_NNN_'.
Generating RTLIL representation for module `\$_DFFSR_NPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PNPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPNP_'.
Generating RTLIL representation for module `\$_DFFSRE_PNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PNPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PPNN_'.
Generating RTLIL representation for module `\$_DFFSRE_PNNN_'.
Generating RTLIL representation for module `\$_DLATCHSR_PPP_'.
Generating RTLIL representation for module `\$_DLATCHSR_NPP_'.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP0N_'.
Generating RTLIL representation for module `\$_DFFE_NN0P_'.
Generating RTLIL representation for module `\$_DFFE_NN0N_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_NP1N_'.
Generating RTLIL representation for module `\$_DFFE_NN1P_'.
Generating RTLIL representation for module `\$_DFFE_NN1N_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNPP_'.
Generating RTLIL representation for module `\$_DFFSRE_NPNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPN_'.
Generating RTLIL representation for module `\$_DFFSRE_NNPN_'.
Generating RTLIL representation for module `\$_DFFSRE_NPNN_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNN_'.
Generating RTLIL representation for module `\$__SHREG_DFF_P_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PN0_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NN0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFF_PN1_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_NN1_'.
Successfully finished Verilog frontend.

3.46.2. Continuing TECHMAP pass.
Using template \$_DFFE_PP1P_ for cells of type $_DFFE_PP1P_.
Using template \$_DFFE_PP0N_ for cells of type $_DFFE_PP0N_.
Using template \$_DFF_PP0_ for cells of type $_DFF_PP0_.
Using template \$_DFFE_PP0P_ for cells of type $_DFFE_PP0P_.
No more expansions possible.
<suppressed ~247 debug messages>

yosys> techmap -map +/techmap.v

3.47. Executing TECHMAP pass (map to technology primitives).

3.47.1. Executing Verilog-2005 frontend: /home/users/aram/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/aram/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.47.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $lut.
Using extmapper simplemap for cells of type $logic_not.
No more expansions possible.
<suppressed ~1524 debug messages>

yosys> opt_expr -mux_undef

3.48. Executing OPT_EXPR pass (perform const folding).
Optimizing module xtea.
<suppressed ~11405 debug messages>

yosys> simplemap

3.49. Executing SIMPLEMAP pass (map simple cells to gate primitives).

yosys> opt_expr

3.50. Executing OPT_EXPR pass (perform const folding).
Optimizing module xtea.

yosys> opt_merge

3.51. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\xtea'.
<suppressed ~9468 debug messages>
Removed a total of 3156 cells.

yosys> opt_dff -nodffe -nosdff

3.52. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.53. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \xtea..
Removed 0 unused cells and 2834 unused wires.
<suppressed ~1 debug messages>

yosys> opt -nodffe -nosdff

3.54. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.54.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module xtea.
<suppressed ~760 debug messages>

yosys> opt_merge -nomux

3.54.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\xtea'.
<suppressed ~12 debug messages>
Removed a total of 4 cells.

yosys> opt_muxtree

3.54.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \xtea..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.54.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \xtea.
Performed a total of 0 changes.

yosys> opt_merge

3.54.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\xtea'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.54.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.54.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \xtea..
Removed 0 unused cells and 80 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.54.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module xtea.

3.54.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.54.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \xtea..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.54.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \xtea.
Performed a total of 0 changes.

yosys> opt_merge

3.54.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\xtea'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.54.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.54.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \xtea..

yosys> opt_expr

3.54.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module xtea.

3.54.16. Finished OPT passes. (There is nothing left to do.)

yosys> abc -script /home/users/temp_dir/yosys_BpHkde/abc_tmp_2.scr

3.55. Executing ABC pass (technology mapping using ABC).

3.55.1. Extracting gate netlist of module `\xtea' to `<abc-temp-dir>/input.blif'..
Extracted 3632 gates and 4687 wires to a netlist network with 1053 inputs and 1020 outputs.

3.55.1.1. Executing ABC.
DE:   #PIs = 1053  #Luts =  1228  Max Lvl =  11  Avg Lvl =   1.63  [   0.37 sec. at Pass 0]
DE:   #PIs = 1053  #Luts =  1228  Max Lvl =  11  Avg Lvl =   1.63  [   5.84 sec. at Pass 1]
DE:   #PIs = 1053  #Luts =  1228  Max Lvl =  11  Avg Lvl =   1.63  [   2.41 sec. at Pass 2]
DE:   #PIs = 1053  #Luts =  1228  Max Lvl =  11  Avg Lvl =   1.63  [   2.04 sec. at Pass 3]
DE:   #PIs = 1053  #Luts =  1225  Max Lvl =  12  Avg Lvl =   1.65  [   2.02 sec. at Pass 4]
DE:   #PIs = 1053  #Luts =  1225  Max Lvl =  12  Avg Lvl =   1.65  [   2.97 sec. at Pass 5]
DE:   #PIs = 1053  #Luts =  1223  Max Lvl =  11  Avg Lvl =   1.62  [   2.23 sec. at Pass 6]
DE:   #PIs = 1053  #Luts =  1223  Max Lvl =  11  Avg Lvl =   1.62  [   2.42 sec. at Pass 7]
DE:   #PIs = 1053  #Luts =  1222  Max Lvl =  11  Avg Lvl =   1.63  [   2.57 sec. at Pass 8]
DE:   #PIs = 1053  #Luts =  1222  Max Lvl =  11  Avg Lvl =   1.63  [   2.67 sec. at Pass 9]
DE:   #PIs = 1053  #Luts =  1221  Max Lvl =  10  Avg Lvl =   1.60  [   1.79 sec. at Pass 10]
DE:   #PIs = 1053  #Luts =  1221  Max Lvl =  10  Avg Lvl =   1.60  [   2.37 sec. at Pass 11]
DE:   #PIs = 1053  #Luts =  1221  Max Lvl =  10  Avg Lvl =   1.60  [   1.91 sec. at Pass 12]
DE:   #PIs = 1053  #Luts =  1221  Max Lvl =  10  Avg Lvl =   1.60  [   2.91 sec. at Pass 13]
DE:   #PIs = 1053  #Luts =  1221  Max Lvl =  10  Avg Lvl =   1.60  [   0.53 sec. at Pass 14]

yosys> opt

3.56. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.56.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module xtea.

yosys> opt_merge -nomux

3.56.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\xtea'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.56.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \xtea..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.56.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \xtea.
Performed a total of 0 changes.

yosys> opt_merge

3.56.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\xtea'.
Removed a total of 0 cells.

yosys> opt_dff

3.56.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.56.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \xtea..
Removed 0 unused cells and 3981 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.56.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module xtea.

3.56.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.56.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \xtea..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.56.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \xtea.
Performed a total of 0 changes.

yosys> opt_merge

3.56.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\xtea'.
Removed a total of 0 cells.

yosys> opt_dff

3.56.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.56.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \xtea..

yosys> opt_expr

3.56.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module xtea.

3.56.16. Finished OPT passes. (There is nothing left to do.)

yosys> hierarchy -check

3.57. Executing HIERARCHY pass (managing design hierarchy).

3.57.1. Analyzing design hierarchy..
Top module:  \xtea

3.57.2. Analyzing design hierarchy..
Top module:  \xtea
Removed 0 unused modules.

yosys> stat

3.58. Printing statistics.

=== xtea ===

   Number of wires:                584
   Number of wire bits:           3213
   Number of public wires:          13
   Number of public wire bits:     388
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               2169
     $_TBUF_                        64
     $lut                         1221
     adder_carry                   704
     dffsre                        180


yosys> opt_clean -purge

3.59. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \xtea..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

yosys> write_verilog -noattr -nohex synthesized.v

3.60. Executing Verilog backend.
Dumping module `\xtea'.

End of script. Logfile hash: 71ee01932c, CPU: user 19.42s system 0.75s, MEM: 58.34 MB peak
Yosys 0.17+103 (git sha1 a1babadd5, gcc 9.1.0 -fPIC -Os)
Time spent: 93% 6x abc (255 sec), 1% 38x opt_expr (5 sec), ...
real 94.59
user 234.90
sys 37.92
