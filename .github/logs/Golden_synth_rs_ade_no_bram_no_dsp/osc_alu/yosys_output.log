
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys-Verific 0.0.45
 Yosys 0.17+103 (git sha1 a1babadd5, gcc 9.1.0 -fPIC -Os)


-- Executing script file `yosys.ys' --
echo on

yosys> plugin -i synth-rs

yosys> read -verific

yosys> read -incdir .

yosys> verific -vlog-incdir .

1. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Apr22_SW_Release, released at Thu Apr 28 20:08:21 2022.

yosys> verilog_defaults -add -I.

yosys> read -vlog2k oc8051_alu.v oc8051_defines.v oc8051_divide.v oc8051_multiply.v oc8051_timescale.v

yosys> verific -vlog2k oc8051_alu.v oc8051_defines.v oc8051_divide.v oc8051_multiply.v oc8051_timescale.v

2. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Apr22_SW_Release, released at Thu Apr 28 20:08:21 2022.
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'oc8051_alu.v'
VERIFIC-INFO [VERI-1328] oc8051_alu.v:50: analyzing included file 'oc8051_defines.v'
VERIFIC-INFO [VERI-2320] oc8051_alu.v:50: back to file 'oc8051_alu.v'
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'oc8051_defines.v'
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'oc8051_divide.v'
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'oc8051_multiply.v'
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'oc8051_timescale.v'

yosys> synth_rs -top top -tech genesis -goal area -de -no_dsp -no_bram -verilog synthesized.v

3. Executing synth_rs pass: v0.4.56

yosys> read_verilog -lib -specify -nomem2reg +/rapidsilicon/common/cells_sim.v +/rapidsilicon/genesis/cells_sim.v

3.1. Executing Verilog-2005 frontend: /home/users/aram/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v
Parsing Verilog input from `/home/users/aram/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\inv'.
Generating RTLIL representation for module `\buff'.
Generating RTLIL representation for module `\logic_0'.
Generating RTLIL representation for module `\logic_1'.
Generating RTLIL representation for module `\gclkbuff'.
Successfully finished Verilog frontend.

3.2. Executing Verilog-2005 frontend: /home/users/aram/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/cells_sim.v
Parsing Verilog input from `/home/users/aram/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\dffsre'.
Generating RTLIL representation for module `\dffnsre'.
Generating RTLIL representation for module `\latchsre'.
Generating RTLIL representation for module `\latchnsre'.
Generating RTLIL representation for module `\io_scff'.
Generating RTLIL representation for module `\scff'.
Generating RTLIL representation for module `\sh_dff'.
Generating RTLIL representation for module `\adder_carry'.
Generating RTLIL representation for module `\sdffr'.
Generating RTLIL representation for module `\sdffs'.
Generating RTLIL representation for module `\TDP_BRAM18'.
Generating RTLIL representation for module `\TDP36K'.
Generating RTLIL representation for module `\RS_DSP1'.
Generating RTLIL representation for module `\RS_DSP2'.
Generating RTLIL representation for module `\RS_DSP2_MULT'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGIN_REGOUT'.
Generating RTLIL representation for module `\dsp_t1_sim'.
Generating RTLIL representation for module `\dsp_t1_20x18x64'.
Generating RTLIL representation for module `\dsp_t1_10x9x32'.
Successfully finished Verilog frontend.

yosys> hierarchy -check -top top

3.3. Executing HIERARCHY pass (managing design hierarchy).
VERIFIC-INFO [VERI-1018] oc8051_alu.v:54: compiling module 'top'
VERIFIC-INFO [VERI-1018] oc8051_multiply.v:53: compiling module 'oc8051_multiply'
VERIFIC-INFO [VERI-1018] oc8051_divide.v:51: compiling module 'oc8051_divide'
VERIFIC-WARNING [VERI-2580] oc8051_divide.v:177: latch inferred for net 'div2[8]'
VERIFIC-WARNING [VERI-2580] oc8051_alu.v:308: latch inferred for net 'da_tmp'
Importing module top.
Importing module oc8051_divide.
Importing module oc8051_multiply.

3.3.1. Analyzing design hierarchy..
Top module:  \top
Used module:     \oc8051_divide
Used module:     \oc8051_multiply

3.3.2. Analyzing design hierarchy..
Top module:  \top
Used module:     \oc8051_divide
Used module:     \oc8051_multiply
Removed 0 unused modules.

yosys> proc

3.4. Executing PROC pass (convert processes to netlists).

yosys> proc_clean

3.4.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> proc_rmdead

3.4.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

yosys> proc_prune

3.4.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

yosys> proc_init

3.4.4. Executing PROC_INIT pass (extract init attributes).

yosys> proc_arst

3.4.5. Executing PROC_ARST pass (detect async resets in processes).

yosys> proc_rom

3.4.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

yosys> proc_mux

3.4.7. Executing PROC_MUX pass (convert decision trees to multiplexers).

yosys> proc_dlatch

3.4.8. Executing PROC_DLATCH pass (convert process syncs to latches).

yosys> proc_dff

3.4.9. Executing PROC_DFF pass (convert process syncs to FFs).

yosys> proc_memwr

3.4.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

yosys> proc_clean

3.4.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> opt_expr -keepdc

3.4.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module oc8051_multiply.
<suppressed ~1 debug messages>
Optimizing module oc8051_divide.
<suppressed ~7 debug messages>
Optimizing module top.
<suppressed ~72 debug messages>

yosys> flatten

3.5. Executing FLATTEN pass (flatten design).
Deleting now unused module oc8051_multiply.
Deleting now unused module oc8051_divide.
<suppressed ~2 debug messages>

yosys> tribuf -logic

3.6. Executing TRIBUF pass.

yosys> deminout

3.7. Executing DEMINOUT pass (demote inout ports to input or output).

yosys> opt_expr

3.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

yosys> opt_clean

3.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 35 unused cells and 364 unused wires.
<suppressed ~210 debug messages>

yosys> check

3.10. Executing CHECK pass (checking for obvious problems).
Checking module top...
Found and reported 0 problems.

yosys> opt -nodffe -nosdff

3.11. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

yosys> opt_merge -nomux

3.11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.11.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~19 debug messages>

yosys> opt_reduce

3.11.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.11.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.11.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.11.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

yosys> opt_expr

3.11.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.11.9. Finished OPT passes. (There is nothing left to do.)

yosys> fsm -encoding binary

3.12. Executing FSM pass (extract and optimize FSM).

yosys> fsm_detect

3.12.1. Executing FSM_DETECT pass (finding FSMs in design).

yosys> fsm_extract

3.12.2. Executing FSM_EXTRACT pass (extracting FSM from design).

yosys> fsm_opt

3.12.3. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> opt_clean

3.12.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

yosys> fsm_opt

3.12.5. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> fsm_recode -encoding binary

3.12.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

yosys> fsm_info

3.12.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

yosys> fsm_map

3.12.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

yosys> opt -sat

3.13. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

yosys> opt_merge -nomux

3.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~19 debug messages>

yosys> opt_reduce

3.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.13.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

yosys> opt_expr

3.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.13.9. Finished OPT passes. (There is nothing left to do.)

yosys> wreduce -keepdc

3.14. Executing WREDUCE pass (reducing word size of cells).
Removed top 4 bits (of 5) from port B of cell top.$verific$add_14$oc8051_alu.v:120$207 ($add).
Removed top 3 bits (of 4) from port B of cell top.$verific$add_24$oc8051_alu.v:125$225 ($add).
Removed top 1 bits (of 2) from port B of cell top.$verific$add_30$oc8051_alu.v:130$231 ($add).
Removed top 7 bits (of 8) from port B of cell top.$verific$add_33$oc8051_alu.v:133$233 ($add).
Removed top 1 bits (of 5) from port B of cell top.$verific$sub_48$oc8051_alu.v:145$237 ($sub).
Removed top 4 bits (of 5) from port B of cell top.$verific$sub_49$oc8051_alu.v:145$238 ($sub).
Removed top 1 bits (of 4) from port B of cell top.$verific$sub_59$oc8051_alu.v:150$242 ($sub).
Removed top 3 bits (of 4) from port B of cell top.$verific$sub_60$oc8051_alu.v:150$243 ($sub).
Removed top 1 bits (of 2) from port B of cell top.$verific$sub_66$oc8051_alu.v:155$247 ($sub).
Removed top 1 bits (of 2) from port B of cell top.$verific$sub_67$oc8051_alu.v:155$248 ($sub).
Removed top 1 bits (of 3) from port B of cell top.$verific$add_86$oc8051_alu.v:192$258 ($add).
Removed top 2 bits (of 4) from port B of cell top.$verific$add_100$oc8051_alu.v:195$266 ($add).
Removed top 4 bits (of 5) from port B of cell top.$verific$add_101$oc8051_alu.v:195$267 ($add).
Removed top 4 bits (of 5) from port B of cell top.$verific$add_103$oc8051_alu.v:196$270 ($add).
Removed top 8 bits (of 16) from port B of cell top.$verific$add_142$oc8051_alu.v:278$297 ($add).
Removed top 1 bits (of 9) from port B of cell top.$flatten\oc8051_div1.$verific$sub_179$oc8051_divide.v:166$753 ($sub).
Removed top 1 bits (of 8) from mux cell top.$flatten\oc8051_div1.$verific$mux_162$oc8051_divide.v:161$741 ($mux).
Removed top 1 bits (of 9) from port B of cell top.$flatten\oc8051_div1.$verific$sub_157$oc8051_divide.v:156$740 ($sub).
Removed top 1 bits (of 8) from mux cell top.$flatten\oc8051_div1.$verific$mux_140$oc8051_divide.v:151$728 ($mux).
Removed top 1 bits (of 9) from port B of cell top.$flatten\oc8051_div1.$verific$sub_135$oc8051_divide.v:146$727 ($sub).
Removed top 1 bits (of 8) from mux cell top.$flatten\oc8051_div1.$verific$mux_118$oc8051_divide.v:141$713 ($mux).
Removed top 1 bits (of 9) from port B of cell top.$flatten\oc8051_div1.$verific$sub_113$oc8051_divide.v:136$712 ($sub).
Removed top 1 bits (of 8) from mux cell top.$flatten\oc8051_div1.$verific$mux_96$oc8051_divide.v:131$697 ($mux).
Removed top 1 bits (of 9) from port B of cell top.$flatten\oc8051_div1.$verific$sub_91$oc8051_divide.v:126$696 ($sub).
Removed top 1 bits (of 8) from mux cell top.$flatten\oc8051_div1.$verific$mux_74$oc8051_divide.v:121$680 ($mux).
Removed top 1 bits (of 9) from port B of cell top.$flatten\oc8051_div1.$verific$sub_69$oc8051_divide.v:116$679 ($sub).
Removed top 1 bits (of 8) from mux cell top.$flatten\oc8051_div1.$verific$mux_52$oc8051_divide.v:111$662 ($mux).
Removed top 1 bits (of 9) from port B of cell top.$flatten\oc8051_div1.$verific$sub_47$oc8051_divide.v:106$661 ($sub).
Removed top 1 bits (of 8) from mux cell top.$flatten\oc8051_div1.$verific$mux_30$oc8051_divide.v:100$637 ($mux).
Removed top 1 bits (of 9) from port B of cell top.$flatten\oc8051_div1.$verific$sub_25$oc8051_divide.v:95$633 ($sub).
Removed top 1 bits (of 8) from wire top.$flatten\oc8051_div1.$verific$n137$568.
Removed top 1 bits (of 8) from wire top.$flatten\oc8051_div1.$verific$n201$573.
Removed top 1 bits (of 8) from wire top.$flatten\oc8051_div1.$verific$n265$578.
Removed top 1 bits (of 8) from wire top.$flatten\oc8051_div1.$verific$n329$583.
Removed top 1 bits (of 8) from wire top.$flatten\oc8051_div1.$verific$n393$588.
Removed top 1 bits (of 8) from wire top.$flatten\oc8051_div1.$verific$n457$593.
Removed top 1 bits (of 8) from wire top.$flatten\oc8051_div1.$verific$n73$563.

yosys> peepopt

3.15. Executing PEEPOPT pass (run peephole optimizers).

yosys> pmuxtree

3.16. Executing PMUXTREE pass.

yosys> opt_clean

3.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 4 unused cells and 25 unused wires.
<suppressed ~5 debug messages>

yosys> alumacc

3.18. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module top:
  creating $macc model for $flatten\oc8051_div1.$verific$sub_113$oc8051_divide.v:136$712 ($sub).
  creating $macc model for $flatten\oc8051_div1.$verific$sub_135$oc8051_divide.v:146$727 ($sub).
  creating $macc model for $flatten\oc8051_div1.$verific$sub_157$oc8051_divide.v:156$740 ($sub).
  creating $macc model for $flatten\oc8051_div1.$verific$sub_179$oc8051_divide.v:166$753 ($sub).
  creating $macc model for $flatten\oc8051_div1.$verific$sub_25$oc8051_divide.v:95$633 ($sub).
  creating $macc model for $flatten\oc8051_div1.$verific$sub_47$oc8051_divide.v:106$661 ($sub).
  creating $macc model for $flatten\oc8051_div1.$verific$sub_69$oc8051_divide.v:116$679 ($sub).
  creating $macc model for $flatten\oc8051_div1.$verific$sub_91$oc8051_divide.v:126$696 ($sub).
  creating $macc model for $flatten\oc8051_mul1.$verific$mult_3$oc8051_multiply.v:70$776 ($mul).
  creating $macc model for $verific$add_100$oc8051_alu.v:195$266 ($add).
  creating $macc model for $verific$add_101$oc8051_alu.v:195$267 ($add).
  creating $macc model for $verific$add_103$oc8051_alu.v:196$270 ($add).
  creating $macc model for $verific$add_13$oc8051_alu.v:120$206 ($add).
  creating $macc model for $verific$add_139$oc8051_alu.v:275$294 ($add).
  creating $macc model for $verific$add_14$oc8051_alu.v:120$207 ($add).
  creating $macc model for $verific$add_142$oc8051_alu.v:278$297 ($add).
  creating $macc model for $verific$add_23$oc8051_alu.v:125$224 ($add).
  creating $macc model for $verific$add_24$oc8051_alu.v:125$225 ($add).
  creating $macc model for $verific$add_29$oc8051_alu.v:130$230 ($add).
  creating $macc model for $verific$add_30$oc8051_alu.v:130$231 ($add).
  creating $macc model for $verific$add_33$oc8051_alu.v:133$233 ($add).
  creating $macc model for $verific$add_86$oc8051_alu.v:192$258 ($add).
  creating $macc model for $verific$sub_48$oc8051_alu.v:145$237 ($sub).
  creating $macc model for $verific$sub_49$oc8051_alu.v:145$238 ($sub).
  creating $macc model for $verific$sub_59$oc8051_alu.v:150$242 ($sub).
  creating $macc model for $verific$sub_60$oc8051_alu.v:150$243 ($sub).
  creating $macc model for $verific$sub_66$oc8051_alu.v:155$247 ($sub).
  creating $macc model for $verific$sub_67$oc8051_alu.v:155$248 ($sub).
  merging $macc model for $verific$sub_66$oc8051_alu.v:155$247 into $verific$sub_67$oc8051_alu.v:155$248.
  merging $macc model for $verific$sub_59$oc8051_alu.v:150$242 into $verific$sub_60$oc8051_alu.v:150$243.
  merging $macc model for $verific$sub_48$oc8051_alu.v:145$237 into $verific$sub_49$oc8051_alu.v:145$238.
  merging $macc model for $verific$add_29$oc8051_alu.v:130$230 into $verific$add_30$oc8051_alu.v:130$231.
  merging $macc model for $verific$add_23$oc8051_alu.v:125$224 into $verific$add_24$oc8051_alu.v:125$225.
  merging $macc model for $verific$add_13$oc8051_alu.v:120$206 into $verific$add_14$oc8051_alu.v:120$207.
  creating $alu model for $macc $verific$add_86$oc8051_alu.v:192$258.
  creating $alu model for $macc $verific$add_33$oc8051_alu.v:133$233.
  creating $alu model for $macc $verific$add_30$oc8051_alu.v:130$231.
  creating $alu model for $macc $verific$add_24$oc8051_alu.v:125$225.
  creating $alu model for $macc $verific$add_142$oc8051_alu.v:278$297.
  creating $alu model for $macc $verific$add_14$oc8051_alu.v:120$207.
  creating $alu model for $macc $verific$add_139$oc8051_alu.v:275$294.
  creating $alu model for $macc $verific$add_103$oc8051_alu.v:196$270.
  creating $alu model for $macc $verific$add_101$oc8051_alu.v:195$267.
  creating $alu model for $macc $verific$add_100$oc8051_alu.v:195$266.
  creating $alu model for $macc $flatten\oc8051_div1.$verific$sub_91$oc8051_divide.v:126$696.
  creating $alu model for $macc $flatten\oc8051_div1.$verific$sub_69$oc8051_divide.v:116$679.
  creating $alu model for $macc $flatten\oc8051_div1.$verific$sub_47$oc8051_divide.v:106$661.
  creating $alu model for $macc $flatten\oc8051_div1.$verific$sub_25$oc8051_divide.v:95$633.
  creating $alu model for $macc $flatten\oc8051_div1.$verific$sub_179$oc8051_divide.v:166$753.
  creating $alu model for $macc $flatten\oc8051_div1.$verific$sub_157$oc8051_divide.v:156$740.
  creating $alu model for $macc $flatten\oc8051_div1.$verific$sub_135$oc8051_divide.v:146$727.
  creating $alu model for $macc $flatten\oc8051_div1.$verific$sub_113$oc8051_divide.v:136$712.
  creating $macc cell for $verific$sub_60$oc8051_alu.v:150$243: $auto$alumacc.cc:365:replace_macc$803
  creating $macc cell for $flatten\oc8051_mul1.$verific$mult_3$oc8051_multiply.v:70$776: $auto$alumacc.cc:365:replace_macc$804
  creating $macc cell for $verific$sub_49$oc8051_alu.v:145$238: $auto$alumacc.cc:365:replace_macc$805
  creating $macc cell for $verific$sub_67$oc8051_alu.v:155$248: $auto$alumacc.cc:365:replace_macc$806
  creating $alu model for $flatten\oc8051_div1.$verific$LessThan_5$oc8051_divide.v:79$615 ($lt): new $alu
  creating $alu model for $verific$LessThan_84$oc8051_alu.v:192$256 ($lt): new $alu
  creating $alu model for $verific$LessThan_98$oc8051_alu.v:195$264 ($lt): new $alu
  creating $alu model for $flatten\oc8051_div1.$verific$equal_4$oc8051_divide.v:74$614 ($eq): merged with $flatten\oc8051_div1.$verific$LessThan_5$oc8051_divide.v:79$615.
  creating $alu cell for $verific$LessThan_98$oc8051_alu.v:195$264: $auto$alumacc.cc:485:replace_alu$810
  creating $alu cell for $verific$LessThan_84$oc8051_alu.v:192$256: $auto$alumacc.cc:485:replace_alu$821
  creating $alu cell for $flatten\oc8051_div1.$verific$sub_113$oc8051_divide.v:136$712: $auto$alumacc.cc:485:replace_alu$832
  creating $alu cell for $flatten\oc8051_div1.$verific$sub_135$oc8051_divide.v:146$727: $auto$alumacc.cc:485:replace_alu$835
  creating $alu cell for $flatten\oc8051_div1.$verific$sub_157$oc8051_divide.v:156$740: $auto$alumacc.cc:485:replace_alu$838
  creating $alu cell for $flatten\oc8051_div1.$verific$sub_179$oc8051_divide.v:166$753: $auto$alumacc.cc:485:replace_alu$841
  creating $alu cell for $flatten\oc8051_div1.$verific$sub_25$oc8051_divide.v:95$633: $auto$alumacc.cc:485:replace_alu$844
  creating $alu cell for $flatten\oc8051_div1.$verific$sub_47$oc8051_divide.v:106$661: $auto$alumacc.cc:485:replace_alu$847
  creating $alu cell for $flatten\oc8051_div1.$verific$sub_69$oc8051_divide.v:116$679: $auto$alumacc.cc:485:replace_alu$850
  creating $alu cell for $flatten\oc8051_div1.$verific$sub_91$oc8051_divide.v:126$696: $auto$alumacc.cc:485:replace_alu$853
  creating $alu cell for $verific$add_100$oc8051_alu.v:195$266: $auto$alumacc.cc:485:replace_alu$856
  creating $alu cell for $verific$add_101$oc8051_alu.v:195$267: $auto$alumacc.cc:485:replace_alu$859
  creating $alu cell for $verific$add_103$oc8051_alu.v:196$270: $auto$alumacc.cc:485:replace_alu$862
  creating $alu cell for $flatten\oc8051_div1.$verific$LessThan_5$oc8051_divide.v:79$615, $flatten\oc8051_div1.$verific$equal_4$oc8051_divide.v:74$614: $auto$alumacc.cc:485:replace_alu$865
  creating $alu cell for $verific$add_139$oc8051_alu.v:275$294: $auto$alumacc.cc:485:replace_alu$876
  creating $alu cell for $verific$add_14$oc8051_alu.v:120$207: $auto$alumacc.cc:485:replace_alu$879
  creating $alu cell for $verific$add_142$oc8051_alu.v:278$297: $auto$alumacc.cc:485:replace_alu$882
  creating $alu cell for $verific$add_24$oc8051_alu.v:125$225: $auto$alumacc.cc:485:replace_alu$885
  creating $alu cell for $verific$add_30$oc8051_alu.v:130$231: $auto$alumacc.cc:485:replace_alu$888
  creating $alu cell for $verific$add_33$oc8051_alu.v:133$233: $auto$alumacc.cc:485:replace_alu$891
  creating $alu cell for $verific$add_86$oc8051_alu.v:192$258: $auto$alumacc.cc:485:replace_alu$894
  created 21 $alu and 4 $macc cells.

yosys> opt

3.19. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~4 debug messages>

yosys> opt_merge -nomux

3.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $auto$pmuxtree.cc:65:recursive_mux_generator$791.
    dead port 2/2 on $mux $auto$pmuxtree.cc:65:recursive_mux_generator$799.
Removed 2 multiplexer ports.
<suppressed ~19 debug messages>

yosys> opt_reduce

3.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_dff

3.19.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.19.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 8 unused cells and 17 unused wires.
<suppressed ~9 debug messages>

yosys> opt_expr

3.19.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.19.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.19.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~19 debug messages>

yosys> opt_reduce

3.19.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.19.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_dff

3.19.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.19.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

yosys> opt_expr

3.19.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.19.16. Finished OPT passes. (There is nothing left to do.)

yosys> stat

3.20. Printing statistics.

=== top ===

   Number of wires:                150
   Number of wire bits:            827
   Number of public wires:          28
   Number of public wire bits:     150
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 85
     $alu                           21
     $and                            3
     $bmux                           5
     $logic_not                      1
     $macc                           4
     $mux                           24
     $not                           11
     $or                             8
     $reduce_and                     3
     $reduce_bool                    1
     $xor                            4


yosys> memory -nomap

3.21. Executing MEMORY pass.

yosys> opt_mem

3.21.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

yosys> opt_mem_priority

3.21.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

yosys> opt_mem_feedback

3.21.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

yosys> memory_bmux2rom

3.21.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

yosys> memory_dff

3.21.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

yosys> opt_clean

3.21.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

yosys> memory_share

3.21.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

yosys> opt_mem_widen

3.21.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

yosys> opt_clean

3.21.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

yosys> memory_collect

3.21.10. Executing MEMORY_COLLECT pass (generating $mem cells).

yosys> stat

3.22. Printing statistics.

=== top ===

   Number of wires:                150
   Number of wire bits:            827
   Number of public wires:          28
   Number of public wire bits:     150
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 85
     $alu                           21
     $and                            3
     $bmux                           5
     $logic_not                      1
     $macc                           4
     $mux                           24
     $not                           11
     $or                             8
     $reduce_and                     3
     $reduce_bool                    1
     $xor                            4


yosys> opt_clean

3.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

yosys> stat

3.24. Printing statistics.

=== top ===

   Number of wires:                150
   Number of wire bits:            827
   Number of public wires:          28
   Number of public wire bits:     150
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 85
     $alu                           21
     $and                            3
     $bmux                           5
     $logic_not                      1
     $macc                           4
     $mux                           24
     $not                           11
     $or                             8
     $reduce_and                     3
     $reduce_bool                    1
     $xor                            4


yosys> techmap -map +/techmap.v -map +/rapidsilicon/genesis/arith_map.v

3.25. Executing TECHMAP pass (map to technology primitives).

3.25.1. Executing Verilog-2005 frontend: /home/users/aram/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/aram/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.25.2. Executing Verilog-2005 frontend: /home/users/aram/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/arith_map.v
Parsing Verilog input from `/home/users/aram/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_rs_alu'.
Successfully finished Verilog frontend.

3.25.3. Continuing TECHMAP pass.
Using template $paramod$1f812f0514ea3255703342654e053e2c502325cc\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_and.
Using template $paramod$b85fbb3374a1d9ba7ee4f4d6323c30f939df3ada\_90_alu for cells of type $alu.
Using template $paramod$0563fff2c395e9892f21c131fa33d5e0ad144e72\_90_alu for cells of type $alu.
Using template $paramod$1d1e68f77481583066c6d429218f48ea9d5739b3\_90_alu for cells of type $alu.
Using template $paramod$c3cd1564c35d873179656addd6052d7ea8b6d991\_90_alu for cells of type $alu.
Using template $paramod$aebc44f5eedf4f1603d7564e4920ac508059c773\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $xor.
Using extmapper maccmap for cells of type $macc.
  add { 1'1 \src1 [7] } (2 bits, unsigned)
  sub $verific$n195$17 (1 bits, unsigned)
  sub \src2 [7] (1 bits, unsigned)
  packed 1 (1) bits / 1 words into adder tree
Using extmapper simplemap for cells of type $not.
  add \src1 * \src2 (8x8 bits, unsigned)
Using template $paramod$cd54e322aa4265ca236096fe4bb634aaec4e39b4\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $mux.
Using template $paramod$740b056ede97228d3eae64ea2fdc81f0a33e0fe7\_90_alu for cells of type $alu.
Using template $paramod$f85408ed1aa3d09e465edae8a7bf590332ae9f7b\_90_alu for cells of type $alu.
Using template $paramod$672a140277c71df8314410f22acc08d55222c3c7\_90_alu for cells of type $alu.
Using template $paramod$a1bc51c02ce12ac21eb18988e83292af48ed7d72\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $bmux.
  add { 1'1 \src1 [3:0] } (5 bits, unsigned)
  sub \srcCy (1 bits, unsigned)
  sub \src2 [3:0] (4 bits, unsigned)
  packed 2 (1) bits / 1 words into adder tree
Using extmapper simplemap for cells of type $reduce_bool.
  add { 1'1 \src1 [6:4] } (4 bits, unsigned)
  sub $verific$n176$15 (1 bits, unsigned)
  sub \src2 [6:4] (3 bits, unsigned)
  packed 2 (1) bits / 1 words into adder tree
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010000 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000100 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000101 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001001 for cells of type $lcu.
Using template $paramod\_90_fa\WIDTH=32'00000000000000000000000000010000 for cells of type $fa.
Using template $paramod$6df0329addda9228fcc2546de2aaf14ad26c98e1\_90_alu for cells of type $alu.
Using template $paramod$7e708ae28ab761f11d0fb59d3ffc72f6a4baf5d9\_90_alu for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000010 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001000 for cells of type $lcu.
Using template $paramod\_90_fa\WIDTH=32'00000000000000000000000000000101 for cells of type $fa.
Using template $paramod$b18e16801adf491a64caa0542270798e5d4ac6b6\_90_alu for cells of type $alu.
Using template $paramod\_90_fa\WIDTH=32'00000000000000000000000000000100 for cells of type $fa.
No more expansions possible.
<suppressed ~2833 debug messages>

yosys> stat

3.26. Printing statistics.

=== top ===

   Number of wires:               1358
   Number of wire bits:          33951
   Number of public wires:          28
   Number of public wire bits:     150
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               2676
     $_AND_                        865
     $_MUX_                        610
     $_NOT_                        217
     $_OR_                         386
     $_XOR_                        598


yosys> opt

3.27. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.27.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~972 debug messages>

yosys> opt_merge -nomux

3.27.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~759 debug messages>
Removed a total of 253 cells.

yosys> opt_muxtree

3.27.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.27.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.27.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_dff

3.27.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.27.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 97 unused cells and 934 unused wires.
<suppressed ~98 debug messages>

yosys> opt_expr

3.27.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~9 debug messages>

3.27.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.27.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.27.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.27.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_dff

3.27.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.27.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.27.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.27.16. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.27.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.27.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.27.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_dff

3.27.20. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.27.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

yosys> opt_expr

3.27.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.27.23. Finished OPT passes. (There is nothing left to do.)

yosys> opt -fast -full

3.28. Executing OPT pass (performing simple optimizations).

yosys> opt_expr -full

3.28.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~72 debug messages>

yosys> opt_merge

3.28.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_dff

3.28.3. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.28.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 4 unused wires.
<suppressed ~1 debug messages>

3.28.5. Finished fast OPT passes.

yosys> memory_map

3.29. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

yosys> opt -full

3.30. Executing OPT pass (performing simple optimizations).

yosys> opt_expr -full

3.30.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

yosys> opt_merge -nomux

3.30.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.30.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce -full

3.30.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.30.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_share

3.30.6. Executing OPT_SHARE pass.
    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$1217 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$2326
        $auto$simplemap.cc:86:simplemap_bitop$2337

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$1467 in front of them:
        $auto$simplemap.cc:312:simplemap_bmux$1450
        $auto$simplemap.cc:312:simplemap_bmux$1442

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$1468 in front of them:
        $auto$simplemap.cc:312:simplemap_bmux$1451
        $auto$simplemap.cc:312:simplemap_bmux$1443

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$1469 in front of them:
        $auto$simplemap.cc:312:simplemap_bmux$1452
        $auto$simplemap.cc:312:simplemap_bmux$1444

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$1470 in front of them:
        $auto$simplemap.cc:312:simplemap_bmux$1453
        $auto$simplemap.cc:312:simplemap_bmux$1445

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$1471 in front of them:
        $auto$simplemap.cc:312:simplemap_bmux$1454
        $auto$simplemap.cc:312:simplemap_bmux$1446

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$1472 in front of them:
        $auto$simplemap.cc:312:simplemap_bmux$1455
        $auto$simplemap.cc:312:simplemap_bmux$1447

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$1473 in front of them:
        $auto$simplemap.cc:312:simplemap_bmux$1456
        $auto$simplemap.cc:312:simplemap_bmux$1448

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$1474 in front of them:
        $auto$simplemap.cc:312:simplemap_bmux$1457
        $auto$simplemap.cc:312:simplemap_bmux$1449


yosys> opt_dff

3.30.7. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.30.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

yosys> opt_expr -full

3.30.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~9 debug messages>

3.30.10. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.30.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~9 debug messages>

yosys> opt_reduce -full

3.30.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.30.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_share

3.30.14. Executing OPT_SHARE pass.

yosys> opt_dff

3.30.15. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.30.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

yosys> opt_expr -full

3.30.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.30.18. Finished OPT passes. (There is nothing left to do.)

yosys> techmap -map +/techmap.v

3.31. Executing TECHMAP pass (map to technology primitives).

3.31.1. Executing Verilog-2005 frontend: /home/users/aram/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/aram/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.31.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $mux.
No more expansions possible.
<suppressed ~80 debug messages>

yosys> opt -sat

3.32. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.32.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

yosys> opt_merge -nomux

3.32.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.32.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.32.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.32.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.32.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.32.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

yosys> opt_expr

3.32.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.32.9. Finished OPT passes. (There is nothing left to do.)

yosys> abc -dff

3.33. Executing ABC pass (technology mapping using ABC).

3.33.1. Summary of detected clock domains:
  1360 cells in clk={ }, en={ }, arst={ }, srst={ }

3.33.2. Extracting gate netlist of module `\top' to `<abc-temp-dir>/input.blif'..
No matching clock domain found. Not extracting any FF cells.
Extracted 1360 gates and 1384 wires to a netlist network with 23 inputs and 19 outputs.

3.33.2.1. Executing ABC.

yosys> abc -dff

3.34. Executing ABC pass (technology mapping using ABC).

3.34.1. Summary of detected clock domains:
  1215 cells in clk={ }, en={ }, arst={ }, srst={ }

3.34.2. Extracting gate netlist of module `\top' to `<abc-temp-dir>/input.blif'..
No matching clock domain found. Not extracting any FF cells.
Extracted 1215 gates and 1238 wires to a netlist network with 23 inputs and 19 outputs.

3.34.2.1. Executing ABC.

yosys> abc -dff

3.35. Executing ABC pass (technology mapping using ABC).

3.35.1. Summary of detected clock domains:
  1238 cells in clk={ }, en={ }, arst={ }, srst={ }

3.35.2. Extracting gate netlist of module `\top' to `<abc-temp-dir>/input.blif'..
No matching clock domain found. Not extracting any FF cells.
Extracted 1238 gates and 1261 wires to a netlist network with 23 inputs and 19 outputs.

3.35.2.1. Executing ABC.

yosys> abc -dff

3.36. Executing ABC pass (technology mapping using ABC).

3.36.1. Summary of detected clock domains:
  1221 cells in clk={ }, en={ }, arst={ }, srst={ }

3.36.2. Extracting gate netlist of module `\top' to `<abc-temp-dir>/input.blif'..
No matching clock domain found. Not extracting any FF cells.
Extracted 1221 gates and 1244 wires to a netlist network with 23 inputs and 19 outputs.

3.36.2.1. Executing ABC.

yosys> opt_ffinv

3.37. Executing OPT_FFINV pass (push inverters through FFs).
Discovering LUTs.
Pushed 0 inverters.

yosys> opt -sat

3.38. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.38.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

yosys> opt_merge -nomux

3.38.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.38.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.38.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.38.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.38.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.38.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 4224 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.38.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.38.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.38.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.38.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.38.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.38.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.38.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

yosys> opt_expr

3.38.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.38.16. Finished OPT passes. (There is nothing left to do.)

yosys> abc -script /home/users/temp_dir/yosys_PMsGmg/abc_tmp_1.scr

3.39. Executing ABC pass (technology mapping using ABC).

3.39.1. Extracting gate netlist of module `\top' to `<abc-temp-dir>/input.blif'..
Extracted 1233 gates and 1256 wires to a netlist network with 23 inputs and 19 outputs.

3.39.1.1. Executing ABC.
DE:   #PIs =  23  #Luts =   344  Max Lvl =  36  Avg Lvl =  22.89  [   0.25 sec. at Pass 0]
DE:   #PIs =  23  #Luts =   299  Max Lvl =  29  Avg Lvl =  19.26  [   6.04 sec. at Pass 1]
DE:   #PIs =  23  #Luts =   295  Max Lvl =  26  Avg Lvl =  17.74  [   1.08 sec. at Pass 2]
DE:   #PIs =  23  #Luts =   278  Max Lvl =  27  Avg Lvl =  17.42  [   2.53 sec. at Pass 3]
DE:   #PIs =  23  #Luts =   272  Max Lvl =  27  Avg Lvl =  17.89  [   1.39 sec. at Pass 4]
DE:   #PIs =  23  #Luts =   265  Max Lvl =  27  Avg Lvl =  17.95  [   4.68 sec. at Pass 5]
DE:   #PIs =  23  #Luts =   265  Max Lvl =  27  Avg Lvl =  17.95  [   1.33 sec. at Pass 6]
DE:   #PIs =  23  #Luts =   263  Max Lvl =  26  Avg Lvl =  16.58  [   4.15 sec. at Pass 7]
DE:   #PIs =  23  #Luts =   263  Max Lvl =  26  Avg Lvl =  16.58  [   1.03 sec. at Pass 8]
DE:   #PIs =  23  #Luts =   263  Max Lvl =  26  Avg Lvl =  16.58  [   3.14 sec. at Pass 9]
DE:   #PIs =  23  #Luts =   263  Max Lvl =  26  Avg Lvl =  16.58  [   1.17 sec. at Pass 10]
DE:   #PIs =  23  #Luts =   260  Max Lvl =  25  Avg Lvl =  16.63  [  20.71 sec. at Pass 11]
DE:   #PIs =  23  #Luts =   260  Max Lvl =  25  Avg Lvl =  16.63  [   3.54 sec. at Pass 12]
DE:   #PIs =  23  #Luts =   260  Max Lvl =  25  Avg Lvl =  16.63  [   1.49 sec. at Pass 13]
DE:   #PIs =  23  #Luts =   260  Max Lvl =  25  Avg Lvl =  16.63  [   4.35 sec. at Pass 14]
DE:   #PIs =  23  #Luts =   259  Max Lvl =  25  Avg Lvl =  16.42  [  25.59 sec. at Pass 15]
DE:   #PIs =  23  #Luts =   259  Max Lvl =  25  Avg Lvl =  16.42  [   1.27 sec. at Pass 16]
DE:   #PIs =  23  #Luts =   259  Max Lvl =  25  Avg Lvl =  16.42  [   4.26 sec. at Pass 17]
DE:   #PIs =  23  #Luts =   259  Max Lvl =  25  Avg Lvl =  16.42  [   1.54 sec. at Pass 18]
DE:   #PIs =  23  #Luts =   259  Max Lvl =  24  Avg Lvl =  15.89  [  25.00 sec. at Pass 19]
DE:   #PIs =  23  #Luts =   259  Max Lvl =  24  Avg Lvl =  15.89  [   3.06 sec. at Pass 20]
DE:   #PIs =  23  #Luts =   259  Max Lvl =  24  Avg Lvl =  15.89  [   1.61 sec. at Pass 21]
DE:   #PIs =  23  #Luts =   259  Max Lvl =  24  Avg Lvl =  15.89  [   3.12 sec. at Pass 22]
DE:   #PIs =  23  #Luts =   258  Max Lvl =  23  Avg Lvl =  14.95  [  23.53 sec. at Pass 23]
DE:   #PIs =  23  #Luts =   258  Max Lvl =  23  Avg Lvl =  14.95  [   1.44 sec. at Pass 24]
DE:   #PIs =  23  #Luts =   258  Max Lvl =  23  Avg Lvl =  14.95  [   5.74 sec. at Pass 25]
DE:   #PIs =  23  #Luts =   258  Max Lvl =  23  Avg Lvl =  14.95  [   1.78 sec. at Pass 26]
DE:   #PIs =  23  #Luts =   258  Max Lvl =  23  Avg Lvl =  14.95  [   0.43 sec. at Pass 27]

yosys> opt

3.40. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.40.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

yosys> opt_merge -nomux

3.40.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.40.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.40.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.40.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_dff

3.40.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.40.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 1256 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.40.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.40.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.40.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.40.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.40.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_dff

3.40.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.40.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

yosys> opt_expr

3.40.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.40.16. Finished OPT passes. (There is nothing left to do.)

yosys> opt_ffinv

3.41. Executing OPT_FFINV pass (push inverters through FFs).
Discovering LUTs.
Pushed 0 inverters.

yosys> stat

3.42. Printing statistics.

=== top ===

   Number of wires:                267
   Number of wire bits:            389
   Number of public wires:          28
   Number of public wire bits:     150
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                258
     $lut                          258


yosys> shregmap -minlen 8 -maxlen 20

3.43. Executing SHREGMAP pass (map shift registers).
Converted 0 dff cells into 0 shift registers.

yosys> dfflegalize -cell $_DFF_?_ 0 -cell $_DFF_???_ 0 -cell $_DFFE_????_ 0 -cell $_DFFSR_???_ 0 -cell $_DFFSRE_????_ 0 -cell $_DLATCHSR_PPP_ 0

3.44. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

yosys> stat

3.45. Printing statistics.

=== top ===

   Number of wires:                267
   Number of wire bits:            389
   Number of public wires:          28
   Number of public wire bits:     150
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                258
     $lut                          258


yosys> techmap -map +/rapidsilicon/genesis/ffs_map.v

3.46. Executing TECHMAP pass (map to technology primitives).

3.46.1. Executing Verilog-2005 frontend: /home/users/aram/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/ffs_map.v
Parsing Verilog input from `/home/users/aram/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/ffs_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP0N_'.
Generating RTLIL representation for module `\$_DFFE_PN0P_'.
Generating RTLIL representation for module `\$_DFFE_PN0N_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP1N_'.
Generating RTLIL representation for module `\$_DFFE_PN1P_'.
Generating RTLIL representation for module `\$_DFFE_PN1N_'.
Generating RTLIL representation for module `\$_DFFSR_PPP_'.
Generating RTLIL representation for module `\$_DFFSR_PNP_'.
Generating RTLIL representation for module `\$_DFFSR_PNN_'.
Generating RTLIL representation for module `\$_DFFSR_PPN_'.
Generating RTLIL representation for module `\$_DFFSR_NPP_'.
Generating RTLIL representation for module `\$_DFFSR_NNP_'.
Generating RTLIL representation for module `\$_DFFSR_NNN_'.
Generating RTLIL representation for module `\$_DFFSR_NPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PNPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPNP_'.
Generating RTLIL representation for module `\$_DFFSRE_PNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PNPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PPNN_'.
Generating RTLIL representation for module `\$_DFFSRE_PNNN_'.
Generating RTLIL representation for module `\$_DLATCHSR_PPP_'.
Generating RTLIL representation for module `\$_DLATCHSR_NPP_'.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP0N_'.
Generating RTLIL representation for module `\$_DFFE_NN0P_'.
Generating RTLIL representation for module `\$_DFFE_NN0N_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_NP1N_'.
Generating RTLIL representation for module `\$_DFFE_NN1P_'.
Generating RTLIL representation for module `\$_DFFE_NN1N_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNPP_'.
Generating RTLIL representation for module `\$_DFFSRE_NPNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPN_'.
Generating RTLIL representation for module `\$_DFFSRE_NNPN_'.
Generating RTLIL representation for module `\$_DFFSRE_NPNN_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNN_'.
Generating RTLIL representation for module `\$__SHREG_DFF_P_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PN0_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NN0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFF_PN1_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_NN1_'.
Successfully finished Verilog frontend.

3.46.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~67 debug messages>

yosys> techmap -map +/techmap.v

3.47. Executing TECHMAP pass (map to technology primitives).

3.47.1. Executing Verilog-2005 frontend: /home/users/aram/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/aram/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.47.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $lut.
No more expansions possible.
<suppressed ~329 debug messages>

yosys> opt_expr -mux_undef

3.48. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~7234 debug messages>

yosys> simplemap

3.49. Executing SIMPLEMAP pass (map simple cells to gate primitives).

yosys> opt_expr

3.50. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

yosys> opt_merge

3.51. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~5499 debug messages>
Removed a total of 1833 cells.

yosys> opt_dff -nodffe -nosdff

3.52. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.53. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 480 unused wires.
<suppressed ~1 debug messages>

yosys> opt -nodffe -nosdff

3.54. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.54.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~224 debug messages>

yosys> opt_merge -nomux

3.54.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~12 debug messages>
Removed a total of 4 cells.

yosys> opt_muxtree

3.54.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.54.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.54.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.54.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.54.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 21 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.54.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.54.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.54.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.54.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.54.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.54.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.54.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

yosys> opt_expr

3.54.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.54.16. Finished OPT passes. (There is nothing left to do.)

yosys> abc -script /home/users/temp_dir/yosys_PMsGmg/abc_tmp_2.scr

3.55. Executing ABC pass (technology mapping using ABC).

3.55.1. Extracting gate netlist of module `\top' to `<abc-temp-dir>/input.blif'..
Extracted 2055 gates and 2080 wires to a netlist network with 23 inputs and 19 outputs.

3.55.1.1. Executing ABC.
DE:   #PIs =  23  #Luts =   262  Max Lvl =  25  Avg Lvl =  15.79  [   0.13 sec. at Pass 0]
DE:   #PIs =  23  #Luts =   262  Max Lvl =  25  Avg Lvl =  15.79  [   5.85 sec. at Pass 1]
DE:   #PIs =  23  #Luts =   260  Max Lvl =  26  Avg Lvl =  16.32  [   2.05 sec. at Pass 2]
DE:   #PIs =  23  #Luts =   259  Max Lvl =  26  Avg Lvl =  16.58  [   4.56 sec. at Pass 3]
DE:   #PIs =  23  #Luts =   259  Max Lvl =  26  Avg Lvl =  16.58  [   1.37 sec. at Pass 4]
DE:   #PIs =  23  #Luts =   259  Max Lvl =  26  Avg Lvl =  16.58  [   4.05 sec. at Pass 5]
DE:   #PIs =  23  #Luts =   259  Max Lvl =  26  Avg Lvl =  16.58  [   1.16 sec. at Pass 6]
DE:   #PIs =  23  #Luts =   259  Max Lvl =  23  Avg Lvl =  15.11  [  27.83 sec. at Pass 7]
DE:   #PIs =  23  #Luts =   257  Max Lvl =  26  Avg Lvl =  16.21  [   3.78 sec. at Pass 8]
DE:   #PIs =  23  #Luts =   257  Max Lvl =  26  Avg Lvl =  16.21  [   1.52 sec. at Pass 9]
DE:   #PIs =  23  #Luts =   257  Max Lvl =  26  Avg Lvl =  16.21  [   4.36 sec. at Pass 10]
DE:   #PIs =  23  #Luts =   257  Max Lvl =  26  Avg Lvl =  16.21  [   1.07 sec. at Pass 11]
DE:   #PIs =  23  #Luts =   257  Max Lvl =  26  Avg Lvl =  16.21  [  22.30 sec. at Pass 12]
DE:   #PIs =  23  #Luts =   257  Max Lvl =  26  Avg Lvl =  16.21  [   0.24 sec. at Pass 13]

yosys> opt

3.56. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.56.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

yosys> opt_merge -nomux

3.56.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.56.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.56.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.56.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_dff

3.56.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.56.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 1119 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.56.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.56.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.56.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.56.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.56.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_dff

3.56.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.56.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

yosys> opt_expr

3.56.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.56.16. Finished OPT passes. (There is nothing left to do.)

yosys> hierarchy -check

3.57. Executing HIERARCHY pass (managing design hierarchy).

3.57.1. Analyzing design hierarchy..
Top module:  \top

3.57.2. Analyzing design hierarchy..
Top module:  \top
Removed 0 unused modules.

yosys> stat

3.58. Printing statistics.

=== top ===

   Number of wires:                266
   Number of wire bits:            388
   Number of public wires:          28
   Number of public wire bits:     150
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                257
     $lut                          257


yosys> opt_clean -purge

3.59. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 17 unused wires.
<suppressed ~17 debug messages>

yosys> write_verilog -noattr -nohex synthesized.v

3.60. Executing Verilog backend.
Dumping module `\top'.

Warnings: 2 unique messages, 2 total
End of script. Logfile hash: 665e6b2ca3, CPU: user 7.18s system 0.13s, MEM: 39.03 MB peak
Yosys 0.17+103 (git sha1 a1babadd5, gcc 9.1.0 -fPIC -Os)
Time spent: 99% 6x abc (2314 sec), 0% 45x opt_expr (2 sec), ...
real 256.26
user 2248.33
sys 72.22
