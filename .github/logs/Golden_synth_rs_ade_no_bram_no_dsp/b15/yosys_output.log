
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys-Verific 0.0.49
 Yosys 0.18+10 (git sha1 7a7a25778, gcc 9.1.0 -fPIC -Os)


-- Executing script file `yosys.ys' --
echo on

yosys> plugin -i synth-rs

yosys> read -verific

yosys> read -incdir .

yosys> verific -vlog-incdir .

1. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific May22_SW_Release, released at Wed Jun  1 05:39:28 2022.

yosys> verilog_defaults -add -I.

yosys> read -vhdl b15.vhd

yosys> verific -vhdl b15.vhd

2. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific May22_SW_Release, released at Wed Jun  1 05:39:28 2022.
VERIFIC-INFO [VHDL-1504] default VHDL library search path is now "/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008"
VERIFIC-COMMENT [VHDL-1481] Analyzing VHDL file 'b15.vhd'
VERIFIC-COMMENT [VHDL-1493] Restoring VHDL unit 'std.standard' from file '/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008/std/standard.vdb'
VERIFIC-INFO [VHDL-1012] b15.vhd:1: analyzing entity 'b15'
VERIFIC-INFO [VHDL-1010] b15.vhd:17: analyzing architecture 'behav'

yosys> synth_rs -top b15 -tech genesis -goal area -de -no_dsp -no_bram -verilog synthesized.v

3. Executing synth_rs pass: v0.4.58

yosys> read_verilog -lib -specify -nomem2reg +/rapidsilicon/common/cells_sim.v +/rapidsilicon/genesis/cells_sim.v

3.1. Executing Verilog-2005 frontend: /home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v
Parsing Verilog input from `/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\inv'.
Generating RTLIL representation for module `\buff'.
Generating RTLIL representation for module `\logic_0'.
Generating RTLIL representation for module `\logic_1'.
Generating RTLIL representation for module `\gclkbuff'.
Successfully finished Verilog frontend.

3.2. Executing Verilog-2005 frontend: /home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/cells_sim.v
Parsing Verilog input from `/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\dffsre'.
Generating RTLIL representation for module `\dffnsre'.
Generating RTLIL representation for module `\latchsre'.
Generating RTLIL representation for module `\latchnsre'.
Generating RTLIL representation for module `\io_scff'.
Generating RTLIL representation for module `\scff'.
Generating RTLIL representation for module `\sh_dff'.
Generating RTLIL representation for module `\adder_carry'.
Generating RTLIL representation for module `\sdffr'.
Generating RTLIL representation for module `\sdffs'.
Generating RTLIL representation for module `\TDP_BRAM18'.
Generating RTLIL representation for module `\TDP36K'.
Generating RTLIL representation for module `\RS_DSP1'.
Generating RTLIL representation for module `\RS_DSP2'.
Generating RTLIL representation for module `\RS_DSP2_MULT'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGIN_REGOUT'.
Generating RTLIL representation for module `\dsp_t1_sim'.
Generating RTLIL representation for module `\dsp_t1_20x18x64'.
Generating RTLIL representation for module `\dsp_t1_10x9x32'.
Successfully finished Verilog frontend.

yosys> hierarchy -check -top b15

3.3. Executing HIERARCHY pass (managing design hierarchy).
VERIFIC-INFO [VHDL-1067] b15.vhd:1: processing 'b15(BEHAV)'
Importing module b15.

3.3.1. Analyzing design hierarchy..
Top module:  \b15

3.3.2. Analyzing design hierarchy..
Top module:  \b15
Removed 0 unused modules.

yosys> proc

3.4. Executing PROC pass (convert processes to netlists).

yosys> proc_clean

3.4.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> proc_rmdead

3.4.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

yosys> proc_prune

3.4.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

yosys> proc_init

3.4.4. Executing PROC_INIT pass (extract init attributes).

yosys> proc_arst

3.4.5. Executing PROC_ARST pass (detect async resets in processes).

yosys> proc_rom

3.4.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

yosys> proc_mux

3.4.7. Executing PROC_MUX pass (convert decision trees to multiplexers).

yosys> proc_dlatch

3.4.8. Executing PROC_DLATCH pass (convert process syncs to latches).

yosys> proc_dff

3.4.9. Executing PROC_DFF pass (convert process syncs to FFs).

yosys> proc_memwr

3.4.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

yosys> proc_clean

3.4.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> opt_expr -keepdc

3.4.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module b15.
<suppressed ~17 debug messages>

yosys> bmuxmap

3.5. Executing BMUXMAP pass.

yosys> demuxmap

3.6. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> flatten

3.7. Executing FLATTEN pass (flatten design).

yosys> bmuxmap

3.8. Executing BMUXMAP pass.

yosys> demuxmap

3.9. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> tribuf -logic

3.10. Executing TRIBUF pass.

yosys> deminout

3.11. Executing DEMINOUT pass (demote inout ports to input or output).

yosys> opt_expr

3.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module b15.
<suppressed ~229 debug messages>

yosys> opt_clean

3.13. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b15..
Removed 14 unused cells and 198 unused wires.
<suppressed ~70 debug messages>

yosys> check

3.14. Executing CHECK pass (checking for obvious problems).
Checking module b15...
Found and reported 0 problems.

yosys> opt -nodffe -nosdff

3.15. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b15.
<suppressed ~1 debug messages>

yosys> opt_merge -nomux

3.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b15'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.15.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b15..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port A of cell $verific$mux_741$b15.vhd:574$916: \P1.State2 -> 4'0110
      Replacing known input bits on port B of cell $verific$select_728$b15.vhd:564$905: { \P1.State2 \P1.State2 \P1.State2 \P1.State2 \P1.State2 \P1.State2 \P1.State2 \P1.State2 \P1.State2 $verific$n6348$388 \P1.State2 \P1.State2 \P1.State2 \P1.State2 \P1.State2 \P1.State2 \P1.State2 \P1.State2 \P1.State2 } -> { 36'010101010101010101010101010101010101 $verific$n6348$388 36'010101010101010101010101010101010101 }
      Replacing known input bits on port A of cell $verific$mux_571$b15.vhd:485$852: \P1.State2 -> 4'0101
      Replacing known input bits on port A of cell $verific$mux_558$b15.vhd:481$844: \P1.State2 -> 4'0101
      Replacing known input bits on port A of cell $verific$mux_547$b15.vhd:480$840: \P1.State2 -> 4'0101
      Replacing known input bits on port A of cell $verific$mux_536$b15.vhd:475$837: \P1.State2 -> 4'0101
      Replacing known input bits on port B of cell $verific$mux_70$b15.vhd:158$573: \State -> 3'011
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~77 debug messages>

yosys> opt_reduce

3.15.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b15.
    New ctrl vector for $pmux cell $verific$Select_710$b15.vhd:564$890: { $verific$n7780$86 $verific$n7781$87 $auto$opt_reduce.cc:134:opt_pmux$1880 $auto$opt_reduce.cc:134:opt_pmux$1878 }
    New ctrl vector for $pmux cell $verific$Select_712$b15.vhd:564$892: { $verific$n7780$86 $auto$opt_reduce.cc:134:opt_pmux$1886 $auto$opt_reduce.cc:134:opt_pmux$1884 $auto$opt_reduce.cc:134:opt_pmux$1882 }
    New ctrl vector for $pmux cell $verific$Select_718$b15.vhd:564$898: { $verific$n7970$107 $verific$n7787$93 $auto$opt_reduce.cc:134:opt_pmux$1888 $verific$n7789$95 }
    New ctrl vector for $pmux cell $verific$Select_720$b15.vhd:564$899: { $verific$n7970$107 $auto$opt_reduce.cc:134:opt_pmux$1892 $auto$opt_reduce.cc:134:opt_pmux$1890 }
    New ctrl vector for $pmux cell $verific$Select_722$b15.vhd:564$900: { $verific$n7970$107 $auto$opt_reduce.cc:134:opt_pmux$1896 $auto$opt_reduce.cc:134:opt_pmux$1894 }
    New ctrl vector for $pmux cell $verific$Select_724$b15.vhd:564$901: { $verific$n7970$107 $auto$opt_reduce.cc:134:opt_pmux$1898 }
    New ctrl vector for $pmux cell $verific$select_707$b15.vhd:564$887: { $verific$n7780$86 $verific$n7781$87 $auto$opt_reduce.cc:134:opt_pmux$1908 $auto$opt_reduce.cc:134:opt_pmux$1906 $auto$opt_reduce.cc:134:opt_pmux$1904 $auto$opt_reduce.cc:134:opt_pmux$1902 $auto$opt_reduce.cc:134:opt_pmux$1900 }
    New ctrl vector for $pmux cell $verific$select_708$b15.vhd:564$888: { $auto$opt_reduce.cc:134:opt_pmux$1918 $auto$opt_reduce.cc:134:opt_pmux$1916 $verific$n7786$92 $verific$n7788$94 $auto$opt_reduce.cc:134:opt_pmux$1914 $auto$opt_reduce.cc:134:opt_pmux$1912 $auto$opt_reduce.cc:134:opt_pmux$1910 }
    New ctrl vector for $pmux cell $verific$select_713$b15.vhd:564$893: { $verific$n7780$86 $verific$n7781$87 $auto$opt_reduce.cc:134:opt_pmux$1920 }
    New ctrl vector for $pmux cell $verific$select_714$b15.vhd:564$894: { $verific$n7784$90 $verific$n7786$92 $verific$n7788$94 $verific$n7794$100 $auto$opt_reduce.cc:134:opt_pmux$1922 }
    New ctrl vector for $pmux cell $verific$select_715$b15.vhd:564$895: { $verific$n7785$91 $verific$n7795$101 $auto$opt_reduce.cc:134:opt_pmux$1924 }
    New ctrl vector for $pmux cell $verific$select_716$b15.vhd:564$896: { $verific$n7786$92 $verific$n7787$93 $auto$opt_reduce.cc:134:opt_pmux$1928 $auto$opt_reduce.cc:134:opt_pmux$1926 }
    New ctrl vector for $pmux cell $verific$select_725$b15.vhd:564$902: { $verific$n7786$92 $verific$n7787$93 $auto$opt_reduce.cc:134:opt_pmux$1930 }
    New ctrl vector for $pmux cell $verific$select_726$b15.vhd:564$903: { $verific$n7786$92 $verific$n7787$93 $auto$opt_reduce.cc:134:opt_pmux$1932 }
    New ctrl vector for $pmux cell $verific$select_727$b15.vhd:564$904: { $verific$n7787$93 $verific$n7789$95 $auto$opt_reduce.cc:134:opt_pmux$1934 }
    New ctrl vector for $pmux cell $verific$select_728$b15.vhd:564$905: { $verific$n7787$93 $auto$opt_reduce.cc:134:opt_pmux$1936 }
  Optimizing cells in module \b15.
Performed a total of 16 changes.

yosys> opt_merge

3.15.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b15'.
<suppressed ~129 debug messages>
Removed a total of 43 cells.

yosys> opt_dff -nodffe -nosdff

3.15.6. Executing OPT_DFF pass (perform DFF optimizations).
Changing const-value async load to async reset on $verific$rEIP_reg$b15.vhd:614$1033 ($aldff) from module b15.
Changing const-value async load to async reset on $verific$W_R_n_reg$b15.vhd:233$621 ($aldff) from module b15.
Changing const-value async load to async reset on $verific$State_reg$b15.vhd:233$625 ($aldff) from module b15.
Changing const-value async load to async reset on $verific$StateBS16_reg$b15.vhd:233$627 ($aldff) from module b15.
Changing const-value async load to async reset on $verific$RequestPending_reg$b15.vhd:614$1037 ($aldff) from module b15.
Changing const-value async load to async reset on $verific$ReadRequest_reg$b15.vhd:614$1035 ($aldff) from module b15.
Changing const-value async load to async reset on $verific$P1.uWord_reg$b15.vhd:614$1027 ($aldff) from module b15.
Changing const-value async load to async reset on $verific$P1.lWord_reg$b15.vhd:614$1026 ($aldff) from module b15.
Changing const-value async load to async reset on $verific$P1.State2_reg$b15.vhd:614$1003 ($aldff) from module b15.
Changing const-value async load to async reset on $verific$P1.PhyAddrPointer_reg$b15.vhd:614$1023 ($aldff) from module b15.
Changing const-value async load to async reset on $verific$P1.More_reg$b15.vhd:614$1024 ($aldff) from module b15.
Changing const-value async load to async reset on $verific$P1.InstQueue_reg_9$b15.vhd:614$1011 ($aldff) from module b15.
Changing const-value async load to async reset on $verific$P1.InstQueue_reg_8$b15.vhd:614$1010 ($aldff) from module b15.
Changing const-value async load to async reset on $verific$P1.InstQueue_reg_7$b15.vhd:614$1009 ($aldff) from module b15.
Changing const-value async load to async reset on $verific$P1.InstQueue_reg_6$b15.vhd:614$1008 ($aldff) from module b15.
Changing const-value async load to async reset on $verific$P1.InstQueue_reg_5$b15.vhd:614$1007 ($aldff) from module b15.
Changing const-value async load to async reset on $verific$P1.InstQueue_reg_4$b15.vhd:614$1006 ($aldff) from module b15.
Changing const-value async load to async reset on $verific$P1.InstQueue_reg_3$b15.vhd:614$1005 ($aldff) from module b15.
Changing const-value async load to async reset on $verific$P1.InstQueue_reg_2$b15.vhd:614$1004 ($aldff) from module b15.
Changing const-value async load to async reset on $verific$P1.InstQueue_reg_16$b15.vhd:614$1018 ($aldff) from module b15.
Changing const-value async load to async reset on $verific$P1.InstQueue_reg_15$b15.vhd:614$1017 ($aldff) from module b15.
Changing const-value async load to async reset on $verific$P1.InstQueue_reg_14$b15.vhd:614$1016 ($aldff) from module b15.
Changing const-value async load to async reset on $verific$P1.InstQueue_reg_13$b15.vhd:614$1015 ($aldff) from module b15.
Changing const-value async load to async reset on $verific$P1.InstQueue_reg_12$b15.vhd:614$1014 ($aldff) from module b15.
Changing const-value async load to async reset on $verific$P1.InstQueue_reg_11$b15.vhd:614$1013 ($aldff) from module b15.
Changing const-value async load to async reset on $verific$P1.InstQueue_reg_10$b15.vhd:614$1012 ($aldff) from module b15.
Changing const-value async load to async reset on $verific$P1.InstQueue_reg$b15.vhd:614$1019 ($aldff) from module b15.
Changing const-value async load to async reset on $verific$P1.InstQueueWr_Addr_reg$b15.vhd:614$1021 ($aldff) from module b15.
Changing const-value async load to async reset on $verific$P1.InstQueueRd_Addr_reg$b15.vhd:614$1020 ($aldff) from module b15.
Changing const-value async load to async reset on $verific$P1.InstAddrPointer_reg$b15.vhd:614$1022 ($aldff) from module b15.
Changing const-value async load to async reset on $verific$P1.Flush_reg$b15.vhd:614$1025 ($aldff) from module b15.
Changing const-value async load to async reset on $verific$MemoryFetch_reg$b15.vhd:614$1036 ($aldff) from module b15.
Changing const-value async load to async reset on $verific$M_IO_n_reg$b15.vhd:233$623 ($aldff) from module b15.
Changing const-value async load to async reset on $verific$EBX_reg$b15.vhd:614$1032 ($aldff) from module b15.
Changing const-value async load to async reset on $verific$EAX_reg$b15.vhd:614$1031 ($aldff) from module b15.
Changing const-value async load to async reset on $verific$Datao_reg$b15.vhd:614$1029 ($aldff) from module b15.
Changing const-value async load to async reset on $verific$DataWidth_reg$b15.vhd:233$628 ($aldff) from module b15.
Changing const-value async load to async reset on $verific$D_C_n_reg$b15.vhd:233$622 ($aldff) from module b15.
Changing const-value async load to async reset on $verific$CodeFetch_reg$b15.vhd:614$1028 ($aldff) from module b15.
Changing const-value async load to async reset on $verific$ByteEnable_reg$b15.vhd:670$1055 ($aldff) from module b15.
Changing const-value async load to async reset on $verific$BE_n_reg$b15.vhd:233$619 ($aldff) from module b15.
Changing const-value async load to async reset on $verific$Address_reg$b15.vhd:233$620 ($aldff) from module b15.
Changing const-value async load to async reset on $verific$ADS_n_reg$b15.vhd:233$624 ($aldff) from module b15.

yosys> opt_clean

3.15.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b15..
Removed 2 unused cells and 21 unused wires.
<suppressed ~3 debug messages>

yosys> opt_expr

3.15.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module b15.
<suppressed ~3 debug messages>

3.15.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.15.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b15..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~90 debug messages>

yosys> opt_reduce

3.15.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b15.
Performed a total of 0 changes.

yosys> opt_merge

3.15.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b15'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.15.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.15.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b15..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.15.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module b15.

3.15.16. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.15.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b15..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~90 debug messages>

yosys> opt_reduce

3.15.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b15.
Performed a total of 0 changes.

yosys> opt_merge

3.15.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b15'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.15.20. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.15.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b15..

yosys> opt_expr

3.15.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module b15.

3.15.23. Finished OPT passes. (There is nothing left to do.)

yosys> fsm -encoding binary

3.16. Executing FSM pass (extract and optimize FSM).

yosys> fsm_detect

3.16.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking b15.ByteEnable as FSM state register:
    Users of register don't seem to benefit from recoding.
Not marking b15.State as FSM state register:
    Users of register don't seem to benefit from recoding.

yosys> fsm_extract

3.16.2. Executing FSM_EXTRACT pass (extracting FSM from design).

yosys> fsm_opt

3.16.3. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> opt_clean

3.16.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b15..

yosys> fsm_opt

3.16.5. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> fsm_recode -encoding binary

3.16.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

yosys> fsm_info

3.16.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

yosys> fsm_map

3.16.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

yosys> opt -sat

3.17. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.17.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b15.

yosys> opt_merge -nomux

3.17.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b15'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.17.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b15..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~90 debug messages>

yosys> opt_reduce

3.17.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b15.
Performed a total of 0 changes.

yosys> opt_merge

3.17.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b15'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.17.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $verific$rEIP_reg$b15.vhd:614$1033 ($adff) from module b15 (D = $auto$bmuxmap.cc:58:execute$1613 [0], Q = \rEIP [0]).
Adding EN signal on $verific$rEIP_reg$b15.vhd:614$1033 ($adff) from module b15 (D = $auto$bmuxmap.cc:58:execute$1613 [30:1], Q = \rEIP [30:1]).
Adding EN signal on $verific$rEIP_reg$b15.vhd:614$1033 ($adff) from module b15 (D = $auto$bmuxmap.cc:58:execute$1613 [31], Q = \rEIP [31]).
Adding EN signal on $verific$W_R_n_reg$b15.vhd:233$621 ($adff) from module b15 (D = $verific$n398$9, Q = \W_R_n).
Adding EN signal on $verific$StateBS16_reg$b15.vhd:233$627 ($adff) from module b15 (D = $auto$bmuxmap.cc:58:execute$1830, Q = \StateBS16).
Adding EN signal on $verific$RequestPending_reg$b15.vhd:614$1037 ($adff) from module b15 (D = $auto$bmuxmap.cc:58:execute$1556, Q = \RequestPending).
Adding EN signal on $verific$ReadRequest_reg$b15.vhd:614$1035 ($adff) from module b15 (D = $auto$bmuxmap.cc:58:execute$1594, Q = \ReadRequest).
Adding EN signal on $verific$P1.uWord_reg$b15.vhd:614$1027 ($adff) from module b15 (D = $auto$bmuxmap.cc:58:execute$1118, Q = \P1.uWord).
Adding EN signal on $verific$P1.lWord_reg$b15.vhd:614$1026 ($adff) from module b15 (D = $auto$bmuxmap.cc:58:execute$1099, Q = \P1.lWord).
Adding EN signal on $verific$P1.PhyAddrPointer_reg$b15.vhd:614$1023 ($adff) from module b15 (D = $auto$bmuxmap.cc:58:execute$1670 [0], Q = \P1.PhyAddrPointer [0]).
Adding EN signal on $verific$P1.PhyAddrPointer_reg$b15.vhd:614$1023 ($adff) from module b15 (D = $auto$bmuxmap.cc:58:execute$1670 [1], Q = \P1.PhyAddrPointer [1]).
Adding EN signal on $verific$P1.PhyAddrPointer_reg$b15.vhd:614$1023 ($adff) from module b15 (D = $auto$bmuxmap.cc:58:execute$1670 [31:2], Q = \P1.PhyAddrPointer [31:2]).
Adding EN signal on $verific$P1.More_reg$b15.vhd:614$1024 ($adff) from module b15 (D = $verific$n7839$106, Q = \P1.More).
Adding EN signal on $verific$P1.InstQueue_reg_9$b15.vhd:614$1011 ($adff) from module b15 (D = $auto$bmuxmap.cc:58:execute$1385, Q = \P1.InstQueue[8]).
Adding EN signal on $verific$P1.InstQueue_reg_8$b15.vhd:614$1010 ($adff) from module b15 (D = $auto$bmuxmap.cc:58:execute$1404, Q = \P1.InstQueue[9]).
Adding EN signal on $verific$P1.InstQueue_reg_7$b15.vhd:614$1009 ($adff) from module b15 (D = $auto$bmuxmap.cc:58:execute$1423, Q = \P1.InstQueue[10]).
Adding EN signal on $verific$P1.InstQueue_reg_6$b15.vhd:614$1008 ($adff) from module b15 (D = $auto$bmuxmap.cc:58:execute$1442, Q = \P1.InstQueue[11]).
Adding EN signal on $verific$P1.InstQueue_reg_5$b15.vhd:614$1007 ($adff) from module b15 (D = $auto$bmuxmap.cc:58:execute$1461, Q = \P1.InstQueue[12]).
Adding EN signal on $verific$P1.InstQueue_reg_4$b15.vhd:614$1006 ($adff) from module b15 (D = $auto$bmuxmap.cc:58:execute$1480, Q = \P1.InstQueue[13]).
Adding EN signal on $verific$P1.InstQueue_reg_3$b15.vhd:614$1005 ($adff) from module b15 (D = $auto$bmuxmap.cc:58:execute$1499, Q = \P1.InstQueue[14]).
Adding EN signal on $verific$P1.InstQueue_reg_2$b15.vhd:614$1004 ($adff) from module b15 (D = $auto$bmuxmap.cc:58:execute$1518, Q = \P1.InstQueue[15]).
Adding EN signal on $verific$P1.InstQueue_reg_16$b15.vhd:614$1018 ($adff) from module b15 (D = $auto$bmuxmap.cc:58:execute$1252, Q = \P1.InstQueue[1]).
Adding EN signal on $verific$P1.InstQueue_reg_15$b15.vhd:614$1017 ($adff) from module b15 (D = $auto$bmuxmap.cc:58:execute$1271, Q = \P1.InstQueue[2]).
Adding EN signal on $verific$P1.InstQueue_reg_14$b15.vhd:614$1016 ($adff) from module b15 (D = $auto$bmuxmap.cc:58:execute$1290, Q = \P1.InstQueue[3]).
Adding EN signal on $verific$P1.InstQueue_reg_13$b15.vhd:614$1015 ($adff) from module b15 (D = $auto$bmuxmap.cc:58:execute$1309, Q = \P1.InstQueue[4]).
Adding EN signal on $verific$P1.InstQueue_reg_12$b15.vhd:614$1014 ($adff) from module b15 (D = $auto$bmuxmap.cc:58:execute$1328, Q = \P1.InstQueue[5]).
Adding EN signal on $verific$P1.InstQueue_reg_11$b15.vhd:614$1013 ($adff) from module b15 (D = $auto$bmuxmap.cc:58:execute$1347, Q = \P1.InstQueue[6]).
Adding EN signal on $verific$P1.InstQueue_reg_10$b15.vhd:614$1012 ($adff) from module b15 (D = $auto$bmuxmap.cc:58:execute$1366, Q = \P1.InstQueue[7]).
Adding EN signal on $verific$P1.InstQueue_reg$b15.vhd:614$1019 ($adff) from module b15 (D = $auto$bmuxmap.cc:58:execute$1233, Q = \P1.InstQueue[0]).
Adding EN signal on $verific$P1.InstQueueWr_Addr_reg$b15.vhd:614$1021 ($adff) from module b15 (D = $auto$bmuxmap.cc:58:execute$1214, Q = \P1.InstQueueWr_Addr).
Adding EN signal on $verific$P1.InstQueueRd_Addr_reg$b15.vhd:614$1020 ($adff) from module b15 (D = $auto$bmuxmap.cc:58:execute$1195, Q = \P1.InstQueueRd_Addr).
Adding EN signal on $verific$P1.InstAddrPointer_reg$b15.vhd:614$1022 ($adff) from module b15 (D = $auto$bmuxmap.cc:58:execute$1651 [0], Q = \P1.InstAddrPointer [0]).
Adding EN signal on $verific$P1.InstAddrPointer_reg$b15.vhd:614$1022 ($adff) from module b15 (D = $auto$bmuxmap.cc:58:execute$1651 [31:1], Q = \P1.InstAddrPointer [31:1]).
Adding EN signal on $verific$P1.Flush_reg$b15.vhd:614$1025 ($adff) from module b15 (D = $verific$n7837$104, Q = \P1.Flush).
Adding EN signal on $verific$MemoryFetch_reg$b15.vhd:614$1036 ($adff) from module b15 (D = $auto$bmuxmap.cc:58:execute$1575, Q = \MemoryFetch).
Adding EN signal on $verific$M_IO_n_reg$b15.vhd:233$623 ($adff) from module b15 (D = \MemoryFetch, Q = \M_IO_n).
Adding EN signal on $verific$EBX_reg$b15.vhd:614$1032 ($adff) from module b15 (D = $auto$bmuxmap.cc:58:execute$1137, Q = \EBX).
Adding EN signal on $verific$EAX_reg$b15.vhd:614$1031 ($adff) from module b15 (D = $auto$bmuxmap.cc:58:execute$1156, Q = \EAX).
Adding EN signal on $verific$Datao_reg$b15.vhd:614$1029 ($adff) from module b15 (D = $auto$bmuxmap.cc:58:execute$1080 [30:0], Q = \Datao [30:0]).
Adding EN signal on $verific$Datao_reg$b15.vhd:614$1029 ($adff) from module b15 (D = $auto$bmuxmap.cc:58:execute$1080 [31], Q = \Datao [31]).
Adding EN signal on $verific$DataWidth_reg$b15.vhd:233$628 ($adff) from module b15 (D = $auto$bmuxmap.cc:58:execute$1820 [31:0], Q = \DataWidth).
Adding EN signal on $verific$D_C_n_reg$b15.vhd:233$622 ($adff) from module b15 (D = $auto$bmuxmap.cc:58:execute$1870, Q = \D_C_n).
Adding EN signal on $verific$CodeFetch_reg$b15.vhd:614$1028 ($adff) from module b15 (D = $auto$bmuxmap.cc:58:execute$1537, Q = \CodeFetch).
Adding EN signal on $verific$ByteEnable_reg$b15.vhd:670$1055 ($adff) from module b15 (D = $verific$n9573$528, Q = \ByteEnable).
Adding EN signal on $verific$BE_n_reg$b15.vhd:233$619 ($adff) from module b15 (D = \ByteEnable, Q = \BE_n).
Adding EN signal on $verific$Address_reg$b15.vhd:233$620 ($adff) from module b15 (D = $auto$bmuxmap.cc:58:execute$1810, Q = \Address).
Adding EN signal on $verific$ADS_n_reg$b15.vhd:233$624 ($adff) from module b15 (D = $auto$bmuxmap.cc:58:execute$1860, Q = \ADS_n).
Setting constant 0-bit at position 2 on $auto$ff.cc:262:slice$2603 ($adffe) from module b15.
Setting constant 0-bit at position 3 on $auto$ff.cc:262:slice$2603 ($adffe) from module b15.
Setting constant 0-bit at position 4 on $auto$ff.cc:262:slice$2603 ($adffe) from module b15.
Setting constant 0-bit at position 5 on $auto$ff.cc:262:slice$2603 ($adffe) from module b15.
Setting constant 0-bit at position 6 on $auto$ff.cc:262:slice$2603 ($adffe) from module b15.
Setting constant 0-bit at position 7 on $auto$ff.cc:262:slice$2603 ($adffe) from module b15.
Setting constant 0-bit at position 8 on $auto$ff.cc:262:slice$2603 ($adffe) from module b15.
Setting constant 0-bit at position 9 on $auto$ff.cc:262:slice$2603 ($adffe) from module b15.
Setting constant 0-bit at position 10 on $auto$ff.cc:262:slice$2603 ($adffe) from module b15.
Setting constant 0-bit at position 11 on $auto$ff.cc:262:slice$2603 ($adffe) from module b15.
Setting constant 0-bit at position 12 on $auto$ff.cc:262:slice$2603 ($adffe) from module b15.
Setting constant 0-bit at position 13 on $auto$ff.cc:262:slice$2603 ($adffe) from module b15.
Setting constant 0-bit at position 14 on $auto$ff.cc:262:slice$2603 ($adffe) from module b15.
Setting constant 0-bit at position 15 on $auto$ff.cc:262:slice$2603 ($adffe) from module b15.
Setting constant 0-bit at position 16 on $auto$ff.cc:262:slice$2603 ($adffe) from module b15.
Setting constant 0-bit at position 17 on $auto$ff.cc:262:slice$2603 ($adffe) from module b15.
Setting constant 0-bit at position 18 on $auto$ff.cc:262:slice$2603 ($adffe) from module b15.
Setting constant 0-bit at position 19 on $auto$ff.cc:262:slice$2603 ($adffe) from module b15.
Setting constant 0-bit at position 20 on $auto$ff.cc:262:slice$2603 ($adffe) from module b15.
Setting constant 0-bit at position 21 on $auto$ff.cc:262:slice$2603 ($adffe) from module b15.
Setting constant 0-bit at position 22 on $auto$ff.cc:262:slice$2603 ($adffe) from module b15.
Setting constant 0-bit at position 23 on $auto$ff.cc:262:slice$2603 ($adffe) from module b15.
Setting constant 0-bit at position 24 on $auto$ff.cc:262:slice$2603 ($adffe) from module b15.
Setting constant 0-bit at position 25 on $auto$ff.cc:262:slice$2603 ($adffe) from module b15.
Setting constant 0-bit at position 26 on $auto$ff.cc:262:slice$2603 ($adffe) from module b15.
Setting constant 0-bit at position 27 on $auto$ff.cc:262:slice$2603 ($adffe) from module b15.
Setting constant 0-bit at position 28 on $auto$ff.cc:262:slice$2603 ($adffe) from module b15.
Setting constant 0-bit at position 29 on $auto$ff.cc:262:slice$2603 ($adffe) from module b15.
Setting constant 0-bit at position 30 on $auto$ff.cc:262:slice$2603 ($adffe) from module b15.
Setting constant 0-bit at position 31 on $auto$ff.cc:262:slice$2603 ($adffe) from module b15.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$2591 ($adffe) from module b15.
Setting constant 0-bit at position 4 on $auto$ff.cc:262:slice$2425 ($adffe) from module b15.

yosys> opt_clean

3.17.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b15..
Removed 20 unused cells and 20 unused wires.
<suppressed ~21 debug messages>

yosys> opt_expr

3.17.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module b15.
<suppressed ~49 debug messages>

3.17.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.17.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b15..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~86 debug messages>

yosys> opt_reduce

3.17.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b15.
Performed a total of 0 changes.

yosys> opt_merge

3.17.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b15'.
<suppressed ~678 debug messages>
Removed a total of 226 cells.

yosys> opt_dff -sat

3.17.13. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 4 on $auto$ff.cc:262:slice$2442 ($adffe) from module b15.

yosys> opt_clean

3.17.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b15..
Removed 0 unused cells and 224 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.17.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module b15.

3.17.16. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.17.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b15..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~91 debug messages>

yosys> opt_reduce

3.17.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b15.
Performed a total of 0 changes.

yosys> opt_merge

3.17.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b15'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.17.20. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.17.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b15..

yosys> opt_expr

3.17.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module b15.

3.17.23. Finished OPT passes. (There is nothing left to do.)

yosys> wreduce -keepdc

3.18. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 6) from port B of cell b15.$auto$opt_dff.cc:195:make_patterns_logic$2021 ($ne).
Removed top 1 bits (of 9) from port B of cell b15.$auto$opt_dff.cc:195:make_patterns_logic$1949 ($ne).
Removed top 1 bits (of 3) from port B of cell b15.$auto$opt_dff.cc:195:make_patterns_logic$1961 ($ne).
Removed top 2 bits (of 5) from port B of cell b15.$auto$opt_dff.cc:195:make_patterns_logic$1943 ($ne).
Removed top 1 bits (of 7) from port B of cell b15.$auto$opt_dff.cc:195:make_patterns_logic$2057 ($ne).
Removed top 1 bits (of 3) from port B of cell b15.$auto$opt_dff.cc:195:make_patterns_logic$2008 ($ne).
Removed top 1 bits (of 6) from port B of cell b15.$auto$opt_dff.cc:195:make_patterns_logic$1947 ($ne).
Removed top 1 bits (of 6) from port B of cell b15.$auto$opt_dff.cc:195:make_patterns_logic$1945 ($ne).
Removed top 2 bits (of 3) from port B of cell b15.$auto$opt_dff.cc:195:make_patterns_logic$2010 ($ne).
Removed top 1 bits (of 5) from port B of cell b15.$auto$opt_dff.cc:195:make_patterns_logic$2025 ($ne).
Removed top 2 bits (of 4) from port B of cell b15.$auto$opt_dff.cc:195:make_patterns_logic$1959 ($ne).
Removed top 1 bits (of 4) from port B of cell b15.$auto$opt_dff.cc:195:make_patterns_logic$2029 ($ne).
Removed top 2 bits (of 3) from port B of cell b15.$auto$opt_dff.cc:195:make_patterns_logic$2046 ($ne).
Removed top 2 bits (of 5) from port B of cell b15.$auto$opt_dff.cc:195:make_patterns_logic$2091 ($ne).
Removed top 1 bits (of 6) from port B of cell b15.$auto$opt_dff.cc:195:make_patterns_logic$2095 ($ne).
Removed top 1 bits (of 6) from port B of cell b15.$auto$opt_dff.cc:195:make_patterns_logic$2097 ($ne).
Removed top 1 bits (of 6) from port B of cell b15.$auto$opt_dff.cc:195:make_patterns_logic$2174 ($ne).
Removed top 1 bits (of 4) from port B of cell b15.$auto$opt_dff.cc:195:make_patterns_logic$1953 ($ne).
Removed top 30 bits (of 32) from mux cell b15.$verific$mux_98$b15.vhd:183$588 ($mux).
Removed top 1 bits (of 31) from port Y of cell b15.$verific$add_113$b15.vhd:199$592 ($add).
Removed top 1 bits (of 31) from port A of cell b15.$verific$add_113$b15.vhd:199$592 ($add).
Removed top 1 bits (of 6) from port B of cell b15.$auto$opt_dff.cc:195:make_patterns_logic$2225 ($ne).
Removed top 1 bits (of 3) from mux cell b15.$verific$mux_127$b15.vhd:217$598 ($mux).
Removed top 15 bits (of 16) from port A of cell b15.$verific$Decoder_193$b15.vhd:307$633 ($shl).
Removed top 1 bits (of 5) from port A of cell b15.$verific$add_210$b15.vhd:308$650 ($add).
Removed top 4 bits (of 5) from port B of cell b15.$verific$add_210$b15.vhd:308$650 ($add).
Removed top 1 bits (of 5) from port Y of cell b15.$verific$add_210$b15.vhd:308$650 ($add).
Removed top 15 bits (of 16) from port A of cell b15.$verific$Decoder_213$b15.vhd:310$653 ($shl).
Removed top 3 bits (of 4) from port B of cell b15.$verific$add_230$b15.vhd:311$670 ($add).
Removed top 8 bits (of 16) from port Y of cell b15.$verific$add_235$b15.vhd:313$674 ($add).
Removed top 8 bits (of 16) from port A of cell b15.$verific$add_235$b15.vhd:313$674 ($add).
Removed top 15 bits (of 16) from port A of cell b15.$verific$Decoder_237$b15.vhd:313$679 ($shl).
Removed top 3 bits (of 4) from port B of cell b15.$verific$add_254$b15.vhd:314$696 ($add).
Removed top 15 bits (of 16) from port A of cell b15.$verific$Decoder_261$b15.vhd:315$704 ($shl).
Removed top 3 bits (of 4) from port B of cell b15.$verific$add_278$b15.vhd:316$721 ($add).
Removed top 29 bits (of 30) from port B of cell b15.$verific$add_281$b15.vhd:317$722 ($add).
Removed top 30 bits (of 31) from port B of cell b15.$verific$add_284$b15.vhd:320$724 ($add).
Removed top 1 bits (of 32) from port A of cell b15.$verific$LessThan_286$b15.vhd:321$726 ($lt).
Removed top 1 bits (of 33) from port Y of cell b15.$verific$unary_minus_287$b15.vhd:322$727 ($neg).
Removed top 1 bits (of 33) from port A of cell b15.$verific$unary_minus_287$b15.vhd:322$727 ($neg).
Removed top 31 bits (of 32) from port B of cell b15.$verific$add_360$b15.vhd:346$752 ($add).
Removed top 1 bits (of 5) from port A of cell b15.$verific$add_362$b15.vhd:347$754 ($add).
Removed top 4 bits (of 5) from port B of cell b15.$verific$add_362$b15.vhd:347$754 ($add).
Removed top 1 bits (of 6) from port Y of cell b15.$verific$add_362$b15.vhd:347$754 ($add).
Removed top 2 bits (of 6) from port A of cell b15.$verific$sub_369$b15.vhd:357$756 ($sub).
Removed top 2 bits (of 6) from port B of cell b15.$verific$sub_369$b15.vhd:357$756 ($sub).
Removed top 1 bits (of 6) from port Y of cell b15.$verific$sub_369$b15.vhd:357$756 ($sub).
Removed top 1 bits (of 6) from port B of cell b15.$verific$LessThan_370$b15.vhd:357$757 ($le).
Removed top 1 bits (of 8) from port A of cell b15.$verific$LessThan_373$b15.vhd:358$759 ($lt).
Removed top 1 bits (of 9) from port A of cell b15.$verific$sub_378$b15.vhd:359$760 ($sub).
Removed top 1 bits (of 9) from port B of cell b15.$verific$sub_378$b15.vhd:359$760 ($sub).
Removed top 1 bits (of 33) from port Y of cell b15.$verific$sub_379$b15.vhd:359$761 ($sub).
Removed top 1 bits (of 33) from port A of cell b15.$verific$sub_379$b15.vhd:359$761 ($sub).
Removed top 1 bits (of 33) from port B of cell b15.$verific$sub_379$b15.vhd:359$761 ($sub).
Removed top 30 bits (of 31) from port B of cell b15.$verific$add_383$b15.vhd:362$763 ($add).
Removed top 24 bits (of 32) from port B of cell b15.$verific$add_387$b15.vhd:362$764 ($add).
Removed top 1 bits (of 6) from port B of cell b15.$verific$LessThan_397$b15.vhd:372$771 ($le).
Removed top 29 bits (of 32) from port B of cell b15.$verific$add_399$b15.vhd:373$772 ($add).
Removed top 24 bits (of 32) from port B of cell b15.$verific$add_403$b15.vhd:373$773 ($add).
Removed top 1 bits (of 3) from port A of cell b15.$verific$add_422$b15.vhd:393$778 ($add).
Removed top 2 bits (of 3) from port B of cell b15.$verific$add_422$b15.vhd:393$778 ($add).
Removed top 1 bits (of 3) from port Y of cell b15.$verific$add_422$b15.vhd:393$778 ($add).
Removed top 1 bits (of 5) from port A of cell b15.$verific$add_424$b15.vhd:393$781 ($add).
Removed top 3 bits (of 5) from port B of cell b15.$verific$add_424$b15.vhd:393$781 ($add).
Removed top 1 bits (of 5) from port Y of cell b15.$verific$add_424$b15.vhd:393$781 ($add).
Removed top 7 bits (of 8) from port B of cell b15.$verific$add_426$b15.vhd:393$784 ($add).
Removed top 1 bits (of 9) from port Y of cell b15.$verific$add_426$b15.vhd:393$784 ($add).
Removed top 1 bits (of 4) from port A of cell b15.$verific$add_427$b15.vhd:393$785 ($add).
Removed top 3 bits (of 4) from port B of cell b15.$verific$add_427$b15.vhd:393$785 ($add).
Removed top 1 bits (of 5) from port A of cell b15.$verific$add_435$b15.vhd:397$789 ($add).
Removed top 2 bits (of 5) from port B of cell b15.$verific$add_435$b15.vhd:397$789 ($add).
Removed top 1 bits (of 5) from port Y of cell b15.$verific$add_435$b15.vhd:397$789 ($add).
Removed top 1 bits (of 6) from port B of cell b15.$auto$opt_dff.cc:195:make_patterns_logic$2208 ($ne).
Removed top 1 bits (of 5) from mux cell b15.$verific$mux_440$b15.vhd:401$794 ($mux).
Removed top 1 bits (of 6) from port B of cell b15.$verific$LessThan_462$b15.vhd:414$798 ($le).
Removed top 30 bits (of 31) from port B of cell b15.$verific$add_473$b15.vhd:432$801 ($add).
Removed top 1 bits (of 10) from mux cell b15.$verific$mux_943$b15.vhd:446$829 ($mux).
Removed top 1 bits (of 3) from port A of cell b15.$verific$equal_517$b15.vhd:464$831 ($eq).
Removed top 2 bits (of 4) from mux cell b15.$verific$mux_536$b15.vhd:475$837 ($mux).
Removed top 2 bits (of 4) from mux cell b15.$verific$mux_547$b15.vhd:480$840 ($mux).
Removed top 2 bits (of 4) from mux cell b15.$verific$mux_558$b15.vhd:481$844 ($mux).
Removed top 1 bits (of 5) from mux cell b15.$verific$mux_562$b15.vhd:481$848 ($mux).
Removed top 1 bits (of 64) from mux cell b15.$verific$mux_935$b15.vhd:481$851 ($mux).
Removed top 2 bits (of 4) from mux cell b15.$verific$mux_571$b15.vhd:485$852 ($mux).
Removed top 1 bits (of 64) from mux cell b15.$verific$mux_934$b15.vhd:485$859 ($mux).
Removed top 30 bits (of 31) from port B of cell b15.$verific$add_669$b15.vhd:548$860 ($add).
Removed top 1 bits (of 32) from port Y of cell b15.$verific$add_669$b15.vhd:548$860 ($add).
Removed top 30 bits (of 31) from port B of cell b15.$verific$add_676$b15.vhd:554$863 ($add).
Removed top 1 bits (of 32) from port Y of cell b15.$verific$add_676$b15.vhd:554$863 ($add).
Removed top 1 bits (of 8) from port A of cell b15.$verific$equal_689$b15.vhd:350$867 ($eq).
Removed top 5 bits (of 8) from port A of cell b15.$verific$equal_700$b15.vhd:527$878 ($eq).
Removed top 5 bits (of 8) from port A of cell b15.$verific$equal_701$b15.vhd:532$879 ($eq).
Removed top 1 bits (of 8) from port A of cell b15.$verific$equal_704$b15.vhd:547$882 ($eq).
Removed top 1 bits (of 8) from port A of cell b15.$verific$equal_705$b15.vhd:553$883 ($eq).
Removed top 1 bits (of 4) from mux cell b15.$verific$select_728$b15.vhd:564$905 ($pmux).
Removed top 1 bits (of 5) from port B of cell b15.$verific$LessThan_729$b15.vhd:565$906 ($lt).
Removed top 2 bits (of 6) from port A of cell b15.$verific$sub_731$b15.vhd:565$908 ($sub).
Removed top 1 bits (of 6) from port B of cell b15.$verific$sub_731$b15.vhd:565$908 ($sub).
Removed top 1 bits (of 6) from port A of cell b15.$verific$LessThan_732$b15.vhd:565$909 ($lt).
Removed top 1 bits (of 4) from mux cell b15.$verific$mux_736$b15.vhd:567$913 ($mux).
Removed top 2 bits (of 4) from mux cell b15.$verific$mux_741$b15.vhd:574$916 ($mux).
Removed top 1 bits (of 32) from port A of cell b15.$verific$LessThan_742$b15.vhd:581$917 ($lt).
Removed top 1 bits (of 33) from port Y of cell b15.$verific$unary_minus_743$b15.vhd:582$918 ($neg).
Removed top 1 bits (of 33) from port A of cell b15.$verific$unary_minus_743$b15.vhd:582$918 ($neg).
Removed top 30 bits (of 32) from mux cell b15.$verific$mux_746$b15.vhd:587$922 ($mux).
Removed top 1 bits (of 2) from port A of cell b15.$verific$add_747$b15.vhd:588$924 ($add).
Removed top 1 bits (of 4) from mux cell b15.$verific$mux_751$b15.vhd:589$926 ($mux).
Removed top 1 bits (of 5) from mux cell b15.$verific$mux_752$b15.vhd:590$927 ($mux).
Removed top 2 bits (of 6) from port A of cell b15.$verific$sub_754$b15.vhd:591$929 ($sub).
Removed top 2 bits (of 6) from port B of cell b15.$verific$sub_754$b15.vhd:591$929 ($sub).
Removed top 1 bits (of 6) from port Y of cell b15.$verific$sub_754$b15.vhd:591$929 ($sub).
Removed top 1 bits (of 6) from port A of cell b15.$verific$LessThan_755$b15.vhd:591$930 ($lt).
Removed top 1 bits (of 5) from port A of cell b15.$verific$LessThan_758$b15.vhd:599$932 ($le).
Removed top 1 bits (of 5) from port B of cell b15.$verific$LessThan_758$b15.vhd:599$932 ($le).
Removed top 1 bits (of 6) from port B of cell b15.$auto$opt_dff.cc:195:make_patterns_logic$2191 ($ne).
Removed top 1 bits (of 33) from mux cell b15.$auto$bmuxmap.cc:60:execute$1067 ($mux).
Removed top 1 bits (of 2) from port A of cell b15.$verific$equal_896$b15.vhd:636$1047 ($eq).
Removed top 1 bits (of 6) from port B of cell b15.$auto$opt_dff.cc:195:make_patterns_logic$2455 ($ne).
Removed top 2 bits (of 33) from mux cell b15.$auto$bmuxmap.cc:60:execute$1081 ($mux).
Removed top 1 bits (of 4) from port B of cell b15.$auto$opt_dff.cc:195:make_patterns_logic$2431 ($ne).
Removed top 1 bits (of 6) from port B of cell b15.$auto$opt_dff.cc:195:make_patterns_logic$2427 ($ne).
Removed top 1 bits (of 6) from port B of cell b15.$auto$opt_dff.cc:195:make_patterns_logic$2412 ($ne).
Removed top 1 bits (of 5) from mux cell b15.$auto$bmuxmap.cc:60:execute$1196 ($mux).
Removed top 1 bits (of 6) from port B of cell b15.$auto$opt_dff.cc:195:make_patterns_logic$2395 ($ne).
Removed top 1 bits (of 5) from mux cell b15.$auto$bmuxmap.cc:60:execute$1215 ($mux).
Removed top 1 bits (of 6) from port B of cell b15.$auto$opt_dff.cc:195:make_patterns_logic$2378 ($ne).
Removed top 1 bits (of 6) from port B of cell b15.$auto$opt_dff.cc:195:make_patterns_logic$2361 ($ne).
Removed top 1 bits (of 6) from port B of cell b15.$auto$opt_dff.cc:195:make_patterns_logic$2344 ($ne).
Removed top 1 bits (of 6) from port B of cell b15.$auto$opt_dff.cc:195:make_patterns_logic$2327 ($ne).
Removed top 1 bits (of 6) from port B of cell b15.$auto$opt_dff.cc:195:make_patterns_logic$2310 ($ne).
Removed top 1 bits (of 6) from port B of cell b15.$auto$opt_dff.cc:195:make_patterns_logic$2293 ($ne).
Removed top 1 bits (of 6) from port B of cell b15.$auto$opt_dff.cc:195:make_patterns_logic$2276 ($ne).
Removed top 1 bits (of 6) from port B of cell b15.$auto$opt_dff.cc:195:make_patterns_logic$2259 ($ne).
Removed top 1 bits (of 33) from mux cell b15.$auto$bmuxmap.cc:60:execute$1614 ($mux).
Removed top 2 bits (of 4) from mux cell b15.$auto$bmuxmap.cc:60:execute$1616 ($mux).
Removed top 1 bits (of 4) from mux cell b15.$auto$bmuxmap.cc:60:execute$1617 ($mux).
Removed top 1 bits (of 4) from mux cell b15.$auto$bmuxmap.cc:60:execute$1618 ($mux).
Removed top 1 bits (of 4) from mux cell b15.$auto$bmuxmap.cc:60:execute$1625 ($mux).
Removed top 1 bits (of 6) from port B of cell b15.$auto$opt_dff.cc:195:make_patterns_logic$2242 ($ne).
Removed top 2 bits (of 12) from mux cell b15.$auto$bmuxmap.cc:60:execute$1673 ($mux).
Removed top 1 bits (of 8) from port B of cell b15.$auto$opt_dff.cc:195:make_patterns_logic$1941 ($ne).
Removed top 1 bits (of 6) from port B of cell b15.$auto$opt_dff.cc:195:make_patterns_logic$1939 ($ne).
Removed top 1 bits (of 33) from mux cell b15.$auto$bmuxmap.cc:60:execute$1813 ($mux).
Removed top 1 bits (of 33) from mux cell b15.$auto$bmuxmap.cc:60:execute$1814 ($mux).
Removed top 1 bits (of 33) from mux cell b15.$auto$bmuxmap.cc:60:execute$1815 ($mux).
Removed top 1 bits (of 33) from mux cell b15.$auto$bmuxmap.cc:60:execute$1818 ($mux).
Removed top 1 bits (of 33) from mux cell b15.$auto$bmuxmap.cc:60:execute$1819 ($mux).
Removed top 31 bits (of 33) from mux cell b15.$auto$bmuxmap.cc:60:execute$1821 ($mux).
Removed top 1 bits (of 4) from port B of cell b15.$auto$opt_dff.cc:195:make_patterns_logic$2161 ($ne).
Removed top 3 bits (of 4) from port B of cell b15.$auto$opt_dff.cc:195:make_patterns_logic$1955 ($ne).
Removed top 1 bits (of 6) from port B of cell b15.$auto$opt_dff.cc:195:make_patterns_logic$2157 ($ne).
Removed top 1 bits (of 5) from port B of cell b15.$auto$opt_dff.cc:195:make_patterns_logic$2467 ($ne).
Removed top 1 bits (of 6) from port B of cell b15.$auto$opt_dff.cc:195:make_patterns_logic$2514 ($ne).
Removed top 1 bits (of 6) from port B of cell b15.$auto$opt_dff.cc:195:make_patterns_logic$2534 ($ne).
Removed top 1 bits (of 6) from port B of cell b15.$auto$opt_dff.cc:195:make_patterns_logic$2549 ($ne).
Removed top 1 bits (of 6) from port B of cell b15.$auto$opt_dff.cc:195:make_patterns_logic$2553 ($ne).
Removed top 1 bits (of 7) from port B of cell b15.$auto$opt_dff.cc:195:make_patterns_logic$2557 ($ne).
Removed top 1 bits (of 5) from port B of cell b15.$auto$opt_dff.cc:195:make_patterns_logic$2572 ($ne).
Removed top 1 bits (of 7) from port B of cell b15.$auto$opt_dff.cc:195:make_patterns_logic$2578 ($ne).
Removed top 1 bits (of 7) from port B of cell b15.$auto$opt_dff.cc:195:make_patterns_logic$2580 ($ne).
Removed top 1 bits (of 6) from port B of cell b15.$auto$opt_dff.cc:195:make_patterns_logic$2624 ($ne).
Removed top 1 bits (of 3) from port B of cell b15.$auto$opt_dff.cc:195:make_patterns_logic$2649 ($ne).
Removed top 30 bits (of 32) from port Y of cell b15.$verific$unary_minus_743$b15.vhd:582$918 ($neg).
Removed top 30 bits (of 32) from port A of cell b15.$verific$unary_minus_743$b15.vhd:582$918 ($neg).
Removed top 2 bits (of 33) from mux cell b15.$auto$bmuxmap.cc:60:execute$1078 ($mux).
Removed top 2 bits (of 33) from mux cell b15.$auto$bmuxmap.cc:60:execute$1079 ($mux).
Removed top 1 bits (of 5) from mux cell b15.$auto$bmuxmap.cc:60:execute$1193 ($mux).
Removed top 1 bits (of 5) from mux cell b15.$auto$bmuxmap.cc:60:execute$1194 ($mux).
Removed top 1 bits (of 5) from mux cell b15.$auto$bmuxmap.cc:60:execute$1212 ($mux).
Removed top 1 bits (of 5) from mux cell b15.$auto$bmuxmap.cc:60:execute$1213 ($mux).
Removed top 1 bits (of 33) from mux cell b15.$auto$bmuxmap.cc:60:execute$1611 ($mux).
Removed top 1 bits (of 33) from mux cell b15.$auto$bmuxmap.cc:60:execute$1612 ($mux).
Removed top 30 bits (of 32) from mux cell b15.$auto$bmuxmap.cc:60:execute$1818 ($mux).
Removed top 30 bits (of 32) from mux cell b15.$auto$bmuxmap.cc:60:execute$1819 ($mux).
Removed top 2 bits (of 33) from mux cell b15.$auto$bmuxmap.cc:60:execute$1074 ($mux).
Removed cell b15.$auto$bmuxmap.cc:60:execute$1075 ($mux).
Removed top 1 bits (of 5) from mux cell b15.$auto$bmuxmap.cc:60:execute$1189 ($mux).
Removed top 1 bits (of 5) from mux cell b15.$auto$bmuxmap.cc:60:execute$1190 ($mux).
Removed top 1 bits (of 5) from mux cell b15.$auto$bmuxmap.cc:60:execute$1207 ($mux).
Removed top 1 bits (of 5) from mux cell b15.$auto$bmuxmap.cc:60:execute$1208 ($mux).
Removed top 1 bits (of 5) from mux cell b15.$auto$bmuxmap.cc:60:execute$1209 ($mux).
Removed top 1 bits (of 33) from mux cell b15.$auto$bmuxmap.cc:60:execute$1606 ($mux).
Removed top 1 bits (of 33) from mux cell b15.$auto$bmuxmap.cc:60:execute$1607 ($mux).
Removed top 1 bits (of 33) from mux cell b15.$auto$bmuxmap.cc:60:execute$1608 ($mux).
Removed top 30 bits (of 32) from mux cell b15.$auto$bmuxmap.cc:60:execute$1813 ($mux).
Removed top 30 bits (of 32) from mux cell b15.$auto$bmuxmap.cc:60:execute$1814 ($mux).
Removed top 30 bits (of 32) from mux cell b15.$auto$bmuxmap.cc:60:execute$1815 ($mux).
Removed top 2 bits (of 33) from mux cell b15.$auto$bmuxmap.cc:60:execute$1066 ($mux).
Removed top 1 bits (of 32) from mux cell b15.$auto$bmuxmap.cc:60:execute$1067 ($mux).
Removed top 1 bits (of 5) from mux cell b15.$auto$bmuxmap.cc:60:execute$1181 ($mux).
Removed top 1 bits (of 5) from mux cell b15.$auto$bmuxmap.cc:60:execute$1182 ($mux).
Removed top 1 bits (of 5) from mux cell b15.$auto$bmuxmap.cc:60:execute$1183 ($mux).
Removed top 1 bits (of 5) from mux cell b15.$auto$bmuxmap.cc:60:execute$1199 ($mux).
Removed top 1 bits (of 5) from mux cell b15.$auto$bmuxmap.cc:60:execute$1200 ($mux).
Removed top 1 bits (of 5) from mux cell b15.$auto$bmuxmap.cc:60:execute$1201 ($mux).
Removed top 1 bits (of 5) from mux cell b15.$auto$bmuxmap.cc:60:execute$1202 ($mux).
Removed top 1 bits (of 33) from mux cell b15.$auto$bmuxmap.cc:60:execute$1597 ($mux).
Removed top 1 bits (of 33) from mux cell b15.$auto$bmuxmap.cc:60:execute$1598 ($mux).
Removed top 1 bits (of 33) from mux cell b15.$auto$bmuxmap.cc:60:execute$1599 ($mux).
Removed top 1 bits (of 33) from mux cell b15.$auto$bmuxmap.cc:60:execute$1601 ($mux).
Removed top 1 bits (of 32) from mux cell b15.$verific$select_727$b15.vhd:564$904 ($pmux).
Removed top 1 bits (of 5) from mux cell b15.$verific$mux_757$b15.vhd:596$931 ($mux).
Removed top 1 bits (of 5) from mux cell b15.$verific$mux_799$b15.vhd:607$968 ($mux).
Removed top 1 bits (of 5) from mux cell b15.$verific$mux_753$b15.vhd:590$928 ($mux).
Removed top 101 bits (of 264) from wire b15.$auto$bmuxmap.cc:58:execute$1063.
Removed top 68 bits (of 132) from wire b15.$auto$bmuxmap.cc:58:execute$1072.
Removed top 2 bits (of 66) from wire b15.$auto$bmuxmap.cc:58:execute$1077.
Removed top 2 bits (of 33) from wire b15.$auto$bmuxmap.cc:58:execute$1080.
Removed top 48 bits (of 128) from wire b15.$auto$bmuxmap.cc:58:execute$1082.
Removed top 32 bits (of 64) from wire b15.$auto$bmuxmap.cc:58:execute$1091.
Removed top 16 bits (of 32) from wire b15.$auto$bmuxmap.cc:58:execute$1096.
Removed top 45 bits (of 120) from wire b15.$auto$bmuxmap.cc:58:execute$1101.
Removed top 30 bits (of 60) from wire b15.$auto$bmuxmap.cc:58:execute$1110.
Removed top 15 bits (of 30) from wire b15.$auto$bmuxmap.cc:58:execute$1115.
Removed top 93 bits (of 248) from wire b15.$auto$bmuxmap.cc:58:execute$1120.
Removed top 31 bits (of 62) from wire b15.$auto$bmuxmap.cc:58:execute$1134.
Removed top 93 bits (of 248) from wire b15.$auto$bmuxmap.cc:58:execute$1139.
Removed top 62 bits (of 124) from wire b15.$auto$bmuxmap.cc:58:execute$1148.
Removed top 16 bits (of 40) from wire b15.$auto$bmuxmap.cc:58:execute$1178.
Removed top 16 bits (of 20) from wire b15.$auto$bmuxmap.cc:58:execute$1187.
Removed top 16 bits (of 40) from wire b15.$auto$bmuxmap.cc:58:execute$1197.
Removed top 24 bits (of 64) from wire b15.$auto$bmuxmap.cc:58:execute$1216.
Removed top 24 bits (of 64) from wire b15.$auto$bmuxmap.cc:58:execute$1235.
Removed top 24 bits (of 64) from wire b15.$auto$bmuxmap.cc:58:execute$1254.
Removed top 24 bits (of 64) from wire b15.$auto$bmuxmap.cc:58:execute$1273.
Removed top 24 bits (of 64) from wire b15.$auto$bmuxmap.cc:58:execute$1292.
Removed top 24 bits (of 64) from wire b15.$auto$bmuxmap.cc:58:execute$1311.
Removed top 24 bits (of 64) from wire b15.$auto$bmuxmap.cc:58:execute$1330.
Removed top 24 bits (of 64) from wire b15.$auto$bmuxmap.cc:58:execute$1349.
Removed top 24 bits (of 64) from wire b15.$auto$bmuxmap.cc:58:execute$1368.
Removed top 24 bits (of 64) from wire b15.$auto$bmuxmap.cc:58:execute$1387.
Removed top 24 bits (of 64) from wire b15.$auto$bmuxmap.cc:58:execute$1406.
Removed top 24 bits (of 64) from wire b15.$auto$bmuxmap.cc:58:execute$1425.
Removed top 24 bits (of 64) from wire b15.$auto$bmuxmap.cc:58:execute$1444.
Removed top 24 bits (of 64) from wire b15.$auto$bmuxmap.cc:58:execute$1463.
Removed top 24 bits (of 64) from wire b15.$auto$bmuxmap.cc:58:execute$1482.
Removed top 24 bits (of 64) from wire b15.$auto$bmuxmap.cc:58:execute$1501.
Removed top 3 bits (of 8) from wire b15.$auto$bmuxmap.cc:58:execute$1520.
Removed top 3 bits (of 8) from wire b15.$auto$bmuxmap.cc:58:execute$1539.
Removed top 3 bits (of 8) from wire b15.$auto$bmuxmap.cc:58:execute$1558.
Removed top 3 bits (of 8) from wire b15.$auto$bmuxmap.cc:58:execute$1577.
Removed top 100 bits (of 264) from wire b15.$auto$bmuxmap.cc:58:execute$1596.
Removed top 23 bits (of 32) from wire b15.$auto$bmuxmap.cc:58:execute$1615.
Removed top 96 bits (of 256) from wire b15.$auto$bmuxmap.cc:58:execute$1634.
Removed top 96 bits (of 256) from wire b15.$auto$bmuxmap.cc:58:execute$1653.
Removed top 8 bits (of 24) from wire b15.$auto$bmuxmap.cc:58:execute$1672.
Removed top 31 bits (of 132) from wire b15.$auto$bmuxmap.cc:58:execute$1812.
Removed top 31 bits (of 66) from wire b15.$auto$bmuxmap.cc:58:execute$1817.
Removed top 31 bits (of 33) from wire b15.$auto$bmuxmap.cc:58:execute$1820.
Removed top 30 bits (of 32) from wire b15.$verific$n1001$168.
Removed top 1 bits (of 31) from wire b15.$verific$n1151$173.
Removed top 1 bits (of 3) from wire b15.$verific$n1294$178.
Removed top 1 bits (of 5) from wire b15.$verific$n2071$211.
Removed top 8 bits (of 16) from wire b15.$verific$n2267$232.
Removed top 1 bits (of 33) from wire b15.$verific$n2793$278.
Removed top 1 bits (of 5) from wire b15.$verific$n3660$305.
Removed top 1 bits (of 33) from wire b15.$verific$n3837$312.
Removed top 1 bits (of 3) from wire b15.$verific$n4619$333.
Removed top 1 bits (of 5) from wire b15.$verific$n4633$335.
Removed top 1 bits (of 4) from wire b15.$verific$n4659$338.
Removed top 1 bits (of 5) from wire b15.$verific$n5590$365.
Removed top 2 bits (of 4) from wire b15.$verific$n5963$376.
Removed top 2 bits (of 4) from wire b15.$verific$n6083$378.
Removed top 1 bits (of 32) from wire b15.$verific$n6129$379.
Removed top 2 bits (of 4) from wire b15.$verific$n6199$381.
Removed top 1 bits (of 5) from wire b15.$verific$n6239$383.
Removed top 1 bits (of 32) from wire b15.$verific$n6315$387.
Removed top 1 bits (of 32) from wire b15.$verific$n8011$431.
Removed top 1 bits (of 4) from wire b15.$verific$n8044$432.
Removed top 1 bits (of 5) from wire b15.$verific$n8254$443.
Removed top 30 bits (of 32) from wire b15.DataWidth.
Removed top 1 bits (of 5) from wire b15.P1.InstQueueRd_Addr.
Removed top 1 bits (of 5) from wire b15.P1.InstQueueWr_Addr.

yosys> peepopt

3.19. Executing PEEPOPT pass (run peephole optimizers).

yosys> opt_clean

3.20. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b15..
Removed 0 unused cells and 81 unused wires.
<suppressed ~1 debug messages>

yosys> bmuxmap

3.21. Executing BMUXMAP pass.

yosys> demuxmap

3.22. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> alumacc

3.23. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module b15:
  creating $macc model for $verific$add_113$b15.vhd:199$592 ($add).
  creating $macc model for $verific$add_210$b15.vhd:308$650 ($add).
  creating $macc model for $verific$add_230$b15.vhd:311$670 ($add).
  creating $macc model for $verific$add_235$b15.vhd:313$674 ($add).
  creating $macc model for $verific$add_254$b15.vhd:314$696 ($add).
  creating $macc model for $verific$add_259$b15.vhd:315$700 ($add).
  creating $macc model for $verific$add_278$b15.vhd:316$721 ($add).
  creating $macc model for $verific$add_28$b15.vhd:127$542 ($add).
  creating $macc model for $verific$add_281$b15.vhd:317$722 ($add).
  creating $macc model for $verific$add_284$b15.vhd:320$724 ($add).
  creating $macc model for $verific$add_360$b15.vhd:346$752 ($add).
  creating $macc model for $verific$add_362$b15.vhd:347$754 ($add).
  creating $macc model for $verific$add_383$b15.vhd:362$763 ($add).
  creating $macc model for $verific$add_387$b15.vhd:362$764 ($add).
  creating $macc model for $verific$add_399$b15.vhd:373$772 ($add).
  creating $macc model for $verific$add_403$b15.vhd:373$773 ($add).
  creating $macc model for $verific$add_422$b15.vhd:393$778 ($add).
  creating $macc model for $verific$add_424$b15.vhd:393$781 ($add).
  creating $macc model for $verific$add_426$b15.vhd:393$784 ($add).
  creating $macc model for $verific$add_427$b15.vhd:393$785 ($add).
  creating $macc model for $verific$add_435$b15.vhd:397$789 ($add).
  creating $macc model for $verific$add_473$b15.vhd:432$801 ($add).
  creating $macc model for $verific$add_669$b15.vhd:548$860 ($add).
  creating $macc model for $verific$add_676$b15.vhd:554$863 ($add).
  creating $macc model for $verific$add_747$b15.vhd:588$924 ($add).
  creating $macc model for $verific$sub_369$b15.vhd:357$756 ($sub).
  creating $macc model for $verific$sub_378$b15.vhd:359$760 ($sub).
  creating $macc model for $verific$sub_379$b15.vhd:359$761 ($sub).
  creating $macc model for $verific$sub_731$b15.vhd:565$908 ($sub).
  creating $macc model for $verific$sub_754$b15.vhd:591$929 ($sub).
  creating $macc model for $verific$unary_minus_287$b15.vhd:322$727 ($neg).
  creating $macc model for $verific$unary_minus_743$b15.vhd:582$918 ($neg).
  creating $alu model for $macc $verific$unary_minus_743$b15.vhd:582$918.
  creating $alu model for $macc $verific$unary_minus_287$b15.vhd:322$727.
  creating $alu model for $macc $verific$sub_754$b15.vhd:591$929.
  creating $alu model for $macc $verific$sub_731$b15.vhd:565$908.
  creating $alu model for $macc $verific$sub_379$b15.vhd:359$761.
  creating $alu model for $macc $verific$sub_378$b15.vhd:359$760.
  creating $alu model for $macc $verific$sub_369$b15.vhd:357$756.
  creating $alu model for $macc $verific$add_747$b15.vhd:588$924.
  creating $alu model for $macc $verific$add_676$b15.vhd:554$863.
  creating $alu model for $macc $verific$add_669$b15.vhd:548$860.
  creating $alu model for $macc $verific$add_473$b15.vhd:432$801.
  creating $alu model for $macc $verific$add_435$b15.vhd:397$789.
  creating $alu model for $macc $verific$add_427$b15.vhd:393$785.
  creating $alu model for $macc $verific$add_426$b15.vhd:393$784.
  creating $alu model for $macc $verific$add_424$b15.vhd:393$781.
  creating $alu model for $macc $verific$add_422$b15.vhd:393$778.
  creating $alu model for $macc $verific$add_403$b15.vhd:373$773.
  creating $alu model for $macc $verific$add_399$b15.vhd:373$772.
  creating $alu model for $macc $verific$add_387$b15.vhd:362$764.
  creating $alu model for $macc $verific$add_383$b15.vhd:362$763.
  creating $alu model for $macc $verific$add_362$b15.vhd:347$754.
  creating $alu model for $macc $verific$add_360$b15.vhd:346$752.
  creating $alu model for $macc $verific$add_284$b15.vhd:320$724.
  creating $alu model for $macc $verific$add_281$b15.vhd:317$722.
  creating $alu model for $macc $verific$add_28$b15.vhd:127$542.
  creating $alu model for $macc $verific$add_278$b15.vhd:316$721.
  creating $alu model for $macc $verific$add_259$b15.vhd:315$700.
  creating $alu model for $macc $verific$add_254$b15.vhd:314$696.
  creating $alu model for $macc $verific$add_235$b15.vhd:313$674.
  creating $alu model for $macc $verific$add_230$b15.vhd:311$670.
  creating $alu model for $macc $verific$add_210$b15.vhd:308$650.
  creating $alu model for $macc $verific$add_113$b15.vhd:199$592.
  creating $alu model for $verific$LessThan_286$b15.vhd:321$726 ($lt): new $alu
  creating $alu model for $verific$LessThan_370$b15.vhd:357$757 ($le): new $alu
  creating $alu model for $verific$LessThan_373$b15.vhd:358$759 ($lt): new $alu
  creating $alu model for $verific$LessThan_397$b15.vhd:372$771 ($le): new $alu
  creating $alu model for $verific$LessThan_462$b15.vhd:414$798 ($le): new $alu
  creating $alu model for $verific$LessThan_729$b15.vhd:565$906 ($lt): new $alu
  creating $alu model for $verific$LessThan_732$b15.vhd:565$909 ($lt): new $alu
  creating $alu model for $verific$LessThan_742$b15.vhd:581$917 ($lt): new $alu
  creating $alu model for $verific$LessThan_755$b15.vhd:591$930 ($lt): new $alu
  creating $alu model for $verific$LessThan_758$b15.vhd:599$932 ($le): new $alu
  creating $alu cell for $verific$LessThan_758$b15.vhd:599$932: $auto$alumacc.cc:485:replace_alu$2743
  creating $alu cell for $verific$LessThan_755$b15.vhd:591$930: $auto$alumacc.cc:485:replace_alu$2752
  creating $alu cell for $verific$LessThan_742$b15.vhd:581$917: $auto$alumacc.cc:485:replace_alu$2757
  creating $alu cell for $verific$LessThan_732$b15.vhd:565$909: $auto$alumacc.cc:485:replace_alu$2762
  creating $alu cell for $verific$LessThan_729$b15.vhd:565$906: $auto$alumacc.cc:485:replace_alu$2767
  creating $alu cell for $verific$LessThan_462$b15.vhd:414$798: $auto$alumacc.cc:485:replace_alu$2778
  creating $alu cell for $verific$LessThan_397$b15.vhd:372$771: $auto$alumacc.cc:485:replace_alu$2791
  creating $alu cell for $verific$LessThan_373$b15.vhd:358$759: $auto$alumacc.cc:485:replace_alu$2804
  creating $alu cell for $verific$LessThan_370$b15.vhd:357$757: $auto$alumacc.cc:485:replace_alu$2809
  creating $alu cell for $verific$LessThan_286$b15.vhd:321$726: $auto$alumacc.cc:485:replace_alu$2822
  creating $alu cell for $verific$add_113$b15.vhd:199$592: $auto$alumacc.cc:485:replace_alu$2827
  creating $alu cell for $verific$add_210$b15.vhd:308$650: $auto$alumacc.cc:485:replace_alu$2830
  creating $alu cell for $verific$add_230$b15.vhd:311$670: $auto$alumacc.cc:485:replace_alu$2833
  creating $alu cell for $verific$add_235$b15.vhd:313$674: $auto$alumacc.cc:485:replace_alu$2836
  creating $alu cell for $verific$add_254$b15.vhd:314$696: $auto$alumacc.cc:485:replace_alu$2839
  creating $alu cell for $verific$add_259$b15.vhd:315$700: $auto$alumacc.cc:485:replace_alu$2842
  creating $alu cell for $verific$add_278$b15.vhd:316$721: $auto$alumacc.cc:485:replace_alu$2845
  creating $alu cell for $verific$add_28$b15.vhd:127$542: $auto$alumacc.cc:485:replace_alu$2848
  creating $alu cell for $verific$add_281$b15.vhd:317$722: $auto$alumacc.cc:485:replace_alu$2851
  creating $alu cell for $verific$add_284$b15.vhd:320$724: $auto$alumacc.cc:485:replace_alu$2854
  creating $alu cell for $verific$add_360$b15.vhd:346$752: $auto$alumacc.cc:485:replace_alu$2857
  creating $alu cell for $verific$add_362$b15.vhd:347$754: $auto$alumacc.cc:485:replace_alu$2860
  creating $alu cell for $verific$add_383$b15.vhd:362$763: $auto$alumacc.cc:485:replace_alu$2863
  creating $alu cell for $verific$add_387$b15.vhd:362$764: $auto$alumacc.cc:485:replace_alu$2866
  creating $alu cell for $verific$add_399$b15.vhd:373$772: $auto$alumacc.cc:485:replace_alu$2869
  creating $alu cell for $verific$add_403$b15.vhd:373$773: $auto$alumacc.cc:485:replace_alu$2872
  creating $alu cell for $verific$add_422$b15.vhd:393$778: $auto$alumacc.cc:485:replace_alu$2875
  creating $alu cell for $verific$add_424$b15.vhd:393$781: $auto$alumacc.cc:485:replace_alu$2878
  creating $alu cell for $verific$add_426$b15.vhd:393$784: $auto$alumacc.cc:485:replace_alu$2881
  creating $alu cell for $verific$add_427$b15.vhd:393$785: $auto$alumacc.cc:485:replace_alu$2884
  creating $alu cell for $verific$add_435$b15.vhd:397$789: $auto$alumacc.cc:485:replace_alu$2887
  creating $alu cell for $verific$add_473$b15.vhd:432$801: $auto$alumacc.cc:485:replace_alu$2890
  creating $alu cell for $verific$add_669$b15.vhd:548$860: $auto$alumacc.cc:485:replace_alu$2893
  creating $alu cell for $verific$add_676$b15.vhd:554$863: $auto$alumacc.cc:485:replace_alu$2896
  creating $alu cell for $verific$add_747$b15.vhd:588$924: $auto$alumacc.cc:485:replace_alu$2899
  creating $alu cell for $verific$sub_369$b15.vhd:357$756: $auto$alumacc.cc:485:replace_alu$2902
  creating $alu cell for $verific$sub_378$b15.vhd:359$760: $auto$alumacc.cc:485:replace_alu$2905
  creating $alu cell for $verific$sub_379$b15.vhd:359$761: $auto$alumacc.cc:485:replace_alu$2908
  creating $alu cell for $verific$sub_731$b15.vhd:565$908: $auto$alumacc.cc:485:replace_alu$2911
  creating $alu cell for $verific$sub_754$b15.vhd:591$929: $auto$alumacc.cc:485:replace_alu$2914
  creating $alu cell for $verific$unary_minus_287$b15.vhd:322$727: $auto$alumacc.cc:485:replace_alu$2917
  creating $alu cell for $verific$unary_minus_743$b15.vhd:582$918: $auto$alumacc.cc:485:replace_alu$2920
  created 42 $alu and 0 $macc cells.

yosys> opt_expr

3.24. Executing OPT_EXPR pass (perform const folding).
Optimizing module b15.
<suppressed ~6 debug messages>

yosys> opt_merge -nomux

3.25. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b15'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.26. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b15..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~91 debug messages>

yosys> opt_reduce

3.27. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b15.
Performed a total of 0 changes.

yosys> opt_merge

3.28. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b15'.
Removed a total of 0 cells.

yosys> opt_share

3.29. Executing OPT_SHARE pass.

yosys> opt_dff

3.30. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $auto$ff.cc:262:slice$1987 ($adffe) from module b15 (D = $auto$bmuxmap.cc:58:execute$1613 [31], Q = \rEIP [31]).

yosys> opt_clean

3.31. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b15..
Removed 4 unused cells and 15 unused wires.
<suppressed ~5 debug messages>

yosys> opt_expr

3.32. Executing OPT_EXPR pass (perform const folding).
Optimizing module b15.

yosys> opt_muxtree

3.33. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b15..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~91 debug messages>

yosys> opt_reduce

3.34. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b15.
    New input vector for $reduce_and cell $auto$opt_dff.cc:220:make_patterns_logic$2935: { $auto$opt_dff.cc:194:make_patterns_logic$1954 $auto$opt_dff.cc:194:make_patterns_logic$1958 $auto$opt_dff.cc:194:make_patterns_logic$2926 $auto$opt_dff.cc:194:make_patterns_logic$2928 $auto$opt_dff.cc:194:make_patterns_logic$2930 $auto$opt_dff.cc:194:make_patterns_logic$2932 $auto$opt_dff.cc:194:make_patterns_logic$2924 $auto$opt_dff.cc:194:make_patterns_logic$1952 $auto$opt_dff.cc:194:make_patterns_logic$1960 $auto$opt_dff.cc:194:make_patterns_logic$1950 }
  Optimizing cells in module \b15.
Performed a total of 1 changes.

yosys> opt_merge

3.35. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b15'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

yosys> opt_share

3.36. Executing OPT_SHARE pass.

yosys> opt_dff

3.37. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.38. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b15..
Removed 1 unused cells and 2 unused wires.
<suppressed ~2 debug messages>

yosys> opt_expr

3.39. Executing OPT_EXPR pass (perform const folding).
Optimizing module b15.

yosys> opt_muxtree

3.40. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b15..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~91 debug messages>

yosys> opt_reduce

3.41. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b15.
Performed a total of 0 changes.

yosys> opt_merge

3.42. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b15'.
Removed a total of 0 cells.

yosys> opt_share

3.43. Executing OPT_SHARE pass.

yosys> opt_dff

3.44. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.45. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b15..

yosys> opt_expr

3.46. Executing OPT_EXPR pass (perform const folding).
Optimizing module b15.
MAX OPT ITERATION = 3

yosys> stat

3.47. Printing statistics.

=== b15 ===

   Number of wires:                795
   Number of wire bits:          10195
   Number of public wires:          50
   Number of public wire bits:     453
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                857
     $adff                           2
     $adffe                         46
     $alu                           42
     $and                           22
     $eq                            22
     $logic_not                      1
     $mux                          526
     $ne                            71
     $not                           20
     $or                            10
     $pmux                          17
     $reduce_and                    44
     $reduce_bool                    4
     $reduce_or                     26
     $shl                            4


yosys> memory -nomap

3.48. Executing MEMORY pass.

yosys> opt_mem

3.48.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

yosys> opt_mem_priority

3.48.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

yosys> opt_mem_feedback

3.48.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

yosys> memory_bmux2rom

3.48.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

yosys> memory_dff

3.48.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

yosys> opt_clean

3.48.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b15..

yosys> memory_share

3.48.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

yosys> opt_mem_widen

3.48.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

yosys> opt_clean

3.48.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b15..

yosys> memory_collect

3.48.10. Executing MEMORY_COLLECT pass (generating $mem cells).

yosys> stat

3.49. Printing statistics.

=== b15 ===

   Number of wires:                795
   Number of wire bits:          10195
   Number of public wires:          50
   Number of public wire bits:     453
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                857
     $adff                           2
     $adffe                         46
     $alu                           42
     $and                           22
     $eq                            22
     $logic_not                      1
     $mux                          526
     $ne                            71
     $not                           20
     $or                            10
     $pmux                          17
     $reduce_and                    44
     $reduce_bool                    4
     $reduce_or                     26
     $shl                            4


yosys> muxpack

3.50. Executing MUXPACK pass ($mux cell cascades to $pmux).
Converted 0 (p)mux cells into 0 pmux cells.
<suppressed ~440 debug messages>

yosys> opt_clean

3.51. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b15..

yosys> pmuxtree

3.52. Executing PMUXTREE pass.

yosys> muxpack

3.53. Executing MUXPACK pass ($mux cell cascades to $pmux).
Converting b15.$auto$pmuxtree.cc:65:recursive_mux_generator$3104 ... b15.$auto$pmuxtree.cc:65:recursive_mux_generator$3106 to a pmux with 2 cases.
Converting b15.$auto$pmuxtree.cc:65:recursive_mux_generator$3078 ... b15.$auto$pmuxtree.cc:65:recursive_mux_generator$3080 to a pmux with 2 cases.
Converting b15.$auto$pmuxtree.cc:65:recursive_mux_generator$2956 ... b15.$auto$pmuxtree.cc:65:recursive_mux_generator$2958 to a pmux with 2 cases.
Converting b15.$auto$pmuxtree.cc:65:recursive_mux_generator$2942 ... b15.$auto$pmuxtree.cc:65:recursive_mux_generator$2944 to a pmux with 2 cases.
Converted 8 (p)mux cells into 4 pmux cells.
<suppressed ~492 debug messages>

yosys> memory_map

3.54. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

yosys> stat

3.55. Printing statistics.

=== b15 ===

   Number of wires:                912
   Number of wire bits:          11207
   Number of public wires:          50
   Number of public wire bits:     453
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                953
     $adff                           2
     $adffe                         46
     $alu                           42
     $and                           22
     $eq                            22
     $logic_not                      1
     $mux                          582
     $ne                            71
     $not                           37
     $or                            26
     $pmux                           4
     $reduce_and                    44
     $reduce_bool                    4
     $reduce_or                     46
     $shl                            4


yosys> techmap -map +/techmap.v -map +/rapidsilicon/genesis/arith_map.v

3.56. Executing TECHMAP pass (map to technology primitives).

3.56.1. Executing Verilog-2005 frontend: /home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.56.2. Executing Verilog-2005 frontend: /home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/arith_map.v
Parsing Verilog input from `/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_rs_alu'.
Successfully finished Verilog frontend.

3.56.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $reduce_bool.
Using template $paramod$740b056ede97228d3eae64ea2fdc81f0a33e0fe7\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $adffe.
Using extmapper simplemap for cells of type $and.
Using template $paramod$44a13d10af618e7fbe7b9aad2f6151ffcee1e2fa\_90_alu for cells of type $alu.
Using template $paramod$32a7b7b86c07519b7537abc18e96f0331f97914d\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $adff.
Using template $paramod$constmap:0c58e37f7f9ab9c08bb604a660a738f4cdfdf6a8$paramod$0c53878c2ab6a84f047b5c15f705bf752551700e\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using template $paramod$c3cd1564c35d873179656addd6052d7ea8b6d991\_90_alu for cells of type $alu.
Using template $paramod$354e377aaa263356a1a43d04ca847f8b92483a2a\_80_rs_alu for cells of type $alu.
Using template $paramod$788c3d57e5abb3a3f89aea6d4acd665be37f4e9b\_90_alu for cells of type $alu.
Using template $paramod$6a42b6fefed750f8a1c58eab59479d960557103c\_90_alu for cells of type $alu.
Using template $paramod$d1615bf4e5e328245ffd1550e5fe105901cda77b\_90_alu for cells of type $alu.
Using template $paramod$943564b9366bbc392bf4bbc801aa0a2d7742a4e0\_90_alu for cells of type $alu.
Using template $paramod$4ccbe221165818e15f326ddee3d1183c7924e12f\_90_alu for cells of type $alu.
Using template $paramod$e891e6b399cf52748460a311fafe476815d24bd7\_90_alu for cells of type $alu.
Using template $paramod$b85fbb3374a1d9ba7ee4f4d6323c30f939df3ada\_90_alu for cells of type $alu.
Using template $paramod$e04283ca12514baf3d204c6994bec8f178dd89f8\_90_alu for cells of type $alu.
Using template $paramod$79fc87901d7fd8aaad689b5406671422f5fa25b9\_80_rs_alu for cells of type $alu.
Using template $paramod$653d0dc5a667330298513325d0bd1def0e6c1128\_90_alu for cells of type $alu.
Using template $paramod$2c4d537db249d5ee7774cabca037a7502075cb7a\_80_rs_alu for cells of type $alu.
Using template $paramod$076c9a7a3f037230073fe14dd4865d470cb48917\_90_alu for cells of type $alu.
Using template $paramod$dfca81329cbbac01700318224209a5f2318c7128\_90_alu for cells of type $alu.
Using template $paramod$175e67c02b86e96b1288b9dc100122520d7240d8\_90_alu for cells of type $alu.
Using template $paramod$f85408ed1aa3d09e465edae8a7bf590332ae9f7b\_90_alu for cells of type $alu.
Using template $paramod$bfceb922395790c0ce92e9f9b5b428d4fc72cc30\_90_alu for cells of type $alu.
Using template $paramod$1a3a0c35c4a4896fbfd612699525c057298e72d2\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $eq.
Using template $paramod$b3c20b05d9b1fc2c940ef2f6c917486aead042e8\_90_alu for cells of type $alu.
Using template $paramod$83dd457849c736323edf2edb15923eb27f99c683\_90_alu for cells of type $alu.
Using template $paramod$63a3f1ffa662be02d3403b533885c56d18ebe02a\_80_rs_alu for cells of type $alu.
Using extmapper simplemap for cells of type $logic_not.
Using template $paramod$c5c783b17ab1d780abfad8cfe6563a0a7b47a3b0\_90_pmux for cells of type $pmux.
Using template $paramod$8fabc56b80a569262acfc42757a02ca0b8e91278\_90_pmux for cells of type $pmux.
Using template $paramod$f08cf4b531f7b2bd95251b79857dfb970a6679fc\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000100 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011110 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001000 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011111 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000100000 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000010 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000101 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001001 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000110 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000011 for cells of type $lcu.
No more expansions possible.
<suppressed ~6676 debug messages>

yosys> stat

3.57. Printing statistics.

=== b15 ===

   Number of wires:               4125
   Number of wire bits:          73506
   Number of public wires:          50
   Number of public wire bits:     453
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:              13320
     $_AND_                       1872
     $_DFFE_PP0P_                  407
     $_DFF_PP0_                      7
     $_MUX_                       6935
     $_NOT_                        704
     $_OR_                        1543
     $_XOR_                       1664
     adder_carry                   188


yosys> opt_expr

3.58. Executing OPT_EXPR pass (perform const folding).
Optimizing module b15.
<suppressed ~4063 debug messages>

yosys> opt_merge -nomux

3.59. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b15'.
<suppressed ~4713 debug messages>
Removed a total of 1571 cells.

yosys> opt_muxtree

3.60. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b15..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.61. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b15.
Performed a total of 0 changes.

yosys> opt_merge

3.62. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b15'.
Removed a total of 0 cells.

yosys> opt_share

3.63. Executing OPT_SHARE pass.

yosys> opt_dff

3.64. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $auto$ff.cc:262:slice$7592 ($_DFFE_PP0P_) from module b15 (D = $auto$bmuxmap.cc:58:execute$1651 [0], Q = \P1.InstAddrPointer [0]).

yosys> opt_clean

3.65. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b15..
Removed 498 unused cells and 3069 unused wires.
<suppressed ~499 debug messages>

yosys> opt_expr

3.66. Executing OPT_EXPR pass (perform const folding).
Optimizing module b15.
<suppressed ~168 debug messages>

yosys> opt_muxtree

3.67. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b15..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.68. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b15.
Performed a total of 0 changes.

yosys> opt_merge

3.69. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b15'.
<suppressed ~39 debug messages>
Removed a total of 13 cells.

yosys> opt_share

3.70. Executing OPT_SHARE pass.

yosys> opt_dff

3.71. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $auto$ff.cc:262:slice$7468 ($_DFF_PP0_) from module b15 (D = $auto$bmuxmap.cc:58:execute$1632 [0], Q = \P1.State2 [0]).

yosys> opt_clean

3.72. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b15..
Removed 1 unused cells and 36 unused wires.
<suppressed ~2 debug messages>

yosys> opt_expr

3.73. Executing OPT_EXPR pass (perform const folding).
Optimizing module b15.
<suppressed ~5 debug messages>

yosys> opt_muxtree

3.74. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b15..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.75. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b15.
Performed a total of 0 changes.

yosys> opt_merge

3.76. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b15'.
<suppressed ~9 debug messages>
Removed a total of 3 cells.

yosys> opt_share

3.77. Executing OPT_SHARE pass.

yosys> opt_dff

3.78. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.79. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b15..
Removed 0 unused cells and 4 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.80. Executing OPT_EXPR pass (perform const folding).
Optimizing module b15.

yosys> opt_muxtree

3.81. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b15..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.82. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b15.
Performed a total of 0 changes.

yosys> opt_merge

3.83. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b15'.
Removed a total of 0 cells.

yosys> opt_share

3.84. Executing OPT_SHARE pass.

yosys> opt_dff

3.85. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.86. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b15..

yosys> opt_expr

3.87. Executing OPT_EXPR pass (perform const folding).
Optimizing module b15.
MAX OPT ITERATION = 4

yosys> opt -fast -full

3.88. Executing OPT pass (performing simple optimizations).

yosys> opt_expr -full

3.88.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b15.
<suppressed ~3031 debug messages>

yosys> opt_merge

3.88.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b15'.
<suppressed ~36 debug messages>
Removed a total of 12 cells.

yosys> opt_dff

3.88.3. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $auto$ff.cc:262:slice$12459 ($_DFFE_PP0P_) from module b15 (D = $auto$bmuxmap.cc:58:execute$1214 [0], Q = \P1.InstQueueWr_Addr [0]).

yosys> opt_clean

3.88.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b15..
Removed 0 unused cells and 157 unused wires.
<suppressed ~1 debug messages>

3.88.5. Rerunning OPT passes. (Removed registers in this run.)

yosys> opt_expr -full

3.88.6. Executing OPT_EXPR pass (perform const folding).
Optimizing module b15.
<suppressed ~26 debug messages>

yosys> opt_merge

3.88.7. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b15'.
<suppressed ~12 debug messages>
Removed a total of 4 cells.

yosys> opt_dff

3.88.8. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $auto$ff.cc:262:slice$11811 ($_DFFE_PP0P_) from module b15 (D = $auto$bmuxmap.cc:58:execute$1648 [31], Q = \P1.InstAddrPointer [31]).
Adding EN signal on $auto$ff.cc:262:slice$11810 ($_DFFE_PP0P_) from module b15 (D = $auto$bmuxmap.cc:58:execute$1648 [30], Q = \P1.InstAddrPointer [30]).
Adding EN signal on $auto$ff.cc:262:slice$11809 ($_DFFE_PP0P_) from module b15 (D = $auto$bmuxmap.cc:58:execute$1648 [29], Q = \P1.InstAddrPointer [29]).
Adding EN signal on $auto$ff.cc:262:slice$11808 ($_DFFE_PP0P_) from module b15 (D = $auto$bmuxmap.cc:58:execute$1648 [28], Q = \P1.InstAddrPointer [28]).
Adding EN signal on $auto$ff.cc:262:slice$11807 ($_DFFE_PP0P_) from module b15 (D = $auto$bmuxmap.cc:58:execute$1648 [27], Q = \P1.InstAddrPointer [27]).
Adding EN signal on $auto$ff.cc:262:slice$11806 ($_DFFE_PP0P_) from module b15 (D = $auto$bmuxmap.cc:58:execute$1648 [26], Q = \P1.InstAddrPointer [26]).
Adding EN signal on $auto$ff.cc:262:slice$11805 ($_DFFE_PP0P_) from module b15 (D = $auto$bmuxmap.cc:58:execute$1648 [25], Q = \P1.InstAddrPointer [25]).
Adding EN signal on $auto$ff.cc:262:slice$11804 ($_DFFE_PP0P_) from module b15 (D = $auto$bmuxmap.cc:58:execute$1648 [24], Q = \P1.InstAddrPointer [24]).
Adding EN signal on $auto$ff.cc:262:slice$11803 ($_DFFE_PP0P_) from module b15 (D = $auto$bmuxmap.cc:58:execute$1648 [23], Q = \P1.InstAddrPointer [23]).
Adding EN signal on $auto$ff.cc:262:slice$11802 ($_DFFE_PP0P_) from module b15 (D = $auto$bmuxmap.cc:58:execute$1648 [22], Q = \P1.InstAddrPointer [22]).
Adding EN signal on $auto$ff.cc:262:slice$11801 ($_DFFE_PP0P_) from module b15 (D = $auto$bmuxmap.cc:58:execute$1648 [21], Q = \P1.InstAddrPointer [21]).
Adding EN signal on $auto$ff.cc:262:slice$11800 ($_DFFE_PP0P_) from module b15 (D = $auto$bmuxmap.cc:58:execute$1648 [20], Q = \P1.InstAddrPointer [20]).
Adding EN signal on $auto$ff.cc:262:slice$11799 ($_DFFE_PP0P_) from module b15 (D = $auto$bmuxmap.cc:58:execute$1648 [19], Q = \P1.InstAddrPointer [19]).
Adding EN signal on $auto$ff.cc:262:slice$11798 ($_DFFE_PP0P_) from module b15 (D = $auto$bmuxmap.cc:58:execute$1648 [18], Q = \P1.InstAddrPointer [18]).
Adding EN signal on $auto$ff.cc:262:slice$11797 ($_DFFE_PP0P_) from module b15 (D = $auto$bmuxmap.cc:58:execute$1648 [17], Q = \P1.InstAddrPointer [17]).
Adding EN signal on $auto$ff.cc:262:slice$11796 ($_DFFE_PP0P_) from module b15 (D = $auto$bmuxmap.cc:58:execute$1648 [16], Q = \P1.InstAddrPointer [16]).
Adding EN signal on $auto$ff.cc:262:slice$11795 ($_DFFE_PP0P_) from module b15 (D = $auto$bmuxmap.cc:58:execute$1648 [15], Q = \P1.InstAddrPointer [15]).
Adding EN signal on $auto$ff.cc:262:slice$11794 ($_DFFE_PP0P_) from module b15 (D = $auto$bmuxmap.cc:58:execute$1648 [14], Q = \P1.InstAddrPointer [14]).
Adding EN signal on $auto$ff.cc:262:slice$11793 ($_DFFE_PP0P_) from module b15 (D = $auto$bmuxmap.cc:58:execute$1648 [13], Q = \P1.InstAddrPointer [13]).
Adding EN signal on $auto$ff.cc:262:slice$11792 ($_DFFE_PP0P_) from module b15 (D = $auto$bmuxmap.cc:58:execute$1648 [12], Q = \P1.InstAddrPointer [12]).
Adding EN signal on $auto$ff.cc:262:slice$11791 ($_DFFE_PP0P_) from module b15 (D = $auto$bmuxmap.cc:58:execute$1648 [11], Q = \P1.InstAddrPointer [11]).
Adding EN signal on $auto$ff.cc:262:slice$11790 ($_DFFE_PP0P_) from module b15 (D = $auto$bmuxmap.cc:58:execute$1648 [10], Q = \P1.InstAddrPointer [10]).
Adding EN signal on $auto$ff.cc:262:slice$11789 ($_DFFE_PP0P_) from module b15 (D = $auto$bmuxmap.cc:58:execute$1648 [9], Q = \P1.InstAddrPointer [9]).
Adding EN signal on $auto$ff.cc:262:slice$11788 ($_DFFE_PP0P_) from module b15 (D = $auto$bmuxmap.cc:58:execute$1648 [8], Q = \P1.InstAddrPointer [8]).
Adding EN signal on $auto$ff.cc:262:slice$11787 ($_DFFE_PP0P_) from module b15 (D = $auto$bmuxmap.cc:58:execute$1648 [7], Q = \P1.InstAddrPointer [7]).
Adding EN signal on $auto$ff.cc:262:slice$11786 ($_DFFE_PP0P_) from module b15 (D = $auto$bmuxmap.cc:58:execute$1648 [6], Q = \P1.InstAddrPointer [6]).
Adding EN signal on $auto$ff.cc:262:slice$11785 ($_DFFE_PP0P_) from module b15 (D = $auto$bmuxmap.cc:58:execute$1648 [5], Q = \P1.InstAddrPointer [5]).
Adding EN signal on $auto$ff.cc:262:slice$11784 ($_DFFE_PP0P_) from module b15 (D = $auto$bmuxmap.cc:58:execute$1648 [4], Q = \P1.InstAddrPointer [4]).
Adding EN signal on $auto$ff.cc:262:slice$11783 ($_DFFE_PP0P_) from module b15 (D = $auto$bmuxmap.cc:58:execute$1648 [3], Q = \P1.InstAddrPointer [3]).
Adding EN signal on $auto$ff.cc:262:slice$11782 ($_DFFE_PP0P_) from module b15 (D = $auto$bmuxmap.cc:58:execute$1648 [2], Q = \P1.InstAddrPointer [2]).
Adding EN signal on $auto$ff.cc:262:slice$11781 ($_DFFE_PP0P_) from module b15 (D = $auto$bmuxmap.cc:58:execute$1648 [1], Q = \P1.InstAddrPointer [1]).

yosys> opt_clean

3.88.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b15..
Removed 0 unused cells and 67 unused wires.
<suppressed ~1 debug messages>

3.88.10. Rerunning OPT passes. (Removed registers in this run.)

yosys> opt_expr -full

3.88.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module b15.
<suppressed ~155 debug messages>

yosys> opt_merge

3.88.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b15'.
<suppressed ~639 debug messages>
Removed a total of 213 cells.

yosys> opt_dff

3.88.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.88.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b15..
Removed 0 unused cells and 215 unused wires.
<suppressed ~1 debug messages>

3.88.15. Finished fast OPT passes.

yosys> techmap -map +/techmap.v

3.89. Executing TECHMAP pass (map to technology primitives).

3.89.1. Executing Verilog-2005 frontend: /home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.89.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~71 debug messages>

yosys> opt -sat

3.90. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.90.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b15.

yosys> opt_merge -nomux

3.90.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b15'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.90.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b15..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.90.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b15.
Performed a total of 0 changes.

yosys> opt_merge

3.90.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b15'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.90.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.90.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b15..

yosys> opt_expr

3.90.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module b15.

3.90.9. Finished OPT passes. (There is nothing left to do.)

yosys> abc -dff

3.91. Executing ABC pass (technology mapping using ABC).

3.91.1. Summary of detected clock domains:
  34 cells in clk=\CLOCK, en=$auto$opt_dff.cc:219:make_patterns_logic$2934, arst=\RESET, srst={ }
  14 cells in clk=\CLOCK, en=$auto$opt_dff.cc:219:make_patterns_logic$2049, arst=\RESET, srst={ }
  7 cells in clk=\CLOCK, en=$auto$opt_dff.cc:219:make_patterns_logic$2004, arst=\RESET, srst={ }
  428 cells in clk=\CLOCK, en=$auto$opt_dff.cc:219:make_patterns_logic$2568, arst=\RESET, srst={ }
  59 cells in clk=\CLOCK, en=$auto$opt_dff.cc:219:make_patterns_logic$2589, arst=\RESET, srst={ }
  21 cells in clk=\CLOCK, en=$auto$opt_dff.cc:194:make_patterns_logic$2640, arst=\RESET, srst={ }
  90 cells in clk=\CLOCK, en=$auto$opt_dff.cc:219:make_patterns_logic$2068, arst=\RESET, srst={ }
  128 cells in clk=\CLOCK, en=$auto$opt_dff.cc:219:make_patterns_logic$2110, arst=\RESET, srst={ }
  12 cells in clk=\CLOCK, en=$auto$opt_dff.cc:219:make_patterns_logic$2525, arst=\RESET, srst={ }
  45 cells in clk=\CLOCK, en=$auto$opt_dff.cc:219:make_patterns_logic$2168, arst=\RESET, srst={ }
  50 cells in clk=\CLOCK, en=$auto$opt_dff.cc:219:make_patterns_logic$2151, arst=\RESET, srst={ }
  45 cells in clk=\CLOCK, en=$auto$opt_dff.cc:219:make_patterns_logic$2321, arst=\RESET, srst={ }
  29 cells in clk=\CLOCK, en=$auto$opt_dff.cc:219:make_patterns_logic$2338, arst=\RESET, srst={ }
  45 cells in clk=\CLOCK, en=$auto$opt_dff.cc:219:make_patterns_logic$2355, arst=\RESET, srst={ }
  29 cells in clk=\CLOCK, en=$auto$opt_dff.cc:219:make_patterns_logic$2372, arst=\RESET, srst={ }
  45 cells in clk=\CLOCK, en=$auto$opt_dff.cc:219:make_patterns_logic$2389, arst=\RESET, srst={ }
  29 cells in clk=\CLOCK, en=$auto$opt_dff.cc:219:make_patterns_logic$2406, arst=\RESET, srst={ }
  65 cells in clk=\CLOCK, en=$auto$opt_dff.cc:219:make_patterns_logic$2423, arst=\RESET, srst={ }
  29 cells in clk=\CLOCK, en=$auto$opt_dff.cc:219:make_patterns_logic$2185, arst=\RESET, srst={ }
  45 cells in clk=\CLOCK, en=$auto$opt_dff.cc:219:make_patterns_logic$2202, arst=\RESET, srst={ }
  29 cells in clk=\CLOCK, en=$auto$opt_dff.cc:219:make_patterns_logic$2219, arst=\RESET, srst={ }
  45 cells in clk=\CLOCK, en=$auto$opt_dff.cc:219:make_patterns_logic$2236, arst=\RESET, srst={ }
  29 cells in clk=\CLOCK, en=$auto$opt_dff.cc:219:make_patterns_logic$2253, arst=\RESET, srst={ }
  45 cells in clk=\CLOCK, en=$auto$opt_dff.cc:219:make_patterns_logic$2270, arst=\RESET, srst={ }
  29 cells in clk=\CLOCK, en=$auto$opt_dff.cc:219:make_patterns_logic$2287, arst=\RESET, srst={ }
  29 cells in clk=\CLOCK, en=$auto$opt_dff.cc:219:make_patterns_logic$2304, arst=\RESET, srst={ }
  192 cells in clk=\CLOCK, en=$auto$opt_dff.cc:219:make_patterns_logic$1985, arst=\RESET, srst={ }
  249 cells in clk=\CLOCK, en=$auto$opt_dff.cc:219:make_patterns_logic$2451, arst=\RESET, srst={ }
  4 cells in clk=\CLOCK, en=$auto$opt_dff.cc:219:make_patterns_logic$2620, arst=\RESET, srst={ }
  29 cells in clk=\CLOCK, en=$auto$opt_dff.cc:219:make_patterns_logic$2032, arst=\RESET, srst={ }
  956 cells in clk=\CLOCK, en={ }, arst=\RESET, srst={ }
  391 cells in clk=\CLOCK, en=$auto$opt_dff.cc:219:make_patterns_logic$2545, arst=\RESET, srst={ }
  12 cells in clk=\CLOCK, en=$auto$opt_dff.cc:219:make_patterns_logic$2637, arst=\RESET, srst={ }
  709 cells in clk=\CLOCK, en=$auto$opt_dff.cc:219:make_patterns_logic$2015, arst=\RESET, srst={ }
  3 cells in clk=\CLOCK, en=$auto$opt_dff.cc:194:make_patterns_logic$2650, arst=\RESET, srst={ }
  33 cells in clk=\CLOCK, en=$auto$opt_dff.cc:219:make_patterns_logic$2656, arst=\RESET, srst={ }
  196 cells in clk=\CLOCK, en=$auto$opt_dff.cc:219:make_patterns_logic$2146, arst=\RESET, srst={ }
  14 cells in clk=\CLOCK, en=$auto$opt_dff.cc:219:make_patterns_logic$2129, arst=\RESET, srst={ }
  389 cells in clk=\CLOCK, en=$auto$opt_dff.cc:219:make_patterns_logic$19293, arst=\RESET, srst={ }
  20 cells in clk=\CLOCK, en=$auto$opt_dff.cc:219:make_patterns_logic$19270, arst=\RESET, srst={ }
  435 cells in clk=\CLOCK, en=$auto$opt_dff.cc:194:make_patterns_logic$19234, arst=\RESET, srst={ }
  36 cells in clk=\CLOCK, en=$auto$opt_dff.cc:219:make_patterns_logic$19207, arst=\RESET, srst={ }
  54 cells in clk=\CLOCK, en=$auto$opt_dff.cc:219:make_patterns_logic$2440, arst=\RESET, srst={ }
  15 cells in clk=\CLOCK, en=$auto$opt_dff.cc:219:make_patterns_logic$1962, arst=\RESET, srst={ }

3.91.2. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2934, asynchronously reset by \RESET
Extracted 34 gates and 70 wires to a netlist network with 36 inputs and 13 outputs.

3.91.2.1. Executing ABC.

3.91.3. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2049, asynchronously reset by \RESET
Extracted 14 gates and 29 wires to a netlist network with 14 inputs and 6 outputs.

3.91.3.1. Executing ABC.

3.91.4. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2004, asynchronously reset by \RESET
Extracted 7 gates and 15 wires to a netlist network with 8 inputs and 7 outputs.

3.91.4.1. Executing ABC.

3.91.5. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2568, asynchronously reset by \RESET
Extracted 428 gates and 538 wires to a netlist network with 109 inputs and 104 outputs.

3.91.5.1. Executing ABC.

3.91.6. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2589, asynchronously reset by \RESET
Extracted 59 gates and 118 wires to a netlist network with 59 inputs and 33 outputs.

3.91.6.1. Executing ABC.

3.91.7. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $auto$opt_dff.cc:194:make_patterns_logic$2640, asynchronously reset by \RESET
Extracted 21 gates and 33 wires to a netlist network with 11 inputs and 5 outputs.

3.91.7.1. Executing ABC.

3.91.8. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2068, asynchronously reset by \RESET
Extracted 90 gates and 168 wires to a netlist network with 77 inputs and 36 outputs.

3.91.8.1. Executing ABC.

3.91.9. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2110, asynchronously reset by \RESET
Extracted 122 gates and 212 wires to a netlist network with 89 inputs and 16 outputs.

3.91.9.1. Executing ABC.

3.91.10. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2525, asynchronously reset by \RESET
Extracted 12 gates and 22 wires to a netlist network with 9 inputs and 4 outputs.

3.91.10.1. Executing ABC.

3.91.11. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2168, asynchronously reset by \RESET
Extracted 45 gates and 85 wires to a netlist network with 40 inputs and 25 outputs.

3.91.11.1. Executing ABC.

3.91.12. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2151, asynchronously reset by \RESET
Extracted 50 gates and 82 wires to a netlist network with 30 inputs and 16 outputs.

3.91.12.1. Executing ABC.

3.91.13. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2321, asynchronously reset by \RESET
Extracted 45 gates and 85 wires to a netlist network with 40 inputs and 25 outputs.

3.91.13.1. Executing ABC.

3.91.14. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2338, asynchronously reset by \RESET
Extracted 29 gates and 60 wires to a netlist network with 31 inputs and 17 outputs.

3.91.14.1. Executing ABC.

3.91.15. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2355, asynchronously reset by \RESET
Extracted 45 gates and 85 wires to a netlist network with 40 inputs and 25 outputs.

3.91.15.1. Executing ABC.

3.91.16. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2372, asynchronously reset by \RESET
Extracted 29 gates and 60 wires to a netlist network with 31 inputs and 17 outputs.

3.91.16.1. Executing ABC.

3.91.17. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2389, asynchronously reset by \RESET
Extracted 45 gates and 85 wires to a netlist network with 40 inputs and 25 outputs.

3.91.17.1. Executing ABC.

3.91.18. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2406, asynchronously reset by \RESET
Extracted 29 gates and 60 wires to a netlist network with 31 inputs and 17 outputs.

3.91.18.1. Executing ABC.

3.91.19. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2423, asynchronously reset by \RESET
Extracted 65 gates and 107 wires to a netlist network with 41 inputs and 43 outputs.

3.91.19.1. Executing ABC.

3.91.20. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2185, asynchronously reset by \RESET
Extracted 29 gates and 60 wires to a netlist network with 31 inputs and 17 outputs.

3.91.20.1. Executing ABC.

3.91.21. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2202, asynchronously reset by \RESET
Extracted 45 gates and 85 wires to a netlist network with 40 inputs and 25 outputs.

3.91.21.1. Executing ABC.

3.91.22. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2219, asynchronously reset by \RESET
Extracted 29 gates and 60 wires to a netlist network with 31 inputs and 17 outputs.

3.91.22.1. Executing ABC.

3.91.23. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2236, asynchronously reset by \RESET
Extracted 45 gates and 85 wires to a netlist network with 40 inputs and 25 outputs.

3.91.23.1. Executing ABC.

3.91.24. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2253, asynchronously reset by \RESET
Extracted 29 gates and 60 wires to a netlist network with 31 inputs and 17 outputs.

3.91.24.1. Executing ABC.

3.91.25. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2270, asynchronously reset by \RESET
Extracted 45 gates and 85 wires to a netlist network with 40 inputs and 25 outputs.

3.91.25.1. Executing ABC.

3.91.26. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2287, asynchronously reset by \RESET
Extracted 29 gates and 60 wires to a netlist network with 31 inputs and 17 outputs.

3.91.26.1. Executing ABC.

3.91.27. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2304, asynchronously reset by \RESET
Extracted 29 gates and 60 wires to a netlist network with 31 inputs and 17 outputs.

3.91.27.1. Executing ABC.

3.91.28. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $auto$opt_dff.cc:219:make_patterns_logic$1985, asynchronously reset by \RESET
Extracted 136 gates and 188 wires to a netlist network with 50 inputs and 77 outputs.

3.91.28.1. Executing ABC.

3.91.29. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2451, asynchronously reset by \RESET
Extracted 249 gates and 357 wires to a netlist network with 108 inputs and 121 outputs.

3.91.29.1. Executing ABC.

3.91.30. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2620, asynchronously reset by \RESET
Extracted 4 gates and 10 wires to a netlist network with 6 inputs and 3 outputs.

3.91.30.1. Executing ABC.

3.91.31. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2032, asynchronously reset by \RESET
Extracted 29 gates and 48 wires to a netlist network with 18 inputs and 17 outputs.

3.91.31.1. Executing ABC.

3.91.32. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, asynchronously reset by \RESET
Extracted 923 gates and 1738 wires to a netlist network with 813 inputs and 350 outputs.

3.91.32.1. Executing ABC.

3.91.33. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2545, asynchronously reset by \RESET
Extracted 391 gates and 574 wires to a netlist network with 182 inputs and 91 outputs.

3.91.33.1. Executing ABC.

3.91.34. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2637, asynchronously reset by \RESET
Extracted 12 gates and 23 wires to a netlist network with 11 inputs and 3 outputs.

3.91.34.1. Executing ABC.

3.91.35. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2015, asynchronously reset by \RESET
Extracted 709 gates and 955 wires to a netlist network with 245 inputs and 305 outputs.

3.91.35.1. Executing ABC.

3.91.36. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $auto$opt_dff.cc:194:make_patterns_logic$2650, asynchronously reset by \RESET
Extracted 3 gates and 7 wires to a netlist network with 4 inputs and 3 outputs.

3.91.36.1. Executing ABC.

3.91.37. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2656, asynchronously reset by \RESET
Extracted 33 gates and 67 wires to a netlist network with 34 inputs and 31 outputs.

3.91.37.1. Executing ABC.

3.91.38. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2146, asynchronously reset by \RESET
Extracted 196 gates and 234 wires to a netlist network with 38 inputs and 93 outputs.

3.91.38.1. Executing ABC.

3.91.39. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2129, asynchronously reset by \RESET
Extracted 11 gates and 21 wires to a netlist network with 10 inputs and 5 outputs.

3.91.39.1. Executing ABC.

3.91.40. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $auto$opt_dff.cc:219:make_patterns_logic$19293, asynchronously reset by \RESET
Extracted 389 gates and 439 wires to a netlist network with 50 inputs and 96 outputs.

3.91.40.1. Executing ABC.

3.91.41. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $auto$opt_dff.cc:219:make_patterns_logic$19270, asynchronously reset by \RESET
Extracted 20 gates and 28 wires to a netlist network with 7 inputs and 17 outputs.

3.91.41.1. Executing ABC.

3.91.42. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $auto$opt_dff.cc:194:make_patterns_logic$19234, asynchronously reset by \RESET
Extracted 345 gates and 627 wires to a netlist network with 280 inputs and 138 outputs.

3.91.42.1. Executing ABC.

3.91.43. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $auto$opt_dff.cc:219:make_patterns_logic$19207, asynchronously reset by \RESET
Extracted 36 gates and 68 wires to a netlist network with 31 inputs and 10 outputs.

3.91.43.1. Executing ABC.

3.91.44. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2440, asynchronously reset by \RESET
Extracted 54 gates and 75 wires to a netlist network with 20 inputs and 36 outputs.

3.91.44.1. Executing ABC.

3.91.45. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $auto$opt_dff.cc:219:make_patterns_logic$1962, asynchronously reset by \RESET
Extracted 15 gates and 30 wires to a netlist network with 15 inputs and 5 outputs.

3.91.45.1. Executing ABC.

yosys> abc -dff

3.92. Executing ABC pass (technology mapping using ABC).

3.92.1. Summary of detected clock domains:
  35 cells in clk=\CLOCK, en=$abc$21655$auto$opt_dff.cc:219:make_patterns_logic$2270, arst=\RESET, srst={ }
  23 cells in clk=\CLOCK, en=$abc$21701$auto$opt_dff.cc:219:make_patterns_logic$2287, arst=\RESET, srst={ }
  3 cells in clk=\CLOCK, en=$abc$22219$auto$opt_dff.cc:219:make_patterns_logic$2620, arst=\RESET, srst={ }
  23 cells in clk=\CLOCK, en=$abc$25538$auto$opt_dff.cc:219:make_patterns_logic$19270, arst=\RESET, srst={ }
  22 cells in clk=\CLOCK, en=$abc$20758$auto$opt_dff.cc:194:make_patterns_logic$2640, arst=\RESET, srst={ }
  116 cells in clk=\CLOCK, en=$abc$20919$auto$opt_dff.cc:219:make_patterns_logic$2110, arst=\RESET, srst={ }
  11 cells in clk=\CLOCK, en=$abc$21026$auto$opt_dff.cc:219:make_patterns_logic$2525, arst=\RESET, srst={ }
  38 cells in clk=\CLOCK, en=$abc$21085$auto$opt_dff.cc:219:make_patterns_logic$2151, arst=\RESET, srst={ }
  33 cells in clk=\CLOCK, en=$abc$21039$auto$opt_dff.cc:219:make_patterns_logic$2168, arst=\RESET, srst={ }
  29 cells in clk=\CLOCK, en=$abc$25221$auto$opt_dff.cc:219:make_patterns_logic$2129, arst=\RESET, srst={ }
  340 cells in clk=\CLOCK, en=$abc$25559$auto$opt_dff.cc:194:make_patterns_logic$19234, arst=\RESET, srst={ }
  42 cells in clk=\CLOCK, en=$abc$25879$auto$opt_dff.cc:219:make_patterns_logic$19207, arst=\RESET, srst={ }
  21 cells in clk=\CLOCK, en=$abc$20130$auto$opt_dff.cc:219:make_patterns_logic$2934, arst=\RESET, srst={ }
  37 cells in clk=\CLOCK, en=$abc$21129$auto$opt_dff.cc:219:make_patterns_logic$2321, arst=\RESET, srst={ }
  22 cells in clk=\CLOCK, en=$abc$22225$auto$opt_dff.cc:219:make_patterns_logic$2032, arst=\RESET, srst={ }
  14 cells in clk=\CLOCK, en=$abc$23802$auto$opt_dff.cc:219:make_patterns_logic$2637, arst=\RESET, srst={ }
  4 cells in clk=\CLOCK, en=$abc$24898$auto$opt_dff.cc:194:make_patterns_logic$2650, arst=\RESET, srst={ }
  64 cells in clk=\CLOCK, en=$abc$24904$auto$opt_dff.cc:219:make_patterns_logic$2656, arst=\RESET, srst={ }
  1008 cells in clk=\CLOCK, en={ }, arst=\RESET, srst={ }
  370 cells in clk=\CLOCK, en=$abc$23443$auto$opt_dff.cc:219:make_patterns_logic$2545, arst=\RESET, srst={ }
  11 cells in clk=\CLOCK, en=$abc$20168$auto$opt_dff.cc:219:make_patterns_logic$2049, arst=\RESET, srst={ }
  6 cells in clk=\CLOCK, en=$abc$20183$auto$opt_dff.cc:219:make_patterns_logic$2004, arst=\RESET, srst={ }
  463 cells in clk=\CLOCK, en=$abc$20203$auto$opt_dff.cc:219:make_patterns_logic$2568, arst=\RESET, srst={ }
  39 cells in clk=\CLOCK, en=$abc$21297$auto$opt_dff.cc:219:make_patterns_logic$2389, arst=\RESET, srst={ }
  36 cells in clk=\CLOCK, en=$abc$21213$auto$opt_dff.cc:219:make_patterns_logic$2355, arst=\RESET, srst={ }
  101 cells in clk=\CLOCK, en=$abc$25913$auto$opt_dff.cc:219:make_patterns_logic$2440, arst=\RESET, srst={ }
  400 cells in clk=\CLOCK, en=$abc$25234$auto$opt_dff.cc:219:make_patterns_logic$19293, arst=\RESET, srst={ }
  178 cells in clk=\CLOCK, en=$abc$21954$auto$opt_dff.cc:219:make_patterns_logic$2451, arst=\RESET, srst={ }
  27 cells in clk=\CLOCK, en=$abc$21571$auto$opt_dff.cc:219:make_patterns_logic$2236, arst=\RESET, srst={ }
  820 cells in clk=\CLOCK, en=$abc$23815$auto$opt_dff.cc:219:make_patterns_logic$2015, arst=\RESET, srst={ }
  31 cells in clk=\CLOCK, en=$abc$21617$auto$opt_dff.cc:219:make_patterns_logic$2253, arst=\RESET, srst={ }
  25 cells in clk=\CLOCK, en=$abc$21533$auto$opt_dff.cc:219:make_patterns_logic$2219, arst=\RESET, srst={ }
  45 cells in clk=\CLOCK, en=$abc$21381$auto$opt_dff.cc:219:make_patterns_logic$2423, arst=\RESET, srst={ }
  23 cells in clk=\CLOCK, en=$abc$21259$auto$opt_dff.cc:219:make_patterns_logic$2372, arst=\RESET, srst={ }
  22 cells in clk=\CLOCK, en=$abc$21343$auto$opt_dff.cc:219:make_patterns_logic$2406, arst=\RESET, srst={ }
  21 cells in clk=\CLOCK, en=$abc$21175$auto$opt_dff.cc:219:make_patterns_logic$2338, arst=\RESET, srst={ }
  97 cells in clk=\CLOCK, en=$abc$20781$auto$opt_dff.cc:219:make_patterns_logic$2068, arst=\RESET, srst={ }
  363 cells in clk=\CLOCK, en=$abc$24998$auto$opt_dff.cc:219:make_patterns_logic$2146, arst=\RESET, srst={ }
  80 cells in clk=\CLOCK, en=$abc$20654$auto$opt_dff.cc:219:make_patterns_logic$2589, arst=\RESET, srst={ }
  30 cells in clk=\CLOCK, en=$abc$21487$auto$opt_dff.cc:219:make_patterns_logic$2202, arst=\RESET, srst={ }
  25 cells in clk=\CLOCK, en=$abc$21449$auto$opt_dff.cc:219:make_patterns_logic$2185, arst=\RESET, srst={ }
  438 cells in clk=\CLOCK, en=$abc$21777$auto$opt_dff.cc:219:make_patterns_logic$1985, arst=\RESET, srst={ }
  27 cells in clk=\CLOCK, en=$abc$21739$auto$opt_dff.cc:219:make_patterns_logic$2304, arst=\RESET, srst={ }
  18 cells in clk=\CLOCK, en=$abc$25971$auto$opt_dff.cc:219:make_patterns_logic$1962, arst=\RESET, srst={ }

3.92.2. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$21655$auto$opt_dff.cc:219:make_patterns_logic$2270, asynchronously reset by \RESET
Extracted 35 gates and 65 wires to a netlist network with 30 inputs and 24 outputs.

3.92.2.1. Executing ABC.

3.92.3. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$21701$auto$opt_dff.cc:219:make_patterns_logic$2287, asynchronously reset by \RESET
Extracted 23 gates and 47 wires to a netlist network with 24 inputs and 18 outputs.

3.92.3.1. Executing ABC.

3.92.4. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$22219$auto$opt_dff.cc:219:make_patterns_logic$2620, asynchronously reset by \RESET
Extracted 3 gates and 8 wires to a netlist network with 5 inputs and 2 outputs.

3.92.4.1. Executing ABC.

3.92.5. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$25538$auto$opt_dff.cc:219:make_patterns_logic$19270, asynchronously reset by \RESET
Extracted 23 gates and 35 wires to a netlist network with 12 inputs and 18 outputs.

3.92.5.1. Executing ABC.

3.92.6. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$20758$auto$opt_dff.cc:194:make_patterns_logic$2640, asynchronously reset by \RESET
Extracted 22 gates and 33 wires to a netlist network with 11 inputs and 6 outputs.

3.92.6.1. Executing ABC.

3.92.7. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$20919$auto$opt_dff.cc:219:make_patterns_logic$2110, asynchronously reset by \RESET
Extracted 110 gates and 195 wires to a netlist network with 85 inputs and 15 outputs.

3.92.7.1. Executing ABC.

3.92.8. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$21026$auto$opt_dff.cc:219:make_patterns_logic$2525, asynchronously reset by \RESET
Extracted 11 gates and 22 wires to a netlist network with 11 inputs and 4 outputs.

3.92.8.1. Executing ABC.

3.92.9. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$21085$auto$opt_dff.cc:219:make_patterns_logic$2151, asynchronously reset by \RESET
Extracted 38 gates and 63 wires to a netlist network with 25 inputs and 12 outputs.

3.92.9.1. Executing ABC.

3.92.10. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$21039$auto$opt_dff.cc:219:make_patterns_logic$2168, asynchronously reset by \RESET
Extracted 33 gates and 62 wires to a netlist network with 29 inputs and 23 outputs.

3.92.10.1. Executing ABC.

3.92.11. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$25221$auto$opt_dff.cc:219:make_patterns_logic$2129, asynchronously reset by \RESET
Extracted 26 gates and 51 wires to a netlist network with 25 inputs and 15 outputs.

3.92.11.1. Executing ABC.

3.92.12. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$25559$auto$opt_dff.cc:194:make_patterns_logic$19234, asynchronously reset by \RESET
Extracted 252 gates and 480 wires to a netlist network with 228 inputs and 137 outputs.

3.92.12.1. Executing ABC.

3.92.13. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$25879$auto$opt_dff.cc:219:make_patterns_logic$19207, asynchronously reset by \RESET
Extracted 42 gates and 78 wires to a netlist network with 36 inputs and 20 outputs.

3.92.13.1. Executing ABC.

3.92.14. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$20130$auto$opt_dff.cc:219:make_patterns_logic$2934, asynchronously reset by \RESET
Extracted 21 gates and 43 wires to a netlist network with 22 inputs and 9 outputs.

3.92.14.1. Executing ABC.

3.92.15. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$21129$auto$opt_dff.cc:219:make_patterns_logic$2321, asynchronously reset by \RESET
Extracted 37 gates and 68 wires to a netlist network with 31 inputs and 25 outputs.

3.92.15.1. Executing ABC.

3.92.16. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$22225$auto$opt_dff.cc:219:make_patterns_logic$2032, asynchronously reset by \RESET
Extracted 22 gates and 39 wires to a netlist network with 17 inputs and 12 outputs.

3.92.16.1. Executing ABC.

3.92.17. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$23802$auto$opt_dff.cc:219:make_patterns_logic$2637, asynchronously reset by \RESET
Extracted 14 gates and 25 wires to a netlist network with 11 inputs and 6 outputs.

3.92.17.1. Executing ABC.

3.92.18. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$24898$auto$opt_dff.cc:194:make_patterns_logic$2650, asynchronously reset by \RESET
Extracted 4 gates and 8 wires to a netlist network with 4 inputs and 2 outputs.

3.92.18.1. Executing ABC.

3.92.19. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$24904$auto$opt_dff.cc:219:make_patterns_logic$2656, asynchronously reset by \RESET
Extracted 64 gates and 129 wires to a netlist network with 65 inputs and 31 outputs.

3.92.19.1. Executing ABC.

3.92.20. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, asynchronously reset by \RESET
Extracted 991 gates and 1576 wires to a netlist network with 585 inputs and 343 outputs.

3.92.20.1. Executing ABC.

3.92.21. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$23443$auto$opt_dff.cc:219:make_patterns_logic$2545, asynchronously reset by \RESET
Extracted 370 gates and 559 wires to a netlist network with 189 inputs and 94 outputs.

3.92.21.1. Executing ABC.

3.92.22. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$20168$auto$opt_dff.cc:219:make_patterns_logic$2049, asynchronously reset by \RESET
Extracted 11 gates and 22 wires to a netlist network with 11 inputs and 5 outputs.

3.92.22.1. Executing ABC.

3.92.23. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$26856$abc$20183$auto$opt_dff.cc:219:make_patterns_logic$2004, asynchronously reset by \RESET
Extracted 6 gates and 12 wires to a netlist network with 6 inputs and 6 outputs.

3.92.23.1. Executing ABC.

3.92.24. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$20203$auto$opt_dff.cc:219:make_patterns_logic$2568, asynchronously reset by \RESET
Extracted 463 gates and 627 wires to a netlist network with 164 inputs and 99 outputs.

3.92.24.1. Executing ABC.

3.92.25. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$21297$auto$opt_dff.cc:219:make_patterns_logic$2389, asynchronously reset by \RESET
Extracted 39 gates and 73 wires to a netlist network with 34 inputs and 26 outputs.

3.92.25.1. Executing ABC.

3.92.26. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$21213$auto$opt_dff.cc:219:make_patterns_logic$2355, asynchronously reset by \RESET
Extracted 36 gates and 68 wires to a netlist network with 32 inputs and 24 outputs.

3.92.26.1. Executing ABC.

3.92.27. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$25913$auto$opt_dff.cc:219:make_patterns_logic$2440, asynchronously reset by \RESET
Extracted 101 gates and 154 wires to a netlist network with 53 inputs and 47 outputs.

3.92.27.1. Executing ABC.

3.92.28. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$25234$auto$opt_dff.cc:219:make_patterns_logic$19293, asynchronously reset by \RESET
Extracted 400 gates and 522 wires to a netlist network with 122 inputs and 116 outputs.

3.92.28.1. Executing ABC.

3.92.29. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$21954$auto$opt_dff.cc:219:make_patterns_logic$2451, asynchronously reset by \RESET
Extracted 178 gates and 294 wires to a netlist network with 116 inputs and 137 outputs.

3.92.29.1. Executing ABC.

3.92.30. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$21571$auto$opt_dff.cc:219:make_patterns_logic$2236, asynchronously reset by \RESET
Extracted 27 gates and 53 wires to a netlist network with 26 inputs and 20 outputs.

3.92.30.1. Executing ABC.

3.92.31. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$23815$auto$opt_dff.cc:219:make_patterns_logic$2015, asynchronously reset by \RESET
Extracted 820 gates and 1036 wires to a netlist network with 216 inputs and 319 outputs.

3.92.31.1. Executing ABC.

3.92.32. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$21617$auto$opt_dff.cc:219:make_patterns_logic$2253, asynchronously reset by \RESET
Extracted 31 gates and 59 wires to a netlist network with 28 inputs and 22 outputs.

3.92.32.1. Executing ABC.

3.92.33. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$21533$auto$opt_dff.cc:219:make_patterns_logic$2219, asynchronously reset by \RESET
Extracted 25 gates and 50 wires to a netlist network with 25 inputs and 19 outputs.

3.92.33.1. Executing ABC.

3.92.34. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$21381$auto$opt_dff.cc:219:make_patterns_logic$2423, asynchronously reset by \RESET
Extracted 45 gates and 80 wires to a netlist network with 35 inputs and 35 outputs.

3.92.34.1. Executing ABC.

3.92.35. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$21259$auto$opt_dff.cc:219:make_patterns_logic$2372, asynchronously reset by \RESET
Extracted 23 gates and 47 wires to a netlist network with 24 inputs and 18 outputs.

3.92.35.1. Executing ABC.

3.92.36. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$21343$auto$opt_dff.cc:219:make_patterns_logic$2406, asynchronously reset by \RESET
Extracted 22 gates and 44 wires to a netlist network with 22 inputs and 18 outputs.

3.92.36.1. Executing ABC.

3.92.37. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$21175$auto$opt_dff.cc:219:make_patterns_logic$2338, asynchronously reset by \RESET
Extracted 21 gates and 43 wires to a netlist network with 22 inputs and 17 outputs.

3.92.37.1. Executing ABC.

3.92.38. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$20781$auto$opt_dff.cc:219:make_patterns_logic$2068, asynchronously reset by \RESET
Extracted 97 gates and 168 wires to a netlist network with 71 inputs and 37 outputs.

3.92.38.1. Executing ABC.

3.92.39. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$24998$auto$opt_dff.cc:219:make_patterns_logic$2146, asynchronously reset by \RESET
Extracted 353 gates and 508 wires to a netlist network with 155 inputs and 114 outputs.

3.92.39.1. Executing ABC.

3.92.40. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$20654$auto$opt_dff.cc:219:make_patterns_logic$2589, asynchronously reset by \RESET
Extracted 80 gates and 147 wires to a netlist network with 67 inputs and 34 outputs.

3.92.40.1. Executing ABC.

3.92.41. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$21487$auto$opt_dff.cc:219:make_patterns_logic$2202, asynchronously reset by \RESET
Extracted 30 gates and 59 wires to a netlist network with 29 inputs and 21 outputs.

3.92.41.1. Executing ABC.

3.92.42. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$21449$auto$opt_dff.cc:219:make_patterns_logic$2185, asynchronously reset by \RESET
Extracted 25 gates and 50 wires to a netlist network with 25 inputs and 19 outputs.

3.92.42.1. Executing ABC.

3.92.43. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$21777$auto$opt_dff.cc:219:make_patterns_logic$1985, asynchronously reset by \RESET
Extracted 374 gates and 559 wires to a netlist network with 185 inputs and 115 outputs.

3.92.43.1. Executing ABC.

3.92.44. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$21739$auto$opt_dff.cc:219:make_patterns_logic$2304, asynchronously reset by \RESET
Extracted 27 gates and 53 wires to a netlist network with 26 inputs and 20 outputs.

3.92.44.1. Executing ABC.

3.92.45. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$25971$auto$opt_dff.cc:219:make_patterns_logic$1962, asynchronously reset by \RESET
Extracted 18 gates and 35 wires to a netlist network with 17 inputs and 5 outputs.

3.92.45.1. Executing ABC.

yosys> abc -dff

3.93. Executing ABC pass (technology mapping using ABC).

3.93.1. Summary of detected clock domains:
  99 cells in clk=\CLOCK, en=$abc$25989$abc$21655$auto$opt_dff.cc:219:make_patterns_logic$2270, arst=\RESET, srst={ }
  6 cells in clk=\CLOCK, en=$abc$26073$abc$22219$auto$opt_dff.cc:219:make_patterns_logic$2620, arst=\RESET, srst={ }
  28 cells in clk=\CLOCK, en=$abc$26078$abc$25538$auto$opt_dff.cc:219:make_patterns_logic$19270, arst=\RESET, srst={ }
  108 cells in clk=\CLOCK, en=$abc$26133$abc$20919$auto$opt_dff.cc:219:make_patterns_logic$2110, arst=\RESET, srst={ }
  11 cells in clk=\CLOCK, en=$abc$26237$abc$21026$auto$opt_dff.cc:219:make_patterns_logic$2525, arst=\RESET, srst={ }
  34 cells in clk=\CLOCK, en=$abc$26250$abc$21085$auto$opt_dff.cc:219:make_patterns_logic$2151, arst=\RESET, srst={ }
  27 cells in clk=\CLOCK, en=$abc$26329$abc$25221$auto$opt_dff.cc:219:make_patterns_logic$2129, arst=\RESET, srst={ }
  323 cells in clk=\CLOCK, en=$abc$26359$abc$25559$auto$opt_dff.cc:194:make_patterns_logic$19234, arst=\RESET, srst={ }
  49 cells in clk=\CLOCK, en=$abc$26604$abc$25879$auto$opt_dff.cc:219:make_patterns_logic$19207, arst=\RESET, srst={ }
  37 cells in clk=\CLOCK, en=$abc$26647$abc$20130$auto$opt_dff.cc:219:make_patterns_logic$2934, arst=\RESET, srst={ }
  22 cells in clk=\CLOCK, en=$abc$26716$abc$22225$auto$opt_dff.cc:219:make_patterns_logic$2032, arst=\RESET, srst={ }
  13 cells in clk=\CLOCK, en=$abc$26740$abc$23802$auto$opt_dff.cc:219:make_patterns_logic$2637, arst=\RESET, srst={ }
  6 cells in clk=\CLOCK, en=$abc$26756$abc$24898$auto$opt_dff.cc:194:make_patterns_logic$2650, arst=\RESET, srst={ }
  559 cells in clk=\CLOCK, en={ }, arst=\RESET, srst={ }
  12 cells in clk=\CLOCK, en=$abc$28430$abc$20168$auto$opt_dff.cc:219:make_patterns_logic$2049, arst=\RESET, srst={ }
  371 cells in clk=\CLOCK, en=$abc$28063$abc$23443$auto$opt_dff.cc:219:make_patterns_logic$2545, arst=\RESET, srst={ }
  6 cells in clk=\CLOCK, en=$abc$26856$abc$20183$auto$opt_dff.cc:219:make_patterns_logic$2004, arst=\RESET, srst={ }
  94 cells in clk=\CLOCK, en=$abc$28946$abc$21297$auto$opt_dff.cc:219:make_patterns_logic$2389, arst=\RESET, srst={ }
  20 cells in clk=\CLOCK, en=$abc$26107$abc$20758$auto$opt_dff.cc:194:make_patterns_logic$2640, arst=\RESET, srst={ }
  90 cells in clk=\CLOCK, en=$abc$29038$abc$25913$auto$opt_dff.cc:219:make_patterns_logic$2440, arst=\RESET, srst={ }
  76 cells in clk=\CLOCK, en=$abc$32160$abc$21739$auto$opt_dff.cc:219:make_patterns_logic$2304, arst=\RESET, srst={ }
  178 cells in clk=\CLOCK, en=$abc$29589$abc$21954$auto$opt_dff.cc:219:make_patterns_logic$2451, arst=\RESET, srst={ }
  462 cells in clk=\CLOCK, en=$abc$28462$abc$20203$auto$opt_dff.cc:219:make_patterns_logic$2568, arst=\RESET, srst={ }
  752 cells in clk=\CLOCK, en=$abc$29810$abc$23815$auto$opt_dff.cc:219:make_patterns_logic$2015, arst=\RESET, srst={ }
  81 cells in clk=\CLOCK, en=$abc$30729$abc$21617$auto$opt_dff.cc:219:make_patterns_logic$2253, arst=\RESET, srst={ }
  81 cells in clk=\CLOCK, en=$abc$30772$abc$21533$auto$opt_dff.cc:219:make_patterns_logic$2219, arst=\RESET, srst={ }
  91 cells in clk=\CLOCK, en=$abc$30812$abc$21381$auto$opt_dff.cc:219:make_patterns_logic$2423, arst=\RESET, srst={ }
  86 cells in clk=\CLOCK, en=$abc$30869$abc$21259$auto$opt_dff.cc:219:make_patterns_logic$2372, arst=\RESET, srst={ }
  80 cells in clk=\CLOCK, en=$abc$30908$abc$21343$auto$opt_dff.cc:219:make_patterns_logic$2406, arst=\RESET, srst={ }
  91 cells in clk=\CLOCK, en=$abc$26285$abc$21039$auto$opt_dff.cc:219:make_patterns_logic$2168, arst=\RESET, srst={ }
  79 cells in clk=\CLOCK, en=$abc$28993$abc$21213$auto$opt_dff.cc:219:make_patterns_logic$2355, arst=\RESET, srst={ }
  69 cells in clk=\CLOCK, en=$abc$30947$abc$21175$auto$opt_dff.cc:219:make_patterns_logic$2338, arst=\RESET, srst={ }
  88 cells in clk=\CLOCK, en=$abc$30985$abc$20781$auto$opt_dff.cc:219:make_patterns_logic$2068, arst=\RESET, srst={ }
  74 cells in clk=\CLOCK, en=$abc$26034$abc$21701$auto$opt_dff.cc:219:make_patterns_logic$2287, arst=\RESET, srst={ }
  436 cells in clk=\CLOCK, en=$abc$29136$abc$25234$auto$opt_dff.cc:219:make_patterns_logic$19293, arst=\RESET, srst={ }
  285 cells in clk=\CLOCK, en=$abc$31101$abc$24998$auto$opt_dff.cc:219:make_patterns_logic$2146, arst=\RESET, srst={ }
  88 cells in clk=\CLOCK, en=$abc$31512$abc$20654$auto$opt_dff.cc:219:make_patterns_logic$2589, arst=\RESET, srst={ }
  73 cells in clk=\CLOCK, en=$abc$31634$abc$21487$auto$opt_dff.cc:219:make_patterns_logic$2202, arst=\RESET, srst={ }
  63 cells in clk=\CLOCK, en=$abc$31676$abc$21449$auto$opt_dff.cc:219:make_patterns_logic$2185, arst=\RESET, srst={ }
  63 cells in clk=\CLOCK, en=$abc$26762$abc$24904$auto$opt_dff.cc:219:make_patterns_logic$2656, arst=\RESET, srst={ }
  91 cells in clk=\CLOCK, en=$abc$29769$abc$21571$auto$opt_dff.cc:219:make_patterns_logic$2236, arst=\RESET, srst={ }
  79 cells in clk=\CLOCK, en=$abc$26670$abc$21129$auto$opt_dff.cc:219:make_patterns_logic$2321, arst=\RESET, srst={ }
  554 cells in clk=\CLOCK, en=$abc$31716$abc$21777$auto$opt_dff.cc:219:make_patterns_logic$1985, arst=\RESET, srst={ }
  28 cells in clk=\CLOCK, en=$abc$32201$abc$25971$auto$opt_dff.cc:219:make_patterns_logic$1962, arst=\RESET, srst={ }

3.93.2. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$25989$abc$21655$auto$opt_dff.cc:219:make_patterns_logic$2270, asynchronously reset by \RESET
Extracted 99 gates and 163 wires to a netlist network with 64 inputs and 21 outputs.

3.93.2.1. Executing ABC.

3.93.3. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$26073$abc$22219$auto$opt_dff.cc:219:make_patterns_logic$2620, asynchronously reset by \RESET
Extracted 6 gates and 13 wires to a netlist network with 7 inputs and 3 outputs.

3.93.3.1. Executing ABC.

3.93.4. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$26078$abc$25538$auto$opt_dff.cc:219:make_patterns_logic$19270, asynchronously reset by \RESET
Extracted 28 gates and 42 wires to a netlist network with 14 inputs and 18 outputs.

3.93.4.1. Executing ABC.

3.93.5. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$26133$abc$20919$auto$opt_dff.cc:219:make_patterns_logic$2110, asynchronously reset by \RESET
Extracted 102 gates and 185 wires to a netlist network with 83 inputs and 14 outputs.

3.93.5.1. Executing ABC.

3.93.6. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$26237$abc$21026$auto$opt_dff.cc:219:make_patterns_logic$2525, asynchronously reset by \RESET
Extracted 11 gates and 22 wires to a netlist network with 11 inputs and 4 outputs.

3.93.6.1. Executing ABC.

3.93.7. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$26250$abc$21085$auto$opt_dff.cc:219:make_patterns_logic$2151, asynchronously reset by \RESET
Extracted 34 gates and 55 wires to a netlist network with 21 inputs and 13 outputs.

3.93.7.1. Executing ABC.

3.93.8. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$26329$abc$25221$auto$opt_dff.cc:219:make_patterns_logic$2129, asynchronously reset by \RESET
Extracted 24 gates and 48 wires to a netlist network with 24 inputs and 16 outputs.

3.93.8.1. Executing ABC.

3.93.9. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$26359$abc$25559$auto$opt_dff.cc:194:make_patterns_logic$19234, asynchronously reset by \RESET
Extracted 235 gates and 456 wires to a netlist network with 221 inputs and 143 outputs.

3.93.9.1. Executing ABC.

3.93.10. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$26604$abc$25879$auto$opt_dff.cc:219:make_patterns_logic$19207, asynchronously reset by \RESET
Extracted 49 gates and 87 wires to a netlist network with 38 inputs and 28 outputs.

3.93.10.1. Executing ABC.

3.93.11. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$26647$abc$20130$auto$opt_dff.cc:219:make_patterns_logic$2934, asynchronously reset by \RESET
Extracted 37 gates and 72 wires to a netlist network with 35 inputs and 10 outputs.

3.93.11.1. Executing ABC.

3.93.12. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$26716$abc$22225$auto$opt_dff.cc:219:make_patterns_logic$2032, asynchronously reset by \RESET
Extracted 22 gates and 39 wires to a netlist network with 17 inputs and 11 outputs.

3.93.12.1. Executing ABC.

3.93.13. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$26740$abc$23802$auto$opt_dff.cc:219:make_patterns_logic$2637, asynchronously reset by \RESET
Extracted 13 gates and 25 wires to a netlist network with 12 inputs and 4 outputs.

3.93.13.1. Executing ABC.

3.93.14. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$26756$abc$24898$auto$opt_dff.cc:194:make_patterns_logic$2650, asynchronously reset by \RESET
Extracted 6 gates and 10 wires to a netlist network with 4 inputs and 3 outputs.

3.93.14.1. Executing ABC.

3.93.15. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, asynchronously reset by \RESET
Extracted 545 gates and 859 wires to a netlist network with 314 inputs and 231 outputs.

3.93.15.1. Executing ABC.

3.93.16. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$28430$abc$20168$auto$opt_dff.cc:219:make_patterns_logic$2049, asynchronously reset by \RESET
Extracted 12 gates and 24 wires to a netlist network with 12 inputs and 6 outputs.

3.93.16.1. Executing ABC.

3.93.17. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$28063$abc$23443$auto$opt_dff.cc:219:make_patterns_logic$2545, asynchronously reset by \RESET
Extracted 371 gates and 566 wires to a netlist network with 195 inputs and 95 outputs.

3.93.17.1. Executing ABC.

3.93.18. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$33015$abc$26856$abc$20183$auto$opt_dff.cc:219:make_patterns_logic$2004, asynchronously reset by \RESET
Extracted 6 gates and 12 wires to a netlist network with 6 inputs and 6 outputs.

3.93.18.1. Executing ABC.

3.93.19. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$28946$abc$21297$auto$opt_dff.cc:219:make_patterns_logic$2389, asynchronously reset by \RESET
Extracted 94 gates and 158 wires to a netlist network with 64 inputs and 23 outputs.

3.93.19.1. Executing ABC.

3.93.20. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$26107$abc$20758$auto$opt_dff.cc:194:make_patterns_logic$2640, asynchronously reset by \RESET
Extracted 20 gates and 31 wires to a netlist network with 11 inputs and 5 outputs.

3.93.20.1. Executing ABC.

3.93.21. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$29038$abc$25913$auto$opt_dff.cc:219:make_patterns_logic$2440, asynchronously reset by \RESET
Extracted 90 gates and 140 wires to a netlist network with 50 inputs and 42 outputs.

3.93.21.1. Executing ABC.

3.93.22. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$32160$abc$21739$auto$opt_dff.cc:219:make_patterns_logic$2304, asynchronously reset by \RESET
Extracted 76 gates and 130 wires to a netlist network with 54 inputs and 21 outputs.

3.93.22.1. Executing ABC.

3.93.23. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$29589$abc$21954$auto$opt_dff.cc:219:make_patterns_logic$2451, asynchronously reset by \RESET
Extracted 178 gates and 295 wires to a netlist network with 117 inputs and 138 outputs.

3.93.23.1. Executing ABC.

3.93.24. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$28462$abc$20203$auto$opt_dff.cc:219:make_patterns_logic$2568, asynchronously reset by \RESET
Extracted 462 gates and 622 wires to a netlist network with 160 inputs and 95 outputs.

3.93.24.1. Executing ABC.

3.93.25. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$29810$abc$23815$auto$opt_dff.cc:219:make_patterns_logic$2015, asynchronously reset by \RESET
Extracted 752 gates and 952 wires to a netlist network with 200 inputs and 355 outputs.

3.93.25.1. Executing ABC.

3.93.26. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$30729$abc$21617$auto$opt_dff.cc:219:make_patterns_logic$2253, asynchronously reset by \RESET
Extracted 81 gates and 135 wires to a netlist network with 54 inputs and 17 outputs.

3.93.26.1. Executing ABC.

3.93.27. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$30772$abc$21533$auto$opt_dff.cc:219:make_patterns_logic$2219, asynchronously reset by \RESET
Extracted 81 gates and 139 wires to a netlist network with 58 inputs and 19 outputs.

3.93.27.1. Executing ABC.

3.93.28. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$30812$abc$21381$auto$opt_dff.cc:219:make_patterns_logic$2423, asynchronously reset by \RESET
Extracted 91 gates and 153 wires to a netlist network with 62 inputs and 29 outputs.

3.93.28.1. Executing ABC.

3.93.29. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$30869$abc$21259$auto$opt_dff.cc:219:make_patterns_logic$2372, asynchronously reset by \RESET
Extracted 86 gates and 145 wires to a netlist network with 59 inputs and 16 outputs.

3.93.29.1. Executing ABC.

3.93.30. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$30908$abc$21343$auto$opt_dff.cc:219:make_patterns_logic$2406, asynchronously reset by \RESET
Extracted 80 gates and 130 wires to a netlist network with 50 inputs and 12 outputs.

3.93.30.1. Executing ABC.

3.93.31. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$26285$abc$21039$auto$opt_dff.cc:219:make_patterns_logic$2168, asynchronously reset by \RESET
Extracted 91 gates and 152 wires to a netlist network with 61 inputs and 22 outputs.

3.93.31.1. Executing ABC.

3.93.32. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$28993$abc$21213$auto$opt_dff.cc:219:make_patterns_logic$2355, asynchronously reset by \RESET
Extracted 79 gates and 134 wires to a netlist network with 55 inputs and 20 outputs.

3.93.32.1. Executing ABC.

3.93.33. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$30947$abc$21175$auto$opt_dff.cc:219:make_patterns_logic$2338, asynchronously reset by \RESET
Extracted 69 gates and 123 wires to a netlist network with 54 inputs and 17 outputs.

3.93.33.1. Executing ABC.

3.93.34. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$30985$abc$20781$auto$opt_dff.cc:219:make_patterns_logic$2068, asynchronously reset by \RESET
Extracted 88 gates and 150 wires to a netlist network with 62 inputs and 41 outputs.

3.93.34.1. Executing ABC.

3.93.35. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$26034$abc$21701$auto$opt_dff.cc:219:make_patterns_logic$2287, asynchronously reset by \RESET
Extracted 74 gates and 127 wires to a netlist network with 53 inputs and 16 outputs.

3.93.35.1. Executing ABC.

3.93.36. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$29136$abc$25234$auto$opt_dff.cc:219:make_patterns_logic$19293, asynchronously reset by \RESET
Extracted 435 gates and 588 wires to a netlist network with 152 inputs and 124 outputs.

3.93.36.1. Executing ABC.

3.93.37. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$31101$abc$24998$auto$opt_dff.cc:219:make_patterns_logic$2146, asynchronously reset by \RESET
Extracted 285 gates and 404 wires to a netlist network with 119 inputs and 105 outputs.

3.93.37.1. Executing ABC.

3.93.38. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$31512$abc$20654$auto$opt_dff.cc:219:make_patterns_logic$2589, asynchronously reset by \RESET
Extracted 88 gates and 162 wires to a netlist network with 74 inputs and 34 outputs.

3.93.38.1. Executing ABC.

3.93.39. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$31634$abc$21487$auto$opt_dff.cc:219:make_patterns_logic$2202, asynchronously reset by \RESET
Extracted 73 gates and 124 wires to a netlist network with 51 inputs and 17 outputs.

3.93.39.1. Executing ABC.

3.93.40. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$31676$abc$21449$auto$opt_dff.cc:219:make_patterns_logic$2185, asynchronously reset by \RESET
Extracted 63 gates and 111 wires to a netlist network with 48 inputs and 15 outputs.

3.93.40.1. Executing ABC.

3.93.41. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$26762$abc$24904$auto$opt_dff.cc:219:make_patterns_logic$2656, asynchronously reset by \RESET
Extracted 63 gates and 128 wires to a netlist network with 65 inputs and 31 outputs.

3.93.41.1. Executing ABC.

3.93.42. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$29769$abc$21571$auto$opt_dff.cc:219:make_patterns_logic$2236, asynchronously reset by \RESET
Extracted 91 gates and 159 wires to a netlist network with 68 inputs and 22 outputs.

3.93.42.1. Executing ABC.

3.93.43. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$26670$abc$21129$auto$opt_dff.cc:219:make_patterns_logic$2321, asynchronously reset by \RESET
Extracted 79 gates and 136 wires to a netlist network with 57 inputs and 22 outputs.

3.93.43.1. Executing ABC.

3.93.44. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$31716$abc$21777$auto$opt_dff.cc:219:make_patterns_logic$1985, asynchronously reset by \RESET
Extracted 478 gates and 686 wires to a netlist network with 208 inputs and 125 outputs.

3.93.44.1. Executing ABC.

3.93.45. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$32201$abc$25971$auto$opt_dff.cc:219:make_patterns_logic$1962, asynchronously reset by \RESET
Extracted 28 gates and 54 wires to a netlist network with 26 inputs and 4 outputs.

3.93.45.1. Executing ABC.

yosys> abc -dff

3.94. Executing ABC pass (technology mapping using ABC).

3.94.1. Summary of detected clock domains:
  5 cells in clk=\CLOCK, en=$abc$32322$abc$26073$abc$22219$auto$opt_dff.cc:219:make_patterns_logic$2620, arst=\RESET, srst={ }
  27 cells in clk=\CLOCK, en=$abc$32330$abc$26078$abc$25538$auto$opt_dff.cc:219:make_patterns_logic$19270, arst=\RESET, srst={ }
  117 cells in clk=\CLOCK, en=$abc$32359$abc$26133$abc$20919$auto$opt_dff.cc:219:make_patterns_logic$2110, arst=\RESET, srst={ }
  19 cells in clk=\CLOCK, en=$abc$32463$abc$26237$abc$21026$auto$opt_dff.cc:219:make_patterns_logic$2525, arst=\RESET, srst={ }
  28 cells in clk=\CLOCK, en=$abc$32512$abc$26329$abc$25221$auto$opt_dff.cc:219:make_patterns_logic$2129, arst=\RESET, srst={ }
  244 cells in clk=\CLOCK, en=$abc$32538$abc$26359$abc$25559$auto$opt_dff.cc:194:make_patterns_logic$19234, arst=\RESET, srst={ }
  49 cells in clk=\CLOCK, en=$abc$32885$abc$26604$abc$25879$auto$opt_dff.cc:219:make_patterns_logic$19207, arst=\RESET, srst={ }
  34 cells in clk=\CLOCK, en=$abc$32936$abc$26647$abc$20130$auto$opt_dff.cc:219:make_patterns_logic$2934, arst=\RESET, srst={ }
  22 cells in clk=\CLOCK, en=$abc$32971$abc$26716$abc$22225$auto$opt_dff.cc:219:make_patterns_logic$2032, arst=\RESET, srst={ }
  11 cells in clk=\CLOCK, en=$abc$32994$abc$26740$abc$23802$auto$opt_dff.cc:219:make_patterns_logic$2637, arst=\RESET, srst={ }
  4 cells in clk=\CLOCK, en=$abc$33008$abc$26756$abc$24898$auto$opt_dff.cc:194:make_patterns_logic$2650, arst=\RESET, srst={ }
  14 cells in clk=\CLOCK, en=$abc$33568$abc$28430$abc$20168$auto$opt_dff.cc:219:make_patterns_logic$2049, arst=\RESET, srst={ }
  753 cells in clk=\CLOCK, en={ }, arst=\RESET, srst={ }
  7 cells in clk=\CLOCK, en=$abc$33015$abc$26856$abc$20183$auto$opt_dff.cc:219:make_patterns_logic$2004, arst=\RESET, srst={ }
  99 cells in clk=\CLOCK, en=$abc$33971$abc$28946$abc$21297$auto$opt_dff.cc:219:make_patterns_logic$2389, arst=\RESET, srst={ }
  19 cells in clk=\CLOCK, en=$abc$34068$abc$26107$abc$20758$auto$opt_dff.cc:194:make_patterns_logic$2640, arst=\RESET, srst={ }
  94 cells in clk=\CLOCK, en=$abc$34093$abc$29038$abc$25913$auto$opt_dff.cc:219:make_patterns_logic$2440, arst=\RESET, srst={ }
  177 cells in clk=\CLOCK, en=$abc$34270$abc$29589$abc$21954$auto$opt_dff.cc:219:make_patterns_logic$2451, arst=\RESET, srst={ }
  638 cells in clk=\CLOCK, en=$abc$34920$abc$29810$abc$23815$auto$opt_dff.cc:219:make_patterns_logic$2015, arst=\RESET, srst={ }
  88 cells in clk=\CLOCK, en=$abc$35710$abc$30729$abc$21617$auto$opt_dff.cc:219:make_patterns_logic$2253, arst=\RESET, srst={ }
  93 cells in clk=\CLOCK, en=$abc$35797$abc$30772$abc$21533$auto$opt_dff.cc:219:make_patterns_logic$2219, arst=\RESET, srst={ }
  95 cells in clk=\CLOCK, en=$abc$35886$abc$30812$abc$21381$auto$opt_dff.cc:219:make_patterns_logic$2423, arst=\RESET, srst={ }
  94 cells in clk=\CLOCK, en=$abc$35989$abc$30869$abc$21259$auto$opt_dff.cc:219:make_patterns_logic$2372, arst=\RESET, srst={ }
  88 cells in clk=\CLOCK, en=$abc$36079$abc$30908$abc$21343$auto$opt_dff.cc:219:make_patterns_logic$2406, arst=\RESET, srst={ }
  106 cells in clk=\CLOCK, en=$abc$36163$abc$26285$abc$21039$auto$opt_dff.cc:219:make_patterns_logic$2168, arst=\RESET, srst={ }
  85 cells in clk=\CLOCK, en=$abc$36257$abc$28993$abc$21213$auto$opt_dff.cc:219:make_patterns_logic$2355, arst=\RESET, srst={ }
  91 cells in clk=\CLOCK, en=$abc$36341$abc$30947$abc$21175$auto$opt_dff.cc:219:make_patterns_logic$2338, arst=\RESET, srst={ }
  79 cells in clk=\CLOCK, en=$abc$36433$abc$30985$abc$20781$auto$opt_dff.cc:219:make_patterns_logic$2068, arst=\RESET, srst={ }
  97 cells in clk=\CLOCK, en=$abc$36560$abc$26034$abc$21701$auto$opt_dff.cc:219:make_patterns_logic$2287, arst=\RESET, srst={ }
  503 cells in clk=\CLOCK, en=$abc$36652$abc$29136$abc$25234$auto$opt_dff.cc:219:make_patterns_logic$19293, arst=\RESET, srst={ }
  282 cells in clk=\CLOCK, en=$abc$37115$abc$31101$abc$24998$auto$opt_dff.cc:219:make_patterns_logic$2146, arst=\RESET, srst={ }
  66 cells in clk=\CLOCK, en=$abc$37538$abc$31634$abc$21487$auto$opt_dff.cc:219:make_patterns_logic$2202, arst=\RESET, srst={ }
  96 cells in clk=\CLOCK, en=$abc$37880$abc$26670$abc$21129$auto$opt_dff.cc:219:make_patterns_logic$2321, arst=\RESET, srst={ }
  83 cells in clk=\CLOCK, en=$abc$37615$abc$31676$abc$21449$auto$opt_dff.cc:219:make_patterns_logic$2185, arst=\RESET, srst={ }
  36 cells in clk=\CLOCK, en=$abc$32476$abc$26250$abc$21085$auto$opt_dff.cc:219:make_patterns_logic$2151, arst=\RESET, srst={ }
  105 cells in clk=\CLOCK, en=$abc$37787$abc$29769$abc$21571$auto$opt_dff.cc:219:make_patterns_logic$2236, arst=\RESET, srst={ }
  97 cells in clk=\CLOCK, en=$abc$34189$abc$32160$abc$21739$auto$opt_dff.cc:219:make_patterns_logic$2304, arst=\RESET, srst={ }
  372 cells in clk=\CLOCK, en=$abc$33582$abc$28063$abc$23443$auto$opt_dff.cc:219:make_patterns_logic$2545, arst=\RESET, srst={ }
  94 cells in clk=\CLOCK, en=$abc$32221$abc$25989$abc$21655$auto$opt_dff.cc:219:make_patterns_logic$2270, arst=\RESET, srst={ }
  81 cells in clk=\CLOCK, en=$abc$37415$abc$31512$abc$20654$auto$opt_dff.cc:219:make_patterns_logic$2589, arst=\RESET, srst={ }
  54 cells in clk=\CLOCK, en=$abc$37692$abc$26762$abc$24904$auto$opt_dff.cc:219:make_patterns_logic$2656, arst=\RESET, srst={ }
  417 cells in clk=\CLOCK, en=$abc$34449$abc$28462$abc$20203$auto$opt_dff.cc:219:make_patterns_logic$2568, arst=\RESET, srst={ }
  562 cells in clk=\CLOCK, en=$abc$37966$abc$31716$abc$21777$auto$opt_dff.cc:219:make_patterns_logic$1985, arst=\RESET, srst={ }
  29 cells in clk=\CLOCK, en=$abc$38470$abc$32201$abc$25971$auto$opt_dff.cc:219:make_patterns_logic$1962, arst=\RESET, srst={ }

3.94.2. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$32322$abc$26073$abc$22219$auto$opt_dff.cc:219:make_patterns_logic$2620, asynchronously reset by \RESET
Extracted 5 gates and 11 wires to a netlist network with 6 inputs and 3 outputs.

3.94.2.1. Executing ABC.

3.94.3. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$32330$abc$26078$abc$25538$auto$opt_dff.cc:219:make_patterns_logic$19270, asynchronously reset by \RESET
Extracted 27 gates and 40 wires to a netlist network with 13 inputs and 17 outputs.

3.94.3.1. Executing ABC.

3.94.4. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$32359$abc$26133$abc$20919$auto$opt_dff.cc:219:make_patterns_logic$2110, asynchronously reset by \RESET
Extracted 111 gates and 206 wires to a netlist network with 95 inputs and 15 outputs.

3.94.4.1. Executing ABC.

3.94.5. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$32463$abc$26237$abc$21026$auto$opt_dff.cc:219:make_patterns_logic$2525, asynchronously reset by \RESET
Extracted 19 gates and 32 wires to a netlist network with 13 inputs and 10 outputs.

3.94.5.1. Executing ABC.

3.94.6. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$32512$abc$26329$abc$25221$auto$opt_dff.cc:219:make_patterns_logic$2129, asynchronously reset by \RESET
Extracted 25 gates and 49 wires to a netlist network with 24 inputs and 16 outputs.

3.94.6.1. Executing ABC.

3.94.7. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$32538$abc$26359$abc$25559$auto$opt_dff.cc:194:make_patterns_logic$19234, asynchronously reset by \RESET
Extracted 214 gates and 385 wires to a netlist network with 171 inputs and 121 outputs.

3.94.7.1. Executing ABC.

3.94.8. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$32885$abc$26604$abc$25879$auto$opt_dff.cc:219:make_patterns_logic$19207, asynchronously reset by \RESET
Extracted 49 gates and 88 wires to a netlist network with 39 inputs and 27 outputs.

3.94.8.1. Executing ABC.

3.94.9. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$32936$abc$26647$abc$20130$auto$opt_dff.cc:219:make_patterns_logic$2934, asynchronously reset by \RESET
Extracted 34 gates and 69 wires to a netlist network with 35 inputs and 10 outputs.

3.94.9.1. Executing ABC.

3.94.10. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$32971$abc$26716$abc$22225$auto$opt_dff.cc:219:make_patterns_logic$2032, asynchronously reset by \RESET
Extracted 22 gates and 39 wires to a netlist network with 17 inputs and 11 outputs.

3.94.10.1. Executing ABC.

3.94.11. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$32994$abc$26740$abc$23802$auto$opt_dff.cc:219:make_patterns_logic$2637, asynchronously reset by \RESET
Extracted 11 gates and 21 wires to a netlist network with 10 inputs and 3 outputs.

3.94.11.1. Executing ABC.

3.94.12. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$33008$abc$26756$abc$24898$auto$opt_dff.cc:194:make_patterns_logic$2650, asynchronously reset by \RESET
Extracted 4 gates and 8 wires to a netlist network with 4 inputs and 2 outputs.

3.94.12.1. Executing ABC.

3.94.13. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$33568$abc$28430$abc$20168$auto$opt_dff.cc:219:make_patterns_logic$2049, asynchronously reset by \RESET
Extracted 14 gates and 28 wires to a netlist network with 14 inputs and 6 outputs.

3.94.13.1. Executing ABC.

3.94.14. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, asynchronously reset by \RESET
Extracted 694 gates and 1095 wires to a netlist network with 400 inputs and 283 outputs.

3.94.14.1. Executing ABC.

3.94.15. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$33015$abc$26856$abc$20183$auto$opt_dff.cc:219:make_patterns_logic$2004, asynchronously reset by \RESET
Extracted 7 gates and 15 wires to a netlist network with 8 inputs and 7 outputs.

3.94.15.1. Executing ABC.

3.94.16. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$33971$abc$28946$abc$21297$auto$opt_dff.cc:219:make_patterns_logic$2389, asynchronously reset by \RESET
Extracted 99 gates and 165 wires to a netlist network with 66 inputs and 24 outputs.

3.94.16.1. Executing ABC.

3.94.17. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$34068$abc$26107$abc$20758$auto$opt_dff.cc:194:make_patterns_logic$2640, asynchronously reset by \RESET
Extracted 19 gates and 30 wires to a netlist network with 11 inputs and 5 outputs.

3.94.17.1. Executing ABC.

3.94.18. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$34093$abc$29038$abc$25913$auto$opt_dff.cc:219:make_patterns_logic$2440, asynchronously reset by \RESET
Extracted 94 gates and 143 wires to a netlist network with 49 inputs and 42 outputs.

3.94.18.1. Executing ABC.

3.94.19. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$34270$abc$29589$abc$21954$auto$opt_dff.cc:219:make_patterns_logic$2451, asynchronously reset by \RESET
Extracted 177 gates and 292 wires to a netlist network with 115 inputs and 133 outputs.

3.94.19.1. Executing ABC.

3.94.20. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$34920$abc$29810$abc$23815$auto$opt_dff.cc:219:make_patterns_logic$2015, asynchronously reset by \RESET
Extracted 638 gates and 823 wires to a netlist network with 185 inputs and 314 outputs.

3.94.20.1. Executing ABC.

3.94.21. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$35710$abc$30729$abc$21617$auto$opt_dff.cc:219:make_patterns_logic$2253, asynchronously reset by \RESET
Extracted 88 gates and 146 wires to a netlist network with 58 inputs and 21 outputs.

3.94.21.1. Executing ABC.

3.94.22. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$35797$abc$30772$abc$21533$auto$opt_dff.cc:219:make_patterns_logic$2219, asynchronously reset by \RESET
Extracted 93 gates and 153 wires to a netlist network with 60 inputs and 23 outputs.

3.94.22.1. Executing ABC.

3.94.23. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$35886$abc$30812$abc$21381$auto$opt_dff.cc:219:make_patterns_logic$2423, asynchronously reset by \RESET
Extracted 95 gates and 152 wires to a netlist network with 57 inputs and 27 outputs.

3.94.23.1. Executing ABC.

3.94.24. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$35989$abc$30869$abc$21259$auto$opt_dff.cc:219:make_patterns_logic$2372, asynchronously reset by \RESET
Extracted 94 gates and 154 wires to a netlist network with 60 inputs and 21 outputs.

3.94.24.1. Executing ABC.

3.94.25. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$36079$abc$30908$abc$21343$auto$opt_dff.cc:219:make_patterns_logic$2406, asynchronously reset by \RESET
Extracted 88 gates and 141 wires to a netlist network with 53 inputs and 17 outputs.

3.94.25.1. Executing ABC.

3.94.26. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$36163$abc$26285$abc$21039$auto$opt_dff.cc:219:make_patterns_logic$2168, asynchronously reset by \RESET
Extracted 106 gates and 164 wires to a netlist network with 58 inputs and 20 outputs.

3.94.26.1. Executing ABC.

3.94.27. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$36257$abc$28993$abc$21213$auto$opt_dff.cc:219:make_patterns_logic$2355, asynchronously reset by \RESET
Extracted 85 gates and 142 wires to a netlist network with 57 inputs and 15 outputs.

3.94.27.1. Executing ABC.

3.94.28. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$36341$abc$30947$abc$21175$auto$opt_dff.cc:219:make_patterns_logic$2338, asynchronously reset by \RESET
Extracted 91 gates and 145 wires to a netlist network with 54 inputs and 14 outputs.

3.94.28.1. Executing ABC.

3.94.29. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$36433$abc$30985$abc$20781$auto$opt_dff.cc:219:make_patterns_logic$2068, asynchronously reset by \RESET
Extracted 79 gates and 135 wires to a netlist network with 56 inputs and 40 outputs.

3.94.29.1. Executing ABC.

3.94.30. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$36560$abc$26034$abc$21701$auto$opt_dff.cc:219:make_patterns_logic$2287, asynchronously reset by \RESET
Extracted 97 gates and 152 wires to a netlist network with 55 inputs and 18 outputs.

3.94.30.1. Executing ABC.

3.94.31. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$36652$abc$29136$abc$25234$auto$opt_dff.cc:219:make_patterns_logic$19293, asynchronously reset by \RESET
Extracted 495 gates and 662 wires to a netlist network with 167 inputs and 128 outputs.

3.94.31.1. Executing ABC.

3.94.32. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$37115$abc$31101$abc$24998$auto$opt_dff.cc:219:make_patterns_logic$2146, asynchronously reset by \RESET
Extracted 282 gates and 394 wires to a netlist network with 112 inputs and 96 outputs.

3.94.32.1. Executing ABC.

3.94.33. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$37538$abc$31634$abc$21487$auto$opt_dff.cc:219:make_patterns_logic$2202, asynchronously reset by \RESET
Extracted 66 gates and 113 wires to a netlist network with 47 inputs and 16 outputs.

3.94.33.1. Executing ABC.

3.94.34. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$37880$abc$26670$abc$21129$auto$opt_dff.cc:219:make_patterns_logic$2321, asynchronously reset by \RESET
Extracted 96 gates and 155 wires to a netlist network with 59 inputs and 20 outputs.

3.94.34.1. Executing ABC.

3.94.35. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$37615$abc$31676$abc$21449$auto$opt_dff.cc:219:make_patterns_logic$2185, asynchronously reset by \RESET
Extracted 83 gates and 137 wires to a netlist network with 54 inputs and 17 outputs.

3.94.35.1. Executing ABC.

3.94.36. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$32476$abc$26250$abc$21085$auto$opt_dff.cc:219:make_patterns_logic$2151, asynchronously reset by \RESET
Extracted 36 gates and 61 wires to a netlist network with 25 inputs and 14 outputs.

3.94.36.1. Executing ABC.

3.94.37. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$37787$abc$29769$abc$21571$auto$opt_dff.cc:219:make_patterns_logic$2236, asynchronously reset by \RESET
Extracted 105 gates and 183 wires to a netlist network with 78 inputs and 28 outputs.

3.94.37.1. Executing ABC.

3.94.38. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$34189$abc$32160$abc$21739$auto$opt_dff.cc:219:make_patterns_logic$2304, asynchronously reset by \RESET
Extracted 97 gates and 154 wires to a netlist network with 57 inputs and 23 outputs.

3.94.38.1. Executing ABC.

3.94.39. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$33582$abc$28063$abc$23443$auto$opt_dff.cc:219:make_patterns_logic$2545, asynchronously reset by \RESET
Extracted 372 gates and 569 wires to a netlist network with 197 inputs and 94 outputs.

3.94.39.1. Executing ABC.

3.94.40. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$32221$abc$25989$abc$21655$auto$opt_dff.cc:219:make_patterns_logic$2270, asynchronously reset by \RESET
Extracted 94 gates and 157 wires to a netlist network with 63 inputs and 19 outputs.

3.94.40.1. Executing ABC.

3.94.41. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$37415$abc$31512$abc$20654$auto$opt_dff.cc:219:make_patterns_logic$2589, asynchronously reset by \RESET
Extracted 81 gates and 150 wires to a netlist network with 69 inputs and 33 outputs.

3.94.41.1. Executing ABC.

3.94.42. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$37692$abc$26762$abc$24904$auto$opt_dff.cc:219:make_patterns_logic$2656, asynchronously reset by \RESET
Extracted 54 gates and 110 wires to a netlist network with 56 inputs and 31 outputs.

3.94.42.1. Executing ABC.

3.94.43. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$34449$abc$28462$abc$20203$auto$opt_dff.cc:219:make_patterns_logic$2568, asynchronously reset by \RESET
Extracted 417 gates and 521 wires to a netlist network with 104 inputs and 81 outputs.

3.94.43.1. Executing ABC.

3.94.44. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$37966$abc$31716$abc$21777$auto$opt_dff.cc:219:make_patterns_logic$1985, asynchronously reset by \RESET
Extracted 480 gates and 695 wires to a netlist network with 215 inputs and 135 outputs.

3.94.44.1. Executing ABC.

3.94.45. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$38470$abc$32201$abc$25971$auto$opt_dff.cc:219:make_patterns_logic$1962, asynchronously reset by \RESET
Extracted 29 gates and 55 wires to a netlist network with 26 inputs and 6 outputs.

3.94.45.1. Executing ABC.

yosys> opt_ffinv

3.95. Executing OPT_FFINV pass (push inverters through FFs).
Discovering LUTs.
Pushed 1 inverters.

yosys> opt -sat

3.96. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.96.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b15.
<suppressed ~70 debug messages>

yosys> opt_merge -nomux

3.96.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b15'.
<suppressed ~300 debug messages>
Removed a total of 100 cells.

yosys> opt_muxtree

3.96.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b15..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.96.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b15.
Performed a total of 0 changes.

yosys> opt_merge

3.96.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b15'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.96.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.96.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b15..
Removed 0 unused cells and 32618 unused wires.
<suppressed ~15 debug messages>

yosys> opt_expr

3.96.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module b15.

3.96.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.96.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b15..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.96.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b15.
Performed a total of 0 changes.

yosys> opt_merge

3.96.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b15'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.96.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.96.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b15..

yosys> opt_expr

3.96.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module b15.

3.96.16. Finished OPT passes. (There is nothing left to do.)

yosys> bmuxmap

3.97. Executing BMUXMAP pass.

yosys> demuxmap

3.98. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> abc -script /home/users/temp_dir/yosys_llM86v/abc_tmp_1.scr

3.99. Executing ABC pass (technology mapping using ABC).

3.99.1. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Extracted 5459 gates and 6019 wires to a netlist network with 559 inputs and 609 outputs.

3.99.1.1. Executing ABC.
DE:   #PIs = 559  #Luts =  1776  Max Lvl =  19  Avg Lvl =   9.91  [   0.71 sec. at Pass 0]
DE:   #PIs = 559  #Luts =  1489  Max Lvl =  14  Avg Lvl =   6.92  [  21.22 sec. at Pass 1]
DE:   #PIs = 559  #Luts =  1462  Max Lvl =  12  Avg Lvl =   5.66  [   3.42 sec. at Pass 2]
DE:   #PIs = 559  #Luts =  1448  Max Lvl =  13  Avg Lvl =   5.83  [   7.30 sec. at Pass 3]
DE:   #PIs = 559  #Luts =  1439  Max Lvl =  13  Avg Lvl =   5.94  [   5.56 sec. at Pass 4]
DE:   #PIs = 559  #Luts =  1424  Max Lvl =  12  Avg Lvl =   6.25  [  10.65 sec. at Pass 5]
DE:   #PIs = 559  #Luts =  1419  Max Lvl =  12  Avg Lvl =   5.63  [   6.27 sec. at Pass 6]
DE:   #PIs = 559  #Luts =  1412  Max Lvl =  12  Avg Lvl =   5.64  [   9.84 sec. at Pass 7]
DE:   #PIs = 559  #Luts =  1409  Max Lvl =  11  Avg Lvl =   6.06  [   6.39 sec. at Pass 8]
DE:   #PIs = 559  #Luts =  1400  Max Lvl =  13  Avg Lvl =   6.65  [   9.07 sec. at Pass 9]
DE:   #PIs = 559  #Luts =  1396  Max Lvl =  12  Avg Lvl =   5.96  [   7.33 sec. at Pass 10]
DE:   #PIs = 559  #Luts =  1393  Max Lvl =  12  Avg Lvl =   6.34  [   9.44 sec. at Pass 11]
DE:   #PIs = 559  #Luts =  1393  Max Lvl =  12  Avg Lvl =   6.34  [   5.47 sec. at Pass 12]
DE:   #PIs = 559  #Luts =  1393  Max Lvl =  12  Avg Lvl =   6.34  [   7.80 sec. at Pass 13]
DE:   #PIs = 559  #Luts =  1393  Max Lvl =  12  Avg Lvl =   6.34  [   6.99 sec. at Pass 14]
DE:   #PIs = 559  #Luts =  1392  Max Lvl =  12  Avg Lvl =   6.69  [   1.30 sec. at Pass 15]

yosys> opt_expr

3.100. Executing OPT_EXPR pass (perform const folding).
Optimizing module b15.

yosys> opt_merge -nomux

3.101. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b15'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.102. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b15..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.103. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b15.
Performed a total of 0 changes.

yosys> opt_merge

3.104. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b15'.
Removed a total of 0 cells.

yosys> opt_share

3.105. Executing OPT_SHARE pass.

yosys> opt_dff

3.106. Executing OPT_DFF pass (perform DFF optimizations).
Removing always-active EN on $abc$39872$auto$blifparse.cc:362:parse_blif$39876 ($_DFFE_PP0P_) from module b15.
Removing always-active EN on $abc$39872$auto$blifparse.cc:362:parse_blif$39875 ($_DFFE_PP0P_) from module b15.
Removing always-active EN on $abc$39872$auto$blifparse.cc:362:parse_blif$39874 ($_DFFE_PP0P_) from module b15.
Removing always-active EN on $abc$39872$auto$blifparse.cc:362:parse_blif$39873 ($_DFFE_PP0P_) from module b15.

yosys> opt_clean

3.107. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b15..
Removed 0 unused cells and 5804 unused wires.
<suppressed ~2 debug messages>

yosys> opt_expr

3.108. Executing OPT_EXPR pass (perform const folding).
Optimizing module b15.
MAX OPT ITERATION = 1

yosys> opt_ffinv

3.109. Executing OPT_FFINV pass (push inverters through FFs).
Discovering LUTs.
Pushed 2 inverters.

yosys> stat

3.110. Printing statistics.

=== b15 ===

   Number of wires:               1554
   Number of wire bits:           2539
   Number of public wires:          35
   Number of public wire bits:     338
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1988
     $_DFFE_PP0P_                  400
     $_DFFE_PP1P_                    3
     $_DFF_PP0_                     10
     $lut                         1387
     adder_carry                   188


yosys> shregmap -minlen 8 -maxlen 20

3.111. Executing SHREGMAP pass (map shift registers).
Converted 0 dff cells into 0 shift registers.

yosys> dfflegalize -cell $_DFF_?_ 0 -cell $_DFF_???_ 0 -cell $_DFFE_????_ 0 -cell $_DFFSR_???_ 0 -cell $_DFFSRE_????_ 0 -cell $_DLATCHSR_PPP_ 0

3.112. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

yosys> stat

3.113. Printing statistics.

=== b15 ===

   Number of wires:               1554
   Number of wire bits:           2539
   Number of public wires:          35
   Number of public wire bits:     338
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1988
     $_DFFE_PP0P_                  400
     $_DFFE_PP1P_                    3
     $_DFF_PP0_                     10
     $lut                         1387
     adder_carry                   188


yosys> techmap -map +/techmap.v -map +/rapidsilicon/genesis/ffs_map.v

3.114. Executing TECHMAP pass (map to technology primitives).

3.114.1. Executing Verilog-2005 frontend: /home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.114.2. Executing Verilog-2005 frontend: /home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/ffs_map.v
Parsing Verilog input from `/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/ffs_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP0N_'.
Generating RTLIL representation for module `\$_DFFE_PN0P_'.
Generating RTLIL representation for module `\$_DFFE_PN0N_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP1N_'.
Generating RTLIL representation for module `\$_DFFE_PN1P_'.
Generating RTLIL representation for module `\$_DFFE_PN1N_'.
Generating RTLIL representation for module `\$_DFFSR_PPP_'.
Generating RTLIL representation for module `\$_DFFSR_PNP_'.
Generating RTLIL representation for module `\$_DFFSR_PNN_'.
Generating RTLIL representation for module `\$_DFFSR_PPN_'.
Generating RTLIL representation for module `\$_DFFSR_NPP_'.
Generating RTLIL representation for module `\$_DFFSR_NNP_'.
Generating RTLIL representation for module `\$_DFFSR_NNN_'.
Generating RTLIL representation for module `\$_DFFSR_NPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PNPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPNP_'.
Generating RTLIL representation for module `\$_DFFSRE_PNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PNPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PPNN_'.
Generating RTLIL representation for module `\$_DFFSRE_PNNN_'.
Generating RTLIL representation for module `\$_DLATCHSR_PPP_'.
Generating RTLIL representation for module `\$_DLATCHSR_NPP_'.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP0N_'.
Generating RTLIL representation for module `\$_DFFE_NN0P_'.
Generating RTLIL representation for module `\$_DFFE_NN0N_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_NP1N_'.
Generating RTLIL representation for module `\$_DFFE_NN1P_'.
Generating RTLIL representation for module `\$_DFFE_NN1N_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNPP_'.
Generating RTLIL representation for module `\$_DFFSRE_NPNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPN_'.
Generating RTLIL representation for module `\$_DFFSRE_NNPN_'.
Generating RTLIL representation for module `\$_DFFSRE_NPNN_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNN_'.
Generating RTLIL representation for module `\$__SHREG_DFF_P_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PN0_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NN0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFF_PN1_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_NN1_'.
Successfully finished Verilog frontend.

3.114.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $lut.
Using template \$_DFFE_PP0P_ for cells of type $_DFFE_PP0P_.
Using template \$_DFF_PP0_ for cells of type $_DFF_PP0_.
Using template \$_DFFE_PP1P_ for cells of type $_DFFE_PP1P_.
Using extmapper simplemap for cells of type $logic_not.
No more expansions possible.
<suppressed ~2349 debug messages>

yosys> opt_expr -mux_undef

3.115. Executing OPT_EXPR pass (perform const folding).
Optimizing module b15.
<suppressed ~33469 debug messages>

yosys> simplemap

3.116. Executing SIMPLEMAP pass (map simple cells to gate primitives).

yosys> opt_expr

3.117. Executing OPT_EXPR pass (perform const folding).
Optimizing module b15.

yosys> opt_merge

3.118. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b15'.
<suppressed ~14613 debug messages>
Removed a total of 4871 cells.

yosys> opt_dff -nodffe -nosdff

3.119. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.120. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b15..
Removed 1 unused cells and 5425 unused wires.
<suppressed ~2 debug messages>

yosys> opt -nodffe -nosdff

3.121. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.121.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b15.
<suppressed ~1205 debug messages>

yosys> opt_merge -nomux

3.121.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b15'.
<suppressed ~30 debug messages>
Removed a total of 10 cells.

yosys> opt_muxtree

3.121.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b15..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.121.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b15.
Performed a total of 0 changes.

yosys> opt_merge

3.121.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b15'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.121.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.121.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b15..
Removed 0 unused cells and 370 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.121.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module b15.

3.121.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.121.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b15..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.121.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b15.
Performed a total of 0 changes.

yosys> opt_merge

3.121.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b15'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.121.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.121.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b15..

yosys> opt_expr

3.121.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module b15.

3.121.16. Finished OPT passes. (There is nothing left to do.)

yosys> abc -script /home/users/temp_dir/yosys_llM86v/abc_tmp_2.scr

3.122. Executing ABC pass (technology mapping using ABC).

3.122.1. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Extracted 5096 gates and 5657 wires to a netlist network with 559 inputs and 604 outputs.

3.122.1.1. Executing ABC.
DE:   #PIs = 559  #Luts =  1395  Max Lvl =  12  Avg Lvl =   6.53  [   0.38 sec. at Pass 0]
DE:   #PIs = 559  #Luts =  1395  Max Lvl =  12  Avg Lvl =   6.53  [  22.50 sec. at Pass 1]
DE:   #PIs = 559  #Luts =  1384  Max Lvl =  11  Avg Lvl =   6.24  [   3.62 sec. at Pass 2]
DE:   #PIs = 559  #Luts =  1366  Max Lvl =  11  Avg Lvl =   6.06  [   9.03 sec. at Pass 3]
DE:   #PIs = 559  #Luts =  1349  Max Lvl =  13  Avg Lvl =   6.73  [   4.84 sec. at Pass 4]
DE:   #PIs = 559  #Luts =  1348  Max Lvl =  12  Avg Lvl =   6.17  [   9.41 sec. at Pass 5]
DE:   #PIs = 559  #Luts =  1348  Max Lvl =  12  Avg Lvl =   6.17  [   4.91 sec. at Pass 6]
DE:   #PIs = 559  #Luts =  1343  Max Lvl =  13  Avg Lvl =   6.60  [   7.71 sec. at Pass 7]
DE:   #PIs = 559  #Luts =  1341  Max Lvl =  12  Avg Lvl =   6.44  [   5.00 sec. at Pass 8]
DE:   #PIs = 559  #Luts =  1339  Max Lvl =  13  Avg Lvl =   6.40  [   9.26 sec. at Pass 9]
DE:   #PIs = 559  #Luts =  1333  Max Lvl =  13  Avg Lvl =   6.42  [   4.74 sec. at Pass 10]
DE:   #PIs = 559  #Luts =  1332  Max Lvl =  12  Avg Lvl =   6.21  [   5.77 sec. at Pass 11]
DE:   #PIs = 559  #Luts =  1331  Max Lvl =  13  Avg Lvl =   6.54  [   4.36 sec. at Pass 12]
DE:   #PIs = 559  #Luts =  1330  Max Lvl =  13  Avg Lvl =   6.39  [   6.97 sec. at Pass 13]
DE:   #PIs = 559  #Luts =  1330  Max Lvl =  13  Avg Lvl =   6.39  [   6.37 sec. at Pass 14]
DE:   #PIs = 559  #Luts =  1328  Max Lvl =  13  Avg Lvl =   6.46  [   7.36 sec. at Pass 15]
DE:   #PIs = 559  #Luts =  1328  Max Lvl =  12  Avg Lvl =   6.19  [   4.32 sec. at Pass 16]
DE:   #PIs = 559  #Luts =  1328  Max Lvl =  12  Avg Lvl =   6.19  [   7.78 sec. at Pass 17]
DE:   #PIs = 559  #Luts =  1328  Max Lvl =  12  Avg Lvl =   6.19  [   4.94 sec. at Pass 18]
DE:   #PIs = 559  #Luts =  1326  Max Lvl =  13  Avg Lvl =   6.41  [   8.71 sec. at Pass 19]
DE:   #PIs = 559  #Luts =  1326  Max Lvl =  13  Avg Lvl =   6.41  [   7.44 sec. at Pass 20]
DE:   #PIs = 559  #Luts =  1326  Max Lvl =  13  Avg Lvl =   6.41  [  11.51 sec. at Pass 21]
DE:   #PIs = 559  #Luts =  1326  Max Lvl =  13  Avg Lvl =   6.41  [   6.25 sec. at Pass 22]
DE:   #PIs = 559  #Luts =  1326  Max Lvl =  13  Avg Lvl =   6.41  [   1.28 sec. at Pass 23]

yosys> opt_expr

3.123. Executing OPT_EXPR pass (perform const folding).
Optimizing module b15.

yosys> opt_merge -nomux

3.124. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b15'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

yosys> opt_muxtree

3.125. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b15..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.126. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b15.
Performed a total of 0 changes.

yosys> opt_merge

3.127. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b15'.
Removed a total of 0 cells.

yosys> opt_share

3.128. Executing OPT_SHARE pass.

yosys> opt_dff

3.129. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.130. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b15..
Removed 0 unused cells and 4834 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.131. Executing OPT_EXPR pass (perform const folding).
Optimizing module b15.
MAX OPT ITERATION = 1

yosys> hierarchy -check

3.132. Executing HIERARCHY pass (managing design hierarchy).

3.132.1. Analyzing design hierarchy..
Top module:  \b15

3.132.2. Analyzing design hierarchy..
Top module:  \b15
Removed 0 unused modules.

yosys> stat

3.133. Printing statistics.

=== b15 ===

   Number of wires:               1491
   Number of wire bits:           2476
   Number of public wires:          35
   Number of public wire bits:     338
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1926
     $lut                         1325
     adder_carry                   188
     dffsre                        413


yosys> opt_clean -purge

3.134. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b15..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

yosys> write_verilog -noattr -nohex synthesized.v

3.135. Executing Verilog backend.
Dumping module `\b15'.

End of script. Logfile hash: bcaeac0a4e, CPU: user 55.74s system 2.43s, MEM: 110.93 MB peak
Yosys 0.18+10 (git sha1 7a7a25778, gcc 9.1.0 -fPIC -Os)
Time spent: 97% 6x abc (1728 sec), 0% 34x opt_dff (14 sec), ...
real 415.65
user 1657.22
sys 118.84
