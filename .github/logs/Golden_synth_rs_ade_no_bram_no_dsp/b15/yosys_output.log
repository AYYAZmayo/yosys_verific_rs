
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys-Verific 0.0.50
 Yosys 0.18+10 (git sha1 7a7a25778, gcc 9.1.0 -fPIC -Os)


-- Executing script file `yosys.ys' --
echo on

yosys> plugin -i synth-rs

yosys> read -verific

yosys> read -incdir .

yosys> verific -vlog-incdir .

1. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific May22_SW_Release, released at Tue May 31 17:39:28 2022.

yosys> verilog_defaults -add -I.

yosys> read -vhdl b15.vhd

yosys> verific -vhdl b15.vhd

2. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific May22_SW_Release, released at Tue May 31 17:39:28 2022.
VERIFIC-INFO [VHDL-1504] default VHDL library search path is now "/home/users/khyber.runner/yosys_verific_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008"
VERIFIC-COMMENT [VHDL-1481] Analyzing VHDL file 'b15.vhd'
VERIFIC-COMMENT [VHDL-1493] Restoring VHDL unit 'std.standard' from file '/home/users/khyber.runner/yosys_verific_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008/std/standard.vdb'
VERIFIC-INFO [VHDL-1012] b15.vhd:1: analyzing entity 'b15'
VERIFIC-INFO [VHDL-1010] b15.vhd:17: analyzing architecture 'behav'

yosys> synth_rs -top b15 -tech genesis -goal area -de -no_dsp -no_bram -verilog synthesized.v

3. Executing synth_rs pass: v0.4.59

yosys> read_verilog -lib -specify -nomem2reg +/rapidsilicon/common/cells_sim.v +/rapidsilicon/genesis/cells_sim.v

3.1. Executing Verilog-2005 frontend: /home/users/khyber.runner/yosys_verific_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v
Parsing Verilog input from `/home/users/khyber.runner/yosys_verific_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\inv'.
Generating RTLIL representation for module `\buff'.
Generating RTLIL representation for module `\logic_0'.
Generating RTLIL representation for module `\logic_1'.
Generating RTLIL representation for module `\gclkbuff'.
Successfully finished Verilog frontend.

3.2. Executing Verilog-2005 frontend: /home/users/khyber.runner/yosys_verific_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/cells_sim.v
Parsing Verilog input from `/home/users/khyber.runner/yosys_verific_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\dffsre'.
Generating RTLIL representation for module `\dffnsre'.
Generating RTLIL representation for module `\latchsre'.
Generating RTLIL representation for module `\latchnsre'.
Generating RTLIL representation for module `\io_scff'.
Generating RTLIL representation for module `\scff'.
Generating RTLIL representation for module `\sh_dff'.
Generating RTLIL representation for module `\adder_carry'.
Generating RTLIL representation for module `\sdffr'.
Generating RTLIL representation for module `\sdffs'.
Generating RTLIL representation for module `\TDP_BRAM18'.
Generating RTLIL representation for module `\TDP36K'.
Generating RTLIL representation for module `\RS_DSP1'.
Generating RTLIL representation for module `\RS_DSP2'.
Generating RTLIL representation for module `\RS_DSP2_MULT'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGIN_REGOUT'.
Generating RTLIL representation for module `\dsp_t1_sim'.
Generating RTLIL representation for module `\dsp_t1_20x18x64'.
Generating RTLIL representation for module `\dsp_t1_10x9x32'.
Successfully finished Verilog frontend.

yosys> hierarchy -check -top b15

3.3. Executing HIERARCHY pass (managing design hierarchy).
VERIFIC-INFO [VHDL-1067] b15.vhd:1: processing 'b15(BEHAV)'
Importing module b15.

3.3.1. Analyzing design hierarchy..
Top module:  \b15

3.3.2. Analyzing design hierarchy..
Top module:  \b15
Removed 0 unused modules.

yosys> proc

3.4. Executing PROC pass (convert processes to netlists).

yosys> proc_clean

3.4.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> proc_rmdead

3.4.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

yosys> proc_prune

3.4.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

yosys> proc_init

3.4.4. Executing PROC_INIT pass (extract init attributes).

yosys> proc_arst

3.4.5. Executing PROC_ARST pass (detect async resets in processes).

yosys> proc_rom

3.4.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

yosys> proc_mux

3.4.7. Executing PROC_MUX pass (convert decision trees to multiplexers).

yosys> proc_dlatch

3.4.8. Executing PROC_DLATCH pass (convert process syncs to latches).

yosys> proc_dff

3.4.9. Executing PROC_DFF pass (convert process syncs to FFs).

yosys> proc_memwr

3.4.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

yosys> proc_clean

3.4.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> opt_expr -keepdc

3.4.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module b15.
<suppressed ~17 debug messages>

yosys> bmuxmap

3.5. Executing BMUXMAP pass.

yosys> demuxmap

3.6. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> flatten

3.7. Executing FLATTEN pass (flatten design).

yosys> bmuxmap

3.8. Executing BMUXMAP pass.

yosys> demuxmap

3.9. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> tribuf -logic

3.10. Executing TRIBUF pass.

yosys> deminout

3.11. Executing DEMINOUT pass (demote inout ports to input or output).

yosys> opt_expr

3.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module b15.
<suppressed ~229 debug messages>

yosys> opt_clean

3.13. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b15..
Removed 14 unused cells and 198 unused wires.
<suppressed ~70 debug messages>

yosys> check

3.14. Executing CHECK pass (checking for obvious problems).
Checking module b15...
Found and reported 0 problems.

yosys> opt -nodffe -nosdff

3.15. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b15.
<suppressed ~1 debug messages>

yosys> opt_merge -nomux

3.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b15'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.15.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b15..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port A of cell $verific$mux_741$b15.vhd:574$916: \P1.State2 -> 4'0110
      Replacing known input bits on port B of cell $verific$select_728$b15.vhd:564$905: { \P1.State2 \P1.State2 \P1.State2 \P1.State2 \P1.State2 \P1.State2 \P1.State2 \P1.State2 \P1.State2 $verific$n6348$388 \P1.State2 \P1.State2 \P1.State2 \P1.State2 \P1.State2 \P1.State2 \P1.State2 \P1.State2 \P1.State2 } -> { 36'010101010101010101010101010101010101 $verific$n6348$388 36'010101010101010101010101010101010101 }
      Replacing known input bits on port A of cell $verific$mux_571$b15.vhd:485$852: \P1.State2 -> 4'0101
      Replacing known input bits on port A of cell $verific$mux_558$b15.vhd:481$844: \P1.State2 -> 4'0101
      Replacing known input bits on port A of cell $verific$mux_547$b15.vhd:480$840: \P1.State2 -> 4'0101
      Replacing known input bits on port A of cell $verific$mux_536$b15.vhd:475$837: \P1.State2 -> 4'0101
      Replacing known input bits on port B of cell $verific$mux_70$b15.vhd:158$573: \State -> 3'011
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~77 debug messages>

yosys> opt_reduce

3.15.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b15.
    New ctrl vector for $pmux cell $verific$Select_710$b15.vhd:564$890: { $verific$n7780$86 $verific$n7781$87 $auto$opt_reduce.cc:134:opt_pmux$1880 $auto$opt_reduce.cc:134:opt_pmux$1878 }
    New ctrl vector for $pmux cell $verific$Select_712$b15.vhd:564$892: { $verific$n7780$86 $auto$opt_reduce.cc:134:opt_pmux$1886 $auto$opt_reduce.cc:134:opt_pmux$1884 $auto$opt_reduce.cc:134:opt_pmux$1882 }
    New ctrl vector for $pmux cell $verific$Select_718$b15.vhd:564$898: { $verific$n7970$107 $verific$n7787$93 $auto$opt_reduce.cc:134:opt_pmux$1888 $verific$n7789$95 }
    New ctrl vector for $pmux cell $verific$Select_720$b15.vhd:564$899: { $verific$n7970$107 $auto$opt_reduce.cc:134:opt_pmux$1892 $auto$opt_reduce.cc:134:opt_pmux$1890 }
    New ctrl vector for $pmux cell $verific$Select_722$b15.vhd:564$900: { $verific$n7970$107 $auto$opt_reduce.cc:134:opt_pmux$1896 $auto$opt_reduce.cc:134:opt_pmux$1894 }
    New ctrl vector for $pmux cell $verific$Select_724$b15.vhd:564$901: { $verific$n7970$107 $auto$opt_reduce.cc:134:opt_pmux$1898 }
    New ctrl vector for $pmux cell $verific$select_707$b15.vhd:564$887: { $verific$n7780$86 $verific$n7781$87 $auto$opt_reduce.cc:134:opt_pmux$1908 $auto$opt_reduce.cc:134:opt_pmux$1906 $auto$opt_reduce.cc:134:opt_pmux$1904 $auto$opt_reduce.cc:134:opt_pmux$1902 $auto$opt_reduce.cc:134:opt_pmux$1900 }
    New ctrl vector for $pmux cell $verific$select_708$b15.vhd:564$888: { $auto$opt_reduce.cc:134:opt_pmux$1918 $auto$opt_reduce.cc:134:opt_pmux$1916 $verific$n7786$92 $verific$n7788$94 $auto$opt_reduce.cc:134:opt_pmux$1914 $auto$opt_reduce.cc:134:opt_pmux$1912 $auto$opt_reduce.cc:134:opt_pmux$1910 }
    New ctrl vector for $pmux cell $verific$select_713$b15.vhd:564$893: { $verific$n7780$86 $verific$n7781$87 $auto$opt_reduce.cc:134:opt_pmux$1920 }
    New ctrl vector for $pmux cell $verific$select_714$b15.vhd:564$894: { $verific$n7784$90 $verific$n7786$92 $verific$n7788$94 $verific$n7794$100 $auto$opt_reduce.cc:134:opt_pmux$1922 }
    New ctrl vector for $pmux cell $verific$select_715$b15.vhd:564$895: { $verific$n7785$91 $verific$n7795$101 $auto$opt_reduce.cc:134:opt_pmux$1924 }
    New ctrl vector for $pmux cell $verific$select_716$b15.vhd:564$896: { $verific$n7786$92 $verific$n7787$93 $auto$opt_reduce.cc:134:opt_pmux$1928 $auto$opt_reduce.cc:134:opt_pmux$1926 }
    New ctrl vector for $pmux cell $verific$select_725$b15.vhd:564$902: { $verific$n7786$92 $verific$n7787$93 $auto$opt_reduce.cc:134:opt_pmux$1930 }
    New ctrl vector for $pmux cell $verific$select_726$b15.vhd:564$903: { $verific$n7786$92 $verific$n7787$93 $auto$opt_reduce.cc:134:opt_pmux$1932 }
    New ctrl vector for $pmux cell $verific$select_727$b15.vhd:564$904: { $verific$n7787$93 $verific$n7789$95 $auto$opt_reduce.cc:134:opt_pmux$1934 }
    New ctrl vector for $pmux cell $verific$select_728$b15.vhd:564$905: { $verific$n7787$93 $auto$opt_reduce.cc:134:opt_pmux$1936 }
  Optimizing cells in module \b15.
Performed a total of 16 changes.

yosys> opt_merge

3.15.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b15'.
<suppressed ~129 debug messages>
Removed a total of 43 cells.

yosys> opt_dff -nodffe -nosdff

3.15.6. Executing OPT_DFF pass (perform DFF optimizations).
Changing const-value async load to async reset on $verific$rEIP_reg$b15.vhd:614$1033 ($aldff) from module b15.
Changing const-value async load to async reset on $verific$W_R_n_reg$b15.vhd:233$621 ($aldff) from module b15.
Changing const-value async load to async reset on $verific$State_reg$b15.vhd:233$625 ($aldff) from module b15.
Changing const-value async load to async reset on $verific$StateBS16_reg$b15.vhd:233$627 ($aldff) from module b15.
Changing const-value async load to async reset on $verific$RequestPending_reg$b15.vhd:614$1037 ($aldff) from module b15.
Changing const-value async load to async reset on $verific$ReadRequest_reg$b15.vhd:614$1035 ($aldff) from module b15.
Changing const-value async load to async reset on $verific$P1.uWord_reg$b15.vhd:614$1027 ($aldff) from module b15.
Changing const-value async load to async reset on $verific$P1.lWord_reg$b15.vhd:614$1026 ($aldff) from module b15.
Changing const-value async load to async reset on $verific$P1.State2_reg$b15.vhd:614$1003 ($aldff) from module b15.
Changing const-value async load to async reset on $verific$P1.PhyAddrPointer_reg$b15.vhd:614$1023 ($aldff) from module b15.
Changing const-value async load to async reset on $verific$P1.More_reg$b15.vhd:614$1024 ($aldff) from module b15.
Changing const-value async load to async reset on $verific$P1.InstQueue_reg_9$b15.vhd:614$1011 ($aldff) from module b15.
Changing const-value async load to async reset on $verific$P1.InstQueue_reg_8$b15.vhd:614$1010 ($aldff) from module b15.
Changing const-value async load to async reset on $verific$P1.InstQueue_reg_7$b15.vhd:614$1009 ($aldff) from module b15.
Changing const-value async load to async reset on $verific$P1.InstQueue_reg_6$b15.vhd:614$1008 ($aldff) from module b15.
Changing const-value async load to async reset on $verific$P1.InstQueue_reg_5$b15.vhd:614$1007 ($aldff) from module b15.
Changing const-value async load to async reset on $verific$P1.InstQueue_reg_4$b15.vhd:614$1006 ($aldff) from module b15.
Changing const-value async load to async reset on $verific$P1.InstQueue_reg_3$b15.vhd:614$1005 ($aldff) from module b15.
Changing const-value async load to async reset on $verific$P1.InstQueue_reg_2$b15.vhd:614$1004 ($aldff) from module b15.
Changing const-value async load to async reset on $verific$P1.InstQueue_reg_16$b15.vhd:614$1018 ($aldff) from module b15.
Changing const-value async load to async reset on $verific$P1.InstQueue_reg_15$b15.vhd:614$1017 ($aldff) from module b15.
Changing const-value async load to async reset on $verific$P1.InstQueue_reg_14$b15.vhd:614$1016 ($aldff) from module b15.
Changing const-value async load to async reset on $verific$P1.InstQueue_reg_13$b15.vhd:614$1015 ($aldff) from module b15.
Changing const-value async load to async reset on $verific$P1.InstQueue_reg_12$b15.vhd:614$1014 ($aldff) from module b15.
Changing const-value async load to async reset on $verific$P1.InstQueue_reg_11$b15.vhd:614$1013 ($aldff) from module b15.
Changing const-value async load to async reset on $verific$P1.InstQueue_reg_10$b15.vhd:614$1012 ($aldff) from module b15.
Changing const-value async load to async reset on $verific$P1.InstQueue_reg$b15.vhd:614$1019 ($aldff) from module b15.
Changing const-value async load to async reset on $verific$P1.InstQueueWr_Addr_reg$b15.vhd:614$1021 ($aldff) from module b15.
Changing const-value async load to async reset on $verific$P1.InstQueueRd_Addr_reg$b15.vhd:614$1020 ($aldff) from module b15.
Changing const-value async load to async reset on $verific$P1.InstAddrPointer_reg$b15.vhd:614$1022 ($aldff) from module b15.
Changing const-value async load to async reset on $verific$P1.Flush_reg$b15.vhd:614$1025 ($aldff) from module b15.
Changing const-value async load to async reset on $verific$MemoryFetch_reg$b15.vhd:614$1036 ($aldff) from module b15.
Changing const-value async load to async reset on $verific$M_IO_n_reg$b15.vhd:233$623 ($aldff) from module b15.
Changing const-value async load to async reset on $verific$EBX_reg$b15.vhd:614$1032 ($aldff) from module b15.
Changing const-value async load to async reset on $verific$EAX_reg$b15.vhd:614$1031 ($aldff) from module b15.
Changing const-value async load to async reset on $verific$Datao_reg$b15.vhd:614$1029 ($aldff) from module b15.
Changing const-value async load to async reset on $verific$DataWidth_reg$b15.vhd:233$628 ($aldff) from module b15.
Changing const-value async load to async reset on $verific$D_C_n_reg$b15.vhd:233$622 ($aldff) from module b15.
Changing const-value async load to async reset on $verific$CodeFetch_reg$b15.vhd:614$1028 ($aldff) from module b15.
Changing const-value async load to async reset on $verific$ByteEnable_reg$b15.vhd:670$1055 ($aldff) from module b15.
Changing const-value async load to async reset on $verific$BE_n_reg$b15.vhd:233$619 ($aldff) from module b15.
Changing const-value async load to async reset on $verific$Address_reg$b15.vhd:233$620 ($aldff) from module b15.
Changing const-value async load to async reset on $verific$ADS_n_reg$b15.vhd:233$624 ($aldff) from module b15.

yosys> opt_clean

3.15.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b15..
Removed 2 unused cells and 21 unused wires.
<suppressed ~3 debug messages>

yosys> opt_expr

3.15.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module b15.
<suppressed ~3 debug messages>

3.15.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.15.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b15..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~90 debug messages>

yosys> opt_reduce

3.15.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b15.
Performed a total of 0 changes.

yosys> opt_merge

3.15.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b15'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.15.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.15.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b15..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.15.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module b15.

3.15.16. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.15.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b15..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~90 debug messages>

yosys> opt_reduce

3.15.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b15.
Performed a total of 0 changes.

yosys> opt_merge

3.15.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b15'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.15.20. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.15.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b15..

yosys> opt_expr

3.15.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module b15.

3.15.23. Finished OPT passes. (There is nothing left to do.)

yosys> fsm -encoding binary

3.16. Executing FSM pass (extract and optimize FSM).

yosys> fsm_detect

3.16.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking b15.ByteEnable as FSM state register:
    Users of register don't seem to benefit from recoding.
Not marking b15.State as FSM state register:
    Users of register don't seem to benefit from recoding.

yosys> fsm_extract

3.16.2. Executing FSM_EXTRACT pass (extracting FSM from design).

yosys> fsm_opt

3.16.3. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> opt_clean

3.16.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b15..

yosys> fsm_opt

3.16.5. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> fsm_recode -encoding binary

3.16.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

yosys> fsm_info

3.16.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

yosys> fsm_map

3.16.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

yosys> opt -sat -nosdff

3.17. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.17.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b15.

yosys> opt_merge -nomux

3.17.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b15'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.17.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b15..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~90 debug messages>

yosys> opt_reduce

3.17.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b15.
Performed a total of 0 changes.

yosys> opt_merge

3.17.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b15'.
Removed a total of 0 cells.

yosys> opt_dff -sat -nosdff

3.17.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $verific$rEIP_reg$b15.vhd:614$1033 ($adff) from module b15 (D = $auto$bmuxmap.cc:58:execute$1613 [0], Q = \rEIP [0]).
Adding EN signal on $verific$rEIP_reg$b15.vhd:614$1033 ($adff) from module b15 (D = $auto$bmuxmap.cc:58:execute$1613 [30:1], Q = \rEIP [30:1]).
Adding EN signal on $verific$rEIP_reg$b15.vhd:614$1033 ($adff) from module b15 (D = $auto$bmuxmap.cc:58:execute$1613 [31], Q = \rEIP [31]).
Adding EN signal on $verific$W_R_n_reg$b15.vhd:233$621 ($adff) from module b15 (D = $verific$n398$9, Q = \W_R_n).
Adding EN signal on $verific$StateBS16_reg$b15.vhd:233$627 ($adff) from module b15 (D = $auto$bmuxmap.cc:58:execute$1830, Q = \StateBS16).
Adding EN signal on $verific$RequestPending_reg$b15.vhd:614$1037 ($adff) from module b15 (D = $auto$bmuxmap.cc:58:execute$1556, Q = \RequestPending).
Adding EN signal on $verific$ReadRequest_reg$b15.vhd:614$1035 ($adff) from module b15 (D = $auto$bmuxmap.cc:58:execute$1594, Q = \ReadRequest).
Adding EN signal on $verific$P1.uWord_reg$b15.vhd:614$1027 ($adff) from module b15 (D = $auto$bmuxmap.cc:58:execute$1118, Q = \P1.uWord).
Adding EN signal on $verific$P1.lWord_reg$b15.vhd:614$1026 ($adff) from module b15 (D = $auto$bmuxmap.cc:58:execute$1099, Q = \P1.lWord).
Adding EN signal on $verific$P1.PhyAddrPointer_reg$b15.vhd:614$1023 ($adff) from module b15 (D = $auto$bmuxmap.cc:58:execute$1670 [0], Q = \P1.PhyAddrPointer [0]).
Adding EN signal on $verific$P1.PhyAddrPointer_reg$b15.vhd:614$1023 ($adff) from module b15 (D = $auto$bmuxmap.cc:58:execute$1670 [1], Q = \P1.PhyAddrPointer [1]).
Adding EN signal on $verific$P1.PhyAddrPointer_reg$b15.vhd:614$1023 ($adff) from module b15 (D = $auto$bmuxmap.cc:58:execute$1670 [31:2], Q = \P1.PhyAddrPointer [31:2]).
Adding EN signal on $verific$P1.More_reg$b15.vhd:614$1024 ($adff) from module b15 (D = $verific$n7839$106, Q = \P1.More).
Adding EN signal on $verific$P1.InstQueue_reg_9$b15.vhd:614$1011 ($adff) from module b15 (D = $auto$bmuxmap.cc:58:execute$1385, Q = \P1.InstQueue[8]).
Adding EN signal on $verific$P1.InstQueue_reg_8$b15.vhd:614$1010 ($adff) from module b15 (D = $auto$bmuxmap.cc:58:execute$1404, Q = \P1.InstQueue[9]).
Adding EN signal on $verific$P1.InstQueue_reg_7$b15.vhd:614$1009 ($adff) from module b15 (D = $auto$bmuxmap.cc:58:execute$1423, Q = \P1.InstQueue[10]).
Adding EN signal on $verific$P1.InstQueue_reg_6$b15.vhd:614$1008 ($adff) from module b15 (D = $auto$bmuxmap.cc:58:execute$1442, Q = \P1.InstQueue[11]).
Adding EN signal on $verific$P1.InstQueue_reg_5$b15.vhd:614$1007 ($adff) from module b15 (D = $auto$bmuxmap.cc:58:execute$1461, Q = \P1.InstQueue[12]).
Adding EN signal on $verific$P1.InstQueue_reg_4$b15.vhd:614$1006 ($adff) from module b15 (D = $auto$bmuxmap.cc:58:execute$1480, Q = \P1.InstQueue[13]).
Adding EN signal on $verific$P1.InstQueue_reg_3$b15.vhd:614$1005 ($adff) from module b15 (D = $auto$bmuxmap.cc:58:execute$1499, Q = \P1.InstQueue[14]).
Adding EN signal on $verific$P1.InstQueue_reg_2$b15.vhd:614$1004 ($adff) from module b15 (D = $auto$bmuxmap.cc:58:execute$1518, Q = \P1.InstQueue[15]).
Adding EN signal on $verific$P1.InstQueue_reg_16$b15.vhd:614$1018 ($adff) from module b15 (D = $auto$bmuxmap.cc:58:execute$1252, Q = \P1.InstQueue[1]).
Adding EN signal on $verific$P1.InstQueue_reg_15$b15.vhd:614$1017 ($adff) from module b15 (D = $auto$bmuxmap.cc:58:execute$1271, Q = \P1.InstQueue[2]).
Adding EN signal on $verific$P1.InstQueue_reg_14$b15.vhd:614$1016 ($adff) from module b15 (D = $auto$bmuxmap.cc:58:execute$1290, Q = \P1.InstQueue[3]).
Adding EN signal on $verific$P1.InstQueue_reg_13$b15.vhd:614$1015 ($adff) from module b15 (D = $auto$bmuxmap.cc:58:execute$1309, Q = \P1.InstQueue[4]).
Adding EN signal on $verific$P1.InstQueue_reg_12$b15.vhd:614$1014 ($adff) from module b15 (D = $auto$bmuxmap.cc:58:execute$1328, Q = \P1.InstQueue[5]).
Adding EN signal on $verific$P1.InstQueue_reg_11$b15.vhd:614$1013 ($adff) from module b15 (D = $auto$bmuxmap.cc:58:execute$1347, Q = \P1.InstQueue[6]).
Adding EN signal on $verific$P1.InstQueue_reg_10$b15.vhd:614$1012 ($adff) from module b15 (D = $auto$bmuxmap.cc:58:execute$1366, Q = \P1.InstQueue[7]).
Adding EN signal on $verific$P1.InstQueue_reg$b15.vhd:614$1019 ($adff) from module b15 (D = $auto$bmuxmap.cc:58:execute$1233, Q = \P1.InstQueue[0]).
Adding EN signal on $verific$P1.InstQueueWr_Addr_reg$b15.vhd:614$1021 ($adff) from module b15 (D = $auto$bmuxmap.cc:58:execute$1214, Q = \P1.InstQueueWr_Addr).
Adding EN signal on $verific$P1.InstQueueRd_Addr_reg$b15.vhd:614$1020 ($adff) from module b15 (D = $auto$bmuxmap.cc:58:execute$1195, Q = \P1.InstQueueRd_Addr).
Adding EN signal on $verific$P1.InstAddrPointer_reg$b15.vhd:614$1022 ($adff) from module b15 (D = $auto$bmuxmap.cc:58:execute$1651 [0], Q = \P1.InstAddrPointer [0]).
Adding EN signal on $verific$P1.InstAddrPointer_reg$b15.vhd:614$1022 ($adff) from module b15 (D = $auto$bmuxmap.cc:58:execute$1651 [31:1], Q = \P1.InstAddrPointer [31:1]).
Adding EN signal on $verific$P1.Flush_reg$b15.vhd:614$1025 ($adff) from module b15 (D = $verific$n7837$104, Q = \P1.Flush).
Adding EN signal on $verific$MemoryFetch_reg$b15.vhd:614$1036 ($adff) from module b15 (D = $auto$bmuxmap.cc:58:execute$1575, Q = \MemoryFetch).
Adding EN signal on $verific$M_IO_n_reg$b15.vhd:233$623 ($adff) from module b15 (D = \MemoryFetch, Q = \M_IO_n).
Adding EN signal on $verific$EBX_reg$b15.vhd:614$1032 ($adff) from module b15 (D = $auto$bmuxmap.cc:58:execute$1137, Q = \EBX).
Adding EN signal on $verific$EAX_reg$b15.vhd:614$1031 ($adff) from module b15 (D = $auto$bmuxmap.cc:58:execute$1156, Q = \EAX).
Adding EN signal on $verific$Datao_reg$b15.vhd:614$1029 ($adff) from module b15 (D = $auto$bmuxmap.cc:58:execute$1080 [30:0], Q = \Datao [30:0]).
Adding EN signal on $verific$Datao_reg$b15.vhd:614$1029 ($adff) from module b15 (D = $auto$bmuxmap.cc:58:execute$1080 [31], Q = \Datao [31]).
Adding EN signal on $verific$DataWidth_reg$b15.vhd:233$628 ($adff) from module b15 (D = $auto$bmuxmap.cc:58:execute$1820 [31:0], Q = \DataWidth).
Adding EN signal on $verific$D_C_n_reg$b15.vhd:233$622 ($adff) from module b15 (D = $auto$bmuxmap.cc:58:execute$1870, Q = \D_C_n).
Adding EN signal on $verific$CodeFetch_reg$b15.vhd:614$1028 ($adff) from module b15 (D = $auto$bmuxmap.cc:58:execute$1537, Q = \CodeFetch).
Adding EN signal on $verific$ByteEnable_reg$b15.vhd:670$1055 ($adff) from module b15 (D = $verific$n9573$528, Q = \ByteEnable).
Adding EN signal on $verific$BE_n_reg$b15.vhd:233$619 ($adff) from module b15 (D = \ByteEnable, Q = \BE_n).
Adding EN signal on $verific$Address_reg$b15.vhd:233$620 ($adff) from module b15 (D = $auto$bmuxmap.cc:58:execute$1810, Q = \Address).
Adding EN signal on $verific$ADS_n_reg$b15.vhd:233$624 ($adff) from module b15 (D = $auto$bmuxmap.cc:58:execute$1860, Q = \ADS_n).
Setting constant 0-bit at position 2 on $auto$ff.cc:262:slice$2603 ($adffe) from module b15.
Setting constant 0-bit at position 3 on $auto$ff.cc:262:slice$2603 ($adffe) from module b15.
Setting constant 0-bit at position 4 on $auto$ff.cc:262:slice$2603 ($adffe) from module b15.
Setting constant 0-bit at position 5 on $auto$ff.cc:262:slice$2603 ($adffe) from module b15.
Setting constant 0-bit at position 6 on $auto$ff.cc:262:slice$2603 ($adffe) from module b15.
Setting constant 0-bit at position 7 on $auto$ff.cc:262:slice$2603 ($adffe) from module b15.
Setting constant 0-bit at position 8 on $auto$ff.cc:262:slice$2603 ($adffe) from module b15.
Setting constant 0-bit at position 9 on $auto$ff.cc:262:slice$2603 ($adffe) from module b15.
Setting constant 0-bit at position 10 on $auto$ff.cc:262:slice$2603 ($adffe) from module b15.
Setting constant 0-bit at position 11 on $auto$ff.cc:262:slice$2603 ($adffe) from module b15.
Setting constant 0-bit at position 12 on $auto$ff.cc:262:slice$2603 ($adffe) from module b15.
Setting constant 0-bit at position 13 on $auto$ff.cc:262:slice$2603 ($adffe) from module b15.
Setting constant 0-bit at position 14 on $auto$ff.cc:262:slice$2603 ($adffe) from module b15.
Setting constant 0-bit at position 15 on $auto$ff.cc:262:slice$2603 ($adffe) from module b15.
Setting constant 0-bit at position 16 on $auto$ff.cc:262:slice$2603 ($adffe) from module b15.
Setting constant 0-bit at position 17 on $auto$ff.cc:262:slice$2603 ($adffe) from module b15.
Setting constant 0-bit at position 18 on $auto$ff.cc:262:slice$2603 ($adffe) from module b15.
Setting constant 0-bit at position 19 on $auto$ff.cc:262:slice$2603 ($adffe) from module b15.
Setting constant 0-bit at position 20 on $auto$ff.cc:262:slice$2603 ($adffe) from module b15.
Setting constant 0-bit at position 21 on $auto$ff.cc:262:slice$2603 ($adffe) from module b15.
Setting constant 0-bit at position 22 on $auto$ff.cc:262:slice$2603 ($adffe) from module b15.
Setting constant 0-bit at position 23 on $auto$ff.cc:262:slice$2603 ($adffe) from module b15.
Setting constant 0-bit at position 24 on $auto$ff.cc:262:slice$2603 ($adffe) from module b15.
Setting constant 0-bit at position 25 on $auto$ff.cc:262:slice$2603 ($adffe) from module b15.
Setting constant 0-bit at position 26 on $auto$ff.cc:262:slice$2603 ($adffe) from module b15.
Setting constant 0-bit at position 27 on $auto$ff.cc:262:slice$2603 ($adffe) from module b15.
Setting constant 0-bit at position 28 on $auto$ff.cc:262:slice$2603 ($adffe) from module b15.
Setting constant 0-bit at position 29 on $auto$ff.cc:262:slice$2603 ($adffe) from module b15.
Setting constant 0-bit at position 30 on $auto$ff.cc:262:slice$2603 ($adffe) from module b15.
Setting constant 0-bit at position 31 on $auto$ff.cc:262:slice$2603 ($adffe) from module b15.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$2591 ($adffe) from module b15.
Setting constant 0-bit at position 4 on $auto$ff.cc:262:slice$2425 ($adffe) from module b15.

yosys> opt_clean

3.17.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b15..
Removed 20 unused cells and 20 unused wires.
<suppressed ~21 debug messages>

yosys> opt_expr

3.17.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module b15.
<suppressed ~49 debug messages>

3.17.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.17.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b15..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~86 debug messages>

yosys> opt_reduce

3.17.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b15.
Performed a total of 0 changes.

yosys> opt_merge

3.17.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b15'.
<suppressed ~678 debug messages>
Removed a total of 226 cells.

yosys> opt_dff -sat -nosdff

3.17.13. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 4 on $auto$ff.cc:262:slice$2442 ($adffe) from module b15.

yosys> opt_clean

3.17.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b15..
Removed 0 unused cells and 224 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.17.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module b15.

3.17.16. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.17.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b15..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~91 debug messages>

yosys> opt_reduce

3.17.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b15.
Performed a total of 0 changes.

yosys> opt_merge

3.17.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b15'.
Removed a total of 0 cells.

yosys> opt_dff -sat -nosdff

3.17.20. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.17.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b15..

yosys> opt_expr

3.17.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module b15.

3.17.23. Finished OPT passes. (There is nothing left to do.)

yosys> wreduce -keepdc

3.18. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 6) from port B of cell b15.$auto$opt_dff.cc:195:make_patterns_logic$2021 ($ne).
Removed top 1 bits (of 9) from port B of cell b15.$auto$opt_dff.cc:195:make_patterns_logic$1949 ($ne).
Removed top 1 bits (of 3) from port B of cell b15.$auto$opt_dff.cc:195:make_patterns_logic$1961 ($ne).
Removed top 2 bits (of 5) from port B of cell b15.$auto$opt_dff.cc:195:make_patterns_logic$1943 ($ne).
Removed top 1 bits (of 7) from port B of cell b15.$auto$opt_dff.cc:195:make_patterns_logic$2057 ($ne).
Removed top 1 bits (of 3) from port B of cell b15.$auto$opt_dff.cc:195:make_patterns_logic$2008 ($ne).
Removed top 1 bits (of 6) from port B of cell b15.$auto$opt_dff.cc:195:make_patterns_logic$1947 ($ne).
Removed top 1 bits (of 6) from port B of cell b15.$auto$opt_dff.cc:195:make_patterns_logic$1945 ($ne).
Removed top 2 bits (of 3) from port B of cell b15.$auto$opt_dff.cc:195:make_patterns_logic$2010 ($ne).
Removed top 1 bits (of 5) from port B of cell b15.$auto$opt_dff.cc:195:make_patterns_logic$2025 ($ne).
Removed top 2 bits (of 4) from port B of cell b15.$auto$opt_dff.cc:195:make_patterns_logic$1959 ($ne).
Removed top 1 bits (of 4) from port B of cell b15.$auto$opt_dff.cc:195:make_patterns_logic$2029 ($ne).
Removed top 2 bits (of 3) from port B of cell b15.$auto$opt_dff.cc:195:make_patterns_logic$2046 ($ne).
Removed top 2 bits (of 5) from port B of cell b15.$auto$opt_dff.cc:195:make_patterns_logic$2091 ($ne).
Removed top 1 bits (of 6) from port B of cell b15.$auto$opt_dff.cc:195:make_patterns_logic$2095 ($ne).
Removed top 1 bits (of 6) from port B of cell b15.$auto$opt_dff.cc:195:make_patterns_logic$2097 ($ne).
Removed top 1 bits (of 6) from port B of cell b15.$auto$opt_dff.cc:195:make_patterns_logic$2174 ($ne).
Removed top 1 bits (of 4) from port B of cell b15.$auto$opt_dff.cc:195:make_patterns_logic$1953 ($ne).
Removed top 30 bits (of 32) from mux cell b15.$verific$mux_98$b15.vhd:183$588 ($mux).
Removed top 1 bits (of 31) from port Y of cell b15.$verific$add_113$b15.vhd:199$592 ($add).
Removed top 1 bits (of 31) from port A of cell b15.$verific$add_113$b15.vhd:199$592 ($add).
Removed top 1 bits (of 6) from port B of cell b15.$auto$opt_dff.cc:195:make_patterns_logic$2225 ($ne).
Removed top 1 bits (of 3) from mux cell b15.$verific$mux_127$b15.vhd:217$598 ($mux).
Removed top 15 bits (of 16) from port A of cell b15.$verific$Decoder_193$b15.vhd:307$633 ($shl).
Removed top 1 bits (of 5) from port A of cell b15.$verific$add_210$b15.vhd:308$650 ($add).
Removed top 4 bits (of 5) from port B of cell b15.$verific$add_210$b15.vhd:308$650 ($add).
Removed top 1 bits (of 5) from port Y of cell b15.$verific$add_210$b15.vhd:308$650 ($add).
Removed top 15 bits (of 16) from port A of cell b15.$verific$Decoder_213$b15.vhd:310$653 ($shl).
Removed top 3 bits (of 4) from port B of cell b15.$verific$add_230$b15.vhd:311$670 ($add).
Removed top 8 bits (of 16) from port Y of cell b15.$verific$add_235$b15.vhd:313$674 ($add).
Removed top 8 bits (of 16) from port A of cell b15.$verific$add_235$b15.vhd:313$674 ($add).
Removed top 15 bits (of 16) from port A of cell b15.$verific$Decoder_237$b15.vhd:313$679 ($shl).
Removed top 3 bits (of 4) from port B of cell b15.$verific$add_254$b15.vhd:314$696 ($add).
Removed top 15 bits (of 16) from port A of cell b15.$verific$Decoder_261$b15.vhd:315$704 ($shl).
Removed top 3 bits (of 4) from port B of cell b15.$verific$add_278$b15.vhd:316$721 ($add).
Removed top 29 bits (of 30) from port B of cell b15.$verific$add_281$b15.vhd:317$722 ($add).
Removed top 30 bits (of 31) from port B of cell b15.$verific$add_284$b15.vhd:320$724 ($add).
Removed top 1 bits (of 32) from port A of cell b15.$verific$LessThan_286$b15.vhd:321$726 ($lt).
Removed top 1 bits (of 33) from port Y of cell b15.$verific$unary_minus_287$b15.vhd:322$727 ($neg).
Removed top 1 bits (of 33) from port A of cell b15.$verific$unary_minus_287$b15.vhd:322$727 ($neg).
Removed top 31 bits (of 32) from port B of cell b15.$verific$add_360$b15.vhd:346$752 ($add).
Removed top 1 bits (of 5) from port A of cell b15.$verific$add_362$b15.vhd:347$754 ($add).
Removed top 4 bits (of 5) from port B of cell b15.$verific$add_362$b15.vhd:347$754 ($add).
Removed top 1 bits (of 6) from port Y of cell b15.$verific$add_362$b15.vhd:347$754 ($add).
Removed top 2 bits (of 6) from port A of cell b15.$verific$sub_369$b15.vhd:357$756 ($sub).
Removed top 2 bits (of 6) from port B of cell b15.$verific$sub_369$b15.vhd:357$756 ($sub).
Removed top 1 bits (of 6) from port Y of cell b15.$verific$sub_369$b15.vhd:357$756 ($sub).
Removed top 1 bits (of 6) from port B of cell b15.$verific$LessThan_370$b15.vhd:357$757 ($le).
Removed top 1 bits (of 8) from port A of cell b15.$verific$LessThan_373$b15.vhd:358$759 ($lt).
Removed top 1 bits (of 9) from port A of cell b15.$verific$sub_378$b15.vhd:359$760 ($sub).
Removed top 1 bits (of 9) from port B of cell b15.$verific$sub_378$b15.vhd:359$760 ($sub).
Removed top 1 bits (of 33) from port Y of cell b15.$verific$sub_379$b15.vhd:359$761 ($sub).
Removed top 1 bits (of 33) from port A of cell b15.$verific$sub_379$b15.vhd:359$761 ($sub).
Removed top 1 bits (of 33) from port B of cell b15.$verific$sub_379$b15.vhd:359$761 ($sub).
Removed top 30 bits (of 31) from port B of cell b15.$verific$add_383$b15.vhd:362$763 ($add).
Removed top 24 bits (of 32) from port B of cell b15.$verific$add_387$b15.vhd:362$764 ($add).
Removed top 1 bits (of 6) from port B of cell b15.$verific$LessThan_397$b15.vhd:372$771 ($le).
Removed top 29 bits (of 32) from port B of cell b15.$verific$add_399$b15.vhd:373$772 ($add).
Removed top 24 bits (of 32) from port B of cell b15.$verific$add_403$b15.vhd:373$773 ($add).
Removed top 1 bits (of 3) from port A of cell b15.$verific$add_422$b15.vhd:393$778 ($add).
Removed top 2 bits (of 3) from port B of cell b15.$verific$add_422$b15.vhd:393$778 ($add).
Removed top 1 bits (of 3) from port Y of cell b15.$verific$add_422$b15.vhd:393$778 ($add).
Removed top 1 bits (of 5) from port A of cell b15.$verific$add_424$b15.vhd:393$781 ($add).
Removed top 3 bits (of 5) from port B of cell b15.$verific$add_424$b15.vhd:393$781 ($add).
Removed top 1 bits (of 5) from port Y of cell b15.$verific$add_424$b15.vhd:393$781 ($add).
Removed top 7 bits (of 8) from port B of cell b15.$verific$add_426$b15.vhd:393$784 ($add).
Removed top 1 bits (of 9) from port Y of cell b15.$verific$add_426$b15.vhd:393$784 ($add).
Removed top 1 bits (of 4) from port A of cell b15.$verific$add_427$b15.vhd:393$785 ($add).
Removed top 3 bits (of 4) from port B of cell b15.$verific$add_427$b15.vhd:393$785 ($add).
Removed top 1 bits (of 5) from port A of cell b15.$verific$add_435$b15.vhd:397$789 ($add).
Removed top 2 bits (of 5) from port B of cell b15.$verific$add_435$b15.vhd:397$789 ($add).
Removed top 1 bits (of 5) from port Y of cell b15.$verific$add_435$b15.vhd:397$789 ($add).
Removed top 1 bits (of 6) from port B of cell b15.$auto$opt_dff.cc:195:make_patterns_logic$2208 ($ne).
Removed top 1 bits (of 5) from mux cell b15.$verific$mux_440$b15.vhd:401$794 ($mux).
Removed top 1 bits (of 6) from port B of cell b15.$verific$LessThan_462$b15.vhd:414$798 ($le).
Removed top 30 bits (of 31) from port B of cell b15.$verific$add_473$b15.vhd:432$801 ($add).
Removed top 1 bits (of 10) from mux cell b15.$verific$mux_943$b15.vhd:446$829 ($mux).
Removed top 1 bits (of 3) from port A of cell b15.$verific$equal_517$b15.vhd:464$831 ($eq).
Removed top 2 bits (of 4) from mux cell b15.$verific$mux_536$b15.vhd:475$837 ($mux).
Removed top 2 bits (of 4) from mux cell b15.$verific$mux_547$b15.vhd:480$840 ($mux).
Removed top 2 bits (of 4) from mux cell b15.$verific$mux_558$b15.vhd:481$844 ($mux).
Removed top 1 bits (of 5) from mux cell b15.$verific$mux_562$b15.vhd:481$848 ($mux).
Removed top 1 bits (of 64) from mux cell b15.$verific$mux_935$b15.vhd:481$851 ($mux).
Removed top 2 bits (of 4) from mux cell b15.$verific$mux_571$b15.vhd:485$852 ($mux).
Removed top 1 bits (of 64) from mux cell b15.$verific$mux_934$b15.vhd:485$859 ($mux).
Removed top 30 bits (of 31) from port B of cell b15.$verific$add_669$b15.vhd:548$860 ($add).
Removed top 1 bits (of 32) from port Y of cell b15.$verific$add_669$b15.vhd:548$860 ($add).
Removed top 30 bits (of 31) from port B of cell b15.$verific$add_676$b15.vhd:554$863 ($add).
Removed top 1 bits (of 32) from port Y of cell b15.$verific$add_676$b15.vhd:554$863 ($add).
Removed top 1 bits (of 8) from port A of cell b15.$verific$equal_689$b15.vhd:350$867 ($eq).
Removed top 5 bits (of 8) from port A of cell b15.$verific$equal_700$b15.vhd:527$878 ($eq).
Removed top 5 bits (of 8) from port A of cell b15.$verific$equal_701$b15.vhd:532$879 ($eq).
Removed top 1 bits (of 8) from port A of cell b15.$verific$equal_704$b15.vhd:547$882 ($eq).
Removed top 1 bits (of 8) from port A of cell b15.$verific$equal_705$b15.vhd:553$883 ($eq).
Removed top 1 bits (of 4) from mux cell b15.$verific$select_728$b15.vhd:564$905 ($pmux).
Removed top 1 bits (of 5) from port B of cell b15.$verific$LessThan_729$b15.vhd:565$906 ($lt).
Removed top 2 bits (of 6) from port A of cell b15.$verific$sub_731$b15.vhd:565$908 ($sub).
Removed top 1 bits (of 6) from port B of cell b15.$verific$sub_731$b15.vhd:565$908 ($sub).
Removed top 1 bits (of 6) from port A of cell b15.$verific$LessThan_732$b15.vhd:565$909 ($lt).
Removed top 1 bits (of 4) from mux cell b15.$verific$mux_736$b15.vhd:567$913 ($mux).
Removed top 2 bits (of 4) from mux cell b15.$verific$mux_741$b15.vhd:574$916 ($mux).
Removed top 1 bits (of 32) from port A of cell b15.$verific$LessThan_742$b15.vhd:581$917 ($lt).
Removed top 1 bits (of 33) from port Y of cell b15.$verific$unary_minus_743$b15.vhd:582$918 ($neg).
Removed top 1 bits (of 33) from port A of cell b15.$verific$unary_minus_743$b15.vhd:582$918 ($neg).
Removed top 30 bits (of 32) from mux cell b15.$verific$mux_746$b15.vhd:587$922 ($mux).
Removed top 1 bits (of 2) from port A of cell b15.$verific$add_747$b15.vhd:588$924 ($add).
Removed top 1 bits (of 4) from mux cell b15.$verific$mux_751$b15.vhd:589$926 ($mux).
Removed top 1 bits (of 5) from mux cell b15.$verific$mux_752$b15.vhd:590$927 ($mux).
Removed top 2 bits (of 6) from port A of cell b15.$verific$sub_754$b15.vhd:591$929 ($sub).
Removed top 2 bits (of 6) from port B of cell b15.$verific$sub_754$b15.vhd:591$929 ($sub).
Removed top 1 bits (of 6) from port Y of cell b15.$verific$sub_754$b15.vhd:591$929 ($sub).
Removed top 1 bits (of 6) from port A of cell b15.$verific$LessThan_755$b15.vhd:591$930 ($lt).
Removed top 1 bits (of 5) from port A of cell b15.$verific$LessThan_758$b15.vhd:599$932 ($le).
Removed top 1 bits (of 5) from port B of cell b15.$verific$LessThan_758$b15.vhd:599$932 ($le).
Removed top 1 bits (of 6) from port B of cell b15.$auto$opt_dff.cc:195:make_patterns_logic$2191 ($ne).
Removed top 1 bits (of 33) from mux cell b15.$auto$bmuxmap.cc:60:execute$1067 ($mux).
Removed top 1 bits (of 2) from port A of cell b15.$verific$equal_896$b15.vhd:636$1047 ($eq).
Removed top 1 bits (of 6) from port B of cell b15.$auto$opt_dff.cc:195:make_patterns_logic$2455 ($ne).
Removed top 2 bits (of 33) from mux cell b15.$auto$bmuxmap.cc:60:execute$1081 ($mux).
Removed top 1 bits (of 4) from port B of cell b15.$auto$opt_dff.cc:195:make_patterns_logic$2431 ($ne).
Removed top 1 bits (of 6) from port B of cell b15.$auto$opt_dff.cc:195:make_patterns_logic$2427 ($ne).
Removed top 1 bits (of 6) from port B of cell b15.$auto$opt_dff.cc:195:make_patterns_logic$2412 ($ne).
Removed top 1 bits (of 5) from mux cell b15.$auto$bmuxmap.cc:60:execute$1196 ($mux).
Removed top 1 bits (of 6) from port B of cell b15.$auto$opt_dff.cc:195:make_patterns_logic$2395 ($ne).
Removed top 1 bits (of 5) from mux cell b15.$auto$bmuxmap.cc:60:execute$1215 ($mux).
Removed top 1 bits (of 6) from port B of cell b15.$auto$opt_dff.cc:195:make_patterns_logic$2378 ($ne).
Removed top 1 bits (of 6) from port B of cell b15.$auto$opt_dff.cc:195:make_patterns_logic$2361 ($ne).
Removed top 1 bits (of 6) from port B of cell b15.$auto$opt_dff.cc:195:make_patterns_logic$2344 ($ne).
Removed top 1 bits (of 6) from port B of cell b15.$auto$opt_dff.cc:195:make_patterns_logic$2327 ($ne).
Removed top 1 bits (of 6) from port B of cell b15.$auto$opt_dff.cc:195:make_patterns_logic$2310 ($ne).
Removed top 1 bits (of 6) from port B of cell b15.$auto$opt_dff.cc:195:make_patterns_logic$2293 ($ne).
Removed top 1 bits (of 6) from port B of cell b15.$auto$opt_dff.cc:195:make_patterns_logic$2276 ($ne).
Removed top 1 bits (of 6) from port B of cell b15.$auto$opt_dff.cc:195:make_patterns_logic$2259 ($ne).
Removed top 1 bits (of 33) from mux cell b15.$auto$bmuxmap.cc:60:execute$1614 ($mux).
Removed top 2 bits (of 4) from mux cell b15.$auto$bmuxmap.cc:60:execute$1616 ($mux).
Removed top 1 bits (of 4) from mux cell b15.$auto$bmuxmap.cc:60:execute$1617 ($mux).
Removed top 1 bits (of 4) from mux cell b15.$auto$bmuxmap.cc:60:execute$1618 ($mux).
Removed top 1 bits (of 4) from mux cell b15.$auto$bmuxmap.cc:60:execute$1625 ($mux).
Removed top 1 bits (of 6) from port B of cell b15.$auto$opt_dff.cc:195:make_patterns_logic$2242 ($ne).
Removed top 2 bits (of 12) from mux cell b15.$auto$bmuxmap.cc:60:execute$1673 ($mux).
Removed top 1 bits (of 8) from port B of cell b15.$auto$opt_dff.cc:195:make_patterns_logic$1941 ($ne).
Removed top 1 bits (of 6) from port B of cell b15.$auto$opt_dff.cc:195:make_patterns_logic$1939 ($ne).
Removed top 1 bits (of 33) from mux cell b15.$auto$bmuxmap.cc:60:execute$1813 ($mux).
Removed top 1 bits (of 33) from mux cell b15.$auto$bmuxmap.cc:60:execute$1814 ($mux).
Removed top 1 bits (of 33) from mux cell b15.$auto$bmuxmap.cc:60:execute$1815 ($mux).
Removed top 1 bits (of 33) from mux cell b15.$auto$bmuxmap.cc:60:execute$1818 ($mux).
Removed top 1 bits (of 33) from mux cell b15.$auto$bmuxmap.cc:60:execute$1819 ($mux).
Removed top 31 bits (of 33) from mux cell b15.$auto$bmuxmap.cc:60:execute$1821 ($mux).
Removed top 1 bits (of 4) from port B of cell b15.$auto$opt_dff.cc:195:make_patterns_logic$2161 ($ne).
Removed top 3 bits (of 4) from port B of cell b15.$auto$opt_dff.cc:195:make_patterns_logic$1955 ($ne).
Removed top 1 bits (of 6) from port B of cell b15.$auto$opt_dff.cc:195:make_patterns_logic$2157 ($ne).
Removed top 1 bits (of 5) from port B of cell b15.$auto$opt_dff.cc:195:make_patterns_logic$2467 ($ne).
Removed top 1 bits (of 6) from port B of cell b15.$auto$opt_dff.cc:195:make_patterns_logic$2514 ($ne).
Removed top 1 bits (of 6) from port B of cell b15.$auto$opt_dff.cc:195:make_patterns_logic$2534 ($ne).
Removed top 1 bits (of 6) from port B of cell b15.$auto$opt_dff.cc:195:make_patterns_logic$2549 ($ne).
Removed top 1 bits (of 6) from port B of cell b15.$auto$opt_dff.cc:195:make_patterns_logic$2553 ($ne).
Removed top 1 bits (of 7) from port B of cell b15.$auto$opt_dff.cc:195:make_patterns_logic$2557 ($ne).
Removed top 1 bits (of 5) from port B of cell b15.$auto$opt_dff.cc:195:make_patterns_logic$2572 ($ne).
Removed top 1 bits (of 7) from port B of cell b15.$auto$opt_dff.cc:195:make_patterns_logic$2578 ($ne).
Removed top 1 bits (of 7) from port B of cell b15.$auto$opt_dff.cc:195:make_patterns_logic$2580 ($ne).
Removed top 1 bits (of 6) from port B of cell b15.$auto$opt_dff.cc:195:make_patterns_logic$2624 ($ne).
Removed top 1 bits (of 3) from port B of cell b15.$auto$opt_dff.cc:195:make_patterns_logic$2649 ($ne).
Removed top 30 bits (of 32) from port Y of cell b15.$verific$unary_minus_743$b15.vhd:582$918 ($neg).
Removed top 30 bits (of 32) from port A of cell b15.$verific$unary_minus_743$b15.vhd:582$918 ($neg).
Removed top 2 bits (of 33) from mux cell b15.$auto$bmuxmap.cc:60:execute$1078 ($mux).
Removed top 2 bits (of 33) from mux cell b15.$auto$bmuxmap.cc:60:execute$1079 ($mux).
Removed top 1 bits (of 5) from mux cell b15.$auto$bmuxmap.cc:60:execute$1193 ($mux).
Removed top 1 bits (of 5) from mux cell b15.$auto$bmuxmap.cc:60:execute$1194 ($mux).
Removed top 1 bits (of 5) from mux cell b15.$auto$bmuxmap.cc:60:execute$1212 ($mux).
Removed top 1 bits (of 5) from mux cell b15.$auto$bmuxmap.cc:60:execute$1213 ($mux).
Removed top 1 bits (of 33) from mux cell b15.$auto$bmuxmap.cc:60:execute$1611 ($mux).
Removed top 1 bits (of 33) from mux cell b15.$auto$bmuxmap.cc:60:execute$1612 ($mux).
Removed top 30 bits (of 32) from mux cell b15.$auto$bmuxmap.cc:60:execute$1818 ($mux).
Removed top 30 bits (of 32) from mux cell b15.$auto$bmuxmap.cc:60:execute$1819 ($mux).
Removed top 2 bits (of 33) from mux cell b15.$auto$bmuxmap.cc:60:execute$1074 ($mux).
Removed cell b15.$auto$bmuxmap.cc:60:execute$1075 ($mux).
Removed top 1 bits (of 5) from mux cell b15.$auto$bmuxmap.cc:60:execute$1189 ($mux).
Removed top 1 bits (of 5) from mux cell b15.$auto$bmuxmap.cc:60:execute$1190 ($mux).
Removed top 1 bits (of 5) from mux cell b15.$auto$bmuxmap.cc:60:execute$1207 ($mux).
Removed top 1 bits (of 5) from mux cell b15.$auto$bmuxmap.cc:60:execute$1208 ($mux).
Removed top 1 bits (of 5) from mux cell b15.$auto$bmuxmap.cc:60:execute$1209 ($mux).
Removed top 1 bits (of 33) from mux cell b15.$auto$bmuxmap.cc:60:execute$1606 ($mux).
Removed top 1 bits (of 33) from mux cell b15.$auto$bmuxmap.cc:60:execute$1607 ($mux).
Removed top 1 bits (of 33) from mux cell b15.$auto$bmuxmap.cc:60:execute$1608 ($mux).
Removed top 30 bits (of 32) from mux cell b15.$auto$bmuxmap.cc:60:execute$1813 ($mux).
Removed top 30 bits (of 32) from mux cell b15.$auto$bmuxmap.cc:60:execute$1814 ($mux).
Removed top 30 bits (of 32) from mux cell b15.$auto$bmuxmap.cc:60:execute$1815 ($mux).
Removed top 2 bits (of 33) from mux cell b15.$auto$bmuxmap.cc:60:execute$1066 ($mux).
Removed top 1 bits (of 32) from mux cell b15.$auto$bmuxmap.cc:60:execute$1067 ($mux).
Removed top 1 bits (of 5) from mux cell b15.$auto$bmuxmap.cc:60:execute$1181 ($mux).
Removed top 1 bits (of 5) from mux cell b15.$auto$bmuxmap.cc:60:execute$1182 ($mux).
Removed top 1 bits (of 5) from mux cell b15.$auto$bmuxmap.cc:60:execute$1183 ($mux).
Removed top 1 bits (of 5) from mux cell b15.$auto$bmuxmap.cc:60:execute$1199 ($mux).
Removed top 1 bits (of 5) from mux cell b15.$auto$bmuxmap.cc:60:execute$1200 ($mux).
Removed top 1 bits (of 5) from mux cell b15.$auto$bmuxmap.cc:60:execute$1201 ($mux).
Removed top 1 bits (of 5) from mux cell b15.$auto$bmuxmap.cc:60:execute$1202 ($mux).
Removed top 1 bits (of 33) from mux cell b15.$auto$bmuxmap.cc:60:execute$1597 ($mux).
Removed top 1 bits (of 33) from mux cell b15.$auto$bmuxmap.cc:60:execute$1598 ($mux).
Removed top 1 bits (of 33) from mux cell b15.$auto$bmuxmap.cc:60:execute$1599 ($mux).
Removed top 1 bits (of 33) from mux cell b15.$auto$bmuxmap.cc:60:execute$1601 ($mux).
Removed top 1 bits (of 32) from mux cell b15.$verific$select_727$b15.vhd:564$904 ($pmux).
Removed top 1 bits (of 5) from mux cell b15.$verific$mux_757$b15.vhd:596$931 ($mux).
Removed top 1 bits (of 5) from mux cell b15.$verific$mux_799$b15.vhd:607$968 ($mux).
Removed top 1 bits (of 5) from mux cell b15.$verific$mux_753$b15.vhd:590$928 ($mux).
Removed top 101 bits (of 264) from wire b15.$auto$bmuxmap.cc:58:execute$1063.
Removed top 68 bits (of 132) from wire b15.$auto$bmuxmap.cc:58:execute$1072.
Removed top 2 bits (of 66) from wire b15.$auto$bmuxmap.cc:58:execute$1077.
Removed top 2 bits (of 33) from wire b15.$auto$bmuxmap.cc:58:execute$1080.
Removed top 48 bits (of 128) from wire b15.$auto$bmuxmap.cc:58:execute$1082.
Removed top 32 bits (of 64) from wire b15.$auto$bmuxmap.cc:58:execute$1091.
Removed top 16 bits (of 32) from wire b15.$auto$bmuxmap.cc:58:execute$1096.
Removed top 45 bits (of 120) from wire b15.$auto$bmuxmap.cc:58:execute$1101.
Removed top 30 bits (of 60) from wire b15.$auto$bmuxmap.cc:58:execute$1110.
Removed top 15 bits (of 30) from wire b15.$auto$bmuxmap.cc:58:execute$1115.
Removed top 93 bits (of 248) from wire b15.$auto$bmuxmap.cc:58:execute$1120.
Removed top 31 bits (of 62) from wire b15.$auto$bmuxmap.cc:58:execute$1134.
Removed top 93 bits (of 248) from wire b15.$auto$bmuxmap.cc:58:execute$1139.
Removed top 62 bits (of 124) from wire b15.$auto$bmuxmap.cc:58:execute$1148.
Removed top 16 bits (of 40) from wire b15.$auto$bmuxmap.cc:58:execute$1178.
Removed top 16 bits (of 20) from wire b15.$auto$bmuxmap.cc:58:execute$1187.
Removed top 16 bits (of 40) from wire b15.$auto$bmuxmap.cc:58:execute$1197.
Removed top 24 bits (of 64) from wire b15.$auto$bmuxmap.cc:58:execute$1216.
Removed top 24 bits (of 64) from wire b15.$auto$bmuxmap.cc:58:execute$1235.
Removed top 24 bits (of 64) from wire b15.$auto$bmuxmap.cc:58:execute$1254.
Removed top 24 bits (of 64) from wire b15.$auto$bmuxmap.cc:58:execute$1273.
Removed top 24 bits (of 64) from wire b15.$auto$bmuxmap.cc:58:execute$1292.
Removed top 24 bits (of 64) from wire b15.$auto$bmuxmap.cc:58:execute$1311.
Removed top 24 bits (of 64) from wire b15.$auto$bmuxmap.cc:58:execute$1330.
Removed top 24 bits (of 64) from wire b15.$auto$bmuxmap.cc:58:execute$1349.
Removed top 24 bits (of 64) from wire b15.$auto$bmuxmap.cc:58:execute$1368.
Removed top 24 bits (of 64) from wire b15.$auto$bmuxmap.cc:58:execute$1387.
Removed top 24 bits (of 64) from wire b15.$auto$bmuxmap.cc:58:execute$1406.
Removed top 24 bits (of 64) from wire b15.$auto$bmuxmap.cc:58:execute$1425.
Removed top 24 bits (of 64) from wire b15.$auto$bmuxmap.cc:58:execute$1444.
Removed top 24 bits (of 64) from wire b15.$auto$bmuxmap.cc:58:execute$1463.
Removed top 24 bits (of 64) from wire b15.$auto$bmuxmap.cc:58:execute$1482.
Removed top 24 bits (of 64) from wire b15.$auto$bmuxmap.cc:58:execute$1501.
Removed top 3 bits (of 8) from wire b15.$auto$bmuxmap.cc:58:execute$1520.
Removed top 3 bits (of 8) from wire b15.$auto$bmuxmap.cc:58:execute$1539.
Removed top 3 bits (of 8) from wire b15.$auto$bmuxmap.cc:58:execute$1558.
Removed top 3 bits (of 8) from wire b15.$auto$bmuxmap.cc:58:execute$1577.
Removed top 100 bits (of 264) from wire b15.$auto$bmuxmap.cc:58:execute$1596.
Removed top 23 bits (of 32) from wire b15.$auto$bmuxmap.cc:58:execute$1615.
Removed top 96 bits (of 256) from wire b15.$auto$bmuxmap.cc:58:execute$1634.
Removed top 96 bits (of 256) from wire b15.$auto$bmuxmap.cc:58:execute$1653.
Removed top 8 bits (of 24) from wire b15.$auto$bmuxmap.cc:58:execute$1672.
Removed top 31 bits (of 132) from wire b15.$auto$bmuxmap.cc:58:execute$1812.
Removed top 31 bits (of 66) from wire b15.$auto$bmuxmap.cc:58:execute$1817.
Removed top 31 bits (of 33) from wire b15.$auto$bmuxmap.cc:58:execute$1820.
Removed top 30 bits (of 32) from wire b15.$verific$n1001$168.
Removed top 1 bits (of 31) from wire b15.$verific$n1151$173.
Removed top 1 bits (of 3) from wire b15.$verific$n1294$178.
Removed top 1 bits (of 5) from wire b15.$verific$n2071$211.
Removed top 8 bits (of 16) from wire b15.$verific$n2267$232.
Removed top 1 bits (of 33) from wire b15.$verific$n2793$278.
Removed top 1 bits (of 5) from wire b15.$verific$n3660$305.
Removed top 1 bits (of 33) from wire b15.$verific$n3837$312.
Removed top 1 bits (of 3) from wire b15.$verific$n4619$333.
Removed top 1 bits (of 5) from wire b15.$verific$n4633$335.
Removed top 1 bits (of 4) from wire b15.$verific$n4659$338.
Removed top 1 bits (of 5) from wire b15.$verific$n5590$365.
Removed top 2 bits (of 4) from wire b15.$verific$n5963$376.
Removed top 2 bits (of 4) from wire b15.$verific$n6083$378.
Removed top 1 bits (of 32) from wire b15.$verific$n6129$379.
Removed top 2 bits (of 4) from wire b15.$verific$n6199$381.
Removed top 1 bits (of 5) from wire b15.$verific$n6239$383.
Removed top 1 bits (of 32) from wire b15.$verific$n6315$387.
Removed top 1 bits (of 32) from wire b15.$verific$n8011$431.
Removed top 1 bits (of 4) from wire b15.$verific$n8044$432.
Removed top 1 bits (of 5) from wire b15.$verific$n8254$443.
Removed top 30 bits (of 32) from wire b15.DataWidth.
Removed top 1 bits (of 5) from wire b15.P1.InstQueueRd_Addr.
Removed top 1 bits (of 5) from wire b15.P1.InstQueueWr_Addr.

yosys> peepopt

3.19. Executing PEEPOPT pass (run peephole optimizers).

yosys> opt_clean

3.20. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b15..
Removed 0 unused cells and 81 unused wires.
<suppressed ~1 debug messages>

yosys> bmuxmap

3.21. Executing BMUXMAP pass.

yosys> demuxmap

3.22. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> alumacc

3.23. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module b15:
  creating $macc model for $verific$add_113$b15.vhd:199$592 ($add).
  creating $macc model for $verific$add_210$b15.vhd:308$650 ($add).
  creating $macc model for $verific$add_230$b15.vhd:311$670 ($add).
  creating $macc model for $verific$add_235$b15.vhd:313$674 ($add).
  creating $macc model for $verific$add_254$b15.vhd:314$696 ($add).
  creating $macc model for $verific$add_259$b15.vhd:315$700 ($add).
  creating $macc model for $verific$add_278$b15.vhd:316$721 ($add).
  creating $macc model for $verific$add_28$b15.vhd:127$542 ($add).
  creating $macc model for $verific$add_281$b15.vhd:317$722 ($add).
  creating $macc model for $verific$add_284$b15.vhd:320$724 ($add).
  creating $macc model for $verific$add_360$b15.vhd:346$752 ($add).
  creating $macc model for $verific$add_362$b15.vhd:347$754 ($add).
  creating $macc model for $verific$add_383$b15.vhd:362$763 ($add).
  creating $macc model for $verific$add_387$b15.vhd:362$764 ($add).
  creating $macc model for $verific$add_399$b15.vhd:373$772 ($add).
  creating $macc model for $verific$add_403$b15.vhd:373$773 ($add).
  creating $macc model for $verific$add_422$b15.vhd:393$778 ($add).
  creating $macc model for $verific$add_424$b15.vhd:393$781 ($add).
  creating $macc model for $verific$add_426$b15.vhd:393$784 ($add).
  creating $macc model for $verific$add_427$b15.vhd:393$785 ($add).
  creating $macc model for $verific$add_435$b15.vhd:397$789 ($add).
  creating $macc model for $verific$add_473$b15.vhd:432$801 ($add).
  creating $macc model for $verific$add_669$b15.vhd:548$860 ($add).
  creating $macc model for $verific$add_676$b15.vhd:554$863 ($add).
  creating $macc model for $verific$add_747$b15.vhd:588$924 ($add).
  creating $macc model for $verific$sub_369$b15.vhd:357$756 ($sub).
  creating $macc model for $verific$sub_378$b15.vhd:359$760 ($sub).
  creating $macc model for $verific$sub_379$b15.vhd:359$761 ($sub).
  creating $macc model for $verific$sub_731$b15.vhd:565$908 ($sub).
  creating $macc model for $verific$sub_754$b15.vhd:591$929 ($sub).
  creating $macc model for $verific$unary_minus_287$b15.vhd:322$727 ($neg).
  creating $macc model for $verific$unary_minus_743$b15.vhd:582$918 ($neg).
  creating $alu model for $macc $verific$unary_minus_743$b15.vhd:582$918.
  creating $alu model for $macc $verific$unary_minus_287$b15.vhd:322$727.
  creating $alu model for $macc $verific$sub_754$b15.vhd:591$929.
  creating $alu model for $macc $verific$sub_731$b15.vhd:565$908.
  creating $alu model for $macc $verific$sub_379$b15.vhd:359$761.
  creating $alu model for $macc $verific$sub_378$b15.vhd:359$760.
  creating $alu model for $macc $verific$sub_369$b15.vhd:357$756.
  creating $alu model for $macc $verific$add_747$b15.vhd:588$924.
  creating $alu model for $macc $verific$add_676$b15.vhd:554$863.
  creating $alu model for $macc $verific$add_669$b15.vhd:548$860.
  creating $alu model for $macc $verific$add_473$b15.vhd:432$801.
  creating $alu model for $macc $verific$add_435$b15.vhd:397$789.
  creating $alu model for $macc $verific$add_427$b15.vhd:393$785.
  creating $alu model for $macc $verific$add_426$b15.vhd:393$784.
  creating $alu model for $macc $verific$add_424$b15.vhd:393$781.
  creating $alu model for $macc $verific$add_422$b15.vhd:393$778.
  creating $alu model for $macc $verific$add_403$b15.vhd:373$773.
  creating $alu model for $macc $verific$add_399$b15.vhd:373$772.
  creating $alu model for $macc $verific$add_387$b15.vhd:362$764.
  creating $alu model for $macc $verific$add_383$b15.vhd:362$763.
  creating $alu model for $macc $verific$add_362$b15.vhd:347$754.
  creating $alu model for $macc $verific$add_360$b15.vhd:346$752.
  creating $alu model for $macc $verific$add_284$b15.vhd:320$724.
  creating $alu model for $macc $verific$add_281$b15.vhd:317$722.
  creating $alu model for $macc $verific$add_28$b15.vhd:127$542.
  creating $alu model for $macc $verific$add_278$b15.vhd:316$721.
  creating $alu model for $macc $verific$add_259$b15.vhd:315$700.
  creating $alu model for $macc $verific$add_254$b15.vhd:314$696.
  creating $alu model for $macc $verific$add_235$b15.vhd:313$674.
  creating $alu model for $macc $verific$add_230$b15.vhd:311$670.
  creating $alu model for $macc $verific$add_210$b15.vhd:308$650.
  creating $alu model for $macc $verific$add_113$b15.vhd:199$592.
  creating $alu model for $verific$LessThan_286$b15.vhd:321$726 ($lt): new $alu
  creating $alu model for $verific$LessThan_370$b15.vhd:357$757 ($le): new $alu
  creating $alu model for $verific$LessThan_373$b15.vhd:358$759 ($lt): new $alu
  creating $alu model for $verific$LessThan_397$b15.vhd:372$771 ($le): new $alu
  creating $alu model for $verific$LessThan_462$b15.vhd:414$798 ($le): new $alu
  creating $alu model for $verific$LessThan_729$b15.vhd:565$906 ($lt): new $alu
  creating $alu model for $verific$LessThan_732$b15.vhd:565$909 ($lt): new $alu
  creating $alu model for $verific$LessThan_742$b15.vhd:581$917 ($lt): new $alu
  creating $alu model for $verific$LessThan_755$b15.vhd:591$930 ($lt): new $alu
  creating $alu model for $verific$LessThan_758$b15.vhd:599$932 ($le): new $alu
  creating $alu cell for $verific$LessThan_758$b15.vhd:599$932: $auto$alumacc.cc:485:replace_alu$2743
  creating $alu cell for $verific$LessThan_755$b15.vhd:591$930: $auto$alumacc.cc:485:replace_alu$2752
  creating $alu cell for $verific$LessThan_742$b15.vhd:581$917: $auto$alumacc.cc:485:replace_alu$2757
  creating $alu cell for $verific$LessThan_732$b15.vhd:565$909: $auto$alumacc.cc:485:replace_alu$2762
  creating $alu cell for $verific$LessThan_729$b15.vhd:565$906: $auto$alumacc.cc:485:replace_alu$2767
  creating $alu cell for $verific$LessThan_462$b15.vhd:414$798: $auto$alumacc.cc:485:replace_alu$2778
  creating $alu cell for $verific$LessThan_397$b15.vhd:372$771: $auto$alumacc.cc:485:replace_alu$2791
  creating $alu cell for $verific$LessThan_373$b15.vhd:358$759: $auto$alumacc.cc:485:replace_alu$2804
  creating $alu cell for $verific$LessThan_370$b15.vhd:357$757: $auto$alumacc.cc:485:replace_alu$2809
  creating $alu cell for $verific$LessThan_286$b15.vhd:321$726: $auto$alumacc.cc:485:replace_alu$2822
  creating $alu cell for $verific$add_113$b15.vhd:199$592: $auto$alumacc.cc:485:replace_alu$2827
  creating $alu cell for $verific$add_210$b15.vhd:308$650: $auto$alumacc.cc:485:replace_alu$2830
  creating $alu cell for $verific$add_230$b15.vhd:311$670: $auto$alumacc.cc:485:replace_alu$2833
  creating $alu cell for $verific$add_235$b15.vhd:313$674: $auto$alumacc.cc:485:replace_alu$2836
  creating $alu cell for $verific$add_254$b15.vhd:314$696: $auto$alumacc.cc:485:replace_alu$2839
  creating $alu cell for $verific$add_259$b15.vhd:315$700: $auto$alumacc.cc:485:replace_alu$2842
  creating $alu cell for $verific$add_278$b15.vhd:316$721: $auto$alumacc.cc:485:replace_alu$2845
  creating $alu cell for $verific$add_28$b15.vhd:127$542: $auto$alumacc.cc:485:replace_alu$2848
  creating $alu cell for $verific$add_281$b15.vhd:317$722: $auto$alumacc.cc:485:replace_alu$2851
  creating $alu cell for $verific$add_284$b15.vhd:320$724: $auto$alumacc.cc:485:replace_alu$2854
  creating $alu cell for $verific$add_360$b15.vhd:346$752: $auto$alumacc.cc:485:replace_alu$2857
  creating $alu cell for $verific$add_362$b15.vhd:347$754: $auto$alumacc.cc:485:replace_alu$2860
  creating $alu cell for $verific$add_383$b15.vhd:362$763: $auto$alumacc.cc:485:replace_alu$2863
  creating $alu cell for $verific$add_387$b15.vhd:362$764: $auto$alumacc.cc:485:replace_alu$2866
  creating $alu cell for $verific$add_399$b15.vhd:373$772: $auto$alumacc.cc:485:replace_alu$2869
  creating $alu cell for $verific$add_403$b15.vhd:373$773: $auto$alumacc.cc:485:replace_alu$2872
  creating $alu cell for $verific$add_422$b15.vhd:393$778: $auto$alumacc.cc:485:replace_alu$2875
  creating $alu cell for $verific$add_424$b15.vhd:393$781: $auto$alumacc.cc:485:replace_alu$2878
  creating $alu cell for $verific$add_426$b15.vhd:393$784: $auto$alumacc.cc:485:replace_alu$2881
  creating $alu cell for $verific$add_427$b15.vhd:393$785: $auto$alumacc.cc:485:replace_alu$2884
  creating $alu cell for $verific$add_435$b15.vhd:397$789: $auto$alumacc.cc:485:replace_alu$2887
  creating $alu cell for $verific$add_473$b15.vhd:432$801: $auto$alumacc.cc:485:replace_alu$2890
  creating $alu cell for $verific$add_669$b15.vhd:548$860: $auto$alumacc.cc:485:replace_alu$2893
  creating $alu cell for $verific$add_676$b15.vhd:554$863: $auto$alumacc.cc:485:replace_alu$2896
  creating $alu cell for $verific$add_747$b15.vhd:588$924: $auto$alumacc.cc:485:replace_alu$2899
  creating $alu cell for $verific$sub_369$b15.vhd:357$756: $auto$alumacc.cc:485:replace_alu$2902
  creating $alu cell for $verific$sub_378$b15.vhd:359$760: $auto$alumacc.cc:485:replace_alu$2905
  creating $alu cell for $verific$sub_379$b15.vhd:359$761: $auto$alumacc.cc:485:replace_alu$2908
  creating $alu cell for $verific$sub_731$b15.vhd:565$908: $auto$alumacc.cc:485:replace_alu$2911
  creating $alu cell for $verific$sub_754$b15.vhd:591$929: $auto$alumacc.cc:485:replace_alu$2914
  creating $alu cell for $verific$unary_minus_287$b15.vhd:322$727: $auto$alumacc.cc:485:replace_alu$2917
  creating $alu cell for $verific$unary_minus_743$b15.vhd:582$918: $auto$alumacc.cc:485:replace_alu$2920
  created 42 $alu and 0 $macc cells.

yosys> opt_expr

3.24. Executing OPT_EXPR pass (perform const folding).
Optimizing module b15.
<suppressed ~6 debug messages>

yosys> opt_merge -nomux

3.25. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b15'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.26. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b15..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~91 debug messages>

yosys> opt_reduce

3.27. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b15.
Performed a total of 0 changes.

yosys> opt_merge

3.28. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b15'.
Removed a total of 0 cells.

yosys> opt_share

3.29. Executing OPT_SHARE pass.

yosys> opt_dff -nodffe -nosdff

3.30. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.31. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b15..
Removed 4 unused cells and 15 unused wires.
<suppressed ~5 debug messages>

yosys> opt_expr

3.32. Executing OPT_EXPR pass (perform const folding).
Optimizing module b15.

yosys> opt_muxtree

3.33. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b15..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~91 debug messages>

yosys> opt_reduce

3.34. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b15.
Performed a total of 0 changes.

yosys> opt_merge

3.35. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b15'.
Removed a total of 0 cells.

yosys> opt_share

3.36. Executing OPT_SHARE pass.

yosys> opt_dff -nodffe -nosdff

3.37. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.38. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b15..

yosys> opt_expr

3.39. Executing OPT_EXPR pass (perform const folding).
Optimizing module b15.
MAX OPT ITERATION = 2

yosys> stat

3.40. Printing statistics.

=== b15 ===

   Number of wires:                791
   Number of wire bits:          10191
   Number of public wires:          50
   Number of public wire bits:     453
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                853
     $adff                           2
     $adffe                         46
     $alu                           42
     $and                           22
     $eq                            22
     $logic_not                      1
     $mux                          526
     $ne                            67
     $not                           20
     $or                            10
     $pmux                          17
     $reduce_and                    44
     $reduce_bool                    4
     $reduce_or                     26
     $shl                            4


yosys> memory -nomap

3.41. Executing MEMORY pass.

yosys> opt_mem

3.41.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

yosys> opt_mem_priority

3.41.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

yosys> opt_mem_feedback

3.41.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

yosys> memory_bmux2rom

3.41.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

yosys> memory_dff

3.41.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

yosys> opt_clean

3.41.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b15..

yosys> memory_share

3.41.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

yosys> opt_mem_widen

3.41.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

yosys> opt_clean

3.41.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b15..

yosys> memory_collect

3.41.10. Executing MEMORY_COLLECT pass (generating $mem cells).

yosys> stat

3.42. Printing statistics.

=== b15 ===

   Number of wires:                791
   Number of wire bits:          10191
   Number of public wires:          50
   Number of public wire bits:     453
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                853
     $adff                           2
     $adffe                         46
     $alu                           42
     $and                           22
     $eq                            22
     $logic_not                      1
     $mux                          526
     $ne                            67
     $not                           20
     $or                            10
     $pmux                          17
     $reduce_and                    44
     $reduce_bool                    4
     $reduce_or                     26
     $shl                            4


yosys> muxpack

3.43. Executing MUXPACK pass ($mux cell cascades to $pmux).
Converted 0 (p)mux cells into 0 pmux cells.
<suppressed ~440 debug messages>

yosys> opt_clean

3.44. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b15..

yosys> pmuxtree

3.45. Executing PMUXTREE pass.

yosys> muxpack

3.46. Executing MUXPACK pass ($mux cell cascades to $pmux).
Converting b15.$auto$pmuxtree.cc:65:recursive_mux_generator$3091 ... b15.$auto$pmuxtree.cc:65:recursive_mux_generator$3093 to a pmux with 2 cases.
Converting b15.$auto$pmuxtree.cc:65:recursive_mux_generator$3065 ... b15.$auto$pmuxtree.cc:65:recursive_mux_generator$3067 to a pmux with 2 cases.
Converting b15.$auto$pmuxtree.cc:65:recursive_mux_generator$2943 ... b15.$auto$pmuxtree.cc:65:recursive_mux_generator$2945 to a pmux with 2 cases.
Converting b15.$auto$pmuxtree.cc:65:recursive_mux_generator$2929 ... b15.$auto$pmuxtree.cc:65:recursive_mux_generator$2931 to a pmux with 2 cases.
Converted 8 (p)mux cells into 4 pmux cells.
<suppressed ~492 debug messages>

yosys> memory_map

3.47. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

yosys> stat

3.48. Printing statistics.

=== b15 ===

   Number of wires:                908
   Number of wire bits:          11203
   Number of public wires:          50
   Number of public wire bits:     453
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                949
     $adff                           2
     $adffe                         46
     $alu                           42
     $and                           22
     $eq                            22
     $logic_not                      1
     $mux                          582
     $ne                            67
     $not                           37
     $or                            26
     $pmux                           4
     $reduce_and                    44
     $reduce_bool                    4
     $reduce_or                     46
     $shl                            4


yosys> techmap -map +/techmap.v -map +/rapidsilicon/genesis/arith_map.v

3.49. Executing TECHMAP pass (map to technology primitives).

3.49.1. Executing Verilog-2005 frontend: /home/users/khyber.runner/yosys_verific_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/khyber.runner/yosys_verific_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.49.2. Executing Verilog-2005 frontend: /home/users/khyber.runner/yosys_verific_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/arith_map.v
Parsing Verilog input from `/home/users/khyber.runner/yosys_verific_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_rs_alu'.
Successfully finished Verilog frontend.

3.49.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $mux.
Using template $paramod$c5c783b17ab1d780abfad8cfe6563a0a7b47a3b0\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $reduce_bool.
Using template $paramod$740b056ede97228d3eae64ea2fdc81f0a33e0fe7\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $adffe.
Using extmapper simplemap for cells of type $and.
Using template $paramod$44a13d10af618e7fbe7b9aad2f6151ffcee1e2fa\_90_alu for cells of type $alu.
Using template $paramod$32a7b7b86c07519b7537abc18e96f0331f97914d\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $adff.
Using template $paramod$constmap:0c58e37f7f9ab9c08bb604a660a738f4cdfdf6a8$paramod$0c53878c2ab6a84f047b5c15f705bf752551700e\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using template $paramod$c3cd1564c35d873179656addd6052d7ea8b6d991\_90_alu for cells of type $alu.
Using template $paramod$354e377aaa263356a1a43d04ca847f8b92483a2a\_80_rs_alu for cells of type $alu.
Using template $paramod$788c3d57e5abb3a3f89aea6d4acd665be37f4e9b\_90_alu for cells of type $alu.
Using template $paramod$6a42b6fefed750f8a1c58eab59479d960557103c\_90_alu for cells of type $alu.
Using template $paramod$d1615bf4e5e328245ffd1550e5fe105901cda77b\_90_alu for cells of type $alu.
Using template $paramod$943564b9366bbc392bf4bbc801aa0a2d7742a4e0\_90_alu for cells of type $alu.
Using template $paramod$4ccbe221165818e15f326ddee3d1183c7924e12f\_90_alu for cells of type $alu.
Using template $paramod$e891e6b399cf52748460a311fafe476815d24bd7\_90_alu for cells of type $alu.
Using template $paramod$b85fbb3374a1d9ba7ee4f4d6323c30f939df3ada\_90_alu for cells of type $alu.
Using template $paramod$e04283ca12514baf3d204c6994bec8f178dd89f8\_90_alu for cells of type $alu.
Using template $paramod$79fc87901d7fd8aaad689b5406671422f5fa25b9\_80_rs_alu for cells of type $alu.
Using template $paramod$653d0dc5a667330298513325d0bd1def0e6c1128\_90_alu for cells of type $alu.
Using template $paramod$2c4d537db249d5ee7774cabca037a7502075cb7a\_80_rs_alu for cells of type $alu.
Using template $paramod$076c9a7a3f037230073fe14dd4865d470cb48917\_90_alu for cells of type $alu.
Using template $paramod$dfca81329cbbac01700318224209a5f2318c7128\_90_alu for cells of type $alu.
Using template $paramod$175e67c02b86e96b1288b9dc100122520d7240d8\_90_alu for cells of type $alu.
Using template $paramod$f85408ed1aa3d09e465edae8a7bf590332ae9f7b\_90_alu for cells of type $alu.
Using template $paramod$bfceb922395790c0ce92e9f9b5b428d4fc72cc30\_90_alu for cells of type $alu.
Using template $paramod$1a3a0c35c4a4896fbfd612699525c057298e72d2\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $eq.
Using template $paramod$b3c20b05d9b1fc2c940ef2f6c917486aead042e8\_90_alu for cells of type $alu.
Using template $paramod$83dd457849c736323edf2edb15923eb27f99c683\_90_alu for cells of type $alu.
Using template $paramod$63a3f1ffa662be02d3403b533885c56d18ebe02a\_80_rs_alu for cells of type $alu.
Using extmapper simplemap for cells of type $logic_not.
Using template $paramod$8fabc56b80a569262acfc42757a02ca0b8e91278\_90_pmux for cells of type $pmux.
Using template $paramod$f08cf4b531f7b2bd95251b79857dfb970a6679fc\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000100 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011110 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001000 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011111 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000100000 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000010 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000101 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001001 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000110 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000011 for cells of type $lcu.
No more expansions possible.
<suppressed ~6672 debug messages>

yosys> stat

3.50. Printing statistics.

=== b15 ===

   Number of wires:               4104
   Number of wire bits:          73455
   Number of public wires:          50
   Number of public wire bits:     453
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:              13273
     $_AND_                       1867
     $_DFFE_PP0P_                  407
     $_DFF_PP0_                      7
     $_MUX_                       6935
     $_NOT_                        704
     $_OR_                        1524
     $_XOR_                       1641
     adder_carry                   188


yosys> opt_expr

3.51. Executing OPT_EXPR pass (perform const folding).
Optimizing module b15.
<suppressed ~4038 debug messages>

yosys> opt_merge -nomux

3.52. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b15'.
<suppressed ~4644 debug messages>
Removed a total of 1548 cells.

yosys> opt_muxtree

3.53. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b15..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.54. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b15.
Performed a total of 0 changes.

yosys> opt_merge

3.55. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b15'.
Removed a total of 0 cells.

yosys> opt_share

3.56. Executing OPT_SHARE pass.

yosys> opt_dff -nodffe -nosdff

3.57. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.58. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b15..
Removed 498 unused cells and 3041 unused wires.
<suppressed ~499 debug messages>

yosys> opt_expr

3.59. Executing OPT_EXPR pass (perform const folding).
Optimizing module b15.
<suppressed ~147 debug messages>

yosys> opt_muxtree

3.60. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b15..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.61. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b15.
Performed a total of 0 changes.

yosys> opt_merge

3.62. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b15'.
Removed a total of 0 cells.

yosys> opt_share

3.63. Executing OPT_SHARE pass.

yosys> opt_dff -nodffe -nosdff

3.64. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.65. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b15..
Removed 1 unused cells and 24 unused wires.
<suppressed ~2 debug messages>

yosys> opt_expr

3.66. Executing OPT_EXPR pass (perform const folding).
Optimizing module b15.

yosys> opt_muxtree

3.67. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b15..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.68. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b15.
Performed a total of 0 changes.

yosys> opt_merge

3.69. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b15'.
Removed a total of 0 cells.

yosys> opt_share

3.70. Executing OPT_SHARE pass.

yosys> opt_dff -nodffe -nosdff

3.71. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.72. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b15..

yosys> opt_expr

3.73. Executing OPT_EXPR pass (perform const folding).
Optimizing module b15.
MAX OPT ITERATION = 3

yosys> opt -nodffe -fast -full -nosdff

3.74. Executing OPT pass (performing simple optimizations).

yosys> opt_expr -full

3.74.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b15.
<suppressed ~3032 debug messages>

yosys> opt_merge

3.74.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b15'.
<suppressed ~36 debug messages>
Removed a total of 12 cells.

yosys> opt_dff -nodffe -nosdff

3.74.3. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.74.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b15..
Removed 0 unused cells and 149 unused wires.
<suppressed ~1 debug messages>

3.74.5. Finished fast OPT passes.

yosys> techmap -map +/techmap.v

3.75. Executing TECHMAP pass (map to technology primitives).

3.75.1. Executing Verilog-2005 frontend: /home/users/khyber.runner/yosys_verific_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/khyber.runner/yosys_verific_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.75.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~71 debug messages>

yosys> opt -nodffe -sat -nosdff

3.76. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.76.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b15.

yosys> opt_merge -nomux

3.76.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b15'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.76.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b15..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.76.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b15.
Performed a total of 0 changes.

yosys> opt_merge

3.76.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b15'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -sat -nosdff

3.76.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.76.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b15..

yosys> opt_expr

3.76.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module b15.

3.76.9. Finished OPT passes. (There is nothing left to do.)

yosys> abc -dff

3.77. Executing ABC pass (technology mapping using ABC).

3.77.1. Summary of detected clock domains:
  14 cells in clk=\CLOCK, en=$auto$opt_dff.cc:219:make_patterns_logic$2049, arst=\RESET, srst={ }
  7 cells in clk=\CLOCK, en=$auto$opt_dff.cc:219:make_patterns_logic$2004, arst=\RESET, srst={ }
  425 cells in clk=\CLOCK, en=$auto$opt_dff.cc:219:make_patterns_logic$2568, arst=\RESET, srst={ }
  59 cells in clk=\CLOCK, en=$auto$opt_dff.cc:219:make_patterns_logic$2589, arst=\RESET, srst={ }
  21 cells in clk=\CLOCK, en=$auto$opt_dff.cc:194:make_patterns_logic$2640, arst=\RESET, srst={ }
  90 cells in clk=\CLOCK, en=$auto$opt_dff.cc:219:make_patterns_logic$2068, arst=\RESET, srst={ }
  128 cells in clk=\CLOCK, en=$auto$opt_dff.cc:219:make_patterns_logic$2110, arst=\RESET, srst={ }
  12 cells in clk=\CLOCK, en=$auto$opt_dff.cc:219:make_patterns_logic$2525, arst=\RESET, srst={ }
  45 cells in clk=\CLOCK, en=$auto$opt_dff.cc:219:make_patterns_logic$2168, arst=\RESET, srst={ }
  50 cells in clk=\CLOCK, en=$auto$opt_dff.cc:219:make_patterns_logic$2151, arst=\RESET, srst={ }
  32 cells in clk=\CLOCK, en=$auto$opt_dff.cc:219:make_patterns_logic$2478, arst=\RESET, srst={ }
  45 cells in clk=\CLOCK, en=$auto$opt_dff.cc:219:make_patterns_logic$2321, arst=\RESET, srst={ }
  29 cells in clk=\CLOCK, en=$auto$opt_dff.cc:219:make_patterns_logic$2338, arst=\RESET, srst={ }
  45 cells in clk=\CLOCK, en=$auto$opt_dff.cc:219:make_patterns_logic$2355, arst=\RESET, srst={ }
  29 cells in clk=\CLOCK, en=$auto$opt_dff.cc:219:make_patterns_logic$2372, arst=\RESET, srst={ }
  45 cells in clk=\CLOCK, en=$auto$opt_dff.cc:219:make_patterns_logic$2389, arst=\RESET, srst={ }
  29 cells in clk=\CLOCK, en=$auto$opt_dff.cc:219:make_patterns_logic$2406, arst=\RESET, srst={ }
  65 cells in clk=\CLOCK, en=$auto$opt_dff.cc:219:make_patterns_logic$2423, arst=\RESET, srst={ }
  29 cells in clk=\CLOCK, en=$auto$opt_dff.cc:219:make_patterns_logic$2185, arst=\RESET, srst={ }
  45 cells in clk=\CLOCK, en=$auto$opt_dff.cc:219:make_patterns_logic$2202, arst=\RESET, srst={ }
  29 cells in clk=\CLOCK, en=$auto$opt_dff.cc:219:make_patterns_logic$2219, arst=\RESET, srst={ }
  45 cells in clk=\CLOCK, en=$auto$opt_dff.cc:219:make_patterns_logic$2236, arst=\RESET, srst={ }
  29 cells in clk=\CLOCK, en=$auto$opt_dff.cc:219:make_patterns_logic$2253, arst=\RESET, srst={ }
  45 cells in clk=\CLOCK, en=$auto$opt_dff.cc:219:make_patterns_logic$2270, arst=\RESET, srst={ }
  29 cells in clk=\CLOCK, en=$auto$opt_dff.cc:219:make_patterns_logic$2287, arst=\RESET, srst={ }
  29 cells in clk=\CLOCK, en=$auto$opt_dff.cc:219:make_patterns_logic$2304, arst=\RESET, srst={ }
  192 cells in clk=\CLOCK, en=$auto$opt_dff.cc:219:make_patterns_logic$1985, arst=\RESET, srst={ }
  221 cells in clk=\CLOCK, en=$auto$opt_dff.cc:219:make_patterns_logic$2451, arst=\RESET, srst={ }
  4 cells in clk=\CLOCK, en=$auto$opt_dff.cc:219:make_patterns_logic$2620, arst=\RESET, srst={ }
  30 cells in clk=\CLOCK, en=$auto$opt_dff.cc:219:make_patterns_logic$2032, arst=\RESET, srst={ }
  1389 cells in clk=\CLOCK, en={ }, arst=\RESET, srst={ }
  391 cells in clk=\CLOCK, en=$auto$opt_dff.cc:219:make_patterns_logic$2545, arst=\RESET, srst={ }
  13 cells in clk=\CLOCK, en=$auto$opt_dff.cc:219:make_patterns_logic$2637, arst=\RESET, srst={ }
  712 cells in clk=\CLOCK, en=$auto$opt_dff.cc:219:make_patterns_logic$2015, arst=\RESET, srst={ }
  3 cells in clk=\CLOCK, en=$auto$opt_dff.cc:194:make_patterns_logic$2650, arst=\RESET, srst={ }
  33 cells in clk=\CLOCK, en=$auto$opt_dff.cc:219:make_patterns_logic$2656, arst=\RESET, srst={ }
  196 cells in clk=\CLOCK, en=$auto$opt_dff.cc:219:make_patterns_logic$2146, arst=\RESET, srst={ }
  14 cells in clk=\CLOCK, en=$auto$opt_dff.cc:219:make_patterns_logic$2129, arst=\RESET, srst={ }
  72 cells in clk=\CLOCK, en=$auto$opt_dff.cc:219:make_patterns_logic$2440, arst=\RESET, srst={ }
  414 cells in clk=\CLOCK, en=$auto$opt_dff.cc:219:make_patterns_logic$2503, arst=\RESET, srst={ }
  15 cells in clk=\CLOCK, en=$auto$opt_dff.cc:219:make_patterns_logic$1962, arst=\RESET, srst={ }
  51 cells in clk=\CLOCK, en=$auto$opt_dff.cc:219:make_patterns_logic$1998, arst=\RESET, srst={ }

3.77.2. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2049, asynchronously reset by \RESET
Extracted 14 gates and 30 wires to a netlist network with 14 inputs and 6 outputs.

3.77.2.1. Executing ABC.

3.77.3. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2004, asynchronously reset by \RESET
Extracted 7 gates and 15 wires to a netlist network with 8 inputs and 7 outputs.

3.77.3.1. Executing ABC.

3.77.4. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2568, asynchronously reset by \RESET
Extracted 425 gates and 534 wires to a netlist network with 108 inputs and 102 outputs.

3.77.4.1. Executing ABC.

3.77.5. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2589, asynchronously reset by \RESET
Extracted 59 gates and 118 wires to a netlist network with 59 inputs and 33 outputs.

3.77.5.1. Executing ABC.

3.77.6. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $auto$opt_dff.cc:194:make_patterns_logic$2640, asynchronously reset by \RESET
Extracted 21 gates and 33 wires to a netlist network with 11 inputs and 5 outputs.

3.77.6.1. Executing ABC.

3.77.7. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2068, asynchronously reset by \RESET
Extracted 90 gates and 168 wires to a netlist network with 77 inputs and 35 outputs.

3.77.7.1. Executing ABC.

3.77.8. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2110, asynchronously reset by \RESET
Extracted 122 gates and 212 wires to a netlist network with 89 inputs and 16 outputs.

3.77.8.1. Executing ABC.

3.77.9. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2525, asynchronously reset by \RESET
Extracted 12 gates and 23 wires to a netlist network with 9 inputs and 4 outputs.

3.77.9.1. Executing ABC.

3.77.10. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2168, asynchronously reset by \RESET
Extracted 45 gates and 85 wires to a netlist network with 40 inputs and 25 outputs.

3.77.10.1. Executing ABC.

3.77.11. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2151, asynchronously reset by \RESET
Extracted 50 gates and 82 wires to a netlist network with 30 inputs and 16 outputs.

3.77.11.1. Executing ABC.

3.77.12. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2478, asynchronously reset by \RESET
Extracted 32 gates and 62 wires to a netlist network with 29 inputs and 12 outputs.

3.77.12.1. Executing ABC.

3.77.13. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2321, asynchronously reset by \RESET
Extracted 45 gates and 85 wires to a netlist network with 40 inputs and 25 outputs.

3.77.13.1. Executing ABC.

3.77.14. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2338, asynchronously reset by \RESET
Extracted 29 gates and 60 wires to a netlist network with 31 inputs and 17 outputs.

3.77.14.1. Executing ABC.

3.77.15. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2355, asynchronously reset by \RESET
Extracted 45 gates and 85 wires to a netlist network with 40 inputs and 25 outputs.

3.77.15.1. Executing ABC.

3.77.16. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2372, asynchronously reset by \RESET
Extracted 29 gates and 60 wires to a netlist network with 31 inputs and 17 outputs.

3.77.16.1. Executing ABC.

3.77.17. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2389, asynchronously reset by \RESET
Extracted 45 gates and 85 wires to a netlist network with 40 inputs and 25 outputs.

3.77.17.1. Executing ABC.

3.77.18. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2406, asynchronously reset by \RESET
Extracted 29 gates and 60 wires to a netlist network with 31 inputs and 17 outputs.

3.77.18.1. Executing ABC.

3.77.19. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2423, asynchronously reset by \RESET
Extracted 65 gates and 107 wires to a netlist network with 41 inputs and 43 outputs.

3.77.19.1. Executing ABC.

3.77.20. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2185, asynchronously reset by \RESET
Extracted 29 gates and 60 wires to a netlist network with 31 inputs and 17 outputs.

3.77.20.1. Executing ABC.

3.77.21. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2202, asynchronously reset by \RESET
Extracted 45 gates and 85 wires to a netlist network with 40 inputs and 25 outputs.

3.77.21.1. Executing ABC.

3.77.22. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2219, asynchronously reset by \RESET
Extracted 29 gates and 60 wires to a netlist network with 31 inputs and 17 outputs.

3.77.22.1. Executing ABC.

3.77.23. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2236, asynchronously reset by \RESET
Extracted 45 gates and 85 wires to a netlist network with 40 inputs and 25 outputs.

3.77.23.1. Executing ABC.

3.77.24. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2253, asynchronously reset by \RESET
Extracted 29 gates and 60 wires to a netlist network with 31 inputs and 17 outputs.

3.77.24.1. Executing ABC.

3.77.25. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2270, asynchronously reset by \RESET
Extracted 45 gates and 85 wires to a netlist network with 40 inputs and 25 outputs.

3.77.25.1. Executing ABC.

3.77.26. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2287, asynchronously reset by \RESET
Extracted 29 gates and 60 wires to a netlist network with 31 inputs and 17 outputs.

3.77.26.1. Executing ABC.

3.77.27. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2304, asynchronously reset by \RESET
Extracted 29 gates and 60 wires to a netlist network with 31 inputs and 17 outputs.

3.77.27.1. Executing ABC.

3.77.28. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $auto$opt_dff.cc:219:make_patterns_logic$1985, asynchronously reset by \RESET
Extracted 136 gates and 188 wires to a netlist network with 50 inputs and 76 outputs.

3.77.28.1. Executing ABC.

3.77.29. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2451, asynchronously reset by \RESET
Extracted 221 gates and 328 wires to a netlist network with 107 inputs and 118 outputs.

3.77.29.1. Executing ABC.

3.77.30. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2620, asynchronously reset by \RESET
Extracted 4 gates and 10 wires to a netlist network with 6 inputs and 3 outputs.

3.77.30.1. Executing ABC.

3.77.31. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2032, asynchronously reset by \RESET
Extracted 30 gates and 50 wires to a netlist network with 19 inputs and 18 outputs.

3.77.31.1. Executing ABC.

3.77.32. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, asynchronously reset by \RESET
Extracted 1266 gates and 2188 wires to a netlist network with 920 inputs and 404 outputs.

3.77.32.1. Executing ABC.

3.77.33. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2545, asynchronously reset by \RESET
Extracted 391 gates and 574 wires to a netlist network with 182 inputs and 91 outputs.

3.77.33.1. Executing ABC.

3.77.34. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2637, asynchronously reset by \RESET
Extracted 13 gates and 25 wires to a netlist network with 12 inputs and 4 outputs.

3.77.34.1. Executing ABC.

3.77.35. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2015, asynchronously reset by \RESET
Extracted 712 gates and 959 wires to a netlist network with 246 inputs and 304 outputs.

3.77.35.1. Executing ABC.

3.77.36. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $auto$opt_dff.cc:194:make_patterns_logic$2650, asynchronously reset by \RESET
Extracted 3 gates and 7 wires to a netlist network with 4 inputs and 3 outputs.

3.77.36.1. Executing ABC.

3.77.37. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2656, asynchronously reset by \RESET
Extracted 33 gates and 67 wires to a netlist network with 34 inputs and 31 outputs.

3.77.37.1. Executing ABC.

3.77.38. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2146, asynchronously reset by \RESET
Extracted 196 gates and 234 wires to a netlist network with 38 inputs and 93 outputs.

3.77.38.1. Executing ABC.

3.77.39. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2129, asynchronously reset by \RESET
Extracted 11 gates and 21 wires to a netlist network with 10 inputs and 5 outputs.

3.77.39.1. Executing ABC.

3.77.40. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2440, asynchronously reset by \RESET
Extracted 72 gates and 93 wires to a netlist network with 20 inputs and 50 outputs.

3.77.40.1. Executing ABC.

3.77.41. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2503, asynchronously reset by \RESET
Extracted 414 gates and 461 wires to a netlist network with 47 inputs and 126 outputs.

3.77.41.1. Executing ABC.

3.77.42. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $auto$opt_dff.cc:219:make_patterns_logic$1962, asynchronously reset by \RESET
Extracted 15 gates and 30 wires to a netlist network with 15 inputs and 5 outputs.

3.77.42.1. Executing ABC.

3.77.43. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $auto$opt_dff.cc:219:make_patterns_logic$1998, asynchronously reset by \RESET
Extracted 51 gates and 85 wires to a netlist network with 33 inputs and 24 outputs.

3.77.43.1. Executing ABC.

yosys> abc -dff

3.78. Executing ABC pass (technology mapping using ABC).

3.78.1. Summary of detected clock domains:
  31 cells in clk=\CLOCK, en=$abc$20613$auto$opt_dff.cc:219:make_patterns_logic$2253, arst=\RESET, srst={ }
  37 cells in clk=\CLOCK, en=$abc$20651$auto$opt_dff.cc:219:make_patterns_logic$2270, arst=\RESET, srst={ }
  21 cells in clk=\CLOCK, en=$abc$20697$auto$opt_dff.cc:219:make_patterns_logic$2287, arst=\RESET, srst={ }
  50 cells in clk=\CLOCK, en=$abc$25156$auto$opt_dff.cc:219:make_patterns_logic$1962, arst=\RESET, srst={ }
  13 cells in clk=\CLOCK, en=$abc$19127$auto$opt_dff.cc:219:make_patterns_logic$2049, arst=\RESET, srst={ }
  5 cells in clk=\CLOCK, en=$abc$24436$auto$opt_dff.cc:194:make_patterns_logic$2650, arst=\RESET, srst={ }
  12 cells in clk=\CLOCK, en=$abc$23335$auto$opt_dff.cc:219:make_patterns_logic$2637, arst=\RESET, srst={ }
  7 cells in clk=\CLOCK, en=$abc$19142$auto$opt_dff.cc:219:make_patterns_logic$2004, arst=\RESET, srst={ }
  475 cells in clk=\CLOCK, en=$abc$19162$auto$opt_dff.cc:219:make_patterns_logic$2568, arst=\RESET, srst={ }
  8 cells in clk=\CLOCK, en=$abc$19988$auto$opt_dff.cc:219:make_patterns_logic$2525, arst=\RESET, srst={ }
  31 cells in clk=\CLOCK, en=$abc$24759$auto$opt_dff.cc:219:make_patterns_logic$2129, arst=\RESET, srst={ }
  38 cells in clk=\CLOCK, en=$abc$20047$auto$opt_dff.cc:219:make_patterns_logic$2151, arst=\RESET, srst={ }
  31 cells in clk=\CLOCK, en=$abc$20001$auto$opt_dff.cc:219:make_patterns_logic$2168, arst=\RESET, srst={ }
  816 cells in clk=\CLOCK, en=$abc$23349$auto$opt_dff.cc:219:make_patterns_logic$2015, arst=\RESET, srst={ }
  41 cells in clk=\CLOCK, en=$abc$20377$auto$opt_dff.cc:219:make_patterns_logic$2423, arst=\RESET, srst={ }
  508 cells in clk=\CLOCK, en=$abc$24536$auto$opt_dff.cc:219:make_patterns_logic$2146, arst=\RESET, srst={ }
  374 cells in clk=\CLOCK, en=$abc$22976$auto$opt_dff.cc:219:make_patterns_logic$2545, arst=\RESET, srst={ }
  27 cells in clk=\CLOCK, en=$abc$20445$auto$opt_dff.cc:219:make_patterns_logic$2185, arst=\RESET, srst={ }
  39 cells in clk=\CLOCK, en=$abc$24442$auto$opt_dff.cc:219:make_patterns_logic$2656, arst=\RESET, srst={ }
  109 cells in clk=\CLOCK, en=$abc$24772$auto$opt_dff.cc:219:make_patterns_logic$2440, arst=\RESET, srst={ }
  225 cells in clk=\CLOCK, en=$abc$20950$auto$opt_dff.cc:219:make_patterns_logic$2451, arst=\RESET, srst={ }
  25 cells in clk=\CLOCK, en=$abc$20125$auto$opt_dff.cc:219:make_patterns_logic$2321, arst=\RESET, srst={ }
  25 cells in clk=\CLOCK, en=$abc$20339$auto$opt_dff.cc:219:make_patterns_logic$2406, arst=\RESET, srst={ }
  31 cells in clk=\CLOCK, en=$abc$20091$auto$opt_dff.cc:219:make_patterns_logic$2478, arst=\RESET, srst={ }
  93 cells in clk=\CLOCK, en=$abc$19881$auto$opt_dff.cc:219:make_patterns_logic$2110, arst=\RESET, srst={ }
  16 cells in clk=\CLOCK, en=$abc$19720$auto$opt_dff.cc:194:make_patterns_logic$2640, arst=\RESET, srst={ }
  21 cells in clk=\CLOCK, en=$abc$20293$auto$opt_dff.cc:219:make_patterns_logic$2389, arst=\RESET, srst={ }
  21 cells in clk=\CLOCK, en=$abc$20255$auto$opt_dff.cc:219:make_patterns_logic$2372, arst=\RESET, srst={ }
  21 cells in clk=\CLOCK, en=$abc$20209$auto$opt_dff.cc:219:make_patterns_logic$2355, arst=\RESET, srst={ }
  22 cells in clk=\CLOCK, en=$abc$20171$auto$opt_dff.cc:219:make_patterns_logic$2338, arst=\RESET, srst={ }
  2 cells in clk=\CLOCK, en=$abc$21202$auto$opt_dff.cc:219:make_patterns_logic$2620, arst=\RESET, srst={ }
  34 cells in clk=\CLOCK, en=$abc$21208$auto$opt_dff.cc:219:make_patterns_logic$2032, arst=\RESET, srst={ }
  31 cells in clk=\CLOCK, en=$abc$20483$auto$opt_dff.cc:219:make_patterns_logic$2202, arst=\RESET, srst={ }
  1201 cells in clk=\CLOCK, en={ }, arst=\RESET, srst={ }
  23 cells in clk=\CLOCK, en=$abc$20529$auto$opt_dff.cc:219:make_patterns_logic$2219, arst=\RESET, srst={ }
  27 cells in clk=\CLOCK, en=$abc$20567$auto$opt_dff.cc:219:make_patterns_logic$2236, arst=\RESET, srst={ }
  27 cells in clk=\CLOCK, en=$abc$20735$auto$opt_dff.cc:219:make_patterns_logic$2304, arst=\RESET, srst={ }
  681 cells in clk=\CLOCK, en=$abc$20773$auto$opt_dff.cc:219:make_patterns_logic$1985, arst=\RESET, srst={ }
  74 cells in clk=\CLOCK, en=$abc$19616$auto$opt_dff.cc:219:make_patterns_logic$2589, arst=\RESET, srst={ }
  428 cells in clk=\CLOCK, en=$abc$24846$auto$opt_dff.cc:219:make_patterns_logic$2503, arst=\RESET, srst={ }
  70 cells in clk=\CLOCK, en=$abc$19743$auto$opt_dff.cc:219:make_patterns_logic$2068, arst=\RESET, srst={ }
  45 cells in clk=\CLOCK, en=$abc$25174$auto$opt_dff.cc:219:make_patterns_logic$1998, arst=\RESET, srst={ }

3.78.2. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$20613$auto$opt_dff.cc:219:make_patterns_logic$2253, asynchronously reset by \RESET
Extracted 31 gates and 59 wires to a netlist network with 28 inputs and 22 outputs.

3.78.2.1. Executing ABC.

3.78.3. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$20651$auto$opt_dff.cc:219:make_patterns_logic$2270, asynchronously reset by \RESET
Extracted 37 gates and 68 wires to a netlist network with 31 inputs and 25 outputs.

3.78.3.1. Executing ABC.

3.78.4. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$20697$auto$opt_dff.cc:219:make_patterns_logic$2287, asynchronously reset by \RESET
Extracted 21 gates and 43 wires to a netlist network with 22 inputs and 17 outputs.

3.78.4.1. Executing ABC.

3.78.5. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$25156$auto$opt_dff.cc:219:make_patterns_logic$1962, asynchronously reset by \RESET
Extracted 44 gates and 81 wires to a netlist network with 37 inputs and 20 outputs.

3.78.5.1. Executing ABC.

3.78.6. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$19127$auto$opt_dff.cc:219:make_patterns_logic$2049, asynchronously reset by \RESET
Extracted 13 gates and 24 wires to a netlist network with 11 inputs and 6 outputs.

3.78.6.1. Executing ABC.

3.78.7. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$24436$auto$opt_dff.cc:194:make_patterns_logic$2650, asynchronously reset by \RESET
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.78.7.1. Executing ABC.

3.78.8. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$23335$auto$opt_dff.cc:219:make_patterns_logic$2637, asynchronously reset by \RESET
Extracted 12 gates and 24 wires to a netlist network with 12 inputs and 4 outputs.

3.78.8.1. Executing ABC.

3.78.9. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$19142$auto$opt_dff.cc:219:make_patterns_logic$2004, asynchronously reset by \RESET
Extracted 7 gates and 15 wires to a netlist network with 8 inputs and 7 outputs.

3.78.9.1. Executing ABC.

3.78.10. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$19162$auto$opt_dff.cc:219:make_patterns_logic$2568, asynchronously reset by \RESET
Extracted 475 gates and 641 wires to a netlist network with 166 inputs and 101 outputs.

3.78.10.1. Executing ABC.

3.78.11. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$19988$auto$opt_dff.cc:219:make_patterns_logic$2525, asynchronously reset by \RESET
Extracted 8 gates and 16 wires to a netlist network with 8 inputs and 3 outputs.

3.78.11.1. Executing ABC.

3.78.12. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$24759$auto$opt_dff.cc:219:make_patterns_logic$2129, asynchronously reset by \RESET
Extracted 27 gates and 57 wires to a netlist network with 30 inputs and 18 outputs.

3.78.12.1. Executing ABC.

3.78.13. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$20047$auto$opt_dff.cc:219:make_patterns_logic$2151, asynchronously reset by \RESET
Extracted 38 gates and 65 wires to a netlist network with 27 inputs and 12 outputs.

3.78.13.1. Executing ABC.

3.78.14. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$20001$auto$opt_dff.cc:219:make_patterns_logic$2168, asynchronously reset by \RESET
Extracted 31 gates and 59 wires to a netlist network with 28 inputs and 22 outputs.

3.78.14.1. Executing ABC.

3.78.15. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$23349$auto$opt_dff.cc:219:make_patterns_logic$2015, asynchronously reset by \RESET
Extracted 816 gates and 1027 wires to a netlist network with 211 inputs and 313 outputs.

3.78.15.1. Executing ABC.

3.78.16. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$20377$auto$opt_dff.cc:219:make_patterns_logic$2423, asynchronously reset by \RESET
Extracted 41 gates and 74 wires to a netlist network with 33 inputs and 33 outputs.

3.78.16.1. Executing ABC.

3.78.17. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$24536$auto$opt_dff.cc:219:make_patterns_logic$2146, asynchronously reset by \RESET
Extracted 449 gates and 672 wires to a netlist network with 223 inputs and 145 outputs.

3.78.17.1. Executing ABC.

3.78.18. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$22976$auto$opt_dff.cc:219:make_patterns_logic$2545, asynchronously reset by \RESET
Extracted 374 gates and 566 wires to a netlist network with 192 inputs and 95 outputs.

3.78.18.1. Executing ABC.

3.78.19. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$20445$auto$opt_dff.cc:219:make_patterns_logic$2185, asynchronously reset by \RESET
Extracted 27 gates and 53 wires to a netlist network with 26 inputs and 20 outputs.

3.78.19.1. Executing ABC.

3.78.20. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$24442$auto$opt_dff.cc:219:make_patterns_logic$2656, asynchronously reset by \RESET
Extracted 39 gates and 79 wires to a netlist network with 40 inputs and 31 outputs.

3.78.20.1. Executing ABC.

3.78.21. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$24772$auto$opt_dff.cc:219:make_patterns_logic$2440, asynchronously reset by \RESET
Extracted 109 gates and 164 wires to a netlist network with 55 inputs and 51 outputs.

3.78.21.1. Executing ABC.

3.78.22. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$20950$auto$opt_dff.cc:219:make_patterns_logic$2451, asynchronously reset by \RESET
Extracted 225 gates and 364 wires to a netlist network with 139 inputs and 158 outputs.

3.78.22.1. Executing ABC.

3.78.23. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$20125$auto$opt_dff.cc:219:make_patterns_logic$2321, asynchronously reset by \RESET
Extracted 25 gates and 50 wires to a netlist network with 25 inputs and 19 outputs.

3.78.23.1. Executing ABC.

3.78.24. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$20339$auto$opt_dff.cc:219:make_patterns_logic$2406, asynchronously reset by \RESET
Extracted 25 gates and 50 wires to a netlist network with 25 inputs and 19 outputs.

3.78.24.1. Executing ABC.

3.78.25. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$20091$auto$opt_dff.cc:219:make_patterns_logic$2478, asynchronously reset by \RESET
Extracted 31 gates and 55 wires to a netlist network with 24 inputs and 15 outputs.

3.78.25.1. Executing ABC.

3.78.26. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$19881$auto$opt_dff.cc:219:make_patterns_logic$2110, asynchronously reset by \RESET
Extracted 91 gates and 157 wires to a netlist network with 66 inputs and 9 outputs.

3.78.26.1. Executing ABC.

3.78.27. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$19720$auto$opt_dff.cc:194:make_patterns_logic$2640, asynchronously reset by \RESET
Extracted 16 gates and 26 wires to a netlist network with 10 inputs and 6 outputs.

3.78.27.1. Executing ABC.

3.78.28. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$20293$auto$opt_dff.cc:219:make_patterns_logic$2389, asynchronously reset by \RESET
Extracted 21 gates and 43 wires to a netlist network with 22 inputs and 17 outputs.

3.78.28.1. Executing ABC.

3.78.29. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$20255$auto$opt_dff.cc:219:make_patterns_logic$2372, asynchronously reset by \RESET
Extracted 21 gates and 43 wires to a netlist network with 22 inputs and 17 outputs.

3.78.29.1. Executing ABC.

3.78.30. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$20209$auto$opt_dff.cc:219:make_patterns_logic$2355, asynchronously reset by \RESET
Extracted 21 gates and 43 wires to a netlist network with 22 inputs and 17 outputs.

3.78.30.1. Executing ABC.

3.78.31. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$20171$auto$opt_dff.cc:219:make_patterns_logic$2338, asynchronously reset by \RESET
Extracted 22 gates and 45 wires to a netlist network with 23 inputs and 18 outputs.

3.78.31.1. Executing ABC.

3.78.32. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$21202$auto$opt_dff.cc:219:make_patterns_logic$2620, asynchronously reset by \RESET
Extracted 2 gates and 5 wires to a netlist network with 3 inputs and 2 outputs.

3.78.32.1. Executing ABC.

3.78.33. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$21208$auto$opt_dff.cc:219:make_patterns_logic$2032, asynchronously reset by \RESET
Extracted 34 gates and 56 wires to a netlist network with 22 inputs and 15 outputs.

3.78.33.1. Executing ABC.

3.78.34. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$20483$auto$opt_dff.cc:219:make_patterns_logic$2202, asynchronously reset by \RESET
Extracted 31 gates and 59 wires to a netlist network with 28 inputs and 22 outputs.

3.78.34.1. Executing ABC.

3.78.35. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, asynchronously reset by \RESET
Extracted 1188 gates and 1864 wires to a netlist network with 676 inputs and 383 outputs.

3.78.35.1. Executing ABC.

3.78.36. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$20529$auto$opt_dff.cc:219:make_patterns_logic$2219, asynchronously reset by \RESET
Extracted 23 gates and 47 wires to a netlist network with 24 inputs and 18 outputs.

3.78.36.1. Executing ABC.

3.78.37. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$20567$auto$opt_dff.cc:219:make_patterns_logic$2236, asynchronously reset by \RESET
Extracted 27 gates and 53 wires to a netlist network with 26 inputs and 20 outputs.

3.78.37.1. Executing ABC.

3.78.38. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$20735$auto$opt_dff.cc:219:make_patterns_logic$2304, asynchronously reset by \RESET
Extracted 27 gates and 53 wires to a netlist network with 26 inputs and 20 outputs.

3.78.38.1. Executing ABC.

3.78.39. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$20773$auto$opt_dff.cc:219:make_patterns_logic$1985, asynchronously reset by \RESET
Extracted 587 gates and 854 wires to a netlist network with 267 inputs and 136 outputs.

3.78.39.1. Executing ABC.

3.78.40. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$19616$auto$opt_dff.cc:219:make_patterns_logic$2589, asynchronously reset by \RESET
Extracted 74 gates and 133 wires to a netlist network with 59 inputs and 35 outputs.

3.78.40.1. Executing ABC.

3.78.41. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$24846$auto$opt_dff.cc:219:make_patterns_logic$2503, asynchronously reset by \RESET
Extracted 418 gates and 506 wires to a netlist network with 88 inputs and 135 outputs.

3.78.41.1. Executing ABC.

3.78.42. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$19743$auto$opt_dff.cc:219:make_patterns_logic$2068, asynchronously reset by \RESET
Extracted 70 gates and 130 wires to a netlist network with 60 inputs and 35 outputs.

3.78.42.1. Executing ABC.

3.78.43. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$25174$auto$opt_dff.cc:219:make_patterns_logic$1998, asynchronously reset by \RESET
Extracted 45 gates and 83 wires to a netlist network with 38 inputs and 23 outputs.

3.78.43.1. Executing ABC.

yosys> abc -dff

3.79. Executing ABC pass (technology mapping using ABC).

3.79.1. Summary of detected clock domains:
  79 cells in clk=\CLOCK, en=$abc$25218$abc$20613$auto$opt_dff.cc:219:make_patterns_logic$2253, arst=\RESET, srst={ }
  75 cells in clk=\CLOCK, en=$abc$25261$abc$20651$auto$opt_dff.cc:219:make_patterns_logic$2270, arst=\RESET, srst={ }
  28 cells in clk=\CLOCK, en=$abc$25345$abc$25156$auto$opt_dff.cc:219:make_patterns_logic$1962, arst=\RESET, srst={ }
  14 cells in clk=\CLOCK, en=$abc$25392$abc$19127$auto$opt_dff.cc:219:make_patterns_logic$2049, arst=\RESET, srst={ }
  4 cells in clk=\CLOCK, en=$abc$25406$abc$24436$auto$opt_dff.cc:194:make_patterns_logic$2650, arst=\RESET, srst={ }
  13 cells in clk=\CLOCK, en=$abc$25413$abc$23335$auto$opt_dff.cc:219:make_patterns_logic$2637, arst=\RESET, srst={ }
  7 cells in clk=\CLOCK, en=$abc$25427$abc$19142$auto$opt_dff.cc:219:make_patterns_logic$2004, arst=\RESET, srst={ }
  8 cells in clk=\CLOCK, en=$abc$25940$abc$19988$auto$opt_dff.cc:219:make_patterns_logic$2525, arst=\RESET, srst={ }
  31 cells in clk=\CLOCK, en=$abc$25951$abc$24759$auto$opt_dff.cc:219:make_patterns_logic$2129, arst=\RESET, srst={ }
  38 cells in clk=\CLOCK, en=$abc$25982$abc$20047$auto$opt_dff.cc:219:make_patterns_logic$2151, arst=\RESET, srst={ }
  750 cells in clk=\CLOCK, en=$abc$26062$abc$23349$auto$opt_dff.cc:219:make_patterns_logic$2015, arst=\RESET, srst={ }
  89 cells in clk=\CLOCK, en=$abc$26963$abc$20377$auto$opt_dff.cc:219:make_patterns_logic$2423, arst=\RESET, srst={ }
  565 cells in clk=\CLOCK, en=$abc$27018$abc$24536$auto$opt_dff.cc:219:make_patterns_logic$2146, arst=\RESET, srst={ }
  68 cells in clk=\CLOCK, en=$abc$27888$abc$20445$auto$opt_dff.cc:219:make_patterns_logic$2185, arst=\RESET, srst={ }
  57 cells in clk=\CLOCK, en=$abc$27929$abc$24442$auto$opt_dff.cc:219:make_patterns_logic$2656, arst=\RESET, srst={ }
  122 cells in clk=\CLOCK, en=$abc$28023$abc$24772$auto$opt_dff.cc:219:make_patterns_logic$2440, arst=\RESET, srst={ }
  217 cells in clk=\CLOCK, en=$abc$28144$abc$20950$auto$opt_dff.cc:219:make_patterns_logic$2451, arst=\RESET, srst={ }
  83 cells in clk=\CLOCK, en=$abc$28372$abc$20125$auto$opt_dff.cc:219:make_patterns_logic$2321, arst=\RESET, srst={ }
  46 cells in clk=\CLOCK, en=$abc$28452$abc$20091$auto$opt_dff.cc:219:make_patterns_logic$2478, arst=\RESET, srst={ }
  102 cells in clk=\CLOCK, en=$abc$28484$abc$19881$auto$opt_dff.cc:219:make_patterns_logic$2110, arst=\RESET, srst={ }
  22 cells in clk=\CLOCK, en=$abc$28574$abc$19720$auto$opt_dff.cc:194:make_patterns_logic$2640, arst=\RESET, srst={ }
  77 cells in clk=\CLOCK, en=$abc$28597$abc$20293$auto$opt_dff.cc:219:make_patterns_logic$2389, arst=\RESET, srst={ }
  65 cells in clk=\CLOCK, en=$abc$28635$abc$20255$auto$opt_dff.cc:219:make_patterns_logic$2372, arst=\RESET, srst={ }
  73 cells in clk=\CLOCK, en=$abc$28673$abc$20209$auto$opt_dff.cc:219:make_patterns_logic$2355, arst=\RESET, srst={ }
  3 cells in clk=\CLOCK, en=$abc$28750$abc$21202$auto$opt_dff.cc:219:make_patterns_logic$2620, arst=\RESET, srst={ }
  32 cells in clk=\CLOCK, en=$abc$28755$abc$21208$auto$opt_dff.cc:219:make_patterns_logic$2032, arst=\RESET, srst={ }
  503 cells in clk=\CLOCK, en={ }, arst=\RESET, srst={ }
  74 cells in clk=\CLOCK, en=$abc$30187$abc$20529$auto$opt_dff.cc:219:make_patterns_logic$2219, arst=\RESET, srst={ }
  77 cells in clk=\CLOCK, en=$abc$30226$abc$20567$auto$opt_dff.cc:219:make_patterns_logic$2236, arst=\RESET, srst={ }
  84 cells in clk=\CLOCK, en=$abc$30267$abc$20735$auto$opt_dff.cc:219:make_patterns_logic$2304, arst=\RESET, srst={ }
  681 cells in clk=\CLOCK, en=$abc$30308$abc$20773$auto$opt_dff.cc:219:make_patterns_logic$1985, arst=\RESET, srst={ }
  81 cells in clk=\CLOCK, en=$abc$25307$abc$20697$auto$opt_dff.cc:219:make_patterns_logic$2287, arst=\RESET, srst={ }
  105 cells in clk=\CLOCK, en=$abc$31473$abc$19743$auto$opt_dff.cc:219:make_patterns_logic$2068, arst=\RESET, srst={ }
  384 cells in clk=\CLOCK, en=$abc$27517$abc$22976$auto$opt_dff.cc:219:make_patterns_logic$2545, arst=\RESET, srst={ }
  83 cells in clk=\CLOCK, en=$abc$28412$abc$20339$auto$opt_dff.cc:219:make_patterns_logic$2406, arst=\RESET, srst={ }
  81 cells in clk=\CLOCK, en=$abc$30920$abc$19616$auto$opt_dff.cc:219:make_patterns_logic$2589, arst=\RESET, srst={ }
  483 cells in clk=\CLOCK, en=$abc$31042$abc$24846$auto$opt_dff.cc:219:make_patterns_logic$2503, arst=\RESET, srst={ }
  83 cells in clk=\CLOCK, en=$abc$28790$abc$20483$auto$opt_dff.cc:219:make_patterns_logic$2202, arst=\RESET, srst={ }
  93 cells in clk=\CLOCK, en=$abc$26019$abc$20001$auto$opt_dff.cc:219:make_patterns_logic$2168, arst=\RESET, srst={ }
  89 cells in clk=\CLOCK, en=$abc$28711$abc$20171$auto$opt_dff.cc:219:make_patterns_logic$2338, arst=\RESET, srst={ }
  463 cells in clk=\CLOCK, en=$abc$25447$abc$19162$auto$opt_dff.cc:219:make_patterns_logic$2568, arst=\RESET, srst={ }
  42 cells in clk=\CLOCK, en=$abc$31586$abc$25174$auto$opt_dff.cc:219:make_patterns_logic$1998, arst=\RESET, srst={ }

3.79.2. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$25218$abc$20613$auto$opt_dff.cc:219:make_patterns_logic$2253, asynchronously reset by \RESET
Extracted 79 gates and 136 wires to a netlist network with 57 inputs and 21 outputs.

3.79.2.1. Executing ABC.

3.79.3. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$25261$abc$20651$auto$opt_dff.cc:219:make_patterns_logic$2270, asynchronously reset by \RESET
Extracted 75 gates and 129 wires to a netlist network with 54 inputs and 22 outputs.

3.79.3.1. Executing ABC.

3.79.4. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$25345$abc$25156$auto$opt_dff.cc:219:make_patterns_logic$1962, asynchronously reset by \RESET
Extracted 28 gates and 55 wires to a netlist network with 27 inputs and 6 outputs.

3.79.4.1. Executing ABC.

3.79.5. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$25392$abc$19127$auto$opt_dff.cc:219:make_patterns_logic$2049, asynchronously reset by \RESET
Extracted 14 gates and 28 wires to a netlist network with 14 inputs and 6 outputs.

3.79.5.1. Executing ABC.

3.79.6. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$25406$abc$24436$auto$opt_dff.cc:194:make_patterns_logic$2650, asynchronously reset by \RESET
Extracted 4 gates and 8 wires to a netlist network with 4 inputs and 2 outputs.

3.79.6.1. Executing ABC.

3.79.7. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$25413$abc$23335$auto$opt_dff.cc:219:make_patterns_logic$2637, asynchronously reset by \RESET
Extracted 13 gates and 25 wires to a netlist network with 12 inputs and 5 outputs.

3.79.7.1. Executing ABC.

3.79.8. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$25427$abc$19142$auto$opt_dff.cc:219:make_patterns_logic$2004, asynchronously reset by \RESET
Extracted 7 gates and 15 wires to a netlist network with 8 inputs and 7 outputs.

3.79.8.1. Executing ABC.

3.79.9. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$25940$abc$19988$auto$opt_dff.cc:219:make_patterns_logic$2525, asynchronously reset by \RESET
Extracted 8 gates and 16 wires to a netlist network with 8 inputs and 3 outputs.

3.79.9.1. Executing ABC.

3.79.10. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$25951$abc$24759$auto$opt_dff.cc:219:make_patterns_logic$2129, asynchronously reset by \RESET
Extracted 27 gates and 55 wires to a netlist network with 28 inputs and 20 outputs.

3.79.10.1. Executing ABC.

3.79.11. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$25982$abc$20047$auto$opt_dff.cc:219:make_patterns_logic$2151, asynchronously reset by \RESET
Extracted 38 gates and 65 wires to a netlist network with 27 inputs and 14 outputs.

3.79.11.1. Executing ABC.

3.79.12. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$26062$abc$23349$auto$opt_dff.cc:219:make_patterns_logic$2015, asynchronously reset by \RESET
Extracted 750 gates and 950 wires to a netlist network with 200 inputs and 342 outputs.

3.79.12.1. Executing ABC.

3.79.13. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$26963$abc$20377$auto$opt_dff.cc:219:make_patterns_logic$2423, asynchronously reset by \RESET
Extracted 89 gates and 148 wires to a netlist network with 59 inputs and 27 outputs.

3.79.13.1. Executing ABC.

3.79.14. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$27018$abc$24536$auto$opt_dff.cc:219:make_patterns_logic$2146, asynchronously reset by \RESET
Extracted 499 gates and 730 wires to a netlist network with 231 inputs and 155 outputs.

3.79.14.1. Executing ABC.

3.79.15. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$27888$abc$20445$auto$opt_dff.cc:219:make_patterns_logic$2185, asynchronously reset by \RESET
Extracted 68 gates and 119 wires to a netlist network with 51 inputs and 16 outputs.

3.79.15.1. Executing ABC.

3.79.16. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$27929$abc$24442$auto$opt_dff.cc:219:make_patterns_logic$2656, asynchronously reset by \RESET
Extracted 53 gates and 108 wires to a netlist network with 55 inputs and 31 outputs.

3.79.16.1. Executing ABC.

3.79.17. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$28023$abc$24772$auto$opt_dff.cc:219:make_patterns_logic$2440, asynchronously reset by \RESET
Extracted 122 gates and 177 wires to a netlist network with 55 inputs and 52 outputs.

3.79.17.1. Executing ABC.

3.79.18. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$28144$abc$20950$auto$opt_dff.cc:219:make_patterns_logic$2451, asynchronously reset by \RESET
Extracted 217 gates and 359 wires to a netlist network with 142 inputs and 166 outputs.

3.79.18.1. Executing ABC.

3.79.19. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$28372$abc$20125$auto$opt_dff.cc:219:make_patterns_logic$2321, asynchronously reset by \RESET
Extracted 83 gates and 140 wires to a netlist network with 57 inputs and 16 outputs.

3.79.19.1. Executing ABC.

3.79.20. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$28452$abc$20091$auto$opt_dff.cc:219:make_patterns_logic$2478, asynchronously reset by \RESET
Extracted 46 gates and 88 wires to a netlist network with 42 inputs and 35 outputs.

3.79.20.1. Executing ABC.

3.79.21. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$28484$abc$19881$auto$opt_dff.cc:219:make_patterns_logic$2110, asynchronously reset by \RESET
Extracted 98 gates and 174 wires to a netlist network with 76 inputs and 12 outputs.

3.79.21.1. Executing ABC.

3.79.22. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$28574$abc$19720$auto$opt_dff.cc:194:make_patterns_logic$2640, asynchronously reset by \RESET
Extracted 22 gates and 31 wires to a netlist network with 9 inputs and 5 outputs.

3.79.22.1. Executing ABC.

3.79.23. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$28597$abc$20293$auto$opt_dff.cc:219:make_patterns_logic$2389, asynchronously reset by \RESET
Extracted 77 gates and 130 wires to a netlist network with 53 inputs and 14 outputs.

3.79.23.1. Executing ABC.

3.79.24. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$28635$abc$20255$auto$opt_dff.cc:219:make_patterns_logic$2372, asynchronously reset by \RESET
Extracted 65 gates and 108 wires to a netlist network with 43 inputs and 13 outputs.

3.79.24.1. Executing ABC.

3.79.25. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$28673$abc$20209$auto$opt_dff.cc:219:make_patterns_logic$2355, asynchronously reset by \RESET
Extracted 73 gates and 124 wires to a netlist network with 51 inputs and 14 outputs.

3.79.25.1. Executing ABC.

3.79.26. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$28750$abc$21202$auto$opt_dff.cc:219:make_patterns_logic$2620, asynchronously reset by \RESET
Extracted 3 gates and 7 wires to a netlist network with 4 inputs and 2 outputs.

3.79.26.1. Executing ABC.

3.79.27. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$28755$abc$21208$auto$opt_dff.cc:219:make_patterns_logic$2032, asynchronously reset by \RESET
Extracted 32 gates and 54 wires to a netlist network with 22 inputs and 12 outputs.

3.79.27.1. Executing ABC.

3.79.28. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, asynchronously reset by \RESET
Extracted 486 gates and 739 wires to a netlist network with 253 inputs and 222 outputs.

3.79.28.1. Executing ABC.

3.79.29. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$30187$abc$20529$auto$opt_dff.cc:219:make_patterns_logic$2219, asynchronously reset by \RESET
Extracted 74 gates and 129 wires to a netlist network with 55 inputs and 18 outputs.

3.79.29.1. Executing ABC.

3.79.30. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$30226$abc$20567$auto$opt_dff.cc:219:make_patterns_logic$2236, asynchronously reset by \RESET
Extracted 77 gates and 132 wires to a netlist network with 55 inputs and 16 outputs.

3.79.30.1. Executing ABC.

3.79.31. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$30267$abc$20735$auto$opt_dff.cc:219:make_patterns_logic$2304, asynchronously reset by \RESET
Extracted 84 gates and 143 wires to a netlist network with 59 inputs and 20 outputs.

3.79.31.1. Executing ABC.

3.79.32. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$30308$abc$20773$auto$opt_dff.cc:219:make_patterns_logic$1985, asynchronously reset by \RESET
Extracted 598 gates and 869 wires to a netlist network with 271 inputs and 142 outputs.

3.79.32.1. Executing ABC.

3.79.33. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$25307$abc$20697$auto$opt_dff.cc:219:make_patterns_logic$2287, asynchronously reset by \RESET
Extracted 81 gates and 135 wires to a netlist network with 54 inputs and 15 outputs.

3.79.33.1. Executing ABC.

3.79.34. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$31473$abc$19743$auto$opt_dff.cc:219:make_patterns_logic$2068, asynchronously reset by \RESET
Extracted 105 gates and 177 wires to a netlist network with 72 inputs and 48 outputs.

3.79.34.1. Executing ABC.

3.79.35. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$27517$abc$22976$auto$opt_dff.cc:219:make_patterns_logic$2545, asynchronously reset by \RESET
Extracted 384 gates and 593 wires to a netlist network with 209 inputs and 94 outputs.

3.79.35.1. Executing ABC.

3.79.36. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$28412$abc$20339$auto$opt_dff.cc:219:make_patterns_logic$2406, asynchronously reset by \RESET
Extracted 83 gates and 139 wires to a netlist network with 56 inputs and 16 outputs.

3.79.36.1. Executing ABC.

3.79.37. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$30920$abc$19616$auto$opt_dff.cc:219:make_patterns_logic$2589, asynchronously reset by \RESET
Extracted 81 gates and 149 wires to a netlist network with 68 inputs and 33 outputs.

3.79.37.1. Executing ABC.

3.79.38. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$31042$abc$24846$auto$opt_dff.cc:219:make_patterns_logic$2503, asynchronously reset by \RESET
Extracted 473 gates and 605 wires to a netlist network with 132 inputs and 155 outputs.

3.79.38.1. Executing ABC.

3.79.39. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$28790$abc$20483$auto$opt_dff.cc:219:make_patterns_logic$2202, asynchronously reset by \RESET
Extracted 83 gates and 139 wires to a netlist network with 56 inputs and 19 outputs.

3.79.39.1. Executing ABC.

3.79.40. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$26019$abc$20001$auto$opt_dff.cc:219:make_patterns_logic$2168, asynchronously reset by \RESET
Extracted 93 gates and 160 wires to a netlist network with 67 inputs and 22 outputs.

3.79.40.1. Executing ABC.

3.79.41. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$28711$abc$20171$auto$opt_dff.cc:219:make_patterns_logic$2338, asynchronously reset by \RESET
Extracted 89 gates and 145 wires to a netlist network with 56 inputs and 17 outputs.

3.79.41.1. Executing ABC.

3.79.42. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$25447$abc$19162$auto$opt_dff.cc:219:make_patterns_logic$2568, asynchronously reset by \RESET
Extracted 463 gates and 632 wires to a netlist network with 169 inputs and 91 outputs.

3.79.42.1. Executing ABC.

3.79.43. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$31586$abc$25174$auto$opt_dff.cc:219:make_patterns_logic$1998, asynchronously reset by \RESET
Extracted 42 gates and 80 wires to a netlist network with 38 inputs and 20 outputs.

3.79.43.1. Executing ABC.

yosys> abc -dff

3.80. Executing ABC pass (technology mapping using ABC).

3.80.1. Summary of detected clock domains:
  105 cells in clk=\CLOCK, en=$abc$31634$abc$25218$abc$20613$auto$opt_dff.cc:219:make_patterns_logic$2253, arst=\RESET, srst={ }
  28 cells in clk=\CLOCK, en=$abc$31812$abc$25345$abc$25156$auto$opt_dff.cc:219:make_patterns_logic$1962, arst=\RESET, srst={ }
  13 cells in clk=\CLOCK, en=$abc$31842$abc$25392$abc$19127$auto$opt_dff.cc:219:make_patterns_logic$2049, arst=\RESET, srst={ }
  5 cells in clk=\CLOCK, en=$abc$31857$abc$25406$abc$24436$auto$opt_dff.cc:194:make_patterns_logic$2650, arst=\RESET, srst={ }
  13 cells in clk=\CLOCK, en=$abc$31863$abc$25413$abc$23335$auto$opt_dff.cc:219:make_patterns_logic$2637, arst=\RESET, srst={ }
  7 cells in clk=\CLOCK, en=$abc$31898$abc$25940$abc$19988$auto$opt_dff.cc:219:make_patterns_logic$2525, arst=\RESET, srst={ }
  29 cells in clk=\CLOCK, en=$abc$31909$abc$25951$abc$24759$auto$opt_dff.cc:219:make_patterns_logic$2129, arst=\RESET, srst={ }
  34 cells in clk=\CLOCK, en=$abc$31938$abc$25982$abc$20047$auto$opt_dff.cc:219:make_patterns_logic$2151, arst=\RESET, srst={ }
  7 cells in clk=\CLOCK, en=$abc$31878$abc$25427$abc$19142$auto$opt_dff.cc:219:make_patterns_logic$2004, arst=\RESET, srst={ }
  646 cells in clk=\CLOCK, en=$abc$31977$abc$26062$abc$23349$auto$opt_dff.cc:219:make_patterns_logic$2015, arst=\RESET, srst={ }
  107 cells in clk=\CLOCK, en=$abc$32758$abc$26963$abc$20377$auto$opt_dff.cc:219:make_patterns_logic$2423, arst=\RESET, srst={ }
  91 cells in clk=\CLOCK, en=$abc$31729$abc$25261$abc$20651$auto$opt_dff.cc:219:make_patterns_logic$2270, arst=\RESET, srst={ }
  95 cells in clk=\CLOCK, en=$abc$33373$abc$27888$abc$20445$auto$opt_dff.cc:219:make_patterns_logic$2185, arst=\RESET, srst={ }
  121 cells in clk=\CLOCK, en=$abc$33551$abc$28023$abc$24772$auto$opt_dff.cc:219:make_patterns_logic$2440, arst=\RESET, srst={ }
  167 cells in clk=\CLOCK, en=$abc$33674$abc$28144$abc$20950$auto$opt_dff.cc:219:make_patterns_logic$2451, arst=\RESET, srst={ }
  45 cells in clk=\CLOCK, en=$abc$33981$abc$28452$abc$20091$auto$opt_dff.cc:219:make_patterns_logic$2478, arst=\RESET, srst={ }
  98 cells in clk=\CLOCK, en=$abc$34028$abc$28484$abc$19881$auto$opt_dff.cc:219:make_patterns_logic$2110, arst=\RESET, srst={ }
  22 cells in clk=\CLOCK, en=$abc$34125$abc$28574$abc$19720$auto$opt_dff.cc:194:make_patterns_logic$2640, arst=\RESET, srst={ }
  88 cells in clk=\CLOCK, en=$abc$34153$abc$28597$abc$20293$auto$opt_dff.cc:219:make_patterns_logic$2389, arst=\RESET, srst={ }
  73 cells in clk=\CLOCK, en=$abc$34243$abc$28635$abc$20255$auto$opt_dff.cc:219:make_patterns_logic$2372, arst=\RESET, srst={ }
  3 cells in clk=\CLOCK, en=$abc$34399$abc$28750$abc$21202$auto$opt_dff.cc:219:make_patterns_logic$2620, arst=\RESET, srst={ }
  29 cells in clk=\CLOCK, en=$abc$34404$abc$28755$abc$21208$auto$opt_dff.cc:219:make_patterns_logic$2032, arst=\RESET, srst={ }
  688 cells in clk=\CLOCK, en={ }, arst=\RESET, srst={ }
  98 cells in clk=\CLOCK, en=$abc$34913$abc$30187$abc$20529$auto$opt_dff.cc:219:make_patterns_logic$2219, arst=\RESET, srst={ }
  81 cells in clk=\CLOCK, en=$abc$35000$abc$30226$abc$20567$auto$opt_dff.cc:219:make_patterns_logic$2236, arst=\RESET, srst={ }
  85 cells in clk=\CLOCK, en=$abc$35089$abc$30267$abc$20735$auto$opt_dff.cc:219:make_patterns_logic$2304, arst=\RESET, srst={ }
  97 cells in clk=\CLOCK, en=$abc$33893$abc$28372$abc$20125$auto$opt_dff.cc:219:make_patterns_logic$2321, arst=\RESET, srst={ }
  89 cells in clk=\CLOCK, en=$abc$35811$abc$25307$abc$20697$auto$opt_dff.cc:219:make_patterns_logic$2287, arst=\RESET, srst={ }
  79 cells in clk=\CLOCK, en=$abc$35901$abc$31473$abc$19743$auto$opt_dff.cc:219:make_patterns_logic$2068, arst=\RESET, srst={ }
  60 cells in clk=\CLOCK, en=$abc$33457$abc$27929$abc$24442$auto$opt_dff.cc:219:make_patterns_logic$2656, arst=\RESET, srst={ }
  87 cells in clk=\CLOCK, en=$abc$36414$abc$28412$abc$20339$auto$opt_dff.cc:219:make_patterns_logic$2406, arst=\RESET, srst={ }
  540 cells in clk=\CLOCK, en=$abc$35188$abc$30308$abc$20773$auto$opt_dff.cc:219:make_patterns_logic$1985, arst=\RESET, srst={ }
  83 cells in clk=\CLOCK, en=$abc$36499$abc$30920$abc$19616$auto$opt_dff.cc:219:make_patterns_logic$2589, arst=\RESET, srst={ }
  93 cells in clk=\CLOCK, en=$abc$37158$abc$28790$abc$20483$auto$opt_dff.cc:219:make_patterns_logic$2202, arst=\RESET, srst={ }
  114 cells in clk=\CLOCK, en=$abc$37243$abc$26019$abc$20001$auto$opt_dff.cc:219:make_patterns_logic$2168, arst=\RESET, srst={ }
  84 cells in clk=\CLOCK, en=$abc$37334$abc$28711$abc$20171$auto$opt_dff.cc:219:make_patterns_logic$2338, arst=\RESET, srst={ }
  98 cells in clk=\CLOCK, en=$abc$34314$abc$28673$abc$20209$auto$opt_dff.cc:219:make_patterns_logic$2355, arst=\RESET, srst={ }
  388 cells in clk=\CLOCK, en=$abc$36030$abc$27517$abc$22976$auto$opt_dff.cc:219:make_patterns_logic$2545, arst=\RESET, srst={ }
  591 cells in clk=\CLOCK, en=$abc$32856$abc$27018$abc$24536$auto$opt_dff.cc:219:make_patterns_logic$2146, arst=\RESET, srst={ }
  469 cells in clk=\CLOCK, en=$abc$36620$abc$31042$abc$24846$auto$opt_dff.cc:219:make_patterns_logic$2503, arst=\RESET, srst={ }
  467 cells in clk=\CLOCK, en=$abc$37429$abc$25447$abc$19162$auto$opt_dff.cc:219:make_patterns_logic$2568, arst=\RESET, srst={ }
  41 cells in clk=\CLOCK, en=$abc$37908$abc$31586$abc$25174$auto$opt_dff.cc:219:make_patterns_logic$1998, arst=\RESET, srst={ }

3.80.2. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$31634$abc$25218$abc$20613$auto$opt_dff.cc:219:make_patterns_logic$2253, asynchronously reset by \RESET
Extracted 105 gates and 169 wires to a netlist network with 64 inputs and 23 outputs.

3.80.2.1. Executing ABC.

3.80.3. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$31812$abc$25345$abc$25156$auto$opt_dff.cc:219:make_patterns_logic$1962, asynchronously reset by \RESET
Extracted 28 gates and 54 wires to a netlist network with 26 inputs and 5 outputs.

3.80.3.1. Executing ABC.

3.80.4. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$31842$abc$25392$abc$19127$auto$opt_dff.cc:219:make_patterns_logic$2049, asynchronously reset by \RESET
Extracted 13 gates and 25 wires to a netlist network with 12 inputs and 6 outputs.

3.80.4.1. Executing ABC.

3.80.5. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$31857$abc$25406$abc$24436$auto$opt_dff.cc:194:make_patterns_logic$2650, asynchronously reset by \RESET
Extracted 5 gates and 9 wires to a netlist network with 4 inputs and 2 outputs.

3.80.5.1. Executing ABC.

3.80.6. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$31863$abc$25413$abc$23335$auto$opt_dff.cc:219:make_patterns_logic$2637, asynchronously reset by \RESET
Extracted 13 gates and 25 wires to a netlist network with 12 inputs and 5 outputs.

3.80.6.1. Executing ABC.

3.80.7. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$31898$abc$25940$abc$19988$auto$opt_dff.cc:219:make_patterns_logic$2525, asynchronously reset by \RESET
Extracted 7 gates and 15 wires to a netlist network with 8 inputs and 2 outputs.

3.80.7.1. Executing ABC.

3.80.8. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$31909$abc$25951$abc$24759$auto$opt_dff.cc:219:make_patterns_logic$2129, asynchronously reset by \RESET
Extracted 25 gates and 52 wires to a netlist network with 27 inputs and 18 outputs.

3.80.8.1. Executing ABC.

3.80.9. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$31938$abc$25982$abc$20047$auto$opt_dff.cc:219:make_patterns_logic$2151, asynchronously reset by \RESET
Extracted 34 gates and 59 wires to a netlist network with 25 inputs and 10 outputs.

3.80.9.1. Executing ABC.

3.80.10. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$31878$abc$25427$abc$19142$auto$opt_dff.cc:219:make_patterns_logic$2004, asynchronously reset by \RESET
Extracted 7 gates and 15 wires to a netlist network with 8 inputs and 7 outputs.

3.80.10.1. Executing ABC.

3.80.11. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$31977$abc$26062$abc$23349$auto$opt_dff.cc:219:make_patterns_logic$2015, asynchronously reset by \RESET
Extracted 646 gates and 843 wires to a netlist network with 197 inputs and 333 outputs.

3.80.11.1. Executing ABC.

3.80.12. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$32758$abc$26963$abc$20377$auto$opt_dff.cc:219:make_patterns_logic$2423, asynchronously reset by \RESET
Extracted 107 gates and 171 wires to a netlist network with 64 inputs and 36 outputs.

3.80.12.1. Executing ABC.

3.80.13. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$31729$abc$25261$abc$20651$auto$opt_dff.cc:219:make_patterns_logic$2270, asynchronously reset by \RESET
Extracted 91 gates and 152 wires to a netlist network with 61 inputs and 22 outputs.

3.80.13.1. Executing ABC.

3.80.14. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$33373$abc$27888$abc$20445$auto$opt_dff.cc:219:make_patterns_logic$2185, asynchronously reset by \RESET
Extracted 95 gates and 154 wires to a netlist network with 59 inputs and 20 outputs.

3.80.14.1. Executing ABC.

3.80.15. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$33551$abc$28023$abc$24772$auto$opt_dff.cc:219:make_patterns_logic$2440, asynchronously reset by \RESET
Extracted 121 gates and 176 wires to a netlist network with 55 inputs and 51 outputs.

3.80.15.1. Executing ABC.

3.80.16. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$33674$abc$28144$abc$20950$auto$opt_dff.cc:219:make_patterns_logic$2451, asynchronously reset by \RESET
Extracted 167 gates and 290 wires to a netlist network with 123 inputs and 128 outputs.

3.80.16.1. Executing ABC.

3.80.17. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$33981$abc$28452$abc$20091$auto$opt_dff.cc:219:make_patterns_logic$2478, asynchronously reset by \RESET
Extracted 45 gates and 87 wires to a netlist network with 42 inputs and 35 outputs.

3.80.17.1. Executing ABC.

3.80.18. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$34028$abc$28484$abc$19881$auto$opt_dff.cc:219:make_patterns_logic$2110, asynchronously reset by \RESET
Extracted 94 gates and 169 wires to a netlist network with 75 inputs and 11 outputs.

3.80.18.1. Executing ABC.

3.80.19. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$34125$abc$28574$abc$19720$auto$opt_dff.cc:194:make_patterns_logic$2640, asynchronously reset by \RESET
Extracted 22 gates and 31 wires to a netlist network with 9 inputs and 5 outputs.

3.80.19.1. Executing ABC.

3.80.20. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$34153$abc$28597$abc$20293$auto$opt_dff.cc:219:make_patterns_logic$2389, asynchronously reset by \RESET
Extracted 88 gates and 143 wires to a netlist network with 55 inputs and 14 outputs.

3.80.20.1. Executing ABC.

3.80.21. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$34243$abc$28635$abc$20255$auto$opt_dff.cc:219:make_patterns_logic$2372, asynchronously reset by \RESET
Extracted 73 gates and 124 wires to a netlist network with 51 inputs and 13 outputs.

3.80.21.1. Executing ABC.

3.80.22. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$34399$abc$28750$abc$21202$auto$opt_dff.cc:219:make_patterns_logic$2620, asynchronously reset by \RESET
Extracted 3 gates and 7 wires to a netlist network with 4 inputs and 2 outputs.

3.80.22.1. Executing ABC.

3.80.23. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$34404$abc$28755$abc$21208$auto$opt_dff.cc:219:make_patterns_logic$2032, asynchronously reset by \RESET
Extracted 29 gates and 49 wires to a netlist network with 20 inputs and 11 outputs.

3.80.23.1. Executing ABC.

3.80.24. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, asynchronously reset by \RESET
Extracted 666 gates and 1018 wires to a netlist network with 352 inputs and 280 outputs.

3.80.24.1. Executing ABC.

3.80.25. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$34913$abc$30187$abc$20529$auto$opt_dff.cc:219:make_patterns_logic$2219, asynchronously reset by \RESET
Extracted 98 gates and 156 wires to a netlist network with 58 inputs and 17 outputs.

3.80.25.1. Executing ABC.

3.80.26. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$35000$abc$30226$abc$20567$auto$opt_dff.cc:219:make_patterns_logic$2236, asynchronously reset by \RESET
Extracted 81 gates and 137 wires to a netlist network with 56 inputs and 16 outputs.

3.80.26.1. Executing ABC.

3.80.27. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$35089$abc$30267$abc$20735$auto$opt_dff.cc:219:make_patterns_logic$2304, asynchronously reset by \RESET
Extracted 85 gates and 139 wires to a netlist network with 54 inputs and 16 outputs.

3.80.27.1. Executing ABC.

3.80.28. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$33893$abc$28372$abc$20125$auto$opt_dff.cc:219:make_patterns_logic$2321, asynchronously reset by \RESET
Extracted 97 gates and 163 wires to a netlist network with 66 inputs and 20 outputs.

3.80.28.1. Executing ABC.

3.80.29. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$35811$abc$25307$abc$20697$auto$opt_dff.cc:219:make_patterns_logic$2287, asynchronously reset by \RESET
Extracted 89 gates and 144 wires to a netlist network with 55 inputs and 15 outputs.

3.80.29.1. Executing ABC.

3.80.30. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$35901$abc$31473$abc$19743$auto$opt_dff.cc:219:make_patterns_logic$2068, asynchronously reset by \RESET
Extracted 79 gates and 142 wires to a netlist network with 63 inputs and 43 outputs.

3.80.30.1. Executing ABC.

3.80.31. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$33457$abc$27929$abc$24442$auto$opt_dff.cc:219:make_patterns_logic$2656, asynchronously reset by \RESET
Extracted 60 gates and 122 wires to a netlist network with 62 inputs and 31 outputs.

3.80.31.1. Executing ABC.

3.80.32. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$36414$abc$28412$abc$20339$auto$opt_dff.cc:219:make_patterns_logic$2406, asynchronously reset by \RESET
Extracted 87 gates and 144 wires to a netlist network with 57 inputs and 18 outputs.

3.80.32.1. Executing ABC.

3.80.33. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$35188$abc$30308$abc$20773$auto$opt_dff.cc:219:make_patterns_logic$1985, asynchronously reset by \RESET
Extracted 461 gates and 671 wires to a netlist network with 210 inputs and 120 outputs.

3.80.33.1. Executing ABC.

3.80.34. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$36499$abc$30920$abc$19616$auto$opt_dff.cc:219:make_patterns_logic$2589, asynchronously reset by \RESET
Extracted 83 gates and 154 wires to a netlist network with 71 inputs and 33 outputs.

3.80.34.1. Executing ABC.

3.80.35. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$37158$abc$28790$abc$20483$auto$opt_dff.cc:219:make_patterns_logic$2202, asynchronously reset by \RESET
Extracted 93 gates and 159 wires to a netlist network with 66 inputs and 20 outputs.

3.80.35.1. Executing ABC.

3.80.36. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$37243$abc$26019$abc$20001$auto$opt_dff.cc:219:make_patterns_logic$2168, asynchronously reset by \RESET
Extracted 114 gates and 189 wires to a netlist network with 75 inputs and 27 outputs.

3.80.36.1. Executing ABC.

3.80.37. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$37334$abc$28711$abc$20171$auto$opt_dff.cc:219:make_patterns_logic$2338, asynchronously reset by \RESET
Extracted 84 gates and 138 wires to a netlist network with 54 inputs and 15 outputs.

3.80.37.1. Executing ABC.

3.80.38. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$34314$abc$28673$abc$20209$auto$opt_dff.cc:219:make_patterns_logic$2355, asynchronously reset by \RESET
Extracted 98 gates and 159 wires to a netlist network with 61 inputs and 19 outputs.

3.80.38.1. Executing ABC.

3.80.39. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$36030$abc$27517$abc$22976$auto$opt_dff.cc:219:make_patterns_logic$2545, asynchronously reset by \RESET
Extracted 388 gates and 600 wires to a netlist network with 212 inputs and 95 outputs.

3.80.39.1. Executing ABC.

3.80.40. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$32856$abc$27018$abc$24536$auto$opt_dff.cc:219:make_patterns_logic$2146, asynchronously reset by \RESET
Extracted 516 gates and 758 wires to a netlist network with 241 inputs and 173 outputs.

3.80.40.1. Executing ABC.

3.80.41. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$36620$abc$31042$abc$24846$auto$opt_dff.cc:219:make_patterns_logic$2503, asynchronously reset by \RESET
Extracted 465 gates and 605 wires to a netlist network with 139 inputs and 145 outputs.

3.80.41.1. Executing ABC.

3.80.42. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$37429$abc$25447$abc$19162$auto$opt_dff.cc:219:make_patterns_logic$2568, asynchronously reset by \RESET
Extracted 467 gates and 632 wires to a netlist network with 165 inputs and 92 outputs.

3.80.42.1. Executing ABC.

3.80.43. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$37908$abc$31586$abc$25174$auto$opt_dff.cc:219:make_patterns_logic$1998, asynchronously reset by \RESET
Extracted 41 gates and 79 wires to a netlist network with 38 inputs and 20 outputs.

3.80.43.1. Executing ABC.

yosys> opt_ffinv

3.81. Executing OPT_FFINV pass (push inverters through FFs).
Discovering LUTs.
Pushed 0 inverters.

yosys> opt -sat -nosdff

3.82. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.82.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b15.
<suppressed ~134 debug messages>

yosys> opt_merge -nomux

3.82.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b15'.
<suppressed ~285 debug messages>
Removed a total of 95 cells.

yosys> opt_muxtree

3.82.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b15..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.82.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b15.
Performed a total of 0 changes.

yosys> opt_merge

3.82.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b15'.
Removed a total of 0 cells.

yosys> opt_dff -sat -nosdff

3.82.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $abc$39840$auto$blifparse.cc:362:parse_blif$39847 ($_DFF_PP0_) from module b15 (D = $abc$39840$abc$34434$abc$28833$abc$21237$new_n1409_, Q = $abc$39840$lo6).
Adding EN signal on $abc$38984$auto$blifparse.cc:362:parse_blif$38992 ($_DFFE_PP0P_) from module b15 (D = $abc$38984$li7_li7, Q = $abc$38984$lo7).
Adding EN signal on $abc$40602$auto$blifparse.cc:362:parse_blif$40608 ($_DFFE_PP0P_) from module b15 (D = $abc$40602$li5_li5, Q = $abc$40602$lo5).
Adding EN signal on $abc$40602$auto$blifparse.cc:362:parse_blif$40607 ($_DFFE_PP0P_) from module b15 (D = $abc$40602$li4_li4, Q = $abc$40602$lo4).
Adding EN signal on $abc$39167$auto$blifparse.cc:362:parse_blif$39170 ($_DFFE_PP0P_) from module b15 (D = $abc$39167$li2_li2, Q = $abc$39167$lo2).
Adding EN signal on $abc$41992$auto$blifparse.cc:362:parse_blif$41996 ($_DFFE_PP0P_) from module b15 (D = $abc$41992$li3_li3, Q = $abc$41992$lo3).
Adding EN signal on $abc$41992$auto$blifparse.cc:362:parse_blif$41994 ($_DFFE_PP0P_) from module b15 (D = $abc$41992$li1_li1, Q = $abc$41992$lo1).

yosys> opt_clean

3.82.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b15..
Removed 3 unused cells and 32754 unused wires.
<suppressed ~20 debug messages>

yosys> opt_expr

3.82.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module b15.
<suppressed ~17 debug messages>

3.82.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.82.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b15..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.82.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b15.
Performed a total of 0 changes.

yosys> opt_merge

3.82.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b15'.
<suppressed ~30 debug messages>
Removed a total of 10 cells.

yosys> opt_dff -sat -nosdff

3.82.13. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $abc$43238$auto$blifparse.cc:362:parse_blif$43245 ($_DFFE_PP0P_) from module b15 (D = $abc$21237$auto$bmuxmap.cc:58:execute$1648[20], Q = $abc$43238$lo06).
Adding EN signal on $abc$43238$auto$blifparse.cc:362:parse_blif$43242 ($_DFFE_PP0P_) from module b15 (D = $abc$21237$auto$bmuxmap.cc:58:execute$1648[4], Q = $abc$43238$lo03).

yosys> opt_clean

3.82.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b15..
Removed 0 unused cells and 20 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.82.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module b15.
<suppressed ~8 debug messages>

3.82.16. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.82.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b15..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.82.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b15.
Performed a total of 0 changes.

yosys> opt_merge

3.82.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b15'.
<suppressed ~30 debug messages>
Removed a total of 10 cells.

yosys> opt_dff -sat -nosdff

3.82.20. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.82.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b15..
Removed 0 unused cells and 11 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.82.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module b15.

3.82.23. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.82.24. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b15..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.82.25. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b15.
Performed a total of 0 changes.

yosys> opt_merge

3.82.26. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b15'.
Removed a total of 0 cells.

yosys> opt_dff -sat -nosdff

3.82.27. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.82.28. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b15..

yosys> opt_expr

3.82.29. Executing OPT_EXPR pass (perform const folding).
Optimizing module b15.

3.82.30. Finished OPT passes. (There is nothing left to do.)

yosys> bmuxmap

3.83. Executing BMUXMAP pass.

yosys> demuxmap

3.84. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> abc -script /home/users/temp_dir/yosys_lZVLdq/abc_tmp_1.scr

3.85. Executing ABC pass (technology mapping using ABC).

3.85.1. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Extracted 5458 gates and 6019 wires to a netlist network with 559 inputs and 613 outputs.

3.85.1.1. Executing ABC.
DE:   #PIs = 559  #Luts =  1790  Max Lvl =  21  Avg Lvl =  10.05  [   0.18 sec. at Pass 0]
DE:   #PIs = 559  #Luts =  1501  Max Lvl =  13  Avg Lvl =   6.60  [   9.06 sec. at Pass 1]
DE:   #PIs = 559  #Luts =  1474  Max Lvl =  12  Avg Lvl =   5.50  [   1.58 sec. at Pass 2]
DE:   #PIs = 559  #Luts =  1462  Max Lvl =  14  Avg Lvl =   6.07  [   2.83 sec. at Pass 3]
DE:   #PIs = 559  #Luts =  1443  Max Lvl =  15  Avg Lvl =   5.93  [   1.91 sec. at Pass 4]
DE:   #PIs = 559  #Luts =  1434  Max Lvl =  14  Avg Lvl =   6.02  [   3.70 sec. at Pass 5]
DE:   #PIs = 559  #Luts =  1432  Max Lvl =  14  Avg Lvl =   6.01  [   1.80 sec. at Pass 6]
DE:   #PIs = 559  #Luts =  1424  Max Lvl =  13  Avg Lvl =   6.28  [   3.34 sec. at Pass 7]
DE:   #PIs = 559  #Luts =  1417  Max Lvl =  15  Avg Lvl =   6.41  [   2.12 sec. at Pass 8]
DE:   #PIs = 559  #Luts =  1414  Max Lvl =  14  Avg Lvl =   6.21  [   3.56 sec. at Pass 9]
DE:   #PIs = 559  #Luts =  1414  Max Lvl =  11  Avg Lvl =   5.95  [   2.29 sec. at Pass 10]
DE:   #PIs = 559  #Luts =  1408  Max Lvl =  12  Avg Lvl =   5.95  [   4.35 sec. at Pass 11]
DE:   #PIs = 559  #Luts =  1406  Max Lvl =  12  Avg Lvl =   6.09  [   3.07 sec. at Pass 12]
DE:   #PIs = 559  #Luts =  1404  Max Lvl =  14  Avg Lvl =   6.19  [   4.75 sec. at Pass 13]
DE:   #PIs = 559  #Luts =  1404  Max Lvl =  12  Avg Lvl =   5.86  [   2.47 sec. at Pass 14]
DE:   #PIs = 559  #Luts =  1398  Max Lvl =  13  Avg Lvl =   6.05  [   3.60 sec. at Pass 15]
DE:   #PIs = 559  #Luts =  1398  Max Lvl =  13  Avg Lvl =   6.05  [   2.21 sec. at Pass 16]
DE:   #PIs = 559  #Luts =  1396  Max Lvl =  12  Avg Lvl =   5.78  [   4.62 sec. at Pass 17]
DE:   #PIs = 559  #Luts =  1396  Max Lvl =  12  Avg Lvl =   5.78  [   2.15 sec. at Pass 18]
DE:   #PIs = 559  #Luts =  1389  Max Lvl =  12  Avg Lvl =   6.05  [   4.90 sec. at Pass 19]
DE:   #PIs = 559  #Luts =  1389  Max Lvl =  12  Avg Lvl =   6.05  [   3.02 sec. at Pass 20]
DE:   #PIs = 559  #Luts =  1388  Max Lvl =  13  Avg Lvl =   6.23  [   3.77 sec. at Pass 21]
DE:   #PIs = 559  #Luts =  1388  Max Lvl =  13  Avg Lvl =   6.23  [   2.03 sec. at Pass 22]
DE:   #PIs = 559  #Luts =  1388  Max Lvl =  13  Avg Lvl =   6.23  [   3.97 sec. at Pass 23]
DE:   #PIs = 559  #Luts =  1388  Max Lvl =  13  Avg Lvl =   6.23  [   2.18 sec. at Pass 24]
DE:   #PIs = 559  #Luts =  1388  Max Lvl =  13  Avg Lvl =   6.23  [   0.43 sec. at Pass 25]

yosys> opt_expr

3.86. Executing OPT_EXPR pass (perform const folding).
Optimizing module b15.

yosys> opt_merge -nomux

3.87. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b15'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.88. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b15..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.89. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b15.
Performed a total of 0 changes.

yosys> opt_merge

3.90. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b15'.
Removed a total of 0 cells.

yosys> opt_share

3.91. Executing OPT_SHARE pass.

yosys> opt_dff -nodffe -nosdff

3.92. Executing OPT_DFF pass (perform DFF optimizations).
Removing always-active EN on $abc$39599$auto$blifparse.cc:362:parse_blif$39603 ($_DFFE_PP0P_) from module b15.
Removing always-active EN on $abc$39599$auto$blifparse.cc:362:parse_blif$39602 ($_DFFE_PP0P_) from module b15.
Removing always-active EN on $abc$39599$auto$blifparse.cc:362:parse_blif$39601 ($_DFFE_PP0P_) from module b15.
Removing always-active EN on $abc$39599$auto$blifparse.cc:362:parse_blif$39600 ($_DFFE_PP0P_) from module b15.

yosys> opt_clean

3.93. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b15..
Removed 0 unused cells and 5795 unused wires.
<suppressed ~3 debug messages>

yosys> opt_expr

3.94. Executing OPT_EXPR pass (perform const folding).
Optimizing module b15.
MAX OPT ITERATION = 1

yosys> opt_ffinv

3.95. Executing OPT_FFINV pass (push inverters through FFs).
Discovering LUTs.
Pushed 3 inverters.

yosys> stat

3.96. Printing statistics.

=== b15 ===

   Number of wires:               1536
   Number of wire bits:           2480
   Number of public wires:          32
   Number of public wire bits:     294
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1986
     $_DFFE_PP0P_                  400
     $_DFFE_PP1P_                    3
     $_DFF_PP0_                     10
     $lut                         1385
     adder_carry                   188


yosys> shregmap -minlen 8 -maxlen 20

3.97. Executing SHREGMAP pass (map shift registers).
Converted 0 dff cells into 0 shift registers.

yosys> dfflegalize -cell $_DFF_?_ 0 -cell $_DFF_???_ 0 -cell $_DFFE_????_ 0 -cell $_DFFSR_???_ 0 -cell $_DFFSRE_????_ 0 -cell $_DLATCHSR_PPP_ 0

3.98. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

yosys> stat

3.99. Printing statistics.

=== b15 ===

   Number of wires:               1536
   Number of wire bits:           2480
   Number of public wires:          32
   Number of public wire bits:     294
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1986
     $_DFFE_PP0P_                  400
     $_DFFE_PP1P_                    3
     $_DFF_PP0_                     10
     $lut                         1385
     adder_carry                   188


yosys> techmap -map +/techmap.v -map +/rapidsilicon/genesis/ffs_map.v

3.100. Executing TECHMAP pass (map to technology primitives).

3.100.1. Executing Verilog-2005 frontend: /home/users/khyber.runner/yosys_verific_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/khyber.runner/yosys_verific_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.100.2. Executing Verilog-2005 frontend: /home/users/khyber.runner/yosys_verific_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/ffs_map.v
Parsing Verilog input from `/home/users/khyber.runner/yosys_verific_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/ffs_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP0N_'.
Generating RTLIL representation for module `\$_DFFE_PN0P_'.
Generating RTLIL representation for module `\$_DFFE_PN0N_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP1N_'.
Generating RTLIL representation for module `\$_DFFE_PN1P_'.
Generating RTLIL representation for module `\$_DFFE_PN1N_'.
Generating RTLIL representation for module `\$_DFFSR_PPP_'.
Generating RTLIL representation for module `\$_DFFSR_PNP_'.
Generating RTLIL representation for module `\$_DFFSR_PNN_'.
Generating RTLIL representation for module `\$_DFFSR_PPN_'.
Generating RTLIL representation for module `\$_DFFSR_NPP_'.
Generating RTLIL representation for module `\$_DFFSR_NNP_'.
Generating RTLIL representation for module `\$_DFFSR_NNN_'.
Generating RTLIL representation for module `\$_DFFSR_NPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PNPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPNP_'.
Generating RTLIL representation for module `\$_DFFSRE_PNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PNPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PPNN_'.
Generating RTLIL representation for module `\$_DFFSRE_PNNN_'.
Generating RTLIL representation for module `\$_DLATCHSR_PPP_'.
Generating RTLIL representation for module `\$_DLATCHSR_NPP_'.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP0N_'.
Generating RTLIL representation for module `\$_DFFE_NN0P_'.
Generating RTLIL representation for module `\$_DFFE_NN0N_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_NP1N_'.
Generating RTLIL representation for module `\$_DFFE_NN1P_'.
Generating RTLIL representation for module `\$_DFFE_NN1N_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNPP_'.
Generating RTLIL representation for module `\$_DFFSRE_NPNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPN_'.
Generating RTLIL representation for module `\$_DFFSRE_NNPN_'.
Generating RTLIL representation for module `\$_DFFSRE_NPNN_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNN_'.
Generating RTLIL representation for module `\$__SHREG_DFF_P_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PN0_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NN0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFF_PN1_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_NN1_'.
Successfully finished Verilog frontend.

3.100.3. Continuing TECHMAP pass.
Using template \$_DFFE_PP0P_ for cells of type $_DFFE_PP0P_.
Using extmapper simplemap for cells of type $lut.
Using template \$_DFF_PP0_ for cells of type $_DFF_PP0_.
Using template \$_DFFE_PP1P_ for cells of type $_DFFE_PP1P_.
Using extmapper simplemap for cells of type $logic_not.
No more expansions possible.
<suppressed ~2347 debug messages>

yosys> opt_expr -mux_undef

3.101. Executing OPT_EXPR pass (perform const folding).
Optimizing module b15.
<suppressed ~34900 debug messages>

yosys> simplemap

3.102. Executing SIMPLEMAP pass (map simple cells to gate primitives).

yosys> opt_expr

3.103. Executing OPT_EXPR pass (perform const folding).
Optimizing module b15.

yosys> opt_merge

3.104. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b15'.
<suppressed ~13095 debug messages>
Removed a total of 4365 cells.

yosys> opt_dff -nodffe -nosdff

3.105. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.106. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b15..
Removed 1 unused cells and 5545 unused wires.
<suppressed ~2 debug messages>

yosys> opt -nodffe -nosdff

3.107. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.107.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b15.
<suppressed ~1088 debug messages>

yosys> opt_merge -nomux

3.107.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b15'.
<suppressed ~45 debug messages>
Removed a total of 15 cells.

yosys> opt_muxtree

3.107.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b15..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.107.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b15.
Performed a total of 0 changes.

yosys> opt_merge

3.107.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b15'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.107.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.107.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b15..
Removed 0 unused cells and 302 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.107.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module b15.

3.107.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.107.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b15..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.107.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b15.
Performed a total of 0 changes.

yosys> opt_merge

3.107.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b15'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.107.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.107.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b15..

yosys> opt_expr

3.107.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module b15.

3.107.16. Finished OPT passes. (There is nothing left to do.)

yosys> abc -script /home/users/temp_dir/yosys_lZVLdq/abc_tmp_2.scr

3.108. Executing ABC pass (technology mapping using ABC).

3.108.1. Extracting gate netlist of module `\b15' to `<abc-temp-dir>/input.blif'..
Extracted 5263 gates and 5824 wires to a netlist network with 559 inputs and 609 outputs.

3.108.1.1. Executing ABC.
DE:   #PIs = 559  #Luts =  1392  Max Lvl =  14  Avg Lvl =   6.50  [   0.17 sec. at Pass 0]
DE:   #PIs = 559  #Luts =  1391  Max Lvl =   9  Avg Lvl =   5.56  [  10.11 sec. at Pass 1]
DE:   #PIs = 559  #Luts =  1391  Max Lvl =   9  Avg Lvl =   5.56  [   1.83 sec. at Pass 2]
DE:   #PIs = 559  #Luts =  1391  Max Lvl =   9  Avg Lvl =   5.56  [   3.39 sec. at Pass 3]
DE:   #PIs = 559  #Luts =  1391  Max Lvl =   9  Avg Lvl =   5.56  [   1.99 sec. at Pass 4]
DE:   #PIs = 559  #Luts =  1387  Max Lvl =  12  Avg Lvl =   5.84  [   3.83 sec. at Pass 5]
DE:   #PIs = 559  #Luts =  1387  Max Lvl =  12  Avg Lvl =   5.84  [   2.78 sec. at Pass 6]
DE:   #PIs = 559  #Luts =  1387  Max Lvl =  12  Avg Lvl =   5.84  [   3.97 sec. at Pass 7]
DE:   #PIs = 559  #Luts =  1386  Max Lvl =  15  Avg Lvl =   5.78  [   2.00 sec. at Pass 8]
DE:   #PIs = 559  #Luts =  1380  Max Lvl =  12  Avg Lvl =   5.73  [   3.61 sec. at Pass 9]
DE:   #PIs = 559  #Luts =  1380  Max Lvl =  12  Avg Lvl =   5.73  [   2.05 sec. at Pass 10]
DE:   #PIs = 559  #Luts =  1379  Max Lvl =  12  Avg Lvl =   5.82  [   3.77 sec. at Pass 11]
DE:   #PIs = 559  #Luts =  1379  Max Lvl =  12  Avg Lvl =   5.82  [   1.88 sec. at Pass 12]
DE:   #PIs = 559  #Luts =  1378  Max Lvl =  12  Avg Lvl =   5.75  [   3.48 sec. at Pass 13]
DE:   #PIs = 559  #Luts =  1378  Max Lvl =  12  Avg Lvl =   5.75  [   2.09 sec. at Pass 14]
DE:   #PIs = 559  #Luts =  1377  Max Lvl =  12  Avg Lvl =   6.13  [   3.52 sec. at Pass 15]
DE:   #PIs = 559  #Luts =  1377  Max Lvl =  12  Avg Lvl =   6.13  [   2.08 sec. at Pass 16]
DE:   #PIs = 559  #Luts =  1373  Max Lvl =  12  Avg Lvl =   5.98  [   3.62 sec. at Pass 17]
DE:   #PIs = 559  #Luts =  1373  Max Lvl =  12  Avg Lvl =   5.98  [   2.15 sec. at Pass 18]
DE:   #PIs = 559  #Luts =  1373  Max Lvl =  12  Avg Lvl =   5.98  [   3.67 sec. at Pass 19]
DE:   #PIs = 559  #Luts =  1373  Max Lvl =  12  Avg Lvl =   5.98  [   2.41 sec. at Pass 20]
DE:   #PIs = 559  #Luts =  1373  Max Lvl =  12  Avg Lvl =   5.98  [   0.51 sec. at Pass 21]

yosys> opt_expr

3.109. Executing OPT_EXPR pass (perform const folding).
Optimizing module b15.

yosys> opt_merge -nomux

3.110. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b15'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.111. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b15..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.112. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b15.
Performed a total of 0 changes.

yosys> opt_merge

3.113. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b15'.
Removed a total of 0 cells.

yosys> opt_share

3.114. Executing OPT_SHARE pass.

yosys> opt_dff -nodffe -nosdff

3.115. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.116. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b15..
Removed 0 unused cells and 4817 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.117. Executing OPT_EXPR pass (perform const folding).
Optimizing module b15.
MAX OPT ITERATION = 1

yosys> hierarchy -check

3.118. Executing HIERARCHY pass (managing design hierarchy).

3.118.1. Analyzing design hierarchy..
Top module:  \b15

3.118.2. Analyzing design hierarchy..
Top module:  \b15
Removed 0 unused modules.

yosys> stat

3.119. Printing statistics.

=== b15 ===

   Number of wires:               1523
   Number of wire bits:           2467
   Number of public wires:          32
   Number of public wire bits:     294
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1974
     $lut                         1373
     adder_carry                   188
     dffsre                        413


yosys> opt_clean -purge

3.120. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b15..
Removed 0 unused cells and 2 unused wires.
<suppressed ~2 debug messages>

yosys> write_verilog -noattr -nohex synthesized.v

3.121. Executing Verilog backend.
Dumping module `\b15'.

End of script. Logfile hash: 0e48224afb, CPU: user 30.73s system 1.33s, MEM: 114.50 MB peak
Yosys 0.18+10 (git sha1 7a7a25778, gcc 9.1.0 -fPIC -Os)
Time spent: 98% 6x abc (1578 sec), 0% 32x opt_dff (8 sec), ...
real 196.34
user 1497.05
sys 107.93
