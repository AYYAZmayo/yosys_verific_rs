
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys-Verific 0.0.49
 Yosys 0.18+10 (git sha1 7a7a25778, gcc 9.1.0 -fPIC -Os)


-- Executing script file `yosys.ys' --
echo on

yosys> plugin -i synth-rs

yosys> read -verific

yosys> read -incdir .

yosys> verific -vlog-incdir .

1. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific May22_SW_Release, released at Wed Jun  1 05:39:28 2022.

yosys> verilog_defaults -add -I.

yosys> read -vhdl b08.vhd

yosys> verific -vhdl b08.vhd

2. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific May22_SW_Release, released at Wed Jun  1 05:39:28 2022.
VERIFIC-INFO [VHDL-1504] default VHDL library search path is now "/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008"
VERIFIC-COMMENT [VHDL-1481] Analyzing VHDL file 'b08.vhd'
VERIFIC-COMMENT [VHDL-1493] Restoring VHDL unit 'std.standard' from file '/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008/std/standard.vdb'
VERIFIC-INFO [VHDL-1012] b08.vhd:1: analyzing entity 'b08'
VERIFIC-INFO [VHDL-1010] b08.vhd:12: analyzing architecture 'behav'

yosys> synth_rs -top b08 -tech genesis -goal area -de -no_dsp -no_bram -verilog synthesized.v

3. Executing synth_rs pass: v0.4.58

yosys> read_verilog -lib -specify -nomem2reg +/rapidsilicon/common/cells_sim.v +/rapidsilicon/genesis/cells_sim.v

3.1. Executing Verilog-2005 frontend: /home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v
Parsing Verilog input from `/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\inv'.
Generating RTLIL representation for module `\buff'.
Generating RTLIL representation for module `\logic_0'.
Generating RTLIL representation for module `\logic_1'.
Generating RTLIL representation for module `\gclkbuff'.
Successfully finished Verilog frontend.

3.2. Executing Verilog-2005 frontend: /home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/cells_sim.v
Parsing Verilog input from `/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\dffsre'.
Generating RTLIL representation for module `\dffnsre'.
Generating RTLIL representation for module `\latchsre'.
Generating RTLIL representation for module `\latchnsre'.
Generating RTLIL representation for module `\io_scff'.
Generating RTLIL representation for module `\scff'.
Generating RTLIL representation for module `\sh_dff'.
Generating RTLIL representation for module `\adder_carry'.
Generating RTLIL representation for module `\sdffr'.
Generating RTLIL representation for module `\sdffs'.
Generating RTLIL representation for module `\TDP_BRAM18'.
Generating RTLIL representation for module `\TDP36K'.
Generating RTLIL representation for module `\RS_DSP1'.
Generating RTLIL representation for module `\RS_DSP2'.
Generating RTLIL representation for module `\RS_DSP2_MULT'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGIN_REGOUT'.
Generating RTLIL representation for module `\dsp_t1_sim'.
Generating RTLIL representation for module `\dsp_t1_20x18x64'.
Generating RTLIL representation for module `\dsp_t1_10x9x32'.
Successfully finished Verilog frontend.

yosys> hierarchy -check -top b08

3.3. Executing HIERARCHY pass (managing design hierarchy).
VERIFIC-INFO [VHDL-1067] b08.vhd:1: processing 'b08(BEHAV)'
Importing module b08.

3.3.1. Analyzing design hierarchy..
Top module:  \b08

3.3.2. Analyzing design hierarchy..
Top module:  \b08
Removed 0 unused modules.

yosys> proc

3.4. Executing PROC pass (convert processes to netlists).

yosys> proc_clean

3.4.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> proc_rmdead

3.4.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

yosys> proc_prune

3.4.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

yosys> proc_init

3.4.4. Executing PROC_INIT pass (extract init attributes).

yosys> proc_arst

3.4.5. Executing PROC_ARST pass (detect async resets in processes).

yosys> proc_rom

3.4.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

yosys> proc_mux

3.4.7. Executing PROC_MUX pass (convert decision trees to multiplexers).

yosys> proc_dlatch

3.4.8. Executing PROC_DLATCH pass (convert process syncs to latches).

yosys> proc_dff

3.4.9. Executing PROC_DFF pass (convert process syncs to FFs).

yosys> proc_memwr

3.4.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

yosys> proc_clean

3.4.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> opt_expr -keepdc

3.4.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module b08.
<suppressed ~5 debug messages>

yosys> bmuxmap

3.5. Executing BMUXMAP pass.

yosys> demuxmap

3.6. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> flatten

3.7. Executing FLATTEN pass (flatten design).

yosys> bmuxmap

3.8. Executing BMUXMAP pass.

yosys> demuxmap

3.9. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> tribuf -logic

3.10. Executing TRIBUF pass.

yosys> deminout

3.11. Executing DEMINOUT pass (demote inout ports to input or output).

yosys> opt_expr

3.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module b08.
<suppressed ~36 debug messages>

yosys> opt_clean

3.13. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b08..
Removed 1 unused cells and 46 unused wires.
<suppressed ~18 debug messages>

yosys> check

3.14. Executing CHECK pass (checking for obvious problems).
Checking module b08...
Found and reported 0 problems.

yosys> opt -nodffe -nosdff

3.15. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b08.

yosys> opt_merge -nomux

3.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b08'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.15.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b08..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port B of cell $verific$mux_97$b08.vhd:83$110: \STATO -> 2'11
      Replacing known input bits on port A of cell $verific$mux_7$b08.vhd:58$66: \STATO -> 2'00
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~22 debug messages>

yosys> opt_reduce

3.15.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b08.
Performed a total of 0 changes.

yosys> opt_merge

3.15.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b08'.
<suppressed ~114 debug messages>
Removed a total of 38 cells.

yosys> opt_dff -nodffe -nosdff

3.15.6. Executing OPT_DFF pass (perform DFF optimizations).
Changing const-value async load to async reset on $verific$STATO_reg$b08.vhd:86$119 ($aldff) from module b08.
Changing const-value async load to async reset on $verific$O_reg$b08.vhd:86$123 ($aldff) from module b08.
Changing const-value async load to async reset on $verific$OUT_R_reg$b08.vhd:86$122 ($aldff) from module b08.
Changing const-value async load to async reset on $verific$MAR_reg$b08.vhd:86$120 ($aldff) from module b08.
Changing const-value async load to async reset on $verific$IN_R_reg$b08.vhd:86$121 ($aldff) from module b08.

yosys> opt_clean

3.15.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b08..
Removed 0 unused cells and 20 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.15.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module b08.
<suppressed ~1 debug messages>

3.15.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.15.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b08..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~29 debug messages>

yosys> opt_reduce

3.15.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b08.
Performed a total of 0 changes.

yosys> opt_merge

3.15.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b08'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.15.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.15.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b08..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.15.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module b08.

3.15.16. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.15.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b08..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~29 debug messages>

yosys> opt_reduce

3.15.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b08.
Performed a total of 0 changes.

yosys> opt_merge

3.15.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b08'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.15.20. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.15.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b08..

yosys> opt_expr

3.15.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module b08.

3.15.23. Finished OPT passes. (There is nothing left to do.)

yosys> fsm -encoding binary

3.16. Executing FSM pass (extract and optimize FSM).

yosys> fsm_detect

3.16.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking b08.STATO as FSM state register:
    Users of register don't seem to benefit from recoding.

yosys> fsm_extract

3.16.2. Executing FSM_EXTRACT pass (extracting FSM from design).

yosys> fsm_opt

3.16.3. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> opt_clean

3.16.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b08..

yosys> fsm_opt

3.16.5. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> fsm_recode -encoding binary

3.16.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

yosys> fsm_info

3.16.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

yosys> fsm_map

3.16.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

yosys> opt -sat

3.17. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.17.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b08.

yosys> opt_merge -nomux

3.17.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b08'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.17.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b08..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~29 debug messages>

yosys> opt_reduce

3.17.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b08.
Performed a total of 0 changes.

yosys> opt_merge

3.17.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b08'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.17.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $verific$O_reg$b08.vhd:86$123 ($adff) from module b08 (D = \OUT_R, Q = \O).
Adding EN signal on $verific$OUT_R_reg$b08.vhd:86$122 ($adff) from module b08 (D = $auto$bmuxmap.cc:58:execute$138, Q = \OUT_R).
Adding EN signal on $verific$MAR_reg$b08.vhd:86$120 ($adff) from module b08 (D = $auto$bmuxmap.cc:58:execute$133, Q = \MAR).
Adding EN signal on $verific$IN_R_reg$b08.vhd:86$121 ($adff) from module b08 (D = \I, Q = \IN_R).

yosys> opt_clean

3.17.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b08..
Removed 6 unused cells and 6 unused wires.
<suppressed ~7 debug messages>

yosys> opt_expr

3.17.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module b08.
<suppressed ~2 debug messages>

3.17.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.17.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b08..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~27 debug messages>

yosys> opt_reduce

3.17.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b08.
Performed a total of 0 changes.

yosys> opt_merge

3.17.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b08'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

yosys> opt_dff -sat

3.17.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.17.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b08..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.17.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module b08.

3.17.16. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.17.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b08..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~27 debug messages>

yosys> opt_reduce

3.17.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b08.
Performed a total of 0 changes.

yosys> opt_merge

3.17.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b08'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.17.20. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.17.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b08..

yosys> opt_expr

3.17.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module b08.

3.17.23. Finished OPT passes. (There is nothing left to do.)

yosys> wreduce -keepdc

3.18. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 2) from mux cell b08.$verific$mux_7$b08.vhd:58$66 ($mux).
Removed top 2 bits (of 3) from port B of cell b08.$verific$add_92$b08.vhd:78$104 ($add).
Removed top 1 bits (of 4) from port Y of cell b08.$verific$add_92$b08.vhd:78$104 ($add).
Removed top 1 bits (of 2) from mux cell b08.$auto$bmuxmap.cc:60:execute$292 ($mux).
Removed top 1 bits (of 2) from wire b08.$auto$bmuxmap.cc:58:execute$235.
Removed top 1 bits (of 2) from wire b08.$verific$n56$33.

yosys> peepopt

3.19. Executing PEEPOPT pass (run peephole optimizers).

yosys> opt_clean

3.20. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b08..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

yosys> bmuxmap

3.21. Executing BMUXMAP pass.

yosys> demuxmap

3.22. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> alumacc

3.23. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module b08:
  creating $macc model for $verific$add_92$b08.vhd:78$104 ($add).
  creating $alu model for $macc $verific$add_92$b08.vhd:78$104.
  creating $alu cell for $verific$add_92$b08.vhd:78$104: $auto$alumacc.cc:485:replace_alu$332
  created 1 $alu and 0 $macc cells.

yosys> opt_expr

3.24. Executing OPT_EXPR pass (perform const folding).
Optimizing module b08.

yosys> opt_merge -nomux

3.25. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b08'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.26. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b08..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~27 debug messages>

yosys> opt_reduce

3.27. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b08.
Performed a total of 0 changes.

yosys> opt_merge

3.28. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b08'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

yosys> opt_share

3.29. Executing OPT_SHARE pass.

yosys> opt_dff

3.30. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.31. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b08..

yosys> opt_expr

3.32. Executing OPT_EXPR pass (perform const folding).
Optimizing module b08.

yosys> opt_muxtree

3.33. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b08..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~26 debug messages>

yosys> opt_reduce

3.34. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b08.
Performed a total of 0 changes.

yosys> opt_merge

3.35. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b08'.
Removed a total of 0 cells.

yosys> opt_share

3.36. Executing OPT_SHARE pass.

yosys> opt_dff

3.37. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.38. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b08..

yosys> opt_expr

3.39. Executing OPT_EXPR pass (perform const folding).
Optimizing module b08.
MAX OPT ITERATION = 2

yosys> stat

3.40. Printing statistics.

=== b08 ===

   Number of wires:                 70
   Number of wire bits:            193
   Number of public wires:           9
   Number of public wire bits:      32
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 70
     $adff                           1
     $adffe                          4
     $alu                            1
     $and                            3
     $eq                             1
     $mux                           43
     $ne                             5
     $not                            4
     $or                             3
     $reduce_and                     4
     $reduce_bool                    1


yosys> memory -nomap

3.41. Executing MEMORY pass.

yosys> opt_mem

3.41.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

yosys> opt_mem_priority

3.41.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

yosys> opt_mem_feedback

3.41.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

yosys> memory_bmux2rom

3.41.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

yosys> memory_dff

3.41.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

yosys> opt_clean

3.41.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b08..

yosys> memory_share

3.41.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

yosys> opt_mem_widen

3.41.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

yosys> opt_clean

3.41.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b08..

yosys> memory_collect

3.41.10. Executing MEMORY_COLLECT pass (generating $mem cells).

yosys> stat

3.42. Printing statistics.

=== b08 ===

   Number of wires:                 70
   Number of wire bits:            193
   Number of public wires:           9
   Number of public wire bits:      32
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 70
     $adff                           1
     $adffe                          4
     $alu                            1
     $and                            3
     $eq                             1
     $mux                           43
     $ne                             5
     $not                            4
     $or                             3
     $reduce_and                     4
     $reduce_bool                    1


yosys> muxpack

3.43. Executing MUXPACK pass ($mux cell cascades to $pmux).
Converted 0 (p)mux cells into 0 pmux cells.
<suppressed ~26 debug messages>

yosys> opt_clean

3.44. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b08..

yosys> pmuxtree

3.45. Executing PMUXTREE pass.

yosys> muxpack

3.46. Executing MUXPACK pass ($mux cell cascades to $pmux).
Converted 0 (p)mux cells into 0 pmux cells.
<suppressed ~26 debug messages>

yosys> memory_map

3.47. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

yosys> stat

3.48. Printing statistics.

=== b08 ===

   Number of wires:                 70
   Number of wire bits:            193
   Number of public wires:           9
   Number of public wire bits:      32
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 70
     $adff                           1
     $adffe                          4
     $alu                            1
     $and                            3
     $eq                             1
     $mux                           43
     $ne                             5
     $not                            4
     $or                             3
     $reduce_and                     4
     $reduce_bool                    1


yosys> techmap -map +/techmap.v -map +/rapidsilicon/genesis/arith_map.v

3.49. Executing TECHMAP pass (map to technology primitives).

3.49.1. Executing Verilog-2005 frontend: /home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.49.2. Executing Verilog-2005 frontend: /home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/arith_map.v
Parsing Verilog input from `/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_rs_alu'.
Successfully finished Verilog frontend.

3.49.3. Continuing TECHMAP pass.
Using template $paramod$3ef7d3dd227da7627a99c5e5a6a4deb817573e39\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $adff.
Using extmapper simplemap for cells of type $adffe.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000011 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
No more expansions possible.
<suppressed ~367 debug messages>

yosys> stat

3.50. Printing statistics.

=== b08 ===

   Number of wires:                124
   Number of wire bits:           1389
   Number of public wires:           9
   Number of public wire bits:      32
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                217
     $_AND_                         38
     $_DFFE_PP0P_                   19
     $_DFF_PP0_                      2
     $_MUX_                         76
     $_NOT_                         15
     $_OR_                          39
     $_XOR_                         28


yosys> opt_expr

3.51. Executing OPT_EXPR pass (perform const folding).
Optimizing module b08.
<suppressed ~50 debug messages>

yosys> opt_merge -nomux

3.52. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b08'.
<suppressed ~69 debug messages>
Removed a total of 23 cells.

yosys> opt_muxtree

3.53. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b08..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.54. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b08.
Performed a total of 0 changes.

yosys> opt_merge

3.55. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b08'.
Removed a total of 0 cells.

yosys> opt_share

3.56. Executing OPT_SHARE pass.

yosys> opt_dff

3.57. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.58. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b08..
Removed 1 unused cells and 59 unused wires.
<suppressed ~2 debug messages>

yosys> opt_expr

3.59. Executing OPT_EXPR pass (perform const folding).
Optimizing module b08.

yosys> opt_muxtree

3.60. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b08..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.61. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b08.
Performed a total of 0 changes.

yosys> opt_merge

3.62. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b08'.
Removed a total of 0 cells.

yosys> opt_share

3.63. Executing OPT_SHARE pass.

yosys> opt_dff

3.64. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.65. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b08..

yosys> opt_expr

3.66. Executing OPT_EXPR pass (perform const folding).
Optimizing module b08.
MAX OPT ITERATION = 2

yosys> opt -fast -full

3.67. Executing OPT pass (performing simple optimizations).

yosys> opt_expr -full

3.67.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b08.
<suppressed ~22 debug messages>

yosys> opt_merge

3.67.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b08'.
Removed a total of 0 cells.

yosys> opt_dff

3.67.3. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.67.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b08..
Removed 0 unused cells and 4 unused wires.
<suppressed ~1 debug messages>

3.67.5. Finished fast OPT passes.

yosys> techmap -map +/techmap.v

3.68. Executing TECHMAP pass (map to technology primitives).

3.68.1. Executing Verilog-2005 frontend: /home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.68.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~71 debug messages>

yosys> opt -sat

3.69. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.69.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b08.

yosys> opt_merge -nomux

3.69.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b08'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.69.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b08..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.69.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b08.
Performed a total of 0 changes.

yosys> opt_merge

3.69.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b08'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.69.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.69.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b08..

yosys> opt_expr

3.69.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module b08.

3.69.9. Finished OPT passes. (There is nothing left to do.)

yosys> abc -dff

3.70. Executing ABC pass (technology mapping using ABC).

3.70.1. Summary of detected clock domains:
  8 cells in clk=\CLOCK, en=$auto$opt_dff.cc:219:make_patterns_logic$305, arst=\RESET, srst={ }
  16 cells in clk=\CLOCK, en=$auto$opt_dff.cc:219:make_patterns_logic$314, arst=\RESET, srst={ }
  38 cells in clk=\CLOCK, en=$auto$opt_dff.cc:219:make_patterns_logic$323, arst=\RESET, srst={ }
  26 cells in clk=\CLOCK, en=$auto$opt_dff.cc:219:make_patterns_logic$328, arst=\RESET, srst={ }
  62 cells in clk=\CLOCK, en={ }, arst=\RESET, srst={ }

3.70.2. Extracting gate netlist of module `\b08' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $auto$opt_dff.cc:219:make_patterns_logic$305, asynchronously reset by \RESET
Extracted 8 gates and 15 wires to a netlist network with 7 inputs and 5 outputs.

3.70.2.1. Executing ABC.

3.70.3. Extracting gate netlist of module `\b08' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $auto$opt_dff.cc:219:make_patterns_logic$314, asynchronously reset by \RESET
Extracted 16 gates and 26 wires to a netlist network with 9 inputs and 5 outputs.

3.70.3.1. Executing ABC.

3.70.4. Extracting gate netlist of module `\b08' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $auto$opt_dff.cc:219:make_patterns_logic$323, asynchronously reset by \RESET
Extracted 38 gates and 46 wires to a netlist network with 6 inputs and 22 outputs.

3.70.4.1. Executing ABC.

3.70.5. Extracting gate netlist of module `\b08' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $auto$opt_dff.cc:219:make_patterns_logic$328, asynchronously reset by \RESET
Extracted 26 gates and 44 wires to a netlist network with 18 inputs and 16 outputs.

3.70.5.1. Executing ABC.

3.70.6. Extracting gate netlist of module `\b08' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, asynchronously reset by \RESET
Extracted 62 gates and 97 wires to a netlist network with 33 inputs and 9 outputs.

3.70.6.1. Executing ABC.

yosys> abc -dff

3.71. Executing ABC pass (technology mapping using ABC).

3.71.1. Summary of detected clock domains:
  33 cells in clk=\CLOCK, en=$abc$844$auto$opt_dff.cc:219:make_patterns_logic$323, arst=\RESET, srst={ }
  7 cells in clk=\CLOCK, en=$abc$809$auto$opt_dff.cc:219:make_patterns_logic$305, arst=\RESET, srst={ }
  27 cells in clk=\CLOCK, en=$abc$885$auto$opt_dff.cc:219:make_patterns_logic$328, arst=\RESET, srst={ }
  49 cells in clk=\CLOCK, en=$abc$824$auto$opt_dff.cc:219:make_patterns_logic$314, arst=\RESET, srst={ }
  16 cells in clk=\CLOCK, en={ }, arst=\RESET, srst={ }

3.71.2. Extracting gate netlist of module `\b08' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$844$auto$opt_dff.cc:219:make_patterns_logic$323, asynchronously reset by \RESET
Extracted 33 gates and 39 wires to a netlist network with 6 inputs and 20 outputs.

3.71.2.1. Executing ABC.

3.71.3. Extracting gate netlist of module `\b08' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$809$auto$opt_dff.cc:219:make_patterns_logic$305, asynchronously reset by \RESET
Extracted 7 gates and 14 wires to a netlist network with 7 inputs and 6 outputs.

3.71.3.1. Executing ABC.

3.71.4. Extracting gate netlist of module `\b08' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$885$auto$opt_dff.cc:219:make_patterns_logic$328, asynchronously reset by \RESET
Extracted 27 gates and 47 wires to a netlist network with 20 inputs and 19 outputs.

3.71.4.1. Executing ABC.

3.71.5. Extracting gate netlist of module `\b08' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$824$auto$opt_dff.cc:219:make_patterns_logic$314, asynchronously reset by \RESET
Extracted 49 gates and 87 wires to a netlist network with 38 inputs and 5 outputs.

3.71.5.1. Executing ABC.

3.71.6. Extracting gate netlist of module `\b08' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, asynchronously reset by \RESET
Extracted 16 gates and 20 wires to a netlist network with 4 inputs and 8 outputs.

3.71.6.1. Executing ABC.

yosys> abc -dff

3.72. Executing ABC pass (technology mapping using ABC).

3.72.1. Summary of detected clock domains:
  28 cells in clk=\CLOCK, en=$abc$1019$abc$885$auto$opt_dff.cc:219:make_patterns_logic$328, arst=\RESET, srst={ }
  52 cells in clk=\CLOCK, en=$abc$1055$abc$824$auto$opt_dff.cc:219:make_patterns_logic$314, arst=\RESET, srst={ }
  30 cells in clk=\CLOCK, en=$abc$968$abc$844$auto$opt_dff.cc:219:make_patterns_logic$323, arst=\RESET, srst={ }
  6 cells in clk=\CLOCK, en=$abc$1003$abc$809$auto$opt_dff.cc:219:make_patterns_logic$305, arst=\RESET, srst={ }
  17 cells in clk=\CLOCK, en={ }, arst=\RESET, srst={ }

3.72.2. Extracting gate netlist of module `\b08' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$1019$abc$885$auto$opt_dff.cc:219:make_patterns_logic$328, asynchronously reset by \RESET
Extracted 28 gates and 49 wires to a netlist network with 21 inputs and 20 outputs.

3.72.2.1. Executing ABC.

3.72.3. Extracting gate netlist of module `\b08' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$1055$abc$824$auto$opt_dff.cc:219:make_patterns_logic$314, asynchronously reset by \RESET
Extracted 52 gates and 90 wires to a netlist network with 38 inputs and 5 outputs.

3.72.3.1. Executing ABC.

3.72.4. Extracting gate netlist of module `\b08' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$968$abc$844$auto$opt_dff.cc:219:make_patterns_logic$323, asynchronously reset by \RESET
Extracted 30 gates and 36 wires to a netlist network with 6 inputs and 18 outputs.

3.72.4.1. Executing ABC.

3.72.5. Extracting gate netlist of module `\b08' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$1003$abc$809$auto$opt_dff.cc:219:make_patterns_logic$305, asynchronously reset by \RESET
Extracted 6 gates and 13 wires to a netlist network with 7 inputs and 5 outputs.

3.72.5.1. Executing ABC.

3.72.6. Extracting gate netlist of module `\b08' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, asynchronously reset by \RESET
Extracted 17 gates and 21 wires to a netlist network with 4 inputs and 8 outputs.

3.72.6.1. Executing ABC.

yosys> abc -dff

3.73. Executing ABC pass (technology mapping using ABC).

3.73.1. Summary of detected clock domains:
  6 cells in clk=\CLOCK, en=$abc$1250$abc$1003$abc$809$auto$opt_dff.cc:219:make_patterns_logic$305, arst=\RESET, srst={ }
  28 cells in clk=\CLOCK, en=$abc$1128$abc$1019$abc$885$auto$opt_dff.cc:219:make_patterns_logic$328, arst=\RESET, srst={ }
  52 cells in clk=\CLOCK, en=$abc$1165$abc$1055$abc$824$auto$opt_dff.cc:219:make_patterns_logic$314, arst=\RESET, srst={ }
  26 cells in clk=\CLOCK, en=$abc$1221$abc$968$abc$844$auto$opt_dff.cc:219:make_patterns_logic$323, arst=\RESET, srst={ }
  18 cells in clk=\CLOCK, en={ }, arst=\RESET, srst={ }

3.73.2. Extracting gate netlist of module `\b08' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$1250$abc$1003$abc$809$auto$opt_dff.cc:219:make_patterns_logic$305, asynchronously reset by \RESET
Extracted 6 gates and 13 wires to a netlist network with 7 inputs and 5 outputs.

3.73.2.1. Executing ABC.

3.73.3. Extracting gate netlist of module `\b08' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$1128$abc$1019$abc$885$auto$opt_dff.cc:219:make_patterns_logic$328, asynchronously reset by \RESET
Extracted 28 gates and 49 wires to a netlist network with 21 inputs and 20 outputs.

3.73.3.1. Executing ABC.

3.73.4. Extracting gate netlist of module `\b08' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$1165$abc$1055$abc$824$auto$opt_dff.cc:219:make_patterns_logic$314, asynchronously reset by \RESET
Extracted 52 gates and 90 wires to a netlist network with 38 inputs and 5 outputs.

3.73.4.1. Executing ABC.

3.73.5. Extracting gate netlist of module `\b08' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$1221$abc$968$abc$844$auto$opt_dff.cc:219:make_patterns_logic$323, asynchronously reset by \RESET
Extracted 26 gates and 33 wires to a netlist network with 7 inputs and 17 outputs.

3.73.5.1. Executing ABC.

3.73.6. Extracting gate netlist of module `\b08' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, asynchronously reset by \RESET
Extracted 18 gates and 23 wires to a netlist network with 5 inputs and 9 outputs.

3.73.6.1. Executing ABC.

yosys> opt_ffinv

3.74. Executing OPT_FFINV pass (push inverters through FFs).
Discovering LUTs.
Pushed 0 inverters.

yosys> opt -sat

3.75. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.75.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b08.
<suppressed ~2 debug messages>

yosys> opt_merge -nomux

3.75.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b08'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.75.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b08..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.75.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b08.
Performed a total of 0 changes.

yosys> opt_merge

3.75.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b08'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.75.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.75.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b08..
Removed 0 unused cells and 866 unused wires.
<suppressed ~2 debug messages>

yosys> opt_expr

3.75.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module b08.

3.75.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.75.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b08..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.75.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b08.
Performed a total of 0 changes.

yosys> opt_merge

3.75.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b08'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.75.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.75.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b08..

yosys> opt_expr

3.75.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module b08.

3.75.16. Finished OPT passes. (There is nothing left to do.)

yosys> bmuxmap

3.76. Executing BMUXMAP pass.

yosys> demuxmap

3.77. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> abc -script /home/users/temp_dir/yosys_Yn7g36/abc_tmp_1.scr

3.78. Executing ABC pass (technology mapping using ABC).

3.78.1. Extracting gate netlist of module `\b08' to `<abc-temp-dir>/input.blif'..
Extracted 109 gates and 127 wires to a netlist network with 18 inputs and 13 outputs.

3.78.1.1. Executing ABC.
DE:   #PIs =  18  #Luts =    17  Max Lvl =   4  Avg Lvl =   1.23  [   0.30 sec. at Pass 0]
DE:   #PIs =  18  #Luts =    17  Max Lvl =   2  Avg Lvl =   1.23  [   0.64 sec. at Pass 1]
DE:   #PIs =  18  #Luts =    17  Max Lvl =   2  Avg Lvl =   1.23  [   0.30 sec. at Pass 2]
DE:   #PIs =  18  #Luts =    16  Max Lvl =   3  Avg Lvl =   1.31  [   0.80 sec. at Pass 3]
DE:   #PIs =  18  #Luts =    16  Max Lvl =   3  Avg Lvl =   1.31  [   0.51 sec. at Pass 4]
DE:   #PIs =  18  #Luts =    16  Max Lvl =   3  Avg Lvl =   1.31  [   1.03 sec. at Pass 5]
DE:   #PIs =  18  #Luts =    16  Max Lvl =   3  Avg Lvl =   1.31  [   0.53 sec. at Pass 6]
DE:   #PIs =  18  #Luts =    16  Max Lvl =   3  Avg Lvl =   1.31  [   6.16 sec. at Pass 7]
DE:   #PIs =  18  #Luts =    16  Max Lvl =   3  Avg Lvl =   1.31  [   0.91 sec. at Pass 8]

yosys> opt_expr

3.79. Executing OPT_EXPR pass (perform const folding).
Optimizing module b08.

yosys> opt_merge -nomux

3.80. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b08'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.81. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b08..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.82. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b08.
Performed a total of 0 changes.

yosys> opt_merge

3.83. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b08'.
Removed a total of 0 cells.

yosys> opt_share

3.84. Executing OPT_SHARE pass.

yosys> opt_dff

3.85. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.86. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b08..
Removed 0 unused cells and 128 unused wires.
<suppressed ~2 debug messages>

yosys> opt_expr

3.87. Executing OPT_EXPR pass (perform const folding).
Optimizing module b08.
MAX OPT ITERATION = 1

yosys> opt_ffinv

3.88. Executing OPT_FFINV pass (push inverters through FFs).
Discovering LUTs.
Pushed 0 inverters.

yosys> stat

3.89. Printing statistics.

=== b08 ===

   Number of wires:                 34
   Number of wire bits:             48
   Number of public wires:           7
   Number of public wire bits:      21
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 37
     $_DFFE_PP0P_                   19
     $_DFF_PP0_                      2
     $lut                           16


yosys> shregmap -minlen 8 -maxlen 20

3.90. Executing SHREGMAP pass (map shift registers).
Converted 0 dff cells into 0 shift registers.

yosys> dfflegalize -cell $_DFF_?_ 0 -cell $_DFF_???_ 0 -cell $_DFFE_????_ 0 -cell $_DFFSR_???_ 0 -cell $_DFFSRE_????_ 0 -cell $_DLATCHSR_PPP_ 0

3.91. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

yosys> stat

3.92. Printing statistics.

=== b08 ===

   Number of wires:                 34
   Number of wire bits:             48
   Number of public wires:           7
   Number of public wire bits:      21
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 37
     $_DFFE_PP0P_                   19
     $_DFF_PP0_                      2
     $lut                           16


yosys> techmap -map +/techmap.v -map +/rapidsilicon/genesis/ffs_map.v

3.93. Executing TECHMAP pass (map to technology primitives).

3.93.1. Executing Verilog-2005 frontend: /home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.93.2. Executing Verilog-2005 frontend: /home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/ffs_map.v
Parsing Verilog input from `/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/ffs_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP0N_'.
Generating RTLIL representation for module `\$_DFFE_PN0P_'.
Generating RTLIL representation for module `\$_DFFE_PN0N_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP1N_'.
Generating RTLIL representation for module `\$_DFFE_PN1P_'.
Generating RTLIL representation for module `\$_DFFE_PN1N_'.
Generating RTLIL representation for module `\$_DFFSR_PPP_'.
Generating RTLIL representation for module `\$_DFFSR_PNP_'.
Generating RTLIL representation for module `\$_DFFSR_PNN_'.
Generating RTLIL representation for module `\$_DFFSR_PPN_'.
Generating RTLIL representation for module `\$_DFFSR_NPP_'.
Generating RTLIL representation for module `\$_DFFSR_NNP_'.
Generating RTLIL representation for module `\$_DFFSR_NNN_'.
Generating RTLIL representation for module `\$_DFFSR_NPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PNPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPNP_'.
Generating RTLIL representation for module `\$_DFFSRE_PNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PNPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PPNN_'.
Generating RTLIL representation for module `\$_DFFSRE_PNNN_'.
Generating RTLIL representation for module `\$_DLATCHSR_PPP_'.
Generating RTLIL representation for module `\$_DLATCHSR_NPP_'.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP0N_'.
Generating RTLIL representation for module `\$_DFFE_NN0P_'.
Generating RTLIL representation for module `\$_DFFE_NN0N_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_NP1N_'.
Generating RTLIL representation for module `\$_DFFE_NN1P_'.
Generating RTLIL representation for module `\$_DFFE_NN1N_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNPP_'.
Generating RTLIL representation for module `\$_DFFSRE_NPNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPN_'.
Generating RTLIL representation for module `\$_DFFSRE_NNPN_'.
Generating RTLIL representation for module `\$_DFFSRE_NPNN_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNN_'.
Generating RTLIL representation for module `\$__SHREG_DFF_P_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PN0_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NN0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFF_PN1_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_NN1_'.
Successfully finished Verilog frontend.

3.93.3. Continuing TECHMAP pass.
Using template \$_DFFE_PP0P_ for cells of type $_DFFE_PP0P_.
Using template \$_DFF_PP0_ for cells of type $_DFF_PP0_.
Using extmapper simplemap for cells of type $lut.
Using extmapper simplemap for cells of type $logic_not.
No more expansions possible.
<suppressed ~194 debug messages>

yosys> opt_expr -mux_undef

3.94. Executing OPT_EXPR pass (perform const folding).
Optimizing module b08.
<suppressed ~308 debug messages>

yosys> simplemap

3.95. Executing SIMPLEMAP pass (map simple cells to gate primitives).

yosys> opt_expr

3.96. Executing OPT_EXPR pass (perform const folding).
Optimizing module b08.

yosys> opt_merge

3.97. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b08'.
<suppressed ~171 debug messages>
Removed a total of 57 cells.

yosys> opt_dff -nodffe -nosdff

3.98. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.99. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b08..
Removed 0 unused cells and 147 unused wires.
<suppressed ~1 debug messages>

yosys> opt -nodffe -nosdff

3.100. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.100.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b08.
<suppressed ~6 debug messages>

yosys> opt_merge -nomux

3.100.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b08'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.100.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b08..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.100.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b08.
Performed a total of 0 changes.

yosys> opt_merge

3.100.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b08'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.100.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.100.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b08..

yosys> opt_expr

3.100.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module b08.

3.100.9. Finished OPT passes. (There is nothing left to do.)

yosys> abc -script /home/users/temp_dir/yosys_Yn7g36/abc_tmp_2.scr

3.101. Executing ABC pass (technology mapping using ABC).

3.101.1. Extracting gate netlist of module `\b08' to `<abc-temp-dir>/input.blif'..
Extracted 90 gates and 111 wires to a netlist network with 19 inputs and 14 outputs.

3.101.1.1. Executing ABC.
DE:   #PIs =  19  #Luts =    17  Max Lvl =   3  Avg Lvl =   1.21  [   0.21 sec. at Pass 0]
DE:   #PIs =  19  #Luts =    17  Max Lvl =   3  Avg Lvl =   1.21  [   0.61 sec. at Pass 1]
DE:   #PIs =  19  #Luts =    17  Max Lvl =   3  Avg Lvl =   1.21  [   0.46 sec. at Pass 2]
DE:   #PIs =  19  #Luts =    17  Max Lvl =   3  Avg Lvl =   1.21  [   0.53 sec. at Pass 3]
DE:   #PIs =  19  #Luts =    17  Max Lvl =   3  Avg Lvl =   1.21  [   0.49 sec. at Pass 4]
DE:   #PIs =  19  #Luts =    17  Max Lvl =   3  Avg Lvl =   1.21  [   1.28 sec. at Pass 5]
DE:   #PIs =  19  #Luts =    17  Max Lvl =   3  Avg Lvl =   1.21  [   3.29 sec. at Pass 6]
DE:   #PIs =  19  #Luts =    17  Max Lvl =   3  Avg Lvl =   1.21  [   0.93 sec. at Pass 7]

yosys> opt_expr

3.102. Executing OPT_EXPR pass (perform const folding).
Optimizing module b08.

yosys> opt_merge -nomux

3.103. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b08'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.104. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b08..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.105. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b08.
Performed a total of 0 changes.

yosys> opt_merge

3.106. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b08'.
Removed a total of 0 cells.

yosys> opt_share

3.107. Executing OPT_SHARE pass.

yosys> opt_dff

3.108. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.109. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b08..
Removed 0 unused cells and 81 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.110. Executing OPT_EXPR pass (perform const folding).
Optimizing module b08.
MAX OPT ITERATION = 1

yosys> hierarchy -check

3.111. Executing HIERARCHY pass (managing design hierarchy).

3.111.1. Analyzing design hierarchy..
Top module:  \b08

3.111.2. Analyzing design hierarchy..
Top module:  \b08
Removed 0 unused modules.

yosys> stat

3.112. Printing statistics.

=== b08 ===

   Number of wires:                 35
   Number of wire bits:             49
   Number of public wires:           7
   Number of public wire bits:      21
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 38
     $lut                           17
     dffsre                         21


yosys> opt_clean -purge

3.113. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b08..

yosys> write_verilog -noattr -nohex synthesized.v

3.114. Executing Verilog backend.
Dumping module `\b08'.

End of script. Logfile hash: d09027950e, CPU: user 1.14s system 0.09s, MEM: 21.76 MB peak
Yosys 0.18+10 (git sha1 7a7a25778, gcc 9.1.0 -fPIC -Os)
Time spent: 99% 6x abc (155 sec), 0% 32x opt_expr (0 sec), ...
real 44.79
user 133.21
sys 23.43
