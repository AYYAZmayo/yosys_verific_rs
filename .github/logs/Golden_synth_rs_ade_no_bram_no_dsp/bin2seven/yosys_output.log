
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys-Verific 0.0.40
 Yosys 0.17+76 (git sha1 035496b50, gcc 9.1.0 -fPIC -Os)


-- Executing script file `yosys.ys' --
echo on

yosys> plugin -i synth-rs

yosys> read -verific

yosys> read -incdir .

yosys> verific -vlog-incdir .

1. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Apr22_SW_Release, released at Thu Apr 28 08:08:21 2022.

yosys> verilog_defaults -add -I.

yosys> read -vlog2k bin2seven.v

yosys> verific -vlog2k bin2seven.v

2. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Apr22_SW_Release, released at Thu Apr 28 08:08:21 2022.
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'bin2seven.v'

yosys> synth_rs -top top -tech genesis -goal area -de -no_dsp -no_bram -verilog synthesized.v

3. Executing synth_rs pass: v0.4.55

yosys> read_verilog -lib -specify -nomem2reg +/rapidsilicon/common/cells_sim.v +/rapidsilicon/genesis/cells_sim.v

3.1. Executing Verilog-2005 frontend: /home/users/khyber.runner/yosys_verific_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v
Parsing Verilog input from `/home/users/khyber.runner/yosys_verific_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\inv'.
Generating RTLIL representation for module `\buff'.
Generating RTLIL representation for module `\logic_0'.
Generating RTLIL representation for module `\logic_1'.
Generating RTLIL representation for module `\gclkbuff'.
Successfully finished Verilog frontend.

3.2. Executing Verilog-2005 frontend: /home/users/khyber.runner/yosys_verific_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/cells_sim.v
Parsing Verilog input from `/home/users/khyber.runner/yosys_verific_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\dffsre'.
Generating RTLIL representation for module `\dffnsre'.
Generating RTLIL representation for module `\latchsre'.
Generating RTLIL representation for module `\latchnsre'.
Generating RTLIL representation for module `\io_scff'.
Generating RTLIL representation for module `\scff'.
Generating RTLIL representation for module `\sh_dff'.
Generating RTLIL representation for module `\adder_carry'.
Generating RTLIL representation for module `\sdffr'.
Generating RTLIL representation for module `\sdffs'.
Generating RTLIL representation for module `\TDP_BRAM18'.
Generating RTLIL representation for module `\TDP36K'.
Generating RTLIL representation for module `\RS_DSP1'.
Generating RTLIL representation for module `\RS_DSP2'.
Generating RTLIL representation for module `\RS_DSP2_MULT'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGIN_REGOUT'.
Generating RTLIL representation for module `\dsp_t1_sim'.
Generating RTLIL representation for module `\dsp_t1_20x18x64'.
Generating RTLIL representation for module `\dsp_t1_10x9x32'.
Successfully finished Verilog frontend.

yosys> hierarchy -check -top top

3.3. Executing HIERARCHY pass (managing design hierarchy).
VERIFIC-INFO [VERI-1018] bin2seven.v:1: compiling module 'top'
VERIFIC-WARNING [VERI-1209] bin2seven.v:26: expression size 28 truncated to fit in target size 27
VERIFIC-WARNING [VERI-1209] bin2seven.v:35: expression size 17 truncated to fit in target size 16
VERIFIC-WARNING [VERI-1209] bin2seven.v:42: expression size 21 truncated to fit in target size 20
VERIFIC-WARNING [VERI-1209] bin2seven.v:53: expression size 16 truncated to fit in target size 4
VERIFIC-WARNING [VERI-1209] bin2seven.v:59: expression size 10 truncated to fit in target size 4
VERIFIC-WARNING [VERI-1209] bin2seven.v:65: expression size 7 truncated to fit in target size 4
Importing module top.

3.3.1. Analyzing design hierarchy..
Top module:  \top

3.3.2. Analyzing design hierarchy..
Top module:  \top
Removed 0 unused modules.

yosys> proc

3.4. Executing PROC pass (convert processes to netlists).

yosys> proc_clean

3.4.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> proc_rmdead

3.4.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

yosys> proc_prune

3.4.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

yosys> proc_init

3.4.4. Executing PROC_INIT pass (extract init attributes).

yosys> proc_arst

3.4.5. Executing PROC_ARST pass (detect async resets in processes).

yosys> proc_rom

3.4.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

yosys> proc_mux

3.4.7. Executing PROC_MUX pass (convert decision trees to multiplexers).

yosys> proc_dlatch

3.4.8. Executing PROC_DLATCH pass (convert process syncs to latches).

yosys> proc_dff

3.4.9. Executing PROC_DFF pass (convert process syncs to FFs).

yosys> proc_memwr

3.4.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

yosys> proc_clean

3.4.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> opt_expr -keepdc

3.4.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~3 debug messages>

yosys> flatten

3.5. Executing FLATTEN pass (flatten design).

yosys> tribuf -logic

3.6. Executing TRIBUF pass.

yosys> deminout

3.7. Executing DEMINOUT pass (demote inout ports to input or output).

yosys> opt_expr

3.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

yosys> opt_clean

3.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 14 unused wires.
<suppressed ~7 debug messages>

yosys> check

3.10. Executing CHECK pass (checking for obvious problems).
Checking module top...
Found and reported 0 problems.

yosys> opt -nodffe -nosdff

3.11. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

yosys> opt_merge -nomux

3.11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.11.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

yosys> opt_reduce

3.11.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.11.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.11.6. Executing OPT_DFF pass (perform DFF optimizations).
Changing const-value async load to async reset on $verific$refresh_counter_reg$bin2seven.v:42$45 ($aldff) from module top.
Changing const-value async load to async reset on $verific$one_second_counter_reg$bin2seven.v:27$34 ($aldff) from module top.
Changing const-value async load to async reset on $verific$displayed_number_reg$bin2seven.v:35$41 ($aldff) from module top.

yosys> opt_clean

3.11.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

yosys> opt_expr

3.11.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.11.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.11.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

yosys> opt_reduce

3.11.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.11.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.11.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.11.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

yosys> opt_expr

3.11.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.11.16. Finished OPT passes. (There is nothing left to do.)

yosys> fsm -encoding binary

3.12. Executing FSM pass (extract and optimize FSM).

yosys> fsm_detect

3.12.1. Executing FSM_DETECT pass (finding FSMs in design).

yosys> fsm_extract

3.12.2. Executing FSM_EXTRACT pass (extracting FSM from design).

yosys> fsm_opt

3.12.3. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> opt_clean

3.12.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

yosys> fsm_opt

3.12.5. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> fsm_recode -encoding binary

3.12.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

yosys> fsm_info

3.12.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

yosys> fsm_map

3.12.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

yosys> opt -sat

3.13. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

yosys> opt_merge -nomux

3.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

yosys> opt_reduce

3.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.13.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $verific$displayed_number_reg$bin2seven.v:35$41 ($adff) from module top (D = $verific$n200$11, Q = \displayed_number).

yosys> opt_clean

3.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 1 unused cells and 1 unused wires.
<suppressed ~2 debug messages>

yosys> opt_expr

3.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.13.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.13.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

yosys> opt_reduce

3.13.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.13.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.13.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.13.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

yosys> opt_expr

3.13.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.13.16. Finished OPT passes. (There is nothing left to do.)

yosys> wreduce -keepdc

3.14. Executing WREDUCE pass (reducing word size of cells).
Removed top 26 bits (of 27) from port B of cell top.$verific$add_8$bin2seven.v:26$31 ($add).
Removed top 15 bits (of 16) from port B of cell top.$verific$add_19$bin2seven.v:35$38 ($add).
Removed top 19 bits (of 20) from port B of cell top.$verific$add_26$bin2seven.v:42$43 ($add).
Removed top 12 bits (of 16) from wire top.$verific$n358$17.
Removed top 6 bits (of 10) from wire top.$verific$n391$20.
Removed top 3 bits (of 7) from wire top.$verific$n426$23.

yosys> peepopt

3.15. Executing PEEPOPT pass (run peephole optimizers).

yosys> pmuxtree

3.16. Executing PMUXTREE pass.

yosys> opt_clean

3.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

yosys> alumacc

3.18. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module top:
  creating $macc model for $verific$add_19$bin2seven.v:35$38 ($add).
  creating $macc model for $verific$add_26$bin2seven.v:42$43 ($add).
  creating $macc model for $verific$add_8$bin2seven.v:26$31 ($add).
  creating $alu model for $macc $verific$add_8$bin2seven.v:26$31.
  creating $alu model for $macc $verific$add_26$bin2seven.v:42$43.
  creating $alu model for $macc $verific$add_19$bin2seven.v:35$38.
  creating $alu model for $verific$LessThan_6$bin2seven.v:23$30 ($le): new $alu
  creating $alu model for $verific$equal_12$bin2seven.v:29$35 ($eq): merged with $verific$LessThan_6$bin2seven.v:23$30.
  creating $alu cell for $verific$LessThan_6$bin2seven.v:23$30, $verific$equal_12$bin2seven.v:29$35: $auto$alumacc.cc:485:replace_alu$65
  creating $alu cell for $verific$add_19$bin2seven.v:35$38: $auto$alumacc.cc:485:replace_alu$78
  creating $alu cell for $verific$add_26$bin2seven.v:42$43: $auto$alumacc.cc:485:replace_alu$81
  creating $alu cell for $verific$add_8$bin2seven.v:26$31: $auto$alumacc.cc:485:replace_alu$84
  created 4 $alu and 0 $macc cells.

yosys> opt

3.19. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

yosys> opt_merge -nomux

3.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

yosys> opt_reduce

3.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_dff

3.19.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.19.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.19.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.19.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.19.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

yosys> opt_reduce

3.19.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.19.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_dff

3.19.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.19.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

yosys> opt_expr

3.19.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.19.16. Finished OPT passes. (There is nothing left to do.)

yosys> stat

3.20. Printing statistics.

=== top ===

   Number of wires:                 36
   Number of wire bits:            459
   Number of public wires:          10
   Number of public wire bits:      83
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 22
     $adff                           2
     $adffe                          1
     $alu                            4
     $bmux                           3
     $div                            3
     $mod                            3
     $mux                            1
     $not                            2
     $or                             1
     $reduce_and                     1
     $reduce_or                      1


yosys> memory -nomap

3.21. Executing MEMORY pass.

yosys> opt_mem

3.21.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

yosys> opt_mem_priority

3.21.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

yosys> opt_mem_feedback

3.21.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

yosys> memory_bmux2rom

3.21.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

yosys> memory_dff

3.21.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).
Checking read port `$auto$memory_bmux2rom.cc:63:execute$87'[0] in module `\top': no output FF found.
Checking read port address `$auto$memory_bmux2rom.cc:63:execute$87'[0] in module `\top': no address FF found.

yosys> opt_clean

3.21.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

yosys> memory_share

3.21.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

yosys> opt_mem_widen

3.21.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

yosys> opt_clean

3.21.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

yosys> memory_collect

3.21.10. Executing MEMORY_COLLECT pass (generating $mem cells).

yosys> stat

3.22. Printing statistics.

=== top ===

   Number of wires:                 36
   Number of wire bits:            459
   Number of public wires:          10
   Number of public wire bits:      83
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 22
     $adff                           2
     $adffe                          1
     $alu                            4
     $bmux                           2
     $div                            3
     $mem_v2                         1
     $mod                            3
     $mux                            1
     $not                            2
     $or                             1
     $reduce_and                     1
     $reduce_or                      1


yosys> opt_clean

3.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

yosys> stat

3.24. Printing statistics.

=== top ===

   Number of wires:                 36
   Number of wire bits:            459
   Number of public wires:          10
   Number of public wire bits:      83
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 22
     $adff                           2
     $adffe                          1
     $alu                            4
     $bmux                           2
     $div                            3
     $mem_v2                         1
     $mod                            3
     $mux                            1
     $not                            2
     $or                             1
     $reduce_and                     1
     $reduce_or                      1


yosys> techmap -map +/techmap.v -map +/rapidsilicon/genesis/arith_map.v

3.25. Executing TECHMAP pass (map to technology primitives).

3.25.1. Executing Verilog-2005 frontend: /home/users/khyber.runner/yosys_verific_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/khyber.runner/yosys_verific_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.25.2. Executing Verilog-2005 frontend: /home/users/khyber.runner/yosys_verific_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/arith_map.v
Parsing Verilog input from `/home/users/khyber.runner/yosys_verific_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_rs_alu'.
Successfully finished Verilog frontend.

3.25.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $reduce_and.
Using template $paramod$f02bbbf710bba6238f4bdfa41b3051acfe2064a8\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $adffe.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $adff.
Using template $paramod$2af30114e9bd4ccb04dad757b3f0a8f6bf0615b0\_90_alu for cells of type $alu.
Using template $paramod$ce0ec84be7047712840b0952f343ee9e63ef75d1\_90_alu for cells of type $alu.
Using template $paramod$956e79e8f8c5e64be7438155ae50a966e615cb04\_90_alu for cells of type $alu.
Using template $paramod$b1f4188eff752b8d0cb539239f972fa4c4d4c520\_90_div for cells of type $div.
Using template $paramod$71ea803f154a36dd0a51e605caab8b616e5b0add\_90_mod for cells of type $mod.
Using template $paramod$94b2d39efe5cee36393111e3a7a149e3dba7e8c5\_90_div for cells of type $div.
Using template $paramod$eeda5ecb13bc076e83d9c3d9d88692518299f738\_90_mod for cells of type $mod.
Using template $paramod$15a3b70ea5534c0cc298fa6d405a538b5f71cb9e\_90_div for cells of type $div.
Using template $paramod$3f610ce866d8f2f7d98af6b42b25d77dd2ede707\_90_mod for cells of type $mod.
Using extmapper simplemap for cells of type $bmux.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $and.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011011 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010000 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010100 for cells of type $lcu.
Using template $paramod$b1f4188eff752b8d0cb539239f972fa4c4d4c520\$__div_mod_trunc for cells of type $__div_mod_trunc.
Using template $paramod$71ea803f154a36dd0a51e605caab8b616e5b0add\$__div_mod_trunc for cells of type $__div_mod_trunc.
Using template $paramod$94b2d39efe5cee36393111e3a7a149e3dba7e8c5\$__div_mod_trunc for cells of type $__div_mod_trunc.
Using template $paramod$eeda5ecb13bc076e83d9c3d9d88692518299f738\$__div_mod_trunc for cells of type $__div_mod_trunc.
Using template $paramod$15a3b70ea5534c0cc298fa6d405a538b5f71cb9e\$__div_mod_trunc for cells of type $__div_mod_trunc.
Using template $paramod$3f610ce866d8f2f7d98af6b42b25d77dd2ede707\$__div_mod_trunc for cells of type $__div_mod_trunc.
Running "alumacc" on wrapper $extern:wrap:$neg:Y_WIDTH=16:A_WIDTH=16:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$neg:Y_WIDTH=16:A_WIDTH=16:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$neg:Y_WIDTH=16:A_WIDTH=16:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using extmapper simplemap for cells of type $logic_and.
Using extmapper simplemap for cells of type $ne.
Using template $paramod\$__div_mod_u\WIDTH=32'00000000000000000000000000010000 for cells of type $__div_mod_u.
Running "alumacc" on wrapper $extern:wrap:$neg:Y_WIDTH=10:A_WIDTH=10:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$neg:Y_WIDTH=10:A_WIDTH=10:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$neg:Y_WIDTH=10:A_WIDTH=10:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $paramod\$__div_mod_u\WIDTH=32'00000000000000000000000000001010 for cells of type $__div_mod_u.
Running "alumacc" on wrapper $extern:wrap:$neg:Y_WIDTH=7:A_WIDTH=7:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$neg:Y_WIDTH=7:A_WIDTH=7:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$neg:Y_WIDTH=7:A_WIDTH=7:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $paramod\$__div_mod_u\WIDTH=32'00000000000000000000000000000111 for cells of type $__div_mod_u.
Using template $paramod$02488ff6fa51b28bbfa470bdd9b0e548b3357746\_90_alu for cells of type $alu.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=16:B_WIDTH=16:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=16:B_WIDTH=16:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=16:B_WIDTH=16:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=16:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=16:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=16:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=17:B_WIDTH=17:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=17:B_WIDTH=17:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=17:B_WIDTH=17:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=17:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=17:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=17:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=18:B_WIDTH=18:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=18:B_WIDTH=18:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=18:B_WIDTH=18:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=18:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=18:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=18:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=19:B_WIDTH=19:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=19:B_WIDTH=19:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=19:B_WIDTH=19:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=19:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=19:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=19:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=20:B_WIDTH=20:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=20:B_WIDTH=20:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=20:B_WIDTH=20:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=20:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=20:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=20:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=21:B_WIDTH=21:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=21:B_WIDTH=21:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=21:B_WIDTH=21:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=21:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=21:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=21:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=22:B_WIDTH=22:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=22:B_WIDTH=22:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=22:B_WIDTH=22:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=22:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=22:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=22:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=23:B_WIDTH=23:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=23:B_WIDTH=23:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=23:B_WIDTH=23:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=23:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=23:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=23:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=24:B_WIDTH=24:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=24:B_WIDTH=24:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=24:B_WIDTH=24:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=24:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=24:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=24:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=25:B_WIDTH=25:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=25:B_WIDTH=25:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=25:B_WIDTH=25:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=25:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=25:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=25:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=26:B_WIDTH=26:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=26:B_WIDTH=26:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=26:B_WIDTH=26:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=26:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=26:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=26:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=27:B_WIDTH=27:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=27:B_WIDTH=27:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=27:B_WIDTH=27:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=27:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=27:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=27:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=28:B_WIDTH=28:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=28:B_WIDTH=28:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=28:B_WIDTH=28:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=28:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=28:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=28:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=29:B_WIDTH=29:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=29:B_WIDTH=29:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=29:B_WIDTH=29:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=29:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=29:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=29:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=30:B_WIDTH=30:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=30:B_WIDTH=30:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=30:B_WIDTH=30:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=30:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=30:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=30:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=31:B_WIDTH=31:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=31:B_WIDTH=31:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=31:B_WIDTH=31:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=31:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=31:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=31:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $paramod$bd91b1311a7e26328ec7b35acb363a89aa87e033\_90_alu for cells of type $alu.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=10:B_WIDTH=10:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=10:B_WIDTH=10:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=10:B_WIDTH=10:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=10:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=10:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=10:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=11:B_WIDTH=11:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=11:B_WIDTH=11:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=11:B_WIDTH=11:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=11:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=11:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=11:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=12:B_WIDTH=12:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=12:B_WIDTH=12:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=12:B_WIDTH=12:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=12:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=12:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=12:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=13:B_WIDTH=13:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=13:B_WIDTH=13:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=13:B_WIDTH=13:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=13:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=13:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=13:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=14:B_WIDTH=14:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=14:B_WIDTH=14:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=14:B_WIDTH=14:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=14:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=14:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=14:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=15:B_WIDTH=15:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=15:B_WIDTH=15:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=15:B_WIDTH=15:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=15:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=15:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=15:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=16:B_WIDTH=16:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=16:B_WIDTH=16:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=16:B_WIDTH=16:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=16:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=16:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=16:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=17:B_WIDTH=17:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=17:B_WIDTH=17:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=17:B_WIDTH=17:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=17:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=17:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=17:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=18:B_WIDTH=18:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=18:B_WIDTH=18:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=18:B_WIDTH=18:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=18:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=18:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=18:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=19:B_WIDTH=19:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=19:B_WIDTH=19:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=19:B_WIDTH=19:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=19:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=19:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=19:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $paramod$38e8498ccdc425801fe5312e427e3cf0d9089c58\_90_alu for cells of type $alu.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=7:B_WIDTH=7:A_WIDTH=7:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=7:B_WIDTH=7:A_WIDTH=7:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=7:B_WIDTH=7:A_WIDTH=7:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=7:A_WIDTH=7:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=7:A_WIDTH=7:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=7:A_WIDTH=7:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=8:B_WIDTH=8:A_WIDTH=7:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=8:B_WIDTH=8:A_WIDTH=7:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=8:B_WIDTH=8:A_WIDTH=7:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=8:A_WIDTH=7:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=8:A_WIDTH=7:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=8:A_WIDTH=7:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=9:B_WIDTH=9:A_WIDTH=7:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=9:B_WIDTH=9:A_WIDTH=7:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=9:B_WIDTH=9:A_WIDTH=7:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=9:A_WIDTH=7:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=9:A_WIDTH=7:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=9:A_WIDTH=7:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=10:B_WIDTH=10:A_WIDTH=7:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=10:B_WIDTH=10:A_WIDTH=7:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=10:B_WIDTH=10:A_WIDTH=7:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=10:A_WIDTH=7:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=10:A_WIDTH=7:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=10:A_WIDTH=7:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=11:B_WIDTH=11:A_WIDTH=7:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=11:B_WIDTH=11:A_WIDTH=7:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=11:B_WIDTH=11:A_WIDTH=7:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=11:A_WIDTH=7:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=11:A_WIDTH=7:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=11:A_WIDTH=7:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=12:B_WIDTH=12:A_WIDTH=7:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=12:B_WIDTH=12:A_WIDTH=7:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=12:B_WIDTH=12:A_WIDTH=7:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=12:A_WIDTH=7:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=12:A_WIDTH=7:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=12:A_WIDTH=7:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=13:B_WIDTH=13:A_WIDTH=7:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=13:B_WIDTH=13:A_WIDTH=7:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=13:B_WIDTH=13:A_WIDTH=7:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=13:A_WIDTH=7:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=13:A_WIDTH=7:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=13:A_WIDTH=7:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $paramod$6df0329addda9228fcc2546de2aaf14ad26c98e1\_90_alu for cells of type $alu.
Using template $paramod$d66a711d7e97d14a7c7a9fd9e900c39b1fc36cfa\_90_alu for cells of type $alu.
Using template $paramod$8359f4ac8e08a95551ec17e9becbee696d87568d\_90_alu for cells of type $alu.
Using template $paramod$3e9f586ebf39197c9185418e155ec5725178e703\_90_alu for cells of type $alu.
Using template $paramod$99f84fe1e34117baf970301335fa146f92b93eb7\_90_alu for cells of type $alu.
Using template $paramod$10caef7eb223495dec7ca6c51abc18dbd379ce45\_90_alu for cells of type $alu.
Using template $paramod$6ae352d62dfc78ea1f63c7f3961ba142be4a2f93\_90_alu for cells of type $alu.
Using template $paramod$7bdc7d89ea9376c9c454fd05d9b64ca6288b61c9\_90_alu for cells of type $alu.
Using template $paramod$96a374a77d27fe2a5f65189ccd5c4d82c02f3e0c\_90_alu for cells of type $alu.
Using template $paramod$c01a73249af533291d6c07bc7dff8edfd9012ebf\_90_alu for cells of type $alu.
Using template $paramod$4dafc65fa46f14914da22e0fac43fee737cf5e98\_90_alu for cells of type $alu.
Using template $paramod$6514813ccfd0fbcd872b47be16e9bc3f005ba67f\_90_alu for cells of type $alu.
Using template $paramod$90cb621aa18d0bfc972ff6df82973fce6d62f25a\_90_alu for cells of type $alu.
Using template $paramod$28a6ec5648d14f65107108cc45dfc9433b8b29ab\_90_alu for cells of type $alu.
Using template $paramod$1b1e81b08462e7f621826ba0c290068af8e4e550\_90_alu for cells of type $alu.
Using template $paramod$1c5b0982e801b857faf786570d1281fe30bbf0dc\_90_alu for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001010 for cells of type $lcu.
Using template $paramod$484d51534650924b7ed4c69e46eed3a56904771f\_90_alu for cells of type $alu.
Using template $paramod$a9c862b459f0009bb3a015092e00213b862f7967\_90_alu for cells of type $alu.
Using template $paramod$b40e0f66d01d243904da425c63ff802ae596888e\_90_alu for cells of type $alu.
Using template $paramod$c3722232e837c1cdc21bf4710f7979c1b518b721\_90_alu for cells of type $alu.
Using template $paramod$bf2e0d75ecaff62813f871a5142c7021af38bf5c\_90_alu for cells of type $alu.
Using template $paramod$6dc634c8d6063e0c58b0c6db88adb2ef11238292\_90_alu for cells of type $alu.
Using template $paramod$10afb0bd3bc8b3b1c0bbb9286f33a7305ba386cf\_90_alu for cells of type $alu.
Using template $paramod$be383ff0f8dfcc01d751f31feaa02592ed59876f\_90_alu for cells of type $alu.
Using template $paramod$609c2088969c57dd2ff06ce43a3a0067f8ec1422\_90_alu for cells of type $alu.
Using template $paramod$b71783aad6188c4aede3c9474d77f228e3ed1af8\_90_alu for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000111 for cells of type $lcu.
Using template $paramod$dbcdc7e8aa1a4080cea2deda6fdc8772064f4d90\_90_alu for cells of type $alu.
Using template $paramod$dfca81329cbbac01700318224209a5f2318c7128\_90_alu for cells of type $alu.
Using template $paramod$ea139abf5d9f33c5a8f110be2ae0a1d01adc5fd6\_90_alu for cells of type $alu.
Using template $paramod$2d591d76303cd5065d50f216288bb81e81f2927d\_90_alu for cells of type $alu.
Using template $paramod$a7c9751983153561a93ce14686d50c76f61be0fb\_90_alu for cells of type $alu.
Using template $paramod$3001ab58efb579288a4727d361c003764a8c1e28\_90_alu for cells of type $alu.
Using template $paramod$b17027b2967ef1d90be228d723f0152c5776720c\_90_alu for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010001 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010010 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010011 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010101 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010110 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010111 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011000 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011001 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011010 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011100 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011101 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011110 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011111 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001011 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001100 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001101 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001110 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001111 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001000 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001001 for cells of type $lcu.
No more expansions possible.
<suppressed ~21448 debug messages>

yosys> stat

3.26. Printing statistics.

=== top ===

   Number of wires:              14083
   Number of wire bits:         254601
   Number of public wires:          10
   Number of public wire bits:      83
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:              27788
     $_AND_                      10088
     $_DFFE_PP0P_                   16
     $_DFF_PP0_                     47
     $_MUX_                       4215
     $_NOT_                       2852
     $_OR_                        4967
     $_XOR_                       5602
     $mem_v2                         1


yosys> opt

3.27. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.27.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~20821 debug messages>

yosys> opt_merge -nomux

3.27.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~23157 debug messages>
Removed a total of 7719 cells.

yosys> opt_muxtree

3.27.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.27.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.27.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_dff

3.27.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.27.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 546 unused cells and 16080 unused wires.
<suppressed ~547 debug messages>

yosys> opt_expr

3.27.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.27.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.27.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.27.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.27.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_dff

3.27.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.27.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

yosys> opt_expr

3.27.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.27.16. Finished OPT passes. (There is nothing left to do.)

yosys> opt -fast -full

3.28. Executing OPT pass (performing simple optimizations).

yosys> opt_expr -full

3.28.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~2 debug messages>

yosys> opt_merge

3.28.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_dff

3.28.3. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.28.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

3.28.5. Finished fast OPT passes.

yosys> memory_map

3.29. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).
Mapping memory $auto$memory_bmux2rom.cc:63:execute$87 in module \top:
  created 16 $dff cells and 0 static cells of width 7.
  read interface: 0 $dff and 15 $mux cells.
  write interface: 0 write mux blocks.

yosys> opt -full

3.30. Executing OPT pass (performing simple optimizations).

yosys> opt_expr -full

3.30.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

yosys> opt_merge -nomux

3.30.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.30.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

yosys> opt_reduce -full

3.30.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.30.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_share

3.30.6. Executing OPT_SHARE pass.

yosys> opt_dff

3.30.7. Executing OPT_DFF pass (perform DFF optimizations).
Handling const CLK on $memory$auto$memory_bmux2rom.cc:63:execute$87[0]$36886 ($dff) from module top (removing D path).
Handling const CLK on $memory$auto$memory_bmux2rom.cc:63:execute$87[1]$36888 ($dff) from module top (removing D path).
Handling const CLK on $memory$auto$memory_bmux2rom.cc:63:execute$87[2]$36890 ($dff) from module top (removing D path).
Handling const CLK on $memory$auto$memory_bmux2rom.cc:63:execute$87[3]$36892 ($dff) from module top (removing D path).
Handling const CLK on $memory$auto$memory_bmux2rom.cc:63:execute$87[4]$36894 ($dff) from module top (removing D path).
Handling const CLK on $memory$auto$memory_bmux2rom.cc:63:execute$87[5]$36896 ($dff) from module top (removing D path).
Handling const CLK on $memory$auto$memory_bmux2rom.cc:63:execute$87[6]$36898 ($dff) from module top (removing D path).
Handling const CLK on $memory$auto$memory_bmux2rom.cc:63:execute$87[7]$36900 ($dff) from module top (removing D path).
Handling const CLK on $memory$auto$memory_bmux2rom.cc:63:execute$87[8]$36902 ($dff) from module top (removing D path).
Handling const CLK on $memory$auto$memory_bmux2rom.cc:63:execute$87[9]$36904 ($dff) from module top (removing D path).
Handling const CLK on $memory$auto$memory_bmux2rom.cc:63:execute$87[10]$36906 ($dff) from module top (removing D path).
Handling const CLK on $memory$auto$memory_bmux2rom.cc:63:execute$87[11]$36908 ($dff) from module top (removing D path).
Handling const CLK on $memory$auto$memory_bmux2rom.cc:63:execute$87[12]$36910 ($dff) from module top (removing D path).
Handling const CLK on $memory$auto$memory_bmux2rom.cc:63:execute$87[13]$36912 ($dff) from module top (removing D path).
Handling const CLK on $memory$auto$memory_bmux2rom.cc:63:execute$87[14]$36914 ($dff) from module top (removing D path).
Handling const CLK on $memory$auto$memory_bmux2rom.cc:63:execute$87[15]$36916 ($dff) from module top (removing D path).

yosys> opt_clean

3.30.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 48 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr -full

3.30.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~4 debug messages>

3.30.10. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.30.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

yosys> opt_reduce -full

3.30.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
    Consolidated identical input bits for $mux cell $memory$auto$memory_bmux2rom.cc:63:execute$87$rdmux[0][3][0]$36939:
      Old ports: A=7'0000001, B=7'1001111, Y=$memory$auto$memory_bmux2rom.cc:63:execute$87$rdmux[0][2][0]$a$36928
      New ports: A=1'0, B=1'1, Y=$memory$auto$memory_bmux2rom.cc:63:execute$87$rdmux[0][2][0]$a$36928 [1]
      New connections: { $memory$auto$memory_bmux2rom.cc:63:execute$87$rdmux[0][2][0]$a$36928 [6:2] $memory$auto$memory_bmux2rom.cc:63:execute$87$rdmux[0][2][0]$a$36928 [0] } = { $memory$auto$memory_bmux2rom.cc:63:execute$87$rdmux[0][2][0]$a$36928 [1] 2'00 $memory$auto$memory_bmux2rom.cc:63:execute$87$rdmux[0][2][0]$a$36928 [1] $memory$auto$memory_bmux2rom.cc:63:execute$87$rdmux[0][2][0]$a$36928 [1] 1'1 }
    Consolidated identical input bits for $mux cell $memory$auto$memory_bmux2rom.cc:63:execute$87$rdmux[0][3][1]$36942:
      Old ports: A=7'0010010, B=7'0000110, Y=$memory$auto$memory_bmux2rom.cc:63:execute$87$rdmux[0][2][0]$b$36929
      New ports: A=2'10, B=2'01, Y={ $memory$auto$memory_bmux2rom.cc:63:execute$87$rdmux[0][2][0]$b$36929 [4] $memory$auto$memory_bmux2rom.cc:63:execute$87$rdmux[0][2][0]$b$36929 [2] }
      New connections: { $memory$auto$memory_bmux2rom.cc:63:execute$87$rdmux[0][2][0]$b$36929 [6:5] $memory$auto$memory_bmux2rom.cc:63:execute$87$rdmux[0][2][0]$b$36929 [3] $memory$auto$memory_bmux2rom.cc:63:execute$87$rdmux[0][2][0]$b$36929 [1:0] } = 5'00010
    Consolidated identical input bits for $mux cell $memory$auto$memory_bmux2rom.cc:63:execute$87$rdmux[0][3][2]$36945:
      Old ports: A=7'1001100, B=7'0100100, Y=$memory$auto$memory_bmux2rom.cc:63:execute$87$rdmux[0][2][1]$a$36931
      New ports: A=2'01, B=2'10, Y={ $memory$auto$memory_bmux2rom.cc:63:execute$87$rdmux[0][2][1]$a$36931 [5] $memory$auto$memory_bmux2rom.cc:63:execute$87$rdmux[0][2][1]$a$36931 [3] }
      New connections: { $memory$auto$memory_bmux2rom.cc:63:execute$87$rdmux[0][2][1]$a$36931 [6] $memory$auto$memory_bmux2rom.cc:63:execute$87$rdmux[0][2][1]$a$36931 [4] $memory$auto$memory_bmux2rom.cc:63:execute$87$rdmux[0][2][1]$a$36931 [2:0] } = { $memory$auto$memory_bmux2rom.cc:63:execute$87$rdmux[0][2][1]$a$36931 [3] 4'0100 }
    Consolidated identical input bits for $mux cell $memory$auto$memory_bmux2rom.cc:63:execute$87$rdmux[0][3][3]$36948:
      Old ports: A=7'0100000, B=7'0001111, Y=$memory$auto$memory_bmux2rom.cc:63:execute$87$rdmux[0][2][1]$b$36932
      New ports: A=2'10, B=2'01, Y={ $memory$auto$memory_bmux2rom.cc:63:execute$87$rdmux[0][2][1]$b$36932 [5] $memory$auto$memory_bmux2rom.cc:63:execute$87$rdmux[0][2][1]$b$36932 [0] }
      New connections: { $memory$auto$memory_bmux2rom.cc:63:execute$87$rdmux[0][2][1]$b$36932 [6] $memory$auto$memory_bmux2rom.cc:63:execute$87$rdmux[0][2][1]$b$36932 [4:1] } = { 2'00 $memory$auto$memory_bmux2rom.cc:63:execute$87$rdmux[0][2][1]$b$36932 [0] $memory$auto$memory_bmux2rom.cc:63:execute$87$rdmux[0][2][1]$b$36932 [0] $memory$auto$memory_bmux2rom.cc:63:execute$87$rdmux[0][2][1]$b$36932 [0] }
    Consolidated identical input bits for $mux cell $memory$auto$memory_bmux2rom.cc:63:execute$87$rdmux[0][3][4]$36951:
      Old ports: A=7'0000000, B=7'0000100, Y=$memory$auto$memory_bmux2rom.cc:63:execute$87$rdmux[0][2][2]$a$36934
      New ports: A=1'0, B=1'1, Y=$memory$auto$memory_bmux2rom.cc:63:execute$87$rdmux[0][2][2]$a$36934 [2]
      New connections: { $memory$auto$memory_bmux2rom.cc:63:execute$87$rdmux[0][2][2]$a$36934 [6:3] $memory$auto$memory_bmux2rom.cc:63:execute$87$rdmux[0][2][2]$a$36934 [1:0] } = 6'000000
  Optimizing cells in module \top.
    Consolidated identical input bits for $mux cell $memory$auto$memory_bmux2rom.cc:63:execute$87$rdmux[0][2][0]$36927:
      Old ports: A=$memory$auto$memory_bmux2rom.cc:63:execute$87$rdmux[0][2][0]$a$36928, B=$memory$auto$memory_bmux2rom.cc:63:execute$87$rdmux[0][2][0]$b$36929, Y=$memory$auto$memory_bmux2rom.cc:63:execute$87$rdmux[0][1][0]$a$36922
      New ports: A={ 1'0 $memory$auto$memory_bmux2rom.cc:63:execute$87$rdmux[0][2][0]$a$36928 [1] $memory$auto$memory_bmux2rom.cc:63:execute$87$rdmux[0][2][0]$a$36928 [1] $memory$auto$memory_bmux2rom.cc:63:execute$87$rdmux[0][2][0]$a$36928 [1] 1'1 }, B={ $memory$auto$memory_bmux2rom.cc:63:execute$87$rdmux[0][2][0]$b$36929 [4] 1'0 $memory$auto$memory_bmux2rom.cc:63:execute$87$rdmux[0][2][0]$b$36929 [2] 2'10 }, Y=$memory$auto$memory_bmux2rom.cc:63:execute$87$rdmux[0][1][0]$a$36922 [4:0]
      New connections: $memory$auto$memory_bmux2rom.cc:63:execute$87$rdmux[0][1][0]$a$36922 [6:5] = { $memory$auto$memory_bmux2rom.cc:63:execute$87$rdmux[0][1][0]$a$36922 [3] 1'0 }
    Consolidated identical input bits for $mux cell $memory$auto$memory_bmux2rom.cc:63:execute$87$rdmux[0][2][1]$36930:
      Old ports: A=$memory$auto$memory_bmux2rom.cc:63:execute$87$rdmux[0][2][1]$a$36931, B=$memory$auto$memory_bmux2rom.cc:63:execute$87$rdmux[0][2][1]$b$36932, Y=$memory$auto$memory_bmux2rom.cc:63:execute$87$rdmux[0][1][0]$b$36923
      New ports: A={ $memory$auto$memory_bmux2rom.cc:63:execute$87$rdmux[0][2][1]$a$36931 [3] $memory$auto$memory_bmux2rom.cc:63:execute$87$rdmux[0][2][1]$a$36931 [5] $memory$auto$memory_bmux2rom.cc:63:execute$87$rdmux[0][2][1]$a$36931 [3] 2'10 }, B={ 1'0 $memory$auto$memory_bmux2rom.cc:63:execute$87$rdmux[0][2][1]$b$36932 [5] $memory$auto$memory_bmux2rom.cc:63:execute$87$rdmux[0][2][1]$b$36932 [0] $memory$auto$memory_bmux2rom.cc:63:execute$87$rdmux[0][2][1]$b$36932 [0] $memory$auto$memory_bmux2rom.cc:63:execute$87$rdmux[0][2][1]$b$36932 [0] }, Y={ $memory$auto$memory_bmux2rom.cc:63:execute$87$rdmux[0][1][0]$b$36923 [6:5] $memory$auto$memory_bmux2rom.cc:63:execute$87$rdmux[0][1][0]$b$36923 [3:2] $memory$auto$memory_bmux2rom.cc:63:execute$87$rdmux[0][1][0]$b$36923 [0] }
      New connections: { $memory$auto$memory_bmux2rom.cc:63:execute$87$rdmux[0][1][0]$b$36923 [4] $memory$auto$memory_bmux2rom.cc:63:execute$87$rdmux[0][1][0]$b$36923 [1] } = { 1'0 $memory$auto$memory_bmux2rom.cc:63:execute$87$rdmux[0][1][0]$b$36923 [0] }
    Consolidated identical input bits for $mux cell $memory$auto$memory_bmux2rom.cc:63:execute$87$rdmux[0][2][2]$36933:
      Old ports: A=$memory$auto$memory_bmux2rom.cc:63:execute$87$rdmux[0][2][2]$a$36934, B=7'0000001, Y=$memory$auto$memory_bmux2rom.cc:63:execute$87$rdmux[0][1][1]$a$36925
      New ports: A={ $memory$auto$memory_bmux2rom.cc:63:execute$87$rdmux[0][2][2]$a$36934 [2] 1'0 }, B=2'01, Y={ $memory$auto$memory_bmux2rom.cc:63:execute$87$rdmux[0][1][1]$a$36925 [2] $memory$auto$memory_bmux2rom.cc:63:execute$87$rdmux[0][1][1]$a$36925 [0] }
      New connections: { $memory$auto$memory_bmux2rom.cc:63:execute$87$rdmux[0][1][1]$a$36925 [6:3] $memory$auto$memory_bmux2rom.cc:63:execute$87$rdmux[0][1][1]$a$36925 [1] } = 5'00000
  Optimizing cells in module \top.
    Consolidated identical input bits for $mux cell $memory$auto$memory_bmux2rom.cc:63:execute$87$rdmux[0][1][1]$36924:
      Old ports: A=$memory$auto$memory_bmux2rom.cc:63:execute$87$rdmux[0][1][1]$a$36925, B=7'0000001, Y=$memory$auto$memory_bmux2rom.cc:63:execute$87$rdmux[0][0][0]$b$36920
      New ports: A={ $memory$auto$memory_bmux2rom.cc:63:execute$87$rdmux[0][1][1]$a$36925 [2] $memory$auto$memory_bmux2rom.cc:63:execute$87$rdmux[0][1][1]$a$36925 [0] }, B=2'01, Y={ $memory$auto$memory_bmux2rom.cc:63:execute$87$rdmux[0][0][0]$b$36920 [2] $memory$auto$memory_bmux2rom.cc:63:execute$87$rdmux[0][0][0]$b$36920 [0] }
      New connections: { $memory$auto$memory_bmux2rom.cc:63:execute$87$rdmux[0][0][0]$b$36920 [6:3] $memory$auto$memory_bmux2rom.cc:63:execute$87$rdmux[0][0][0]$b$36920 [1] } = 5'00000
  Optimizing cells in module \top.
Performed a total of 9 changes.

yosys> opt_merge

3.30.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

yosys> opt_share

3.30.14. Executing OPT_SHARE pass.

yosys> opt_dff

3.30.15. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.30.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 6 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr -full

3.30.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~1 debug messages>

3.30.18. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.30.19. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

yosys> opt_reduce -full

3.30.20. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.30.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_share

3.30.22. Executing OPT_SHARE pass.

yosys> opt_dff

3.30.23. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.30.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr -full

3.30.25. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.30.26. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.30.27. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

yosys> opt_reduce -full

3.30.28. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.30.29. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_share

3.30.30. Executing OPT_SHARE pass.

yosys> opt_dff

3.30.31. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.30.32. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

yosys> opt_expr -full

3.30.33. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.30.34. Finished OPT passes. (There is nothing left to do.)

yosys> techmap -map +/techmap.v

3.31. Executing TECHMAP pass (map to technology primitives).

3.31.1. Executing Verilog-2005 frontend: /home/users/khyber.runner/yosys_verific_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/khyber.runner/yosys_verific_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.31.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $mux.
No more expansions possible.
<suppressed ~79 debug messages>

yosys> opt -sat

3.32. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.32.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~4 debug messages>

yosys> opt_merge -nomux

3.32.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

yosys> opt_muxtree

3.32.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.32.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.32.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.32.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.32.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.32.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.32.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.32.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.32.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.32.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.32.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.32.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

yosys> opt_expr

3.32.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.32.16. Finished OPT passes. (There is nothing left to do.)

yosys> abc -dff

3.33. Executing ABC pass (technology mapping using ABC).

3.33.1. Summary of detected clock domains:
  833 cells in clk=\clock_100Mhz, en={ }, arst=\reset, srst={ }
  308 cells in clk=\clock_100Mhz, en=\one_second_enable, arst=\reset, srst={ }

3.33.2. Extracting gate netlist of module `\top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock_100Mhz, asynchronously reset by \reset
Extracted 833 gates and 889 wires to a netlist network with 54 inputs and 88 outputs.

3.33.2.1. Executing ABC.

3.33.3. Extracting gate netlist of module `\top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock_100Mhz, enabled by \one_second_enable, asynchronously reset by \reset
Extracted 308 gates and 383 wires to a netlist network with 73 inputs and 54 outputs.

3.33.3.1. Executing ABC.

yosys> abc -dff

3.34. Executing ABC pass (technology mapping using ABC).

3.34.1. Summary of detected clock domains:
  347 cells in clk=\clock_100Mhz, en={ }, arst=\reset, srst={ }
  452 cells in clk=\clock_100Mhz, en=$abc$37687$one_second_enable, arst=\reset, srst={ }

3.34.2. Extracting gate netlist of module `\top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock_100Mhz, asynchronously reset by \reset
Extracted 347 gates and 405 wires to a netlist network with 58 inputs and 58 outputs.

3.34.2.1. Executing ABC.

3.34.3. Extracting gate netlist of module `\top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock_100Mhz, enabled by $abc$37687$one_second_enable, asynchronously reset by \reset
Extracted 452 gates and 501 wires to a netlist network with 48 inputs and 59 outputs.

3.34.3.1. Executing ABC.

yosys> abc -dff

3.35. Executing ABC pass (technology mapping using ABC).

3.35.1. Summary of detected clock domains:
  220 cells in clk=\clock_100Mhz, en={ }, arst=\reset, srst={ }
  399 cells in clk=\clock_100Mhz, en=$abc$38218$abc$37687$one_second_enable, arst=\reset, srst={ }

3.35.2. Extracting gate netlist of module `\top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock_100Mhz, asynchronously reset by \reset
Extracted 220 gates and 225 wires to a netlist network with 5 inputs and 18 outputs.

3.35.2.1. Executing ABC.

3.35.3. Extracting gate netlist of module `\top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock_100Mhz, enabled by $abc$38218$abc$37687$one_second_enable, asynchronously reset by \reset
Extracted 399 gates and 414 wires to a netlist network with 15 inputs and 13 outputs.

3.35.3.1. Executing ABC.

yosys> abc -dff

3.36. Executing ABC pass (technology mapping using ABC).

3.36.1. Summary of detected clock domains:
  215 cells in clk=\clock_100Mhz, en={ }, arst=\reset, srst={ }
  360 cells in clk=\clock_100Mhz, en=$abc$38722$abc$38218$abc$37687$one_second_enable, arst=\reset, srst={ }

3.36.2. Extracting gate netlist of module `\top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock_100Mhz, asynchronously reset by \reset
Extracted 215 gates and 220 wires to a netlist network with 5 inputs and 18 outputs.

3.36.2.1. Executing ABC.

3.36.3. Extracting gate netlist of module `\top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock_100Mhz, enabled by $abc$38722$abc$38218$abc$37687$one_second_enable, asynchronously reset by \reset
Extracted 360 gates and 375 wires to a netlist network with 15 inputs and 12 outputs.

3.36.3.1. Executing ABC.

yosys> opt_ffinv

3.37. Executing OPT_FFINV pass (push inverters through FFs).
Discovering LUTs.
Pushed 0 inverters.

yosys> opt -sat

3.38. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.38.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

yosys> opt_merge -nomux

3.38.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.38.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.38.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.38.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.38.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.38.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 2710 unused wires.
<suppressed ~5 debug messages>

yosys> opt_expr

3.38.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.38.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.38.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.38.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.38.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.38.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.38.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

yosys> opt_expr

3.38.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.38.16. Finished OPT passes. (There is nothing left to do.)

yosys> abc -script /home/users/temp_dir/yosys_sdNWHq/abc_tmp_1.scr

3.39. Executing ABC pass (technology mapping using ABC).

3.39.1. Extracting gate netlist of module `\top' to `<abc-temp-dir>/input.blif'..
Extracted 509 gates and 572 wires to a netlist network with 63 inputs and 75 outputs.

3.39.1.1. Executing ABC.
DE:   #PIs =  63  #Luts =   199  Max Lvl =  47  Avg Lvl =   7.63  [   0.04 sec. at Pass 0]
DE:   #PIs =  63  #Luts =   167  Max Lvl =  33  Avg Lvl =   6.09  [   1.12 sec. at Pass 1]
DE:   #PIs =  63  #Luts =   164  Max Lvl =  30  Avg Lvl =   5.73  [   0.26 sec. at Pass 2]
DE:   #PIs =  63  #Luts =   164  Max Lvl =  30  Avg Lvl =   5.73  [   0.64 sec. at Pass 3]
DE:   #PIs =  63  #Luts =   163  Max Lvl =  30  Avg Lvl =   5.73  [   0.31 sec. at Pass 4]
DE:   #PIs =  63  #Luts =   160  Max Lvl =  28  Avg Lvl =   5.55  [   0.84 sec. at Pass 5]
DE:   #PIs =  63  #Luts =   160  Max Lvl =  28  Avg Lvl =   5.55  [   0.24 sec. at Pass 6]
DE:   #PIs =  63  #Luts =   160  Max Lvl =  28  Avg Lvl =   5.55  [   0.80 sec. at Pass 7]
DE:   #PIs =  63  #Luts =   160  Max Lvl =  28  Avg Lvl =   5.55  [   0.31 sec. at Pass 8]
DE:   #PIs =  63  #Luts =   158  Max Lvl =  29  Avg Lvl =   5.67  [   5.61 sec. at Pass 9]
DE:   #PIs =  63  #Luts =   158  Max Lvl =  29  Avg Lvl =   5.67  [   1.13 sec. at Pass 10]
DE:   #PIs =  63  #Luts =   157  Max Lvl =  29  Avg Lvl =   5.67  [   0.29 sec. at Pass 11]
DE:   #PIs =  63  #Luts =   157  Max Lvl =  29  Avg Lvl =   5.67  [   1.05 sec. at Pass 12]
DE:   #PIs =  63  #Luts =   157  Max Lvl =  29  Avg Lvl =   5.67  [   0.31 sec. at Pass 13]
DE:   #PIs =  63  #Luts =   157  Max Lvl =  29  Avg Lvl =   5.67  [   1.19 sec. at Pass 14]
DE:   #PIs =  63  #Luts =   157  Max Lvl =  29  Avg Lvl =   5.67  [   9.56 sec. at Pass 15]
DE:   #PIs =  63  #Luts =   157  Max Lvl =  29  Avg Lvl =   5.67  [   0.12 sec. at Pass 16]

yosys> opt

3.40. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.40.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

yosys> opt_merge -nomux

3.40.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.40.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.40.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.40.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_dff

3.40.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.40.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 570 unused wires.
<suppressed ~2 debug messages>

yosys> opt_expr

3.40.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.40.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.40.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.40.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.40.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_dff

3.40.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.40.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

yosys> opt_expr

3.40.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.40.16. Finished OPT passes. (There is nothing left to do.)

yosys> opt_ffinv

3.41. Executing OPT_FFINV pass (push inverters through FFs).
Discovering LUTs.
Pushed 0 inverters.

yosys> stat

3.42. Printing statistics.

=== top ===

   Number of wires:                213
   Number of wire bits:            222
   Number of public wires:           5
   Number of public wire bits:      14
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                220
     $_DFFE_PP0P_                   16
     $_DFF_PP0_                     47
     $lut                          157


yosys> shregmap -minlen 8 -maxlen 20

3.43. Executing SHREGMAP pass (map shift registers).
Converted 0 dff cells into 0 shift registers.

yosys> dfflegalize -cell $_DFF_?_ 0 -cell $_DFF_???_ 0 -cell $_DFFE_????_ 0 -cell $_DFFSR_???_ 0 -cell $_DFFSRE_????_ 0 -cell $_DLATCHSR_PPP_ 0

3.44. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

yosys> stat

3.45. Printing statistics.

=== top ===

   Number of wires:                213
   Number of wire bits:            222
   Number of public wires:           5
   Number of public wire bits:      14
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                220
     $_DFFE_PP0P_                   16
     $_DFF_PP0_                     47
     $lut                          157


yosys> techmap -map +/techmap.v -map +/rapidsilicon/genesis/ffs_map.v

3.46. Executing TECHMAP pass (map to technology primitives).

3.46.1. Executing Verilog-2005 frontend: /home/users/khyber.runner/yosys_verific_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/khyber.runner/yosys_verific_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.46.2. Executing Verilog-2005 frontend: /home/users/khyber.runner/yosys_verific_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/ffs_map.v
Parsing Verilog input from `/home/users/khyber.runner/yosys_verific_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/ffs_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP0N_'.
Generating RTLIL representation for module `\$_DFFE_PN0P_'.
Generating RTLIL representation for module `\$_DFFE_PN0N_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP1N_'.
Generating RTLIL representation for module `\$_DFFE_PN1P_'.
Generating RTLIL representation for module `\$_DFFE_PN1N_'.
Generating RTLIL representation for module `\$_DFFSR_PPP_'.
Generating RTLIL representation for module `\$_DFFSR_PNP_'.
Generating RTLIL representation for module `\$_DFFSR_PNN_'.
Generating RTLIL representation for module `\$_DFFSR_PPN_'.
Generating RTLIL representation for module `\$_DFFSR_NPP_'.
Generating RTLIL representation for module `\$_DFFSR_NNP_'.
Generating RTLIL representation for module `\$_DFFSR_NNN_'.
Generating RTLIL representation for module `\$_DFFSR_NPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PNPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPNP_'.
Generating RTLIL representation for module `\$_DFFSRE_PNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PNPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PPNN_'.
Generating RTLIL representation for module `\$_DFFSRE_PNNN_'.
Generating RTLIL representation for module `\$_DLATCHSR_PPP_'.
Generating RTLIL representation for module `\$_DLATCHSR_NPP_'.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP0N_'.
Generating RTLIL representation for module `\$_DFFE_NN0P_'.
Generating RTLIL representation for module `\$_DFFE_NN0N_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_NP1N_'.
Generating RTLIL representation for module `\$_DFFE_NN1P_'.
Generating RTLIL representation for module `\$_DFFE_NN1N_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNPP_'.
Generating RTLIL representation for module `\$_DFFSRE_NPNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPN_'.
Generating RTLIL representation for module `\$_DFFSRE_NNPN_'.
Generating RTLIL representation for module `\$_DFFSRE_NPNN_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNN_'.
Generating RTLIL representation for module `\$__SHREG_DFF_P_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PN0_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NN0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFF_PN1_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_NN1_'.
Successfully finished Verilog frontend.

3.46.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $lut.
Using template \$_DFF_PP0_ for cells of type $_DFF_PP0_.
Using template \$_DFFE_PP0P_ for cells of type $_DFFE_PP0P_.
Using extmapper simplemap for cells of type $logic_not.
No more expansions possible.
<suppressed ~419 debug messages>

yosys> opt_expr -mux_undef

3.47. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~3382 debug messages>

yosys> simplemap

3.48. Executing SIMPLEMAP pass (map simple cells to gate primitives).

yosys> opt_expr

3.49. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

yosys> opt_merge

3.50. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~1209 debug messages>
Removed a total of 403 cells.

yosys> opt_dff -nodffe -nosdff

3.51. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.52. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 625 unused wires.
<suppressed ~1 debug messages>

yosys> opt -nodffe -nosdff

3.53. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.53.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~35 debug messages>

yosys> opt_merge -nomux

3.53.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.53.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.53.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.53.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.53.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.53.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 8 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.53.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.53.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.53.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.53.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.53.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.53.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.53.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

yosys> opt_expr

3.53.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.53.16. Finished OPT passes. (There is nothing left to do.)

yosys> abc -script /home/users/temp_dir/yosys_sdNWHq/abc_tmp_2.scr

3.54. Executing ABC pass (technology mapping using ABC).

3.54.1. Extracting gate netlist of module `\top' to `<abc-temp-dir>/input.blif'..
Extracted 882 gates and 948 wires to a netlist network with 64 inputs and 76 outputs.

3.54.1.1. Executing ABC.
DE:   #PIs =  64  #Luts =   162  Max Lvl =  29  Avg Lvl =   5.87  [   0.05 sec. at Pass 0]
DE:   #PIs =  64  #Luts =   161  Max Lvl =  31  Avg Lvl =   5.55  [   1.29 sec. at Pass 1]
DE:   #PIs =  64  #Luts =   161  Max Lvl =  30  Avg Lvl =   5.49  [   0.25 sec. at Pass 2]
DE:   #PIs =  64  #Luts =   161  Max Lvl =  30  Avg Lvl =   5.49  [   0.98 sec. at Pass 3]
DE:   #PIs =  64  #Luts =   161  Max Lvl =  30  Avg Lvl =   5.49  [   0.32 sec. at Pass 4]
DE:   #PIs =  64  #Luts =   161  Max Lvl =  30  Avg Lvl =   5.49  [   1.05 sec. at Pass 5]
DE:   #PIs =  64  #Luts =   160  Max Lvl =  29  Avg Lvl =   5.37  [   7.96 sec. at Pass 6]
DE:   #PIs =  64  #Luts =   159  Max Lvl =  30  Avg Lvl =   5.41  [   0.36 sec. at Pass 7]
DE:   #PIs =  64  #Luts =   159  Max Lvl =  30  Avg Lvl =   5.41  [   1.08 sec. at Pass 8]
DE:   #PIs =  64  #Luts =   158  Max Lvl =  30  Avg Lvl =   5.41  [   0.33 sec. at Pass 9]
DE:   #PIs =  64  #Luts =   158  Max Lvl =  30  Avg Lvl =   5.41  [   1.02 sec. at Pass 10]
DE:   #PIs =  64  #Luts =   158  Max Lvl =  30  Avg Lvl =   5.41  [   0.28 sec. at Pass 11]
DE:   #PIs =  64  #Luts =   158  Max Lvl =  30  Avg Lvl =   5.41  [   0.95 sec. at Pass 12]
DE:   #PIs =  64  #Luts =   157  Max Lvl =  27  Avg Lvl =   5.37  [   7.90 sec. at Pass 13]
DE:   #PIs =  64  #Luts =   157  Max Lvl =  27  Avg Lvl =   5.37  [   0.33 sec. at Pass 14]
DE:   #PIs =  64  #Luts =   157  Max Lvl =  27  Avg Lvl =   5.37  [   1.15 sec. at Pass 15]
DE:   #PIs =  64  #Luts =   157  Max Lvl =  27  Avg Lvl =   5.37  [   0.32 sec. at Pass 16]
DE:   #PIs =  64  #Luts =   157  Max Lvl =  27  Avg Lvl =   5.37  [   6.38 sec. at Pass 17]
DE:   #PIs =  64  #Luts =   157  Max Lvl =  27  Avg Lvl =   5.37  [   0.09 sec. at Pass 18]

yosys> opt

3.55. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.55.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

yosys> opt_merge -nomux

3.55.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.55.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.55.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.55.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_dff

3.55.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.55.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 604 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.55.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.55.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.55.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.55.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.55.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_dff

3.55.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.55.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

yosys> opt_expr

3.55.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.55.16. Finished OPT passes. (There is nothing left to do.)

yosys> hierarchy -check

3.56. Executing HIERARCHY pass (managing design hierarchy).

3.56.1. Analyzing design hierarchy..
Top module:  \top

3.56.2. Analyzing design hierarchy..
Top module:  \top
Removed 0 unused modules.

yosys> stat

3.57. Printing statistics.

=== top ===

   Number of wires:                213
   Number of wire bits:            222
   Number of public wires:           5
   Number of public wire bits:      14
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                220
     $lut                          157
     dffsre                         63


yosys> opt_clean -purge

3.58. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

yosys> write_verilog -noattr -nohex synthesized.v

3.59. Executing Verilog backend.

yosys> bmuxmap

3.59.1. Executing BMUXMAP pass.

yosys> demuxmap

3.59.2. Executing DEMUXMAP pass.

yosys> clean_zerowidth
Dumping module `\top'.

Warnings: 6 unique messages, 6 total
End of script. Logfile hash: 664b6600ee, CPU: user 14.29s system 0.41s, MEM: 361.32 MB peak
Yosys 0.17+76 (git sha1 035496b50, gcc 9.1.0 -fPIC -Os)
Time spent: 97% 6x abc (669 sec), 0% 3x techmap (5 sec), ...
real 77.21
user 659.00
sys 25.08
