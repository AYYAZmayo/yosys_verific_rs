
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys-Verific 0.0.34
 Yosys 0.16+65 (git sha1 7987105a9, gcc 9.1.0 -fPIC -Os)


-- Executing script file `yosys.ys' --
echo on

yosys> plugin -i synth-rs

yosys> read -verific

yosys> read -incdir .

yosys> verific -vlog-incdir .

1. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Apr22_SW_Release, released at Thu Apr 28 20:08:21 2022.

yosys> verilog_defaults -add -I.

yosys> read -vhdl twofish.vhd

yosys> verific -vhdl twofish.vhd

2. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Apr22_SW_Release, released at Thu Apr 28 20:08:21 2022.
VERIFIC-INFO [VHDL-1504] default VHDL library search path is now "/home/users/aram/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008"
VERIFIC-COMMENT [VHDL-1481] Analyzing VHDL file 'twofish.vhd'
VERIFIC-COMMENT [VHDL-1493] Restoring VHDL unit 'ieee.std_logic_1164' from file '/home/users/aram/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008/ieee/std_logic_1164.vdb'
VERIFIC-COMMENT [VHDL-1493] Restoring VHDL unit 'std.standard' from file '/home/users/aram/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008/std/standard.vdb'
VERIFIC-COMMENT [VHDL-1493] Restoring VHDL unit 'std.textio' from file '/home/users/aram/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008/std/textio.vdb'
VERIFIC-INFO [VHDL-1012] twofish.vhd:44: analyzing entity 'q0'
VERIFIC-INFO [VHDL-1010] twofish.vhd:51: analyzing architecture 'q0_arch'
VERIFIC-INFO [VHDL-1012] twofish.vhd:199: analyzing entity 'q1'
VERIFIC-INFO [VHDL-1010] twofish.vhd:207: analyzing architecture 'q1_arch'
VERIFIC-INFO [VHDL-1012] twofish.vhd:355: analyzing entity 'mul_ef'
VERIFIC-INFO [VHDL-1010] twofish.vhd:363: analyzing architecture 'mul_ef_arch'
VERIFIC-INFO [VHDL-1012] twofish.vhd:391: analyzing entity 'mul_5b'
VERIFIC-INFO [VHDL-1010] twofish.vhd:398: analyzing architecture 'mul_5b_arch'
VERIFIC-INFO [VHDL-1012] twofish.vhd:423: analyzing entity 'mds'
VERIFIC-INFO [VHDL-1010] twofish.vhd:438: analyzing architecture 'mds_arch'
VERIFIC-INFO [VHDL-1012] twofish.vhd:544: analyzing entity 'adder'
VERIFIC-INFO [VHDL-1010] twofish.vhd:554: analyzing architecture 'adder_arch'
VERIFIC-INFO [VHDL-1012] twofish.vhd:576: analyzing entity 'pht'
VERIFIC-INFO [VHDL-1010] twofish.vhd:587: analyzing architecture 'pht_arch'
VERIFIC-INFO [VHDL-1012] twofish.vhd:680: analyzing entity 'mul01'
VERIFIC-INFO [VHDL-1010] twofish.vhd:687: analyzing architecture 'mul01_arch'
VERIFIC-INFO [VHDL-1012] twofish.vhd:706: analyzing entity 'mula4'
VERIFIC-INFO [VHDL-1010] twofish.vhd:713: analyzing architecture 'mula4_arch'
VERIFIC-INFO [VHDL-1012] twofish.vhd:739: analyzing entity 'mul55'
VERIFIC-INFO [VHDL-1010] twofish.vhd:746: analyzing architecture 'mul55_arch'
VERIFIC-INFO [VHDL-1012] twofish.vhd:772: analyzing entity 'mul87'
VERIFIC-INFO [VHDL-1010] twofish.vhd:779: analyzing architecture 'mul87_arch'
VERIFIC-INFO [VHDL-1012] twofish.vhd:805: analyzing entity 'mul5a'
VERIFIC-INFO [VHDL-1010] twofish.vhd:812: analyzing architecture 'mul5a_arch'
VERIFIC-INFO [VHDL-1012] twofish.vhd:838: analyzing entity 'mul58'
VERIFIC-INFO [VHDL-1010] twofish.vhd:845: analyzing architecture 'mul58_arch'
VERIFIC-INFO [VHDL-1012] twofish.vhd:871: analyzing entity 'muldb'
VERIFIC-INFO [VHDL-1010] twofish.vhd:878: analyzing architecture 'muldb_arch'
VERIFIC-INFO [VHDL-1012] twofish.vhd:904: analyzing entity 'mul9e'
VERIFIC-INFO [VHDL-1010] twofish.vhd:911: analyzing architecture 'mul9e_arch'
VERIFIC-INFO [VHDL-1012] twofish.vhd:937: analyzing entity 'mul56'
VERIFIC-INFO [VHDL-1010] twofish.vhd:944: analyzing architecture 'mul56_arch'
VERIFIC-INFO [VHDL-1012] twofish.vhd:970: analyzing entity 'mul82'
VERIFIC-INFO [VHDL-1010] twofish.vhd:977: analyzing architecture 'mul82_arch'
VERIFIC-INFO [VHDL-1012] twofish.vhd:1003: analyzing entity 'mulf3'
VERIFIC-INFO [VHDL-1010] twofish.vhd:1010: analyzing architecture 'mulf3_arch'
VERIFIC-INFO [VHDL-1012] twofish.vhd:1037: analyzing entity 'mul1e'
VERIFIC-INFO [VHDL-1010] twofish.vhd:1044: analyzing architecture 'mul1e_arch'
VERIFIC-INFO [VHDL-1012] twofish.vhd:1069: analyzing entity 'mulc6'
VERIFIC-INFO [VHDL-1010] twofish.vhd:1076: analyzing architecture 'mulc6_arch'
VERIFIC-INFO [VHDL-1012] twofish.vhd:1102: analyzing entity 'mul68'
VERIFIC-INFO [VHDL-1010] twofish.vhd:1110: analyzing architecture 'mul68_arch'
VERIFIC-INFO [VHDL-1012] twofish.vhd:1136: analyzing entity 'mule5'
VERIFIC-INFO [VHDL-1010] twofish.vhd:1144: analyzing architecture 'mule5_arch'
VERIFIC-INFO [VHDL-1012] twofish.vhd:1170: analyzing entity 'mul02'
VERIFIC-INFO [VHDL-1010] twofish.vhd:1178: analyzing architecture 'mul02_arch'
VERIFIC-INFO [VHDL-1012] twofish.vhd:1204: analyzing entity 'mula1'
VERIFIC-INFO [VHDL-1010] twofish.vhd:1211: analyzing architecture 'mula1_arch'
VERIFIC-INFO [VHDL-1012] twofish.vhd:1237: analyzing entity 'mulfc'
VERIFIC-INFO [VHDL-1010] twofish.vhd:1245: analyzing architecture 'mulfc_arch'
VERIFIC-INFO [VHDL-1012] twofish.vhd:1271: analyzing entity 'mulc1'
VERIFIC-INFO [VHDL-1010] twofish.vhd:1279: analyzing architecture 'mulc1_arch'
VERIFIC-INFO [VHDL-1012] twofish.vhd:1305: analyzing entity 'mul47'
VERIFIC-INFO [VHDL-1010] twofish.vhd:1312: analyzing architecture 'mul47_arch'
VERIFIC-INFO [VHDL-1012] twofish.vhd:1338: analyzing entity 'mulae'
VERIFIC-INFO [VHDL-1010] twofish.vhd:1345: analyzing architecture 'mulae_arch'
VERIFIC-INFO [VHDL-1012] twofish.vhd:1371: analyzing entity 'mul3d'
VERIFIC-INFO [VHDL-1010] twofish.vhd:1378: analyzing architecture 'mul3d_arch'
VERIFIC-INFO [VHDL-1012] twofish.vhd:1404: analyzing entity 'mul19'
VERIFIC-INFO [VHDL-1010] twofish.vhd:1411: analyzing architecture 'mul19_arch'
VERIFIC-INFO [VHDL-1012] twofish.vhd:1437: analyzing entity 'mul03'
VERIFIC-INFO [VHDL-1010] twofish.vhd:1444: analyzing architecture 'mul03_arch'
VERIFIC-INFO [VHDL-1012] twofish.vhd:1480: analyzing entity 'h_256'
VERIFIC-INFO [VHDL-1010] twofish.vhd:1491: analyzing architecture 'h256_arch'
VERIFIC-INFO [VHDL-1012] twofish.vhd:1694: analyzing entity 'twofish_whit_keysched256'
VERIFIC-INFO [VHDL-1010] twofish.vhd:1708: analyzing architecture 'twofish_whit_keysched256_arch'

yosys> synth_rs -top twofish_whit_keysched256 -tech genesis -goal area -de -no_dsp -no_bram -verilog synthesized.v

3. Executing synth_rs pass: v0.4.50

yosys> read_verilog -lib -specify -nomem2reg +/rapidsilicon/common/cells_sim.v +/rapidsilicon/genesis/cells_sim.v

3.1. Executing Verilog-2005 frontend: /home/users/aram/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v
Parsing Verilog input from `/home/users/aram/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\inv'.
Generating RTLIL representation for module `\buff'.
Generating RTLIL representation for module `\logic_0'.
Generating RTLIL representation for module `\logic_1'.
Generating RTLIL representation for module `\gclkbuff'.
Successfully finished Verilog frontend.

3.2. Executing Verilog-2005 frontend: /home/users/aram/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/cells_sim.v
Parsing Verilog input from `/home/users/aram/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\dffsre'.
Generating RTLIL representation for module `\dffnsre'.
Generating RTLIL representation for module `\latchsre'.
Generating RTLIL representation for module `\latchnsre'.
Generating RTLIL representation for module `\io_scff'.
Generating RTLIL representation for module `\scff'.
Generating RTLIL representation for module `\sh_dff'.
Generating RTLIL representation for module `\adder_carry'.
Generating RTLIL representation for module `\sdffr'.
Generating RTLIL representation for module `\sdffs'.
Generating RTLIL representation for module `\TDP_BRAM18'.
Generating RTLIL representation for module `\TDP36K'.
Generating RTLIL representation for module `\RS_DSP1'.
Generating RTLIL representation for module `\RS_DSP2'.
Generating RTLIL representation for module `\dsp_t1_sim'.
Generating RTLIL representation for module `\dsp_t1_20x18x64'.
Generating RTLIL representation for module `\dsp_t1_10x9x32'.
Successfully finished Verilog frontend.

yosys> hierarchy -check -top twofish_whit_keysched256

3.3. Executing HIERARCHY pass (managing design hierarchy).
VERIFIC-INFO [VHDL-1067] twofish.vhd:1694: processing 'twofish_whit_keysched256(twofish_whit_keysched256_arch)'
VERIFIC-INFO [VHDL-1067] twofish.vhd:1480: processing 'h_256(h256_arch)'
VERIFIC-INFO [VHDL-1067] twofish.vhd:199: processing 'q1(q1_arch)'
VERIFIC-INFO [VHDL-1067] twofish.vhd:44: processing 'q0(q0_arch)'
VERIFIC-INFO [VHDL-1067] twofish.vhd:423: processing 'mds(mds_arch)'
VERIFIC-INFO [VHDL-1067] twofish.vhd:355: processing 'mul_ef(mul_ef_arch)'
VERIFIC-INFO [VHDL-1067] twofish.vhd:391: processing 'mul_5b(mul_5b_arch)'
VERIFIC-INFO [VHDL-1067] twofish.vhd:576: processing 'pht(pht_arch)'
VERIFIC-INFO [VHDL-1067] twofish.vhd:544: processing 'adder(adder_arch)'
Importing module twofish_whit_keysched256.
Importing module h_256(h256_arch).
Importing module mds(mds_arch).
Importing module mul_5b(mul_5b_arch).
Importing module mul_ef(mul_ef_arch).
Importing module pht(pht_arch).
Importing module adder(adder_arch).
Importing module q0(q0_arch).
Importing module q1(q1_arch).

3.3.1. Analyzing design hierarchy..
Top module:  \twofish_whit_keysched256
Used module:     \pht(pht_arch)
Used module:         \adder(adder_arch)
Used module:     \h_256(h256_arch)
Used module:         \mds(mds_arch)
Used module:             \mul_5b(mul_5b_arch)
Used module:             \mul_ef(mul_ef_arch)
Used module:         \q0(q0_arch)
Used module:         \q1(q1_arch)

3.3.2. Analyzing design hierarchy..
Top module:  \twofish_whit_keysched256
Used module:     \pht(pht_arch)
Used module:         \adder(adder_arch)
Used module:     \h_256(h256_arch)
Used module:         \mds(mds_arch)
Used module:             \mul_5b(mul_5b_arch)
Used module:             \mul_ef(mul_ef_arch)
Used module:         \q0(q0_arch)
Used module:         \q1(q1_arch)
Removed 0 unused modules.

yosys> proc

3.4. Executing PROC pass (convert processes to netlists).

yosys> proc_clean

3.4.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> proc_rmdead

3.4.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

yosys> proc_prune

3.4.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

yosys> proc_init

3.4.4. Executing PROC_INIT pass (extract init attributes).

yosys> proc_arst

3.4.5. Executing PROC_ARST pass (detect async resets in processes).

yosys> proc_mux

3.4.6. Executing PROC_MUX pass (convert decision trees to multiplexers).

yosys> proc_dlatch

3.4.7. Executing PROC_DLATCH pass (convert process syncs to latches).

yosys> proc_dff

3.4.8. Executing PROC_DFF pass (convert process syncs to FFs).

yosys> proc_memwr

3.4.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

yosys> proc_clean

3.4.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> opt_expr -keepdc

3.4.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module q1(q1_arch).
Optimizing module q0(q0_arch).
Optimizing module adder(adder_arch).
Optimizing module pht(pht_arch).
Optimizing module mul_ef(mul_ef_arch).
Optimizing module mul_5b(mul_5b_arch).
Optimizing module mds(mds_arch).
Optimizing module h_256(h256_arch).
Optimizing module twofish_whit_keysched256.
<suppressed ~8 debug messages>

yosys> flatten

3.5. Executing FLATTEN pass (flatten design).
Deleting now unused module q1(q1_arch).
Deleting now unused module q0(q0_arch).
Deleting now unused module adder(adder_arch).
Deleting now unused module pht(pht_arch).
Deleting now unused module mul_ef(mul_ef_arch).
Deleting now unused module mul_5b(mul_5b_arch).
Deleting now unused module mds(mds_arch).
Deleting now unused module h_256(h256_arch).
<suppressed ~105 debug messages>

yosys> tribuf -logic

3.6. Executing TRIBUF pass.

yosys> deminout

3.7. Executing DEMINOUT pass (demote inout ports to input or output).

yosys> opt_expr

3.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module twofish_whit_keysched256.
<suppressed ~288 debug messages>

yosys> opt_clean

3.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \twofish_whit_keysched256..
Removed 32 unused cells and 4159 unused wires.
<suppressed ~2938 debug messages>

yosys> check

3.10. Executing CHECK pass (checking for obvious problems).
Checking module twofish_whit_keysched256...
Found and reported 0 problems.

yosys> opt -nodffe -nosdff

3.11. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module twofish_whit_keysched256.
<suppressed ~24 debug messages>

yosys> opt_merge -nomux

3.11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\twofish_whit_keysched256'.
<suppressed ~360 debug messages>
Removed a total of 120 cells.

yosys> opt_muxtree

3.11.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \twofish_whit_keysched256..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.11.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \twofish_whit_keysched256.
  Optimizing cells in module \twofish_whit_keysched256.
Performed a total of 32 changes.

yosys> opt_merge

3.11.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\twofish_whit_keysched256'.
<suppressed ~21 debug messages>
Removed a total of 7 cells.

yosys> opt_dff -nodffe -nosdff

3.11.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.11.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \twofish_whit_keysched256..
Removed 0 unused cells and 55 unused wires.
<suppressed ~4 debug messages>

yosys> opt_expr

3.11.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module twofish_whit_keysched256.
<suppressed ~41 debug messages>

3.11.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.11.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \twofish_whit_keysched256..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.11.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \twofish_whit_keysched256.
  Optimizing cells in module \twofish_whit_keysched256.
Performed a total of 32 changes.

yosys> opt_merge

3.11.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\twofish_whit_keysched256'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.11.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.11.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \twofish_whit_keysched256..
Removed 0 unused cells and 12 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.11.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module twofish_whit_keysched256.

3.11.16. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.11.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \twofish_whit_keysched256..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.11.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \twofish_whit_keysched256.
Performed a total of 0 changes.

yosys> opt_merge

3.11.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\twofish_whit_keysched256'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.11.20. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.11.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \twofish_whit_keysched256..

yosys> opt_expr

3.11.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module twofish_whit_keysched256.

3.11.23. Finished OPT passes. (There is nothing left to do.)

yosys> fsm -encoding binary

3.12. Executing FSM pass (extract and optimize FSM).

yosys> fsm_detect

3.12.1. Executing FSM_DETECT pass (finding FSMs in design).

yosys> fsm_extract

3.12.2. Executing FSM_EXTRACT pass (extracting FSM from design).

yosys> fsm_opt

3.12.3. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> opt_clean

3.12.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \twofish_whit_keysched256..

yosys> fsm_opt

3.12.5. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> fsm_recode -encoding binary

3.12.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

yosys> fsm_info

3.12.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

yosys> fsm_map

3.12.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

yosys> opt -sat

3.13. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module twofish_whit_keysched256.

yosys> opt_merge -nomux

3.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\twofish_whit_keysched256'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \twofish_whit_keysched256..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \twofish_whit_keysched256.
Performed a total of 0 changes.

yosys> opt_merge

3.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\twofish_whit_keysched256'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.13.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \twofish_whit_keysched256..

yosys> opt_expr

3.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module twofish_whit_keysched256.

3.13.9. Finished OPT passes. (There is nothing left to do.)

yosys> wreduce -keepdc

3.14. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 32) from port A of cell twofish_whit_keysched256.$flatten\upper_h1.$verific$xor_3$twofish.vhd:1562$137 ($xor).
Removed top 1 bits (of 32) from port A of cell twofish_whit_keysched256.$flatten\lower_h3.$verific$xor_3$twofish.vhd:1562$137 ($xor).

yosys> peepopt

3.15. Executing PEEPOPT pass (run peephole optimizers).

yosys> pmuxtree

3.16. Executing PMUXTREE pass.

yosys> opt_clean

3.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \twofish_whit_keysched256..

yosys> alumacc

3.18. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module twofish_whit_keysched256:
  created 0 $alu and 0 $macc cells.

yosys> opt

3.19. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module twofish_whit_keysched256.

yosys> opt_merge -nomux

3.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\twofish_whit_keysched256'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \twofish_whit_keysched256..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \twofish_whit_keysched256.
Performed a total of 0 changes.

yosys> opt_merge

3.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\twofish_whit_keysched256'.
Removed a total of 0 cells.

yosys> opt_dff

3.19.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.19.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \twofish_whit_keysched256..

yosys> opt_expr

3.19.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module twofish_whit_keysched256.

3.19.9. Finished OPT passes. (There is nothing left to do.)

yosys> stat

3.20. Printing statistics.

=== twofish_whit_keysched256 ===

   Number of wires:               6053
   Number of wire bits:          24168
   Number of public wires:        4317
   Number of public wire bits:   20992
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               3392
     $and                          488
     $bmux                         512
     $or                           240
     $xor                         2152


yosys> memory -nomap

3.21. Executing MEMORY pass.

yosys> opt_mem

3.21.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

yosys> opt_mem_priority

3.21.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

yosys> opt_mem_feedback

3.21.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

yosys> memory_dff

3.21.4. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

yosys> opt_clean

3.21.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \twofish_whit_keysched256..

yosys> memory_share

3.21.6. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

yosys> opt_mem_widen

3.21.7. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

yosys> opt_clean

3.21.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \twofish_whit_keysched256..

yosys> memory_collect

3.21.9. Executing MEMORY_COLLECT pass (generating $mem cells).

yosys> stat

3.22. Printing statistics.

=== twofish_whit_keysched256 ===

   Number of wires:               6053
   Number of wire bits:          24168
   Number of public wires:        4317
   Number of public wire bits:   20992
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               3392
     $and                          488
     $bmux                         512
     $or                           240
     $xor                         2152


yosys> opt_clean

3.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \twofish_whit_keysched256..

yosys> stat

3.24. Printing statistics.

=== twofish_whit_keysched256 ===

   Number of wires:               6053
   Number of wire bits:          24168
   Number of public wires:        4317
   Number of public wire bits:   20992
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               3392
     $and                          488
     $bmux                         512
     $or                           240
     $xor                         2152


yosys> techmap -map +/techmap.v -map +/rapidsilicon/genesis/arith_map.v

3.25. Executing TECHMAP pass (map to technology primitives).

3.25.1. Executing Verilog-2005 frontend: /home/users/aram/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/aram/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.25.2. Executing Verilog-2005 frontend: /home/users/aram/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/arith_map.v
Parsing Verilog input from `/home/users/aram/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_rs_alu'.
Successfully finished Verilog frontend.

3.25.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $bmux.
No more expansions possible.
<suppressed ~3463 debug messages>

yosys> stat

3.26. Printing statistics.

=== twofish_whit_keysched256 ===

   Number of wires:               8101
   Number of wire bits:          54888
   Number of public wires:        4317
   Number of public wire bits:   20992
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:              38240
     $_AND_                        488
     $_MUX_                      30720
     $_OR_                         240
     $_XOR_                       6792


yosys> opt

3.27. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.27.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module twofish_whit_keysched256.
<suppressed ~15680 debug messages>

yosys> opt_merge -nomux

3.27.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\twofish_whit_keysched256'.
<suppressed ~17334 debug messages>
Removed a total of 5778 cells.

yosys> opt_muxtree

3.27.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \twofish_whit_keysched256..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.27.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \twofish_whit_keysched256.
Performed a total of 0 changes.

yosys> opt_merge

3.27.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\twofish_whit_keysched256'.
Removed a total of 0 cells.

yosys> opt_dff

3.27.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.27.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \twofish_whit_keysched256..
Removed 0 unused cells and 694 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.27.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module twofish_whit_keysched256.
<suppressed ~444 debug messages>

3.27.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.27.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \twofish_whit_keysched256..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.27.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \twofish_whit_keysched256.
Performed a total of 0 changes.

yosys> opt_merge

3.27.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\twofish_whit_keysched256'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

yosys> opt_dff

3.27.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.27.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \twofish_whit_keysched256..

yosys> opt_expr

3.27.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module twofish_whit_keysched256.

3.27.16. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.27.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \twofish_whit_keysched256..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.27.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \twofish_whit_keysched256.
Performed a total of 0 changes.

yosys> opt_merge

3.27.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\twofish_whit_keysched256'.
Removed a total of 0 cells.

yosys> opt_dff

3.27.20. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.27.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \twofish_whit_keysched256..

yosys> opt_expr

3.27.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module twofish_whit_keysched256.

3.27.23. Finished OPT passes. (There is nothing left to do.)

yosys> opt -fast -full

3.28. Executing OPT pass (performing simple optimizations).

yosys> opt_expr -full

3.28.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module twofish_whit_keysched256.
<suppressed ~1466 debug messages>

yosys> opt_merge

3.28.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\twofish_whit_keysched256'.
Removed a total of 0 cells.

yosys> opt_dff

3.28.3. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.28.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \twofish_whit_keysched256..

3.28.5. Finished fast OPT passes.

yosys> memory_map

3.29. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

yosys> opt -full

3.30. Executing OPT pass (performing simple optimizations).

yosys> opt_expr -full

3.30.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module twofish_whit_keysched256.

yosys> opt_merge -nomux

3.30.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\twofish_whit_keysched256'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.30.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \twofish_whit_keysched256..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce -full

3.30.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \twofish_whit_keysched256.
Performed a total of 0 changes.

yosys> opt_merge

3.30.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\twofish_whit_keysched256'.
Removed a total of 0 cells.

yosys> opt_share

3.30.6. Executing OPT_SHARE pass.

yosys> opt_dff

3.30.7. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.30.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \twofish_whit_keysched256..

yosys> opt_expr -full

3.30.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module twofish_whit_keysched256.

3.30.10. Finished OPT passes. (There is nothing left to do.)

yosys> techmap -map +/techmap.v

3.31. Executing TECHMAP pass (map to technology primitives).

3.31.1. Executing Verilog-2005 frontend: /home/users/aram/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/aram/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.31.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~71 debug messages>

yosys> opt -sat

3.32. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.32.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module twofish_whit_keysched256.

yosys> opt_merge -nomux

3.32.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\twofish_whit_keysched256'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.32.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \twofish_whit_keysched256..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.32.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \twofish_whit_keysched256.
Performed a total of 0 changes.

yosys> opt_merge

3.32.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\twofish_whit_keysched256'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.32.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.32.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \twofish_whit_keysched256..

yosys> opt_expr

3.32.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module twofish_whit_keysched256.

3.32.9. Finished OPT passes. (There is nothing left to do.)

yosys> abc -dff

3.33. Executing ABC pass (technology mapping using ABC).

3.33.1. Summary of detected clock domains:
  16490 cells in clk={ }, en={ }, arst={ }, srst={ }

3.33.2. Extracting gate netlist of module `\twofish_whit_keysched256' to `<abc-temp-dir>/input.blif'..
No matching clock domain found. Not extracting any FF cells.
Extracted 16490 gates and 16748 wires to a netlist network with 256 inputs and 256 outputs.

3.33.2.1. Executing ABC.

yosys> abc -dff

3.34. Executing ABC pass (technology mapping using ABC).

3.34.1. Summary of detected clock domains:
  15682 cells in clk={ }, en={ }, arst={ }, srst={ }

3.34.2. Extracting gate netlist of module `\twofish_whit_keysched256' to `<abc-temp-dir>/input.blif'..
No matching clock domain found. Not extracting any FF cells.
Extracted 15682 gates and 15938 wires to a netlist network with 256 inputs and 256 outputs.

3.34.2.1. Executing ABC.

yosys> abc -dff

3.35. Executing ABC pass (technology mapping using ABC).

3.35.1. Summary of detected clock domains:
  15829 cells in clk={ }, en={ }, arst={ }, srst={ }

3.35.2. Extracting gate netlist of module `\twofish_whit_keysched256' to `<abc-temp-dir>/input.blif'..
No matching clock domain found. Not extracting any FF cells.
Extracted 15829 gates and 16085 wires to a netlist network with 256 inputs and 256 outputs.

3.35.2.1. Executing ABC.

yosys> abc -dff

3.36. Executing ABC pass (technology mapping using ABC).

3.36.1. Summary of detected clock domains:
  15796 cells in clk={ }, en={ }, arst={ }, srst={ }

3.36.2. Extracting gate netlist of module `\twofish_whit_keysched256' to `<abc-temp-dir>/input.blif'..
No matching clock domain found. Not extracting any FF cells.
Extracted 15796 gates and 16052 wires to a netlist network with 256 inputs and 256 outputs.

3.36.2.1. Executing ABC.

yosys> opt_ffinv

3.37. Executing OPT_FFINV pass (push inverters through FFs).
Discovering LUTs.
Pushed 0 inverters.

yosys> opt -sat

3.38. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.38.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module twofish_whit_keysched256.
<suppressed ~18 debug messages>

yosys> opt_merge -nomux

3.38.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\twofish_whit_keysched256'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.38.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \twofish_whit_keysched256..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.38.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \twofish_whit_keysched256.
Performed a total of 0 changes.

yosys> opt_merge

3.38.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\twofish_whit_keysched256'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.38.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.38.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \twofish_whit_keysched256..
Removed 0 unused cells and 54183 unused wires.
<suppressed ~2353 debug messages>

yosys> opt_expr

3.38.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module twofish_whit_keysched256.

3.38.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.38.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \twofish_whit_keysched256..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.38.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \twofish_whit_keysched256.
Performed a total of 0 changes.

yosys> opt_merge

3.38.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\twofish_whit_keysched256'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.38.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.38.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \twofish_whit_keysched256..

yosys> opt_expr

3.38.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module twofish_whit_keysched256.

3.38.16. Finished OPT passes. (There is nothing left to do.)

yosys> abc -script /tmp/yosys_xOf0fV/abc_tmp_1.scr

3.39. Executing ABC pass (technology mapping using ABC).

3.39.1. Extracting gate netlist of module `\twofish_whit_keysched256' to `<abc-temp-dir>/input.blif'..
Extracted 15822 gates and 16078 wires to a netlist network with 256 inputs and 256 outputs.

3.39.1.1. Executing ABC.
DE:   #PIs = 256  #Luts =  4874  Max Lvl =  56  Avg Lvl =  40.40  [   0.82 sec. at Pass 0]
DE:   #PIs = 256  #Luts =  4379  Max Lvl =  44  Avg Lvl =  32.64  [ 155.40 sec. at Pass 1]
DE:   #PIs = 256  #Luts =  4044  Max Lvl =  46  Avg Lvl =  33.00  [  16.86 sec. at Pass 2]
DE:   #PIs = 256  #Luts =  4044  Max Lvl =  46  Avg Lvl =  33.00  [ 122.18 sec. at Pass 3]
DE:   #PIs = 256  #Luts =  4037  Max Lvl =  46  Avg Lvl =  33.12  [  18.38 sec. at Pass 4]
DE:   #PIs = 256  #Luts =  4037  Max Lvl =  46  Avg Lvl =  33.12  [ 192.70 sec. at Pass 5]
DE:   #PIs = 256  #Luts =  4017  Max Lvl =  45  Avg Lvl =  33.38  [  15.04 sec. at Pass 6]
DE:   #PIs = 256  #Luts =  4017  Max Lvl =  45  Avg Lvl =  33.38  [ 195.20 sec. at Pass 7]
DE:   #PIs = 256  #Luts =  4017  Max Lvl =  45  Avg Lvl =  33.38  [  24.59 sec. at Pass 8]
DE:   #PIs = 256  #Luts =  4017  Max Lvl =  45  Avg Lvl =  33.38  [ 161.04 sec. at Pass 9]
DE:   #PIs = 256  #Luts =  4017  Max Lvl =  45  Avg Lvl =  33.38  [   1.74 sec. at Pass 10]

yosys> opt

3.40. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.40.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module twofish_whit_keysched256.

yosys> opt_merge -nomux

3.40.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\twofish_whit_keysched256'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.40.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \twofish_whit_keysched256..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.40.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \twofish_whit_keysched256.
Performed a total of 0 changes.

yosys> opt_merge

3.40.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\twofish_whit_keysched256'.
Removed a total of 0 cells.

yosys> opt_dff

3.40.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.40.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \twofish_whit_keysched256..
Removed 0 unused cells and 16078 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.40.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module twofish_whit_keysched256.

3.40.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.40.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \twofish_whit_keysched256..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.40.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \twofish_whit_keysched256.
Performed a total of 0 changes.

yosys> opt_merge

3.40.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\twofish_whit_keysched256'.
Removed a total of 0 cells.

yosys> opt_dff

3.40.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.40.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \twofish_whit_keysched256..

yosys> opt_expr

3.40.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module twofish_whit_keysched256.

3.40.16. Finished OPT passes. (There is nothing left to do.)

yosys> opt_ffinv

3.41. Executing OPT_FFINV pass (push inverters through FFs).
Discovering LUTs.
Pushed 0 inverters.

yosys> stat

3.42. Printing statistics.

=== twofish_whit_keysched256 ===

   Number of wires:               5726
   Number of wire bits:          12713
   Number of public wires:        1965
   Number of public wire bits:    8952
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               4017
     $lut                         4017


yosys> shregmap -minlen 8 -maxlen 20

3.43. Executing SHREGMAP pass (map shift registers).
Converted 0 dff cells into 0 shift registers.

yosys> dfflegalize -cell $_DFF_?_ 0 -cell $_DFF_???_ 0 -cell $_DFFE_????_ 0 -cell $_DFFSR_???_ 0 -cell $_DFFSRE_????_ 0 -cell $_DLATCHSR_PPP_ 0

3.44. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

yosys> stat

3.45. Printing statistics.

=== twofish_whit_keysched256 ===

   Number of wires:               5726
   Number of wire bits:          12713
   Number of public wires:        1965
   Number of public wire bits:    8952
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               4017
     $lut                         4017


yosys> techmap -map +/techmap.v -map +/rapidsilicon/genesis/ffs_map.v

3.46. Executing TECHMAP pass (map to technology primitives).

3.46.1. Executing Verilog-2005 frontend: /home/users/aram/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/aram/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.46.2. Executing Verilog-2005 frontend: /home/users/aram/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/ffs_map.v
Parsing Verilog input from `/home/users/aram/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/ffs_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP0N_'.
Generating RTLIL representation for module `\$_DFFE_PN0P_'.
Generating RTLIL representation for module `\$_DFFE_PN0N_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP1N_'.
Generating RTLIL representation for module `\$_DFFE_PN1P_'.
Generating RTLIL representation for module `\$_DFFE_PN1N_'.
Generating RTLIL representation for module `\$_DFFSR_PPP_'.
Generating RTLIL representation for module `\$_DFFSR_PNP_'.
Generating RTLIL representation for module `\$_DFFSR_PNN_'.
Generating RTLIL representation for module `\$_DFFSR_PPN_'.
Generating RTLIL representation for module `\$_DFFSR_NPP_'.
Generating RTLIL representation for module `\$_DFFSR_NNP_'.
Generating RTLIL representation for module `\$_DFFSR_NNN_'.
Generating RTLIL representation for module `\$_DFFSR_NPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PNPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPNP_'.
Generating RTLIL representation for module `\$_DFFSRE_PNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PNPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PPNN_'.
Generating RTLIL representation for module `\$_DFFSRE_PNNN_'.
Generating RTLIL representation for module `\$_DLATCHSR_PPP_'.
Generating RTLIL representation for module `\$_DLATCHSR_NPP_'.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP0N_'.
Generating RTLIL representation for module `\$_DFFE_NN0P_'.
Generating RTLIL representation for module `\$_DFFE_NN0N_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_NP1N_'.
Generating RTLIL representation for module `\$_DFFE_NN1P_'.
Generating RTLIL representation for module `\$_DFFE_NN1N_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNPP_'.
Generating RTLIL representation for module `\$_DFFSRE_NPNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPN_'.
Generating RTLIL representation for module `\$_DFFSRE_NNPN_'.
Generating RTLIL representation for module `\$_DFFSRE_NPNN_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNN_'.
Generating RTLIL representation for module `\$__SHREG_DFF_P_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PN0_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NN0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFF_PN1_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_NN1_'.
Successfully finished Verilog frontend.

3.46.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $lut.
No more expansions possible.
<suppressed ~4153 debug messages>

yosys> opt_expr -mux_undef

3.47. Executing OPT_EXPR pass (perform const folding).
Optimizing module twofish_whit_keysched256.
<suppressed ~58561 debug messages>

yosys> simplemap

3.48. Executing SIMPLEMAP pass (map simple cells to gate primitives).

yosys> opt_expr

3.49. Executing OPT_EXPR pass (perform const folding).
Optimizing module twofish_whit_keysched256.

yosys> opt_merge

3.50. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\twofish_whit_keysched256'.
<suppressed ~103116 debug messages>
Removed a total of 34372 cells.

yosys> opt_dff -nodffe -nosdff

3.51. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.52. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \twofish_whit_keysched256..
Removed 0 unused cells and 7936 unused wires.
<suppressed ~1 debug messages>

yosys> opt -nodffe -nosdff

3.53. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.53.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module twofish_whit_keysched256.
<suppressed ~818 debug messages>

yosys> opt_merge -nomux

3.53.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\twofish_whit_keysched256'.
<suppressed ~162 debug messages>
Removed a total of 54 cells.

yosys> opt_muxtree

3.53.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \twofish_whit_keysched256..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.53.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \twofish_whit_keysched256.
Performed a total of 0 changes.

yosys> opt_merge

3.53.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\twofish_whit_keysched256'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.53.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.53.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \twofish_whit_keysched256..
Removed 0 unused cells and 139 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.53.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module twofish_whit_keysched256.

3.53.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.53.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \twofish_whit_keysched256..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.53.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \twofish_whit_keysched256.
Performed a total of 0 changes.

yosys> opt_merge

3.53.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\twofish_whit_keysched256'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.53.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.53.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \twofish_whit_keysched256..

yosys> opt_expr

3.53.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module twofish_whit_keysched256.

3.53.16. Finished OPT passes. (There is nothing left to do.)

yosys> abc -script /tmp/yosys_xOf0fV/abc_tmp_2.scr

3.54. Executing ABC pass (technology mapping using ABC).

3.54.1. Extracting gate netlist of module `\twofish_whit_keysched256' to `<abc-temp-dir>/input.blif'..
Extracted 29338 gates and 29596 wires to a netlist network with 256 inputs and 256 outputs.

3.54.1.1. Executing ABC.
DE:   #PIs = 256  #Luts =  4415  Max Lvl =  46  Avg Lvl =  33.84  [   2.63 sec. at Pass 0]
DE:   #PIs = 256  #Luts =  4415  Max Lvl =  46  Avg Lvl =  33.84  [ 216.04 sec. at Pass 1]
DE:   #PIs = 256  #Luts =  4011  Max Lvl =  44  Avg Lvl =  32.85  [  18.14 sec. at Pass 2]
DE:   #PIs = 256  #Luts =  4011  Max Lvl =  44  Avg Lvl =  32.85  [ 149.51 sec. at Pass 3]
DE:   #PIs = 256  #Luts =  3998  Max Lvl =  45  Avg Lvl =  33.34  [  12.96 sec. at Pass 4]
DE:   #PIs = 256  #Luts =  3998  Max Lvl =  45  Avg Lvl =  33.34  [ 146.43 sec. at Pass 5]
DE:   #PIs = 256  #Luts =  3998  Max Lvl =  45  Avg Lvl =  33.34  [  14.83 sec. at Pass 6]
DE:   #PIs = 256  #Luts =  3998  Max Lvl =  45  Avg Lvl =  33.34  [ 167.49 sec. at Pass 7]
DE:   #PIs = 256  #Luts =  3998  Max Lvl =  45  Avg Lvl =  33.34  [   1.82 sec. at Pass 8]

yosys> opt

3.55. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.55.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module twofish_whit_keysched256.

yosys> opt_merge -nomux

3.55.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\twofish_whit_keysched256'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.55.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \twofish_whit_keysched256..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.55.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \twofish_whit_keysched256.
Performed a total of 0 changes.

yosys> opt_merge

3.55.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\twofish_whit_keysched256'.
Removed a total of 0 cells.

yosys> opt_dff

3.55.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.55.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \twofish_whit_keysched256..
Removed 0 unused cells and 14490 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.55.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module twofish_whit_keysched256.

3.55.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.55.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \twofish_whit_keysched256..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.55.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \twofish_whit_keysched256.
Performed a total of 0 changes.

yosys> opt_merge

3.55.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\twofish_whit_keysched256'.
Removed a total of 0 cells.

yosys> opt_dff

3.55.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.55.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \twofish_whit_keysched256..

yosys> opt_expr

3.55.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module twofish_whit_keysched256.

3.55.16. Finished OPT passes. (There is nothing left to do.)

yosys> hierarchy -check

3.56. Executing HIERARCHY pass (managing design hierarchy).

3.56.1. Analyzing design hierarchy..
Top module:  \twofish_whit_keysched256

3.56.2. Analyzing design hierarchy..
Top module:  \twofish_whit_keysched256
Removed 0 unused modules.

yosys> stat

3.57. Printing statistics.

=== twofish_whit_keysched256 ===

   Number of wires:               5707
   Number of wire bits:          12694
   Number of public wires:        1965
   Number of public wire bits:    8952
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               3998
     $lut                         3998


yosys> opt_clean -purge

3.58. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \twofish_whit_keysched256..
Removed 0 unused cells and 1700 unused wires.
<suppressed ~1700 debug messages>

yosys> write_verilog -noattr -nohex synthesized.v

3.59. Executing Verilog backend.

yosys> bmuxmap

3.59.1. Executing BMUXMAP pass.

yosys> demuxmap

3.59.2. Executing DEMUXMAP pass.

yosys> clean_zerowidth
Dumping module `\twofish_whit_keysched256'.

End of script. Logfile hash: 8a4ddaebe7, CPU: user 73.71s system 0.96s, MEM: 246.72 MB peak
Yosys 0.16+65 (git sha1 7987105a9, gcc 9.1.0 -fPIC -Os)
Time spent: 99% 6x abc (11507 sec), 0% 33x opt_expr (31 sec), ...
real 1745.11
user 11336.37
sys 241.81
