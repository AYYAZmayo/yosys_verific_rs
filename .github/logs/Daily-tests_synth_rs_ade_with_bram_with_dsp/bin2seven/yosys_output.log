
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys-Verific 0.0.140
 Yosys 0.18+10 (git sha1 92b23013e, gcc 11.2.0 -fPIC -Os)


-- Executing script file `yosys.ys' --
echo on

yosys> plugin -i synth-rs

yosys> read -verific

yosys> read -incdir .

yosys> verific -vlog-incdir .

1. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Sep22_SW_Release, released at Fri Sep 30 20:01:32 2022.

yosys> verilog_defaults -add -I.

yosys> read -vlog2k bin2seven.v

yosys> verific -vlog2k bin2seven.v

2. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Sep22_SW_Release, released at Fri Sep 30 20:01:32 2022.
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'bin2seven.v'

yosys> synth_rs -top top -tech genesis2 -goal area -de -verilog synthesized.v

3. Executing synth_rs pass: v0.4.116

yosys> read_verilog -lib -specify -nomem2reg +/rapidsilicon/common/cells_sim.v +/rapidsilicon/genesis2/cells_sim.v +/rapidsilicon/genesis2/dsp_sim.v +/rapidsilicon/genesis2/brams_sim.v

3.1. Executing Verilog-2005 frontend: /nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v
Parsing Verilog input from `/nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\inv'.
Generating RTLIL representation for module `\buff'.
Generating RTLIL representation for module `\logic_0'.
Generating RTLIL representation for module `\logic_1'.
Generating RTLIL representation for module `\gclkbuff'.
Successfully finished Verilog frontend.

3.2. Executing Verilog-2005 frontend: /nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/cells_sim.v
Parsing Verilog input from `/nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\dff'.
Generating RTLIL representation for module `\dffn'.
Generating RTLIL representation for module `\sdff'.
Generating RTLIL representation for module `\sdffn'.
Generating RTLIL representation for module `\dffr'.
Generating RTLIL representation for module `\dffnr'.
Generating RTLIL representation for module `\dffe'.
Generating RTLIL representation for module `\dffne'.
Generating RTLIL representation for module `\sdffre'.
Generating RTLIL representation for module `\sdffnre'.
Generating RTLIL representation for module `\dffre'.
Generating RTLIL representation for module `\dffnre'.
Generating RTLIL representation for module `\latch'.
Generating RTLIL representation for module `\latchn'.
Generating RTLIL representation for module `\latchr'.
Generating RTLIL representation for module `\latchnr'.
Generating RTLIL representation for module `\fa_1bit'.
Successfully finished Verilog frontend.

3.3. Executing Verilog-2005 frontend: /nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/dsp_sim.v
Parsing Verilog input from `/nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/dsp_sim.v' to AST representation.
Generating RTLIL representation for module `\RS_DSP'.
Generating RTLIL representation for module `\RS_DSP_MULT'.
Generating RTLIL representation for module `\RS_DSP_MULT_REGIN'.
Generating RTLIL representation for module `\RS_DSP_MULT_REGOUT'.
Generating RTLIL representation for module `\RS_DSP_MULT_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP_MULTADD'.
Generating RTLIL representation for module `\RS_DSP_MULTADD_REGIN'.
Generating RTLIL representation for module `\RS_DSP_MULTADD_REGOUT'.
Generating RTLIL representation for module `\RS_DSP_MULTADD_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP_MULTACC'.
Generating RTLIL representation for module `\RS_DSP_MULTACC_REGIN'.
Generating RTLIL representation for module `\RS_DSP_MULTACC_REGOUT'.
Generating RTLIL representation for module `\RS_DSP_MULTACC_REGIN_REGOUT'.
Generating RTLIL representation for module `\dsp_t1_20x18x64_cfg_ports'.
Generating RTLIL representation for module `\dsp_t1_sim_cfg_ports'.
Successfully finished Verilog frontend.

3.4. Executing Verilog-2005 frontend: /nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/brams_sim.v
Parsing Verilog input from `/nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/brams_sim.v' to AST representation.
Generating RTLIL representation for module `\TDP_BRAM18'.
Generating RTLIL representation for module `\RS_TDP36K'.
Generating RTLIL representation for module `\BRAM2x18_TDP'.
Generating RTLIL representation for module `\BRAM2x18_SDP'.
Generating RTLIL representation for module `\_$_mem_v2_asymmetric'.
Successfully finished Verilog frontend.

yosys> hierarchy -check -top top

3.5. Executing HIERARCHY pass (managing design hierarchy).
VERIFIC-INFO [VERI-1018] bin2seven.v:1: compiling module 'top'
VERIFIC-WARNING [VERI-1209] bin2seven.v:26: expression size 28 truncated to fit in target size 27
VERIFIC-WARNING [VERI-1209] bin2seven.v:35: expression size 17 truncated to fit in target size 16
VERIFIC-WARNING [VERI-1209] bin2seven.v:42: expression size 21 truncated to fit in target size 20
VERIFIC-WARNING [VERI-1209] bin2seven.v:53: expression size 16 truncated to fit in target size 4
VERIFIC-WARNING [VERI-1209] bin2seven.v:59: expression size 10 truncated to fit in target size 4
VERIFIC-WARNING [VERI-1209] bin2seven.v:65: expression size 7 truncated to fit in target size 4
Importing module top.

3.5.1. Analyzing design hierarchy..
Top module:  \top

3.5.2. Analyzing design hierarchy..
Top module:  \top
Removed 0 unused modules.

yosys> proc

3.6. Executing PROC pass (convert processes to netlists).

yosys> proc_clean

3.6.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> proc_rmdead

3.6.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

yosys> proc_prune

3.6.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

yosys> proc_init

3.6.4. Executing PROC_INIT pass (extract init attributes).

yosys> proc_arst

3.6.5. Executing PROC_ARST pass (detect async resets in processes).

yosys> proc_rom

3.6.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

yosys> proc_mux

3.6.7. Executing PROC_MUX pass (convert decision trees to multiplexers).

yosys> proc_dlatch

3.6.8. Executing PROC_DLATCH pass (convert process syncs to latches).

yosys> proc_dff

3.6.9. Executing PROC_DFF pass (convert process syncs to FFs).

yosys> proc_memwr

3.6.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

yosys> proc_clean

3.6.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> opt_expr -keepdc

3.6.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~3 debug messages>

yosys> demuxmap

3.7. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> flatten

3.8. Executing FLATTEN pass (flatten design).

yosys> demuxmap

3.9. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> tribuf -logic -formal

3.10. Executing TRIBUF pass.

yosys> deminout

3.11. Executing DEMINOUT pass (demote inout ports to input or output).

yosys> opt_expr

3.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

yosys> opt_clean

3.13. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 14 unused wires.
<suppressed ~7 debug messages>

yosys> check

3.14. Executing CHECK pass (checking for obvious problems).
Checking module top...
Found and reported 0 problems.

yosys> opt_expr

3.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

yosys> opt_merge -nomux

3.16. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

yosys> opt_reduce

3.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_share

3.20. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.21. Executing OPT_DFF pass (perform DFF optimizations).
Changing const-value async load to async reset on $verific$refresh_counter_reg$bin2seven.v:42$45 ($aldff) from module top.
Changing const-value async load to async reset on $verific$one_second_counter_reg$bin2seven.v:27$34 ($aldff) from module top.
Changing const-value async load to async reset on $verific$displayed_number_reg$bin2seven.v:35$41 ($aldff) from module top.

yosys> opt_clean

3.22. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

yosys> opt_expr

3.23. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
MAX OPT ITERATION = 1

yosys> fsm -encoding binary

3.24. Executing FSM pass (extract and optimize FSM).

yosys> fsm_detect

3.24.1. Executing FSM_DETECT pass (finding FSMs in design).

yosys> fsm_extract

3.24.2. Executing FSM_EXTRACT pass (extracting FSM from design).

yosys> fsm_opt

3.24.3. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> opt_clean

3.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

yosys> fsm_opt

3.24.5. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> fsm_recode -encoding binary

3.24.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

yosys> fsm_info

3.24.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

yosys> fsm_map

3.24.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

yosys> opt_expr

3.25. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

yosys> opt_merge -nomux

3.26. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.27. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

yosys> opt_reduce

3.28. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.29. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_share

3.30. Executing OPT_SHARE pass.

yosys> opt_dff -sat

3.31. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $verific$displayed_number_reg$bin2seven.v:35$41 ($adff) from module top (D = $verific$n200$11, Q = \displayed_number).

yosys> opt_clean

3.32. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 1 unused cells and 1 unused wires.
<suppressed ~2 debug messages>

yosys> opt_expr

3.33. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

yosys> opt_muxtree

3.34. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

yosys> opt_reduce

3.35. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.36. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_share

3.37. Executing OPT_SHARE pass.

yosys> opt_dff -sat

3.38. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.39. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

yosys> opt_expr

3.40. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
MAX OPT ITERATION = 2

yosys> wreduce -keepdc

3.41. Executing WREDUCE pass (reducing word size of cells).
Removed top 26 bits (of 27) from port B of cell top.$verific$add_8$bin2seven.v:26$31 ($add).
Removed top 15 bits (of 16) from port B of cell top.$verific$add_19$bin2seven.v:35$38 ($add).
Removed top 19 bits (of 20) from port B of cell top.$verific$add_26$bin2seven.v:42$43 ($add).
Removed top 12 bits (of 16) from wire top.$verific$n358$17.
Removed top 6 bits (of 10) from wire top.$verific$n391$20.
Removed top 3 bits (of 7) from wire top.$verific$n426$23.

yosys> peepopt

3.42. Executing PEEPOPT pass (run peephole optimizers).

yosys> opt_clean

3.43. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

yosys> demuxmap

3.44. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> stat

3.45. Printing statistics.

=== top ===

   Number of wires:                 24
   Number of wire bits:            249
   Number of public wires:          10
   Number of public wire bits:      83
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 18
     $add                            3
     $adff                           2
     $adffe                          1
     $bmux                           3
     $div                            3
     $eq                             1
     $le                             1
     $mod                            3
     $mux                            1


yosys> wreduce t:$mul

3.46. Executing WREDUCE pass (reducing word size of cells).

yosys> rs_dsp_macc -genesis2 -max_dsp 154

3.47. Executing RS_DSP_MACC pass.

yosys> techmap -map +/mul2dsp_check_maxwidth.v -D DSP_A_MAXWIDTH=20 -D DSP_B_MAXWIDTH=18 -D DSP_A_MINWIDTH=11 -D DSP_B_MINWIDTH=10 -D DSP_NAME=$__RS_MUL20X18 a:valid_map

3.48. Executing TECHMAP pass (map to technology primitives).

3.48.1. Executing Verilog-2005 frontend: /nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/mul2dsp_check_maxwidth.v
Parsing Verilog input from `/nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/mul2dsp_check_maxwidth.v' to AST representation.
Generating RTLIL representation for module `\_80_mul'.
Generating RTLIL representation for module `\_90_soft_mul'.
Successfully finished Verilog frontend.

3.48.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

yosys> stat

3.49. Printing statistics.

=== top ===

   Number of wires:                 24
   Number of wire bits:            249
   Number of public wires:          10
   Number of public wire bits:      83
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 18
     $add                            3
     $adff                           2
     $adffe                          1
     $bmux                           3
     $div                            3
     $eq                             1
     $le                             1
     $mod                            3
     $mux                            1


yosys> chtype -set $mul t:$__soft_mul

yosys> techmap -map +/rapidsilicon/genesis2/dsp_map.v -D USE_DSP_CFG_PARAMS=0

3.50. Executing TECHMAP pass (map to technology primitives).

3.50.1. Executing Verilog-2005 frontend: /nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/dsp_map.v
Parsing Verilog input from `/nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/dsp_map.v' to AST representation.
Generating RTLIL representation for module `\$__RS_MUL20X18'.
Successfully finished Verilog frontend.

3.50.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

yosys> techmap -map +/rapidsilicon/genesis2/dsp_final_map.v

3.51. Executing TECHMAP pass (map to technology primitives).

3.51.1. Executing Verilog-2005 frontend: /nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/dsp_final_map.v
Parsing Verilog input from `/nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/dsp_final_map.v' to AST representation.
Generating RTLIL representation for module `\dsp_t1_20x18x64_cfg_ports'.
Successfully finished Verilog frontend.

3.51.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

yosys> rs-pack-dsp-regs

3.52. Executing rs_pack_dsp_regs pass.

yosys> rs_dsp_io_regs

3.53. Executing RS_DSP_IO_REGS pass.

yosys> alumacc

3.54. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module top:
  creating $macc model for $verific$add_19$bin2seven.v:35$38 ($add).
  creating $macc model for $verific$add_26$bin2seven.v:42$43 ($add).
  creating $macc model for $verific$add_8$bin2seven.v:26$31 ($add).
  creating $alu model for $macc $verific$add_8$bin2seven.v:26$31.
  creating $alu model for $macc $verific$add_26$bin2seven.v:42$43.
  creating $alu model for $macc $verific$add_19$bin2seven.v:35$38.
  creating $alu model for $verific$LessThan_6$bin2seven.v:23$30 ($le): new $alu
  creating $alu model for $verific$equal_12$bin2seven.v:29$35 ($eq): merged with $verific$LessThan_6$bin2seven.v:23$30.
  creating $alu cell for $verific$LessThan_6$bin2seven.v:23$30, $verific$equal_12$bin2seven.v:29$35: $auto$alumacc.cc:485:replace_alu$65
  creating $alu cell for $verific$add_19$bin2seven.v:35$38: $auto$alumacc.cc:485:replace_alu$78
  creating $alu cell for $verific$add_26$bin2seven.v:42$43: $auto$alumacc.cc:485:replace_alu$81
  creating $alu cell for $verific$add_8$bin2seven.v:26$31: $auto$alumacc.cc:485:replace_alu$84
  created 4 $alu and 0 $macc cells.

yosys> opt_expr

3.55. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

yosys> opt_merge -nomux

3.56. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.57. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

yosys> opt_reduce

3.58. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.59. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_share

3.60. Executing OPT_SHARE pass.

yosys> opt_dff -nodffe

3.61. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.62. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.63. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
MAX OPT ITERATION = 1

yosys> stat

3.64. Printing statistics.

=== top ===

   Number of wires:                 36
   Number of wire bits:            459
   Number of public wires:          10
   Number of public wire bits:      83
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 22
     $adff                           2
     $adffe                          1
     $alu                            4
     $bmux                           3
     $div                            3
     $mod                            3
     $mux                            1
     $not                            2
     $or                             1
     $reduce_and                     1
     $reduce_or                      1


yosys> memory -nomap

3.65. Executing MEMORY pass.

yosys> opt_mem

3.65.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

yosys> opt_mem_priority

3.65.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

yosys> opt_mem_feedback

3.65.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

yosys> memory_bmux2rom

3.65.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

yosys> memory_dff

3.65.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).
Checking read port `$auto$memory_bmux2rom.cc:63:execute$87'[0] in module `\top': no output FF found.
Checking read port address `$auto$memory_bmux2rom.cc:63:execute$87'[0] in module `\top': no address FF found.

yosys> opt_clean

3.65.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

yosys> memory_share

3.65.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

yosys> opt_mem_widen

3.65.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

yosys> opt_clean

3.65.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

yosys> memory_collect

3.65.10. Executing MEMORY_COLLECT pass (generating $mem cells).

yosys> stat

3.66. Printing statistics.

=== top ===

   Number of wires:                 36
   Number of wire bits:            459
   Number of public wires:          10
   Number of public wire bits:      83
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 22
     $adff                           2
     $adffe                          1
     $alu                            4
     $bmux                           2
     $div                            3
     $mem_v2                         1
     $mod                            3
     $mux                            1
     $not                            2
     $or                             1
     $reduce_and                     1
     $reduce_or                      1


yosys> muxpack

3.67. Executing MUXPACK pass ($mux cell cascades to $pmux).
Converted 0 (p)mux cells into 0 pmux cells.
<suppressed ~1 debug messages>

yosys> opt_clean

3.68. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

yosys> memory_libmap -lib +/rapidsilicon/genesis2/brams_new_swap.txt -limit 150 a:read_swapped

3.69. Executing MEMORY_LIBMAP pass (mapping memories to cells).

yosys> memory_libmap -lib +/rapidsilicon/genesis2/brams_new.txt -limit 150

3.70. Executing MEMORY_LIBMAP pass (mapping memories to cells).
using FF mapping for memory top.$auto$memory_bmux2rom.cc:63:execute$87
<suppressed ~6 debug messages>

yosys> rs_bram_split -new_mapping

3.71. Executing Rs_BRAM_Split pass.

yosys> techmap -autoproc -map +/rapidsilicon/genesis2/brams_map_new.v

3.72. Executing TECHMAP pass (map to technology primitives).

3.72.1. Executing Verilog-2005 frontend: /nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/brams_map_new.v
Parsing Verilog input from `/nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/brams_map_new.v' to AST representation.
Generating RTLIL representation for module `\$__RS_FACTOR_BRAM36_TDP'.
Generating RTLIL representation for module `\$__RS_FACTOR_BRAM18_TDP'.
Generating RTLIL representation for module `\$__RS_FACTOR_BRAM18_SDP'.
Generating RTLIL representation for module `\$__RS_FACTOR_BRAM36_SDP'.
Successfully finished Verilog frontend.

3.72.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~6 debug messages>

yosys> techmap -map +/rapidsilicon/genesis2/brams_final_map_new.v

3.73. Executing TECHMAP pass (map to technology primitives).

3.73.1. Executing Verilog-2005 frontend: /nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/brams_final_map_new.v
Parsing Verilog input from `/nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/brams_final_map_new.v' to AST representation.
Generating RTLIL representation for module `\BRAM2x18_TDP'.
Generating RTLIL representation for module `\BRAM2x18_SDP'.
Successfully finished Verilog frontend.

3.73.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

yosys> pmuxtree

3.74. Executing PMUXTREE pass.

yosys> muxpack

3.75. Executing MUXPACK pass ($mux cell cascades to $pmux).
Converted 0 (p)mux cells into 0 pmux cells.
<suppressed ~1 debug messages>

yosys> memory_map

3.76. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).
Mapping memory $auto$memory_bmux2rom.cc:63:execute$87 in module \top:
  created 16 $dff cells and 0 static cells of width 7.
  read interface: 0 $dff and 15 $mux cells.
  write interface: 0 write mux blocks.

yosys> stat

3.77. Printing statistics.

=== top ===

   Number of wires:                 98
   Number of wire bits:            893
   Number of public wires:          10
   Number of public wire bits:      83
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 52
     $adff                           2
     $adffe                          1
     $alu                            4
     $bmux                           2
     $dff                           16
     $div                            3
     $mod                            3
     $mux                           16
     $not                            2
     $or                             1
     $reduce_and                     1
     $reduce_or                      1


yosys> techmap -map +/techmap.v -map +/rapidsilicon/genesis2/arith_map.v

3.78. Executing TECHMAP pass (map to technology primitives).

3.78.1. Executing Verilog-2005 frontend: /nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.78.2. Executing Verilog-2005 frontend: /nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/arith_map.v
Parsing Verilog input from `/nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_rs_alu'.
Successfully finished Verilog frontend.

3.78.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $adffe.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $not.
Using template $paramod$f02bbbf710bba6238f4bdfa41b3051acfe2064a8\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $adff.
Using template $paramod$2af30114e9bd4ccb04dad757b3f0a8f6bf0615b0\_90_alu for cells of type $alu.
Using template $paramod$ce0ec84be7047712840b0952f343ee9e63ef75d1\_90_alu for cells of type $alu.
Using template $paramod$956e79e8f8c5e64be7438155ae50a966e615cb04\_90_alu for cells of type $alu.
Using template $paramod$b1f4188eff752b8d0cb539239f972fa4c4d4c520\_90_div for cells of type $div.
Using template $paramod$71ea803f154a36dd0a51e605caab8b616e5b0add\_90_mod for cells of type $mod.
Using template $paramod$94b2d39efe5cee36393111e3a7a149e3dba7e8c5\_90_div for cells of type $div.
Using template $paramod$eeda5ecb13bc076e83d9c3d9d88692518299f738\_90_mod for cells of type $mod.
Using template $paramod$15a3b70ea5534c0cc298fa6d405a538b5f71cb9e\_90_div for cells of type $div.
Using template $paramod$3f610ce866d8f2f7d98af6b42b25d77dd2ede707\_90_mod for cells of type $mod.
Using extmapper simplemap for cells of type $bmux.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $and.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011011 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010000 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010100 for cells of type $lcu.
Using template $paramod$b1f4188eff752b8d0cb539239f972fa4c4d4c520\$__div_mod_trunc for cells of type $__div_mod_trunc.
Using template $paramod$71ea803f154a36dd0a51e605caab8b616e5b0add\$__div_mod_trunc for cells of type $__div_mod_trunc.
Using template $paramod$94b2d39efe5cee36393111e3a7a149e3dba7e8c5\$__div_mod_trunc for cells of type $__div_mod_trunc.
Using template $paramod$eeda5ecb13bc076e83d9c3d9d88692518299f738\$__div_mod_trunc for cells of type $__div_mod_trunc.
Using template $paramod$15a3b70ea5534c0cc298fa6d405a538b5f71cb9e\$__div_mod_trunc for cells of type $__div_mod_trunc.
Using template $paramod$3f610ce866d8f2f7d98af6b42b25d77dd2ede707\$__div_mod_trunc for cells of type $__div_mod_trunc.
Running "alumacc" on wrapper $extern:wrap:$neg:Y_WIDTH=16:A_WIDTH=16:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$neg:Y_WIDTH=16:A_WIDTH=16:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$neg:Y_WIDTH=16:A_WIDTH=16:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using extmapper simplemap for cells of type $logic_and.
Using extmapper simplemap for cells of type $ne.
Using template $paramod\$__div_mod_u\WIDTH=32'00000000000000000000000000010000 for cells of type $__div_mod_u.
Running "alumacc" on wrapper $extern:wrap:$neg:Y_WIDTH=10:A_WIDTH=10:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$neg:Y_WIDTH=10:A_WIDTH=10:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$neg:Y_WIDTH=10:A_WIDTH=10:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $paramod\$__div_mod_u\WIDTH=32'00000000000000000000000000001010 for cells of type $__div_mod_u.
Running "alumacc" on wrapper $extern:wrap:$neg:Y_WIDTH=7:A_WIDTH=7:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$neg:Y_WIDTH=7:A_WIDTH=7:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$neg:Y_WIDTH=7:A_WIDTH=7:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $paramod\$__div_mod_u\WIDTH=32'00000000000000000000000000000111 for cells of type $__div_mod_u.
Using template $paramod$02488ff6fa51b28bbfa470bdd9b0e548b3357746\_90_alu for cells of type $alu.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=16:B_WIDTH=16:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=16:B_WIDTH=16:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=16:B_WIDTH=16:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=16:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=16:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=16:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=17:B_WIDTH=17:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=17:B_WIDTH=17:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=17:B_WIDTH=17:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=17:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=17:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=17:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=18:B_WIDTH=18:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=18:B_WIDTH=18:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=18:B_WIDTH=18:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=18:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=18:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=18:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=19:B_WIDTH=19:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=19:B_WIDTH=19:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=19:B_WIDTH=19:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=19:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=19:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=19:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=20:B_WIDTH=20:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=20:B_WIDTH=20:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=20:B_WIDTH=20:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=20:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=20:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=20:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=21:B_WIDTH=21:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=21:B_WIDTH=21:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=21:B_WIDTH=21:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=21:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=21:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=21:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=22:B_WIDTH=22:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=22:B_WIDTH=22:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=22:B_WIDTH=22:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=22:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=22:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=22:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=23:B_WIDTH=23:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=23:B_WIDTH=23:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=23:B_WIDTH=23:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=23:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=23:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=23:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=24:B_WIDTH=24:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=24:B_WIDTH=24:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=24:B_WIDTH=24:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=24:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=24:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=24:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=25:B_WIDTH=25:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=25:B_WIDTH=25:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=25:B_WIDTH=25:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=25:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=25:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=25:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=26:B_WIDTH=26:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=26:B_WIDTH=26:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=26:B_WIDTH=26:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=26:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=26:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=26:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=27:B_WIDTH=27:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=27:B_WIDTH=27:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=27:B_WIDTH=27:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=27:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=27:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=27:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=28:B_WIDTH=28:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=28:B_WIDTH=28:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=28:B_WIDTH=28:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=28:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=28:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=28:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=29:B_WIDTH=29:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=29:B_WIDTH=29:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=29:B_WIDTH=29:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=29:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=29:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=29:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=30:B_WIDTH=30:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=30:B_WIDTH=30:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=30:B_WIDTH=30:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=30:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=30:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=30:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=31:B_WIDTH=31:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=31:B_WIDTH=31:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=31:B_WIDTH=31:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=31:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=31:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=31:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $paramod$bd91b1311a7e26328ec7b35acb363a89aa87e033\_90_alu for cells of type $alu.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=10:B_WIDTH=10:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=10:B_WIDTH=10:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=10:B_WIDTH=10:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=10:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=10:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=10:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=11:B_WIDTH=11:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=11:B_WIDTH=11:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=11:B_WIDTH=11:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=11:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=11:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=11:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=12:B_WIDTH=12:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=12:B_WIDTH=12:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=12:B_WIDTH=12:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=12:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=12:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=12:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=13:B_WIDTH=13:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=13:B_WIDTH=13:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=13:B_WIDTH=13:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=13:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=13:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=13:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=14:B_WIDTH=14:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=14:B_WIDTH=14:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=14:B_WIDTH=14:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=14:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=14:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=14:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=15:B_WIDTH=15:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=15:B_WIDTH=15:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=15:B_WIDTH=15:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=15:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=15:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=15:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=16:B_WIDTH=16:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=16:B_WIDTH=16:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=16:B_WIDTH=16:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=16:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=16:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=16:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=17:B_WIDTH=17:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=17:B_WIDTH=17:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=17:B_WIDTH=17:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=17:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=17:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=17:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=18:B_WIDTH=18:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=18:B_WIDTH=18:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=18:B_WIDTH=18:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=18:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=18:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=18:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=19:B_WIDTH=19:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=19:B_WIDTH=19:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=19:B_WIDTH=19:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=19:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=19:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=19:A_WIDTH=10:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $paramod$38e8498ccdc425801fe5312e427e3cf0d9089c58\_90_alu for cells of type $alu.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=7:B_WIDTH=7:A_WIDTH=7:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=7:B_WIDTH=7:A_WIDTH=7:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=7:B_WIDTH=7:A_WIDTH=7:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=7:A_WIDTH=7:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=7:A_WIDTH=7:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=7:A_WIDTH=7:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=8:B_WIDTH=8:A_WIDTH=7:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=8:B_WIDTH=8:A_WIDTH=7:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=8:B_WIDTH=8:A_WIDTH=7:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=8:A_WIDTH=7:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=8:A_WIDTH=7:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=8:A_WIDTH=7:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=9:B_WIDTH=9:A_WIDTH=7:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=9:B_WIDTH=9:A_WIDTH=7:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=9:B_WIDTH=9:A_WIDTH=7:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=9:A_WIDTH=7:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=9:A_WIDTH=7:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=9:A_WIDTH=7:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=10:B_WIDTH=10:A_WIDTH=7:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=10:B_WIDTH=10:A_WIDTH=7:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=10:B_WIDTH=10:A_WIDTH=7:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=10:A_WIDTH=7:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=10:A_WIDTH=7:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=10:A_WIDTH=7:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=11:B_WIDTH=11:A_WIDTH=7:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=11:B_WIDTH=11:A_WIDTH=7:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=11:B_WIDTH=11:A_WIDTH=7:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=11:A_WIDTH=7:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=11:A_WIDTH=7:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=11:A_WIDTH=7:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=12:B_WIDTH=12:A_WIDTH=7:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=12:B_WIDTH=12:A_WIDTH=7:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=12:B_WIDTH=12:A_WIDTH=7:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=12:A_WIDTH=7:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=12:A_WIDTH=7:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=12:A_WIDTH=7:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=13:B_WIDTH=13:A_WIDTH=7:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=13:B_WIDTH=13:A_WIDTH=7:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=13:B_WIDTH=13:A_WIDTH=7:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=13:A_WIDTH=7:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=13:A_WIDTH=7:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=13:A_WIDTH=7:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $paramod$6df0329addda9228fcc2546de2aaf14ad26c98e1\_90_alu for cells of type $alu.
Using template $paramod$d66a711d7e97d14a7c7a9fd9e900c39b1fc36cfa\_90_alu for cells of type $alu.
Using template $paramod$8359f4ac8e08a95551ec17e9becbee696d87568d\_90_alu for cells of type $alu.
Using template $paramod$3e9f586ebf39197c9185418e155ec5725178e703\_90_alu for cells of type $alu.
Using template $paramod$99f84fe1e34117baf970301335fa146f92b93eb7\_90_alu for cells of type $alu.
Using template $paramod$10caef7eb223495dec7ca6c51abc18dbd379ce45\_90_alu for cells of type $alu.
Using template $paramod$6ae352d62dfc78ea1f63c7f3961ba142be4a2f93\_90_alu for cells of type $alu.
Using template $paramod$7bdc7d89ea9376c9c454fd05d9b64ca6288b61c9\_90_alu for cells of type $alu.
Using template $paramod$96a374a77d27fe2a5f65189ccd5c4d82c02f3e0c\_90_alu for cells of type $alu.
Using template $paramod$c01a73249af533291d6c07bc7dff8edfd9012ebf\_90_alu for cells of type $alu.
Using template $paramod$4dafc65fa46f14914da22e0fac43fee737cf5e98\_90_alu for cells of type $alu.
Using template $paramod$6514813ccfd0fbcd872b47be16e9bc3f005ba67f\_90_alu for cells of type $alu.
Using template $paramod$90cb621aa18d0bfc972ff6df82973fce6d62f25a\_90_alu for cells of type $alu.
Using template $paramod$28a6ec5648d14f65107108cc45dfc9433b8b29ab\_90_alu for cells of type $alu.
Using template $paramod$1b1e81b08462e7f621826ba0c290068af8e4e550\_90_alu for cells of type $alu.
Using template $paramod$1c5b0982e801b857faf786570d1281fe30bbf0dc\_90_alu for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001010 for cells of type $lcu.
Using template $paramod$484d51534650924b7ed4c69e46eed3a56904771f\_90_alu for cells of type $alu.
Using template $paramod$a9c862b459f0009bb3a015092e00213b862f7967\_90_alu for cells of type $alu.
Using template $paramod$b40e0f66d01d243904da425c63ff802ae596888e\_90_alu for cells of type $alu.
Using template $paramod$c3722232e837c1cdc21bf4710f7979c1b518b721\_90_alu for cells of type $alu.
Using template $paramod$bf2e0d75ecaff62813f871a5142c7021af38bf5c\_90_alu for cells of type $alu.
Using template $paramod$6dc634c8d6063e0c58b0c6db88adb2ef11238292\_90_alu for cells of type $alu.
Using template $paramod$10afb0bd3bc8b3b1c0bbb9286f33a7305ba386cf\_90_alu for cells of type $alu.
Using template $paramod$be383ff0f8dfcc01d751f31feaa02592ed59876f\_90_alu for cells of type $alu.
Using template $paramod$609c2088969c57dd2ff06ce43a3a0067f8ec1422\_90_alu for cells of type $alu.
Using template $paramod$b71783aad6188c4aede3c9474d77f228e3ed1af8\_90_alu for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000111 for cells of type $lcu.
Using template $paramod$dbcdc7e8aa1a4080cea2deda6fdc8772064f4d90\_90_alu for cells of type $alu.
Using template $paramod$dfca81329cbbac01700318224209a5f2318c7128\_90_alu for cells of type $alu.
Using template $paramod$ea139abf5d9f33c5a8f110be2ae0a1d01adc5fd6\_90_alu for cells of type $alu.
Using template $paramod$2d591d76303cd5065d50f216288bb81e81f2927d\_90_alu for cells of type $alu.
Using template $paramod$a7c9751983153561a93ce14686d50c76f61be0fb\_90_alu for cells of type $alu.
Using template $paramod$3001ab58efb579288a4727d361c003764a8c1e28\_90_alu for cells of type $alu.
Using template $paramod$b17027b2967ef1d90be228d723f0152c5776720c\_90_alu for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010001 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010010 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010011 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010101 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010110 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010111 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011000 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011001 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011010 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011100 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011101 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011110 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011111 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001011 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001100 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001101 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001110 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001111 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001000 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001001 for cells of type $lcu.
No more expansions possible.
<suppressed ~21479 debug messages>

yosys> stat

3.79. Printing statistics.

=== top ===

   Number of wires:              14145
   Number of wire bits:         255035
   Number of public wires:          10
   Number of public wire bits:      83
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:              28004
     $_AND_                      10088
     $_DFFE_PP0P_                   16
     $_DFF_PP0_                     47
     $_DFF_P_                      112
     $_MUX_                       4320
     $_NOT_                       2852
     $_OR_                        4967
     $_XOR_                       5602


yosys> opt_expr

3.80. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~20821 debug messages>

yosys> opt_merge -nomux

3.81. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~23157 debug messages>
Removed a total of 7719 cells.

yosys> opt_muxtree

3.82. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.83. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.84. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_share

3.85. Executing OPT_SHARE pass.

yosys> opt_dff -nodffe

3.86. Executing OPT_DFF pass (perform DFF optimizations).
Handling const CLK on $auto$ff.cc:262:slice$631 ($_DFF_P_) from module top (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$617 ($_DFF_P_) from module top (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$603 ($_DFF_P_) from module top (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$554 ($_DFF_P_) from module top (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$568 ($_DFF_P_) from module top (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$505 ($_DFF_P_) from module top (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$470 ($_DFF_P_) from module top (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$424 ($_DFF_P_) from module top (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$339 ($_DFF_P_) from module top (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$512 ($_DFF_P_) from module top (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$519 ($_DFF_P_) from module top (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$526 ($_DFF_P_) from module top (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$533 ($_DFF_P_) from module top (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$540 ($_DFF_P_) from module top (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$547 ($_DFF_P_) from module top (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$575 ($_DFF_P_) from module top (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$333 ($_DFF_P_) from module top (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$334 ($_DFF_P_) from module top (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$335 ($_DFF_P_) from module top (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$336 ($_DFF_P_) from module top (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$337 ($_DFF_P_) from module top (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$338 ($_DFF_P_) from module top (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$418 ($_DFF_P_) from module top (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$419 ($_DFF_P_) from module top (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$420 ($_DFF_P_) from module top (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$421 ($_DFF_P_) from module top (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$422 ($_DFF_P_) from module top (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$423 ($_DFF_P_) from module top (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$464 ($_DFF_P_) from module top (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$465 ($_DFF_P_) from module top (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$466 ($_DFF_P_) from module top (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$467 ($_DFF_P_) from module top (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$468 ($_DFF_P_) from module top (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$469 ($_DFF_P_) from module top (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$499 ($_DFF_P_) from module top (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$500 ($_DFF_P_) from module top (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$501 ($_DFF_P_) from module top (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$502 ($_DFF_P_) from module top (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$503 ($_DFF_P_) from module top (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$504 ($_DFF_P_) from module top (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$506 ($_DFF_P_) from module top (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$507 ($_DFF_P_) from module top (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$508 ($_DFF_P_) from module top (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$509 ($_DFF_P_) from module top (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$510 ($_DFF_P_) from module top (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$511 ($_DFF_P_) from module top (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$513 ($_DFF_P_) from module top (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$514 ($_DFF_P_) from module top (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$515 ($_DFF_P_) from module top (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$516 ($_DFF_P_) from module top (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$517 ($_DFF_P_) from module top (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$518 ($_DFF_P_) from module top (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$520 ($_DFF_P_) from module top (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$521 ($_DFF_P_) from module top (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$522 ($_DFF_P_) from module top (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$523 ($_DFF_P_) from module top (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$524 ($_DFF_P_) from module top (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$525 ($_DFF_P_) from module top (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$527 ($_DFF_P_) from module top (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$528 ($_DFF_P_) from module top (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$529 ($_DFF_P_) from module top (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$530 ($_DFF_P_) from module top (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$531 ($_DFF_P_) from module top (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$532 ($_DFF_P_) from module top (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$534 ($_DFF_P_) from module top (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$535 ($_DFF_P_) from module top (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$536 ($_DFF_P_) from module top (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$537 ($_DFF_P_) from module top (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$538 ($_DFF_P_) from module top (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$539 ($_DFF_P_) from module top (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$541 ($_DFF_P_) from module top (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$542 ($_DFF_P_) from module top (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$543 ($_DFF_P_) from module top (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$544 ($_DFF_P_) from module top (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$545 ($_DFF_P_) from module top (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$546 ($_DFF_P_) from module top (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$548 ($_DFF_P_) from module top (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$549 ($_DFF_P_) from module top (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$550 ($_DFF_P_) from module top (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$551 ($_DFF_P_) from module top (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$552 ($_DFF_P_) from module top (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$553 ($_DFF_P_) from module top (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$562 ($_DFF_P_) from module top (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$563 ($_DFF_P_) from module top (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$564 ($_DFF_P_) from module top (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$565 ($_DFF_P_) from module top (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$566 ($_DFF_P_) from module top (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$567 ($_DFF_P_) from module top (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$569 ($_DFF_P_) from module top (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$570 ($_DFF_P_) from module top (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$571 ($_DFF_P_) from module top (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$572 ($_DFF_P_) from module top (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$573 ($_DFF_P_) from module top (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$574 ($_DFF_P_) from module top (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$597 ($_DFF_P_) from module top (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$598 ($_DFF_P_) from module top (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$599 ($_DFF_P_) from module top (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$600 ($_DFF_P_) from module top (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$601 ($_DFF_P_) from module top (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$602 ($_DFF_P_) from module top (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$611 ($_DFF_P_) from module top (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$612 ($_DFF_P_) from module top (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$613 ($_DFF_P_) from module top (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$614 ($_DFF_P_) from module top (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$615 ($_DFF_P_) from module top (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$616 ($_DFF_P_) from module top (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$625 ($_DFF_P_) from module top (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$626 ($_DFF_P_) from module top (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$627 ($_DFF_P_) from module top (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$628 ($_DFF_P_) from module top (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$629 ($_DFF_P_) from module top (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$630 ($_DFF_P_) from module top (removing D path).

yosys> opt_clean

3.87. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 546 unused cells and 16128 unused wires.
<suppressed ~547 debug messages>

yosys> opt_expr

3.88. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~73 debug messages>

yosys> opt_muxtree

3.89. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.90. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.91. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~18 debug messages>
Removed a total of 6 cells.

yosys> opt_share

3.92. Executing OPT_SHARE pass.

yosys> opt_dff -nodffe

3.93. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.94. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 9 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.95. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

yosys> opt_muxtree

3.96. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.97. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.98. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_share

3.99. Executing OPT_SHARE pass.

yosys> opt_dff -nodffe

3.100. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.101. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

yosys> opt_expr

3.102. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
MAX OPT ITERATION = 3

yosys> opt_expr -full

3.103. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~7 debug messages>

yosys> techmap -map +/techmap.v

3.104. Executing TECHMAP pass (map to technology primitives).

3.104.1. Executing Verilog-2005 frontend: /nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.104.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~71 debug messages>

yosys> stat

3.105. Printing statistics.

=== top ===

   Number of wires:                422
   Number of wire bits:           1891
   Number of public wires:          10
   Number of public wire bits:      83
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1141
     $_AND_                        436
     $_DFFE_PP0P_                   16
     $_DFF_PP0_                     47
     $_MUX_                        178
     $_NOT_                        120
     $_OR_                         172
     $_XOR_                        172


yosys> dfflegalize -cell $_SDFF_???_ 0 -cell $_SDFFE_????_ 0 t:$_SDFFCE_*

3.106. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

yosys> stat

3.107. Printing statistics.

=== top ===

   Number of wires:                422
   Number of wire bits:           1891
   Number of public wires:          10
   Number of public wire bits:      83
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1141
     $_AND_                        436
     $_DFFE_PP0P_                   16
     $_DFF_PP0_                     47
     $_MUX_                        178
     $_NOT_                        120
     $_OR_                         172
     $_XOR_                        172


yosys> opt_expr

3.108. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

yosys> opt_merge -nomux

3.109. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.110. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.111. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.112. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -sat

3.113. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.114. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

yosys> opt_expr

3.115. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
MAX OPT ITERATION = 1

yosys> abc -dff -keepff

3.116. Executing ABC pass (technology mapping using ABC).

3.116.1. Summary of detected clock domains:
  833 cells in clk=\clock_100Mhz, en={ }, arst=\reset, srst={ }
  308 cells in clk=\clock_100Mhz, en=\one_second_enable, arst=\reset, srst={ }

3.116.2. Extracting gate netlist of module `\top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock_100Mhz, asynchronously reset by \reset
Extracted 833 gates and 889 wires to a netlist network with 54 inputs and 135 outputs.

3.116.2.1. Executing ABC.

3.116.3. Extracting gate netlist of module `\top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock_100Mhz, enabled by \one_second_enable, asynchronously reset by \reset
Extracted 308 gates and 383 wires to a netlist network with 73 inputs and 69 outputs.

3.116.3.1. Executing ABC.

yosys> abc -dff -keepff

3.117. Executing ABC pass (technology mapping using ABC).

3.117.1. Summary of detected clock domains:
  339 cells in clk=\clock_100Mhz, en={ }, arst=\reset, srst={ }
  465 cells in clk=\clock_100Mhz, en=$abc$37894$one_second_enable, arst=\reset, srst={ }

3.117.2. Extracting gate netlist of module `\top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock_100Mhz, asynchronously reset by \reset
Extracted 339 gates and 394 wires to a netlist network with 55 inputs and 104 outputs.

3.117.2.1. Executing ABC.

3.117.3. Extracting gate netlist of module `\top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock_100Mhz, enabled by $abc$37894$one_second_enable, asynchronously reset by \reset
Extracted 465 gates and 513 wires to a netlist network with 47 inputs and 72 outputs.

3.117.3.1. Executing ABC.

yosys> abc -dff -keepff

3.118. Executing ABC pass (technology mapping using ABC).

3.118.1. Summary of detected clock domains:
  222 cells in clk=\clock_100Mhz, en={ }, arst=\reset, srst={ }
  400 cells in clk=\clock_100Mhz, en=$abc$38418$abc$37894$one_second_enable, arst=\reset, srst={ }

3.118.2. Extracting gate netlist of module `\top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock_100Mhz, asynchronously reset by \reset
Extracted 222 gates and 227 wires to a netlist network with 5 inputs and 65 outputs.

3.118.2.1. Executing ABC.

3.118.3. Extracting gate netlist of module `\top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock_100Mhz, enabled by $abc$38418$abc$37894$one_second_enable, asynchronously reset by \reset
Extracted 400 gates and 415 wires to a netlist network with 15 inputs and 29 outputs.

3.118.3.1. Executing ABC.

yosys> abc -dff -keepff

3.119. Executing ABC pass (technology mapping using ABC).

3.119.1. Summary of detected clock domains:
  214 cells in clk=\clock_100Mhz, en={ }, arst=\reset, srst={ }
  358 cells in clk=\clock_100Mhz, en=$abc$38929$abc$38418$abc$37894$one_second_enable, arst=\reset, srst={ }

3.119.2. Extracting gate netlist of module `\top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock_100Mhz, asynchronously reset by \reset
Extracted 214 gates and 219 wires to a netlist network with 5 inputs and 65 outputs.

3.119.2.1. Executing ABC.

3.119.3. Extracting gate netlist of module `\top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock_100Mhz, enabled by $abc$38929$abc$38418$abc$37894$one_second_enable, asynchronously reset by \reset
Extracted 358 gates and 373 wires to a netlist network with 15 inputs and 29 outputs.

3.119.3.1. Executing ABC.

yosys> opt_ffinv

3.120. Executing OPT_FFINV pass (push inverters through FFs).
Discovering LUTs.
Pushed 0 inverters.

yosys> opt_expr

3.121. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

yosys> opt_merge -nomux

3.122. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.123. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.124. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.125. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_share

3.126. Executing OPT_SHARE pass.

yosys> opt_dff -sat

3.127. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.128. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 2580 unused wires.
<suppressed ~2 debug messages>

yosys> opt_expr

3.129. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
MAX OPT ITERATION = 1

yosys> bmuxmap

3.130. Executing BMUXMAP pass.

yosys> demuxmap

3.131. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> abc -script /tmp/yosys_JM1CXs/abc_tmp_1.scr

3.132. Executing ABC pass (technology mapping using ABC).

3.132.1. Extracting gate netlist of module `\top' to `<abc-temp-dir>/input.blif'..
Extracted 512 gates and 575 wires to a netlist network with 63 inputs and 75 outputs.

3.132.1.1. Executing ABC.
DE:   #PIs =  63  #Luts =   205  Max Lvl =  19  Avg Lvl =   4.68  [   0.12 sec. at Pass 0]{firstMap}[1]
DE:   #PIs =  63  #Luts =   174  Max Lvl =  35  Avg Lvl =   6.27  [   2.22 sec. at Pass 1]{initMapFlow}[2]
DE:   #PIs =  63  #Luts =   170  Max Lvl =  33  Avg Lvl =   6.08  [   0.44 sec. at Pass 2]{map}[2]
DE:   #PIs =  63  #Luts =   170  Max Lvl =  33  Avg Lvl =   6.08  [   1.16 sec. at Pass 3]{postMap}[6]
DE:   #PIs =  63  #Luts =   170  Max Lvl =  32  Avg Lvl =   6.31  [   0.67 sec. at Pass 4]{map}[12]
DE:   #PIs =  63  #Luts =   169  Max Lvl =  32  Avg Lvl =   6.31  [   1.40 sec. at Pass 5]{postMap}[16]
DE:   #PIs =  63  #Luts =   169  Max Lvl =  31  Avg Lvl =   6.07  [   1.31 sec. at Pass 6]{map}[16]
DE:   #PIs =  63  #Luts =   169  Max Lvl =  30  Avg Lvl =   5.97  [   1.90 sec. at Pass 7]{postMap}[16]
DE:   #PIs =  63  #Luts =   167  Max Lvl =  30  Avg Lvl =   5.97  [   1.33 sec. at Pass 8]{map}[16]
DE:   #PIs =  63  #Luts =   166  Max Lvl =  28  Avg Lvl =   5.89  [   2.19 sec. at Pass 9]{postMap}[16]
DE:   #PIs =  63  #Luts =   165  Max Lvl =  32  Avg Lvl =   6.17  [   1.14 sec. at Pass 10]{map}[16]
DE:   #PIs =  63  #Luts =   165  Max Lvl =  27  Avg Lvl =   5.85  [   3.83 sec. at Pass 11]{postMap}[16]
DE:   #PIs =  63  #Luts =   165  Max Lvl =  27  Avg Lvl =   5.85  [   0.89 sec. at Pass 12]{map}[16]
DE:   #PIs =  63  #Luts =   165  Max Lvl =  27  Avg Lvl =   5.85  [   1.57 sec. at Pass 13]{postMap}[16]
DE:   #PIs =  63  #Luts =   165  Max Lvl =  27  Avg Lvl =   5.85  [   0.81 sec. at Pass 14]{map}[16]
DE:   #PIs =  63  #Luts =   164  Max Lvl =  29  Avg Lvl =   5.89  [   7.78 sec. at Pass 15]{pushMap}[16]
DE:   #PIs =  63  #Luts =   164  Max Lvl =  29  Avg Lvl =   5.89  [   2.14 sec. at Pass 16]{postMap}[16]
DE:   #PIs =  63  #Luts =   162  Max Lvl =  32  Avg Lvl =   6.08  [   1.22 sec. at Pass 17]{map}[16]
DE:   #PIs =  63  #Luts =   162  Max Lvl =  32  Avg Lvl =   6.08  [   1.67 sec. at Pass 18]{postMap}[16]
DE:   #PIs =  63  #Luts =   162  Max Lvl =  32  Avg Lvl =   6.08  [   0.71 sec. at Pass 19]{map}[16]
DE:   #PIs =  63  #Luts =   162  Max Lvl =  27  Avg Lvl =   5.71  [   1.84 sec. at Pass 20]{postMap}[16]
DE:   #PIs =  63  #Luts =   162  Max Lvl =  26  Avg Lvl =   5.39  [   0.67 sec. at Pass 21]{map}[16]
DE:   #PIs =  63  #Luts =   162  Max Lvl =  26  Avg Lvl =   5.39  [   2.36 sec. at Pass 22]{postMap}[16]
DE:   #PIs =  63  #Luts =   162  Max Lvl =  26  Avg Lvl =   5.39  [   0.76 sec. at Pass 23]{map}[16]
DE:   #PIs =  63  #Luts =   162  Max Lvl =  26  Avg Lvl =   5.39  [   1.70 sec. at Pass 24]{postMap}[16]
DE:   #PIs =  63  #Luts =   162  Max Lvl =  26  Avg Lvl =   5.39  [   9.72 sec. at Pass 25]{pushMap}[16]
DE:   #PIs =  63  #Luts =   162  Max Lvl =  26  Avg Lvl =   5.39  [   0.90 sec. at Pass 26]{finalMap}[16]

yosys> opt_expr

3.133. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

yosys> opt_merge -nomux

3.134. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.135. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.136. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.137. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_share

3.138. Executing OPT_SHARE pass.

yosys> opt_dff -nodffe

3.139. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.140. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 572 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.141. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
MAX OPT ITERATION = 1

yosys> opt_ffinv

3.142. Executing OPT_FFINV pass (push inverters through FFs).
Discovering LUTs.
Pushed 0 inverters.

yosys> stat

3.143. Printing statistics.

=== top ===

   Number of wires:                348
   Number of wire bits:            418
   Number of public wires:           9
   Number of public wire bits:      79
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                225
     $_DFFE_PP0P_                   16
     $_DFF_PP0_                     47
     $lut                          162


yosys> dfflegalize -cell $_DFF_?_ 0 -cell $_DFFE_??_ 0 -cell $_DFF_???_ 0 -cell $_DFFE_????_ 0 -cell $_SDFF_???_ 0 -cell $_SDFFE_????_ 0 -cell $_DLATCH_?_ 0 -cell $_DLATCH_???_ 0

3.144. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

yosys> stat

3.145. Printing statistics.

=== top ===

   Number of wires:                348
   Number of wire bits:            418
   Number of public wires:           9
   Number of public wire bits:      79
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                225
     $_DFFE_PP0P_                   16
     $_DFF_PP0_                     47
     $lut                          162


yosys> techmap -map +/techmap.v -map +/rapidsilicon/genesis2/ffs_map.v

3.146. Executing TECHMAP pass (map to technology primitives).

3.146.1. Executing Verilog-2005 frontend: /nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.146.2. Executing Verilog-2005 frontend: /nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/ffs_map.v
Parsing Verilog input from `/nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/ffs_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP0N_'.
Generating RTLIL representation for module `\$_DFFE_PN0P_'.
Generating RTLIL representation for module `\$_DFFE_PN0N_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP1N_'.
Generating RTLIL representation for module `\$_DFFE_PN1P_'.
Generating RTLIL representation for module `\$_DFFE_PN1N_'.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP0N_'.
Generating RTLIL representation for module `\$_DFFE_NN0P_'.
Generating RTLIL representation for module `\$_DFFE_NN0N_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_NP1N_'.
Generating RTLIL representation for module `\$_DFFE_NN1P_'.
Generating RTLIL representation for module `\$_DFFE_NN1N_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PN0_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NN0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFF_PN1_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_NN1_'.
Generating RTLIL representation for module `\$_SDFFE_PP0P_'.
Generating RTLIL representation for module `\$_SDFFE_PP0N_'.
Generating RTLIL representation for module `\$_SDFFE_PN0P_'.
Generating RTLIL representation for module `\$_SDFFE_PN0N_'.
Generating RTLIL representation for module `\$_SDFFE_PP1P_'.
Generating RTLIL representation for module `\$_SDFFE_PP1N_'.
Generating RTLIL representation for module `\$_SDFFE_PN1P_'.
Generating RTLIL representation for module `\$_SDFFE_PN1N_'.
Generating RTLIL representation for module `\$_SDFFE_NP0P_'.
Generating RTLIL representation for module `\$_SDFFE_NP0N_'.
Generating RTLIL representation for module `\$_SDFFE_NN0P_'.
Generating RTLIL representation for module `\$_SDFFE_NN0N_'.
Generating RTLIL representation for module `\$_SDFFE_NP1P_'.
Generating RTLIL representation for module `\$_SDFFE_NP1N_'.
Generating RTLIL representation for module `\$_SDFFE_NN1P_'.
Generating RTLIL representation for module `\$_SDFFE_NN1N_'.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCH_PP0_'.
Generating RTLIL representation for module `\$_DLATCH_NP0_'.
Generating RTLIL representation for module `\$_DLATCH_PN0_'.
Generating RTLIL representation for module `\$_DLATCH_NN0_'.
Generating RTLIL representation for module `\$_DLATCH_PP1_'.
Generating RTLIL representation for module `\$_DLATCH_NP1_'.
Generating RTLIL representation for module `\$_DLATCH_PN1_'.
Generating RTLIL representation for module `\$_DLATCH_NN1_'.
Successfully finished Verilog frontend.

3.146.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $lut.
Using template \$_DFF_PP0_ for cells of type $_DFF_PP0_.
Using template \$_DFFE_PP0P_ for cells of type $_DFFE_PP0P_.
No more expansions possible.
<suppressed ~360 debug messages>

yosys> opt_expr -mux_undef

3.147. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~3388 debug messages>

yosys> simplemap

3.148. Executing SIMPLEMAP pass (map simple cells to gate primitives).

yosys> opt_expr

3.149. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

yosys> opt_merge

3.150. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~1239 debug messages>
Removed a total of 413 cells.

yosys> opt_dff -nodffe -nosdff

3.151. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.152. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 590 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.153. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~29 debug messages>

yosys> opt_merge -nomux

3.154. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.155. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.156. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.157. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_share

3.158. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.159. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.160. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 6 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.161. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
MAX OPT ITERATION = 1

yosys> abc -script /tmp/yosys_JM1CXs/abc_tmp_2.scr

3.162. Executing ABC pass (technology mapping using ABC).

3.162.1. Extracting gate netlist of module `\top' to `<abc-temp-dir>/input.blif'..
Extracted 868 gates and 933 wires to a netlist network with 63 inputs and 75 outputs.

3.162.1.1. Executing ABC.
DE:   #PIs =  63  #Luts =   172  Max Lvl =  22  Avg Lvl =   4.79  [   0.12 sec. at Pass 0]{firstMap}[1]
DE:   #PIs =  63  #Luts =   167  Max Lvl =  23  Avg Lvl =   5.03  [   1.46 sec. at Pass 1]{initMapFlow}[2]
DE:   #PIs =  63  #Luts =   163  Max Lvl =  26  Avg Lvl =   5.13  [   0.35 sec. at Pass 2]{map}[2]
DE:   #PIs =  63  #Luts =   162  Max Lvl =  25  Avg Lvl =   5.00  [   0.96 sec. at Pass 3]{postMap}[6]
DE:   #PIs =  63  #Luts =   162  Max Lvl =  25  Avg Lvl =   5.00  [   1.05 sec. at Pass 4]{map}[12]
DE:   #PIs =  63  #Luts =   162  Max Lvl =  25  Avg Lvl =   5.00  [   1.78 sec. at Pass 5]{postMap}[16]
DE:   #PIs =  63  #Luts =   162  Max Lvl =  25  Avg Lvl =   5.00  [   0.58 sec. at Pass 6]{map}[16]
DE:   #PIs =  63  #Luts =   159  Max Lvl =  28  Avg Lvl =   5.21  [   7.42 sec. at Pass 7]{pushMap}[16]
DE:   #PIs =  63  #Luts =   157  Max Lvl =  29  Avg Lvl =   5.31  [   1.58 sec. at Pass 8]{postMap}[16]
DE:   #PIs =  63  #Luts =   157  Max Lvl =  29  Avg Lvl =   5.31  [   0.51 sec. at Pass 9]{map}[16]
DE:   #PIs =  63  #Luts =   157  Max Lvl =  28  Avg Lvl =   5.28  [   1.60 sec. at Pass 10]{postMap}[16]
DE:   #PIs =  63  #Luts =   157  Max Lvl =  28  Avg Lvl =   5.28  [   0.48 sec. at Pass 11]{map}[16]
DE:   #PIs =  63  #Luts =   157  Max Lvl =  28  Avg Lvl =   5.28  [   1.22 sec. at Pass 12]{postMap}[16]
DE:   #PIs =  63  #Luts =   157  Max Lvl =  28  Avg Lvl =   5.28  [   0.53 sec. at Pass 13]{map}[16]
DE:   #PIs =  63  #Luts =   157  Max Lvl =  28  Avg Lvl =   5.28  [   5.40 sec. at Pass 14]{pushMap}[16]
DE:   #PIs =  63  #Luts =   157  Max Lvl =  28  Avg Lvl =   5.28  [   0.18 sec. at Pass 15]{finalMap}[16]

yosys> opt_expr

3.163. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

yosys> opt_merge -nomux

3.164. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.165. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.166. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.167. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_share

3.168. Executing OPT_SHARE pass.

yosys> opt_dff -nodffe

3.169. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.170. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 606 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.171. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
MAX OPT ITERATION = 1

yosys> hierarchy -check

3.172. Executing HIERARCHY pass (managing design hierarchy).

3.172.1. Analyzing design hierarchy..
Top module:  \top

3.172.2. Analyzing design hierarchy..
Top module:  \top
Removed 0 unused modules.

yosys> stat

3.173. Printing statistics.

=== top ===

   Number of wires:                343
   Number of wire bits:            413
   Number of public wires:           9
   Number of public wire bits:      79
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                220
     $lut                          157
     dffr                           47
     dffre                          16


yosys> opt_clean -purge

3.174. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

yosys> write_verilog -noattr -nohex synthesized.v

3.175. Executing Verilog backend.
Dumping module `\top'.

Warnings: 6 unique messages, 6 total
End of script. Logfile hash: 87a4ae2518, CPU: user 11.26s system 0.42s, MEM: 368.00 MB peak
Yosys 0.18+10 (git sha1 92b23013e, gcc 11.2.0 -fPIC -Os)
Time spent: 97% 6x abc (529 sec), 0% 8x techmap (3 sec), ...
real 96.23
user 498.48
sys 41.99
