
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys-Verific 0.0.64
 Yosys 0.18+10 (git sha1 c98b0e94e, gcc 9.4.0 -fPIC -Os)


-- Executing script file `yosys.ys' --
echo on

yosys> plugin -i synth-rs

yosys> read -verific

yosys> read -incdir .

yosys> verific -vlog-incdir .

1. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific May22_SW_Release, released at Wed Jun  1 00:39:28 2022.

yosys> verilog_defaults -add -I.

yosys> read -vlog2k cfg_crc.v

yosys> verific -vlog2k cfg_crc.v

2. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific May22_SW_Release, released at Wed Jun  1 00:39:28 2022.
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'cfg_crc.v'

yosys> synth_rs -top cfg_crc -tech genesis -goal area -de -verilog synthesized.v

3. Executing synth_rs pass: v0.4.65

yosys> read_verilog -lib -specify -nomem2reg +/rapidsilicon/common/cells_sim.v +/rapidsilicon/genesis/cells_sim.v +/rapidsilicon/genesis/dsp_sim.v

3.1. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\inv'.
Generating RTLIL representation for module `\buff'.
Generating RTLIL representation for module `\logic_0'.
Generating RTLIL representation for module `\logic_1'.
Generating RTLIL representation for module `\gclkbuff'.
Successfully finished Verilog frontend.

3.2. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/cells_sim.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\dffsre'.
Generating RTLIL representation for module `\dffnsre'.
Generating RTLIL representation for module `\latchsre'.
Generating RTLIL representation for module `\latchnsre'.
Generating RTLIL representation for module `\io_scff'.
Generating RTLIL representation for module `\scff'.
Generating RTLIL representation for module `\sh_dff'.
Generating RTLIL representation for module `\adder_carry'.
Generating RTLIL representation for module `\sdffr'.
Generating RTLIL representation for module `\sdffs'.
Generating RTLIL representation for module `\TDP_BRAM18'.
Generating RTLIL representation for module `\TDP36K'.
Successfully finished Verilog frontend.

3.3. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/dsp_sim.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/dsp_sim.v' to AST representation.
Generating RTLIL representation for module `\RS_DSP1'.
Generating RTLIL representation for module `\RS_DSP2'.
Generating RTLIL representation for module `\RS_DSP2_MULT'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGIN_REGOUT'.
Generating RTLIL representation for module `\dsp_t1_20x18x64_cfg_ports'.
Generating RTLIL representation for module `\dsp_t1_10x9x32_cfg_ports'.
Generating RTLIL representation for module `\dsp_t1_sim_cfg_ports'.
Generating RTLIL representation for module `\RS_DSP3'.
Generating RTLIL representation for module `\RS_DSP3_MULT'.
Generating RTLIL representation for module `\RS_DSP3_MULT_REGIN'.
Generating RTLIL representation for module `\RS_DSP3_MULT_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULT_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULTADD'.
Generating RTLIL representation for module `\RS_DSP3_MULTADD_REGIN'.
Generating RTLIL representation for module `\RS_DSP3_MULTADD_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULTADD_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULTACC'.
Generating RTLIL representation for module `\RS_DSP3_MULTACC_REGIN'.
Generating RTLIL representation for module `\RS_DSP3_MULTACC_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULTACC_REGIN_REGOUT'.
Generating RTLIL representation for module `\dsp_t1_20x18x64_cfg_params'.
Generating RTLIL representation for module `\dsp_t1_10x9x32_cfg_params'.
Generating RTLIL representation for module `\dsp_t1_sim_cfg_params'.
Successfully finished Verilog frontend.

yosys> hierarchy -check -top cfg_crc

3.4. Executing HIERARCHY pass (managing design hierarchy).
VERIFIC-INFO [VERI-1018] cfg_crc.v:1: compiling module 'cfg_crc'
Importing module cfg_crc.

3.4.1. Analyzing design hierarchy..
Top module:  \cfg_crc

3.4.2. Analyzing design hierarchy..
Top module:  \cfg_crc
Removed 0 unused modules.

yosys> proc

3.5. Executing PROC pass (convert processes to netlists).

yosys> proc_clean

3.5.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> proc_rmdead

3.5.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

yosys> proc_prune

3.5.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

yosys> proc_init

3.5.4. Executing PROC_INIT pass (extract init attributes).

yosys> proc_arst

3.5.5. Executing PROC_ARST pass (detect async resets in processes).

yosys> proc_rom

3.5.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

yosys> proc_mux

3.5.7. Executing PROC_MUX pass (convert decision trees to multiplexers).

yosys> proc_dlatch

3.5.8. Executing PROC_DLATCH pass (convert process syncs to latches).

yosys> proc_dff

3.5.9. Executing PROC_DFF pass (convert process syncs to FFs).

yosys> proc_memwr

3.5.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

yosys> proc_clean

3.5.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> opt_expr -keepdc

3.5.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module cfg_crc.
<suppressed ~1 debug messages>

yosys> demuxmap

3.6. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> flatten

3.7. Executing FLATTEN pass (flatten design).

yosys> demuxmap

3.8. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> tribuf -logic -formal

3.9. Executing TRIBUF pass.

yosys> deminout

3.10. Executing DEMINOUT pass (demote inout ports to input or output).

yosys> opt_expr

3.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module cfg_crc.

yosys> opt_clean

3.12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cfg_crc..
Removed 0 unused cells and 5 unused wires.
<suppressed ~4 debug messages>

yosys> check

3.13. Executing CHECK pass (checking for obvious problems).
Checking module cfg_crc...
Found and reported 0 problems.

yosys> opt_expr

3.14. Executing OPT_EXPR pass (perform const folding).
Optimizing module cfg_crc.

yosys> opt_merge -nomux

3.15. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cfg_crc'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.16. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \cfg_crc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

yosys> opt_reduce

3.17. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \cfg_crc.
Performed a total of 0 changes.

yosys> opt_merge

3.18. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cfg_crc'.
Removed a total of 0 cells.

yosys> opt_share

3.19. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.20. Executing OPT_DFF pass (perform DFF optimizations).
Changing const-value async load to async reset on $verific$dat_o_reg$cfg_crc.v:30$15 ($aldff) from module cfg_crc.

yosys> opt_clean

3.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cfg_crc..

yosys> opt_expr

3.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module cfg_crc.
MAX OPT ITERATION = 1

yosys> fsm -encoding binary

3.23. Executing FSM pass (extract and optimize FSM).

yosys> fsm_detect

3.23.1. Executing FSM_DETECT pass (finding FSMs in design).

yosys> fsm_extract

3.23.2. Executing FSM_EXTRACT pass (extracting FSM from design).

yosys> fsm_opt

3.23.3. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> opt_clean

3.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cfg_crc..

yosys> fsm_opt

3.23.5. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> fsm_recode -encoding binary

3.23.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

yosys> fsm_info

3.23.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

yosys> fsm_map

3.23.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

yosys> opt_expr

3.24. Executing OPT_EXPR pass (perform const folding).
Optimizing module cfg_crc.

yosys> opt_merge -nomux

3.25. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cfg_crc'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.26. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \cfg_crc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

yosys> opt_reduce

3.27. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \cfg_crc.
Performed a total of 0 changes.

yosys> opt_merge

3.28. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cfg_crc'.
Removed a total of 0 cells.

yosys> opt_share

3.29. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -sat

3.30. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $verific$dat_o_reg$cfg_crc.v:30$15 ($adff) from module cfg_crc (D = $verific$n64$6, Q = \dat_o).

yosys> opt_clean

3.31. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cfg_crc..

yosys> opt_expr

3.32. Executing OPT_EXPR pass (perform const folding).
Optimizing module cfg_crc.
<suppressed ~1 debug messages>

yosys> opt_muxtree

3.33. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \cfg_crc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

yosys> opt_reduce

3.34. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \cfg_crc.
Performed a total of 0 changes.

yosys> opt_merge

3.35. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cfg_crc'.
Removed a total of 0 cells.

yosys> opt_share

3.36. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -sat

3.37. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.38. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cfg_crc..

yosys> opt_expr

3.39. Executing OPT_EXPR pass (perform const folding).
Optimizing module cfg_crc.
MAX OPT ITERATION = 2

yosys> wreduce -keepdc

3.40. Executing WREDUCE pass (reducing word size of cells).

yosys> peepopt

3.41. Executing PEEPOPT pass (run peephole optimizers).

yosys> opt_clean

3.42. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cfg_crc..

yosys> demuxmap

3.43. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> stat

3.44. Printing statistics.

=== cfg_crc ===

   Number of wires:                 11
   Number of wire bits:             27
   Number of public wires:           7
   Number of public wire bits:      11
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  6
     $adffe                          1
     $mux                            2
     $reduce_bool                    1
     $xor                            2


yosys> wreduce t:$mul

3.45. Executing WREDUCE pass (reducing word size of cells).

yosys> rs_dsp_macc

3.46. Executing RS_DSP_MACC pass.

yosys> techmap -map +/mul2dsp.v -D DSP_A_MAXWIDTH=20 -D DSP_B_MAXWIDTH=18 -D DSP_A_MINWIDTH=11 -D DSP_B_MINWIDTH=10 -D DSP_NAME=$__RS_MUL20X18

3.47. Executing TECHMAP pass (map to technology primitives).

3.47.1. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/mul2dsp.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/mul2dsp.v' to AST representation.
Generating RTLIL representation for module `\_80_mul'.
Generating RTLIL representation for module `\_90_soft_mul'.
Successfully finished Verilog frontend.

3.47.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

yosys> chtype -set $mul t:$__soft_mul

yosys> techmap -map +/mul2dsp.v -D DSP_A_MAXWIDTH=10 -D DSP_B_MAXWIDTH=9 -D DSP_A_MINWIDTH=4 -D DSP_B_MINWIDTH=4 -D DSP_NAME=$__RS_MUL10X9

3.48. Executing TECHMAP pass (map to technology primitives).

3.48.1. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/mul2dsp.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/mul2dsp.v' to AST representation.
Generating RTLIL representation for module `\_80_mul'.
Generating RTLIL representation for module `\_90_soft_mul'.
Successfully finished Verilog frontend.

3.48.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

yosys> chtype -set $mul t:$__soft_mul

yosys> techmap -map +/rapidsilicon/genesis/dsp_map.v -D USE_DSP_CFG_PARAMS=0

3.49. Executing TECHMAP pass (map to technology primitives).

3.49.1. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/dsp_map.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/dsp_map.v' to AST representation.
Generating RTLIL representation for module `\$__RS_MUL20X18'.
Generating RTLIL representation for module `\$__RS_MUL10X9'.
Successfully finished Verilog frontend.

3.49.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

yosys> rs_dsp_simd

3.50. Executing RS_DSP_SIMD pass.

yosys> techmap -map +/rapidsilicon/genesis/dsp_final_map.v

3.51. Executing TECHMAP pass (map to technology primitives).

3.51.1. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/dsp_final_map.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/dsp_final_map.v' to AST representation.
Generating RTLIL representation for module `\dsp_t1_20x18x64_cfg_ports'.
Generating RTLIL representation for module `\dsp_t1_10x9x32_cfg_ports'.
Generating RTLIL representation for module `\dsp_t1_20x18x64_cfg_params'.
Generating RTLIL representation for module `\dsp_t1_10x9x32_cfg_params'.
Successfully finished Verilog frontend.

3.51.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~6 debug messages>

yosys> rs_dsp_io_regs

3.52. Executing RS_DSP_IO_REGS pass.

yosys> alumacc

3.53. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module cfg_crc:
  created 0 $alu and 0 $macc cells.

yosys> opt_expr

3.54. Executing OPT_EXPR pass (perform const folding).
Optimizing module cfg_crc.

yosys> opt_merge -nomux

3.55. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cfg_crc'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.56. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \cfg_crc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

yosys> opt_reduce

3.57. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \cfg_crc.
Performed a total of 0 changes.

yosys> opt_merge

3.58. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cfg_crc'.
Removed a total of 0 cells.

yosys> opt_share

3.59. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.60. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.61. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cfg_crc..

yosys> opt_expr

3.62. Executing OPT_EXPR pass (perform const folding).
Optimizing module cfg_crc.
MAX OPT ITERATION = 1

yosys> stat

3.63. Printing statistics.

=== cfg_crc ===

   Number of wires:                 11
   Number of wire bits:             27
   Number of public wires:           7
   Number of public wire bits:      11
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  6
     $adffe                          1
     $mux                            2
     $reduce_bool                    1
     $xor                            2


yosys> memory -nomap

3.64. Executing MEMORY pass.

yosys> opt_mem

3.64.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

yosys> opt_mem_priority

3.64.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

yosys> opt_mem_feedback

3.64.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

yosys> memory_bmux2rom

3.64.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

yosys> memory_dff

3.64.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

yosys> opt_clean

3.64.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cfg_crc..

yosys> memory_share

3.64.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

yosys> opt_mem_widen

3.64.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

yosys> opt_clean

3.64.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cfg_crc..

yosys> memory_collect

3.64.10. Executing MEMORY_COLLECT pass (generating $mem cells).

yosys> stat

3.65. Printing statistics.

=== cfg_crc ===

   Number of wires:                 11
   Number of wire bits:             27
   Number of public wires:           7
   Number of public wire bits:      11
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  6
     $adffe                          1
     $mux                            2
     $reduce_bool                    1
     $xor                            2


yosys> muxpack

3.66. Executing MUXPACK pass ($mux cell cascades to $pmux).
Converted 0 (p)mux cells into 0 pmux cells.
<suppressed ~2 debug messages>

yosys> opt_clean

3.67. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cfg_crc..

yosys> memory_bram -rules +/rapidsilicon/genesis/brams.txt

3.68. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).

yosys> techmap -map +/rapidsilicon/genesis/brams_map.v

3.69. Executing TECHMAP pass (map to technology primitives).

3.69.1. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/brams_map.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__RS_FACTOR_BRAM36_TDP'.
Generating RTLIL representation for module `\$__RS_FACTOR_BRAM18_TDP'.
/nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/brams_map.v:236: Warning: Range [2:0] select out of bounds on signal `\DOP': Setting 1 MSB bits to undef.
Generating RTLIL representation for module `\$__RS_FACTOR_BRAM36_SDP'.
Successfully finished Verilog frontend.

3.69.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~5 debug messages>

yosys> pmuxtree

3.70. Executing PMUXTREE pass.

yosys> muxpack

3.71. Executing MUXPACK pass ($mux cell cascades to $pmux).
Converted 0 (p)mux cells into 0 pmux cells.
<suppressed ~2 debug messages>

yosys> memory_map

3.72. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

yosys> stat

3.73. Printing statistics.

=== cfg_crc ===

   Number of wires:                 11
   Number of wire bits:             27
   Number of public wires:           7
   Number of public wire bits:      11
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  6
     $adffe                          1
     $mux                            2
     $reduce_bool                    1
     $xor                            2


yosys> techmap -map +/techmap.v -map +/rapidsilicon/genesis/arith_map.v

3.74. Executing TECHMAP pass (map to technology primitives).

3.74.1. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.74.2. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/arith_map.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_rs_alu'.
Successfully finished Verilog frontend.

3.74.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $adffe.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $mux.
No more expansions possible.
<suppressed ~77 debug messages>

yosys> stat

3.75. Printing statistics.

=== cfg_crc ===

   Number of wires:                 12
   Number of wire bits:             28
   Number of public wires:           7
   Number of public wire bits:      11
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 18
     $_DFFE_PP0P_                    5
     $_MUX_                         10
     $_OR_                           1
     $_XOR_                          2


yosys> opt_expr

3.76. Executing OPT_EXPR pass (perform const folding).
Optimizing module cfg_crc.

yosys> opt_merge -nomux

3.77. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cfg_crc'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.78. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \cfg_crc..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.79. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \cfg_crc.
Performed a total of 0 changes.

yosys> opt_merge

3.80. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cfg_crc'.
Removed a total of 0 cells.

yosys> opt_share

3.81. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.82. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.83. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cfg_crc..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.84. Executing OPT_EXPR pass (perform const folding).
Optimizing module cfg_crc.
MAX OPT ITERATION = 1

yosys> opt_expr -full

3.85. Executing OPT_EXPR pass (perform const folding).
Optimizing module cfg_crc.
<suppressed ~5 debug messages>

yosys> techmap -map +/techmap.v

3.86. Executing TECHMAP pass (map to technology primitives).

3.86.1. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.86.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~71 debug messages>

yosys> opt_expr

3.87. Executing OPT_EXPR pass (perform const folding).
Optimizing module cfg_crc.

yosys> opt_merge -nomux

3.88. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cfg_crc'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.89. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \cfg_crc..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.90. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \cfg_crc.
Performed a total of 0 changes.

yosys> opt_merge

3.91. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cfg_crc'.
Removed a total of 0 cells.

yosys> opt_dff -nosdff -nodffe -sat

3.92. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.93. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cfg_crc..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.94. Executing OPT_EXPR pass (perform const folding).
Optimizing module cfg_crc.
MAX OPT ITERATION = 1

yosys> abc -dff

3.95. Executing ABC pass (technology mapping using ABC).

3.95.1. Summary of detected clock domains:
  13 cells in clk=\clk, en=$auto$opt_dff.cc:194:make_patterns_logic$18, arst=\rst, srst={ }

3.95.2. Extracting gate netlist of module `\cfg_crc' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:194:make_patterns_logic$18, asynchronously reset by \rst
Extracted 13 gates and 17 wires to a netlist network with 3 inputs and 6 outputs.

3.95.2.1. Executing ABC.

yosys> abc -dff

3.96. Executing ABC pass (technology mapping using ABC).

3.96.1. Summary of detected clock domains:
  13 cells in clk=\clk, en=$abc$212$auto$opt_dff.cc:194:make_patterns_logic$18, arst=\rst, srst={ }

3.96.2. Extracting gate netlist of module `\cfg_crc' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$212$auto$opt_dff.cc:194:make_patterns_logic$18, asynchronously reset by \rst
Extracted 13 gates and 16 wires to a netlist network with 3 inputs and 6 outputs.

3.96.2.1. Executing ABC.

yosys> abc -dff

3.97. Executing ABC pass (technology mapping using ABC).

3.97.1. Summary of detected clock domains:
  13 cells in clk=\clk, en=$abc$231$abc$212$auto$opt_dff.cc:194:make_patterns_logic$18, arst=\rst, srst={ }

3.97.2. Extracting gate netlist of module `\cfg_crc' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$231$abc$212$auto$opt_dff.cc:194:make_patterns_logic$18, asynchronously reset by \rst
Extracted 13 gates and 16 wires to a netlist network with 3 inputs and 6 outputs.

3.97.2.1. Executing ABC.

yosys> abc -dff

3.98. Executing ABC pass (technology mapping using ABC).

3.98.1. Summary of detected clock domains:
  13 cells in clk=\clk, en=$abc$250$abc$231$abc$212$auto$opt_dff.cc:194:make_patterns_logic$18, arst=\rst, srst={ }

3.98.2. Extracting gate netlist of module `\cfg_crc' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$250$abc$231$abc$212$auto$opt_dff.cc:194:make_patterns_logic$18, asynchronously reset by \rst
Extracted 13 gates and 16 wires to a netlist network with 3 inputs and 6 outputs.

3.98.2.1. Executing ABC.

yosys> opt_ffinv

3.99. Executing OPT_FFINV pass (push inverters through FFs).
Discovering LUTs.
Pushed 0 inverters.

yosys> opt_expr

3.100. Executing OPT_EXPR pass (perform const folding).
Optimizing module cfg_crc.

yosys> opt_merge -nomux

3.101. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cfg_crc'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.102. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \cfg_crc..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.103. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \cfg_crc.
Performed a total of 0 changes.

yosys> opt_merge

3.104. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cfg_crc'.
Removed a total of 0 cells.

yosys> opt_share

3.105. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -sat

3.106. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.107. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cfg_crc..
Removed 0 unused cells and 80 unused wires.
<suppressed ~2 debug messages>

yosys> opt_expr

3.108. Executing OPT_EXPR pass (perform const folding).
Optimizing module cfg_crc.
MAX OPT ITERATION = 1

yosys> bmuxmap

3.109. Executing BMUXMAP pass.

yosys> demuxmap

3.110. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> abc -script /tmp/yosys_NVWa4X/abc_tmp_1.scr

3.111. Executing ABC pass (technology mapping using ABC).

3.111.1. Extracting gate netlist of module `\cfg_crc' to `<abc-temp-dir>/input.blif'..
Extracted 8 gates and 16 wires to a netlist network with 8 inputs and 6 outputs.

3.111.1.1. Executing ABC.
DE:   #PIs =   8  #Luts =     6  Max Lvl =   1  Avg Lvl =   1.00  [   0.02 sec. at Pass 0]
DE:   #PIs =   8  #Luts =     6  Max Lvl =   1  Avg Lvl =   1.00  [   0.13 sec. at Pass 1]
DE:   #PIs =   8  #Luts =     6  Max Lvl =   1  Avg Lvl =   1.00  [   0.11 sec. at Pass 2]
DE:   #PIs =   8  #Luts =     6  Max Lvl =   1  Avg Lvl =   1.00  [   0.12 sec. at Pass 3]
DE:   #PIs =   8  #Luts =     6  Max Lvl =   1  Avg Lvl =   1.00  [   0.08 sec. at Pass 4]
DE:   #PIs =   8  #Luts =     6  Max Lvl =   1  Avg Lvl =   1.00  [   0.38 sec. at Pass 5]
DE:   #PIs =   8  #Luts =     6  Max Lvl =   1  Avg Lvl =   1.00  [   0.58 sec. at Pass 6]
DE:   #PIs =   8  #Luts =     6  Max Lvl =   1  Avg Lvl =   1.00  [   0.38 sec. at Pass 7]

yosys> opt_expr

3.112. Executing OPT_EXPR pass (perform const folding).
Optimizing module cfg_crc.

yosys> opt_merge -nomux

3.113. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cfg_crc'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.114. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \cfg_crc..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.115. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \cfg_crc.
Performed a total of 0 changes.

yosys> opt_merge

3.116. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cfg_crc'.
Removed a total of 0 cells.

yosys> opt_share

3.117. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.118. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.119. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cfg_crc..
Removed 0 unused cells and 16 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.120. Executing OPT_EXPR pass (perform const folding).
Optimizing module cfg_crc.
MAX OPT ITERATION = 1

yosys> opt_ffinv

3.121. Executing OPT_FFINV pass (push inverters through FFs).
Discovering LUTs.
Pushed 0 inverters.

yosys> stat

3.122. Printing statistics.

=== cfg_crc ===

   Number of wires:                 12
   Number of wire bits:             16
   Number of public wires:           6
   Number of public wire bits:      10
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 11
     $_DFFE_PP0P_                    5
     $lut                            6


yosys> shregmap -minlen 8 -maxlen 20

3.123. Executing SHREGMAP pass (map shift registers).
Converted 0 dff cells into 0 shift registers.

yosys> dfflegalize -cell $_DFF_?_ 0 -cell $_DFF_???_ 0 -cell $_DFFE_????_ 0 -cell $_DFFSR_???_ 0 -cell $_DFFSRE_????_ 0 -cell $_DLATCHSR_PPP_ 0

3.124. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

yosys> stat

3.125. Printing statistics.

=== cfg_crc ===

   Number of wires:                 12
   Number of wire bits:             16
   Number of public wires:           6
   Number of public wire bits:      10
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 11
     $_DFFE_PP0P_                    5
     $lut                            6


yosys> techmap -map +/techmap.v -map +/rapidsilicon/genesis/ffs_map.v

3.126. Executing TECHMAP pass (map to technology primitives).

3.126.1. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.126.2. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/ffs_map.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/ffs_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP0N_'.
Generating RTLIL representation for module `\$_DFFE_PN0P_'.
Generating RTLIL representation for module `\$_DFFE_PN0N_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP1N_'.
Generating RTLIL representation for module `\$_DFFE_PN1P_'.
Generating RTLIL representation for module `\$_DFFE_PN1N_'.
Generating RTLIL representation for module `\$_DFFSR_PPP_'.
Generating RTLIL representation for module `\$_DFFSR_PNP_'.
Generating RTLIL representation for module `\$_DFFSR_PNN_'.
Generating RTLIL representation for module `\$_DFFSR_PPN_'.
Generating RTLIL representation for module `\$_DFFSR_NPP_'.
Generating RTLIL representation for module `\$_DFFSR_NNP_'.
Generating RTLIL representation for module `\$_DFFSR_NNN_'.
Generating RTLIL representation for module `\$_DFFSR_NPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PNPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPNP_'.
Generating RTLIL representation for module `\$_DFFSRE_PNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PNPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PPNN_'.
Generating RTLIL representation for module `\$_DFFSRE_PNNN_'.
Generating RTLIL representation for module `\$_DLATCHSR_PPP_'.
Generating RTLIL representation for module `\$_DLATCHSR_NPP_'.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP0N_'.
Generating RTLIL representation for module `\$_DFFE_NN0P_'.
Generating RTLIL representation for module `\$_DFFE_NN0N_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_NP1N_'.
Generating RTLIL representation for module `\$_DFFE_NN1P_'.
Generating RTLIL representation for module `\$_DFFE_NN1N_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNPP_'.
Generating RTLIL representation for module `\$_DFFSRE_NPNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPN_'.
Generating RTLIL representation for module `\$_DFFSRE_NNPN_'.
Generating RTLIL representation for module `\$_DFFSRE_NPNN_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNN_'.
Generating RTLIL representation for module `\$__SHREG_DFF_P_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PN0_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NN0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFF_PN1_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_NN1_'.
Successfully finished Verilog frontend.

3.126.3. Continuing TECHMAP pass.
Using template \$_DFFE_PP0P_ for cells of type $_DFFE_PP0P_.
Using extmapper simplemap for cells of type $lut.
Using extmapper simplemap for cells of type $logic_not.
No more expansions possible.
<suppressed ~152 debug messages>

yosys> opt_expr -mux_undef

3.127. Executing OPT_EXPR pass (perform const folding).
Optimizing module cfg_crc.
<suppressed ~11 debug messages>

yosys> simplemap

3.128. Executing SIMPLEMAP pass (map simple cells to gate primitives).

yosys> opt_expr

3.129. Executing OPT_EXPR pass (perform const folding).
Optimizing module cfg_crc.

yosys> opt_merge

3.130. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cfg_crc'.
<suppressed ~51 debug messages>
Removed a total of 17 cells.

yosys> opt_dff -nodffe -nosdff

3.131. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.132. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cfg_crc..
Removed 0 unused cells and 41 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.133. Executing OPT_EXPR pass (perform const folding).
Optimizing module cfg_crc.

yosys> opt_merge -nomux

3.134. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cfg_crc'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.135. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \cfg_crc..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.136. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \cfg_crc.
Performed a total of 0 changes.

yosys> opt_merge

3.137. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cfg_crc'.
Removed a total of 0 cells.

yosys> opt_share

3.138. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.139. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.140. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cfg_crc..

yosys> opt_expr

3.141. Executing OPT_EXPR pass (perform const folding).
Optimizing module cfg_crc.
MAX OPT ITERATION = 1

yosys> abc -script /tmp/yosys_NVWa4X/abc_tmp_2.scr

3.142. Executing ABC pass (technology mapping using ABC).

3.142.1. Extracting gate netlist of module `\cfg_crc' to `<abc-temp-dir>/input.blif'..
Extracted 11 gates and 22 wires to a netlist network with 9 inputs and 7 outputs.

3.142.1.1. Executing ABC.
DE:   #PIs =   9  #Luts =     7  Max Lvl =   1  Avg Lvl =   0.86  [   0.02 sec. at Pass 0]
DE:   #PIs =   9  #Luts =     7  Max Lvl =   1  Avg Lvl =   0.86  [   0.21 sec. at Pass 1]
DE:   #PIs =   9  #Luts =     7  Max Lvl =   1  Avg Lvl =   0.86  [   0.10 sec. at Pass 2]
DE:   #PIs =   9  #Luts =     7  Max Lvl =   1  Avg Lvl =   0.86  [   0.07 sec. at Pass 3]
DE:   #PIs =   9  #Luts =     7  Max Lvl =   1  Avg Lvl =   0.86  [   0.25 sec. at Pass 4]
DE:   #PIs =   9  #Luts =     7  Max Lvl =   1  Avg Lvl =   0.86  [   0.29 sec. at Pass 5]
DE:   #PIs =   9  #Luts =     7  Max Lvl =   1  Avg Lvl =   0.86  [   0.52 sec. at Pass 6]
DE:   #PIs =   9  #Luts =     7  Max Lvl =   1  Avg Lvl =   0.86  [   0.39 sec. at Pass 7]

yosys> opt_expr

3.143. Executing OPT_EXPR pass (perform const folding).
Optimizing module cfg_crc.

yosys> opt_merge -nomux

3.144. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cfg_crc'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.145. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \cfg_crc..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.146. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \cfg_crc.
Performed a total of 0 changes.

yosys> opt_merge

3.147. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cfg_crc'.
Removed a total of 0 cells.

yosys> opt_share

3.148. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.149. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.150. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cfg_crc..
Removed 0 unused cells and 19 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.151. Executing OPT_EXPR pass (perform const folding).
Optimizing module cfg_crc.
MAX OPT ITERATION = 1

yosys> hierarchy -check

3.152. Executing HIERARCHY pass (managing design hierarchy).

3.152.1. Analyzing design hierarchy..
Top module:  \cfg_crc

3.152.2. Analyzing design hierarchy..
Top module:  \cfg_crc
Removed 0 unused modules.

yosys> stat

3.153. Printing statistics.

=== cfg_crc ===

   Number of wires:                 13
   Number of wire bits:             17
   Number of public wires:           6
   Number of public wire bits:      10
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 12
     $lut                            7
     dffsre                          5


yosys> opt_clean -purge

3.154. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cfg_crc..

yosys> write_verilog -noattr -nohex synthesized.v

3.155. Executing Verilog backend.
Dumping module `\cfg_crc'.

Warnings: 1 unique messages, 1 total
End of script. Logfile hash: d1cfda630c, CPU: user 0.24s system 0.03s, MEM: 32.18 MB peak
Yosys 0.18+10 (git sha1 c98b0e94e, gcc 9.4.0 -fPIC -Os)
Time spent: 98% 6x abc (23 sec), 0% 14x read_verilog (0 sec), ...
real 9.55
user 16.64
sys 7.46
