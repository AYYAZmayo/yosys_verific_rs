
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys-Verific 0.0.140
 Yosys 0.18+10 (git sha1 92b23013e, gcc 11.2.0 -fPIC -Os)


-- Executing script file `yosys.ys' --
echo on

yosys> plugin -i synth-rs

yosys> read -verific

yosys> read -incdir .

yosys> verific -vlog-incdir .

1. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Sep22_SW_Release, released at Fri Sep 30 20:01:32 2022.

yosys> verilog_defaults -add -I.

yosys> read -vhdl b13.vhd

yosys> verific -vhdl b13.vhd

2. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Sep22_SW_Release, released at Fri Sep 30 20:01:32 2022.
VERIFIC-INFO [VHDL-1504] default VHDL library search path is now "/nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008"
VERIFIC-COMMENT [VHDL-1481] Analyzing VHDL file 'b13.vhd'
VERIFIC-COMMENT [VHDL-1493] Restoring VHDL unit 'std.standard' from file '/nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008/std/standard.vdb'
VERIFIC-INFO [VHDL-1012] b13.vhd:1: analyzing entity 'b13'
VERIFIC-INFO [VHDL-1010] b13.vhd:21: analyzing architecture 'behav'

yosys> synth_rs -top b13 -tech genesis2 -goal area -de -verilog synthesized.v

3. Executing synth_rs pass: v0.4.116

yosys> read_verilog -lib -specify -nomem2reg +/rapidsilicon/common/cells_sim.v +/rapidsilicon/genesis2/cells_sim.v +/rapidsilicon/genesis2/dsp_sim.v +/rapidsilicon/genesis2/brams_sim.v

3.1. Executing Verilog-2005 frontend: /nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v
Parsing Verilog input from `/nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\inv'.
Generating RTLIL representation for module `\buff'.
Generating RTLIL representation for module `\logic_0'.
Generating RTLIL representation for module `\logic_1'.
Generating RTLIL representation for module `\gclkbuff'.
Successfully finished Verilog frontend.

3.2. Executing Verilog-2005 frontend: /nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/cells_sim.v
Parsing Verilog input from `/nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\dff'.
Generating RTLIL representation for module `\dffn'.
Generating RTLIL representation for module `\sdff'.
Generating RTLIL representation for module `\sdffn'.
Generating RTLIL representation for module `\dffr'.
Generating RTLIL representation for module `\dffnr'.
Generating RTLIL representation for module `\dffe'.
Generating RTLIL representation for module `\dffne'.
Generating RTLIL representation for module `\sdffre'.
Generating RTLIL representation for module `\sdffnre'.
Generating RTLIL representation for module `\dffre'.
Generating RTLIL representation for module `\dffnre'.
Generating RTLIL representation for module `\latch'.
Generating RTLIL representation for module `\latchn'.
Generating RTLIL representation for module `\latchr'.
Generating RTLIL representation for module `\latchnr'.
Generating RTLIL representation for module `\fa_1bit'.
Successfully finished Verilog frontend.

3.3. Executing Verilog-2005 frontend: /nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/dsp_sim.v
Parsing Verilog input from `/nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/dsp_sim.v' to AST representation.
Generating RTLIL representation for module `\RS_DSP'.
Generating RTLIL representation for module `\RS_DSP_MULT'.
Generating RTLIL representation for module `\RS_DSP_MULT_REGIN'.
Generating RTLIL representation for module `\RS_DSP_MULT_REGOUT'.
Generating RTLIL representation for module `\RS_DSP_MULT_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP_MULTADD'.
Generating RTLIL representation for module `\RS_DSP_MULTADD_REGIN'.
Generating RTLIL representation for module `\RS_DSP_MULTADD_REGOUT'.
Generating RTLIL representation for module `\RS_DSP_MULTADD_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP_MULTACC'.
Generating RTLIL representation for module `\RS_DSP_MULTACC_REGIN'.
Generating RTLIL representation for module `\RS_DSP_MULTACC_REGOUT'.
Generating RTLIL representation for module `\RS_DSP_MULTACC_REGIN_REGOUT'.
Generating RTLIL representation for module `\dsp_t1_20x18x64_cfg_ports'.
Generating RTLIL representation for module `\dsp_t1_sim_cfg_ports'.
Successfully finished Verilog frontend.

3.4. Executing Verilog-2005 frontend: /nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/brams_sim.v
Parsing Verilog input from `/nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/brams_sim.v' to AST representation.
Generating RTLIL representation for module `\TDP_BRAM18'.
Generating RTLIL representation for module `\RS_TDP36K'.
Generating RTLIL representation for module `\BRAM2x18_TDP'.
Generating RTLIL representation for module `\BRAM2x18_SDP'.
Generating RTLIL representation for module `\_$_mem_v2_asymmetric'.
Successfully finished Verilog frontend.

yosys> hierarchy -check -top b13

3.5. Executing HIERARCHY pass (managing design hierarchy).
VERIFIC-INFO [VHDL-1067] b13.vhd:1: processing 'b13(BEHAV)'
VERIFIC-INFO [VHDL-1172] b13.vhd:125: 'others' clause is never selected
VERIFIC-INFO [VHDL-1172] b13.vhd:167: 'others' clause is never selected
VERIFIC-INFO [VHDL-1172] b13.vhd:203: 'others' clause is never selected
Importing module b13.

3.5.1. Analyzing design hierarchy..
Top module:  \b13

3.5.2. Analyzing design hierarchy..
Top module:  \b13
Removed 0 unused modules.

yosys> proc

3.6. Executing PROC pass (convert processes to netlists).

yosys> proc_clean

3.6.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> proc_rmdead

3.6.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

yosys> proc_prune

3.6.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

yosys> proc_init

3.6.4. Executing PROC_INIT pass (extract init attributes).

yosys> proc_arst

3.6.5. Executing PROC_ARST pass (detect async resets in processes).

yosys> proc_rom

3.6.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

yosys> proc_mux

3.6.7. Executing PROC_MUX pass (convert decision trees to multiplexers).

yosys> proc_dlatch

3.6.8. Executing PROC_DLATCH pass (convert process syncs to latches).

yosys> proc_dff

3.6.9. Executing PROC_DFF pass (convert process syncs to FFs).

yosys> proc_memwr

3.6.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

yosys> proc_clean

3.6.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> opt_expr -keepdc

3.6.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.
<suppressed ~25 debug messages>

yosys> demuxmap

3.7. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> flatten

3.8. Executing FLATTEN pass (flatten design).

yosys> demuxmap

3.9. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> tribuf -logic -formal

3.10. Executing TRIBUF pass.

yosys> deminout

3.11. Executing DEMINOUT pass (demote inout ports to input or output).

yosys> opt_expr

3.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.

yosys> opt_clean

3.13. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b13..
Removed 3 unused cells and 57 unused wires.
<suppressed ~18 debug messages>

yosys> check

3.14. Executing CHECK pass (checking for obvious problems).
Checking module b13...
Found and reported 0 problems.

yosys> opt_expr

3.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.

yosys> opt_merge -nomux

3.16. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b13'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b13..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~27 debug messages>

yosys> opt_reduce

3.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b13.
Performed a total of 0 changes.

yosys> opt_merge

3.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b13'.
Removed a total of 0 cells.

yosys> opt_share

3.20. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.21. Executing OPT_DFF pass (perform DFF optimizations).
Changing const-value async load to async reset on $verific$tx_end_reg$b13.vhd:294$235 ($aldff) from module b13.
Changing const-value async load to async reset on $verific$tx_conta_reg$b13.vhd:294$238 ($aldff) from module b13.
Changing const-value async load to async reset on $verific$tre_reg$b13.vhd:239$212 ($aldff) from module b13.
Changing const-value async load to async reset on $verific$soc_reg$b13.vhd:127$150 ($aldff) from module b13.
Changing const-value async load to async reset on $verific$shot_reg$b13.vhd:169$180 ($aldff) from module b13.
Changing const-value async load to async reset on $verific$send_reg$b13.vhd:205$190 ($aldff) from module b13.
Changing const-value async load to async reset on $verific$send_en_reg$b13.vhd:239$210 ($aldff) from module b13.
Changing const-value async load to async reset on $verific$send_data_reg$b13.vhd:127$153 ($aldff) from module b13.
Changing const-value async load to async reset on $verific$rdy_reg$b13.vhd:169$177 ($aldff) from module b13.
Changing const-value async load to async reset on $verific$out_reg_reg$b13.vhd:239$211 ($aldff) from module b13.
Changing const-value async load to async reset on $verific$next_bit_reg$b13.vhd:294$237 ($aldff) from module b13.
Changing const-value async load to async reset on $verific$mux_en_reg$b13.vhd:127$155 ($aldff) from module b13.
Changing const-value async load to async reset on $verific$mpx_reg$b13.vhd:169$179 ($aldff) from module b13.
Changing const-value async load to async reset on $verific$load_reg$b13.vhd:205$189 ($aldff) from module b13.
Changing const-value async load to async reset on $verific$load_dato_reg$b13.vhd:127$154 ($aldff) from module b13.
Changing const-value async load to async reset on $verific$itfc_state_reg$b13.vhd:205$192 ($aldff) from module b13.
Changing const-value async load to async reset on $verific$error_reg$b13.vhd:239$213 ($aldff) from module b13.
Changing const-value async load to async reset on $verific$data_out_reg$b13.vhd:294$236 ($aldff) from module b13.
Changing const-value async load to async reset on $verific$conta_tmp_reg$b13.vhd:127$152 ($aldff) from module b13.
Changing const-value async load to async reset on $verific$confirm_reg$b13.vhd:205$191 ($aldff) from module b13.
Changing const-value async load to async reset on $verific$canale_reg$b13.vhd:127$151 ($aldff) from module b13.
Changing const-value async load to async reset on $verific$add_mpx2_reg$b13.vhd:169$178 ($aldff) from module b13.
Changing const-value async load to async reset on $verific$S2_reg$b13.vhd:169$176 ($aldff) from module b13.
Changing const-value async load to async reset on $verific$S1_reg$b13.vhd:127$149 ($aldff) from module b13.

yosys> opt_clean

3.22. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b13..

yosys> opt_expr

3.23. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.
MAX OPT ITERATION = 1

yosys> fsm -encoding binary

3.24. Executing FSM pass (extract and optimize FSM).

yosys> fsm_detect

3.24.1. Executing FSM_DETECT pass (finding FSMs in design).

yosys> fsm_extract

3.24.2. Executing FSM_EXTRACT pass (extracting FSM from design).

yosys> fsm_opt

3.24.3. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> opt_clean

3.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b13..

yosys> fsm_opt

3.24.5. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> fsm_recode -encoding binary

3.24.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

yosys> fsm_info

3.24.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

yosys> fsm_map

3.24.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

yosys> opt_expr

3.25. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.

yosys> opt_merge -nomux

3.26. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b13'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.27. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b13..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~27 debug messages>

yosys> opt_reduce

3.28. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b13.
Performed a total of 0 changes.

yosys> opt_merge

3.29. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b13'.
Removed a total of 0 cells.

yosys> opt_share

3.30. Executing OPT_SHARE pass.

yosys> opt_dff -sat

3.31. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $verific$tx_conta_reg$b13.vhd:294$238 ($adff) from module b13 (D = $verific$n1576$120, Q = \tx_conta).
Adding EN signal on $verific$out_reg_reg$b13.vhd:239$211 ($adff) from module b13 (D = \data_in, Q = \out_reg).
Adding EN signal on $verific$next_bit_reg$b13.vhd:294$237 ($adff) from module b13 (D = $verific$n1506$115, Q = \next_bit).
Adding EN signal on $verific$error_reg$b13.vhd:239$213 ($adff) from module b13 (D = $verific$n1079$46, Q = \error).
Setting constant 0-bit at position 3 on $verific$conta_tmp_reg$b13.vhd:127$152 ($adff) from module b13.
Setting constant 0-bit at position 7 on $auto$ff.cc:262:slice$248 ($adffe) from module b13.
Setting constant 0-bit at position 8 on $auto$ff.cc:262:slice$248 ($adffe) from module b13.
Setting constant 0-bit at position 9 on $auto$ff.cc:262:slice$248 ($adffe) from module b13.

yosys> opt_clean

3.32. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b13..
Removed 5 unused cells and 5 unused wires.
<suppressed ~6 debug messages>

yosys> opt_expr

3.33. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.
<suppressed ~1 debug messages>

yosys> opt_muxtree

3.34. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b13..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~25 debug messages>

yosys> opt_reduce

3.35. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b13.
Performed a total of 0 changes.

yosys> opt_merge

3.36. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b13'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

yosys> opt_share

3.37. Executing OPT_SHARE pass.

yosys> opt_dff -sat

3.38. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 3 on $verific$canale_reg$b13.vhd:127$151 ($adff) from module b13.

yosys> opt_clean

3.39. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b13..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.40. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.

yosys> opt_muxtree

3.41. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b13..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~25 debug messages>

yosys> opt_reduce

3.42. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b13.
Performed a total of 0 changes.

yosys> opt_merge

3.43. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b13'.
Removed a total of 0 cells.

yosys> opt_share

3.44. Executing OPT_SHARE pass.

yosys> opt_dff -sat

3.45. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.46. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b13..

yosys> opt_expr

3.47. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.
MAX OPT ITERATION = 3

yosys> wreduce -keepdc

3.48. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 3) from mux cell b13.$verific$mux_18$b13.vhd:103$130 ($mux).
Removed top 1 bits (of 4) from port A of cell b13.$verific$add_23$b13.vhd:107$133 ($add).
Removed top 3 bits (of 4) from port B of cell b13.$verific$add_23$b13.vhd:107$133 ($add).
Removed top 1 bits (of 5) from port Y of cell b13.$verific$add_23$b13.vhd:107$133 ($add).
Removed top 1 bits (of 3) from mux cell b13.$verific$mux_36$b13.vhd:124$140 ($mux).
Removed top 1 bits (of 2) from mux cell b13.$verific$mux_61$b13.vhd:146$157 ($mux).
Removed top 1 bits (of 2) from mux cell b13.$verific$mux_105$b13.vhd:190$182 ($mux).
Removed top 3 bits (of 10) from port A of cell b13.$verific$LessThan_162$b13.vhd:255$214 ($lt).
Removed top 3 bits (of 10) from port B of cell b13.$verific$LessThan_162$b13.vhd:255$214 ($lt).
Removed top 3 bits (of 10) from port A of cell b13.$verific$add_188$b13.vhd:291$226 ($add).
Removed top 9 bits (of 10) from port B of cell b13.$verific$add_188$b13.vhd:291$226 ($add).
Removed top 2 bits (of 10) from port Y of cell b13.$verific$add_188$b13.vhd:291$226 ($add).
Removed top 3 bits (of 10) from mux cell b13.$verific$mux_193$b13.vhd:292$230 ($mux).
Removed top 1 bits (of 8) from port Y of cell b13.$verific$add_188$b13.vhd:291$226 ($add).
Removed top 3 bits (of 10) from wire b13.$verific$n1546$117.
Removed top 3 bits (of 10) from wire b13.$verific$n1576$120.
Removed top 1 bits (of 3) from wire b13.$verific$n243$70.
Removed top 1 bits (of 3) from wire b13.$verific$n442$80.
Removed top 1 bits (of 2) from wire b13.$verific$n588$86.
Removed top 1 bits (of 2) from wire b13.$verific$n898$95.
Removed top 1 bits (of 4) from wire b13.conta_tmp.
Removed top 3 bits (of 10) from wire b13.tx_conta.

yosys> peepopt

3.49. Executing PEEPOPT pass (run peephole optimizers).

yosys> opt_clean

3.50. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b13..
Removed 0 unused cells and 9 unused wires.
<suppressed ~1 debug messages>

yosys> demuxmap

3.51. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> stat

3.52. Printing statistics.

=== b13 ===

   Number of wires:                 94
   Number of wire bits:            172
   Number of public wires:          29
   Number of public wire bits:      61
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 89
     $add                            2
     $adff                          20
     $adffe                          4
     $bmux                          19
     $eq                             1
     $lt                             1
     $mux                           36
     $not                            2
     $or                             1
     $reduce_and                     2
     $reduce_bool                    1


yosys> wreduce t:$mul

3.53. Executing WREDUCE pass (reducing word size of cells).

yosys> rs_dsp_macc -genesis2 -max_dsp 154

3.54. Executing RS_DSP_MACC pass.

yosys> techmap -map +/mul2dsp_check_maxwidth.v -D DSP_A_MAXWIDTH=20 -D DSP_B_MAXWIDTH=18 -D DSP_A_MINWIDTH=11 -D DSP_B_MINWIDTH=10 -D DSP_NAME=$__RS_MUL20X18 a:valid_map

3.55. Executing TECHMAP pass (map to technology primitives).

3.55.1. Executing Verilog-2005 frontend: /nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/mul2dsp_check_maxwidth.v
Parsing Verilog input from `/nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/mul2dsp_check_maxwidth.v' to AST representation.
Generating RTLIL representation for module `\_80_mul'.
Generating RTLIL representation for module `\_90_soft_mul'.
Successfully finished Verilog frontend.

3.55.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

yosys> stat

3.56. Printing statistics.

=== b13 ===

   Number of wires:                 94
   Number of wire bits:            172
   Number of public wires:          29
   Number of public wire bits:      61
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 89
     $add                            2
     $adff                          20
     $adffe                          4
     $bmux                          19
     $eq                             1
     $lt                             1
     $mux                           36
     $not                            2
     $or                             1
     $reduce_and                     2
     $reduce_bool                    1


yosys> chtype -set $mul t:$__soft_mul

yosys> techmap -map +/rapidsilicon/genesis2/dsp_map.v -D USE_DSP_CFG_PARAMS=0

3.57. Executing TECHMAP pass (map to technology primitives).

3.57.1. Executing Verilog-2005 frontend: /nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/dsp_map.v
Parsing Verilog input from `/nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/dsp_map.v' to AST representation.
Generating RTLIL representation for module `\$__RS_MUL20X18'.
Successfully finished Verilog frontend.

3.57.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

yosys> techmap -map +/rapidsilicon/genesis2/dsp_final_map.v

3.58. Executing TECHMAP pass (map to technology primitives).

3.58.1. Executing Verilog-2005 frontend: /nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/dsp_final_map.v
Parsing Verilog input from `/nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/dsp_final_map.v' to AST representation.
Generating RTLIL representation for module `\dsp_t1_20x18x64_cfg_ports'.
Successfully finished Verilog frontend.

3.58.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

yosys> rs-pack-dsp-regs

3.59. Executing rs_pack_dsp_regs pass.

yosys> rs_dsp_io_regs

3.60. Executing RS_DSP_IO_REGS pass.

yosys> alumacc

3.61. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module b13:
  creating $macc model for $verific$add_188$b13.vhd:291$226 ($add).
  creating $macc model for $verific$add_23$b13.vhd:107$133 ($add).
  creating $alu model for $macc $verific$add_23$b13.vhd:107$133.
  creating $alu model for $macc $verific$add_188$b13.vhd:291$226.
  creating $alu model for $verific$LessThan_162$b13.vhd:255$214 ($lt): new $alu
  creating $alu cell for $verific$LessThan_162$b13.vhd:255$214: $auto$alumacc.cc:485:replace_alu$272
  creating $alu cell for $verific$add_188$b13.vhd:291$226: $auto$alumacc.cc:485:replace_alu$277
  creating $alu cell for $verific$add_23$b13.vhd:107$133: $auto$alumacc.cc:485:replace_alu$280
  created 3 $alu and 0 $macc cells.

yosys> opt_expr

3.62. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.
<suppressed ~3 debug messages>

yosys> opt_merge -nomux

3.63. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b13'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.64. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b13..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~25 debug messages>

yosys> opt_reduce

3.65. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b13.
Performed a total of 0 changes.

yosys> opt_merge

3.66. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b13'.
Removed a total of 0 cells.

yosys> opt_share

3.67. Executing OPT_SHARE pass.

yosys> opt_dff -nodffe

3.68. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.69. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b13..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.70. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.
MAX OPT ITERATION = 1

yosys> stat

3.71. Printing statistics.

=== b13 ===

   Number of wires:                101
   Number of wire bits:            215
   Number of public wires:          29
   Number of public wire bits:      61
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 90
     $adff                          20
     $adffe                          4
     $alu                            3
     $bmux                          19
     $eq                             1
     $mux                           36
     $not                            3
     $or                             1
     $reduce_and                     2
     $reduce_bool                    1


yosys> memory -nomap

3.72. Executing MEMORY pass.

yosys> opt_mem

3.72.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

yosys> opt_mem_priority

3.72.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

yosys> opt_mem_feedback

3.72.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

yosys> memory_bmux2rom

3.72.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

yosys> memory_dff

3.72.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).
Checking read port `$auto$memory_bmux2rom.cc:63:execute$286'[0] in module `\b13': merging output FF to cell.
Checking read port `$auto$memory_bmux2rom.cc:63:execute$283'[0] in module `\b13': FF found, but with a mux select that doesn't seem to correspond to transparency logic.
Checking read port address `$auto$memory_bmux2rom.cc:63:execute$283'[0] in module `\b13': no address FF found.

yosys> opt_clean

3.72.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b13..
Removed 1 unused cells and 5 unused wires.
<suppressed ~2 debug messages>

yosys> memory_share

3.72.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

yosys> opt_mem_widen

3.72.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

yosys> opt_clean

3.72.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b13..

yosys> memory_collect

3.72.10. Executing MEMORY_COLLECT pass (generating $mem cells).

yosys> stat

3.73. Printing statistics.

=== b13 ===

   Number of wires:                100
   Number of wire bits:            211
   Number of public wires:          29
   Number of public wire bits:      61
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 89
     $adff                          20
     $adffe                          3
     $alu                            3
     $bmux                          17
     $eq                             1
     $mem_v2                         2
     $mux                           36
     $not                            3
     $or                             1
     $reduce_and                     2
     $reduce_bool                    1


yosys> muxpack

3.74. Executing MUXPACK pass ($mux cell cascades to $pmux).
Converted 0 (p)mux cells into 0 pmux cells.
<suppressed ~29 debug messages>

yosys> opt_clean

3.75. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b13..

yosys> memory_libmap -lib +/rapidsilicon/genesis2/brams_new_swap.txt -limit 150 a:read_swapped

3.76. Executing MEMORY_LIBMAP pass (mapping memories to cells).

yosys> memory_libmap -lib +/rapidsilicon/genesis2/brams_new.txt -limit 150

3.77. Executing MEMORY_LIBMAP pass (mapping memories to cells).
using FF mapping for memory b13.$auto$memory_bmux2rom.cc:63:execute$283
using FF mapping for memory b13.$auto$memory_bmux2rom.cc:63:execute$286
<suppressed ~103 debug messages>

yosys> rs_bram_split -new_mapping

3.78. Executing Rs_BRAM_Split pass.

yosys> techmap -autoproc -map +/rapidsilicon/genesis2/brams_map_new.v

3.79. Executing TECHMAP pass (map to technology primitives).

3.79.1. Executing Verilog-2005 frontend: /nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/brams_map_new.v
Parsing Verilog input from `/nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/brams_map_new.v' to AST representation.
Generating RTLIL representation for module `\$__RS_FACTOR_BRAM36_TDP'.
Generating RTLIL representation for module `\$__RS_FACTOR_BRAM18_TDP'.
Generating RTLIL representation for module `\$__RS_FACTOR_BRAM18_SDP'.
Generating RTLIL representation for module `\$__RS_FACTOR_BRAM36_SDP'.
Successfully finished Verilog frontend.

3.79.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~6 debug messages>

yosys> techmap -map +/rapidsilicon/genesis2/brams_final_map_new.v

3.80. Executing TECHMAP pass (map to technology primitives).

3.80.1. Executing Verilog-2005 frontend: /nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/brams_final_map_new.v
Parsing Verilog input from `/nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/brams_final_map_new.v' to AST representation.
Generating RTLIL representation for module `\BRAM2x18_TDP'.
Generating RTLIL representation for module `\BRAM2x18_SDP'.
Successfully finished Verilog frontend.

3.80.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

yosys> pmuxtree

3.81. Executing PMUXTREE pass.

yosys> muxpack

3.82. Executing MUXPACK pass ($mux cell cascades to $pmux).
Converted 0 (p)mux cells into 0 pmux cells.
<suppressed ~29 debug messages>

yosys> memory_map

3.83. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).
Mapping memory $auto$memory_bmux2rom.cc:63:execute$283 in module \b13:
  created 16 $dff cells and 0 static cells of width 1.
  read interface: 0 $dff and 15 $mux cells.
  write interface: 0 write mux blocks.
Mapping memory $auto$memory_bmux2rom.cc:63:execute$286 in module \b13:
  created 16 $dff cells and 0 static cells of width 4.
Extracted data FF from read port 0 of b13.$auto$memory_bmux2rom.cc:63:execute$286: $$auto$memory_bmux2rom.cc:63:execute$286$rdreg[0]
  read interface: 1 $dff and 15 $mux cells.
  write interface: 0 write mux blocks.

yosys> stat

3.84. Printing statistics.

=== b13 ===

   Number of wires:                225
   Number of wire bits:            525
   Number of public wires:          29
   Number of public wire bits:      61
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                150
     $adff                          20
     $adffe                          4
     $alu                            3
     $bmux                          17
     $dff                           32
     $eq                             1
     $mux                           66
     $not                            3
     $or                             1
     $reduce_and                     2
     $reduce_bool                    1


yosys> techmap -map +/techmap.v -map +/rapidsilicon/genesis2/arith_map.v

3.85. Executing TECHMAP pass (map to technology primitives).

3.85.1. Executing Verilog-2005 frontend: /nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.85.2. Executing Verilog-2005 frontend: /nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/arith_map.v
Parsing Verilog input from `/nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_rs_alu'.
Successfully finished Verilog frontend.

3.85.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $not.
Using template $paramod$dbcdc7e8aa1a4080cea2deda6fdc8772064f4d90\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $bmux.
Using extmapper simplemap for cells of type $adff.
Using extmapper simplemap for cells of type $adffe.
Using extmapper simplemap for cells of type $or.
Using template $paramod$103b4016182df467cceab67bcf3e18e6361ec0fd\_90_alu for cells of type $alu.
Using template $paramod$bfceb922395790c0ce92e9f9b5b428d4fc72cc30\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $and.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000111 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000100 for cells of type $lcu.
No more expansions possible.
<suppressed ~782 debug messages>

yosys> stat

3.86. Printing statistics.

=== b13 ===

   Number of wires:                383
   Number of wire bits:           4330
   Number of public wires:          29
   Number of public wire bits:      61
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                565
     $_AND_                         48
     $_DFFE_PP0P_                   20
     $_DFF_PP0_                     28
     $_DFF_P_                       80
     $_MUX_                        296
     $_NOT_                         22
     $_OR_                          28
     $_XOR_                         43


yosys> opt_expr

3.87. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.
<suppressed ~167 debug messages>

yosys> opt_merge -nomux

3.88. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b13'.
<suppressed ~48 debug messages>
Removed a total of 16 cells.

yosys> opt_muxtree

3.89. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b13..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.90. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b13.
Performed a total of 0 changes.

yosys> opt_merge

3.91. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b13'.
Removed a total of 0 cells.

yosys> opt_share

3.92. Executing OPT_SHARE pass.

yosys> opt_dff -nodffe

3.93. Executing OPT_DFF pass (perform DFF optimizations).
Handling const CLK on $auto$ff.cc:262:slice$993 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$990 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$994 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$870 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$872 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$564 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$560 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$553 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$915 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$569 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$585 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$892 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$557 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$570 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$558 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$559 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$571 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$551 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$561 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$935 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$939 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$943 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$947 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$951 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$955 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$959 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$963 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$967 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$971 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$975 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$979 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$983 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$987 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$991 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$995 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$992 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$932 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$933 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$934 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$936 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$937 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$938 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$940 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$941 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$942 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$944 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$945 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$946 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$948 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$949 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$950 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$952 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$953 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$954 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$956 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$957 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$958 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$960 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$961 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$962 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$964 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$965 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$966 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$968 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$969 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$970 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$972 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$973 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$974 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$976 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$977 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$978 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$980 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$981 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$982 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$984 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$985 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$986 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$988 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$989 ($_DFF_P_) from module b13 (removing D path).

yosys> opt_clean

3.94. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b13..
Removed 16 unused cells and 233 unused wires.
<suppressed ~17 debug messages>

yosys> opt_expr

3.95. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.
<suppressed ~39 debug messages>

yosys> opt_muxtree

3.96. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b13..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.97. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b13.
Performed a total of 0 changes.

yosys> opt_merge

3.98. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b13'.
<suppressed ~39 debug messages>
Removed a total of 13 cells.

yosys> opt_share

3.99. Executing OPT_SHARE pass.

yosys> opt_dff -nodffe

3.100. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.101. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b13..
Removed 0 unused cells and 18 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.102. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.
<suppressed ~1 debug messages>

yosys> opt_muxtree

3.103. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b13..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.104. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b13.
Performed a total of 0 changes.

yosys> opt_merge

3.105. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b13'.
Removed a total of 0 cells.

yosys> opt_share

3.106. Executing OPT_SHARE pass.

yosys> opt_dff -nodffe

3.107. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.108. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b13..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.109. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.
MAX OPT ITERATION = 3

yosys> opt_expr -full

3.110. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.
<suppressed ~40 debug messages>

yosys> techmap -map +/techmap.v

3.111. Executing TECHMAP pass (map to technology primitives).

3.111.1. Executing Verilog-2005 frontend: /nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.111.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~71 debug messages>

yosys> stat

3.112. Printing statistics.

=== b13 ===

   Number of wires:                138
   Number of wire bits:            350
   Number of public wires:          29
   Number of public wire bits:      61
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                235
     $_AND_                         39
     $_DFFE_PP0P_                   20
     $_DFF_PP0_                     28
     $_MUX_                        106
     $_NOT_                         17
     $_OR_                          17
     $_XOR_                          8


yosys> dfflegalize -cell $_SDFF_???_ 0 -cell $_SDFFE_????_ 0 t:$_SDFFCE_*

3.113. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

yosys> stat

3.114. Printing statistics.

=== b13 ===

   Number of wires:                138
   Number of wire bits:            350
   Number of public wires:          29
   Number of public wire bits:      61
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                235
     $_AND_                         39
     $_DFFE_PP0P_                   20
     $_DFF_PP0_                     28
     $_MUX_                        106
     $_NOT_                         17
     $_OR_                          17
     $_XOR_                          8


yosys> opt_expr

3.115. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.

yosys> opt_merge -nomux

3.116. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b13'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.117. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b13..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.118. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b13.
Performed a total of 0 changes.

yosys> opt_merge

3.119. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b13'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -sat

3.120. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.121. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b13..
Removed 0 unused cells and 4 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.122. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.
MAX OPT ITERATION = 1

yosys> abc -dff -keepff

3.123. Executing ABC pass (technology mapping using ABC).

3.123.1. Summary of detected clock domains:
  30 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$255, arst=\reset, srst={ }
  9 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$252, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$auto$opt_dff.cc:194:make_patterns_logic$258, arst=\reset, srst={ }
  43 cells in clk=\clock, en=\send_en, arst=\reset, srst={ }
  148 cells in clk=\clock, en={ }, arst=\reset, srst={ }

3.123.2. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$255, asynchronously reset by \reset
Extracted 30 gates and 42 wires to a netlist network with 10 inputs and 7 outputs.

3.123.2.1. Executing ABC.

3.123.3. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$252, asynchronously reset by \reset
Extracted 9 gates and 19 wires to a netlist network with 10 inputs and 9 outputs.

3.123.3.1. Executing ABC.

3.123.4. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:194:make_patterns_logic$258, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.123.4.1. Executing ABC.

3.123.5. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by \send_en, asynchronously reset by \reset
Extracted 43 gates and 43 wires to a netlist network with 0 inputs and 8 outputs.

3.123.5.1. Executing ABC.

3.123.6. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, asynchronously reset by \reset
Extracted 148 gates and 155 wires to a netlist network with 5 inputs and 29 outputs.

3.123.6.1. Executing ABC.

yosys> abc -dff -keepff

3.124. Executing ABC pass (technology mapping using ABC).

3.124.1. Summary of detected clock domains:
  32 cells in clk=\clock, en=$abc$1431$lo21, arst=\reset, srst={ }
  29 cells in clk=\clock, en=$abc$1337$auto$opt_dff.cc:219:make_patterns_logic$255, arst=\reset, srst={ }
  3 cells in clk=\clock, en=$abc$1393$auto$opt_dff.cc:194:make_patterns_logic$258, arst=\reset, srst={ }
  13 cells in clk=\clock, en=$abc$1375$auto$opt_dff.cc:219:make_patterns_logic$252, arst=\reset, srst={ }
  106 cells in clk=\clock, en={ }, arst=\reset, srst={ }

3.124.2. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$1431$lo21, asynchronously reset by \reset
Extracted 32 gates and 32 wires to a netlist network with 0 inputs and 8 outputs.

3.124.2.1. Executing ABC.

3.124.3. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$1337$auto$opt_dff.cc:219:make_patterns_logic$255, asynchronously reset by \reset
Extracted 29 gates and 37 wires to a netlist network with 8 inputs and 12 outputs.

3.124.3.1. Executing ABC.

3.124.4. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$1393$auto$opt_dff.cc:194:make_patterns_logic$258, asynchronously reset by \reset
Extracted 3 gates and 7 wires to a netlist network with 4 inputs and 2 outputs.

3.124.4.1. Executing ABC.

3.124.5. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$1375$auto$opt_dff.cc:219:make_patterns_logic$252, asynchronously reset by \reset
Extracted 13 gates and 26 wires to a netlist network with 13 inputs and 13 outputs.

3.124.5.1. Executing ABC.

3.124.6. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, asynchronously reset by \reset
Extracted 106 gates and 115 wires to a netlist network with 9 inputs and 27 outputs.

3.124.6.1. Executing ABC.

yosys> abc -dff -keepff

3.125. Executing ABC pass (technology mapping using ABC).

3.125.1. Summary of detected clock domains:
  15 cells in clk=\clock, en=$abc$1626$abc$1375$auto$opt_dff.cc:219:make_patterns_logic$252, arst=\reset, srst={ }
  3 cells in clk=\clock, en=$abc$1622$abc$1393$auto$opt_dff.cc:194:make_patterns_logic$258, arst=\reset, srst={ }
  29 cells in clk=\clock, en=$abc$1648$abc$1431$lo21, arst=\reset, srst={ }
  27 cells in clk=\clock, en=$abc$1592$abc$1337$auto$opt_dff.cc:219:make_patterns_logic$255, arst=\reset, srst={ }
  104 cells in clk=\clock, en={ }, arst=\reset, srst={ }

3.125.2. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$1626$abc$1375$auto$opt_dff.cc:219:make_patterns_logic$252, asynchronously reset by \reset
Extracted 15 gates and 29 wires to a netlist network with 14 inputs and 15 outputs.

3.125.2.1. Executing ABC.

3.125.3. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$1622$abc$1393$auto$opt_dff.cc:194:make_patterns_logic$258, asynchronously reset by \reset
Extracted 3 gates and 7 wires to a netlist network with 4 inputs and 2 outputs.

3.125.3.1. Executing ABC.

3.125.4. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$1648$abc$1431$lo21, asynchronously reset by \reset
Extracted 29 gates and 29 wires to a netlist network with 0 inputs and 8 outputs.

3.125.4.1. Executing ABC.

3.125.5. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$1592$abc$1337$auto$opt_dff.cc:219:make_patterns_logic$255, asynchronously reset by \reset
Extracted 27 gates and 34 wires to a netlist network with 7 inputs and 12 outputs.

3.125.5.1. Executing ABC.

3.125.6. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, asynchronously reset by \reset
Extracted 104 gates and 113 wires to a netlist network with 9 inputs and 27 outputs.

3.125.6.1. Executing ABC.

yosys> abc -dff -keepff

3.126. Executing ABC pass (technology mapping using ABC).

3.126.1. Summary of detected clock domains:
  26 cells in clk=\clock, en=$abc$1812$abc$1592$abc$1337$auto$opt_dff.cc:219:make_patterns_logic$255, arst=\reset, srst={ }
  3 cells in clk=\clock, en=$abc$1778$abc$1622$abc$1393$auto$opt_dff.cc:194:make_patterns_logic$258, arst=\reset, srst={ }
  29 cells in clk=\clock, en=$abc$1840$abc$1648$abc$1431$lo21, arst=\reset, srst={ }
  16 cells in clk=\clock, en=$abc$1754$abc$1626$abc$1375$auto$opt_dff.cc:219:make_patterns_logic$252, arst=\reset, srst={ }
  103 cells in clk=\clock, en={ }, arst=\reset, srst={ }

3.126.2. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$1812$abc$1592$abc$1337$auto$opt_dff.cc:219:make_patterns_logic$255, asynchronously reset by \reset
Extracted 26 gates and 34 wires to a netlist network with 8 inputs and 11 outputs.

3.126.2.1. Executing ABC.

3.126.3. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$1778$abc$1622$abc$1393$auto$opt_dff.cc:194:make_patterns_logic$258, asynchronously reset by \reset
Extracted 3 gates and 7 wires to a netlist network with 4 inputs and 2 outputs.

3.126.3.1. Executing ABC.

3.126.4. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$1840$abc$1648$abc$1431$lo21, asynchronously reset by \reset
Extracted 29 gates and 29 wires to a netlist network with 0 inputs and 8 outputs.

3.126.4.1. Executing ABC.

3.126.5. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$1754$abc$1626$abc$1375$auto$opt_dff.cc:219:make_patterns_logic$252, asynchronously reset by \reset
Extracted 16 gates and 29 wires to a netlist network with 13 inputs and 16 outputs.

3.126.5.1. Executing ABC.

3.126.6. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, asynchronously reset by \reset
Extracted 103 gates and 112 wires to a netlist network with 9 inputs and 27 outputs.

3.126.6.1. Executing ABC.

yosys> opt_ffinv

3.127. Executing OPT_FFINV pass (push inverters through FFs).
Discovering LUTs.
Pushed 0 inverters.

yosys> opt_expr

3.128. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.

yosys> opt_merge -nomux

3.129. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b13'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

yosys> opt_muxtree

3.130. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b13..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.131. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b13.
Performed a total of 0 changes.

yosys> opt_merge

3.132. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b13'.
Removed a total of 0 cells.

yosys> opt_share

3.133. Executing OPT_SHARE pass.

yosys> opt_dff -sat

3.134. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $abc$2031$auto$blifparse.cc:362:parse_blif$2034 ($_DFF_PP0_) from module b13 (D = $abc$2031$abc$1840$abc$1648$abc$1431$lo01, Q = $abc$2031$abc$1840$abc$1648$abc$1431$lo02).

yosys> opt_clean

3.135. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b13..
Removed 1 unused cells and 755 unused wires.
<suppressed ~2 debug messages>

yosys> opt_expr

3.136. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.

yosys> opt_muxtree

3.137. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b13..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.138. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b13.
Performed a total of 0 changes.

yosys> opt_merge

3.139. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b13'.
Removed a total of 0 cells.

yosys> opt_share

3.140. Executing OPT_SHARE pass.

yosys> opt_dff -sat

3.141. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.142. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b13..

yosys> opt_expr

3.143. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.
MAX OPT ITERATION = 2

yosys> bmuxmap

3.144. Executing BMUXMAP pass.

yosys> demuxmap

3.145. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> abc -script /tmp/yosys_Ur1KeP/abc_tmp_1.scr

3.146. Executing ABC pass (technology mapping using ABC).

3.146.1. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Extracted 130 gates and 175 wires to a netlist network with 45 inputs and 38 outputs.

3.146.1.1. Executing ABC.
DE:   #PIs =  45  #Luts =    43  Max Lvl =   3  Avg Lvl =   1.21  [   0.07 sec. at Pass 0]{firstMap}[1]
DE:   #PIs =  45  #Luts =    43  Max Lvl =   3  Avg Lvl =   1.21  [   0.32 sec. at Pass 1]{initMapFlow}[2]
DE:   #PIs =  45  #Luts =    43  Max Lvl =   3  Avg Lvl =   1.21  [   0.37 sec. at Pass 2]{map}[2]
DE:   #PIs =  45  #Luts =    42  Max Lvl =   3  Avg Lvl =   1.21  [   0.39 sec. at Pass 3]{postMap}[6]
DE:   #PIs =  45  #Luts =    42  Max Lvl =   3  Avg Lvl =   1.21  [   1.14 sec. at Pass 4]{map}[12]
DE:   #PIs =  45  #Luts =    42  Max Lvl =   3  Avg Lvl =   1.21  [   0.85 sec. at Pass 5]{postMap}[36]
DE:   #PIs =  45  #Luts =    42  Max Lvl =   3  Avg Lvl =   1.21  [   2.13 sec. at Pass 6]{map}[72]
DE:   #PIs =  45  #Luts =    42  Max Lvl =   3  Avg Lvl =   1.21  [   2.15 sec. at Pass 7]{pushMap}[100]
DE:   #PIs =  45  #Luts =    42  Max Lvl =   3  Avg Lvl =   1.21  [   1.90 sec. at Pass 8]{finalMap}[100]

yosys> opt_expr

3.147. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.

yosys> opt_merge -nomux

3.148. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b13'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.149. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b13..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.150. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b13.
Performed a total of 0 changes.

yosys> opt_merge

3.151. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b13'.
Removed a total of 0 cells.

yosys> opt_share

3.152. Executing OPT_SHARE pass.

yosys> opt_dff -nodffe

3.153. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.154. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b13..
Removed 0 unused cells and 175 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.155. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.
MAX OPT ITERATION = 1

yosys> opt_ffinv

3.156. Executing OPT_FFINV pass (push inverters through FFs).
Discovering LUTs.
Pushed 0 inverters.

yosys> stat

3.157. Printing statistics.

=== b13 ===

   Number of wires:                206
   Number of wire bits:            238
   Number of public wires:          29
   Number of public wire bits:      61
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 87
     $_DFFE_PP0N_                    1
     $_DFFE_PP0P_                   20
     $_DFF_PP0_                     24
     $lut                           42


yosys> dfflegalize -cell $_DFF_?_ 0 -cell $_DFFE_??_ 0 -cell $_DFF_???_ 0 -cell $_DFFE_????_ 0 -cell $_SDFF_???_ 0 -cell $_SDFFE_????_ 0 -cell $_DLATCH_?_ 0 -cell $_DLATCH_???_ 0

3.158. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

yosys> stat

3.159. Printing statistics.

=== b13 ===

   Number of wires:                206
   Number of wire bits:            238
   Number of public wires:          29
   Number of public wire bits:      61
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 87
     $_DFFE_PP0N_                    1
     $_DFFE_PP0P_                   20
     $_DFF_PP0_                     24
     $lut                           42


yosys> techmap -map +/techmap.v -map +/rapidsilicon/genesis2/ffs_map.v

3.160. Executing TECHMAP pass (map to technology primitives).

3.160.1. Executing Verilog-2005 frontend: /nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.160.2. Executing Verilog-2005 frontend: /nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/ffs_map.v
Parsing Verilog input from `/nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/ffs_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP0N_'.
Generating RTLIL representation for module `\$_DFFE_PN0P_'.
Generating RTLIL representation for module `\$_DFFE_PN0N_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP1N_'.
Generating RTLIL representation for module `\$_DFFE_PN1P_'.
Generating RTLIL representation for module `\$_DFFE_PN1N_'.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP0N_'.
Generating RTLIL representation for module `\$_DFFE_NN0P_'.
Generating RTLIL representation for module `\$_DFFE_NN0N_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_NP1N_'.
Generating RTLIL representation for module `\$_DFFE_NN1P_'.
Generating RTLIL representation for module `\$_DFFE_NN1N_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PN0_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NN0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFF_PN1_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_NN1_'.
Generating RTLIL representation for module `\$_SDFFE_PP0P_'.
Generating RTLIL representation for module `\$_SDFFE_PP0N_'.
Generating RTLIL representation for module `\$_SDFFE_PN0P_'.
Generating RTLIL representation for module `\$_SDFFE_PN0N_'.
Generating RTLIL representation for module `\$_SDFFE_PP1P_'.
Generating RTLIL representation for module `\$_SDFFE_PP1N_'.
Generating RTLIL representation for module `\$_SDFFE_PN1P_'.
Generating RTLIL representation for module `\$_SDFFE_PN1N_'.
Generating RTLIL representation for module `\$_SDFFE_NP0P_'.
Generating RTLIL representation for module `\$_SDFFE_NP0N_'.
Generating RTLIL representation for module `\$_SDFFE_NN0P_'.
Generating RTLIL representation for module `\$_SDFFE_NN0N_'.
Generating RTLIL representation for module `\$_SDFFE_NP1P_'.
Generating RTLIL representation for module `\$_SDFFE_NP1N_'.
Generating RTLIL representation for module `\$_SDFFE_NN1P_'.
Generating RTLIL representation for module `\$_SDFFE_NN1N_'.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCH_PP0_'.
Generating RTLIL representation for module `\$_DLATCH_NP0_'.
Generating RTLIL representation for module `\$_DLATCH_PN0_'.
Generating RTLIL representation for module `\$_DLATCH_NN0_'.
Generating RTLIL representation for module `\$_DLATCH_PP1_'.
Generating RTLIL representation for module `\$_DLATCH_NP1_'.
Generating RTLIL representation for module `\$_DLATCH_PN1_'.
Generating RTLIL representation for module `\$_DLATCH_NN1_'.
Successfully finished Verilog frontend.

3.160.3. Continuing TECHMAP pass.
Using template \$_DFF_PP0_ for cells of type $_DFF_PP0_.
Using template \$_DFFE_PP0P_ for cells of type $_DFFE_PP0P_.
Using extmapper simplemap for cells of type $lut.
Using template \$_DFFE_PP0N_ for cells of type $_DFFE_PP0N_.
Using extmapper simplemap for cells of type $logic_not.
No more expansions possible.
<suppressed ~223 debug messages>

yosys> opt_expr -mux_undef

3.161. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.
<suppressed ~706 debug messages>

yosys> simplemap

3.162. Executing SIMPLEMAP pass (map simple cells to gate primitives).

yosys> opt_expr

3.163. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.

yosys> opt_merge

3.164. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b13'.
<suppressed ~249 debug messages>
Removed a total of 83 cells.

yosys> opt_dff -nodffe -nosdff

3.165. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.166. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b13..
Removed 0 unused cells and 284 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.167. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.
<suppressed ~17 debug messages>

yosys> opt_merge -nomux

3.168. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b13'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

yosys> opt_muxtree

3.169. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b13..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.170. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b13.
Performed a total of 0 changes.

yosys> opt_merge

3.171. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b13'.
Removed a total of 0 cells.

yosys> opt_share

3.172. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.173. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.174. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b13..
Removed 0 unused cells and 7 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.175. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.
MAX OPT ITERATION = 1

yosys> abc -script /tmp/yosys_Ur1KeP/abc_tmp_2.scr

3.176. Executing ABC pass (technology mapping using ABC).

3.176.1. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Extracted 149 gates and 196 wires to a netlist network with 45 inputs and 39 outputs.

3.176.1.1. Executing ABC.
DE:   #PIs =  45  #Luts =    43  Max Lvl =   3  Avg Lvl =   1.18  [   0.13 sec. at Pass 0]{firstMap}[1]
DE:   #PIs =  45  #Luts =    43  Max Lvl =   3  Avg Lvl =   1.18  [   0.41 sec. at Pass 1]{initMapFlow}[2]
DE:   #PIs =  45  #Luts =    43  Max Lvl =   3  Avg Lvl =   1.18  [   0.35 sec. at Pass 2]{map}[2]
DE:   #PIs =  45  #Luts =    43  Max Lvl =   3  Avg Lvl =   1.18  [   0.15 sec. at Pass 3]{postMap}[6]
DE:   #PIs =  45  #Luts =    43  Max Lvl =   3  Avg Lvl =   1.18  [   0.30 sec. at Pass 4]{map}[12]
DE:   #PIs =  45  #Luts =    43  Max Lvl =   3  Avg Lvl =   1.18  [   0.36 sec. at Pass 5]{postMap}[36]
DE:   #PIs =  45  #Luts =    43  Max Lvl =   3  Avg Lvl =   1.18  [   1.52 sec. at Pass 6]{pushMap}[100]
DE:   #PIs =  45  #Luts =    43  Max Lvl =   3  Avg Lvl =   1.18  [   1.25 sec. at Pass 7]{finalMap}[100]

yosys> opt_expr

3.177. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.

yosys> opt_merge -nomux

3.178. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b13'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.179. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b13..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.180. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b13.
Performed a total of 0 changes.

yosys> opt_merge

3.181. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b13'.
Removed a total of 0 cells.

yosys> opt_share

3.182. Executing OPT_SHARE pass.

yosys> opt_dff -nodffe

3.183. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.184. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b13..
Removed 0 unused cells and 171 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.185. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.
MAX OPT ITERATION = 1

yosys> hierarchy -check

3.186. Executing HIERARCHY pass (managing design hierarchy).

3.186.1. Analyzing design hierarchy..
Top module:  \b13

3.186.2. Analyzing design hierarchy..
Top module:  \b13
Removed 0 unused modules.

yosys> stat

3.187. Printing statistics.

=== b13 ===

   Number of wires:                207
   Number of wire bits:            239
   Number of public wires:          29
   Number of public wire bits:      61
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 88
     $lut                           43
     dffr                           24
     dffre                          21


yosys> opt_clean -purge

3.188. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b13..

yosys> write_verilog -noattr -nohex synthesized.v

3.189. Executing Verilog backend.
Dumping module `\b13'.

End of script. Logfile hash: bb1c57c261, CPU: user 1.18s system 0.09s, MEM: 26.91 MB peak
Yosys 0.18+10 (git sha1 92b23013e, gcc 11.2.0 -fPIC -Os)
Time spent: 98% 6x abc (106 sec), 0% 15x read_verilog (0 sec), ...
real 25.04
user 66.05
sys 42.00
