
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys-Verific 0.0.64
 Yosys 0.18+10 (git sha1 c98b0e94e, gcc 9.4.0 -fPIC -Os)


-- Executing script file `yosys.ys' --
echo on

yosys> plugin -i synth-rs

yosys> read -verific

yosys> read -incdir .

yosys> verific -vlog-incdir .

1. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific May22_SW_Release, released at Wed Jun  1 00:39:28 2022.

yosys> verilog_defaults -add -I.

yosys> read -vhdl b13.vhd

yosys> verific -vhdl b13.vhd

2. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific May22_SW_Release, released at Wed Jun  1 00:39:28 2022.
VERIFIC-INFO [VHDL-1504] default VHDL library search path is now "/nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008"
VERIFIC-COMMENT [VHDL-1481] Analyzing VHDL file 'b13.vhd'
VERIFIC-COMMENT [VHDL-1493] Restoring VHDL unit 'std.standard' from file '/nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008/std/standard.vdb'
VERIFIC-INFO [VHDL-1012] b13.vhd:1: analyzing entity 'b13'
VERIFIC-INFO [VHDL-1010] b13.vhd:21: analyzing architecture 'behav'

yosys> synth_rs -top b13 -tech genesis -goal area -de -verilog synthesized.v

3. Executing synth_rs pass: v0.4.65

yosys> read_verilog -lib -specify -nomem2reg +/rapidsilicon/common/cells_sim.v +/rapidsilicon/genesis/cells_sim.v +/rapidsilicon/genesis/dsp_sim.v

3.1. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\inv'.
Generating RTLIL representation for module `\buff'.
Generating RTLIL representation for module `\logic_0'.
Generating RTLIL representation for module `\logic_1'.
Generating RTLIL representation for module `\gclkbuff'.
Successfully finished Verilog frontend.

3.2. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/cells_sim.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\dffsre'.
Generating RTLIL representation for module `\dffnsre'.
Generating RTLIL representation for module `\latchsre'.
Generating RTLIL representation for module `\latchnsre'.
Generating RTLIL representation for module `\io_scff'.
Generating RTLIL representation for module `\scff'.
Generating RTLIL representation for module `\sh_dff'.
Generating RTLIL representation for module `\adder_carry'.
Generating RTLIL representation for module `\sdffr'.
Generating RTLIL representation for module `\sdffs'.
Generating RTLIL representation for module `\TDP_BRAM18'.
Generating RTLIL representation for module `\TDP36K'.
Successfully finished Verilog frontend.

3.3. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/dsp_sim.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/dsp_sim.v' to AST representation.
Generating RTLIL representation for module `\RS_DSP1'.
Generating RTLIL representation for module `\RS_DSP2'.
Generating RTLIL representation for module `\RS_DSP2_MULT'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGIN_REGOUT'.
Generating RTLIL representation for module `\dsp_t1_20x18x64_cfg_ports'.
Generating RTLIL representation for module `\dsp_t1_10x9x32_cfg_ports'.
Generating RTLIL representation for module `\dsp_t1_sim_cfg_ports'.
Generating RTLIL representation for module `\RS_DSP3'.
Generating RTLIL representation for module `\RS_DSP3_MULT'.
Generating RTLIL representation for module `\RS_DSP3_MULT_REGIN'.
Generating RTLIL representation for module `\RS_DSP3_MULT_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULT_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULTADD'.
Generating RTLIL representation for module `\RS_DSP3_MULTADD_REGIN'.
Generating RTLIL representation for module `\RS_DSP3_MULTADD_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULTADD_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULTACC'.
Generating RTLIL representation for module `\RS_DSP3_MULTACC_REGIN'.
Generating RTLIL representation for module `\RS_DSP3_MULTACC_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULTACC_REGIN_REGOUT'.
Generating RTLIL representation for module `\dsp_t1_20x18x64_cfg_params'.
Generating RTLIL representation for module `\dsp_t1_10x9x32_cfg_params'.
Generating RTLIL representation for module `\dsp_t1_sim_cfg_params'.
Successfully finished Verilog frontend.

yosys> hierarchy -check -top b13

3.4. Executing HIERARCHY pass (managing design hierarchy).
VERIFIC-INFO [VHDL-1067] b13.vhd:1: processing 'b13(BEHAV)'
VERIFIC-INFO [VHDL-1172] b13.vhd:125: 'others' clause is never selected
VERIFIC-INFO [VHDL-1172] b13.vhd:167: 'others' clause is never selected
VERIFIC-INFO [VHDL-1172] b13.vhd:203: 'others' clause is never selected
Importing module b13.

3.4.1. Analyzing design hierarchy..
Top module:  \b13

3.4.2. Analyzing design hierarchy..
Top module:  \b13
Removed 0 unused modules.

yosys> proc

3.5. Executing PROC pass (convert processes to netlists).

yosys> proc_clean

3.5.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> proc_rmdead

3.5.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

yosys> proc_prune

3.5.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

yosys> proc_init

3.5.4. Executing PROC_INIT pass (extract init attributes).

yosys> proc_arst

3.5.5. Executing PROC_ARST pass (detect async resets in processes).

yosys> proc_rom

3.5.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

yosys> proc_mux

3.5.7. Executing PROC_MUX pass (convert decision trees to multiplexers).

yosys> proc_dlatch

3.5.8. Executing PROC_DLATCH pass (convert process syncs to latches).

yosys> proc_dff

3.5.9. Executing PROC_DFF pass (convert process syncs to FFs).

yosys> proc_memwr

3.5.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

yosys> proc_clean

3.5.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> opt_expr -keepdc

3.5.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.
<suppressed ~25 debug messages>

yosys> demuxmap

3.6. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> flatten

3.7. Executing FLATTEN pass (flatten design).

yosys> demuxmap

3.8. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> tribuf -logic -formal

3.9. Executing TRIBUF pass.

yosys> deminout

3.10. Executing DEMINOUT pass (demote inout ports to input or output).

yosys> opt_expr

3.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.

yosys> opt_clean

3.12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b13..
Removed 3 unused cells and 57 unused wires.
<suppressed ~18 debug messages>

yosys> check

3.13. Executing CHECK pass (checking for obvious problems).
Checking module b13...
Found and reported 0 problems.

yosys> opt_expr

3.14. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.

yosys> opt_merge -nomux

3.15. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b13'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.16. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b13..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~27 debug messages>

yosys> opt_reduce

3.17. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b13.
Performed a total of 0 changes.

yosys> opt_merge

3.18. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b13'.
Removed a total of 0 cells.

yosys> opt_share

3.19. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.20. Executing OPT_DFF pass (perform DFF optimizations).
Changing const-value async load to async reset on $verific$tx_end_reg$b13.vhd:294$235 ($aldff) from module b13.
Changing const-value async load to async reset on $verific$tx_conta_reg$b13.vhd:294$238 ($aldff) from module b13.
Changing const-value async load to async reset on $verific$tre_reg$b13.vhd:239$212 ($aldff) from module b13.
Changing const-value async load to async reset on $verific$soc_reg$b13.vhd:127$150 ($aldff) from module b13.
Changing const-value async load to async reset on $verific$shot_reg$b13.vhd:169$180 ($aldff) from module b13.
Changing const-value async load to async reset on $verific$send_reg$b13.vhd:205$190 ($aldff) from module b13.
Changing const-value async load to async reset on $verific$send_en_reg$b13.vhd:239$210 ($aldff) from module b13.
Changing const-value async load to async reset on $verific$send_data_reg$b13.vhd:127$153 ($aldff) from module b13.
Changing const-value async load to async reset on $verific$rdy_reg$b13.vhd:169$177 ($aldff) from module b13.
Changing const-value async load to async reset on $verific$out_reg_reg$b13.vhd:239$211 ($aldff) from module b13.
Changing const-value async load to async reset on $verific$next_bit_reg$b13.vhd:294$237 ($aldff) from module b13.
Changing const-value async load to async reset on $verific$mux_en_reg$b13.vhd:127$155 ($aldff) from module b13.
Changing const-value async load to async reset on $verific$mpx_reg$b13.vhd:169$179 ($aldff) from module b13.
Changing const-value async load to async reset on $verific$load_reg$b13.vhd:205$189 ($aldff) from module b13.
Changing const-value async load to async reset on $verific$load_dato_reg$b13.vhd:127$154 ($aldff) from module b13.
Changing const-value async load to async reset on $verific$itfc_state_reg$b13.vhd:205$192 ($aldff) from module b13.
Changing const-value async load to async reset on $verific$error_reg$b13.vhd:239$213 ($aldff) from module b13.
Changing const-value async load to async reset on $verific$data_out_reg$b13.vhd:294$236 ($aldff) from module b13.
Changing const-value async load to async reset on $verific$conta_tmp_reg$b13.vhd:127$152 ($aldff) from module b13.
Changing const-value async load to async reset on $verific$confirm_reg$b13.vhd:205$191 ($aldff) from module b13.
Changing const-value async load to async reset on $verific$canale_reg$b13.vhd:127$151 ($aldff) from module b13.
Changing const-value async load to async reset on $verific$add_mpx2_reg$b13.vhd:169$178 ($aldff) from module b13.
Changing const-value async load to async reset on $verific$S2_reg$b13.vhd:169$176 ($aldff) from module b13.
Changing const-value async load to async reset on $verific$S1_reg$b13.vhd:127$149 ($aldff) from module b13.

yosys> opt_clean

3.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b13..

yosys> opt_expr

3.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.
MAX OPT ITERATION = 1

yosys> fsm -encoding binary

3.23. Executing FSM pass (extract and optimize FSM).

yosys> fsm_detect

3.23.1. Executing FSM_DETECT pass (finding FSMs in design).

yosys> fsm_extract

3.23.2. Executing FSM_EXTRACT pass (extracting FSM from design).

yosys> fsm_opt

3.23.3. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> opt_clean

3.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b13..

yosys> fsm_opt

3.23.5. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> fsm_recode -encoding binary

3.23.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

yosys> fsm_info

3.23.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

yosys> fsm_map

3.23.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

yosys> opt_expr

3.24. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.

yosys> opt_merge -nomux

3.25. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b13'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.26. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b13..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~27 debug messages>

yosys> opt_reduce

3.27. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b13.
Performed a total of 0 changes.

yosys> opt_merge

3.28. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b13'.
Removed a total of 0 cells.

yosys> opt_share

3.29. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -sat

3.30. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $verific$tx_conta_reg$b13.vhd:294$238 ($adff) from module b13 (D = $verific$n1576$120, Q = \tx_conta).
Adding EN signal on $verific$out_reg_reg$b13.vhd:239$211 ($adff) from module b13 (D = \data_in, Q = \out_reg).
Adding EN signal on $verific$next_bit_reg$b13.vhd:294$237 ($adff) from module b13 (D = $verific$n1506$115, Q = \next_bit).
Adding EN signal on $verific$error_reg$b13.vhd:239$213 ($adff) from module b13 (D = $verific$n1079$46, Q = \error).
Setting constant 0-bit at position 3 on $verific$conta_tmp_reg$b13.vhd:127$152 ($adff) from module b13.
Setting constant 0-bit at position 7 on $auto$ff.cc:262:slice$248 ($adffe) from module b13.
Setting constant 0-bit at position 8 on $auto$ff.cc:262:slice$248 ($adffe) from module b13.
Setting constant 0-bit at position 9 on $auto$ff.cc:262:slice$248 ($adffe) from module b13.

yosys> opt_clean

3.31. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b13..
Removed 5 unused cells and 5 unused wires.
<suppressed ~6 debug messages>

yosys> opt_expr

3.32. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.
<suppressed ~1 debug messages>

yosys> opt_muxtree

3.33. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b13..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~25 debug messages>

yosys> opt_reduce

3.34. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b13.
Performed a total of 0 changes.

yosys> opt_merge

3.35. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b13'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

yosys> opt_share

3.36. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -sat

3.37. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 3 on $verific$canale_reg$b13.vhd:127$151 ($adff) from module b13.

yosys> opt_clean

3.38. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b13..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.39. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.

yosys> opt_muxtree

3.40. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b13..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~25 debug messages>

yosys> opt_reduce

3.41. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b13.
Performed a total of 0 changes.

yosys> opt_merge

3.42. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b13'.
Removed a total of 0 cells.

yosys> opt_share

3.43. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -sat

3.44. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.45. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b13..

yosys> opt_expr

3.46. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.
MAX OPT ITERATION = 3

yosys> wreduce -keepdc

3.47. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 3) from mux cell b13.$verific$mux_18$b13.vhd:103$130 ($mux).
Removed top 1 bits (of 4) from port A of cell b13.$verific$add_23$b13.vhd:107$133 ($add).
Removed top 3 bits (of 4) from port B of cell b13.$verific$add_23$b13.vhd:107$133 ($add).
Removed top 1 bits (of 5) from port Y of cell b13.$verific$add_23$b13.vhd:107$133 ($add).
Removed top 1 bits (of 3) from mux cell b13.$verific$mux_36$b13.vhd:124$140 ($mux).
Removed top 1 bits (of 2) from mux cell b13.$verific$mux_61$b13.vhd:146$157 ($mux).
Removed top 1 bits (of 2) from mux cell b13.$verific$mux_105$b13.vhd:190$182 ($mux).
Removed top 3 bits (of 10) from port A of cell b13.$verific$LessThan_162$b13.vhd:255$214 ($lt).
Removed top 3 bits (of 10) from port B of cell b13.$verific$LessThan_162$b13.vhd:255$214 ($lt).
Removed top 3 bits (of 10) from port A of cell b13.$verific$add_188$b13.vhd:291$226 ($add).
Removed top 9 bits (of 10) from port B of cell b13.$verific$add_188$b13.vhd:291$226 ($add).
Removed top 2 bits (of 10) from port Y of cell b13.$verific$add_188$b13.vhd:291$226 ($add).
Removed top 3 bits (of 10) from mux cell b13.$verific$mux_193$b13.vhd:292$230 ($mux).
Removed top 1 bits (of 8) from port Y of cell b13.$verific$add_188$b13.vhd:291$226 ($add).
Removed top 3 bits (of 10) from wire b13.$verific$n1546$117.
Removed top 3 bits (of 10) from wire b13.$verific$n1576$120.
Removed top 1 bits (of 3) from wire b13.$verific$n243$70.
Removed top 1 bits (of 3) from wire b13.$verific$n442$80.
Removed top 1 bits (of 2) from wire b13.$verific$n588$86.
Removed top 1 bits (of 2) from wire b13.$verific$n898$95.
Removed top 1 bits (of 4) from wire b13.conta_tmp.
Removed top 3 bits (of 10) from wire b13.tx_conta.

yosys> peepopt

3.48. Executing PEEPOPT pass (run peephole optimizers).

yosys> opt_clean

3.49. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b13..
Removed 0 unused cells and 9 unused wires.
<suppressed ~1 debug messages>

yosys> demuxmap

3.50. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> stat

3.51. Printing statistics.

=== b13 ===

   Number of wires:                 94
   Number of wire bits:            172
   Number of public wires:          29
   Number of public wire bits:      61
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 89
     $add                            2
     $adff                          20
     $adffe                          4
     $bmux                          19
     $eq                             1
     $lt                             1
     $mux                           36
     $not                            2
     $or                             1
     $reduce_and                     2
     $reduce_bool                    1


yosys> wreduce t:$mul

3.52. Executing WREDUCE pass (reducing word size of cells).

yosys> rs_dsp_macc

3.53. Executing RS_DSP_MACC pass.

yosys> techmap -map +/mul2dsp.v -D DSP_A_MAXWIDTH=20 -D DSP_B_MAXWIDTH=18 -D DSP_A_MINWIDTH=11 -D DSP_B_MINWIDTH=10 -D DSP_NAME=$__RS_MUL20X18

3.54. Executing TECHMAP pass (map to technology primitives).

3.54.1. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/mul2dsp.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/mul2dsp.v' to AST representation.
Generating RTLIL representation for module `\_80_mul'.
Generating RTLIL representation for module `\_90_soft_mul'.
Successfully finished Verilog frontend.

3.54.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

yosys> chtype -set $mul t:$__soft_mul

yosys> techmap -map +/mul2dsp.v -D DSP_A_MAXWIDTH=10 -D DSP_B_MAXWIDTH=9 -D DSP_A_MINWIDTH=4 -D DSP_B_MINWIDTH=4 -D DSP_NAME=$__RS_MUL10X9

3.55. Executing TECHMAP pass (map to technology primitives).

3.55.1. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/mul2dsp.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/mul2dsp.v' to AST representation.
Generating RTLIL representation for module `\_80_mul'.
Generating RTLIL representation for module `\_90_soft_mul'.
Successfully finished Verilog frontend.

3.55.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

yosys> chtype -set $mul t:$__soft_mul

yosys> techmap -map +/rapidsilicon/genesis/dsp_map.v -D USE_DSP_CFG_PARAMS=0

3.56. Executing TECHMAP pass (map to technology primitives).

3.56.1. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/dsp_map.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/dsp_map.v' to AST representation.
Generating RTLIL representation for module `\$__RS_MUL20X18'.
Generating RTLIL representation for module `\$__RS_MUL10X9'.
Successfully finished Verilog frontend.

3.56.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

yosys> rs_dsp_simd

3.57. Executing RS_DSP_SIMD pass.

yosys> techmap -map +/rapidsilicon/genesis/dsp_final_map.v

3.58. Executing TECHMAP pass (map to technology primitives).

3.58.1. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/dsp_final_map.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/dsp_final_map.v' to AST representation.
Generating RTLIL representation for module `\dsp_t1_20x18x64_cfg_ports'.
Generating RTLIL representation for module `\dsp_t1_10x9x32_cfg_ports'.
Generating RTLIL representation for module `\dsp_t1_20x18x64_cfg_params'.
Generating RTLIL representation for module `\dsp_t1_10x9x32_cfg_params'.
Successfully finished Verilog frontend.

3.58.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~6 debug messages>

yosys> rs_dsp_io_regs

3.59. Executing RS_DSP_IO_REGS pass.

yosys> alumacc

3.60. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module b13:
  creating $macc model for $verific$add_188$b13.vhd:291$226 ($add).
  creating $macc model for $verific$add_23$b13.vhd:107$133 ($add).
  creating $alu model for $macc $verific$add_23$b13.vhd:107$133.
  creating $alu model for $macc $verific$add_188$b13.vhd:291$226.
  creating $alu model for $verific$LessThan_162$b13.vhd:255$214 ($lt): new $alu
  creating $alu cell for $verific$LessThan_162$b13.vhd:255$214: $auto$alumacc.cc:485:replace_alu$272
  creating $alu cell for $verific$add_188$b13.vhd:291$226: $auto$alumacc.cc:485:replace_alu$277
  creating $alu cell for $verific$add_23$b13.vhd:107$133: $auto$alumacc.cc:485:replace_alu$280
  created 3 $alu and 0 $macc cells.

yosys> opt_expr

3.61. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.
<suppressed ~3 debug messages>

yosys> opt_merge -nomux

3.62. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b13'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.63. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b13..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~25 debug messages>

yosys> opt_reduce

3.64. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b13.
Performed a total of 0 changes.

yosys> opt_merge

3.65. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b13'.
Removed a total of 0 cells.

yosys> opt_share

3.66. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.67. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.68. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b13..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.69. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.
MAX OPT ITERATION = 1

yosys> stat

3.70. Printing statistics.

=== b13 ===

   Number of wires:                101
   Number of wire bits:            215
   Number of public wires:          29
   Number of public wire bits:      61
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 90
     $adff                          20
     $adffe                          4
     $alu                            3
     $bmux                          19
     $eq                             1
     $mux                           36
     $not                            3
     $or                             1
     $reduce_and                     2
     $reduce_bool                    1


yosys> memory -nomap

3.71. Executing MEMORY pass.

yosys> opt_mem

3.71.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

yosys> opt_mem_priority

3.71.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

yosys> opt_mem_feedback

3.71.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

yosys> memory_bmux2rom

3.71.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

yosys> memory_dff

3.71.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).
Checking read port `$auto$memory_bmux2rom.cc:63:execute$286'[0] in module `\b13': merging output FF to cell.
Checking read port `$auto$memory_bmux2rom.cc:63:execute$283'[0] in module `\b13': FF found, but with a mux select that doesn't seem to correspond to transparency logic.
Checking read port address `$auto$memory_bmux2rom.cc:63:execute$283'[0] in module `\b13': no address FF found.

yosys> opt_clean

3.71.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b13..
Removed 1 unused cells and 5 unused wires.
<suppressed ~2 debug messages>

yosys> memory_share

3.71.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

yosys> opt_mem_widen

3.71.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

yosys> opt_clean

3.71.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b13..

yosys> memory_collect

3.71.10. Executing MEMORY_COLLECT pass (generating $mem cells).

yosys> stat

3.72. Printing statistics.

=== b13 ===

   Number of wires:                100
   Number of wire bits:            211
   Number of public wires:          29
   Number of public wire bits:      61
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 89
     $adff                          20
     $adffe                          3
     $alu                            3
     $bmux                          17
     $eq                             1
     $mem_v2                         2
     $mux                           36
     $not                            3
     $or                             1
     $reduce_and                     2
     $reduce_bool                    1


yosys> muxpack

3.73. Executing MUXPACK pass ($mux cell cascades to $pmux).
Converted 0 (p)mux cells into 0 pmux cells.
<suppressed ~29 debug messages>

yosys> opt_clean

3.74. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b13..

yosys> memory_bram -rules +/rapidsilicon/genesis/brams.txt

3.75. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).
Processing b13.$auto$memory_bmux2rom.cc:63:execute$283:
  Properties: ports=1 bits=16 rports=1 wports=0 dbits=1 abits=4 words=16
  Checking rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 1):
    Bram geometry: abits=10 dbits=36 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_TDP: awaste=1008 dwaste=35 bwaste=36848 waste=36848 efficiency=0
    Rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 1) rejected: requirement 'min bits 128' not met.
  Checking rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 2):
    Bram geometry: abits=11 dbits=18 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_TDP: awaste=2032 dwaste=17 bwaste=36848 waste=36848 efficiency=0
    Rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 2) rejected: requirement 'min bits 128' not met.
  Checking rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 3):
    Bram geometry: abits=12 dbits=9 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_TDP: awaste=4080 dwaste=8 bwaste=36848 waste=36848 efficiency=0
    Rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 3) rejected: requirement 'min bits 128' not met.
  Checking rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 4):
    Bram geometry: abits=13 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_TDP: awaste=8176 dwaste=3 bwaste=32752 waste=32752 efficiency=0
    Rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 4) rejected: requirement 'min bits 128' not met.
  Checking rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 5):
    Bram geometry: abits=14 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_TDP: awaste=16368 dwaste=1 bwaste=32752 waste=32752 efficiency=0
    Rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 5) rejected: requirement 'min bits 128' not met.
  Checking rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 6):
    Bram geometry: abits=15 dbits=1 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_TDP: awaste=32752 dwaste=0 bwaste=32752 waste=32752 efficiency=0
    Rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 6) rejected: requirement 'min bits 128' not met.
  Checking rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 1):
    Bram geometry: abits=10 dbits=36 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_SDP: awaste=1008 dwaste=35 bwaste=36848 waste=36848 efficiency=0
    Rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 1) rejected: requirement 'min bits 128' not met.
  Checking rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 2):
    Bram geometry: abits=11 dbits=18 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_SDP: awaste=2032 dwaste=17 bwaste=36848 waste=36848 efficiency=0
    Rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 2) rejected: requirement 'min bits 128' not met.
  Checking rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 3):
    Bram geometry: abits=12 dbits=9 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_SDP: awaste=4080 dwaste=8 bwaste=36848 waste=36848 efficiency=0
    Rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 3) rejected: requirement 'min bits 128' not met.
  Checking rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 4):
    Bram geometry: abits=13 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_SDP: awaste=8176 dwaste=3 bwaste=32752 waste=32752 efficiency=0
    Rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 4) rejected: requirement 'min bits 128' not met.
  Checking rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 5):
    Bram geometry: abits=14 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_SDP: awaste=16368 dwaste=1 bwaste=32752 waste=32752 efficiency=0
    Rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 5) rejected: requirement 'min bits 128' not met.
  Checking rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 6):
    Bram geometry: abits=15 dbits=1 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_SDP: awaste=32752 dwaste=0 bwaste=32752 waste=32752 efficiency=0
    Rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 6) rejected: requirement 'min bits 128' not met.
  No acceptable bram resources found.
Processing b13.$auto$memory_bmux2rom.cc:63:execute$286:
  Properties: ports=1 bits=64 rports=1 wports=0 dbits=4 abits=4 words=16
  Checking rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 1):
    Bram geometry: abits=10 dbits=36 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_TDP: awaste=1008 dwaste=32 bwaste=36800 waste=36800 efficiency=0
    Rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 1) rejected: requirement 'min bits 128' not met.
  Checking rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 2):
    Bram geometry: abits=11 dbits=18 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_TDP: awaste=2032 dwaste=14 bwaste=36800 waste=36800 efficiency=0
    Rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 2) rejected: requirement 'min bits 128' not met.
  Checking rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 3):
    Bram geometry: abits=12 dbits=9 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_TDP: awaste=4080 dwaste=5 bwaste=36800 waste=36800 efficiency=0
    Rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 3) rejected: requirement 'min bits 128' not met.
  Checking rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 4):
    Bram geometry: abits=13 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_TDP: awaste=8176 dwaste=0 bwaste=32704 waste=32704 efficiency=0
    Rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 4) rejected: requirement 'min bits 128' not met.
  Checking rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 5):
    Bram geometry: abits=14 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_TDP: awaste=16368 dwaste=0 bwaste=32736 waste=32736 efficiency=0
    Rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 5) rejected: requirement 'min bits 128' not met.
  Checking rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 6):
    Bram geometry: abits=15 dbits=1 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_TDP: awaste=32752 dwaste=0 bwaste=32752 waste=32752 efficiency=0
    Rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 6) rejected: requirement 'min bits 128' not met.
  Checking rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 1):
    Bram geometry: abits=10 dbits=36 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_SDP: awaste=1008 dwaste=32 bwaste=36800 waste=36800 efficiency=0
    Rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 1) rejected: requirement 'min bits 128' not met.
  Checking rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 2):
    Bram geometry: abits=11 dbits=18 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_SDP: awaste=2032 dwaste=14 bwaste=36800 waste=36800 efficiency=0
    Rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 2) rejected: requirement 'min bits 128' not met.
  Checking rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 3):
    Bram geometry: abits=12 dbits=9 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_SDP: awaste=4080 dwaste=5 bwaste=36800 waste=36800 efficiency=0
    Rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 3) rejected: requirement 'min bits 128' not met.
  Checking rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 4):
    Bram geometry: abits=13 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_SDP: awaste=8176 dwaste=0 bwaste=32704 waste=32704 efficiency=0
    Rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 4) rejected: requirement 'min bits 128' not met.
  Checking rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 5):
    Bram geometry: abits=14 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_SDP: awaste=16368 dwaste=0 bwaste=32736 waste=32736 efficiency=0
    Rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 5) rejected: requirement 'min bits 128' not met.
  Checking rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 6):
    Bram geometry: abits=15 dbits=1 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_SDP: awaste=32752 dwaste=0 bwaste=32752 waste=32752 efficiency=0
    Rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 6) rejected: requirement 'min bits 128' not met.
  No acceptable bram resources found.

yosys> techmap -map +/rapidsilicon/genesis/brams_map.v

3.76. Executing TECHMAP pass (map to technology primitives).

3.76.1. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/brams_map.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__RS_FACTOR_BRAM36_TDP'.
Generating RTLIL representation for module `\$__RS_FACTOR_BRAM18_TDP'.
/nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/brams_map.v:236: Warning: Range [2:0] select out of bounds on signal `\DOP': Setting 1 MSB bits to undef.
Generating RTLIL representation for module `\$__RS_FACTOR_BRAM36_SDP'.
Successfully finished Verilog frontend.

3.76.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~5 debug messages>

yosys> pmuxtree

3.77. Executing PMUXTREE pass.

yosys> muxpack

3.78. Executing MUXPACK pass ($mux cell cascades to $pmux).
Converted 0 (p)mux cells into 0 pmux cells.
<suppressed ~29 debug messages>

yosys> memory_map

3.79. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).
Mapping memory $auto$memory_bmux2rom.cc:63:execute$283 in module \b13:
  created 16 $dff cells and 0 static cells of width 1.
  read interface: 0 $dff and 15 $mux cells.
  write interface: 0 write mux blocks.
Mapping memory $auto$memory_bmux2rom.cc:63:execute$286 in module \b13:
  created 16 $dff cells and 0 static cells of width 4.
Extracted data FF from read port 0 of b13.$auto$memory_bmux2rom.cc:63:execute$286: $$auto$memory_bmux2rom.cc:63:execute$286$rdreg[0]
  read interface: 1 $dff and 15 $mux cells.
  write interface: 0 write mux blocks.

yosys> stat

3.80. Printing statistics.

=== b13 ===

   Number of wires:                225
   Number of wire bits:            525
   Number of public wires:          29
   Number of public wire bits:      61
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                150
     $adff                          20
     $adffe                          4
     $alu                            3
     $bmux                          17
     $dff                           32
     $eq                             1
     $mux                           66
     $not                            3
     $or                             1
     $reduce_and                     2
     $reduce_bool                    1


yosys> techmap -map +/techmap.v -map +/rapidsilicon/genesis/arith_map.v

3.81. Executing TECHMAP pass (map to technology primitives).

3.81.1. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.81.2. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/arith_map.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_rs_alu'.
Successfully finished Verilog frontend.

3.81.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $reduce_bool.
Using template $paramod$dbcdc7e8aa1a4080cea2deda6fdc8772064f4d90\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $bmux.
Using extmapper simplemap for cells of type $adff.
Using extmapper simplemap for cells of type $adffe.
Using extmapper simplemap for cells of type $or.
Using template $paramod$103b4016182df467cceab67bcf3e18e6361ec0fd\_90_alu for cells of type $alu.
Using template $paramod$bfceb922395790c0ce92e9f9b5b428d4fc72cc30\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $and.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000111 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000100 for cells of type $lcu.
No more expansions possible.
<suppressed ~782 debug messages>

yosys> stat

3.82. Printing statistics.

=== b13 ===

   Number of wires:                383
   Number of wire bits:           4330
   Number of public wires:          29
   Number of public wire bits:      61
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                565
     $_AND_                         48
     $_DFFE_PP0P_                   20
     $_DFF_PP0_                     28
     $_DFF_P_                       80
     $_MUX_                        296
     $_NOT_                         22
     $_OR_                          28
     $_XOR_                         43


yosys> opt_expr

3.83. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.
<suppressed ~167 debug messages>

yosys> opt_merge -nomux

3.84. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b13'.
<suppressed ~48 debug messages>
Removed a total of 16 cells.

yosys> opt_muxtree

3.85. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b13..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.86. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b13.
Performed a total of 0 changes.

yosys> opt_merge

3.87. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b13'.
Removed a total of 0 cells.

yosys> opt_share

3.88. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.89. Executing OPT_DFF pass (perform DFF optimizations).
Handling const CLK on $auto$ff.cc:262:slice$989 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$986 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$990 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$753 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$755 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$572 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$570 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$569 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$546 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$554 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$581 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$579 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$578 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$552 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$577 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$551 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$580 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$550 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$901 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$931 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$935 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$939 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$943 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$947 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$951 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$955 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$959 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$963 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$967 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$971 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$975 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$979 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$983 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$987 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$991 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$988 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$928 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$929 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$930 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$932 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$933 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$934 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$936 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$937 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$938 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$940 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$941 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$942 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$944 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$945 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$946 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$948 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$949 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$950 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$952 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$953 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$954 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$956 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$957 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$958 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$960 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$961 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$962 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$964 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$965 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$966 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$968 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$969 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$970 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$972 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$973 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$974 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$976 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$977 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$978 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$980 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$981 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$982 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$984 ($_DFF_P_) from module b13 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$985 ($_DFF_P_) from module b13 (removing D path).

yosys> opt_clean

3.90. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b13..
Removed 16 unused cells and 233 unused wires.
<suppressed ~17 debug messages>

yosys> opt_expr

3.91. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.
<suppressed ~39 debug messages>

yosys> opt_muxtree

3.92. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b13..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.93. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b13.
Performed a total of 0 changes.

yosys> opt_merge

3.94. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b13'.
<suppressed ~39 debug messages>
Removed a total of 13 cells.

yosys> opt_share

3.95. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.96. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.97. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b13..
Removed 0 unused cells and 18 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.98. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.
<suppressed ~1 debug messages>

yosys> opt_muxtree

3.99. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b13..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.100. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b13.
Performed a total of 0 changes.

yosys> opt_merge

3.101. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b13'.
Removed a total of 0 cells.

yosys> opt_share

3.102. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.103. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.104. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b13..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.105. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.
MAX OPT ITERATION = 3

yosys> opt_expr -full

3.106. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.
<suppressed ~40 debug messages>

yosys> techmap -map +/techmap.v

3.107. Executing TECHMAP pass (map to technology primitives).

3.107.1. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.107.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~71 debug messages>

yosys> opt_expr

3.108. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.

yosys> opt_merge -nomux

3.109. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b13'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.110. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b13..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.111. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b13.
Performed a total of 0 changes.

yosys> opt_merge

3.112. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b13'.
Removed a total of 0 cells.

yosys> opt_dff -nosdff -nodffe -sat

3.113. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.114. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b13..
Removed 0 unused cells and 4 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.115. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.
MAX OPT ITERATION = 1

yosys> abc -dff

3.116. Executing ABC pass (technology mapping using ABC).

3.116.1. Summary of detected clock domains:
  30 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$255, arst=\reset, srst={ }
  9 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$252, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$auto$opt_dff.cc:194:make_patterns_logic$258, arst=\reset, srst={ }
  43 cells in clk=\clock, en=\send_en, arst=\reset, srst={ }
  148 cells in clk=\clock, en={ }, arst=\reset, srst={ }

3.116.2. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$255, asynchronously reset by \reset
Extracted 30 gates and 42 wires to a netlist network with 10 inputs and 3 outputs.

3.116.2.1. Executing ABC.

3.116.3. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$252, asynchronously reset by \reset
Extracted 9 gates and 19 wires to a netlist network with 10 inputs and 9 outputs.

3.116.3.1. Executing ABC.

3.116.4. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:194:make_patterns_logic$258, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.116.4.1. Executing ABC.

3.116.5. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by \send_en, asynchronously reset by \reset
Extracted 43 gates and 43 wires to a netlist network with 0 inputs and 1 outputs.

3.116.5.1. Executing ABC.

3.116.6. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, asynchronously reset by \reset
Extracted 148 gates and 155 wires to a netlist network with 5 inputs and 13 outputs.

3.116.6.1. Executing ABC.

yosys> abc -dff

3.117. Executing ABC pass (technology mapping using ABC).

3.117.1. Summary of detected clock domains:
  3 cells in clk=\clock, en=$abc$1399$auto$opt_dff.cc:194:make_patterns_logic$258, arst=\reset, srst={ }
  26 cells in clk=\clock, en=$abc$1333$auto$opt_dff.cc:219:make_patterns_logic$255, arst=\reset, srst={ }
  15 cells in clk=\clock, en=$abc$1373$auto$opt_dff.cc:219:make_patterns_logic$252, arst=\reset, srst={ }
  32 cells in clk=\clock, en=$abc$1438$lo21, arst=\reset, srst={ }
  109 cells in clk=\clock, en={ }, arst=\reset, srst={ }

3.117.2. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$1399$auto$opt_dff.cc:194:make_patterns_logic$258, asynchronously reset by \reset
Extracted 3 gates and 7 wires to a netlist network with 4 inputs and 2 outputs.

3.117.2.1. Executing ABC.

3.117.3. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$1333$auto$opt_dff.cc:219:make_patterns_logic$255, asynchronously reset by \reset
Extracted 26 gates and 32 wires to a netlist network with 6 inputs and 11 outputs.

3.117.3.1. Executing ABC.

3.117.4. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$1373$auto$opt_dff.cc:219:make_patterns_logic$252, asynchronously reset by \reset
Extracted 15 gates and 29 wires to a netlist network with 14 inputs and 8 outputs.

3.117.4.1. Executing ABC.

3.117.5. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$1438$lo21, asynchronously reset by \reset
Extracted 32 gates and 32 wires to a netlist network with 0 inputs and 1 outputs.

3.117.5.1. Executing ABC.

3.117.6. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, asynchronously reset by \reset
Extracted 109 gates and 121 wires to a netlist network with 12 inputs and 14 outputs.

3.117.6.1. Executing ABC.

yosys> abc -dff

3.118. Executing ABC pass (technology mapping using ABC).

3.118.1. Summary of detected clock domains:
  12 cells in clk=\clock, en=$abc$1587$abc$1373$auto$opt_dff.cc:219:make_patterns_logic$252, arst=\reset, srst={ }
  29 cells in clk=\clock, en=$abc$1642$lo21, arst=\reset, srst={ }
  29 cells in clk=\clock, en=$abc$1558$abc$1333$auto$opt_dff.cc:219:make_patterns_logic$255, arst=\reset, srst={ }
  3 cells in clk=\clock, en=$abc$1553$abc$1399$auto$opt_dff.cc:194:make_patterns_logic$258, arst=\reset, srst={ }
  106 cells in clk=\clock, en={ }, arst=\reset, srst={ }

3.118.2. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$1587$abc$1373$auto$opt_dff.cc:219:make_patterns_logic$252, asynchronously reset by \reset
Extracted 12 gates and 25 wires to a netlist network with 13 inputs and 9 outputs.

3.118.2.1. Executing ABC.

3.118.3. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$1642$lo21, asynchronously reset by \reset
Extracted 29 gates and 29 wires to a netlist network with 0 inputs and 1 outputs.

3.118.3.1. Executing ABC.

3.118.4. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$1558$abc$1333$auto$opt_dff.cc:219:make_patterns_logic$255, asynchronously reset by \reset
Extracted 29 gates and 38 wires to a netlist network with 9 inputs and 12 outputs.

3.118.4.1. Executing ABC.

3.118.5. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$1553$abc$1399$auto$opt_dff.cc:194:make_patterns_logic$258, asynchronously reset by \reset
Extracted 3 gates and 7 wires to a netlist network with 4 inputs and 2 outputs.

3.118.5.1. Executing ABC.

3.118.6. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, asynchronously reset by \reset
Extracted 106 gates and 118 wires to a netlist network with 12 inputs and 14 outputs.

3.118.6.1. Executing ABC.

yosys> abc -dff

3.119. Executing ABC pass (technology mapping using ABC).

3.119.1. Summary of detected clock domains:
  3 cells in clk=\clock, en=$abc$1849$abc$1553$abc$1399$auto$opt_dff.cc:194:make_patterns_logic$258, arst=\reset, srst={ }
  16 cells in clk=\clock, en=$abc$1762$abc$1587$abc$1373$auto$opt_dff.cc:219:make_patterns_logic$252, arst=\reset, srst={ }
  29 cells in clk=\clock, en=$abc$1854$lo21, arst=\reset, srst={ }
  25 cells in clk=\clock, en=$abc$1818$abc$1558$abc$1333$auto$opt_dff.cc:219:make_patterns_logic$255, arst=\reset, srst={ }
  106 cells in clk=\clock, en={ }, arst=\reset, srst={ }

3.119.2. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$1849$abc$1553$abc$1399$auto$opt_dff.cc:194:make_patterns_logic$258, asynchronously reset by \reset
Extracted 3 gates and 7 wires to a netlist network with 4 inputs and 2 outputs.

3.119.2.1. Executing ABC.

3.119.3. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$1762$abc$1587$abc$1373$auto$opt_dff.cc:219:make_patterns_logic$252, asynchronously reset by \reset
Extracted 16 gates and 30 wires to a netlist network with 14 inputs and 8 outputs.

3.119.3.1. Executing ABC.

3.119.4. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$1854$lo21, asynchronously reset by \reset
Extracted 29 gates and 29 wires to a netlist network with 0 inputs and 1 outputs.

3.119.4.1. Executing ABC.

3.119.5. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$1818$abc$1558$abc$1333$auto$opt_dff.cc:219:make_patterns_logic$255, asynchronously reset by \reset
Extracted 25 gates and 31 wires to a netlist network with 6 inputs and 11 outputs.

3.119.5.1. Executing ABC.

3.119.6. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, asynchronously reset by \reset
Extracted 106 gates and 118 wires to a netlist network with 12 inputs and 14 outputs.

3.119.6.1. Executing ABC.

yosys> opt_ffinv

3.120. Executing OPT_FFINV pass (push inverters through FFs).
Discovering LUTs.
Pushed 0 inverters.

yosys> opt_expr

3.121. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.

yosys> opt_merge -nomux

3.122. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b13'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

yosys> opt_muxtree

3.123. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b13..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.124. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b13.
Performed a total of 0 changes.

yosys> opt_merge

3.125. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b13'.
Removed a total of 0 cells.

yosys> opt_share

3.126. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -sat

3.127. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $abc$2062$auto$blifparse.cc:362:parse_blif$2065 ($_DFF_PP0_) from module b13 (D = $abc$2062$lo01, Q = $abc$2062$lo02).

yosys> opt_clean

3.128. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b13..
Removed 1 unused cells and 927 unused wires.
<suppressed ~15 debug messages>

yosys> opt_expr

3.129. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.

yosys> opt_muxtree

3.130. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b13..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.131. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b13.
Performed a total of 0 changes.

yosys> opt_merge

3.132. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b13'.
Removed a total of 0 cells.

yosys> opt_share

3.133. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -sat

3.134. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.135. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b13..

yosys> opt_expr

3.136. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.
MAX OPT ITERATION = 2

yosys> bmuxmap

3.137. Executing BMUXMAP pass.

yosys> demuxmap

3.138. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> abc -script /tmp/yosys_dUv98S/abc_tmp_1.scr

3.139. Executing ABC pass (technology mapping using ABC).

3.139.1. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Extracted 132 gates and 177 wires to a netlist network with 45 inputs and 38 outputs.

3.139.1.1. Executing ABC.
DE:   #PIs =  45  #Luts =    45  Max Lvl =   4  Avg Lvl =   1.37  [   0.28 sec. at Pass 0]
DE:   #PIs =  45  #Luts =    44  Max Lvl =   4  Avg Lvl =   1.39  [   0.26 sec. at Pass 1]
DE:   #PIs =  45  #Luts =    44  Max Lvl =   4  Avg Lvl =   1.39  [   0.25 sec. at Pass 2]
DE:   #PIs =  45  #Luts =    43  Max Lvl =   3  Avg Lvl =   1.21  [   0.13 sec. at Pass 3]
DE:   #PIs =  45  #Luts =    43  Max Lvl =   3  Avg Lvl =   1.21  [   0.17 sec. at Pass 4]
DE:   #PIs =  45  #Luts =    42  Max Lvl =   3  Avg Lvl =   1.21  [   0.40 sec. at Pass 5]
DE:   #PIs =  45  #Luts =    42  Max Lvl =   3  Avg Lvl =   1.21  [   0.20 sec. at Pass 6]
DE:   #PIs =  45  #Luts =    42  Max Lvl =   3  Avg Lvl =   1.21  [   0.61 sec. at Pass 7]
DE:   #PIs =  45  #Luts =    42  Max Lvl =   3  Avg Lvl =   1.21  [   0.37 sec. at Pass 8]
DE:   #PIs =  45  #Luts =    42  Max Lvl =   3  Avg Lvl =   1.21  [   1.67 sec. at Pass 9]
DE:   #PIs =  45  #Luts =    42  Max Lvl =   3  Avg Lvl =   1.21  [   0.63 sec. at Pass 10]

yosys> opt_expr

3.140. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.

yosys> opt_merge -nomux

3.141. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b13'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.142. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b13..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.143. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b13.
Performed a total of 0 changes.

yosys> opt_merge

3.144. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b13'.
Removed a total of 0 cells.

yosys> opt_share

3.145. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.146. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.147. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b13..
Removed 0 unused cells and 177 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.148. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.
MAX OPT ITERATION = 1

yosys> opt_ffinv

3.149. Executing OPT_FFINV pass (push inverters through FFs).
Discovering LUTs.
Pushed 0 inverters.

yosys> stat

3.150. Printing statistics.

=== b13 ===

   Number of wires:                 90
   Number of wire bits:            100
   Number of public wires:          16
   Number of public wire bits:      26
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 87
     $_DFFE_PP0N_                    1
     $_DFFE_PP0P_                   20
     $_DFF_PP0_                     24
     $lut                           42


yosys> shregmap -minlen 8 -maxlen 20

3.151. Executing SHREGMAP pass (map shift registers).
Converted 0 dff cells into 0 shift registers.

yosys> dfflegalize -cell $_DFF_?_ 0 -cell $_DFF_???_ 0 -cell $_DFFE_????_ 0 -cell $_DFFSR_???_ 0 -cell $_DFFSRE_????_ 0 -cell $_DLATCHSR_PPP_ 0

3.152. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

yosys> stat

3.153. Printing statistics.

=== b13 ===

   Number of wires:                 90
   Number of wire bits:            100
   Number of public wires:          16
   Number of public wire bits:      26
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 87
     $_DFFE_PP0N_                    1
     $_DFFE_PP0P_                   20
     $_DFF_PP0_                     24
     $lut                           42


yosys> techmap -map +/techmap.v -map +/rapidsilicon/genesis/ffs_map.v

3.154. Executing TECHMAP pass (map to technology primitives).

3.154.1. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.154.2. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/ffs_map.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/ffs_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP0N_'.
Generating RTLIL representation for module `\$_DFFE_PN0P_'.
Generating RTLIL representation for module `\$_DFFE_PN0N_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP1N_'.
Generating RTLIL representation for module `\$_DFFE_PN1P_'.
Generating RTLIL representation for module `\$_DFFE_PN1N_'.
Generating RTLIL representation for module `\$_DFFSR_PPP_'.
Generating RTLIL representation for module `\$_DFFSR_PNP_'.
Generating RTLIL representation for module `\$_DFFSR_PNN_'.
Generating RTLIL representation for module `\$_DFFSR_PPN_'.
Generating RTLIL representation for module `\$_DFFSR_NPP_'.
Generating RTLIL representation for module `\$_DFFSR_NNP_'.
Generating RTLIL representation for module `\$_DFFSR_NNN_'.
Generating RTLIL representation for module `\$_DFFSR_NPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PNPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPNP_'.
Generating RTLIL representation for module `\$_DFFSRE_PNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PNPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PPNN_'.
Generating RTLIL representation for module `\$_DFFSRE_PNNN_'.
Generating RTLIL representation for module `\$_DLATCHSR_PPP_'.
Generating RTLIL representation for module `\$_DLATCHSR_NPP_'.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP0N_'.
Generating RTLIL representation for module `\$_DFFE_NN0P_'.
Generating RTLIL representation for module `\$_DFFE_NN0N_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_NP1N_'.
Generating RTLIL representation for module `\$_DFFE_NN1P_'.
Generating RTLIL representation for module `\$_DFFE_NN1N_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNPP_'.
Generating RTLIL representation for module `\$_DFFSRE_NPNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPN_'.
Generating RTLIL representation for module `\$_DFFSRE_NNPN_'.
Generating RTLIL representation for module `\$_DFFSRE_NPNN_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNN_'.
Generating RTLIL representation for module `\$__SHREG_DFF_P_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PN0_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NN0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFF_PN1_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_NN1_'.
Successfully finished Verilog frontend.

3.154.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $lut.
Using template \$_DFF_PP0_ for cells of type $_DFF_PP0_.
Using template \$_DFFE_PP0N_ for cells of type $_DFFE_PP0N_.
Using template \$_DFFE_PP0P_ for cells of type $_DFFE_PP0P_.
Using extmapper simplemap for cells of type $logic_not.
No more expansions possible.
<suppressed ~269 debug messages>

yosys> opt_expr -mux_undef

3.155. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.
<suppressed ~763 debug messages>

yosys> simplemap

3.156. Executing SIMPLEMAP pass (map simple cells to gate primitives).

yosys> opt_expr

3.157. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.

yosys> opt_merge

3.158. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b13'.
<suppressed ~369 debug messages>
Removed a total of 123 cells.

yosys> opt_dff -nodffe -nosdff

3.159. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.160. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b13..
Removed 0 unused cells and 324 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.161. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.
<suppressed ~17 debug messages>

yosys> opt_merge -nomux

3.162. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b13'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.163. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b13..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.164. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b13.
Performed a total of 0 changes.

yosys> opt_merge

3.165. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b13'.
Removed a total of 0 cells.

yosys> opt_share

3.166. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.167. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.168. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b13..
Removed 0 unused cells and 6 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.169. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.
MAX OPT ITERATION = 1

yosys> abc -script /tmp/yosys_dUv98S/abc_tmp_2.scr

3.170. Executing ABC pass (technology mapping using ABC).

3.170.1. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Extracted 179 gates and 227 wires to a netlist network with 46 inputs and 40 outputs.

3.170.1.1. Executing ABC.
DE:   #PIs =  46  #Luts =    45  Max Lvl =   4  Avg Lvl =   1.27  [   0.21 sec. at Pass 0]
DE:   #PIs =  46  #Luts =    44  Max Lvl =   4  Avg Lvl =   1.33  [   1.09 sec. at Pass 1]
DE:   #PIs =  46  #Luts =    44  Max Lvl =   4  Avg Lvl =   1.33  [   0.25 sec. at Pass 2]
DE:   #PIs =  46  #Luts =    44  Max Lvl =   4  Avg Lvl =   1.33  [   0.48 sec. at Pass 3]
DE:   #PIs =  46  #Luts =    44  Max Lvl =   4  Avg Lvl =   1.33  [   0.87 sec. at Pass 4]
DE:   #PIs =  46  #Luts =    44  Max Lvl =   4  Avg Lvl =   1.33  [   1.06 sec. at Pass 5]
DE:   #PIs =  46  #Luts =    44  Max Lvl =   3  Avg Lvl =   1.17  [   3.68 sec. at Pass 6]
DE:   #PIs =  46  #Luts =    44  Max Lvl =   3  Avg Lvl =   1.17  [   1.28 sec. at Pass 7]
DE:   #PIs =  46  #Luts =    44  Max Lvl =   3  Avg Lvl =   1.17  [   1.09 sec. at Pass 8]
DE:   #PIs =  46  #Luts =    44  Max Lvl =   3  Avg Lvl =   1.17  [   1.09 sec. at Pass 9]
DE:   #PIs =  46  #Luts =    44  Max Lvl =   3  Avg Lvl =   1.17  [   2.60 sec. at Pass 10]
DE:   #PIs =  46  #Luts =    44  Max Lvl =   3  Avg Lvl =   1.17  [   0.61 sec. at Pass 11]

yosys> opt_expr

3.171. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.

yosys> opt_merge -nomux

3.172. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b13'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.173. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b13..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.174. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b13.
Performed a total of 0 changes.

yosys> opt_merge

3.175. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b13'.
Removed a total of 0 cells.

yosys> opt_share

3.176. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.177. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.178. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b13..
Removed 0 unused cells and 181 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.179. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.
MAX OPT ITERATION = 1

yosys> hierarchy -check

3.180. Executing HIERARCHY pass (managing design hierarchy).

3.180.1. Analyzing design hierarchy..
Top module:  \b13

3.180.2. Analyzing design hierarchy..
Top module:  \b13
Removed 0 unused modules.

yosys> stat

3.181. Printing statistics.

=== b13 ===

   Number of wires:                 92
   Number of wire bits:            102
   Number of public wires:          16
   Number of public wire bits:      26
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 89
     $lut                           44
     dffsre                         45


yosys> opt_clean -purge

3.182. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b13..

yosys> write_verilog -noattr -nohex synthesized.v

3.183. Executing Verilog backend.
Dumping module `\b13'.

Warnings: 1 unique messages, 1 total
End of script. Logfile hash: 6e63698800, CPU: user 0.74s system 0.06s, MEM: 32.69 MB peak
Yosys 0.18+10 (git sha1 c98b0e94e, gcc 9.4.0 -fPIC -Os)
Time spent: 99% 6x abc (101 sec), 0% 32x opt_expr (0 sec), ...
real 30.68
user 86.25
sys 16.39
