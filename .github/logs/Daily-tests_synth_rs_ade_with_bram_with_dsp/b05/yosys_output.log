
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys-Verific 0.0.140
 Yosys 0.18+10 (git sha1 92b23013e, gcc 11.2.0 -fPIC -Os)


-- Executing script file `yosys.ys' --
echo on

yosys> plugin -i synth-rs

yosys> read -verific

yosys> read -incdir .

yosys> verific -vlog-incdir .

1. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Sep22_SW_Release, released at Fri Sep 30 20:01:32 2022.

yosys> verilog_defaults -add -I.

yosys> read -vhdl b05.vhd

yosys> verific -vhdl b05.vhd

2. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Sep22_SW_Release, released at Fri Sep 30 20:01:32 2022.
VERIFIC-INFO [VHDL-1504] default VHDL library search path is now "/nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008"
VERIFIC-COMMENT [VHDL-1481] Analyzing VHDL file 'b05.vhd'
VERIFIC-COMMENT [VHDL-1493] Restoring VHDL unit 'std.standard' from file '/nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008/std/standard.vdb'
VERIFIC-INFO [VHDL-1012] b05.vhd:1: analyzing entity 'b05'
VERIFIC-INFO [VHDL-1010] b05.vhd:12: analyzing architecture 'behav'

yosys> synth_rs -top b05 -tech genesis2 -goal area -de -verilog synthesized.v

3. Executing synth_rs pass: v0.4.116

yosys> read_verilog -lib -specify -nomem2reg +/rapidsilicon/common/cells_sim.v +/rapidsilicon/genesis2/cells_sim.v +/rapidsilicon/genesis2/dsp_sim.v +/rapidsilicon/genesis2/brams_sim.v

3.1. Executing Verilog-2005 frontend: /nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v
Parsing Verilog input from `/nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\inv'.
Generating RTLIL representation for module `\buff'.
Generating RTLIL representation for module `\logic_0'.
Generating RTLIL representation for module `\logic_1'.
Generating RTLIL representation for module `\gclkbuff'.
Successfully finished Verilog frontend.

3.2. Executing Verilog-2005 frontend: /nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/cells_sim.v
Parsing Verilog input from `/nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\dff'.
Generating RTLIL representation for module `\dffn'.
Generating RTLIL representation for module `\sdff'.
Generating RTLIL representation for module `\sdffn'.
Generating RTLIL representation for module `\dffr'.
Generating RTLIL representation for module `\dffnr'.
Generating RTLIL representation for module `\dffe'.
Generating RTLIL representation for module `\dffne'.
Generating RTLIL representation for module `\sdffre'.
Generating RTLIL representation for module `\sdffnre'.
Generating RTLIL representation for module `\dffre'.
Generating RTLIL representation for module `\dffnre'.
Generating RTLIL representation for module `\latch'.
Generating RTLIL representation for module `\latchn'.
Generating RTLIL representation for module `\latchr'.
Generating RTLIL representation for module `\latchnr'.
Generating RTLIL representation for module `\fa_1bit'.
Successfully finished Verilog frontend.

3.3. Executing Verilog-2005 frontend: /nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/dsp_sim.v
Parsing Verilog input from `/nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/dsp_sim.v' to AST representation.
Generating RTLIL representation for module `\RS_DSP'.
Generating RTLIL representation for module `\RS_DSP_MULT'.
Generating RTLIL representation for module `\RS_DSP_MULT_REGIN'.
Generating RTLIL representation for module `\RS_DSP_MULT_REGOUT'.
Generating RTLIL representation for module `\RS_DSP_MULT_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP_MULTADD'.
Generating RTLIL representation for module `\RS_DSP_MULTADD_REGIN'.
Generating RTLIL representation for module `\RS_DSP_MULTADD_REGOUT'.
Generating RTLIL representation for module `\RS_DSP_MULTADD_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP_MULTACC'.
Generating RTLIL representation for module `\RS_DSP_MULTACC_REGIN'.
Generating RTLIL representation for module `\RS_DSP_MULTACC_REGOUT'.
Generating RTLIL representation for module `\RS_DSP_MULTACC_REGIN_REGOUT'.
Generating RTLIL representation for module `\dsp_t1_20x18x64_cfg_ports'.
Generating RTLIL representation for module `\dsp_t1_sim_cfg_ports'.
Successfully finished Verilog frontend.

3.4. Executing Verilog-2005 frontend: /nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/brams_sim.v
Parsing Verilog input from `/nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/brams_sim.v' to AST representation.
Generating RTLIL representation for module `\TDP_BRAM18'.
Generating RTLIL representation for module `\RS_TDP36K'.
Generating RTLIL representation for module `\BRAM2x18_TDP'.
Generating RTLIL representation for module `\BRAM2x18_SDP'.
Generating RTLIL representation for module `\_$_mem_v2_asymmetric'.
Successfully finished Verilog frontend.

yosys> hierarchy -check -top b05

3.5. Executing HIERARCHY pass (managing design hierarchy).
VERIFIC-INFO [VHDL-1067] b05.vhd:1: processing 'b05(BEHAV)'
VERIFIC-WARNING [VHDL-1840] b05.vhd:242: latch inferred for net 'TN[8]'
Importing module b05.

3.5.1. Analyzing design hierarchy..
Top module:  \b05

3.5.2. Analyzing design hierarchy..
Top module:  \b05
Removed 0 unused modules.

yosys> proc

3.6. Executing PROC pass (convert processes to netlists).

yosys> proc_clean

3.6.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> proc_rmdead

3.6.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

yosys> proc_prune

3.6.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

yosys> proc_init

3.6.4. Executing PROC_INIT pass (extract init attributes).

yosys> proc_arst

3.6.5. Executing PROC_ARST pass (detect async resets in processes).

yosys> proc_rom

3.6.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

yosys> proc_mux

3.6.7. Executing PROC_MUX pass (convert decision trees to multiplexers).

yosys> proc_dlatch

3.6.8. Executing PROC_DLATCH pass (convert process syncs to latches).

yosys> proc_dff

3.6.9. Executing PROC_DFF pass (convert process syncs to FFs).

yosys> proc_memwr

3.6.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

yosys> proc_clean

3.6.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> opt_expr -keepdc

3.6.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module b05.
<suppressed ~26 debug messages>

yosys> demuxmap

3.7. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> flatten

3.8. Executing FLATTEN pass (flatten design).

yosys> demuxmap

3.9. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> tribuf -logic -formal

3.10. Executing TRIBUF pass.

yosys> deminout

3.11. Executing DEMINOUT pass (demote inout ports to input or output).

yosys> opt_expr

3.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module b05.

yosys> opt_clean

3.13. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b05..
Removed 5 unused cells and 54 unused wires.
<suppressed ~28 debug messages>

yosys> check

3.14. Executing CHECK pass (checking for obvious problems).
Checking module b05...
Found and reported 0 problems.

yosys> opt_expr

3.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module b05.

yosys> opt_merge -nomux

3.16. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b05'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b05..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port A of cell $verific$i361$b05.vhd:284$340: \FLAG -> 1'0
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~24 debug messages>

yosys> opt_reduce

3.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b05.
  Optimizing cells in module \b05.
Performed a total of 1 changes.

yosys> opt_merge

3.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b05'.
Removed a total of 0 cells.

yosys> opt_share

3.20. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.21. Executing OPT_DFF pass (perform DFF optimizations).
Changing const-value async load to async reset on $verific$EN_DISP_reg$b05.vhd:308$366 ($aldff) from module b05.
Changing const-value async load to async reset on $verific$TEMP_reg$b05.vhd:308$369 ($aldff) from module b05.
Changing const-value async load to async reset on $verific$STATO_reg$b05.vhd:308$364 ($aldff) from module b05.
Changing const-value async load to async reset on $verific$RES_DISP_reg$b05.vhd:308$365 ($aldff) from module b05.
Changing const-value async load to async reset on $verific$NUM_reg$b05.vhd:308$367 ($aldff) from module b05.
Changing const-value async load to async reset on $verific$MAX_reg$b05.vhd:308$370 ($aldff) from module b05.
Changing const-value async load to async reset on $verific$MAR_reg$b05.vhd:308$368 ($aldff) from module b05.
Changing const-value async load to async reset on $verific$FLAG_reg$b05.vhd:308$371 ($aldff) from module b05.

yosys> opt_clean

3.22. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b05..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.23. Executing OPT_EXPR pass (perform const folding).
Optimizing module b05.

yosys> opt_muxtree

3.24. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b05..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~24 debug messages>

yosys> opt_reduce

3.25. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b05.
Performed a total of 0 changes.

yosys> opt_merge

3.26. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b05'.
Removed a total of 0 cells.

yosys> opt_share

3.27. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.28. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.29. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b05..

yosys> opt_expr

3.30. Executing OPT_EXPR pass (perform const folding).
Optimizing module b05.
MAX OPT ITERATION = 2

yosys> fsm -encoding binary

3.31. Executing FSM pass (extract and optimize FSM).

yosys> fsm_detect

3.31.1. Executing FSM_DETECT pass (finding FSMs in design).

yosys> fsm_extract

3.31.2. Executing FSM_EXTRACT pass (extracting FSM from design).

yosys> fsm_opt

3.31.3. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> opt_clean

3.31.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b05..

yosys> fsm_opt

3.31.5. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> fsm_recode -encoding binary

3.31.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

yosys> fsm_info

3.31.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

yosys> fsm_map

3.31.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

yosys> opt_expr

3.32. Executing OPT_EXPR pass (perform const folding).
Optimizing module b05.

yosys> opt_merge -nomux

3.33. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b05'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.34. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b05..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~24 debug messages>

yosys> opt_reduce

3.35. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b05.
Performed a total of 0 changes.

yosys> opt_merge

3.36. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b05'.
Removed a total of 0 cells.

yosys> opt_share

3.37. Executing OPT_SHARE pass.

yosys> opt_dff -sat

3.38. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.39. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b05..

yosys> opt_expr

3.40. Executing OPT_EXPR pass (perform const folding).
Optimizing module b05.
MAX OPT ITERATION = 1

yosys> wreduce -keepdc

3.41. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 10) from port Y of cell b05.$verific$sub_4$b05.vhd:60$175 ($sub).
Removed top 1 bits (of 10) from port A of cell b05.$verific$sub_4$b05.vhd:60$175 ($sub).
Removed top 1 bits (of 10) from port B of cell b05.$verific$sub_4$b05.vhd:60$175 ($sub).
Removed top 1 bits (of 9) from port A of cell b05.$verific$LessThan_6$b05.vhd:61$178 ($lt).
Removed top 1 bits (of 10) from port Y of cell b05.$verific$sub_19$b05.vhd:73$186 ($sub).
Removed top 1 bits (of 10) from port A of cell b05.$verific$sub_19$b05.vhd:73$186 ($sub).
Removed top 1 bits (of 10) from port B of cell b05.$verific$sub_19$b05.vhd:73$186 ($sub).
Removed top 1 bits (of 9) from port A of cell b05.$verific$LessThan_21$b05.vhd:74$189 ($lt).
Removed top 1 bits (of 9) from port A of cell b05.$verific$LessThan_39$b05.vhd:101$201 ($lt).
Removed top 1 bits (of 6) from port A of cell b05.$verific$unary_minus_41$b05.vhd:103$202 ($neg).
Removed top 1 bits (of 8) from port B of cell b05.$verific$LessThan_47$b05.vhd:108$212 ($lt).
Removed top 1 bits (of 8) from port B of cell b05.$verific$sub_49$b05.vhd:110$213 ($sub).
Removed top 1 bits (of 7) from mux cell b05.$verific$mux_52$b05.vhd:113$216 ($mux).
Removed top 1 bits (of 8) from port B of cell b05.$verific$LessThan_54$b05.vhd:114$218 ($lt).
Removed top 2 bits (of 9) from port B of cell b05.$verific$sub_56$b05.vhd:116$220 ($sub).
Removed top 1 bits (of 8) from port B of cell b05.$verific$LessThan_58$b05.vhd:118$222 ($lt).
Removed top 2 bits (of 9) from port B of cell b05.$verific$sub_60$b05.vhd:120$224 ($sub).
Removed top 1 bits (of 8) from port B of cell b05.$verific$LessThan_62$b05.vhd:122$226 ($lt).
Removed top 2 bits (of 9) from port B of cell b05.$verific$sub_64$b05.vhd:124$228 ($sub).
Removed top 1 bits (of 8) from port B of cell b05.$verific$LessThan_66$b05.vhd:126$230 ($lt).
Removed top 3 bits (of 9) from port B of cell b05.$verific$sub_68$b05.vhd:128$232 ($sub).
Removed top 1 bits (of 8) from port B of cell b05.$verific$LessThan_70$b05.vhd:130$234 ($lt).
Removed top 3 bits (of 9) from port B of cell b05.$verific$sub_72$b05.vhd:132$236 ($sub).
Removed top 1 bits (of 8) from port B of cell b05.$verific$LessThan_74$b05.vhd:134$238 ($lt).
Removed top 3 bits (of 9) from port B of cell b05.$verific$sub_76$b05.vhd:136$240 ($sub).
Removed top 1 bits (of 8) from port B of cell b05.$verific$LessThan_78$b05.vhd:138$242 ($lt).
Removed top 4 bits (of 9) from port B of cell b05.$verific$sub_80$b05.vhd:140$244 ($sub).
Removed top 1 bits (of 8) from port B of cell b05.$verific$LessThan_82$b05.vhd:142$246 ($lt).
Removed top 4 bits (of 9) from port B of cell b05.$verific$sub_84$b05.vhd:144$248 ($sub).
Removed top 1 bits (of 8) from port B of cell b05.$verific$LessThan_86$b05.vhd:146$250 ($lt).
Removed top 5 bits (of 9) from port B of cell b05.$verific$sub_88$b05.vhd:148$251 ($sub).
Removed top 1 bits (of 7) from mux cell b05.$verific$mux_91$b05.vhd:151$253 ($mux).
Removed top 1 bits (of 9) from port B of cell b05.$verific$LessThan_109$b05.vhd:160$271 ($lt).
Removed top 1 bits (of 9) from port B of cell b05.$verific$LessThan_111$b05.vhd:163$272 ($lt).
Removed top 1 bits (of 9) from port B of cell b05.$verific$LessThan_113$b05.vhd:166$273 ($lt).
Removed top 1 bits (of 9) from port B of cell b05.$verific$LessThan_115$b05.vhd:169$274 ($lt).
Removed top 1 bits (of 9) from port B of cell b05.$verific$LessThan_117$b05.vhd:172$275 ($lt).
Removed top 1 bits (of 9) from port B of cell b05.$verific$LessThan_119$b05.vhd:175$276 ($lt).
Removed top 1 bits (of 9) from port B of cell b05.$verific$LessThan_121$b05.vhd:178$277 ($lt).
Removed top 1 bits (of 9) from port B of cell b05.$verific$LessThan_123$b05.vhd:181$278 ($lt).
Removed top 1 bits (of 9) from port B of cell b05.$verific$LessThan_125$b05.vhd:184$279 ($lt).
Removed top 1 bits (of 7) from mux cell b05.$verific$mux_128$b05.vhd:188$280 ($mux).
Removed top 1 bits (of 5) from port A of cell b05.$verific$LessThan_137$b05.vhd:197$289 ($lt).
Removed top 1 bits (of 6) from port A of cell b05.$verific$sub_139$b05.vhd:199$290 ($sub).
Removed top 2 bits (of 6) from port B of cell b05.$verific$sub_139$b05.vhd:199$290 ($sub).
Removed top 1 bits (of 7) from mux cell b05.$verific$mux_142$b05.vhd:202$291 ($mux).
Removed top 1 bits (of 6) from port B of cell b05.$verific$LessThan_144$b05.vhd:203$293 ($lt).
Removed top 1 bits (of 6) from port B of cell b05.$verific$LessThan_146$b05.vhd:206$294 ($lt).
Removed top 1 bits (of 6) from port B of cell b05.$verific$LessThan_148$b05.vhd:209$295 ($lt).
Removed top 1 bits (of 6) from port B of cell b05.$verific$LessThan_150$b05.vhd:212$296 ($lt).
Removed top 1 bits (of 6) from port B of cell b05.$verific$LessThan_152$b05.vhd:215$297 ($lt).
Removed top 1 bits (of 6) from port B of cell b05.$verific$LessThan_154$b05.vhd:218$298 ($lt).
Removed top 1 bits (of 6) from port B of cell b05.$verific$LessThan_156$b05.vhd:221$299 ($lt).
Removed top 1 bits (of 6) from port B of cell b05.$verific$LessThan_158$b05.vhd:224$300 ($lt).
Removed top 1 bits (of 6) from port B of cell b05.$verific$LessThan_160$b05.vhd:227$301 ($lt).
Removed top 1 bits (of 7) from mux cell b05.$verific$mux_163$b05.vhd:231$303 ($mux).
Removed top 4 bits (of 5) from port B of cell b05.$verific$add_358$b05.vhd:283$337 ($add).
Removed top 1 bits (of 6) from port Y of cell b05.$verific$add_358$b05.vhd:283$337 ($add).
Removed top 4 bits (of 5) from port B of cell b05.$verific$add_376$b05.vhd:304$350 ($add).
Removed top 1 bits (of 6) from port Y of cell b05.$verific$add_376$b05.vhd:304$350 ($add).
Removed top 1 bits (of 2) from wire b05.$verific$n1549$149.
Removed top 1 bits (of 7) from wire b05.$verific$n239$70.
Removed top 1 bits (of 7) from wire b05.$verific$n525$100.
Removed top 1 bits (of 7) from wire b05.$verific$n776$118.
Removed top 1 bits (of 7) from wire b05.$verific$n879$129.
Removed top 1 bits (of 7) from wire b05.$verific$n983$131.

yosys> peepopt

3.42. Executing PEEPOPT pass (run peephole optimizers).

yosys> opt_clean

3.43. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b05..
Removed 0 unused cells and 10 unused wires.
<suppressed ~1 debug messages>

yosys> demuxmap

3.44. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> stat

3.45. Printing statistics.

=== b05 ===

   Number of wires:                147
   Number of wire bits:            711
   Number of public wires:          23
   Number of public wire bits:     100
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                142
     $add                            2
     $adff                           8
     $bmux                          10
     $eq                             1
     $logic_not                      1
     $lt                            32
     $mux                           73
     $neg                            1
     $not                            1
     $sub                           13


yosys> wreduce t:$mul

3.46. Executing WREDUCE pass (reducing word size of cells).

yosys> rs_dsp_macc -genesis2 -max_dsp 154

3.47. Executing RS_DSP_MACC pass.

yosys> techmap -map +/mul2dsp_check_maxwidth.v -D DSP_A_MAXWIDTH=20 -D DSP_B_MAXWIDTH=18 -D DSP_A_MINWIDTH=11 -D DSP_B_MINWIDTH=10 -D DSP_NAME=$__RS_MUL20X18 a:valid_map

3.48. Executing TECHMAP pass (map to technology primitives).

3.48.1. Executing Verilog-2005 frontend: /nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/mul2dsp_check_maxwidth.v
Parsing Verilog input from `/nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/mul2dsp_check_maxwidth.v' to AST representation.
Generating RTLIL representation for module `\_80_mul'.
Generating RTLIL representation for module `\_90_soft_mul'.
Successfully finished Verilog frontend.

3.48.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

yosys> stat

3.49. Printing statistics.

=== b05 ===

   Number of wires:                147
   Number of wire bits:            711
   Number of public wires:          23
   Number of public wire bits:     100
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                142
     $add                            2
     $adff                           8
     $bmux                          10
     $eq                             1
     $logic_not                      1
     $lt                            32
     $mux                           73
     $neg                            1
     $not                            1
     $sub                           13


yosys> chtype -set $mul t:$__soft_mul

yosys> techmap -map +/rapidsilicon/genesis2/dsp_map.v -D USE_DSP_CFG_PARAMS=0

3.50. Executing TECHMAP pass (map to technology primitives).

3.50.1. Executing Verilog-2005 frontend: /nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/dsp_map.v
Parsing Verilog input from `/nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/dsp_map.v' to AST representation.
Generating RTLIL representation for module `\$__RS_MUL20X18'.
Successfully finished Verilog frontend.

3.50.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

yosys> techmap -map +/rapidsilicon/genesis2/dsp_final_map.v

3.51. Executing TECHMAP pass (map to technology primitives).

3.51.1. Executing Verilog-2005 frontend: /nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/dsp_final_map.v
Parsing Verilog input from `/nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/dsp_final_map.v' to AST representation.
Generating RTLIL representation for module `\dsp_t1_20x18x64_cfg_ports'.
Successfully finished Verilog frontend.

3.51.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

yosys> rs-pack-dsp-regs

3.52. Executing rs_pack_dsp_regs pass.

yosys> rs_dsp_io_regs

3.53. Executing RS_DSP_IO_REGS pass.

yosys> alumacc

3.54. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module b05:
  creating $macc model for $verific$add_358$b05.vhd:283$337 ($add).
  creating $macc model for $verific$add_376$b05.vhd:304$350 ($add).
  creating $macc model for $verific$sub_139$b05.vhd:199$290 ($sub).
  creating $macc model for $verific$sub_19$b05.vhd:73$186 ($sub).
  creating $macc model for $verific$sub_4$b05.vhd:60$175 ($sub).
  creating $macc model for $verific$sub_49$b05.vhd:110$213 ($sub).
  creating $macc model for $verific$sub_56$b05.vhd:116$220 ($sub).
  creating $macc model for $verific$sub_60$b05.vhd:120$224 ($sub).
  creating $macc model for $verific$sub_64$b05.vhd:124$228 ($sub).
  creating $macc model for $verific$sub_68$b05.vhd:128$232 ($sub).
  creating $macc model for $verific$sub_72$b05.vhd:132$236 ($sub).
  creating $macc model for $verific$sub_76$b05.vhd:136$240 ($sub).
  creating $macc model for $verific$sub_80$b05.vhd:140$244 ($sub).
  creating $macc model for $verific$sub_84$b05.vhd:144$248 ($sub).
  creating $macc model for $verific$sub_88$b05.vhd:148$251 ($sub).
  creating $macc model for $verific$unary_minus_41$b05.vhd:103$202 ($neg).
  creating $alu model for $macc $verific$unary_minus_41$b05.vhd:103$202.
  creating $alu model for $macc $verific$sub_88$b05.vhd:148$251.
  creating $alu model for $macc $verific$sub_84$b05.vhd:144$248.
  creating $alu model for $macc $verific$sub_80$b05.vhd:140$244.
  creating $alu model for $macc $verific$sub_76$b05.vhd:136$240.
  creating $alu model for $macc $verific$sub_72$b05.vhd:132$236.
  creating $alu model for $macc $verific$sub_68$b05.vhd:128$232.
  creating $alu model for $macc $verific$sub_64$b05.vhd:124$228.
  creating $alu model for $macc $verific$sub_60$b05.vhd:120$224.
  creating $alu model for $macc $verific$sub_56$b05.vhd:116$220.
  creating $alu model for $macc $verific$sub_49$b05.vhd:110$213.
  creating $alu model for $macc $verific$sub_4$b05.vhd:60$175.
  creating $alu model for $macc $verific$sub_19$b05.vhd:73$186.
  creating $alu model for $macc $verific$sub_139$b05.vhd:199$290.
  creating $alu model for $macc $verific$add_376$b05.vhd:304$350.
  creating $alu model for $macc $verific$add_358$b05.vhd:283$337.
  creating $alu model for $verific$LessThan_109$b05.vhd:160$271 ($lt): new $alu
  creating $alu model for $verific$LessThan_111$b05.vhd:163$272 ($lt): new $alu
  creating $alu model for $verific$LessThan_113$b05.vhd:166$273 ($lt): new $alu
  creating $alu model for $verific$LessThan_115$b05.vhd:169$274 ($lt): new $alu
  creating $alu model for $verific$LessThan_117$b05.vhd:172$275 ($lt): new $alu
  creating $alu model for $verific$LessThan_119$b05.vhd:175$276 ($lt): new $alu
  creating $alu model for $verific$LessThan_121$b05.vhd:178$277 ($lt): new $alu
  creating $alu model for $verific$LessThan_123$b05.vhd:181$278 ($lt): new $alu
  creating $alu model for $verific$LessThan_125$b05.vhd:184$279 ($lt): new $alu
  creating $alu model for $verific$LessThan_137$b05.vhd:197$289 ($lt): new $alu
  creating $alu model for $verific$LessThan_144$b05.vhd:203$293 ($lt): new $alu
  creating $alu model for $verific$LessThan_146$b05.vhd:206$294 ($lt): new $alu
  creating $alu model for $verific$LessThan_148$b05.vhd:209$295 ($lt): new $alu
  creating $alu model for $verific$LessThan_150$b05.vhd:212$296 ($lt): new $alu
  creating $alu model for $verific$LessThan_152$b05.vhd:215$297 ($lt): new $alu
  creating $alu model for $verific$LessThan_154$b05.vhd:218$298 ($lt): new $alu
  creating $alu model for $verific$LessThan_156$b05.vhd:221$299 ($lt): new $alu
  creating $alu model for $verific$LessThan_158$b05.vhd:224$300 ($lt): new $alu
  creating $alu model for $verific$LessThan_160$b05.vhd:227$301 ($lt): new $alu
  creating $alu model for $verific$LessThan_21$b05.vhd:74$189 ($lt): new $alu
  creating $alu model for $verific$LessThan_39$b05.vhd:101$201 ($lt): new $alu
  creating $alu model for $verific$LessThan_47$b05.vhd:108$212 ($lt): new $alu
  creating $alu model for $verific$LessThan_54$b05.vhd:114$218 ($lt): new $alu
  creating $alu model for $verific$LessThan_58$b05.vhd:118$222 ($lt): new $alu
  creating $alu model for $verific$LessThan_6$b05.vhd:61$178 ($lt): new $alu
  creating $alu model for $verific$LessThan_62$b05.vhd:122$226 ($lt): new $alu
  creating $alu model for $verific$LessThan_66$b05.vhd:126$230 ($lt): new $alu
  creating $alu model for $verific$LessThan_70$b05.vhd:130$234 ($lt): new $alu
  creating $alu model for $verific$LessThan_74$b05.vhd:134$238 ($lt): new $alu
  creating $alu model for $verific$LessThan_78$b05.vhd:138$242 ($lt): new $alu
  creating $alu model for $verific$LessThan_82$b05.vhd:142$246 ($lt): new $alu
  creating $alu model for $verific$LessThan_86$b05.vhd:146$250 ($lt): new $alu
  creating $alu cell for $verific$LessThan_86$b05.vhd:146$250: $auto$alumacc.cc:485:replace_alu$410
  creating $alu cell for $verific$LessThan_82$b05.vhd:142$246: $auto$alumacc.cc:485:replace_alu$421
  creating $alu cell for $verific$LessThan_78$b05.vhd:138$242: $auto$alumacc.cc:485:replace_alu$432
  creating $alu cell for $verific$LessThan_74$b05.vhd:134$238: $auto$alumacc.cc:485:replace_alu$443
  creating $alu cell for $verific$LessThan_70$b05.vhd:130$234: $auto$alumacc.cc:485:replace_alu$454
  creating $alu cell for $verific$LessThan_66$b05.vhd:126$230: $auto$alumacc.cc:485:replace_alu$465
  creating $alu cell for $verific$LessThan_62$b05.vhd:122$226: $auto$alumacc.cc:485:replace_alu$476
  creating $alu cell for $verific$LessThan_6$b05.vhd:61$178: $auto$alumacc.cc:485:replace_alu$487
  creating $alu cell for $verific$LessThan_58$b05.vhd:118$222: $auto$alumacc.cc:485:replace_alu$492
  creating $alu cell for $verific$LessThan_54$b05.vhd:114$218: $auto$alumacc.cc:485:replace_alu$503
  creating $alu cell for $verific$LessThan_47$b05.vhd:108$212: $auto$alumacc.cc:485:replace_alu$514
  creating $alu cell for $verific$LessThan_39$b05.vhd:101$201: $auto$alumacc.cc:485:replace_alu$525
  creating $alu cell for $verific$LessThan_21$b05.vhd:74$189: $auto$alumacc.cc:485:replace_alu$530
  creating $alu cell for $verific$LessThan_160$b05.vhd:227$301: $auto$alumacc.cc:485:replace_alu$535
  creating $alu cell for $verific$LessThan_158$b05.vhd:224$300: $auto$alumacc.cc:485:replace_alu$546
  creating $alu cell for $verific$LessThan_156$b05.vhd:221$299: $auto$alumacc.cc:485:replace_alu$557
  creating $alu cell for $verific$LessThan_154$b05.vhd:218$298: $auto$alumacc.cc:485:replace_alu$568
  creating $alu cell for $verific$LessThan_152$b05.vhd:215$297: $auto$alumacc.cc:485:replace_alu$579
  creating $alu cell for $verific$LessThan_150$b05.vhd:212$296: $auto$alumacc.cc:485:replace_alu$590
  creating $alu cell for $verific$LessThan_148$b05.vhd:209$295: $auto$alumacc.cc:485:replace_alu$601
  creating $alu cell for $verific$LessThan_146$b05.vhd:206$294: $auto$alumacc.cc:485:replace_alu$612
  creating $alu cell for $verific$LessThan_144$b05.vhd:203$293: $auto$alumacc.cc:485:replace_alu$623
  creating $alu cell for $verific$LessThan_137$b05.vhd:197$289: $auto$alumacc.cc:485:replace_alu$634
  creating $alu cell for $verific$LessThan_125$b05.vhd:184$279: $auto$alumacc.cc:485:replace_alu$639
  creating $alu cell for $verific$LessThan_123$b05.vhd:181$278: $auto$alumacc.cc:485:replace_alu$650
  creating $alu cell for $verific$LessThan_121$b05.vhd:178$277: $auto$alumacc.cc:485:replace_alu$661
  creating $alu cell for $verific$LessThan_119$b05.vhd:175$276: $auto$alumacc.cc:485:replace_alu$672
  creating $alu cell for $verific$LessThan_117$b05.vhd:172$275: $auto$alumacc.cc:485:replace_alu$683
  creating $alu cell for $verific$LessThan_115$b05.vhd:169$274: $auto$alumacc.cc:485:replace_alu$694
  creating $alu cell for $verific$LessThan_113$b05.vhd:166$273: $auto$alumacc.cc:485:replace_alu$705
  creating $alu cell for $verific$LessThan_111$b05.vhd:163$272: $auto$alumacc.cc:485:replace_alu$716
  creating $alu cell for $verific$LessThan_109$b05.vhd:160$271: $auto$alumacc.cc:485:replace_alu$727
  creating $alu cell for $verific$add_358$b05.vhd:283$337: $auto$alumacc.cc:485:replace_alu$738
  creating $alu cell for $verific$add_376$b05.vhd:304$350: $auto$alumacc.cc:485:replace_alu$741
  creating $alu cell for $verific$sub_139$b05.vhd:199$290: $auto$alumacc.cc:485:replace_alu$744
  creating $alu cell for $verific$sub_19$b05.vhd:73$186: $auto$alumacc.cc:485:replace_alu$747
  creating $alu cell for $verific$sub_4$b05.vhd:60$175: $auto$alumacc.cc:485:replace_alu$750
  creating $alu cell for $verific$sub_49$b05.vhd:110$213: $auto$alumacc.cc:485:replace_alu$753
  creating $alu cell for $verific$sub_56$b05.vhd:116$220: $auto$alumacc.cc:485:replace_alu$756
  creating $alu cell for $verific$sub_60$b05.vhd:120$224: $auto$alumacc.cc:485:replace_alu$759
  creating $alu cell for $verific$sub_64$b05.vhd:124$228: $auto$alumacc.cc:485:replace_alu$762
  creating $alu cell for $verific$sub_68$b05.vhd:128$232: $auto$alumacc.cc:485:replace_alu$765
  creating $alu cell for $verific$sub_72$b05.vhd:132$236: $auto$alumacc.cc:485:replace_alu$768
  creating $alu cell for $verific$sub_76$b05.vhd:136$240: $auto$alumacc.cc:485:replace_alu$771
  creating $alu cell for $verific$sub_80$b05.vhd:140$244: $auto$alumacc.cc:485:replace_alu$774
  creating $alu cell for $verific$sub_84$b05.vhd:144$248: $auto$alumacc.cc:485:replace_alu$777
  creating $alu cell for $verific$sub_88$b05.vhd:148$251: $auto$alumacc.cc:485:replace_alu$780
  creating $alu cell for $verific$unary_minus_41$b05.vhd:103$202: $auto$alumacc.cc:485:replace_alu$783
  created 48 $alu and 0 $macc cells.

yosys> opt_expr

3.55. Executing OPT_EXPR pass (perform const folding).
Optimizing module b05.
<suppressed ~49 debug messages>

yosys> opt_merge -nomux

3.56. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b05'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.57. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b05..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux $verific$i17$b05.vhd:72$184.
    dead port 2/2 on $mux $verific$i17$b05.vhd:72$184.
    dead port 1/2 on $mux $verific$i25$b05.vhd:78$190.
    dead port 2/2 on $mux $verific$i25$b05.vhd:78$190.
Removed 4 multiplexer ports.
<suppressed ~22 debug messages>

yosys> opt_reduce

3.58. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b05.
Performed a total of 0 changes.

yosys> opt_merge

3.59. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b05'.
Removed a total of 0 cells.

yosys> opt_share

3.60. Executing OPT_SHARE pass.

yosys> opt_dff -nodffe

3.61. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.62. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b05..
Removed 32 unused cells and 66 unused wires.
<suppressed ~35 debug messages>

yosys> opt_expr

3.63. Executing OPT_EXPR pass (perform const folding).
Optimizing module b05.

yosys> opt_muxtree

3.64. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b05..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~22 debug messages>

yosys> opt_reduce

3.65. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b05.
Performed a total of 0 changes.

yosys> opt_merge

3.66. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b05'.
Removed a total of 0 cells.

yosys> opt_share

3.67. Executing OPT_SHARE pass.

yosys> opt_dff -nodffe

3.68. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.69. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b05..

yosys> opt_expr

3.70. Executing OPT_EXPR pass (perform const folding).
Optimizing module b05.
MAX OPT ITERATION = 2

yosys> stat

3.71. Printing statistics.

=== b05 ===

   Number of wires:                325
   Number of wire bits:           1760
   Number of public wires:          21
   Number of public wire bits:      98
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                224
     $adff                           8
     $alu                           48
     $bmux                          10
     $eq                             1
     $logic_not                      1
     $mux                           71
     $not                           29
     $or                            28
     $reduce_and                    28


yosys> memory -nomap

3.72. Executing MEMORY pass.

yosys> opt_mem

3.72.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

yosys> opt_mem_priority

3.72.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

yosys> opt_mem_feedback

3.72.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

yosys> memory_bmux2rom

3.72.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

yosys> memory_dff

3.72.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).
Checking read port `$auto$memory_bmux2rom.cc:63:execute$789'[0] in module `\b05': no output FF found.
Checking read port `$auto$memory_bmux2rom.cc:63:execute$786'[0] in module `\b05': no output FF found.
Checking read port address `$auto$memory_bmux2rom.cc:63:execute$789'[0] in module `\b05': address FF has async set and/or reset, not supported.
Checking read port address `$auto$memory_bmux2rom.cc:63:execute$786'[0] in module `\b05': address FF has async set and/or reset, not supported.

yosys> opt_clean

3.72.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b05..

yosys> memory_share

3.72.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

yosys> opt_mem_widen

3.72.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

yosys> opt_clean

3.72.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b05..

yosys> memory_collect

3.72.10. Executing MEMORY_COLLECT pass (generating $mem cells).

yosys> stat

3.73. Printing statistics.

=== b05 ===

   Number of wires:                325
   Number of wire bits:           1760
   Number of public wires:          21
   Number of public wire bits:      98
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                224
     $adff                           8
     $alu                           48
     $bmux                           8
     $eq                             1
     $logic_not                      1
     $mem_v2                         2
     $mux                           71
     $not                           29
     $or                            28
     $reduce_and                    28


yosys> muxpack

3.74. Executing MUXPACK pass ($mux cell cascades to $pmux).
Converted 0 (p)mux cells into 0 pmux cells.
<suppressed ~64 debug messages>

yosys> opt_clean

3.75. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b05..

yosys> memory_libmap -lib +/rapidsilicon/genesis2/brams_new_swap.txt -limit 150 a:read_swapped

3.76. Executing MEMORY_LIBMAP pass (mapping memories to cells).

yosys> memory_libmap -lib +/rapidsilicon/genesis2/brams_new.txt -limit 150

3.77. Executing MEMORY_LIBMAP pass (mapping memories to cells).
using FF mapping for memory b05.$auto$memory_bmux2rom.cc:63:execute$786
using FF mapping for memory b05.$auto$memory_bmux2rom.cc:63:execute$789
<suppressed ~12 debug messages>

yosys> rs_bram_split -new_mapping

3.78. Executing Rs_BRAM_Split pass.

yosys> techmap -autoproc -map +/rapidsilicon/genesis2/brams_map_new.v

3.79. Executing TECHMAP pass (map to technology primitives).

3.79.1. Executing Verilog-2005 frontend: /nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/brams_map_new.v
Parsing Verilog input from `/nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/brams_map_new.v' to AST representation.
Generating RTLIL representation for module `\$__RS_FACTOR_BRAM36_TDP'.
Generating RTLIL representation for module `\$__RS_FACTOR_BRAM18_TDP'.
Generating RTLIL representation for module `\$__RS_FACTOR_BRAM18_SDP'.
Generating RTLIL representation for module `\$__RS_FACTOR_BRAM36_SDP'.
Successfully finished Verilog frontend.

3.79.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~6 debug messages>

yosys> techmap -map +/rapidsilicon/genesis2/brams_final_map_new.v

3.80. Executing TECHMAP pass (map to technology primitives).

3.80.1. Executing Verilog-2005 frontend: /nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/brams_final_map_new.v
Parsing Verilog input from `/nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/brams_final_map_new.v' to AST representation.
Generating RTLIL representation for module `\BRAM2x18_TDP'.
Generating RTLIL representation for module `\BRAM2x18_SDP'.
Successfully finished Verilog frontend.

3.80.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

yosys> pmuxtree

3.81. Executing PMUXTREE pass.

yosys> muxpack

3.82. Executing MUXPACK pass ($mux cell cascades to $pmux).
Converted 0 (p)mux cells into 0 pmux cells.
<suppressed ~64 debug messages>

yosys> memory_map

3.83. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).
Mapping memory $auto$memory_bmux2rom.cc:63:execute$786 in module \b05:
  created 32 $dff cells and 0 static cells of width 9.
  read interface: 0 $dff and 31 $mux cells.
  write interface: 0 write mux blocks.
Mapping memory $auto$memory_bmux2rom.cc:63:execute$789 in module \b05:
  created 32 $dff cells and 0 static cells of width 18.
  read interface: 0 $dff and 31 $mux cells.
  write interface: 0 write mux blocks.

yosys> stat

3.84. Printing statistics.

=== b05 ===

   Number of wires:                577
   Number of wire bits:           5162
   Number of public wires:          21
   Number of public wire bits:      98
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                348
     $adff                           8
     $alu                           48
     $bmux                           8
     $dff                           64
     $eq                             1
     $logic_not                      1
     $mux                          133
     $not                           29
     $or                            28
     $reduce_and                    28


yosys> techmap -map +/techmap.v -map +/rapidsilicon/genesis2/arith_map.v

3.85. Executing TECHMAP pass (map to technology primitives).

3.85.1. Executing Verilog-2005 frontend: /nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.85.2. Executing Verilog-2005 frontend: /nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/arith_map.v
Parsing Verilog input from `/nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_rs_alu'.
Successfully finished Verilog frontend.

3.85.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $or.
Using template $paramod$dfca81329cbbac01700318224209a5f2318c7128\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $mux.
Using template $paramod$befd47b1c77b68561d11d0cb61a0fae29b79f34c\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $logic_not.
Using template $paramod$d2fa05d38998afabc6d4f34471305d0af4b8b2df\_90_alu for cells of type $alu.
Using template $paramod$e04283ca12514baf3d204c6994bec8f178dd89f8\_90_alu for cells of type $alu.
Using template $paramod$78464f9f65d57061f7490f3fe5dd257e4a61e2b7\_90_alu for cells of type $alu.
Using template $paramod$22b95c1bfeece9a7c6bf4fcd9399e4ee87091e97\_90_alu for cells of type $alu.
Using template $paramod$5d7bf89bead63599a0c4fbe7617ae2af1a7c16a5\_90_alu for cells of type $alu.
Using template $paramod$3fe4bdf8d597404bdd222c1fea42f692fdc77de4\_90_alu for cells of type $alu.
Using template $paramod$8f00ca5ffae7aacb4fd127c662dabcdb3ad72531\_90_alu for cells of type $alu.
Using template $paramod$9f3f81d189a6b1d5c738a580270bbb92e45c5c71\_90_alu for cells of type $alu.
Using template $paramod$672a140277c71df8314410f22acc08d55222c3c7\_90_alu for cells of type $alu.
Using template $paramod$83dd457849c736323edf2edb15923eb27f99c683\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $eq.
Using template $paramod$ebede46804337da78e06a77b9ffdc3717e8d42eb\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $bmux.
Using extmapper simplemap for cells of type $adff.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $and.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001000 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001001 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000110 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000101 for cells of type $lcu.
No more expansions possible.
<suppressed ~4519 debug messages>

yosys> stat

3.86. Printing statistics.

=== b05 ===

   Number of wires:               2761
   Number of wire bits:          65941
   Number of public wires:          21
   Number of public wire bits:      98
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               5830
     $_AND_                       1261
     $_DFF_PP0_                     34
     $_DFF_P_                      864
     $_MUX_                       1882
     $_NOT_                        407
     $_OR_                         577
     $_XOR_                        805


yosys> opt_expr

3.87. Executing OPT_EXPR pass (perform const folding).
Optimizing module b05.
<suppressed ~2277 debug messages>

yosys> opt_merge -nomux

3.88. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b05'.
<suppressed ~2040 debug messages>
Removed a total of 680 cells.

yosys> opt_muxtree

3.89. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b05..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.90. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b05.
Performed a total of 0 changes.

yosys> opt_merge

3.91. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b05'.
Removed a total of 0 cells.

yosys> opt_share

3.92. Executing OPT_SHARE pass.

yosys> opt_dff -nodffe

3.93. Executing OPT_DFF pass (perform DFF optimizations).
Handling const CLK on $auto$ff.cc:262:slice$2952 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1300 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1282 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1335 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1228 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2929 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2240 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2832 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2786 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2738 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2690 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2642 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2612 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1453 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1574 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1246 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1255 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1273 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2961 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1219 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1291 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1264 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1237 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2906 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2855 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2795 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2757 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2709 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2661 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2633 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2579 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1597 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3254 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3272 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3290 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3308 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3326 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3344 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3362 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3380 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3398 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3416 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3434 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3452 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3470 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3488 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3506 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3524 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3542 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3560 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3578 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3596 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3614 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3632 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3650 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3668 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3686 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3704 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3722 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3740 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3758 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3776 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3794 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3812 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1211 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1212 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1213 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1214 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1215 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1216 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1217 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1218 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1220 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1221 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1222 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1223 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1224 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1225 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1226 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1227 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1229 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1230 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1231 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1232 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1233 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1234 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1235 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1236 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1238 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1239 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1240 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1241 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1242 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1243 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1244 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1245 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1247 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1248 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1249 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1250 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1251 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1252 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1253 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1254 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1256 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1257 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1258 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1259 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1260 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1261 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1262 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1263 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1265 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1266 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1267 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1268 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1269 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1270 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1271 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1272 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1274 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1275 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1276 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1277 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1278 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1279 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1280 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1281 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1283 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1284 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1285 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1286 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1287 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1288 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1289 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1290 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1292 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1293 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1294 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1295 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1296 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1297 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1298 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1299 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1327 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1328 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1329 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1330 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1331 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1332 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1333 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1334 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1445 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1446 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1447 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1448 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1449 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1450 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1451 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1452 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1566 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1567 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1568 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1569 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1570 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1571 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1572 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1573 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1589 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1590 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1591 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1592 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1593 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1594 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1595 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1596 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2232 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2233 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2234 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2235 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2236 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2237 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2238 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2239 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2571 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2572 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2573 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2574 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2575 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2576 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2577 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2578 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2604 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2605 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2606 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2607 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2608 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2609 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2610 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2611 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2625 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2626 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2627 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2628 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2629 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2630 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2631 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2632 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2634 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2635 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2636 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2637 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2638 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2639 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2640 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2641 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2653 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2654 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2655 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2656 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2657 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2658 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2659 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2660 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2682 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2683 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2684 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2685 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2686 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2687 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2688 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2689 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2701 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2702 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2703 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2704 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2705 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2706 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2707 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2708 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2730 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2731 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2732 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2733 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2734 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2735 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2736 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2737 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2749 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2750 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2751 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2752 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2753 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2754 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2755 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2756 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2778 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2779 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2780 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2781 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2782 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2783 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2784 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2785 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2787 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2788 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2789 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2790 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2791 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2792 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2793 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2794 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2824 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2825 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2826 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2827 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2828 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2829 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2830 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2831 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2847 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2848 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2849 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2850 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2851 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2852 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2853 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2854 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2898 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2899 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2900 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2901 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2902 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2903 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2904 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2905 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2921 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2922 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2923 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2924 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2925 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2926 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2927 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2928 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2944 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2945 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2946 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2947 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2948 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2949 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2950 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2951 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2953 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2954 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2955 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2956 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2957 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2958 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2959 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2960 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3237 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3238 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3239 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3240 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3241 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3242 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3243 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3244 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3245 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3246 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3247 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3248 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3249 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3250 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3251 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3252 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3253 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3255 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3256 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3257 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3258 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3259 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3260 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3261 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3262 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3263 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3264 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3265 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3266 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3267 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3268 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3269 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3270 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3271 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3273 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3274 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3275 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3276 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3277 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3278 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3279 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3280 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3281 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3282 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3283 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3284 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3285 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3286 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3287 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3288 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3289 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3291 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3292 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3293 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3294 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3295 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3296 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3297 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3298 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3299 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3300 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3301 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3302 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3303 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3304 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3305 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3306 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3307 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3309 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3310 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3311 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3312 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3313 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3314 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3315 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3316 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3317 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3318 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3319 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3320 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3321 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3322 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3323 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3324 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3325 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3327 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3328 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3329 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3330 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3331 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3332 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3333 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3334 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3335 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3336 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3337 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3338 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3339 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3340 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3341 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3342 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3343 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3345 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3346 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3347 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3348 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3349 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3350 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3351 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3352 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3353 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3354 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3355 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3356 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3357 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3358 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3359 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3360 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3361 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3363 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3364 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3365 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3366 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3367 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3368 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3369 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3370 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3371 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3372 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3373 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3374 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3375 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3376 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3377 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3378 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3379 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3381 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3382 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3383 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3384 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3385 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3386 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3387 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3388 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3389 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3390 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3391 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3392 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3393 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3394 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3395 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3396 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3397 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3399 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3400 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3401 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3402 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3403 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3404 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3405 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3406 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3407 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3408 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3409 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3410 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3411 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3412 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3413 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3414 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3415 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3417 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3418 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3419 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3420 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3421 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3422 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3423 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3424 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3425 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3426 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3427 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3428 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3429 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3430 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3431 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3432 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3433 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3435 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3436 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3437 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3438 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3439 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3440 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3441 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3442 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3443 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3444 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3445 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3446 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3447 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3448 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3449 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3450 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3451 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3453 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3454 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3455 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3456 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3457 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3458 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3459 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3460 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3461 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3462 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3463 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3464 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3465 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3466 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3467 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3468 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3469 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3471 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3472 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3473 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3474 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3475 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3476 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3477 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3478 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3479 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3480 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3481 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3482 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3483 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3484 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3485 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3486 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3487 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3489 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3490 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3491 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3492 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3493 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3494 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3495 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3496 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3497 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3498 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3499 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3500 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3501 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3502 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3503 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3504 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3505 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3507 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3508 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3509 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3510 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3511 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3512 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3513 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3514 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3515 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3516 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3517 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3518 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3519 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3520 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3521 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3522 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3523 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3525 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3526 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3527 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3528 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3529 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3530 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3531 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3532 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3533 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3534 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3535 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3536 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3537 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3538 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3539 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3540 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3541 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3543 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3544 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3545 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3546 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3547 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3548 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3549 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3550 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3551 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3552 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3553 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3554 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3555 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3556 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3557 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3558 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3559 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3561 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3562 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3563 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3564 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3565 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3566 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3567 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3568 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3569 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3570 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3571 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3572 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3573 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3574 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3575 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3576 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3577 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3579 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3580 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3581 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3582 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3583 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3584 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3585 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3586 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3587 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3588 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3589 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3590 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3591 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3592 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3593 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3594 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3595 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3597 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3598 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3599 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3600 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3601 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3602 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3603 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3604 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3605 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3606 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3607 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3608 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3609 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3610 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3611 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3612 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3613 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3615 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3616 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3617 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3618 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3619 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3620 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3621 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3622 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3623 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3624 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3625 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3626 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3627 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3628 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3629 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3630 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3631 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3633 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3634 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3635 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3636 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3637 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3638 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3639 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3640 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3641 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3642 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3643 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3644 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3645 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3646 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3647 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3648 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3649 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3651 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3652 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3653 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3654 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3655 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3656 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3657 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3658 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3659 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3660 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3661 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3662 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3663 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3664 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3665 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3666 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3667 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3669 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3670 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3671 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3672 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3673 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3674 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3675 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3676 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3677 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3678 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3679 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3680 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3681 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3682 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3683 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3684 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3685 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3687 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3688 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3689 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3690 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3691 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3692 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3693 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3694 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3695 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3696 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3697 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3698 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3699 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3700 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3701 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3702 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3703 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3705 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3706 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3707 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3708 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3709 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3710 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3711 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3712 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3713 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3714 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3715 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3716 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3717 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3718 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3719 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3720 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3721 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3723 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3724 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3725 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3726 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3727 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3728 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3729 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3730 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3731 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3732 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3733 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3734 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3735 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3736 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3737 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3738 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3739 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3741 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3742 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3743 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3744 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3745 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3746 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3747 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3748 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3749 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3750 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3751 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3752 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3753 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3754 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3755 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3756 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3757 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3759 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3760 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3761 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3762 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3763 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3764 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3765 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3766 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3767 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3768 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3769 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3770 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3771 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3772 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3773 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3774 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3775 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3777 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3778 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3779 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3780 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3781 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3782 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3783 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3784 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3785 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3786 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3787 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3788 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3789 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3790 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3791 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3792 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3793 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3795 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3796 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3797 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3798 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3799 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3800 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3801 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3802 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3803 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3804 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3805 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3806 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3807 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3808 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3809 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3810 ($_DFF_P_) from module b05 (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$3811 ($_DFF_P_) from module b05 (removing D path).

yosys> opt_clean

3.94. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b05..
Removed 398 unused cells and 2556 unused wires.
<suppressed ~399 debug messages>

yosys> opt_expr

3.95. Executing OPT_EXPR pass (perform const folding).
Optimizing module b05.
<suppressed ~422 debug messages>

yosys> opt_muxtree

3.96. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b05..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.97. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b05.
Performed a total of 0 changes.

yosys> opt_merge

3.98. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b05'.
<suppressed ~1062 debug messages>
Removed a total of 354 cells.

yosys> opt_share

3.99. Executing OPT_SHARE pass.

yosys> opt_dff -nodffe

3.100. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.101. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b05..
Removed 0 unused cells and 56 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.102. Executing OPT_EXPR pass (perform const folding).
Optimizing module b05.
<suppressed ~13 debug messages>

yosys> opt_muxtree

3.103. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b05..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.104. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b05.
Performed a total of 0 changes.

yosys> opt_merge

3.105. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b05'.
Removed a total of 0 cells.

yosys> opt_share

3.106. Executing OPT_SHARE pass.

yosys> opt_dff -nodffe

3.107. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.108. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b05..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.109. Executing OPT_EXPR pass (perform const folding).
Optimizing module b05.
MAX OPT ITERATION = 3

yosys> opt_expr -full

3.110. Executing OPT_EXPR pass (perform const folding).
Optimizing module b05.
<suppressed ~138 debug messages>

yosys> techmap -map +/techmap.v

3.111. Executing TECHMAP pass (map to technology primitives).

3.111.1. Executing Verilog-2005 frontend: /nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.111.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~71 debug messages>

yosys> stat

3.112. Printing statistics.

=== b05 ===

   Number of wires:                464
   Number of wire bits:           1696
   Number of public wires:          21
   Number of public wire bits:      98
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1082
     $_AND_                        327
     $_DFF_PP0_                     34
     $_MUX_                        379
     $_NOT_                         94
     $_OR_                         163
     $_XOR_                         85


yosys> dfflegalize -cell $_SDFF_???_ 0 -cell $_SDFFE_????_ 0 t:$_SDFFCE_*

3.113. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

yosys> stat

3.114. Printing statistics.

=== b05 ===

   Number of wires:                464
   Number of wire bits:           1696
   Number of public wires:          21
   Number of public wire bits:      98
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1082
     $_AND_                        327
     $_DFF_PP0_                     34
     $_MUX_                        379
     $_NOT_                         94
     $_OR_                         163
     $_XOR_                         85


yosys> opt_expr

3.115. Executing OPT_EXPR pass (perform const folding).
Optimizing module b05.

yosys> opt_merge -nomux

3.116. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b05'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

yosys> opt_muxtree

3.117. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b05..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.118. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b05.
Performed a total of 0 changes.

yosys> opt_merge

3.119. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b05'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -sat

3.120. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.121. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b05..
Removed 0 unused cells and 4 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.122. Executing OPT_EXPR pass (perform const folding).
Optimizing module b05.
MAX OPT ITERATION = 1

yosys> abc -dff -keepff

3.123. Executing ABC pass (technology mapping using ABC).

3.123.1. Summary of detected clock domains:
  1081 cells in clk=\CLOCK, en={ }, arst=\RESET, srst={ }

3.123.2. Extracting gate netlist of module `\b05' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, asynchronously reset by \RESET
Extracted 1081 gates and 1084 wires to a netlist network with 1 inputs and 59 outputs.

3.123.2.1. Executing ABC.

yosys> abc -dff -keepff

3.124. Executing ABC pass (technology mapping using ABC).

3.124.1. Summary of detected clock domains:
  451 cells in clk=\CLOCK, en={ }, arst=\RESET, srst={ }

3.124.2. Extracting gate netlist of module `\b05' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, asynchronously reset by \RESET
Extracted 451 gates and 452 wires to a netlist network with 1 inputs and 59 outputs.

3.124.2.1. Executing ABC.

yosys> abc -dff -keepff

3.125. Executing ABC pass (technology mapping using ABC).

3.125.1. Summary of detected clock domains:
  439 cells in clk=\CLOCK, en={ }, arst=\RESET, srst={ }

3.125.2. Extracting gate netlist of module `\b05' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, asynchronously reset by \RESET
Extracted 439 gates and 440 wires to a netlist network with 1 inputs and 59 outputs.

3.125.2.1. Executing ABC.

yosys> abc -dff -keepff

3.126. Executing ABC pass (technology mapping using ABC).

3.126.1. Summary of detected clock domains:
  435 cells in clk=\CLOCK, en={ }, arst=\RESET, srst={ }

3.126.2. Extracting gate netlist of module `\b05' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, asynchronously reset by \RESET
Extracted 435 gates and 436 wires to a netlist network with 1 inputs and 59 outputs.

3.126.2.1. Executing ABC.

yosys> opt_ffinv

3.127. Executing OPT_FFINV pass (push inverters through FFs).
Discovering LUTs.
Pushed 0 inverters.

yosys> opt_expr

3.128. Executing OPT_EXPR pass (perform const folding).
Optimizing module b05.
<suppressed ~1 debug messages>

yosys> opt_merge -nomux

3.129. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b05'.
<suppressed ~9 debug messages>
Removed a total of 3 cells.

yosys> opt_muxtree

3.130. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b05..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.131. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b05.
Performed a total of 0 changes.

yosys> opt_merge

3.132. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b05'.
Removed a total of 0 cells.

yosys> opt_share

3.133. Executing OPT_SHARE pass.

yosys> opt_dff -sat

3.134. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $abc$9688$auto$blifparse.cc:362:parse_blif$9721 ($_DFF_PP0_) from module b05 (D = $abc$9688$new_n433_, Q = $abc$9688$abc$9252$abc$8812$abc$8360$MAX[8]).
Adding EN signal on $abc$9688$auto$blifparse.cc:362:parse_blif$9720 ($_DFF_PP0_) from module b05 (D = $abc$9688$new_n324_, Q = $abc$9688$abc$9252$abc$8812$abc$8360$MAX[7]).
Adding EN signal on $abc$9688$auto$blifparse.cc:362:parse_blif$9719 ($_DFF_PP0_) from module b05 (D = $abc$9688$new_n341_, Q = $abc$9688$abc$9252$abc$8812$abc$8360$MAX[6]).
Adding EN signal on $abc$9688$auto$blifparse.cc:362:parse_blif$9718 ($_DFF_PP0_) from module b05 (D = $abc$9688$new_n353_, Q = $abc$9688$abc$9252$abc$8812$abc$8360$MAX[5]).
Adding EN signal on $abc$9688$auto$blifparse.cc:362:parse_blif$9717 ($_DFF_PP0_) from module b05 (D = $abc$9688$new_n369_, Q = $abc$9688$abc$9252$abc$8812$abc$8360$MAX[4]).
Adding EN signal on $abc$9688$auto$blifparse.cc:362:parse_blif$9716 ($_DFF_PP0_) from module b05 (D = $abc$9688$new_n377_, Q = $abc$9688$abc$9252$abc$8812$abc$8360$MAX[3]).
Adding EN signal on $abc$9688$auto$blifparse.cc:362:parse_blif$9715 ($_DFF_PP0_) from module b05 (D = $abc$9688$new_n389_, Q = $abc$9688$abc$9252$abc$8812$abc$8360$MAX[2]).
Adding EN signal on $abc$9688$auto$blifparse.cc:362:parse_blif$9714 ($_DFF_PP0_) from module b05 (D = $abc$9688$new_n400_, Q = $abc$9688$abc$9252$abc$8812$abc$8360$MAX[1]).
Adding EN signal on $abc$9688$auto$blifparse.cc:362:parse_blif$9713 ($_DFF_PP0_) from module b05 (D = $abc$9688$new_n409_, Q = $abc$9688$abc$9252$abc$8812$abc$8360$MAX[0]).
Adding EN signal on $abc$9688$auto$blifparse.cc:362:parse_blif$9712 ($_DFF_PP0_) from module b05 (D = $abc$9688$new_n433_, Q = $abc$9688$abc$9252$abc$8812$abc$8360$TEMP[8]).
Adding EN signal on $abc$9688$auto$blifparse.cc:362:parse_blif$9711 ($_DFF_PP0_) from module b05 (D = $abc$9688$new_n324_, Q = $abc$9688$abc$9252$abc$8812$abc$8360$TEMP[7]).
Adding EN signal on $abc$9688$auto$blifparse.cc:362:parse_blif$9710 ($_DFF_PP0_) from module b05 (D = $abc$9688$new_n341_, Q = $abc$9688$abc$9252$abc$8812$abc$8360$TEMP[6]).
Adding EN signal on $abc$9688$auto$blifparse.cc:362:parse_blif$9709 ($_DFF_PP0_) from module b05 (D = $abc$9688$new_n353_, Q = $abc$9688$abc$9252$abc$8812$abc$8360$TEMP[5]).
Adding EN signal on $abc$9688$auto$blifparse.cc:362:parse_blif$9708 ($_DFF_PP0_) from module b05 (D = $abc$9688$new_n369_, Q = $abc$9688$abc$9252$abc$8812$abc$8360$TEMP[4]).
Adding EN signal on $abc$9688$auto$blifparse.cc:362:parse_blif$9707 ($_DFF_PP0_) from module b05 (D = $abc$9688$new_n377_, Q = $abc$9688$abc$9252$abc$8812$abc$8360$TEMP[3]).
Adding EN signal on $abc$9688$auto$blifparse.cc:362:parse_blif$9706 ($_DFF_PP0_) from module b05 (D = $abc$9688$new_n389_, Q = $abc$9688$abc$9252$abc$8812$abc$8360$TEMP[2]).
Adding EN signal on $abc$9688$auto$blifparse.cc:362:parse_blif$9705 ($_DFF_PP0_) from module b05 (D = $abc$9688$new_n400_, Q = $abc$9688$abc$9252$abc$8812$abc$8360$TEMP[1]).
Adding EN signal on $abc$9688$auto$blifparse.cc:362:parse_blif$9704 ($_DFF_PP0_) from module b05 (D = $abc$9688$new_n409_, Q = $abc$9688$abc$9252$abc$8812$abc$8360$TEMP[0]).

yosys> opt_clean

3.135. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b05..
Removed 18 unused cells and 1745 unused wires.
<suppressed ~21 debug messages>

yosys> opt_expr

3.136. Executing OPT_EXPR pass (perform const folding).
Optimizing module b05.

yosys> opt_muxtree

3.137. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b05..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.138. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b05.
Performed a total of 0 changes.

yosys> opt_merge

3.139. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b05'.
Removed a total of 0 cells.

yosys> opt_share

3.140. Executing OPT_SHARE pass.

yosys> opt_dff -sat

3.141. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.142. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b05..

yosys> opt_expr

3.143. Executing OPT_EXPR pass (perform const folding).
Optimizing module b05.
MAX OPT ITERATION = 2

yosys> bmuxmap

3.144. Executing BMUXMAP pass.

yosys> demuxmap

3.145. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> abc -script /tmp/yosys_vgCvDJ/abc_tmp_1.scr

3.146. Executing ABC pass (technology mapping using ABC).

3.146.1. Extracting gate netlist of module `\b05' to `<abc-temp-dir>/input.blif'..
Extracted 379 gates and 414 wires to a netlist network with 35 inputs and 48 outputs.

3.146.1.1. Executing ABC.
DE:   #PIs =  35  #Luts =    86  Max Lvl =   6  Avg Lvl =   2.19  [   0.61 sec. at Pass 0]{firstMap}[1]
DE:   #PIs =  35  #Luts =    73  Max Lvl =   8  Avg Lvl =   2.65  [   1.17 sec. at Pass 1]{initMapFlow}[2]
DE:   #PIs =  35  #Luts =    73  Max Lvl =   8  Avg Lvl =   2.65  [   0.30 sec. at Pass 2]{map}[2]
DE:   #PIs =  35  #Luts =    73  Max Lvl =   8  Avg Lvl =   2.65  [   0.58 sec. at Pass 3]{postMap}[6]
DE:   #PIs =  35  #Luts =    73  Max Lvl =   8  Avg Lvl =   2.65  [   0.40 sec. at Pass 4]{map}[12]
DE:   #PIs =  35  #Luts =    72  Max Lvl =   9  Avg Lvl =   2.50  [   0.46 sec. at Pass 5]{postMap}[36]
DE:   #PIs =  35  #Luts =    72  Max Lvl =   8  Avg Lvl =   2.58  [   0.55 sec. at Pass 6]{map}[50]
DE:   #PIs =  35  #Luts =    72  Max Lvl =   8  Avg Lvl =   2.58  [   0.51 sec. at Pass 7]{postMap}[50]
DE:   #PIs =  35  #Luts =    72  Max Lvl =   8  Avg Lvl =   2.58  [   0.40 sec. at Pass 8]{map}[50]
DE:   #PIs =  35  #Luts =    72  Max Lvl =   8  Avg Lvl =   2.58  [   0.76 sec. at Pass 9]{postMap}[50]
DE:   #PIs =  35  #Luts =    72  Max Lvl =   7  Avg Lvl =   2.42  [   1.86 sec. at Pass 10]{pushMap}[50]
DE:   #PIs =  35  #Luts =    72  Max Lvl =   7  Avg Lvl =   2.42  [   0.66 sec. at Pass 11]{map}[50]
DE:   #PIs =  35  #Luts =    72  Max Lvl =   7  Avg Lvl =   2.42  [   1.13 sec. at Pass 12]{postMap}[50]
DE:   #PIs =  35  #Luts =    72  Max Lvl =   7  Avg Lvl =   2.42  [   1.72 sec. at Pass 13]{map}[50]
DE:   #PIs =  35  #Luts =    71  Max Lvl =   7  Avg Lvl =   2.40  [   3.35 sec. at Pass 14]{pushMap}[50]
DE:   #PIs =  35  #Luts =    71  Max Lvl =   7  Avg Lvl =   2.40  [   0.74 sec. at Pass 15]{postMap}[50]
DE:   #PIs =  35  #Luts =    71  Max Lvl =   7  Avg Lvl =   2.40  [   0.40 sec. at Pass 16]{map}[50]
DE:   #PIs =  35  #Luts =    71  Max Lvl =   7  Avg Lvl =   2.40  [   0.68 sec. at Pass 17]{postMap}[50]
DE:   #PIs =  35  #Luts =    71  Max Lvl =   7  Avg Lvl =   2.40  [   1.76 sec. at Pass 18]{pushMap}[50]
DE:   #PIs =  35  #Luts =    71  Max Lvl =   7  Avg Lvl =   2.40  [   0.39 sec. at Pass 19]{finalMap}[50]

yosys> opt_expr

3.147. Executing OPT_EXPR pass (perform const folding).
Optimizing module b05.

yosys> opt_merge -nomux

3.148. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b05'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.149. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b05..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.150. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b05.
Performed a total of 0 changes.

yosys> opt_merge

3.151. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b05'.
Removed a total of 0 cells.

yosys> opt_share

3.152. Executing OPT_SHARE pass.

yosys> opt_dff -nodffe

3.153. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.154. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b05..
Removed 0 unused cells and 414 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.155. Executing OPT_EXPR pass (perform const folding).
Optimizing module b05.
MAX OPT ITERATION = 1

yosys> opt_ffinv

3.156. Executing OPT_FFINV pass (push inverters through FFs).
Discovering LUTs.
Pushed 0 inverters.

yosys> stat

3.157. Printing statistics.

=== b05 ===

   Number of wires:                170
   Number of wire bits:            239
   Number of public wires:          19
   Number of public wire bits:      88
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                105
     $_DFFE_PP0P_                   18
     $_DFF_PP0_                     16
     $lut                           71


yosys> dfflegalize -cell $_DFF_?_ 0 -cell $_DFFE_??_ 0 -cell $_DFF_???_ 0 -cell $_DFFE_????_ 0 -cell $_SDFF_???_ 0 -cell $_SDFFE_????_ 0 -cell $_DLATCH_?_ 0 -cell $_DLATCH_???_ 0

3.158. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

yosys> stat

3.159. Printing statistics.

=== b05 ===

   Number of wires:                170
   Number of wire bits:            239
   Number of public wires:          19
   Number of public wire bits:      88
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                105
     $_DFFE_PP0P_                   18
     $_DFF_PP0_                     16
     $lut                           71


yosys> techmap -map +/techmap.v -map +/rapidsilicon/genesis2/ffs_map.v

3.160. Executing TECHMAP pass (map to technology primitives).

3.160.1. Executing Verilog-2005 frontend: /nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.160.2. Executing Verilog-2005 frontend: /nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/ffs_map.v
Parsing Verilog input from `/nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/ffs_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP0N_'.
Generating RTLIL representation for module `\$_DFFE_PN0P_'.
Generating RTLIL representation for module `\$_DFFE_PN0N_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP1N_'.
Generating RTLIL representation for module `\$_DFFE_PN1P_'.
Generating RTLIL representation for module `\$_DFFE_PN1N_'.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP0N_'.
Generating RTLIL representation for module `\$_DFFE_NN0P_'.
Generating RTLIL representation for module `\$_DFFE_NN0N_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_NP1N_'.
Generating RTLIL representation for module `\$_DFFE_NN1P_'.
Generating RTLIL representation for module `\$_DFFE_NN1N_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PN0_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NN0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFF_PN1_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_NN1_'.
Generating RTLIL representation for module `\$_SDFFE_PP0P_'.
Generating RTLIL representation for module `\$_SDFFE_PP0N_'.
Generating RTLIL representation for module `\$_SDFFE_PN0P_'.
Generating RTLIL representation for module `\$_SDFFE_PN0N_'.
Generating RTLIL representation for module `\$_SDFFE_PP1P_'.
Generating RTLIL representation for module `\$_SDFFE_PP1N_'.
Generating RTLIL representation for module `\$_SDFFE_PN1P_'.
Generating RTLIL representation for module `\$_SDFFE_PN1N_'.
Generating RTLIL representation for module `\$_SDFFE_NP0P_'.
Generating RTLIL representation for module `\$_SDFFE_NP0N_'.
Generating RTLIL representation for module `\$_SDFFE_NN0P_'.
Generating RTLIL representation for module `\$_SDFFE_NN0N_'.
Generating RTLIL representation for module `\$_SDFFE_NP1P_'.
Generating RTLIL representation for module `\$_SDFFE_NP1N_'.
Generating RTLIL representation for module `\$_SDFFE_NN1P_'.
Generating RTLIL representation for module `\$_SDFFE_NN1N_'.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCH_PP0_'.
Generating RTLIL representation for module `\$_DLATCH_NP0_'.
Generating RTLIL representation for module `\$_DLATCH_PN0_'.
Generating RTLIL representation for module `\$_DLATCH_NN0_'.
Generating RTLIL representation for module `\$_DLATCH_PP1_'.
Generating RTLIL representation for module `\$_DLATCH_NP1_'.
Generating RTLIL representation for module `\$_DLATCH_PN1_'.
Generating RTLIL representation for module `\$_DLATCH_NN1_'.
Successfully finished Verilog frontend.

3.160.3. Continuing TECHMAP pass.
Using template \$_DFF_PP0_ for cells of type $_DFF_PP0_.
Using template \$_DFFE_PP0P_ for cells of type $_DFFE_PP0P_.
Using extmapper simplemap for cells of type $lut.
No more expansions possible.
<suppressed ~240 debug messages>

yosys> opt_expr -mux_undef

3.161. Executing OPT_EXPR pass (perform const folding).
Optimizing module b05.
<suppressed ~1760 debug messages>

yosys> simplemap

3.162. Executing SIMPLEMAP pass (map simple cells to gate primitives).

yosys> opt_expr

3.163. Executing OPT_EXPR pass (perform const folding).
Optimizing module b05.

yosys> opt_merge

3.164. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b05'.
<suppressed ~657 debug messages>
Removed a total of 219 cells.

yosys> opt_dff -nodffe -nosdff

3.165. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.166. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b05..
Removed 0 unused cells and 278 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.167. Executing OPT_EXPR pass (perform const folding).
Optimizing module b05.
<suppressed ~14 debug messages>

yosys> opt_merge -nomux

3.168. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b05'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.169. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b05..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.170. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b05.
Performed a total of 0 changes.

yosys> opt_merge

3.171. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b05'.
Removed a total of 0 cells.

yosys> opt_share

3.172. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.173. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.174. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b05..

yosys> opt_expr

3.175. Executing OPT_EXPR pass (perform const folding).
Optimizing module b05.
MAX OPT ITERATION = 1

yosys> abc -script /tmp/yosys_vgCvDJ/abc_tmp_2.scr

3.176. Executing ABC pass (technology mapping using ABC).

3.176.1. Extracting gate netlist of module `\b05' to `<abc-temp-dir>/input.blif'..
Extracted 470 gates and 507 wires to a netlist network with 35 inputs and 48 outputs.

3.176.1.1. Executing ABC.
DE:   #PIs =  35  #Luts =    73  Max Lvl =   6  Avg Lvl =   2.23  [   0.10 sec. at Pass 0]{firstMap}[1]
DE:   #PIs =  35  #Luts =    71  Max Lvl =   7  Avg Lvl =   2.40  [   0.61 sec. at Pass 1]{initMapFlow}[2]
DE:   #PIs =  35  #Luts =    71  Max Lvl =   7  Avg Lvl =   2.40  [   0.15 sec. at Pass 2]{map}[2]
DE:   #PIs =  35  #Luts =    71  Max Lvl =   7  Avg Lvl =   2.40  [   0.35 sec. at Pass 3]{postMap}[6]
DE:   #PIs =  35  #Luts =    71  Max Lvl =   7  Avg Lvl =   2.40  [   0.24 sec. at Pass 4]{map}[12]
DE:   #PIs =  35  #Luts =    71  Max Lvl =   7  Avg Lvl =   2.40  [   0.78 sec. at Pass 5]{postMap}[36]
DE:   #PIs =  35  #Luts =    71  Max Lvl =   7  Avg Lvl =   2.40  [   1.98 sec. at Pass 6]{pushMap}[50]
DE:   #PIs =  35  #Luts =    71  Max Lvl =   7  Avg Lvl =   2.40  [   2.14 sec. at Pass 7]{finalMap}[50]

yosys> opt_expr

3.177. Executing OPT_EXPR pass (perform const folding).
Optimizing module b05.

yosys> opt_merge -nomux

3.178. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b05'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.179. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b05..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.180. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b05.
Performed a total of 0 changes.

yosys> opt_merge

3.181. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b05'.
Removed a total of 0 cells.

yosys> opt_share

3.182. Executing OPT_SHARE pass.

yosys> opt_dff -nodffe

3.183. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.184. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b05..
Removed 0 unused cells and 324 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.185. Executing OPT_EXPR pass (perform const folding).
Optimizing module b05.
MAX OPT ITERATION = 1

yosys> hierarchy -check

3.186. Executing HIERARCHY pass (managing design hierarchy).

3.186.1. Analyzing design hierarchy..
Top module:  \b05

3.186.2. Analyzing design hierarchy..
Top module:  \b05
Removed 0 unused modules.

yosys> stat

3.187. Printing statistics.

=== b05 ===

   Number of wires:                170
   Number of wire bits:            239
   Number of public wires:          19
   Number of public wire bits:      88
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                105
     $lut                           71
     dffr                           16
     dffre                          18


yosys> opt_clean -purge

3.188. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b05..
Removed 0 unused cells and 2 unused wires.
<suppressed ~2 debug messages>

yosys> write_verilog -noattr -nohex synthesized.v

3.189. Executing Verilog backend.
Dumping module `\b05'.

Warnings: 1 unique messages, 1 total
End of script. Logfile hash: 2b5cbd5d4e, CPU: user 4.20s system 0.09s, MEM: 64.98 MB peak
Yosys 0.18+10 (git sha1 92b23013e, gcc 11.2.0 -fPIC -Os)
Time spent: 98% 6x abc (306 sec), 0% 36x opt_expr (1 sec), ...
real 38.44
user 249.75
sys 60.83
