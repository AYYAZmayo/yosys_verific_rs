
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys-Verific 0.0.64
 Yosys 0.18+10 (git sha1 c98b0e94e, gcc 9.4.0 -fPIC -Os)


-- Executing script file `yosys.ys' --
echo on

yosys> plugin -i synth-rs

yosys> read -verific

yosys> read -incdir .

yosys> verific -vlog-incdir .

1. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific May22_SW_Release, released at Wed Jun  1 00:39:28 2022.

yosys> verilog_defaults -add -I.

yosys> read -vlog2k aes_sbox.v aes_sbox_reg.v aes_key_expand_128.v aes_rcon.v

yosys> verific -vlog2k aes_sbox.v aes_sbox_reg.v aes_key_expand_128.v aes_rcon.v

2. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific May22_SW_Release, released at Wed Jun  1 00:39:28 2022.
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'aes_sbox.v'
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'aes_sbox_reg.v'
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'aes_key_expand_128.v'
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'aes_rcon.v'

yosys> synth_rs -top aes_rcon -tech genesis -goal area -de -verilog synthesized.v

3. Executing synth_rs pass: v0.4.65

yosys> read_verilog -lib -specify -nomem2reg +/rapidsilicon/common/cells_sim.v +/rapidsilicon/genesis/cells_sim.v +/rapidsilicon/genesis/dsp_sim.v

3.1. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\inv'.
Generating RTLIL representation for module `\buff'.
Generating RTLIL representation for module `\logic_0'.
Generating RTLIL representation for module `\logic_1'.
Generating RTLIL representation for module `\gclkbuff'.
Successfully finished Verilog frontend.

3.2. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/cells_sim.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\dffsre'.
Generating RTLIL representation for module `\dffnsre'.
Generating RTLIL representation for module `\latchsre'.
Generating RTLIL representation for module `\latchnsre'.
Generating RTLIL representation for module `\io_scff'.
Generating RTLIL representation for module `\scff'.
Generating RTLIL representation for module `\sh_dff'.
Generating RTLIL representation for module `\adder_carry'.
Generating RTLIL representation for module `\sdffr'.
Generating RTLIL representation for module `\sdffs'.
Generating RTLIL representation for module `\TDP_BRAM18'.
Generating RTLIL representation for module `\TDP36K'.
Successfully finished Verilog frontend.

3.3. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/dsp_sim.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/dsp_sim.v' to AST representation.
Generating RTLIL representation for module `\RS_DSP1'.
Generating RTLIL representation for module `\RS_DSP2'.
Generating RTLIL representation for module `\RS_DSP2_MULT'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGIN_REGOUT'.
Generating RTLIL representation for module `\dsp_t1_20x18x64_cfg_ports'.
Generating RTLIL representation for module `\dsp_t1_10x9x32_cfg_ports'.
Generating RTLIL representation for module `\dsp_t1_sim_cfg_ports'.
Generating RTLIL representation for module `\RS_DSP3'.
Generating RTLIL representation for module `\RS_DSP3_MULT'.
Generating RTLIL representation for module `\RS_DSP3_MULT_REGIN'.
Generating RTLIL representation for module `\RS_DSP3_MULT_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULT_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULTADD'.
Generating RTLIL representation for module `\RS_DSP3_MULTADD_REGIN'.
Generating RTLIL representation for module `\RS_DSP3_MULTADD_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULTADD_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULTACC'.
Generating RTLIL representation for module `\RS_DSP3_MULTACC_REGIN'.
Generating RTLIL representation for module `\RS_DSP3_MULTACC_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULTACC_REGIN_REGOUT'.
Generating RTLIL representation for module `\dsp_t1_20x18x64_cfg_params'.
Generating RTLIL representation for module `\dsp_t1_10x9x32_cfg_params'.
Generating RTLIL representation for module `\dsp_t1_sim_cfg_params'.
Successfully finished Verilog frontend.

yosys> hierarchy -check -top aes_rcon

3.4. Executing HIERARCHY pass (managing design hierarchy).
VERIFIC-INFO [VERI-1018] aes_rcon.v:61: compiling module 'aes_rcon'
VERIFIC-WARNING [VERI-2371] aes_rcon.v:70: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] aes_rcon.v:71: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] aes_rcon.v:75: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] aes_rcon.v:76: delay control is not supported for synthesis
Importing module aes_rcon.

3.4.1. Analyzing design hierarchy..
Top module:  \aes_rcon

3.4.2. Analyzing design hierarchy..
Top module:  \aes_rcon
Removed 0 unused modules.

yosys> proc

3.5. Executing PROC pass (convert processes to netlists).

yosys> proc_clean

3.5.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> proc_rmdead

3.5.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

yosys> proc_prune

3.5.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

yosys> proc_init

3.5.4. Executing PROC_INIT pass (extract init attributes).

yosys> proc_arst

3.5.5. Executing PROC_ARST pass (detect async resets in processes).

yosys> proc_rom

3.5.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

yosys> proc_mux

3.5.7. Executing PROC_MUX pass (convert decision trees to multiplexers).

yosys> proc_dlatch

3.5.8. Executing PROC_DLATCH pass (convert process syncs to latches).

yosys> proc_dff

3.5.9. Executing PROC_DFF pass (convert process syncs to FFs).

yosys> proc_memwr

3.5.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

yosys> proc_clean

3.5.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> opt_expr -keepdc

3.5.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes_rcon.

yosys> demuxmap

3.6. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> flatten

3.7. Executing FLATTEN pass (flatten design).

yosys> demuxmap

3.8. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> tribuf -logic -formal

3.9. Executing TRIBUF pass.

yosys> deminout

3.10. Executing DEMINOUT pass (demote inout ports to input or output).

yosys> opt_expr

3.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes_rcon.

yosys> opt_clean

3.12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes_rcon..
Removed 0 unused cells and 10 unused wires.
<suppressed ~6 debug messages>

yosys> check

3.13. Executing CHECK pass (checking for obvious problems).
Checking module aes_rcon...
Found and reported 0 problems.

yosys> opt_expr

3.14. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes_rcon.

yosys> opt_merge -nomux

3.15. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes_rcon'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.16. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes_rcon..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

yosys> opt_reduce

3.17. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes_rcon.
Performed a total of 0 changes.

yosys> opt_merge

3.18. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes_rcon'.
Removed a total of 0 cells.

yosys> opt_share

3.19. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.20. Executing OPT_DFF pass (perform DFF optimizations).
Removing never-active async load on $verific$rcnt_reg$aes_rcon.v:76$22 ($aldff) from module aes_rcon.
Removing never-active async load on $verific$out_reg$aes_rcon.v:71$18 ($aldff) from module aes_rcon.

yosys> opt_clean

3.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes_rcon..

yosys> opt_expr

3.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes_rcon.
MAX OPT ITERATION = 1

yosys> fsm -encoding binary

3.23. Executing FSM pass (extract and optimize FSM).

yosys> fsm_detect

3.23.1. Executing FSM_DETECT pass (finding FSMs in design).

yosys> fsm_extract

3.23.2. Executing FSM_EXTRACT pass (extracting FSM from design).

yosys> fsm_opt

3.23.3. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> opt_clean

3.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes_rcon..

yosys> fsm_opt

3.23.5. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> fsm_recode -encoding binary

3.23.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

yosys> fsm_info

3.23.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

yosys> fsm_map

3.23.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

yosys> opt_expr

3.24. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes_rcon.

yosys> opt_merge -nomux

3.25. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes_rcon'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.26. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes_rcon..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

yosys> opt_reduce

3.27. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes_rcon.
Performed a total of 0 changes.

yosys> opt_merge

3.28. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes_rcon'.
Removed a total of 0 cells.

yosys> opt_share

3.29. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -sat

3.30. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.31. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes_rcon..

yosys> opt_expr

3.32. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes_rcon.
MAX OPT ITERATION = 1

yosys> wreduce -keepdc

3.33. Executing WREDUCE pass (reducing word size of cells).
Removed top 3 bits (of 4) from port B of cell aes_rcon.$verific$add_9$aes_rcon.v:73$19 ($add).

yosys> peepopt

3.34. Executing PEEPOPT pass (run peephole optimizers).

yosys> opt_clean

3.35. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes_rcon..

yosys> demuxmap

3.36. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> stat

3.37. Printing statistics.

=== aes_rcon ===

   Number of wires:                  8
   Number of wire bits:            110
   Number of public wires:           5
   Number of public wire bits:      42
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  6
     $add                            1
     $bmux                           1
     $dff                            2
     $mux                            2


yosys> wreduce t:$mul

3.38. Executing WREDUCE pass (reducing word size of cells).

yosys> rs_dsp_macc

3.39. Executing RS_DSP_MACC pass.

yosys> techmap -map +/mul2dsp.v -D DSP_A_MAXWIDTH=20 -D DSP_B_MAXWIDTH=18 -D DSP_A_MINWIDTH=11 -D DSP_B_MINWIDTH=10 -D DSP_NAME=$__RS_MUL20X18

3.40. Executing TECHMAP pass (map to technology primitives).

3.40.1. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/mul2dsp.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/mul2dsp.v' to AST representation.
Generating RTLIL representation for module `\_80_mul'.
Generating RTLIL representation for module `\_90_soft_mul'.
Successfully finished Verilog frontend.

3.40.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

yosys> chtype -set $mul t:$__soft_mul

yosys> techmap -map +/mul2dsp.v -D DSP_A_MAXWIDTH=10 -D DSP_B_MAXWIDTH=9 -D DSP_A_MINWIDTH=4 -D DSP_B_MINWIDTH=4 -D DSP_NAME=$__RS_MUL10X9

3.41. Executing TECHMAP pass (map to technology primitives).

3.41.1. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/mul2dsp.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/mul2dsp.v' to AST representation.
Generating RTLIL representation for module `\_80_mul'.
Generating RTLIL representation for module `\_90_soft_mul'.
Successfully finished Verilog frontend.

3.41.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

yosys> chtype -set $mul t:$__soft_mul

yosys> techmap -map +/rapidsilicon/genesis/dsp_map.v -D USE_DSP_CFG_PARAMS=0

3.42. Executing TECHMAP pass (map to technology primitives).

3.42.1. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/dsp_map.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/dsp_map.v' to AST representation.
Generating RTLIL representation for module `\$__RS_MUL20X18'.
Generating RTLIL representation for module `\$__RS_MUL10X9'.
Successfully finished Verilog frontend.

3.42.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

yosys> rs_dsp_simd

3.43. Executing RS_DSP_SIMD pass.

yosys> techmap -map +/rapidsilicon/genesis/dsp_final_map.v

3.44. Executing TECHMAP pass (map to technology primitives).

3.44.1. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/dsp_final_map.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/dsp_final_map.v' to AST representation.
Generating RTLIL representation for module `\dsp_t1_20x18x64_cfg_ports'.
Generating RTLIL representation for module `\dsp_t1_10x9x32_cfg_ports'.
Generating RTLIL representation for module `\dsp_t1_20x18x64_cfg_params'.
Generating RTLIL representation for module `\dsp_t1_10x9x32_cfg_params'.
Successfully finished Verilog frontend.

3.44.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~6 debug messages>

yosys> rs_dsp_io_regs

3.45. Executing RS_DSP_IO_REGS pass.

yosys> alumacc

3.46. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module aes_rcon:
  creating $macc model for $verific$add_9$aes_rcon.v:73$19 ($add).
  creating $alu model for $macc $verific$add_9$aes_rcon.v:73$19.
  creating $alu cell for $verific$add_9$aes_rcon.v:73$19: $auto$alumacc.cc:485:replace_alu$24
  created 1 $alu and 0 $macc cells.

yosys> opt_expr

3.47. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes_rcon.

yosys> opt_merge -nomux

3.48. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes_rcon'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.49. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes_rcon..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

yosys> opt_reduce

3.50. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes_rcon.
Performed a total of 0 changes.

yosys> opt_merge

3.51. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes_rcon'.
Removed a total of 0 cells.

yosys> opt_share

3.52. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.53. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.54. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes_rcon..

yosys> opt_expr

3.55. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes_rcon.
MAX OPT ITERATION = 1

yosys> stat

3.56. Printing statistics.

=== aes_rcon ===

   Number of wires:                 10
   Number of wire bits:            118
   Number of public wires:           5
   Number of public wire bits:      42
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  6
     $alu                            1
     $bmux                           1
     $dff                            2
     $mux                            2


yosys> memory -nomap

3.57. Executing MEMORY pass.

yosys> opt_mem

3.57.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

yosys> opt_mem_priority

3.57.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

yosys> opt_mem_feedback

3.57.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

yosys> memory_bmux2rom

3.57.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

yosys> memory_dff

3.57.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).
Checking read port `$auto$memory_bmux2rom.cc:63:execute$27'[0] in module `\aes_rcon': FF found, but with a mux select that doesn't seem to correspond to transparency logic.
Checking read port address `$auto$memory_bmux2rom.cc:63:execute$27'[0] in module `\aes_rcon': no address FF found.

yosys> opt_clean

3.57.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes_rcon..

yosys> memory_share

3.57.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

yosys> opt_mem_widen

3.57.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

yosys> opt_clean

3.57.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes_rcon..

yosys> memory_collect

3.57.10. Executing MEMORY_COLLECT pass (generating $mem cells).

yosys> stat

3.58. Printing statistics.

=== aes_rcon ===

   Number of wires:                 10
   Number of wire bits:            118
   Number of public wires:           5
   Number of public wire bits:      42
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  6
     $alu                            1
     $dff                            2
     $mem_v2                         1
     $mux                            2


yosys> muxpack

3.59. Executing MUXPACK pass ($mux cell cascades to $pmux).
Converted 0 (p)mux cells into 0 pmux cells.
<suppressed ~2 debug messages>

yosys> opt_clean

3.60. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes_rcon..

yosys> memory_bram -rules +/rapidsilicon/genesis/brams.txt

3.61. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).
Processing aes_rcon.$auto$memory_bmux2rom.cc:63:execute$27:
  Properties: ports=1 bits=512 rports=1 wports=0 dbits=32 abits=4 words=16
  Checking rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 1):
    Bram geometry: abits=10 dbits=36 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_TDP: awaste=1008 dwaste=4 bwaste=36352 waste=36352 efficiency=1
    Rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 1) rejected: requirement 'min wports 1' not met.
  Checking rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 2):
    Bram geometry: abits=11 dbits=18 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_TDP: awaste=2032 dwaste=4 bwaste=36640 waste=36640 efficiency=0
    Rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 2) rejected: requirement 'min efficiency 1' not met.
  Checking rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 3):
    Bram geometry: abits=12 dbits=9 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_TDP: awaste=4080 dwaste=4 bwaste=36784 waste=36784 efficiency=0
    Rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 3) rejected: requirement 'min efficiency 1' not met.
  Checking rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 4):
    Bram geometry: abits=13 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_TDP: awaste=8176 dwaste=0 bwaste=32704 waste=32704 efficiency=0
    Rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 4) rejected: requirement 'min efficiency 1' not met.
  Checking rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 5):
    Bram geometry: abits=14 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_TDP: awaste=16368 dwaste=0 bwaste=32736 waste=32736 efficiency=0
    Rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 5) rejected: requirement 'min efficiency 1' not met.
  Checking rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 6):
    Bram geometry: abits=15 dbits=1 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_TDP: awaste=32752 dwaste=0 bwaste=32752 waste=32752 efficiency=0
    Rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 6) rejected: requirement 'min efficiency 1' not met.
  Checking rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 1):
    Bram geometry: abits=10 dbits=36 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_SDP: awaste=1008 dwaste=4 bwaste=36352 waste=36352 efficiency=1
    Rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 1) accepted.
    Mapping to bram type $__RS_FACTOR_BRAM36_SDP (variant 1):
      Read port #0 is in clock domain !~async~.
        Bram port A1.1 has incompatible clock type.
        Failed to map read port #0.
    Mapping to bram type $__RS_FACTOR_BRAM36_SDP failed.
  Checking rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 2):
    Bram geometry: abits=11 dbits=18 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_SDP: awaste=2032 dwaste=4 bwaste=36640 waste=36640 efficiency=0
    Rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 2) rejected: requirement 'min efficiency 1' not met.
  Checking rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 3):
    Bram geometry: abits=12 dbits=9 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_SDP: awaste=4080 dwaste=4 bwaste=36784 waste=36784 efficiency=0
    Rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 3) rejected: requirement 'min efficiency 1' not met.
  Checking rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 4):
    Bram geometry: abits=13 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_SDP: awaste=8176 dwaste=0 bwaste=32704 waste=32704 efficiency=0
    Rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 4) rejected: requirement 'min efficiency 1' not met.
  Checking rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 5):
    Bram geometry: abits=14 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_SDP: awaste=16368 dwaste=0 bwaste=32736 waste=32736 efficiency=0
    Rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 5) rejected: requirement 'min efficiency 1' not met.
  Checking rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 6):
    Bram geometry: abits=15 dbits=1 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_SDP: awaste=32752 dwaste=0 bwaste=32752 waste=32752 efficiency=0
    Rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 6) rejected: requirement 'min efficiency 1' not met.
  No acceptable bram resources found.

yosys> techmap -map +/rapidsilicon/genesis/brams_map.v

3.62. Executing TECHMAP pass (map to technology primitives).

3.62.1. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/brams_map.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__RS_FACTOR_BRAM36_TDP'.
Generating RTLIL representation for module `\$__RS_FACTOR_BRAM18_TDP'.
/nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/brams_map.v:236: Warning: Range [2:0] select out of bounds on signal `\DOP': Setting 1 MSB bits to undef.
Generating RTLIL representation for module `\$__RS_FACTOR_BRAM36_SDP'.
Successfully finished Verilog frontend.

3.62.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~5 debug messages>

yosys> pmuxtree

3.63. Executing PMUXTREE pass.

yosys> muxpack

3.64. Executing MUXPACK pass ($mux cell cascades to $pmux).
Converted 0 (p)mux cells into 0 pmux cells.
<suppressed ~2 debug messages>

yosys> memory_map

3.65. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).
Mapping memory $auto$memory_bmux2rom.cc:63:execute$27 in module \aes_rcon:
  created 16 $dff cells and 0 static cells of width 32.
  read interface: 0 $dff and 15 $mux cells.
  write interface: 0 write mux blocks.

yosys> stat

3.66. Printing statistics.

=== aes_rcon ===

   Number of wires:                 72
   Number of wire bits:           2102
   Number of public wires:           5
   Number of public wire bits:      42
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 36
     $alu                            1
     $dff                           18
     $mux                           17


yosys> techmap -map +/techmap.v -map +/rapidsilicon/genesis/arith_map.v

3.67. Executing TECHMAP pass (map to technology primitives).

3.67.1. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.67.2. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/arith_map.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_rs_alu'.
Successfully finished Verilog frontend.

3.67.3. Continuing TECHMAP pass.
Using template $paramod$32a7b7b86c07519b7537abc18e96f0331f97914d\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $and.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000100 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $or.
No more expansions possible.
<suppressed ~340 debug messages>

yosys> stat

3.68. Printing statistics.

=== aes_rcon ===

   Number of wires:                104
   Number of wire bits:           3274
   Number of public wires:           5
   Number of public wire bits:      42
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1096
     $_AND_                         10
     $_DFF_P_                      548
     $_MUX_                        520
     $_NOT_                          4
     $_OR_                           5
     $_XOR_                          9


yosys> opt_expr

3.69. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes_rcon.
<suppressed ~277 debug messages>

yosys> opt_merge -nomux

3.70. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes_rcon'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

yosys> opt_muxtree

3.71. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes_rcon..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.72. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes_rcon.
Performed a total of 0 changes.

yosys> opt_merge

3.73. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes_rcon'.
Removed a total of 0 cells.

yosys> opt_share

3.74. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.75. Executing OPT_DFF pass (perform DFF optimizations).
Handling const CLK on $auto$ff.cc:262:slice$1152 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$928 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$896 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$832 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$768 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$704 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$608 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$576 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$544 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$512 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$480 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$448 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$408 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$312 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$248 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$280 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$217 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$218 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$219 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$220 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$221 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$222 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$223 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$224 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$225 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$226 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$227 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$228 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$229 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$230 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$231 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$232 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$233 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$234 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$235 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$236 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$237 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$238 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$239 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$240 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$241 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$242 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$243 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$244 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$245 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$246 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$247 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$249 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$250 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$251 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$252 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$253 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$254 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$255 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$256 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$257 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$258 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$259 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$260 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$261 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$262 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$263 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$264 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$265 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$266 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$267 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$268 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$269 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$270 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$271 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$272 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$273 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$274 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$275 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$276 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$277 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$278 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$279 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$281 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$282 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$283 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$284 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$285 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$286 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$287 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$288 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$289 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$290 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$291 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$292 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$293 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$294 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$295 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$296 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$297 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$298 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$299 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$300 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$301 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$302 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$303 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$304 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$305 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$306 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$307 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$308 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$309 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$310 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$311 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$377 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$378 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$379 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$380 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$381 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$382 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$383 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$384 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$385 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$386 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$387 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$388 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$389 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$390 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$391 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$392 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$393 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$394 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$395 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$396 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$397 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$398 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$399 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$400 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$401 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$402 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$403 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$404 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$405 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$406 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$407 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$417 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$418 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$419 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$420 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$421 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$422 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$423 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$424 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$425 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$426 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$427 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$428 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$429 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$430 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$431 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$432 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$433 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$434 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$435 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$436 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$437 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$438 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$439 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$440 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$441 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$442 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$443 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$444 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$445 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$446 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$447 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$449 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$450 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$451 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$452 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$453 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$454 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$455 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$456 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$457 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$458 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$459 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$460 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$461 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$462 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$463 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$464 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$465 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$466 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$467 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$468 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$469 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$470 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$471 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$472 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$473 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$474 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$475 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$476 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$477 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$478 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$479 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$481 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$482 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$483 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$484 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$485 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$486 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$487 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$488 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$489 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$490 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$491 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$492 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$493 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$494 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$495 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$496 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$497 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$498 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$499 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$500 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$501 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$502 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$503 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$504 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$505 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$506 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$507 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$508 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$509 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$510 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$511 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$513 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$514 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$515 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$516 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$517 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$518 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$519 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$520 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$521 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$522 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$523 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$524 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$525 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$526 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$527 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$528 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$529 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$530 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$531 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$532 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$533 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$534 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$535 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$536 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$537 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$538 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$539 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$540 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$541 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$542 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$543 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$545 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$546 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$547 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$548 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$549 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$550 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$551 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$552 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$553 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$554 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$555 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$556 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$557 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$558 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$559 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$560 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$561 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$562 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$563 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$564 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$565 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$566 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$567 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$568 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$569 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$570 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$571 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$572 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$573 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$574 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$575 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$577 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$578 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$579 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$580 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$581 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$582 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$583 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$584 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$585 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$586 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$587 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$588 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$589 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$590 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$591 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$592 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$593 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$594 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$595 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$596 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$597 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$598 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$599 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$600 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$601 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$602 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$603 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$604 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$605 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$606 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$607 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$673 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$674 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$675 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$676 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$677 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$678 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$679 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$680 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$681 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$682 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$683 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$684 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$685 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$686 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$687 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$688 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$689 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$690 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$691 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$692 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$693 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$694 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$695 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$696 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$697 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$698 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$699 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$700 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$701 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$702 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$703 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$737 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$738 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$739 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$740 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$741 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$742 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$743 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$744 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$745 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$746 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$747 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$748 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$749 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$750 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$751 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$752 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$753 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$754 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$755 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$756 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$757 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$758 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$759 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$760 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$761 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$762 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$763 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$764 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$765 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$766 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$767 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$801 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$802 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$803 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$804 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$805 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$806 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$807 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$808 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$809 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$810 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$811 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$812 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$813 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$814 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$815 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$816 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$817 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$818 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$819 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$820 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$821 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$822 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$823 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$824 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$825 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$826 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$827 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$828 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$829 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$830 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$831 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$865 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$866 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$867 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$868 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$869 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$870 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$871 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$872 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$873 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$874 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$875 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$876 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$877 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$878 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$879 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$880 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$881 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$882 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$883 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$884 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$885 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$886 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$887 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$888 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$889 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$890 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$891 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$892 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$893 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$894 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$895 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$897 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$898 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$899 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$900 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$901 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$902 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$903 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$904 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$905 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$906 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$907 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$908 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$909 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$910 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$911 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$912 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$913 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$914 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$915 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$916 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$917 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$918 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$919 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$920 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$921 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$922 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$923 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$924 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$925 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$926 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$927 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1121 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1122 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1123 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1124 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1125 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1126 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1127 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1128 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1129 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1130 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1131 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1132 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1133 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1134 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1135 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1136 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1137 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1138 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1139 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1140 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1141 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1142 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1143 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1144 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1145 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1146 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1147 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1148 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1149 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1150 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1151 ($_DFF_P_) from module aes_rcon (removing D path).

yosys> opt_clean

3.76. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes_rcon..
Removed 5 unused cells and 82 unused wires.
<suppressed ~6 debug messages>

yosys> opt_expr

3.77. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes_rcon.
<suppressed ~462 debug messages>

yosys> opt_muxtree

3.78. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes_rcon..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.79. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes_rcon.
Performed a total of 0 changes.

yosys> opt_merge

3.80. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes_rcon'.
<suppressed ~129 debug messages>
Removed a total of 43 cells.

yosys> opt_share

3.81. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.82. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$361 ($_DFF_P_) from module aes_rcon.

yosys> opt_clean

3.83. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes_rcon..
Removed 0 unused cells and 10 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.84. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes_rcon.
<suppressed ~1 debug messages>

yosys> opt_muxtree

3.85. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes_rcon..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.86. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes_rcon.
Performed a total of 0 changes.

yosys> opt_merge

3.87. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes_rcon'.
Removed a total of 0 cells.

yosys> opt_share

3.88. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.89. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.90. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes_rcon..

yosys> opt_expr

3.91. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes_rcon.
MAX OPT ITERATION = 3

yosys> opt_expr -full

3.92. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes_rcon.
<suppressed ~7 debug messages>

yosys> techmap -map +/techmap.v

3.93. Executing TECHMAP pass (map to technology primitives).

3.93.1. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.93.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~71 debug messages>

yosys> opt_expr

3.94. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes_rcon.

yosys> opt_merge -nomux

3.95. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes_rcon'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.96. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes_rcon..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.97. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes_rcon.
Performed a total of 0 changes.

yosys> opt_merge

3.98. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes_rcon'.
Removed a total of 0 cells.

yosys> opt_dff -nosdff -nodffe -sat

3.99. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.100. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes_rcon..

yosys> opt_expr

3.101. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes_rcon.
MAX OPT ITERATION = 1

yosys> abc -dff

3.102. Executing ABC pass (technology mapping using ABC).

3.102.1. Summary of detected clock domains:
  51 cells in clk=\clk, en={ }, arst={ }, srst={ }

3.102.2. Extracting gate netlist of module `\aes_rcon' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk
Extracted 51 gates and 53 wires to a netlist network with 1 inputs and 8 outputs.

3.102.2.1. Executing ABC.

yosys> abc -dff

3.103. Executing ABC pass (technology mapping using ABC).

3.103.1. Summary of detected clock domains:
  47 cells in clk=\clk, en={ }, arst={ }, srst={ }

3.103.2. Extracting gate netlist of module `\aes_rcon' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk
Extracted 47 gates and 48 wires to a netlist network with 1 inputs and 8 outputs.

3.103.2.1. Executing ABC.

yosys> abc -dff

3.104. Executing ABC pass (technology mapping using ABC).

3.104.1. Summary of detected clock domains:
  46 cells in clk=\clk, en={ }, arst={ }, srst={ }

3.104.2. Extracting gate netlist of module `\aes_rcon' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk
Extracted 46 gates and 47 wires to a netlist network with 1 inputs and 8 outputs.

3.104.2.1. Executing ABC.

yosys> abc -dff

3.105. Executing ABC pass (technology mapping using ABC).

3.105.1. Summary of detected clock domains:
  47 cells in clk=\clk, en={ }, arst={ }, srst={ }

3.105.2. Extracting gate netlist of module `\aes_rcon' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk
Extracted 47 gates and 48 wires to a netlist network with 1 inputs and 8 outputs.

3.105.2.1. Executing ABC.

yosys> opt_ffinv

3.106. Executing OPT_FFINV pass (push inverters through FFs).
Discovering LUTs.
Pushed 0 inverters.

yosys> opt_expr

3.107. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes_rcon.

yosys> opt_merge -nomux

3.108. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes_rcon'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.109. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes_rcon..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.110. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes_rcon.
Performed a total of 0 changes.

yosys> opt_merge

3.111. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes_rcon'.
Removed a total of 0 cells.

yosys> opt_share

3.112. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -sat

3.113. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.114. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes_rcon..
Removed 0 unused cells and 166 unused wires.
<suppressed ~3 debug messages>

yosys> opt_expr

3.115. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes_rcon.
MAX OPT ITERATION = 1

yosys> bmuxmap

3.116. Executing BMUXMAP pass.

yosys> demuxmap

3.117. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> abc -script /tmp/yosys_5Dm06b/abc_tmp_1.scr

3.118. Executing ABC pass (technology mapping using ABC).

3.118.1. Extracting gate netlist of module `\aes_rcon' to `<abc-temp-dir>/input.blif'..
Extracted 35 gates and 46 wires to a netlist network with 11 inputs and 18 outputs.

3.118.1.1. Executing ABC.
DE:   #PIs =  11  #Luts =    19  Max Lvl =   4  Avg Lvl =   1.83  [   0.19 sec. at Pass 0]
DE:   #PIs =  11  #Luts =    19  Max Lvl =   2  Avg Lvl =   1.50  [   1.08 sec. at Pass 1]
DE:   #PIs =  11  #Luts =    18  Max Lvl =   3  Avg Lvl =   1.67  [   0.22 sec. at Pass 2]
DE:   #PIs =  11  #Luts =    18  Max Lvl =   3  Avg Lvl =   1.67  [   0.62 sec. at Pass 3]
DE:   #PIs =  11  #Luts =    18  Max Lvl =   3  Avg Lvl =   1.67  [   0.49 sec. at Pass 4]
DE:   #PIs =  11  #Luts =    18  Max Lvl =   3  Avg Lvl =   1.67  [   0.80 sec. at Pass 5]
DE:   #PIs =  11  #Luts =    18  Max Lvl =   3  Avg Lvl =   1.67  [   0.99 sec. at Pass 6]
DE:   #PIs =  11  #Luts =    18  Max Lvl =   3  Avg Lvl =   1.67  [   0.52 sec. at Pass 7]

yosys> opt_expr

3.119. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes_rcon.

yosys> opt_merge -nomux

3.120. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes_rcon'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.121. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes_rcon..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.122. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes_rcon.
Performed a total of 0 changes.

yosys> opt_merge

3.123. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes_rcon'.
Removed a total of 0 cells.

yosys> opt_share

3.124. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.125. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.126. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes_rcon..
Removed 0 unused cells and 46 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.127. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes_rcon.
MAX OPT ITERATION = 1

yosys> opt_ffinv

3.128. Executing OPT_FFINV pass (push inverters through FFs).
Discovering LUTs.
Pushed 1 inverters.

yosys> stat

3.129. Printing statistics.

=== aes_rcon ===

   Number of wires:                 24
   Number of wire bits:             55
   Number of public wires:           3
   Number of public wire bits:      34
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 29
     $_DFF_P_                       11
     $lut                           18


yosys> shregmap -minlen 8 -maxlen 20

3.130. Executing SHREGMAP pass (map shift registers).
Converted 0 dff cells into 0 shift registers.

yosys> dfflegalize -cell $_DFF_?_ 0 -cell $_DFF_???_ 0 -cell $_DFFE_????_ 0 -cell $_DFFSR_???_ 0 -cell $_DFFSRE_????_ 0 -cell $_DLATCHSR_PPP_ 0

3.131. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

yosys> stat

3.132. Printing statistics.

=== aes_rcon ===

   Number of wires:                 24
   Number of wire bits:             55
   Number of public wires:           3
   Number of public wire bits:      34
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 29
     $_DFF_P_                       11
     $lut                           18


yosys> techmap -map +/techmap.v -map +/rapidsilicon/genesis/ffs_map.v

3.133. Executing TECHMAP pass (map to technology primitives).

3.133.1. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.133.2. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/ffs_map.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/ffs_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP0N_'.
Generating RTLIL representation for module `\$_DFFE_PN0P_'.
Generating RTLIL representation for module `\$_DFFE_PN0N_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP1N_'.
Generating RTLIL representation for module `\$_DFFE_PN1P_'.
Generating RTLIL representation for module `\$_DFFE_PN1N_'.
Generating RTLIL representation for module `\$_DFFSR_PPP_'.
Generating RTLIL representation for module `\$_DFFSR_PNP_'.
Generating RTLIL representation for module `\$_DFFSR_PNN_'.
Generating RTLIL representation for module `\$_DFFSR_PPN_'.
Generating RTLIL representation for module `\$_DFFSR_NPP_'.
Generating RTLIL representation for module `\$_DFFSR_NNP_'.
Generating RTLIL representation for module `\$_DFFSR_NNN_'.
Generating RTLIL representation for module `\$_DFFSR_NPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PNPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPNP_'.
Generating RTLIL representation for module `\$_DFFSRE_PNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PNPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PPNN_'.
Generating RTLIL representation for module `\$_DFFSRE_PNNN_'.
Generating RTLIL representation for module `\$_DLATCHSR_PPP_'.
Generating RTLIL representation for module `\$_DLATCHSR_NPP_'.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP0N_'.
Generating RTLIL representation for module `\$_DFFE_NN0P_'.
Generating RTLIL representation for module `\$_DFFE_NN0N_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_NP1N_'.
Generating RTLIL representation for module `\$_DFFE_NN1P_'.
Generating RTLIL representation for module `\$_DFFE_NN1N_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNPP_'.
Generating RTLIL representation for module `\$_DFFSRE_NPNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPN_'.
Generating RTLIL representation for module `\$_DFFSRE_NNPN_'.
Generating RTLIL representation for module `\$_DFFSRE_NPNN_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNN_'.
Generating RTLIL representation for module `\$__SHREG_DFF_P_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PN0_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NN0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFF_PN1_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_NN1_'.
Successfully finished Verilog frontend.

3.133.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $lut.
Using template \$_DFF_P_ for cells of type $_DFF_P_.
No more expansions possible.
<suppressed ~165 debug messages>

yosys> opt_expr -mux_undef

3.134. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes_rcon.
<suppressed ~235 debug messages>

yosys> simplemap

3.135. Executing SIMPLEMAP pass (map simple cells to gate primitives).

yosys> opt_expr

3.136. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes_rcon.

yosys> opt_merge

3.137. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes_rcon'.
<suppressed ~78 debug messages>
Removed a total of 26 cells.

yosys> opt_dff -nodffe -nosdff

3.138. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.139. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes_rcon..
Removed 1 unused cells and 62 unused wires.
<suppressed ~2 debug messages>

yosys> opt_expr

3.140. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes_rcon.
<suppressed ~6 debug messages>

yosys> opt_merge -nomux

3.141. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes_rcon'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.142. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes_rcon..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.143. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes_rcon.
Performed a total of 0 changes.

yosys> opt_merge

3.144. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes_rcon'.
Removed a total of 0 cells.

yosys> opt_share

3.145. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.146. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.147. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes_rcon..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.148. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes_rcon.
MAX OPT ITERATION = 1

yosys> abc -script /tmp/yosys_5Dm06b/abc_tmp_2.scr

3.149. Executing ABC pass (technology mapping using ABC).

3.149.1. Extracting gate netlist of module `\aes_rcon' to `<abc-temp-dir>/input.blif'..
Extracted 60 gates and 73 wires to a netlist network with 11 inputs and 17 outputs.

3.149.1.1. Executing ABC.
DE:   #PIs =  11  #Luts =    17  Max Lvl =   3  Avg Lvl =   1.76  [   0.14 sec. at Pass 0]
DE:   #PIs =  11  #Luts =    17  Max Lvl =   2  Avg Lvl =   1.53  [   0.50 sec. at Pass 1]
DE:   #PIs =  11  #Luts =    17  Max Lvl =   2  Avg Lvl =   1.53  [   0.32 sec. at Pass 2]
DE:   #PIs =  11  #Luts =    17  Max Lvl =   2  Avg Lvl =   1.53  [   0.59 sec. at Pass 3]
DE:   #PIs =  11  #Luts =    17  Max Lvl =   2  Avg Lvl =   1.53  [   0.51 sec. at Pass 4]
DE:   #PIs =  11  #Luts =    17  Max Lvl =   2  Avg Lvl =   1.53  [   0.75 sec. at Pass 5]
DE:   #PIs =  11  #Luts =    17  Max Lvl =   2  Avg Lvl =   1.53  [   1.04 sec. at Pass 6]
DE:   #PIs =  11  #Luts =    17  Max Lvl =   2  Avg Lvl =   1.53  [   0.83 sec. at Pass 7]

yosys> opt_expr

3.150. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes_rcon.

yosys> opt_merge -nomux

3.151. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes_rcon'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.152. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes_rcon..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.153. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes_rcon.
Performed a total of 0 changes.

yosys> opt_merge

3.154. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes_rcon'.
Removed a total of 0 cells.

yosys> opt_share

3.155. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.156. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.157. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes_rcon..
Removed 0 unused cells and 59 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.158. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes_rcon.
MAX OPT ITERATION = 1

yosys> hierarchy -check

3.159. Executing HIERARCHY pass (managing design hierarchy).

3.159.1. Analyzing design hierarchy..
Top module:  \aes_rcon

3.159.2. Analyzing design hierarchy..
Top module:  \aes_rcon
Removed 0 unused modules.

yosys> stat

3.160. Printing statistics.

=== aes_rcon ===

   Number of wires:                 23
   Number of wire bits:             54
   Number of public wires:           3
   Number of public wire bits:      34
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 28
     $lut                           17
     dffsre                         11


yosys> opt_clean -purge

3.161. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes_rcon..

yosys> write_verilog -noattr -nohex synthesized.v

3.162. Executing Verilog backend.
Dumping module `\aes_rcon'.

Warnings: 5 unique messages, 5 total
End of script. Logfile hash: 631a2471be, CPU: user 0.44s system 0.03s, MEM: 32.28 MB peak
Yosys 0.18+10 (git sha1 c98b0e94e, gcc 9.4.0 -fPIC -Os)
Time spent: 98% 6x abc (24 sec), 0% 14x read_verilog (0 sec), ...
real 17.94
user 18.11
sys 6.33
