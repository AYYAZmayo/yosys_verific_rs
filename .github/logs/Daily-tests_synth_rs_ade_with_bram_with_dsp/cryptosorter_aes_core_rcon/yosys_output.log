
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys-Verific 0.0.140
 Yosys 0.18+10 (git sha1 92b23013e, gcc 11.2.0 -fPIC -Os)


-- Executing script file `yosys.ys' --
echo on

yosys> plugin -i synth-rs

yosys> read -verific

yosys> read -incdir .

yosys> verific -vlog-incdir .

1. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Sep22_SW_Release, released at Fri Sep 30 20:01:32 2022.

yosys> verilog_defaults -add -I.

yosys> read -vlog2k aes_sbox.v aes_rcon.v aes_key_expand_128.v aes_sbox_reg.v

yosys> verific -vlog2k aes_sbox.v aes_rcon.v aes_key_expand_128.v aes_sbox_reg.v

2. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Sep22_SW_Release, released at Fri Sep 30 20:01:32 2022.
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'aes_sbox.v'
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'aes_rcon.v'
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'aes_key_expand_128.v'
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'aes_sbox_reg.v'

yosys> synth_rs -top aes_rcon -tech genesis2 -goal area -de -verilog synthesized.v

3. Executing synth_rs pass: v0.4.116

yosys> read_verilog -lib -specify -nomem2reg +/rapidsilicon/common/cells_sim.v +/rapidsilicon/genesis2/cells_sim.v +/rapidsilicon/genesis2/dsp_sim.v +/rapidsilicon/genesis2/brams_sim.v

3.1. Executing Verilog-2005 frontend: /nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v
Parsing Verilog input from `/nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\inv'.
Generating RTLIL representation for module `\buff'.
Generating RTLIL representation for module `\logic_0'.
Generating RTLIL representation for module `\logic_1'.
Generating RTLIL representation for module `\gclkbuff'.
Successfully finished Verilog frontend.

3.2. Executing Verilog-2005 frontend: /nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/cells_sim.v
Parsing Verilog input from `/nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\dff'.
Generating RTLIL representation for module `\dffn'.
Generating RTLIL representation for module `\sdff'.
Generating RTLIL representation for module `\sdffn'.
Generating RTLIL representation for module `\dffr'.
Generating RTLIL representation for module `\dffnr'.
Generating RTLIL representation for module `\dffe'.
Generating RTLIL representation for module `\dffne'.
Generating RTLIL representation for module `\sdffre'.
Generating RTLIL representation for module `\sdffnre'.
Generating RTLIL representation for module `\dffre'.
Generating RTLIL representation for module `\dffnre'.
Generating RTLIL representation for module `\latch'.
Generating RTLIL representation for module `\latchn'.
Generating RTLIL representation for module `\latchr'.
Generating RTLIL representation for module `\latchnr'.
Generating RTLIL representation for module `\fa_1bit'.
Successfully finished Verilog frontend.

3.3. Executing Verilog-2005 frontend: /nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/dsp_sim.v
Parsing Verilog input from `/nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/dsp_sim.v' to AST representation.
Generating RTLIL representation for module `\RS_DSP'.
Generating RTLIL representation for module `\RS_DSP_MULT'.
Generating RTLIL representation for module `\RS_DSP_MULT_REGIN'.
Generating RTLIL representation for module `\RS_DSP_MULT_REGOUT'.
Generating RTLIL representation for module `\RS_DSP_MULT_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP_MULTADD'.
Generating RTLIL representation for module `\RS_DSP_MULTADD_REGIN'.
Generating RTLIL representation for module `\RS_DSP_MULTADD_REGOUT'.
Generating RTLIL representation for module `\RS_DSP_MULTADD_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP_MULTACC'.
Generating RTLIL representation for module `\RS_DSP_MULTACC_REGIN'.
Generating RTLIL representation for module `\RS_DSP_MULTACC_REGOUT'.
Generating RTLIL representation for module `\RS_DSP_MULTACC_REGIN_REGOUT'.
Generating RTLIL representation for module `\dsp_t1_20x18x64_cfg_ports'.
Generating RTLIL representation for module `\dsp_t1_sim_cfg_ports'.
Successfully finished Verilog frontend.

3.4. Executing Verilog-2005 frontend: /nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/brams_sim.v
Parsing Verilog input from `/nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/brams_sim.v' to AST representation.
Generating RTLIL representation for module `\TDP_BRAM18'.
Generating RTLIL representation for module `\RS_TDP36K'.
Generating RTLIL representation for module `\BRAM2x18_TDP'.
Generating RTLIL representation for module `\BRAM2x18_SDP'.
Generating RTLIL representation for module `\_$_mem_v2_asymmetric'.
Successfully finished Verilog frontend.

yosys> hierarchy -check -top aes_rcon

3.5. Executing HIERARCHY pass (managing design hierarchy).
VERIFIC-INFO [VERI-1018] aes_rcon.v:61: compiling module 'aes_rcon'
VERIFIC-WARNING [VERI-2371] aes_rcon.v:70: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] aes_rcon.v:71: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] aes_rcon.v:75: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] aes_rcon.v:76: delay control is not supported for synthesis
Importing module aes_rcon.

3.5.1. Analyzing design hierarchy..
Top module:  \aes_rcon

3.5.2. Analyzing design hierarchy..
Top module:  \aes_rcon
Removed 0 unused modules.

yosys> proc

3.6. Executing PROC pass (convert processes to netlists).

yosys> proc_clean

3.6.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> proc_rmdead

3.6.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

yosys> proc_prune

3.6.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

yosys> proc_init

3.6.4. Executing PROC_INIT pass (extract init attributes).

yosys> proc_arst

3.6.5. Executing PROC_ARST pass (detect async resets in processes).

yosys> proc_rom

3.6.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

yosys> proc_mux

3.6.7. Executing PROC_MUX pass (convert decision trees to multiplexers).

yosys> proc_dlatch

3.6.8. Executing PROC_DLATCH pass (convert process syncs to latches).

yosys> proc_dff

3.6.9. Executing PROC_DFF pass (convert process syncs to FFs).

yosys> proc_memwr

3.6.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

yosys> proc_clean

3.6.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> opt_expr -keepdc

3.6.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes_rcon.

yosys> demuxmap

3.7. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> flatten

3.8. Executing FLATTEN pass (flatten design).

yosys> demuxmap

3.9. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> tribuf -logic -formal

3.10. Executing TRIBUF pass.

yosys> deminout

3.11. Executing DEMINOUT pass (demote inout ports to input or output).

yosys> opt_expr

3.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes_rcon.

yosys> opt_clean

3.13. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes_rcon..
Removed 0 unused cells and 10 unused wires.
<suppressed ~6 debug messages>

yosys> check

3.14. Executing CHECK pass (checking for obvious problems).
Checking module aes_rcon...
Found and reported 0 problems.

yosys> opt_expr

3.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes_rcon.

yosys> opt_merge -nomux

3.16. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes_rcon'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes_rcon..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

yosys> opt_reduce

3.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes_rcon.
Performed a total of 0 changes.

yosys> opt_merge

3.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes_rcon'.
Removed a total of 0 cells.

yosys> opt_share

3.20. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.21. Executing OPT_DFF pass (perform DFF optimizations).
Removing never-active async load on $verific$rcnt_reg$aes_rcon.v:76$22 ($aldff) from module aes_rcon.
Removing never-active async load on $verific$out_reg$aes_rcon.v:71$18 ($aldff) from module aes_rcon.

yosys> opt_clean

3.22. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes_rcon..

yosys> opt_expr

3.23. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes_rcon.
MAX OPT ITERATION = 1

yosys> fsm -encoding binary

3.24. Executing FSM pass (extract and optimize FSM).

yosys> fsm_detect

3.24.1. Executing FSM_DETECT pass (finding FSMs in design).

yosys> fsm_extract

3.24.2. Executing FSM_EXTRACT pass (extracting FSM from design).

yosys> fsm_opt

3.24.3. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> opt_clean

3.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes_rcon..

yosys> fsm_opt

3.24.5. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> fsm_recode -encoding binary

3.24.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

yosys> fsm_info

3.24.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

yosys> fsm_map

3.24.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

yosys> opt_expr

3.25. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes_rcon.

yosys> opt_merge -nomux

3.26. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes_rcon'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.27. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes_rcon..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

yosys> opt_reduce

3.28. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes_rcon.
Performed a total of 0 changes.

yosys> opt_merge

3.29. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes_rcon'.
Removed a total of 0 cells.

yosys> opt_share

3.30. Executing OPT_SHARE pass.

yosys> opt_dff -sat

3.31. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $verific$rcnt_reg$aes_rcon.v:76$22 ($dff) from module aes_rcon (D = \rcnt_next, Q = \rcnt, rval = 4'0000).
Adding SRST signal on $verific$out_reg$aes_rcon.v:71$18 ($dff) from module aes_rcon (D = $verific$n38$5, Q = \out, rval = 16777216).
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$25 ($sdff) from module aes_rcon.
Setting constant 0-bit at position 1 on $auto$ff.cc:262:slice$25 ($sdff) from module aes_rcon.
Setting constant 0-bit at position 2 on $auto$ff.cc:262:slice$25 ($sdff) from module aes_rcon.
Setting constant 0-bit at position 3 on $auto$ff.cc:262:slice$25 ($sdff) from module aes_rcon.
Setting constant 0-bit at position 4 on $auto$ff.cc:262:slice$25 ($sdff) from module aes_rcon.
Setting constant 0-bit at position 5 on $auto$ff.cc:262:slice$25 ($sdff) from module aes_rcon.
Setting constant 0-bit at position 6 on $auto$ff.cc:262:slice$25 ($sdff) from module aes_rcon.
Setting constant 0-bit at position 7 on $auto$ff.cc:262:slice$25 ($sdff) from module aes_rcon.
Setting constant 0-bit at position 8 on $auto$ff.cc:262:slice$25 ($sdff) from module aes_rcon.
Setting constant 0-bit at position 9 on $auto$ff.cc:262:slice$25 ($sdff) from module aes_rcon.
Setting constant 0-bit at position 10 on $auto$ff.cc:262:slice$25 ($sdff) from module aes_rcon.
Setting constant 0-bit at position 11 on $auto$ff.cc:262:slice$25 ($sdff) from module aes_rcon.
Setting constant 0-bit at position 12 on $auto$ff.cc:262:slice$25 ($sdff) from module aes_rcon.
Setting constant 0-bit at position 13 on $auto$ff.cc:262:slice$25 ($sdff) from module aes_rcon.
Setting constant 0-bit at position 14 on $auto$ff.cc:262:slice$25 ($sdff) from module aes_rcon.
Setting constant 0-bit at position 15 on $auto$ff.cc:262:slice$25 ($sdff) from module aes_rcon.
Setting constant 0-bit at position 16 on $auto$ff.cc:262:slice$25 ($sdff) from module aes_rcon.
Setting constant 0-bit at position 17 on $auto$ff.cc:262:slice$25 ($sdff) from module aes_rcon.
Setting constant 0-bit at position 18 on $auto$ff.cc:262:slice$25 ($sdff) from module aes_rcon.
Setting constant 0-bit at position 19 on $auto$ff.cc:262:slice$25 ($sdff) from module aes_rcon.
Setting constant 0-bit at position 20 on $auto$ff.cc:262:slice$25 ($sdff) from module aes_rcon.
Setting constant 0-bit at position 21 on $auto$ff.cc:262:slice$25 ($sdff) from module aes_rcon.
Setting constant 0-bit at position 22 on $auto$ff.cc:262:slice$25 ($sdff) from module aes_rcon.
Setting constant 0-bit at position 23 on $auto$ff.cc:262:slice$25 ($sdff) from module aes_rcon.

yosys> opt_clean

3.32. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes_rcon..
Removed 2 unused cells and 2 unused wires.
<suppressed ~3 debug messages>

yosys> opt_expr

3.33. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes_rcon.

yosys> opt_muxtree

3.34. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes_rcon..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.35. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes_rcon.
Performed a total of 0 changes.

yosys> opt_merge

3.36. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes_rcon'.
Removed a total of 0 cells.

yosys> opt_share

3.37. Executing OPT_SHARE pass.

yosys> opt_dff -sat

3.38. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.39. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes_rcon..

yosys> opt_expr

3.40. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes_rcon.
MAX OPT ITERATION = 2

yosys> wreduce -keepdc

3.41. Executing WREDUCE pass (reducing word size of cells).
Removed top 3 bits (of 4) from port B of cell aes_rcon.$verific$add_9$aes_rcon.v:73$19 ($add).

yosys> peepopt

3.42. Executing PEEPOPT pass (run peephole optimizers).

yosys> opt_clean

3.43. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes_rcon..

yosys> demuxmap

3.44. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> stat

3.45. Printing statistics.

=== aes_rcon ===

   Number of wires:                  6
   Number of wire bits:             74
   Number of public wires:           5
   Number of public wire bits:      42
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  4
     $add                            1
     $bmux                           1
     $sdff                           2


yosys> wreduce t:$mul

3.46. Executing WREDUCE pass (reducing word size of cells).

yosys> rs_dsp_macc -genesis2 -max_dsp 154

3.47. Executing RS_DSP_MACC pass.

yosys> techmap -map +/mul2dsp_check_maxwidth.v -D DSP_A_MAXWIDTH=20 -D DSP_B_MAXWIDTH=18 -D DSP_A_MINWIDTH=11 -D DSP_B_MINWIDTH=10 -D DSP_NAME=$__RS_MUL20X18 a:valid_map

3.48. Executing TECHMAP pass (map to technology primitives).

3.48.1. Executing Verilog-2005 frontend: /nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/mul2dsp_check_maxwidth.v
Parsing Verilog input from `/nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/mul2dsp_check_maxwidth.v' to AST representation.
Generating RTLIL representation for module `\_80_mul'.
Generating RTLIL representation for module `\_90_soft_mul'.
Successfully finished Verilog frontend.

3.48.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

yosys> stat

3.49. Printing statistics.

=== aes_rcon ===

   Number of wires:                  6
   Number of wire bits:             74
   Number of public wires:           5
   Number of public wire bits:      42
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  4
     $add                            1
     $bmux                           1
     $sdff                           2


yosys> chtype -set $mul t:$__soft_mul

yosys> techmap -map +/rapidsilicon/genesis2/dsp_map.v -D USE_DSP_CFG_PARAMS=0

3.50. Executing TECHMAP pass (map to technology primitives).

3.50.1. Executing Verilog-2005 frontend: /nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/dsp_map.v
Parsing Verilog input from `/nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/dsp_map.v' to AST representation.
Generating RTLIL representation for module `\$__RS_MUL20X18'.
Successfully finished Verilog frontend.

3.50.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

yosys> techmap -map +/rapidsilicon/genesis2/dsp_final_map.v

3.51. Executing TECHMAP pass (map to technology primitives).

3.51.1. Executing Verilog-2005 frontend: /nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/dsp_final_map.v
Parsing Verilog input from `/nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/dsp_final_map.v' to AST representation.
Generating RTLIL representation for module `\dsp_t1_20x18x64_cfg_ports'.
Successfully finished Verilog frontend.

3.51.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

yosys> rs-pack-dsp-regs

3.52. Executing rs_pack_dsp_regs pass.

yosys> rs_dsp_io_regs

3.53. Executing RS_DSP_IO_REGS pass.

yosys> alumacc

3.54. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module aes_rcon:
  creating $macc model for $verific$add_9$aes_rcon.v:73$19 ($add).
  creating $alu model for $macc $verific$add_9$aes_rcon.v:73$19.
  creating $alu cell for $verific$add_9$aes_rcon.v:73$19: $auto$alumacc.cc:485:replace_alu$27
  created 1 $alu and 0 $macc cells.

yosys> opt_expr

3.55. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes_rcon.

yosys> opt_merge -nomux

3.56. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes_rcon'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.57. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes_rcon..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.58. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes_rcon.
Performed a total of 0 changes.

yosys> opt_merge

3.59. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes_rcon'.
Removed a total of 0 cells.

yosys> opt_share

3.60. Executing OPT_SHARE pass.

yosys> opt_dff -nodffe

3.61. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.62. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes_rcon..

yosys> opt_expr

3.63. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes_rcon.
MAX OPT ITERATION = 1

yosys> stat

3.64. Printing statistics.

=== aes_rcon ===

   Number of wires:                  8
   Number of wire bits:             82
   Number of public wires:           5
   Number of public wire bits:      42
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  4
     $alu                            1
     $bmux                           1
     $sdff                           2


yosys> memory -nomap

3.65. Executing MEMORY pass.

yosys> opt_mem

3.65.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

yosys> opt_mem_priority

3.65.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

yosys> opt_mem_feedback

3.65.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

yosys> memory_bmux2rom

3.65.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

yosys> memory_dff

3.65.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).
Checking read port `$auto$memory_bmux2rom.cc:63:execute$30'[0] in module `\aes_rcon': merging output FF to cell.

yosys> opt_clean

3.65.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes_rcon..
Removed 1 unused cells and 8 unused wires.
<suppressed ~2 debug messages>

yosys> memory_share

3.65.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

yosys> opt_mem_widen

3.65.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

yosys> opt_clean

3.65.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes_rcon..

yosys> memory_collect

3.65.10. Executing MEMORY_COLLECT pass (generating $mem cells).

yosys> stat

3.66. Printing statistics.

=== aes_rcon ===

   Number of wires:                  8
   Number of wire bits:             82
   Number of public wires:           5
   Number of public wire bits:      42
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  3
     $alu                            1
     $mem_v2                         1
     $sdff                           1


yosys> muxpack

3.67. Executing MUXPACK pass ($mux cell cascades to $pmux).
Converted 0 (p)mux cells into 0 pmux cells.

yosys> opt_clean

3.68. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes_rcon..

yosys> memory_libmap -lib +/rapidsilicon/genesis2/brams_new_swap.txt -limit 150 a:read_swapped

3.69. Executing MEMORY_LIBMAP pass (mapping memories to cells).

yosys> memory_libmap -lib +/rapidsilicon/genesis2/brams_new.txt -limit 150

3.70. Executing MEMORY_LIBMAP pass (mapping memories to cells).
using FF mapping for memory aes_rcon.$auto$memory_bmux2rom.cc:63:execute$30
<suppressed ~97 debug messages>

yosys> rs_bram_split -new_mapping

3.71. Executing Rs_BRAM_Split pass.

yosys> techmap -autoproc -map +/rapidsilicon/genesis2/brams_map_new.v

3.72. Executing TECHMAP pass (map to technology primitives).

3.72.1. Executing Verilog-2005 frontend: /nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/brams_map_new.v
Parsing Verilog input from `/nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/brams_map_new.v' to AST representation.
Generating RTLIL representation for module `\$__RS_FACTOR_BRAM36_TDP'.
Generating RTLIL representation for module `\$__RS_FACTOR_BRAM18_TDP'.
Generating RTLIL representation for module `\$__RS_FACTOR_BRAM18_SDP'.
Generating RTLIL representation for module `\$__RS_FACTOR_BRAM36_SDP'.
Successfully finished Verilog frontend.

3.72.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~6 debug messages>

yosys> techmap -map +/rapidsilicon/genesis2/brams_final_map_new.v

3.73. Executing TECHMAP pass (map to technology primitives).

3.73.1. Executing Verilog-2005 frontend: /nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/brams_final_map_new.v
Parsing Verilog input from `/nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/brams_final_map_new.v' to AST representation.
Generating RTLIL representation for module `\BRAM2x18_TDP'.
Generating RTLIL representation for module `\BRAM2x18_SDP'.
Successfully finished Verilog frontend.

3.73.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

yosys> pmuxtree

3.74. Executing PMUXTREE pass.

yosys> muxpack

3.75. Executing MUXPACK pass ($mux cell cascades to $pmux).
Converted 0 (p)mux cells into 0 pmux cells.

yosys> memory_map

3.76. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).
Mapping memory $auto$memory_bmux2rom.cc:63:execute$30 in module \aes_rcon:
  created 16 $dff cells and 0 static cells of width 32.
Extracted data FF from read port 0 of aes_rcon.$auto$memory_bmux2rom.cc:63:execute$30: $$auto$memory_bmux2rom.cc:63:execute$30$rdreg[0]
  read interface: 1 $dff and 15 $mux cells.
  write interface: 0 write mux blocks.

yosys> stat

3.77. Printing statistics.

=== aes_rcon ===

   Number of wires:                 71
   Number of wire bits:           2098
   Number of public wires:           5
   Number of public wire bits:      42
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 34
     $alu                            1
     $dff                           16
     $mux                           15
     $sdff                           2


yosys> techmap -map +/techmap.v -map +/rapidsilicon/genesis2/arith_map.v

3.78. Executing TECHMAP pass (map to technology primitives).

3.78.1. Executing Verilog-2005 frontend: /nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.78.2. Executing Verilog-2005 frontend: /nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/arith_map.v
Parsing Verilog input from `/nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_rs_alu'.
Successfully finished Verilog frontend.

3.78.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $sdff.
Using extmapper simplemap for cells of type $dff.
Using template $paramod$32a7b7b86c07519b7537abc18e96f0331f97914d\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $and.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000100 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $or.
No more expansions possible.
<suppressed ~338 debug messages>

yosys> stat

3.79. Printing statistics.

=== aes_rcon ===

   Number of wires:                103
   Number of wire bits:           3270
   Number of public wires:           5
   Number of public wire bits:      42
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1060
     $_AND_                         10
     $_DFF_P_                      512
     $_MUX_                        484
     $_NOT_                          4
     $_OR_                           5
     $_SDFF_PP0_                    35
     $_SDFF_PP1_                     1
     $_XOR_                          9


yosys> opt_expr

3.80. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes_rcon.
<suppressed ~277 debug messages>

yosys> opt_merge -nomux

3.81. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes_rcon'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

yosys> opt_muxtree

3.82. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes_rcon..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.83. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes_rcon.
Performed a total of 0 changes.

yosys> opt_merge

3.84. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes_rcon'.
Removed a total of 0 cells.

yosys> opt_share

3.85. Executing OPT_SHARE pass.

yosys> opt_dff -nodffe

3.86. Executing OPT_DFF pass (perform DFF optimizations).
Handling const CLK on $auto$ff.cc:262:slice$970 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$906 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$842 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$586 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$650 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$286 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$254 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$318 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$394 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$362 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$426 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$458 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$490 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$522 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$554 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$682 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$223 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$224 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$225 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$226 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$227 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$228 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$229 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$230 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$231 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$232 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$233 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$234 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$235 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$236 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$237 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$238 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$239 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$240 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$241 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$242 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$243 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$244 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$245 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$246 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$247 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$248 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$249 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$250 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$251 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$252 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$253 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$255 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$256 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$257 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$258 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$259 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$260 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$261 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$262 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$263 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$264 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$265 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$266 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$267 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$268 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$269 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$270 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$271 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$272 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$273 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$274 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$275 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$276 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$277 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$278 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$279 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$280 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$281 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$282 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$283 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$284 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$285 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$287 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$288 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$289 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$290 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$291 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$292 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$293 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$294 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$295 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$296 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$297 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$298 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$299 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$300 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$301 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$302 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$303 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$304 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$305 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$306 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$307 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$308 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$309 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$310 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$311 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$312 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$313 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$314 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$315 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$316 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$317 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$331 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$332 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$333 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$334 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$335 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$336 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$337 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$338 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$339 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$340 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$341 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$342 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$343 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$344 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$345 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$346 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$347 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$348 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$349 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$350 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$351 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$352 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$353 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$354 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$355 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$356 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$357 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$358 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$359 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$360 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$361 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$363 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$364 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$365 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$366 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$367 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$368 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$369 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$370 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$371 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$372 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$373 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$374 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$375 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$376 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$377 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$378 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$379 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$380 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$381 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$382 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$383 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$384 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$385 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$386 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$387 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$388 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$389 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$390 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$391 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$392 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$393 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$395 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$396 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$397 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$398 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$399 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$400 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$401 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$402 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$403 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$404 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$405 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$406 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$407 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$408 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$409 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$410 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$411 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$412 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$413 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$414 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$415 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$416 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$417 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$418 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$419 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$420 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$421 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$422 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$423 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$424 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$425 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$427 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$428 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$429 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$430 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$431 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$432 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$433 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$434 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$435 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$436 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$437 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$438 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$439 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$440 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$441 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$442 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$443 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$444 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$445 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$446 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$447 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$448 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$449 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$450 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$451 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$452 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$453 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$454 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$455 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$456 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$457 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$459 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$460 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$461 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$462 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$463 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$464 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$465 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$466 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$467 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$468 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$469 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$470 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$471 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$472 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$473 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$474 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$475 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$476 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$477 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$478 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$479 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$480 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$481 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$482 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$483 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$484 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$485 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$486 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$487 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$488 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$489 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$491 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$492 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$493 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$494 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$495 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$496 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$497 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$498 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$499 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$500 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$501 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$502 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$503 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$504 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$505 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$506 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$507 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$508 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$509 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$510 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$511 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$512 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$513 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$514 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$515 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$516 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$517 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$518 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$519 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$520 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$521 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$523 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$524 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$525 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$526 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$527 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$528 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$529 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$530 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$531 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$532 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$533 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$534 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$535 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$536 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$537 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$538 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$539 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$540 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$541 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$542 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$543 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$544 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$545 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$546 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$547 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$548 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$549 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$550 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$551 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$552 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$553 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$555 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$556 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$557 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$558 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$559 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$560 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$561 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$562 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$563 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$564 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$565 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$566 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$567 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$568 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$569 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$570 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$571 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$572 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$573 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$574 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$575 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$576 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$577 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$578 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$579 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$580 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$581 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$582 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$583 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$584 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$585 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$619 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$620 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$621 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$622 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$623 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$624 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$625 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$626 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$627 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$628 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$629 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$630 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$631 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$632 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$633 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$634 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$635 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$636 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$637 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$638 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$639 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$640 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$641 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$642 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$643 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$644 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$645 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$646 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$647 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$648 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$649 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$651 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$652 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$653 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$654 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$655 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$656 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$657 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$658 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$659 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$660 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$661 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$662 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$663 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$664 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$665 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$666 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$667 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$668 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$669 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$670 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$671 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$672 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$673 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$674 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$675 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$676 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$677 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$678 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$679 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$680 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$681 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$811 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$812 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$813 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$814 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$815 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$816 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$817 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$818 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$819 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$820 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$821 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$822 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$823 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$824 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$825 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$826 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$827 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$828 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$829 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$830 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$831 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$832 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$833 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$834 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$835 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$836 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$837 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$838 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$839 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$840 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$841 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$875 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$876 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$877 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$878 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$879 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$880 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$881 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$882 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$883 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$884 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$885 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$886 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$887 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$888 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$889 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$890 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$891 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$892 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$893 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$894 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$895 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$896 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$897 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$898 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$899 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$900 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$901 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$902 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$903 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$904 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$905 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$939 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$940 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$941 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$942 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$943 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$944 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$945 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$946 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$947 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$948 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$949 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$950 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$951 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$952 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$953 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$954 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$955 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$956 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$957 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$958 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$959 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$960 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$961 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$962 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$963 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$964 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$965 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$966 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$967 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$968 ($_DFF_P_) from module aes_rcon (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$969 ($_DFF_P_) from module aes_rcon (removing D path).

yosys> opt_clean

3.87. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes_rcon..
Removed 389 unused cells and 83 unused wires.
<suppressed ~390 debug messages>

yosys> opt_expr

3.88. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes_rcon.
<suppressed ~78 debug messages>

yosys> opt_muxtree

3.89. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes_rcon..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.90. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes_rcon.
Performed a total of 0 changes.

yosys> opt_merge

3.91. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes_rcon'.
<suppressed ~60 debug messages>
Removed a total of 20 cells.

yosys> opt_share

3.92. Executing OPT_SHARE pass.

yosys> opt_dff -nodffe

3.93. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $auto$ff.cc:262:slice$745 ($_SDFF_PP0_) from module aes_rcon (D = $memory$auto$memory_bmux2rom.cc:63:execute$30$rdmux[0][1][0]$b$95 [30], Q = \out [30], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$746 ($_SDFF_PP0_) from module aes_rcon (D = $memory$auto$memory_bmux2rom.cc:63:execute$30$rdmux[0][1][0]$b$95 [31], Q = \out [31], rval = 1'0).

yosys> opt_clean

3.94. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes_rcon..
Removed 4 unused cells and 12 unused wires.
<suppressed ~5 debug messages>

yosys> opt_expr

3.95. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes_rcon.
<suppressed ~1 debug messages>

yosys> opt_muxtree

3.96. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes_rcon..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.97. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes_rcon.
Performed a total of 0 changes.

yosys> opt_merge

3.98. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes_rcon'.
<suppressed ~9 debug messages>
Removed a total of 3 cells.

yosys> opt_share

3.99. Executing OPT_SHARE pass.

yosys> opt_dff -nodffe

3.100. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.101. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes_rcon..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.102. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes_rcon.

yosys> opt_muxtree

3.103. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes_rcon..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.104. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes_rcon.
Performed a total of 0 changes.

yosys> opt_merge

3.105. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes_rcon'.
Removed a total of 0 cells.

yosys> opt_share

3.106. Executing OPT_SHARE pass.

yosys> opt_dff -nodffe

3.107. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.108. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes_rcon..

yosys> opt_expr

3.109. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes_rcon.
MAX OPT ITERATION = 4

yosys> opt_expr -full

3.110. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes_rcon.
<suppressed ~4 debug messages>

yosys> techmap -map +/techmap.v

3.111. Executing TECHMAP pass (map to technology primitives).

3.111.1. Executing Verilog-2005 frontend: /nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.111.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~71 debug messages>

yosys> stat

3.112. Printing statistics.

=== aes_rcon ===

   Number of wires:                 14
   Number of wire bits:            209
   Number of public wires:           5
   Number of public wire bits:      42
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 38
     $_AND_                          6
     $_MUX_                         12
     $_NOT_                          3
     $_OR_                           2
     $_SDFF_PP0_                    11
     $_SDFF_PP1_                     1
     $_XOR_                          3


yosys> dfflegalize -cell $_SDFF_???_ 0 -cell $_SDFFE_????_ 0 t:$_SDFFCE_*

3.113. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

yosys> stat

3.114. Printing statistics.

=== aes_rcon ===

   Number of wires:                 14
   Number of wire bits:            209
   Number of public wires:           5
   Number of public wire bits:      42
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 38
     $_AND_                          6
     $_MUX_                         12
     $_NOT_                          3
     $_OR_                           2
     $_SDFF_PP0_                    11
     $_SDFF_PP1_                     1
     $_XOR_                          3


yosys> opt_expr

3.115. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes_rcon.

yosys> opt_merge -nomux

3.116. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes_rcon'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.117. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes_rcon..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.118. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes_rcon.
Performed a total of 0 changes.

yosys> opt_merge

3.119. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes_rcon'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -sat

3.120. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.121. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes_rcon..

yosys> opt_expr

3.122. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes_rcon.
MAX OPT ITERATION = 1

yosys> abc -dff -keepff

3.123. Executing ABC pass (technology mapping using ABC).

3.123.1. Summary of detected clock domains:
  32 cells in clk=\clk, en={ }, arst={ }, srst=\kld
  6 cells in clk=\clk, en={ }, arst={ }, srst=$auto$opt_dff.cc:253:combine_resets$1311

3.123.2. Extracting gate netlist of module `\aes_rcon' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, synchronously reset by \kld
Extracted 32 gates and 34 wires to a netlist network with 1 inputs and 15 outputs.

3.123.2.1. Executing ABC.

3.123.3. Extracting gate netlist of module `\aes_rcon' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, synchronously reset by $auto$opt_dff.cc:253:combine_resets$1311
Extracted 6 gates and 12 wires to a netlist network with 6 inputs and 4 outputs.

3.123.3.1. Executing ABC.

yosys> abc -dff -keepff

3.124. Executing ABC pass (technology mapping using ABC).

3.124.1. Summary of detected clock domains:
  43 cells in clk=\clk, en={ }, arst={ }, srst=\kld
  5 cells in clk=\clk, en={ }, arst={ }, srst=$abc$1446$auto$opt_dff.cc:253:combine_resets$1311

3.124.2. Extracting gate netlist of module `\aes_rcon' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, synchronously reset by \kld
Extracted 43 gates and 43 wires to a netlist network with 0 inputs and 15 outputs.

3.124.2.1. Executing ABC.

3.124.3. Extracting gate netlist of module `\aes_rcon' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, synchronously reset by $abc$1446$auto$opt_dff.cc:253:combine_resets$1311
Extracted 5 gates and 11 wires to a netlist network with 6 inputs and 3 outputs.

3.124.3.1. Executing ABC.

yosys> abc -dff -keepff

3.125. Executing ABC pass (technology mapping using ABC).

3.125.1. Summary of detected clock domains:
  42 cells in clk=\clk, en={ }, arst={ }, srst=\kld
  5 cells in clk=\clk, en={ }, arst={ }, srst=$abc$1497$abc$1446$auto$opt_dff.cc:253:combine_resets$1311

3.125.2. Extracting gate netlist of module `\aes_rcon' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, synchronously reset by \kld
Extracted 42 gates and 42 wires to a netlist network with 0 inputs and 15 outputs.

3.125.2.1. Executing ABC.

3.125.3. Extracting gate netlist of module `\aes_rcon' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, synchronously reset by $abc$1497$abc$1446$auto$opt_dff.cc:253:combine_resets$1311
Extracted 5 gates and 11 wires to a netlist network with 6 inputs and 3 outputs.

3.125.3.1. Executing ABC.

yosys> abc -dff -keepff

3.126. Executing ABC pass (technology mapping using ABC).

3.126.1. Summary of detected clock domains:
  41 cells in clk=\clk, en={ }, arst={ }, srst=\kld
  6 cells in clk=\clk, en={ }, arst={ }, srst=$abc$1547$abc$1497$abc$1446$auto$opt_dff.cc:253:combine_resets$1311

3.126.2. Extracting gate netlist of module `\aes_rcon' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, synchronously reset by \kld
Extracted 41 gates and 42 wires to a netlist network with 1 inputs and 15 outputs.

3.126.2.1. Executing ABC.

3.126.3. Extracting gate netlist of module `\aes_rcon' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, synchronously reset by $abc$1547$abc$1497$abc$1446$auto$opt_dff.cc:253:combine_resets$1311
Extracted 6 gates and 12 wires to a netlist network with 6 inputs and 4 outputs.

3.126.3.1. Executing ABC.

yosys> opt_ffinv

3.127. Executing OPT_FFINV pass (push inverters through FFs).
Discovering LUTs.
Pushed 0 inverters.

yosys> opt_expr

3.128. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes_rcon.

yosys> opt_merge -nomux

3.129. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes_rcon'.
<suppressed ~9 debug messages>
Removed a total of 3 cells.

yosys> opt_muxtree

3.130. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes_rcon..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.131. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes_rcon.
Performed a total of 0 changes.

yosys> opt_merge

3.132. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes_rcon'.
Removed a total of 0 cells.

yosys> opt_share

3.133. Executing OPT_SHARE pass.

yosys> opt_dff -sat

3.134. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.135. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes_rcon..
Removed 0 unused cells and 166 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.136. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes_rcon.
MAX OPT ITERATION = 1

yosys> bmuxmap

3.137. Executing BMUXMAP pass.

yosys> demuxmap

3.138. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> abc -script /tmp/yosys_L2TZpc/abc_tmp_1.scr

3.139. Executing ABC pass (technology mapping using ABC).

3.139.1. Extracting gate netlist of module `\aes_rcon' to `<abc-temp-dir>/input.blif'..
Extracted 32 gates and 38 wires to a netlist network with 6 inputs and 13 outputs.

3.139.1.1. Executing ABC.
DE:   #PIs =   6  #Luts =    13  Max Lvl =   1  Avg Lvl =   0.92  [   0.14 sec. at Pass 0]{firstMap}[1]
DE:   #PIs =   6  #Luts =    13  Max Lvl =   1  Avg Lvl =   0.92  [   0.24 sec. at Pass 1]{initMapFlow}[3]
DE:   #PIs =   6  #Luts =    13  Max Lvl =   1  Avg Lvl =   0.92  [   0.50 sec. at Pass 2]{map}[2]
DE:   #PIs =   6  #Luts =    13  Max Lvl =   1  Avg Lvl =   0.92  [   0.28 sec. at Pass 3]{postMap}[6]
DE:   #PIs =   6  #Luts =    13  Max Lvl =   1  Avg Lvl =   0.92  [   0.69 sec. at Pass 4]{map}[12]
DE:   #PIs =   6  #Luts =    13  Max Lvl =   1  Avg Lvl =   0.92  [   1.55 sec. at Pass 5]{postMap}[36]
DE:   #PIs =   6  #Luts =    13  Max Lvl =   1  Avg Lvl =   0.92  [   2.26 sec. at Pass 6]{pushMap}[100]
DE:   #PIs =   6  #Luts =    13  Max Lvl =   1  Avg Lvl =   0.92  [   0.87 sec. at Pass 7]{finalMap}[100]

yosys> opt_expr

3.140. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes_rcon.

yosys> opt_merge -nomux

3.141. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes_rcon'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.142. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes_rcon..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.143. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes_rcon.
Performed a total of 0 changes.

yosys> opt_merge

3.144. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes_rcon'.
Removed a total of 0 cells.

yosys> opt_share

3.145. Executing OPT_SHARE pass.

yosys> opt_dff -nodffe

3.146. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.147. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes_rcon..
Removed 0 unused cells and 37 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.148. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes_rcon.
MAX OPT ITERATION = 1

yosys> opt_ffinv

3.149. Executing OPT_FFINV pass (push inverters through FFs).
Discovering LUTs.
Pushed 0 inverters.

yosys> stat

3.150. Printing statistics.

=== aes_rcon ===

   Number of wires:                 51
   Number of wire bits:             88
   Number of public wires:           5
   Number of public wire bits:      42
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 25
     $_SDFF_PP0_                    12
     $lut                           13


yosys> dfflegalize -cell $_DFF_?_ 0 -cell $_DFFE_??_ 0 -cell $_DFF_???_ 0 -cell $_DFFE_????_ 0 -cell $_SDFF_???_ 0 -cell $_SDFFE_????_ 0 -cell $_DLATCH_?_ 0 -cell $_DLATCH_???_ 0

3.151. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

yosys> stat

3.152. Printing statistics.

=== aes_rcon ===

   Number of wires:                 51
   Number of wire bits:             88
   Number of public wires:           5
   Number of public wire bits:      42
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 25
     $_SDFF_PP0_                    12
     $lut                           13


yosys> techmap -map +/techmap.v -map +/rapidsilicon/genesis2/ffs_map.v

3.153. Executing TECHMAP pass (map to technology primitives).

3.153.1. Executing Verilog-2005 frontend: /nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.153.2. Executing Verilog-2005 frontend: /nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/ffs_map.v
Parsing Verilog input from `/nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/ffs_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP0N_'.
Generating RTLIL representation for module `\$_DFFE_PN0P_'.
Generating RTLIL representation for module `\$_DFFE_PN0N_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP1N_'.
Generating RTLIL representation for module `\$_DFFE_PN1P_'.
Generating RTLIL representation for module `\$_DFFE_PN1N_'.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP0N_'.
Generating RTLIL representation for module `\$_DFFE_NN0P_'.
Generating RTLIL representation for module `\$_DFFE_NN0N_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_NP1N_'.
Generating RTLIL representation for module `\$_DFFE_NN1P_'.
Generating RTLIL representation for module `\$_DFFE_NN1N_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PN0_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NN0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFF_PN1_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_NN1_'.
Generating RTLIL representation for module `\$_SDFFE_PP0P_'.
Generating RTLIL representation for module `\$_SDFFE_PP0N_'.
Generating RTLIL representation for module `\$_SDFFE_PN0P_'.
Generating RTLIL representation for module `\$_SDFFE_PN0N_'.
Generating RTLIL representation for module `\$_SDFFE_PP1P_'.
Generating RTLIL representation for module `\$_SDFFE_PP1N_'.
Generating RTLIL representation for module `\$_SDFFE_PN1P_'.
Generating RTLIL representation for module `\$_SDFFE_PN1N_'.
Generating RTLIL representation for module `\$_SDFFE_NP0P_'.
Generating RTLIL representation for module `\$_SDFFE_NP0N_'.
Generating RTLIL representation for module `\$_SDFFE_NN0P_'.
Generating RTLIL representation for module `\$_SDFFE_NN0N_'.
Generating RTLIL representation for module `\$_SDFFE_NP1P_'.
Generating RTLIL representation for module `\$_SDFFE_NP1N_'.
Generating RTLIL representation for module `\$_SDFFE_NN1P_'.
Generating RTLIL representation for module `\$_SDFFE_NN1N_'.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCH_PP0_'.
Generating RTLIL representation for module `\$_DLATCH_NP0_'.
Generating RTLIL representation for module `\$_DLATCH_PN0_'.
Generating RTLIL representation for module `\$_DLATCH_NN0_'.
Generating RTLIL representation for module `\$_DLATCH_PP1_'.
Generating RTLIL representation for module `\$_DLATCH_NP1_'.
Generating RTLIL representation for module `\$_DLATCH_PN1_'.
Generating RTLIL representation for module `\$_DLATCH_NN1_'.
Successfully finished Verilog frontend.

3.153.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $lut.
Using template \$_SDFF_PP0_ for cells of type $_SDFF_PP0_.
No more expansions possible.
<suppressed ~160 debug messages>

yosys> opt_expr -mux_undef

3.154. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes_rcon.
<suppressed ~109 debug messages>

yosys> simplemap

3.155. Executing SIMPLEMAP pass (map simple cells to gate primitives).

yosys> opt_expr

3.156. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes_rcon.

yosys> opt_merge

3.157. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes_rcon'.
<suppressed ~87 debug messages>
Removed a total of 29 cells.

yosys> opt_dff -nodffe -nosdff

3.158. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.159. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes_rcon..
Removed 0 unused cells and 71 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.160. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes_rcon.
<suppressed ~2 debug messages>

yosys> opt_merge -nomux

3.161. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes_rcon'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.162. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes_rcon..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.163. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes_rcon.
Performed a total of 0 changes.

yosys> opt_merge

3.164. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes_rcon'.
Removed a total of 0 cells.

yosys> opt_share

3.165. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.166. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.167. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes_rcon..

yosys> opt_expr

3.168. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes_rcon.
MAX OPT ITERATION = 1

yosys> abc -script /tmp/yosys_L2TZpc/abc_tmp_2.scr

3.169. Executing ABC pass (technology mapping using ABC).

3.169.1. Extracting gate netlist of module `\aes_rcon' to `<abc-temp-dir>/input.blif'..
Extracted 53 gates and 61 wires to a netlist network with 6 inputs and 13 outputs.

3.169.1.1. Executing ABC.
DE:   #PIs =   6  #Luts =    13  Max Lvl =   1  Avg Lvl =   0.92  [   0.09 sec. at Pass 0]{firstMap}[1]
DE:   #PIs =   6  #Luts =    13  Max Lvl =   1  Avg Lvl =   0.92  [   0.30 sec. at Pass 1]{initMapFlow}[3]
DE:   #PIs =   6  #Luts =    13  Max Lvl =   1  Avg Lvl =   0.92  [   0.11 sec. at Pass 2]{map}[2]
DE:   #PIs =   6  #Luts =    13  Max Lvl =   1  Avg Lvl =   0.92  [   0.19 sec. at Pass 3]{postMap}[6]
DE:   #PIs =   6  #Luts =    13  Max Lvl =   1  Avg Lvl =   0.92  [   0.49 sec. at Pass 4]{map}[12]
DE:   #PIs =   6  #Luts =    13  Max Lvl =   1  Avg Lvl =   0.92  [   0.83 sec. at Pass 5]{postMap}[36]
DE:   #PIs =   6  #Luts =    13  Max Lvl =   1  Avg Lvl =   0.92  [   1.48 sec. at Pass 6]{pushMap}[100]
DE:   #PIs =   6  #Luts =    13  Max Lvl =   1  Avg Lvl =   0.92  [   2.25 sec. at Pass 7]{finalMap}[100]

yosys> opt_expr

3.170. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes_rcon.

yosys> opt_merge -nomux

3.171. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes_rcon'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.172. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes_rcon..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.173. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes_rcon.
Performed a total of 0 changes.

yosys> opt_merge

3.174. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes_rcon'.
Removed a total of 0 cells.

yosys> opt_share

3.175. Executing OPT_SHARE pass.

yosys> opt_dff -nodffe

3.176. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.177. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes_rcon..
Removed 0 unused cells and 41 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.178. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes_rcon.
MAX OPT ITERATION = 1

yosys> hierarchy -check

3.179. Executing HIERARCHY pass (managing design hierarchy).

3.179.1. Analyzing design hierarchy..
Top module:  \aes_rcon

3.179.2. Analyzing design hierarchy..
Top module:  \aes_rcon
Removed 0 unused modules.

yosys> stat

3.180. Printing statistics.

=== aes_rcon ===

   Number of wires:                 51
   Number of wire bits:             88
   Number of public wires:           5
   Number of public wire bits:      42
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 25
     $lut                           13
     sdffre                         12


yosys> opt_clean -purge

3.181. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes_rcon..

yosys> write_verilog -noattr -nohex synthesized.v

3.182. Executing Verilog backend.
Dumping module `\aes_rcon'.

Warnings: 4 unique messages, 4 total
End of script. Logfile hash: 36fa215872, CPU: user 0.53s system 0.05s, MEM: 26.56 MB peak
Yosys 0.18+10 (git sha1 92b23013e, gcc 11.2.0 -fPIC -Os)
Time spent: 99% 6x abc (76 sec), 0% 15x read_verilog (0 sec), ...
real 19.68
user 37.63
sys 39.27
