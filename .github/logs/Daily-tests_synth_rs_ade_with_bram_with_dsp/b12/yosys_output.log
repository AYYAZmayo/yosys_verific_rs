
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys-Verific 0.0.64
 Yosys 0.18+10 (git sha1 c98b0e94e, gcc 9.4.0 -fPIC -Os)


-- Executing script file `yosys.ys' --
echo on

yosys> plugin -i synth-rs

yosys> read -verific

yosys> read -incdir .

yosys> verific -vlog-incdir .

1. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific May22_SW_Release, released at Wed Jun  1 00:39:28 2022.

yosys> verilog_defaults -add -I.

yosys> read -vhdl b12.vhd

yosys> verific -vhdl b12.vhd

2. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific May22_SW_Release, released at Wed Jun  1 00:39:28 2022.
VERIFIC-INFO [VHDL-1504] default VHDL library search path is now "/nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008"
VERIFIC-COMMENT [VHDL-1481] Analyzing VHDL file 'b12.vhd'
VERIFIC-COMMENT [VHDL-1493] Restoring VHDL unit 'std.standard' from file '/nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008/std/standard.vdb'
VERIFIC-INFO [VHDL-1012] b12.vhd:1: analyzing entity 'b12'
VERIFIC-INFO [VHDL-1010] b12.vhd:12: analyzing architecture 'behav'

yosys> synth_rs -top b12 -tech genesis -goal area -de -verilog synthesized.v

3. Executing synth_rs pass: v0.4.65

yosys> read_verilog -lib -specify -nomem2reg +/rapidsilicon/common/cells_sim.v +/rapidsilicon/genesis/cells_sim.v +/rapidsilicon/genesis/dsp_sim.v

3.1. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\inv'.
Generating RTLIL representation for module `\buff'.
Generating RTLIL representation for module `\logic_0'.
Generating RTLIL representation for module `\logic_1'.
Generating RTLIL representation for module `\gclkbuff'.
Successfully finished Verilog frontend.

3.2. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/cells_sim.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\dffsre'.
Generating RTLIL representation for module `\dffnsre'.
Generating RTLIL representation for module `\latchsre'.
Generating RTLIL representation for module `\latchnsre'.
Generating RTLIL representation for module `\io_scff'.
Generating RTLIL representation for module `\scff'.
Generating RTLIL representation for module `\sh_dff'.
Generating RTLIL representation for module `\adder_carry'.
Generating RTLIL representation for module `\sdffr'.
Generating RTLIL representation for module `\sdffs'.
Generating RTLIL representation for module `\TDP_BRAM18'.
Generating RTLIL representation for module `\TDP36K'.
Successfully finished Verilog frontend.

3.3. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/dsp_sim.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/dsp_sim.v' to AST representation.
Generating RTLIL representation for module `\RS_DSP1'.
Generating RTLIL representation for module `\RS_DSP2'.
Generating RTLIL representation for module `\RS_DSP2_MULT'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGIN_REGOUT'.
Generating RTLIL representation for module `\dsp_t1_20x18x64_cfg_ports'.
Generating RTLIL representation for module `\dsp_t1_10x9x32_cfg_ports'.
Generating RTLIL representation for module `\dsp_t1_sim_cfg_ports'.
Generating RTLIL representation for module `\RS_DSP3'.
Generating RTLIL representation for module `\RS_DSP3_MULT'.
Generating RTLIL representation for module `\RS_DSP3_MULT_REGIN'.
Generating RTLIL representation for module `\RS_DSP3_MULT_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULT_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULTADD'.
Generating RTLIL representation for module `\RS_DSP3_MULTADD_REGIN'.
Generating RTLIL representation for module `\RS_DSP3_MULTADD_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULTADD_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULTACC'.
Generating RTLIL representation for module `\RS_DSP3_MULTACC_REGIN'.
Generating RTLIL representation for module `\RS_DSP3_MULTACC_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULTACC_REGIN_REGOUT'.
Generating RTLIL representation for module `\dsp_t1_20x18x64_cfg_params'.
Generating RTLIL representation for module `\dsp_t1_10x9x32_cfg_params'.
Generating RTLIL representation for module `\dsp_t1_sim_cfg_params'.
Successfully finished Verilog frontend.

yosys> hierarchy -check -top b12

3.4. Executing HIERARCHY pass (managing design hierarchy).
VERIFIC-INFO [VHDL-1067] b12.vhd:1: processing 'b12(BEHAV)'
Importing module b12.

3.4.1. Analyzing design hierarchy..
Top module:  \b12

3.4.2. Analyzing design hierarchy..
Top module:  \b12
Removed 0 unused modules.

yosys> proc

3.5. Executing PROC pass (convert processes to netlists).

yosys> proc_clean

3.5.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> proc_rmdead

3.5.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

yosys> proc_prune

3.5.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

yosys> proc_init

3.5.4. Executing PROC_INIT pass (extract init attributes).

yosys> proc_arst

3.5.5. Executing PROC_ARST pass (detect async resets in processes).

yosys> proc_rom

3.5.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

yosys> proc_mux

3.5.7. Executing PROC_MUX pass (convert decision trees to multiplexers).

yosys> proc_dlatch

3.5.8. Executing PROC_DLATCH pass (convert process syncs to latches).

yosys> proc_dff

3.5.9. Executing PROC_DFF pass (convert process syncs to FFs).

yosys> proc_memwr

3.5.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

yosys> proc_clean

3.5.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> opt_expr -keepdc

3.5.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.
<suppressed ~9 debug messages>

yosys> demuxmap

3.6. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> flatten

3.7. Executing FLATTEN pass (flatten design).

yosys> demuxmap

3.8. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> tribuf -logic -formal

3.9. Executing TRIBUF pass.

yosys> deminout

3.10. Executing DEMINOUT pass (demote inout ports to input or output).

yosys> opt_expr

3.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.

yosys> opt_clean

3.12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..
Removed 0 unused cells and 46 unused wires.
<suppressed ~19 debug messages>

yosys> check

3.13. Executing CHECK pass (checking for obvious problems).
Checking module b12...
Found and reported 0 problems.

yosys> opt_expr

3.14. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.

yosys> opt_merge -nomux

3.15. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

yosys> opt_muxtree

3.16. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~76 debug messages>

yosys> opt_reduce

3.17. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

yosys> opt_merge

3.18. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_share

3.19. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.20. Executing OPT_DFF pass (perform DFF optimizations).
Changing const-value async load to async reset on $verific$wr_reg$b12.vhd:564$542 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$timebase_reg$b12.vhd:564$546 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$speaker_reg$b12.vhd:144$304 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$sound_reg$b12.vhd:564$548 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$scan_reg$b12.vhd:564$543 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$s_reg$b12.vhd:144$303 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$play_reg$b12.vhd:564$541 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$nloss_reg$b12.vhd:564$539 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$nl_reg$b12.vhd:564$540 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_9$b12.vhd:184$391 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_8$b12.vhd:184$390 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_7$b12.vhd:184$389 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_6$b12.vhd:184$388 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_5$b12.vhd:184$387 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_4$b12.vhd:184$386 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_32$b12.vhd:184$414 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_31$b12.vhd:184$413 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_30$b12.vhd:184$412 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_3$b12.vhd:184$385 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_29$b12.vhd:184$411 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_28$b12.vhd:184$410 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_27$b12.vhd:184$409 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_26$b12.vhd:184$408 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_25$b12.vhd:184$407 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_24$b12.vhd:184$406 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_23$b12.vhd:184$405 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_22$b12.vhd:184$404 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_21$b12.vhd:184$403 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_20$b12.vhd:184$402 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_2$b12.vhd:184$384 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_19$b12.vhd:184$401 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_18$b12.vhd:184$400 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_17$b12.vhd:184$399 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_16$b12.vhd:184$398 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_15$b12.vhd:184$397 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_14$b12.vhd:184$396 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_13$b12.vhd:184$395 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_12$b12.vhd:184$394 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_11$b12.vhd:184$393 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_10$b12.vhd:184$392 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg$b12.vhd:184$415 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$max_reg$b12.vhd:564$544 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$ind_reg$b12.vhd:564$545 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$gamma_reg$b12.vhd:564$551 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$data_out_reg$b12.vhd:184$383 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$data_in_reg$b12.vhd:564$550 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$counter_reg$b12.vhd:144$305 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$count_reg_2$b12.vhd:164$311 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$count_reg$b12.vhd:564$547 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$address_reg$b12.vhd:564$549 ($aldff) from module b12.

yosys> opt_clean

3.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..

yosys> opt_expr

3.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.
MAX OPT ITERATION = 1

yosys> fsm -encoding binary

3.23. Executing FSM pass (extract and optimize FSM).

yosys> fsm_detect

3.23.1. Executing FSM_DETECT pass (finding FSMs in design).

yosys> fsm_extract

3.23.2. Executing FSM_EXTRACT pass (extracting FSM from design).

yosys> fsm_opt

3.23.3. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> opt_clean

3.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..

yosys> fsm_opt

3.23.5. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> fsm_recode -encoding binary

3.23.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

yosys> fsm_info

3.23.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

yosys> fsm_map

3.23.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

yosys> opt_expr

3.24. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.

yosys> opt_merge -nomux

3.25. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.26. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~76 debug messages>

yosys> opt_reduce

3.27. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

yosys> opt_merge

3.28. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_share

3.29. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -sat

3.30. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $verific$s_reg$b12.vhd:144$303 ($adff) from module b12 (D = $verific$n125$27, Q = \s).
Adding EN signal on $verific$memory_reg_9$b12.vhd:184$391 ($adff) from module b12 (D = \data_in, Q = \memory[24]).
Adding EN signal on $verific$memory_reg_8$b12.vhd:184$390 ($adff) from module b12 (D = \data_in, Q = \memory[25]).
Adding EN signal on $verific$memory_reg_7$b12.vhd:184$389 ($adff) from module b12 (D = \data_in, Q = \memory[26]).
Adding EN signal on $verific$memory_reg_6$b12.vhd:184$388 ($adff) from module b12 (D = \data_in, Q = \memory[27]).
Adding EN signal on $verific$memory_reg_5$b12.vhd:184$387 ($adff) from module b12 (D = \data_in, Q = \memory[28]).
Adding EN signal on $verific$memory_reg_4$b12.vhd:184$386 ($adff) from module b12 (D = \data_in, Q = \memory[29]).
Adding EN signal on $verific$memory_reg_32$b12.vhd:184$414 ($adff) from module b12 (D = \data_in, Q = \memory[1]).
Adding EN signal on $verific$memory_reg_31$b12.vhd:184$413 ($adff) from module b12 (D = \data_in, Q = \memory[2]).
Adding EN signal on $verific$memory_reg_30$b12.vhd:184$412 ($adff) from module b12 (D = \data_in, Q = \memory[3]).
Adding EN signal on $verific$memory_reg_3$b12.vhd:184$385 ($adff) from module b12 (D = \data_in, Q = \memory[30]).
Adding EN signal on $verific$memory_reg_29$b12.vhd:184$411 ($adff) from module b12 (D = \data_in, Q = \memory[4]).
Adding EN signal on $verific$memory_reg_28$b12.vhd:184$410 ($adff) from module b12 (D = \data_in, Q = \memory[5]).
Adding EN signal on $verific$memory_reg_27$b12.vhd:184$409 ($adff) from module b12 (D = \data_in, Q = \memory[6]).
Adding EN signal on $verific$memory_reg_26$b12.vhd:184$408 ($adff) from module b12 (D = \data_in, Q = \memory[7]).
Adding EN signal on $verific$memory_reg_25$b12.vhd:184$407 ($adff) from module b12 (D = \data_in, Q = \memory[8]).
Adding EN signal on $verific$memory_reg_24$b12.vhd:184$406 ($adff) from module b12 (D = \data_in, Q = \memory[9]).
Adding EN signal on $verific$memory_reg_23$b12.vhd:184$405 ($adff) from module b12 (D = \data_in, Q = \memory[10]).
Adding EN signal on $verific$memory_reg_22$b12.vhd:184$404 ($adff) from module b12 (D = \data_in, Q = \memory[11]).
Adding EN signal on $verific$memory_reg_21$b12.vhd:184$403 ($adff) from module b12 (D = \data_in, Q = \memory[12]).
Adding EN signal on $verific$memory_reg_20$b12.vhd:184$402 ($adff) from module b12 (D = \data_in, Q = \memory[13]).
Adding EN signal on $verific$memory_reg_2$b12.vhd:184$384 ($adff) from module b12 (D = \data_in, Q = \memory[31]).
Adding EN signal on $verific$memory_reg_19$b12.vhd:184$401 ($adff) from module b12 (D = \data_in, Q = \memory[14]).
Adding EN signal on $verific$memory_reg_18$b12.vhd:184$400 ($adff) from module b12 (D = \data_in, Q = \memory[15]).
Adding EN signal on $verific$memory_reg_17$b12.vhd:184$399 ($adff) from module b12 (D = \data_in, Q = \memory[16]).
Adding EN signal on $verific$memory_reg_16$b12.vhd:184$398 ($adff) from module b12 (D = \data_in, Q = \memory[17]).
Adding EN signal on $verific$memory_reg_15$b12.vhd:184$397 ($adff) from module b12 (D = \data_in, Q = \memory[18]).
Adding EN signal on $verific$memory_reg_14$b12.vhd:184$396 ($adff) from module b12 (D = \data_in, Q = \memory[19]).
Adding EN signal on $verific$memory_reg_13$b12.vhd:184$395 ($adff) from module b12 (D = \data_in, Q = \memory[20]).
Adding EN signal on $verific$memory_reg_12$b12.vhd:184$394 ($adff) from module b12 (D = \data_in, Q = \memory[21]).
Adding EN signal on $verific$memory_reg_11$b12.vhd:184$393 ($adff) from module b12 (D = \data_in, Q = \memory[22]).
Adding EN signal on $verific$memory_reg_10$b12.vhd:184$392 ($adff) from module b12 (D = \data_in, Q = \memory[23]).
Adding EN signal on $verific$memory_reg$b12.vhd:184$415 ($adff) from module b12 (D = \data_in, Q = \memory[0]).

yosys> opt_clean

3.31. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..
Removed 65 unused cells and 65 unused wires.
<suppressed ~66 debug messages>

yosys> opt_expr

3.32. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.

yosys> opt_muxtree

3.33. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~43 debug messages>

yosys> opt_reduce

3.34. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

yosys> opt_merge

3.35. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_share

3.36. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -sat

3.37. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.38. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..

yosys> opt_expr

3.39. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.
MAX OPT ITERATION = 2

yosys> wreduce -keepdc

3.40. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 3) from port A of cell b12.$verific$LessThan_4$b12.vhd:80$267 ($lt).
Removed top 2 bits (of 3) from port B of cell b12.$verific$add_8$b12.vhd:85$271 ($add).
Removed top 1 bits (of 4) from port Y of cell b12.$verific$add_8$b12.vhd:85$271 ($add).
Removed top 1 bits (of 3) from port A of cell b12.$verific$LessThan_13$b12.vhd:88$277 ($lt).
Removed top 2 bits (of 3) from port A of cell b12.$verific$LessThan_49$b12.vhd:125$293 ($lt).
Removed top 1 bits (of 2) from port B of cell b12.$verific$add_69$b12.vhd:159$308 ($add).
Removed top 31 bits (of 32) from port A of cell b12.$verific$Decoder_79$b12.vhd:182$318 ($shl).
Removed top 3 bits (of 4) from port A of cell b12.$verific$Decoder_195$b12.vhd:284$420 ($shl).
Removed top 1 bits (of 7) from port A of cell b12.$verific$sub_207$b12.vhd:298$427 ($sub).
Removed top 6 bits (of 7) from port B of cell b12.$verific$sub_207$b12.vhd:298$427 ($sub).
Removed top 1 bits (of 7) from port Y of cell b12.$verific$sub_207$b12.vhd:298$427 ($sub).
Removed top 4 bits (of 5) from port B of cell b12.$verific$add_215$b12.vhd:306$432 ($add).
Removed top 1 bits (of 6) from port Y of cell b12.$verific$add_215$b12.vhd:306$432 ($add).
Removed top 1 bits (of 2) from port A of cell b12.$verific$equal_239$b12.vhd:358$442 ($eq).
Removed top 1 bits (of 4) from mux cell b12.$verific$mux_273$b12.vhd:394$471 ($mux).
Removed top 1 bits (of 4) from mux cell b12.$verific$mux_274$b12.vhd:394$472 ($mux).
Removed top 1 bits (of 4) from mux cell b12.$verific$mux_275$b12.vhd:394$473 ($mux).
Removed top 1 bits (of 4) from mux cell b12.$verific$mux_276$b12.vhd:394$474 ($mux).
Removed top 3 bits (of 4) from port A of cell b12.$verific$Decoder_289$b12.vhd:400$482 ($shl).
Removed top 4 bits (of 5) from port B of cell b12.$verific$add_309$b12.vhd:423$488 ($add).
Removed top 1 bits (of 6) from port Y of cell b12.$verific$add_309$b12.vhd:423$488 ($add).
Removed top 1 bits (of 7) from port A of cell b12.$verific$sub_311$b12.vhd:424$491 ($sub).
Removed top 6 bits (of 7) from port B of cell b12.$verific$sub_311$b12.vhd:424$491 ($sub).
Removed top 1 bits (of 7) from port Y of cell b12.$verific$sub_311$b12.vhd:424$491 ($sub).
Removed top 2 bits (of 19) from mux cell b12.$verific$mux_503$b12.vhd:510$494 ($mux).
Removed top 1 bits (of 4) from wire b12.$verific$n1024$184.
Removed top 1 bits (of 4) from wire b12.$verific$n1073$186.
Removed top 1 bits (of 4) from wire b12.$verific$n1139$199.
Removed top 1 bits (of 4) from wire b12.$verific$n1144$200.
Removed top 1 bits (of 4) from wire b12.$verific$n1149$201.
Removed top 1 bits (of 4) from wire b12.$verific$n1154$202.
Removed top 1 bits (of 7) from wire b12.$verific$n1280$211.
Removed top 1 bits (of 5) from wire b12.$verific$n1336$215.
Removed top 3 bits (of 5) from wire b12.$verific$n1688$237.
Removed top 2 bits (of 5) from wire b12.$verific$n1733$242.
Removed top 4 bits (of 5) from wire b12.$verific$n1997$252.
Removed top 1 bits (of 7) from wire b12.$verific$n765$167.
Removed top 1 bits (of 4) from wire b12.$verific$n926$180.
Removed top 1 bits (of 4) from wire b12.$verific$n975$182.

yosys> peepopt

3.41. Executing PEEPOPT pass (run peephole optimizers).

yosys> opt_clean

3.42. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..
Removed 0 unused cells and 19 unused wires.
<suppressed ~1 debug messages>

yosys> demuxmap

3.43. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> stat

3.44. Printing statistics.

=== b12 ===

   Number of wires:                244
   Number of wire bits:            657
   Number of public wires:          56
   Number of public wire bits:     133
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                218
     $add                            4
     $adff                          17
     $adffe                         33
     $bmux                          17
     $eq                             3
     $logic_not                      2
     $lt                             6
     $mux                           88
     $ne                             3
     $not                            8
     $reduce_and                    32
     $shl                            3
     $sub                            2


yosys> wreduce t:$mul

3.45. Executing WREDUCE pass (reducing word size of cells).

yosys> rs_dsp_macc

3.46. Executing RS_DSP_MACC pass.

yosys> techmap -map +/mul2dsp.v -D DSP_A_MAXWIDTH=20 -D DSP_B_MAXWIDTH=18 -D DSP_A_MINWIDTH=11 -D DSP_B_MINWIDTH=10 -D DSP_NAME=$__RS_MUL20X18

3.47. Executing TECHMAP pass (map to technology primitives).

3.47.1. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/mul2dsp.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/mul2dsp.v' to AST representation.
Generating RTLIL representation for module `\_80_mul'.
Generating RTLIL representation for module `\_90_soft_mul'.
Successfully finished Verilog frontend.

3.47.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

yosys> chtype -set $mul t:$__soft_mul

yosys> techmap -map +/mul2dsp.v -D DSP_A_MAXWIDTH=10 -D DSP_B_MAXWIDTH=9 -D DSP_A_MINWIDTH=4 -D DSP_B_MINWIDTH=4 -D DSP_NAME=$__RS_MUL10X9

3.48. Executing TECHMAP pass (map to technology primitives).

3.48.1. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/mul2dsp.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/mul2dsp.v' to AST representation.
Generating RTLIL representation for module `\_80_mul'.
Generating RTLIL representation for module `\_90_soft_mul'.
Successfully finished Verilog frontend.

3.48.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

yosys> chtype -set $mul t:$__soft_mul

yosys> techmap -map +/rapidsilicon/genesis/dsp_map.v -D USE_DSP_CFG_PARAMS=0

3.49. Executing TECHMAP pass (map to technology primitives).

3.49.1. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/dsp_map.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/dsp_map.v' to AST representation.
Generating RTLIL representation for module `\$__RS_MUL20X18'.
Generating RTLIL representation for module `\$__RS_MUL10X9'.
Successfully finished Verilog frontend.

3.49.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

yosys> rs_dsp_simd

3.50. Executing RS_DSP_SIMD pass.

yosys> techmap -map +/rapidsilicon/genesis/dsp_final_map.v

3.51. Executing TECHMAP pass (map to technology primitives).

3.51.1. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/dsp_final_map.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/dsp_final_map.v' to AST representation.
Generating RTLIL representation for module `\dsp_t1_20x18x64_cfg_ports'.
Generating RTLIL representation for module `\dsp_t1_10x9x32_cfg_ports'.
Generating RTLIL representation for module `\dsp_t1_20x18x64_cfg_params'.
Generating RTLIL representation for module `\dsp_t1_10x9x32_cfg_params'.
Successfully finished Verilog frontend.

3.51.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~6 debug messages>

yosys> rs_dsp_io_regs

3.52. Executing RS_DSP_IO_REGS pass.

yosys> alumacc

3.53. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module b12:
  creating $macc model for $verific$add_215$b12.vhd:306$432 ($add).
  creating $macc model for $verific$add_309$b12.vhd:423$488 ($add).
  creating $macc model for $verific$add_69$b12.vhd:159$308 ($add).
  creating $macc model for $verific$add_8$b12.vhd:85$271 ($add).
  creating $macc model for $verific$sub_207$b12.vhd:298$427 ($sub).
  creating $macc model for $verific$sub_311$b12.vhd:424$491 ($sub).
  creating $alu model for $macc $verific$sub_311$b12.vhd:424$491.
  creating $alu model for $macc $verific$sub_207$b12.vhd:298$427.
  creating $alu model for $macc $verific$add_8$b12.vhd:85$271.
  creating $alu model for $macc $verific$add_69$b12.vhd:159$308.
  creating $alu model for $macc $verific$add_309$b12.vhd:423$488.
  creating $alu model for $macc $verific$add_215$b12.vhd:306$432.
  creating $alu model for $verific$LessThan_13$b12.vhd:88$277 ($lt): new $alu
  creating $alu model for $verific$LessThan_22$b12.vhd:98$281 ($lt): new $alu
  creating $alu model for $verific$LessThan_31$b12.vhd:107$285 ($lt): new $alu
  creating $alu model for $verific$LessThan_4$b12.vhd:80$267 ($lt): new $alu
  creating $alu model for $verific$LessThan_40$b12.vhd:116$289 ($lt): new $alu
  creating $alu model for $verific$LessThan_49$b12.vhd:125$293 ($lt): new $alu
  creating $alu cell for $verific$LessThan_40$b12.vhd:116$289: $auto$alumacc.cc:485:replace_alu$670
  creating $alu cell for $verific$LessThan_4$b12.vhd:80$267: $auto$alumacc.cc:485:replace_alu$675
  creating $alu cell for $verific$LessThan_31$b12.vhd:107$285: $auto$alumacc.cc:485:replace_alu$680
  creating $alu cell for $verific$LessThan_22$b12.vhd:98$281: $auto$alumacc.cc:485:replace_alu$685
  creating $alu cell for $verific$LessThan_13$b12.vhd:88$277: $auto$alumacc.cc:485:replace_alu$690
  creating $alu cell for $verific$add_215$b12.vhd:306$432: $auto$alumacc.cc:485:replace_alu$695
  creating $alu cell for $verific$add_309$b12.vhd:423$488: $auto$alumacc.cc:485:replace_alu$698
  creating $alu cell for $verific$add_69$b12.vhd:159$308: $auto$alumacc.cc:485:replace_alu$701
  creating $alu cell for $verific$LessThan_49$b12.vhd:125$293: $auto$alumacc.cc:485:replace_alu$704
  creating $alu cell for $verific$add_8$b12.vhd:85$271: $auto$alumacc.cc:485:replace_alu$709
  creating $alu cell for $verific$sub_207$b12.vhd:298$427: $auto$alumacc.cc:485:replace_alu$712
  creating $alu cell for $verific$sub_311$b12.vhd:424$491: $auto$alumacc.cc:485:replace_alu$715
  created 12 $alu and 0 $macc cells.

yosys> opt_expr

3.54. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.
<suppressed ~18 debug messages>

yosys> opt_merge -nomux

3.55. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.56. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~43 debug messages>

yosys> opt_reduce

3.57. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

yosys> opt_merge

3.58. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_share

3.59. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.60. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.61. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..
Removed 6 unused cells and 12 unused wires.
<suppressed ~7 debug messages>

yosys> opt_expr

3.62. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.

yosys> opt_muxtree

3.63. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~43 debug messages>

yosys> opt_reduce

3.64. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

yosys> opt_merge

3.65. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_share

3.66. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.67. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.68. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..

yosys> opt_expr

3.69. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.
MAX OPT ITERATION = 2

yosys> stat

3.70. Printing statistics.

=== b12 ===

   Number of wires:                268
   Number of wire bits:            759
   Number of public wires:          56
   Number of public wire bits:     133
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                218
     $adff                          17
     $adffe                         33
     $alu                           12
     $bmux                          17
     $eq                             3
     $logic_not                      2
     $mux                           88
     $ne                             3
     $not                            8
     $reduce_and                    32
     $shl                            3


yosys> memory -nomap

3.71. Executing MEMORY pass.

yosys> opt_mem

3.71.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

yosys> opt_mem_priority

3.71.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

yosys> opt_mem_feedback

3.71.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

yosys> memory_bmux2rom

3.71.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

yosys> memory_dff

3.71.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

yosys> opt_clean

3.71.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..

yosys> memory_share

3.71.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

yosys> opt_mem_widen

3.71.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

yosys> opt_clean

3.71.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..

yosys> memory_collect

3.71.10. Executing MEMORY_COLLECT pass (generating $mem cells).

yosys> stat

3.72. Printing statistics.

=== b12 ===

   Number of wires:                268
   Number of wire bits:            759
   Number of public wires:          56
   Number of public wire bits:     133
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                218
     $adff                          17
     $adffe                         33
     $alu                           12
     $bmux                          17
     $eq                             3
     $logic_not                      2
     $mux                           88
     $ne                             3
     $not                            8
     $reduce_and                    32
     $shl                            3


yosys> muxpack

3.73. Executing MUXPACK pass ($mux cell cascades to $pmux).
Converted 0 (p)mux cells into 0 pmux cells.
<suppressed ~60 debug messages>

yosys> opt_clean

3.74. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..

yosys> memory_bram -rules +/rapidsilicon/genesis/brams.txt

3.75. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).

yosys> techmap -map +/rapidsilicon/genesis/brams_map.v

3.76. Executing TECHMAP pass (map to technology primitives).

3.76.1. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/brams_map.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__RS_FACTOR_BRAM36_TDP'.
Generating RTLIL representation for module `\$__RS_FACTOR_BRAM18_TDP'.
/nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/brams_map.v:236: Warning: Range [2:0] select out of bounds on signal `\DOP': Setting 1 MSB bits to undef.
Generating RTLIL representation for module `\$__RS_FACTOR_BRAM36_SDP'.
Successfully finished Verilog frontend.

3.76.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~5 debug messages>

yosys> pmuxtree

3.77. Executing PMUXTREE pass.

yosys> muxpack

3.78. Executing MUXPACK pass ($mux cell cascades to $pmux).
Converted 0 (p)mux cells into 0 pmux cells.
<suppressed ~60 debug messages>

yosys> memory_map

3.79. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

yosys> stat

3.80. Printing statistics.

=== b12 ===

   Number of wires:                268
   Number of wire bits:            759
   Number of public wires:          56
   Number of public wire bits:     133
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                218
     $adff                          17
     $adffe                         33
     $alu                           12
     $bmux                          17
     $eq                             3
     $logic_not                      2
     $mux                           88
     $ne                             3
     $not                            8
     $reduce_and                    32
     $shl                            3


yosys> techmap -map +/techmap.v -map +/rapidsilicon/genesis/arith_map.v

3.81. Executing TECHMAP pass (map to technology primitives).

3.81.1. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.81.2. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/arith_map.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_rs_alu'.
Successfully finished Verilog frontend.

3.81.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $reduce_and.
Using template $paramod$78e969f2586efcf3a5b0b0440bcca0db83d5cca2\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $not.
Using template $paramod$a04dd9d4d8b430140c4ff94b50470fb380fda2a0\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $mux.
Using template $paramod$672a140277c71df8314410f22acc08d55222c3c7\_90_alu for cells of type $alu.
Using template $paramod$79fc7abbb3333dbd5736999d565fd903198fb1eb\_90_alu for cells of type $alu.
Using template $paramod$3ef7d3dd227da7627a99c5e5a6a4deb817573e39\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $bmux.
Using extmapper simplemap for cells of type $adffe.
Using extmapper simplemap for cells of type $adff.
Using template $paramod$constmap:dbcddb7b4524c1c5fa25e15435f3b9049e3d7d7a$paramod$3bf4391c2edcd7fdc564361d03ba2cf3a33c67d4\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using template $paramod$constmap:66d421c313e4e958be776b99540ac2de3b59fdbc$paramod$77562a466236eb4a6d905351a0995599b75075cb\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $eq.
Using template $paramod$175e67c02b86e96b1288b9dc100122520d7240d8\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $and.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000011 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000110 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000101 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000010 for cells of type $lcu.
Using extmapper simplemap for cells of type $or.
No more expansions possible.
<suppressed ~2206 debug messages>

yosys> stat

3.82. Printing statistics.

=== b12 ===

   Number of wires:                788
   Number of wire bits:          22688
   Number of public wires:          56
   Number of public wire bits:     133
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               2460
     $_AND_                        134
     $_DFFE_PP0P_                   65
     $_DFF_PP0_                     54
     $_MUX_                       1950
     $_NOT_                         62
     $_OR_                          72
     $_XOR_                        123


yosys> opt_expr

3.83. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.
<suppressed ~1084 debug messages>

yosys> opt_merge -nomux

3.84. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
<suppressed ~303 debug messages>
Removed a total of 101 cells.

yosys> opt_muxtree

3.85. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.86. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

yosys> opt_merge

3.87. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_share

3.88. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.89. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.90. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..
Removed 26 unused cells and 483 unused wires.
<suppressed ~27 debug messages>

yosys> opt_expr

3.91. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.
<suppressed ~1 debug messages>

yosys> opt_muxtree

3.92. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.93. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

yosys> opt_merge

3.94. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_share

3.95. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.96. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.97. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..

yosys> opt_expr

3.98. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.
MAX OPT ITERATION = 2

yosys> opt_expr -full

3.99. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.
<suppressed ~254 debug messages>

yosys> techmap -map +/techmap.v

3.100. Executing TECHMAP pass (map to technology primitives).

3.100.1. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.100.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~71 debug messages>

yosys> opt_expr

3.101. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.

yosys> opt_merge -nomux

3.102. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.103. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.104. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

yosys> opt_merge

3.105. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_dff -nosdff -nodffe -sat

3.106. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.107. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..

yosys> opt_expr

3.108. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.
MAX OPT ITERATION = 1

yosys> abc -dff

3.109. Executing ABC pass (technology mapping using ABC).

3.109.1. Summary of detected clock domains:
  2 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$576, arst=\reset, srst={ }
  2 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$579, arst=\reset, srst={ }
  2 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$582, arst=\reset, srst={ }
  2 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$588, arst=\reset, srst={ }
  2 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$591, arst=\reset, srst={ }
  2 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$594, arst=\reset, srst={ }
  2 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$597, arst=\reset, srst={ }
  2 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$600, arst=\reset, srst={ }
  2 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$603, arst=\reset, srst={ }
  2 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$606, arst=\reset, srst={ }
  2 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$609, arst=\reset, srst={ }
  2 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$612, arst=\reset, srst={ }
  2 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$615, arst=\reset, srst={ }
  2 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$621, arst=\reset, srst={ }
  2 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$624, arst=\reset, srst={ }
  2 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$627, arst=\reset, srst={ }
  2 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$630, arst=\reset, srst={ }
  2 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$633, arst=\reset, srst={ }
  2 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$636, arst=\reset, srst={ }
  2 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$639, arst=\reset, srst={ }
  2 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$642, arst=\reset, srst={ }
  2 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$645, arst=\reset, srst={ }
  2 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$648, arst=\reset, srst={ }
  2 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$558, arst=\reset, srst={ }
  2 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$561, arst=\reset, srst={ }
  2 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$564, arst=\reset, srst={ }
  2 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$567, arst=\reset, srst={ }
  2 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$570, arst=\reset, srst={ }
  2 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$573, arst=\reset, srst={ }
  2 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$585, arst=\reset, srst={ }
  2 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$618, arst=\reset, srst={ }
  8 cells in clk=\clock, en=\play, arst=\reset, srst={ }
  1245 cells in clk=\clock, en={ }, arst=\reset, srst={ }
  2 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$555, arst=\reset, srst={ }

3.109.2. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$576, asynchronously reset by \reset
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 2 outputs.

3.109.2.1. Executing ABC.

3.109.3. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$579, asynchronously reset by \reset
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 2 outputs.

3.109.3.1. Executing ABC.

3.109.4. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$582, asynchronously reset by \reset
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 2 outputs.

3.109.4.1. Executing ABC.

3.109.5. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$588, asynchronously reset by \reset
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 2 outputs.

3.109.5.1. Executing ABC.

3.109.6. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$591, asynchronously reset by \reset
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 2 outputs.

3.109.6.1. Executing ABC.

3.109.7. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$594, asynchronously reset by \reset
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 2 outputs.

3.109.7.1. Executing ABC.

3.109.8. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$597, asynchronously reset by \reset
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 2 outputs.

3.109.8.1. Executing ABC.

3.109.9. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$600, asynchronously reset by \reset
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 2 outputs.

3.109.9.1. Executing ABC.

3.109.10. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$603, asynchronously reset by \reset
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 2 outputs.

3.109.10.1. Executing ABC.

3.109.11. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$606, asynchronously reset by \reset
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 2 outputs.

3.109.11.1. Executing ABC.

3.109.12. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$609, asynchronously reset by \reset
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 2 outputs.

3.109.12.1. Executing ABC.

3.109.13. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$612, asynchronously reset by \reset
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 2 outputs.

3.109.13.1. Executing ABC.

3.109.14. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$615, asynchronously reset by \reset
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 2 outputs.

3.109.14.1. Executing ABC.

3.109.15. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$621, asynchronously reset by \reset
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 2 outputs.

3.109.15.1. Executing ABC.

3.109.16. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$624, asynchronously reset by \reset
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 2 outputs.

3.109.16.1. Executing ABC.

3.109.17. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$627, asynchronously reset by \reset
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 2 outputs.

3.109.17.1. Executing ABC.

3.109.18. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$630, asynchronously reset by \reset
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 2 outputs.

3.109.18.1. Executing ABC.

3.109.19. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$633, asynchronously reset by \reset
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 2 outputs.

3.109.19.1. Executing ABC.

3.109.20. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$636, asynchronously reset by \reset
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 2 outputs.

3.109.20.1. Executing ABC.

3.109.21. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$639, asynchronously reset by \reset
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 2 outputs.

3.109.21.1. Executing ABC.

3.109.22. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$642, asynchronously reset by \reset
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 2 outputs.

3.109.22.1. Executing ABC.

3.109.23. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$645, asynchronously reset by \reset
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 2 outputs.

3.109.23.1. Executing ABC.

3.109.24. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$648, asynchronously reset by \reset
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 2 outputs.

3.109.24.1. Executing ABC.

3.109.25. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$558, asynchronously reset by \reset
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 2 outputs.

3.109.25.1. Executing ABC.

3.109.26. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$561, asynchronously reset by \reset
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 2 outputs.

3.109.26.1. Executing ABC.

3.109.27. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$564, asynchronously reset by \reset
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 2 outputs.

3.109.27.1. Executing ABC.

3.109.28. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$567, asynchronously reset by \reset
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 2 outputs.

3.109.28.1. Executing ABC.

3.109.29. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$570, asynchronously reset by \reset
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 2 outputs.

3.109.29.1. Executing ABC.

3.109.30. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$573, asynchronously reset by \reset
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 2 outputs.

3.109.30.1. Executing ABC.

3.109.31. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$585, asynchronously reset by \reset
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 2 outputs.

3.109.31.1. Executing ABC.

3.109.32. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$618, asynchronously reset by \reset
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 2 outputs.

3.109.32.1. Executing ABC.

3.109.33. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by \play, asynchronously reset by \reset
Extracted 8 gates and 15 wires to a netlist network with 7 inputs and 8 outputs.

3.109.33.1. Executing ABC.

3.109.34. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, asynchronously reset by \reset
Extracted 1245 gates and 1324 wires to a netlist network with 77 inputs and 48 outputs.

3.109.34.1. Executing ABC.

3.109.35. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$4288$auto$opt_dff.cc:219:make_patterns_logic$555, asynchronously reset by \reset
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 2 outputs.

3.109.35.1. Executing ABC.

yosys> abc -dff

3.110. Executing ABC pass (technology mapping using ABC).

3.110.1. Summary of detected clock domains:
  11 cells in clk=\clock, en=$abc$4288$lo13, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$621, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$591, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$615, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$609, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$618, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$603, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$576, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$600, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$585, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$573, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$570, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$567, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$564, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$561, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$558, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$648, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$645, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$642, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$639, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$636, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$633, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$630, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$627, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$624, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$606, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$612, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$597, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$579, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$582, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$588, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$594, arst=\reset, srst={ }
  1119 cells in clk=\clock, en={ }, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$555, arst=\reset, srst={ }

3.110.2. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$4288$lo13, asynchronously reset by \reset
Extracted 11 gates and 21 wires to a netlist network with 10 inputs and 8 outputs.

3.110.2.1. Executing ABC.

3.110.3. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$4288$auto$opt_dff.cc:219:make_patterns_logic$621, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.110.3.1. Executing ABC.

3.110.4. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$4288$auto$opt_dff.cc:219:make_patterns_logic$591, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.110.4.1. Executing ABC.

3.110.5. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$4288$auto$opt_dff.cc:219:make_patterns_logic$615, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.110.5.1. Executing ABC.

3.110.6. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$4288$auto$opt_dff.cc:219:make_patterns_logic$609, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.110.6.1. Executing ABC.

3.110.7. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$4288$auto$opt_dff.cc:219:make_patterns_logic$618, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.110.7.1. Executing ABC.

3.110.8. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$4288$auto$opt_dff.cc:219:make_patterns_logic$603, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.110.8.1. Executing ABC.

3.110.9. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$4288$auto$opt_dff.cc:219:make_patterns_logic$576, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.110.9.1. Executing ABC.

3.110.10. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$4288$auto$opt_dff.cc:219:make_patterns_logic$600, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.110.10.1. Executing ABC.

3.110.11. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$4288$auto$opt_dff.cc:219:make_patterns_logic$585, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.110.11.1. Executing ABC.

3.110.12. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$4288$auto$opt_dff.cc:219:make_patterns_logic$573, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.110.12.1. Executing ABC.

3.110.13. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$4288$auto$opt_dff.cc:219:make_patterns_logic$570, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.110.13.1. Executing ABC.

3.110.14. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$4288$auto$opt_dff.cc:219:make_patterns_logic$567, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.110.14.1. Executing ABC.

3.110.15. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$4288$auto$opt_dff.cc:219:make_patterns_logic$564, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.110.15.1. Executing ABC.

3.110.16. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$4288$auto$opt_dff.cc:219:make_patterns_logic$561, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.110.16.1. Executing ABC.

3.110.17. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$4288$auto$opt_dff.cc:219:make_patterns_logic$558, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.110.17.1. Executing ABC.

3.110.18. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$4288$auto$opt_dff.cc:219:make_patterns_logic$648, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.110.18.1. Executing ABC.

3.110.19. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$4288$auto$opt_dff.cc:219:make_patterns_logic$645, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.110.19.1. Executing ABC.

3.110.20. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$4288$auto$opt_dff.cc:219:make_patterns_logic$642, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.110.20.1. Executing ABC.

3.110.21. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$4288$auto$opt_dff.cc:219:make_patterns_logic$639, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.110.21.1. Executing ABC.

3.110.22. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$4288$auto$opt_dff.cc:219:make_patterns_logic$636, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.110.22.1. Executing ABC.

3.110.23. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$4288$auto$opt_dff.cc:219:make_patterns_logic$633, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.110.23.1. Executing ABC.

3.110.24. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$4288$auto$opt_dff.cc:219:make_patterns_logic$630, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.110.24.1. Executing ABC.

3.110.25. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$4288$auto$opt_dff.cc:219:make_patterns_logic$627, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.110.25.1. Executing ABC.

3.110.26. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$4288$auto$opt_dff.cc:219:make_patterns_logic$624, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.110.26.1. Executing ABC.

3.110.27. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$4288$auto$opt_dff.cc:219:make_patterns_logic$606, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.110.27.1. Executing ABC.

3.110.28. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$4288$auto$opt_dff.cc:219:make_patterns_logic$612, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.110.28.1. Executing ABC.

3.110.29. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$4288$auto$opt_dff.cc:219:make_patterns_logic$597, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.110.29.1. Executing ABC.

3.110.30. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$4288$auto$opt_dff.cc:219:make_patterns_logic$579, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.110.30.1. Executing ABC.

3.110.31. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$4288$auto$opt_dff.cc:219:make_patterns_logic$582, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.110.31.1. Executing ABC.

3.110.32. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$4288$auto$opt_dff.cc:219:make_patterns_logic$588, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.110.32.1. Executing ABC.

3.110.33. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$4288$auto$opt_dff.cc:219:make_patterns_logic$594, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.110.33.1. Executing ABC.

3.110.34. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, asynchronously reset by \reset
Extracted 1119 gates and 1196 wires to a netlist network with 77 inputs and 41 outputs.

3.110.34.1. Executing ABC.

3.110.35. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$4288$auto$opt_dff.cc:219:make_patterns_logic$555, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.110.35.1. Executing ABC.

yosys> abc -dff

3.111. Executing ABC pass (technology mapping using ABC).

3.111.1. Summary of detected clock domains:
  5 cells in clk=\clock, en=$abc$5776$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$594, arst=\reset, srst={ }
  10 cells in clk=\clock, en=$abc$5784$lo11, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$5536$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$621, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$5544$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$591, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$5552$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$615, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$5560$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$609, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$5568$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$618, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$5576$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$603, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$5584$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$576, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$5592$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$600, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$5600$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$585, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$5608$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$573, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$5616$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$570, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$5624$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$567, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$5632$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$564, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$5640$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$561, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$5648$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$558, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$5656$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$648, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$5664$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$645, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$5672$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$642, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$5680$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$639, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$5688$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$636, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$5696$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$633, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$5704$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$630, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$5712$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$627, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$5720$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$624, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$5728$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$606, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$5736$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$612, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$5744$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$597, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$5752$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$579, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$5760$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$582, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$5768$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$588, arst=\reset, srst={ }
  1054 cells in clk=\clock, en={ }, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$6850$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$555, arst=\reset, srst={ }

3.111.2. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$5776$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$594, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.111.2.1. Executing ABC.

3.111.3. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$5784$lo11, asynchronously reset by \reset
Extracted 10 gates and 19 wires to a netlist network with 9 inputs and 8 outputs.

3.111.3.1. Executing ABC.

3.111.4. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$5536$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$621, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.111.4.1. Executing ABC.

3.111.5. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$5544$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$591, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.111.5.1. Executing ABC.

3.111.6. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$5552$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$615, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.111.6.1. Executing ABC.

3.111.7. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$5560$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$609, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.111.7.1. Executing ABC.

3.111.8. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$5568$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$618, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.111.8.1. Executing ABC.

3.111.9. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$5576$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$603, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.111.9.1. Executing ABC.

3.111.10. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$5584$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$576, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.111.10.1. Executing ABC.

3.111.11. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$5592$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$600, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.111.11.1. Executing ABC.

3.111.12. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$5600$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$585, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.111.12.1. Executing ABC.

3.111.13. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$5608$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$573, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.111.13.1. Executing ABC.

3.111.14. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$5616$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$570, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.111.14.1. Executing ABC.

3.111.15. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$5624$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$567, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.111.15.1. Executing ABC.

3.111.16. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$5632$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$564, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.111.16.1. Executing ABC.

3.111.17. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$5640$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$561, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.111.17.1. Executing ABC.

3.111.18. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$5648$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$558, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.111.18.1. Executing ABC.

3.111.19. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$5656$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$648, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.111.19.1. Executing ABC.

3.111.20. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$5664$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$645, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.111.20.1. Executing ABC.

3.111.21. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$5672$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$642, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.111.21.1. Executing ABC.

3.111.22. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$5680$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$639, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.111.22.1. Executing ABC.

3.111.23. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$5688$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$636, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.111.23.1. Executing ABC.

3.111.24. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$5696$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$633, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.111.24.1. Executing ABC.

3.111.25. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$5704$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$630, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.111.25.1. Executing ABC.

3.111.26. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$5712$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$627, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.111.26.1. Executing ABC.

3.111.27. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$5720$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$624, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.111.27.1. Executing ABC.

3.111.28. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$5728$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$606, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.111.28.1. Executing ABC.

3.111.29. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$5736$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$612, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.111.29.1. Executing ABC.

3.111.30. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$5744$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$597, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.111.30.1. Executing ABC.

3.111.31. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$5752$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$579, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.111.31.1. Executing ABC.

3.111.32. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$5760$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$582, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.111.32.1. Executing ABC.

3.111.33. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$5768$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$588, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.111.33.1. Executing ABC.

3.111.34. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, asynchronously reset by \reset
Extracted 1054 gates and 1131 wires to a netlist network with 77 inputs and 40 outputs.

3.111.34.1. Executing ABC.

3.111.35. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$6850$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$555, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.111.35.1. Executing ABC.

yosys> abc -dff

3.112. Executing ABC pass (technology mapping using ABC).

3.112.1. Summary of detected clock domains:
  10 cells in clk=\clock, en=$abc$7117$lo06, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$6877$abc$5536$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$621, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$6885$abc$5544$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$591, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$6893$abc$5552$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$615, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$6901$abc$5560$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$609, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$6909$abc$5568$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$618, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$6917$abc$5576$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$603, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$6925$abc$5584$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$576, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$6933$abc$5592$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$600, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$6941$abc$5600$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$585, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$6949$abc$5608$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$573, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$6957$abc$5616$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$570, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$6965$abc$5624$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$567, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$6973$abc$5632$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$564, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$6981$abc$5640$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$561, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$6989$abc$5648$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$558, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$6997$abc$5656$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$648, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$7005$abc$5664$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$645, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$7013$abc$5672$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$642, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$7021$abc$5680$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$639, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$7029$abc$5688$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$636, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$7037$abc$5696$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$633, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$7045$abc$5704$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$630, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$7053$abc$5712$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$627, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$7061$abc$5720$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$624, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$6858$abc$5776$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$594, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$7069$abc$5728$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$606, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$7077$abc$5736$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$612, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$7085$abc$5744$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$597, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$7093$abc$5752$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$579, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$7101$abc$5760$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$582, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$7109$abc$5768$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$588, arst=\reset, srst={ }
  1043 cells in clk=\clock, en={ }, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$8172$abc$6850$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$555, arst=\reset, srst={ }

3.112.2. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$7117$lo06, asynchronously reset by \reset
Extracted 10 gates and 19 wires to a netlist network with 9 inputs and 8 outputs.

3.112.2.1. Executing ABC.

3.112.3. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$6877$abc$5536$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$621, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.112.3.1. Executing ABC.

3.112.4. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$6885$abc$5544$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$591, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.112.4.1. Executing ABC.

3.112.5. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$6893$abc$5552$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$615, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.112.5.1. Executing ABC.

3.112.6. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$6901$abc$5560$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$609, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.112.6.1. Executing ABC.

3.112.7. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$6909$abc$5568$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$618, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.112.7.1. Executing ABC.

3.112.8. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$6917$abc$5576$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$603, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.112.8.1. Executing ABC.

3.112.9. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$6925$abc$5584$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$576, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.112.9.1. Executing ABC.

3.112.10. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$6933$abc$5592$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$600, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.112.10.1. Executing ABC.

3.112.11. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$6941$abc$5600$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$585, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.112.11.1. Executing ABC.

3.112.12. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$6949$abc$5608$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$573, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.112.12.1. Executing ABC.

3.112.13. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$6957$abc$5616$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$570, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.112.13.1. Executing ABC.

3.112.14. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$6965$abc$5624$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$567, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.112.14.1. Executing ABC.

3.112.15. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$6973$abc$5632$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$564, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.112.15.1. Executing ABC.

3.112.16. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$6981$abc$5640$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$561, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.112.16.1. Executing ABC.

3.112.17. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$6989$abc$5648$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$558, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.112.17.1. Executing ABC.

3.112.18. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$6997$abc$5656$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$648, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.112.18.1. Executing ABC.

3.112.19. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$7005$abc$5664$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$645, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.112.19.1. Executing ABC.

3.112.20. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$7013$abc$5672$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$642, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.112.20.1. Executing ABC.

3.112.21. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$7021$abc$5680$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$639, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.112.21.1. Executing ABC.

3.112.22. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$7029$abc$5688$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$636, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.112.22.1. Executing ABC.

3.112.23. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$7037$abc$5696$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$633, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.112.23.1. Executing ABC.

3.112.24. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$7045$abc$5704$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$630, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.112.24.1. Executing ABC.

3.112.25. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$7053$abc$5712$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$627, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.112.25.1. Executing ABC.

3.112.26. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$7061$abc$5720$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$624, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.112.26.1. Executing ABC.

3.112.27. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$6858$abc$5776$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$594, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.112.27.1. Executing ABC.

3.112.28. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$7069$abc$5728$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$606, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.112.28.1. Executing ABC.

3.112.29. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$7077$abc$5736$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$612, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.112.29.1. Executing ABC.

3.112.30. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$7085$abc$5744$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$597, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.112.30.1. Executing ABC.

3.112.31. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$7093$abc$5752$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$579, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.112.31.1. Executing ABC.

3.112.32. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$7101$abc$5760$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$582, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.112.32.1. Executing ABC.

3.112.33. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$7109$abc$5768$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$588, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.112.33.1. Executing ABC.

3.112.34. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, asynchronously reset by \reset
Extracted 1043 gates and 1120 wires to a netlist network with 77 inputs and 40 outputs.

3.112.34.1. Executing ABC.

3.112.35. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$8172$abc$6850$abc$4288$auto$opt_dff.cc:219:make_patterns_logic$555, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.112.35.1. Executing ABC.

yosys> opt_ffinv

3.113. Executing OPT_FFINV pass (push inverters through FFs).
Discovering LUTs.
Pushed 0 inverters.

yosys> opt_expr

3.114. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.
<suppressed ~3 debug messages>

yosys> opt_merge -nomux

3.115. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.116. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.117. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

yosys> opt_merge

3.118. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_share

3.119. Executing OPT_SHARE pass.
    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$8439$auto$blifparse.cc:381:parse_blif$8539 in front of them:
        $abc$8180$auto$blifparse.cc:381:parse_blif$8186
        $abc$8180$auto$blifparse.cc:381:parse_blif$8183

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$8439$auto$blifparse.cc:381:parse_blif$8543 in front of them:
        $abc$8180$auto$blifparse.cc:381:parse_blif$8189
        $abc$8180$auto$blifparse.cc:381:parse_blif$8184


yosys> opt_dff -nosdff -sat

3.120. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $abc$8439$auto$blifparse.cc:362:parse_blif$8443 ($_DFF_PP0_) from module b12 (D = $abc$8439$new_n468_, Q = $abc$8439$lo03).
Adding EN signal on $abc$8439$auto$blifparse.cc:362:parse_blif$8444 ($_DFF_PP0_) from module b12 (D = $abc$8439$new_n479_, Q = $abc$8439$lo04).
Adding EN signal on $abc$8439$auto$blifparse.cc:362:parse_blif$8476 ($_DFF_PP0_) from module b12 (D = $abc$8439$lo45, Q = $abc$8439$lo36).
Adding EN signal on $abc$8439$auto$blifparse.cc:362:parse_blif$8475 ($_DFF_PP0_) from module b12 (D = $abc$8439$lo46, Q = $abc$8439$lo35).

yosys> opt_clean

3.121. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..
Removed 4 unused cells and 5336 unused wires.
<suppressed ~50 debug messages>

yosys> opt_expr

3.122. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.
<suppressed ~2 debug messages>

yosys> opt_muxtree

3.123. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

yosys> opt_reduce

3.124. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

yosys> opt_merge

3.125. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_share

3.126. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -sat

3.127. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.128. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.129. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.
MAX OPT ITERATION = 2

yosys> bmuxmap

3.130. Executing BMUXMAP pass.

yosys> demuxmap

3.131. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> abc -script /tmp/yosys_xUxXg5/abc_tmp_1.scr

3.132. Executing ABC pass (technology mapping using ABC).

3.132.1. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Extracted 1075 gates and 1199 wires to a netlist network with 124 inputs and 90 outputs.

3.132.1.1. Executing ABC.
DE:   #PIs = 124  #Luts =   320  Max Lvl =   8  Avg Lvl =   3.94  [   0.23 sec. at Pass 0]
DE:   #PIs = 124  #Luts =   275  Max Lvl =   8  Avg Lvl =   3.57  [   2.25 sec. at Pass 1]
DE:   #PIs = 124  #Luts =   270  Max Lvl =   8  Avg Lvl =   3.58  [   0.77 sec. at Pass 2]
DE:   #PIs = 124  #Luts =   264  Max Lvl =   9  Avg Lvl =   3.56  [   1.09 sec. at Pass 3]
DE:   #PIs = 124  #Luts =   259  Max Lvl =   8  Avg Lvl =   3.62  [   0.89 sec. at Pass 4]
DE:   #PIs = 124  #Luts =   254  Max Lvl =   7  Avg Lvl =   3.01  [   3.68 sec. at Pass 5]
DE:   #PIs = 124  #Luts =   249  Max Lvl =   7  Avg Lvl =   2.92  [   1.49 sec. at Pass 6]
DE:   #PIs = 124  #Luts =   246  Max Lvl =   7  Avg Lvl =   2.91  [   3.00 sec. at Pass 7]
DE:   #PIs = 124  #Luts =   246  Max Lvl =   7  Avg Lvl =   2.91  [   1.32 sec. at Pass 8]
DE:   #PIs = 124  #Luts =   245  Max Lvl =   7  Avg Lvl =   2.93  [   2.44 sec. at Pass 9]
DE:   #PIs = 124  #Luts =   242  Max Lvl =   8  Avg Lvl =   3.29  [   0.90 sec. at Pass 10]
DE:   #PIs = 124  #Luts =   240  Max Lvl =   7  Avg Lvl =   3.27  [   1.42 sec. at Pass 11]
DE:   #PIs = 124  #Luts =   240  Max Lvl =   7  Avg Lvl =   3.27  [   0.58 sec. at Pass 12]
DE:   #PIs = 124  #Luts =   240  Max Lvl =   7  Avg Lvl =   3.27  [   1.33 sec. at Pass 13]
DE:   #PIs = 124  #Luts =   240  Max Lvl =   7  Avg Lvl =   3.27  [   0.95 sec. at Pass 14]
DE:   #PIs = 124  #Luts =   232  Max Lvl =   7  Avg Lvl =   3.26  [  11.95 sec. at Pass 15]
DE:   #PIs = 124  #Luts =   232  Max Lvl =   7  Avg Lvl =   3.26  [   1.77 sec. at Pass 16]
DE:   #PIs = 124  #Luts =   232  Max Lvl =   7  Avg Lvl =   3.26  [   0.47 sec. at Pass 17]
DE:   #PIs = 124  #Luts =   232  Max Lvl =   7  Avg Lvl =   3.26  [   1.40 sec. at Pass 18]
DE:   #PIs = 124  #Luts =   226  Max Lvl =   6  Avg Lvl =   2.87  [   6.96 sec. at Pass 19]
DE:   #PIs = 124  #Luts =   226  Max Lvl =   6  Avg Lvl =   2.87  [   0.49 sec. at Pass 20]
DE:   #PIs = 124  #Luts =   226  Max Lvl =   6  Avg Lvl =   2.87  [   1.38 sec. at Pass 21]
DE:   #PIs = 124  #Luts =   226  Max Lvl =   6  Avg Lvl =   2.87  [   0.49 sec. at Pass 22]
DE:   #PIs = 124  #Luts =   222  Max Lvl =   6  Avg Lvl =   2.84  [   6.50 sec. at Pass 23]
DE:   #PIs = 124  #Luts =   221  Max Lvl =   6  Avg Lvl =   2.86  [   2.33 sec. at Pass 24]
DE:   #PIs = 124  #Luts =   221  Max Lvl =   6  Avg Lvl =   2.86  [   0.69 sec. at Pass 25]
DE:   #PIs = 124  #Luts =   221  Max Lvl =   6  Avg Lvl =   2.86  [   1.71 sec. at Pass 26]
DE:   #PIs = 124  #Luts =   221  Max Lvl =   6  Avg Lvl =   2.86  [   0.89 sec. at Pass 27]
DE:   #PIs = 124  #Luts =   221  Max Lvl =   6  Avg Lvl =   2.86  [  13.12 sec. at Pass 28]
DE:   #PIs = 124  #Luts =   221  Max Lvl =   6  Avg Lvl =   2.86  [   0.36 sec. at Pass 29]

yosys> opt_expr

3.133. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.

yosys> opt_merge -nomux

3.134. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.135. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

yosys> opt_reduce

3.136. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

yosys> opt_merge

3.137. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_share

3.138. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.139. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.140. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..
Removed 0 unused cells and 1199 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.141. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.
MAX OPT ITERATION = 1

yosys> opt_ffinv

3.142. Executing OPT_FFINV pass (push inverters through FFs).
Discovering LUTs.
Pushed 0 inverters.

yosys> stat

3.143. Printing statistics.

=== b12 ===

   Number of wires:                343
   Number of wire bits:            364
   Number of public wires:          11
   Number of public wire bits:      24
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                342
     $_DFFE_PP0N_                    2
     $_DFFE_PP0P_                   67
     $_DFF_PP0_                     50
     $lut                          221
     $mux                            2


yosys> shregmap -minlen 8 -maxlen 20

3.144. Executing SHREGMAP pass (map shift registers).
Converted 0 dff cells into 0 shift registers.

yosys> dfflegalize -cell $_DFF_?_ 0 -cell $_DFF_???_ 0 -cell $_DFFE_????_ 0 -cell $_DFFSR_???_ 0 -cell $_DFFSRE_????_ 0 -cell $_DLATCHSR_PPP_ 0

3.145. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

yosys> stat

3.146. Printing statistics.

=== b12 ===

   Number of wires:                343
   Number of wire bits:            364
   Number of public wires:          11
   Number of public wire bits:      24
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                342
     $_DFFE_PP0N_                    2
     $_DFFE_PP0P_                   67
     $_DFF_PP0_                     50
     $lut                          221
     $mux                            2


yosys> techmap -map +/techmap.v -map +/rapidsilicon/genesis/ffs_map.v

3.147. Executing TECHMAP pass (map to technology primitives).

3.147.1. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.147.2. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/ffs_map.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/ffs_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP0N_'.
Generating RTLIL representation for module `\$_DFFE_PN0P_'.
Generating RTLIL representation for module `\$_DFFE_PN0N_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP1N_'.
Generating RTLIL representation for module `\$_DFFE_PN1P_'.
Generating RTLIL representation for module `\$_DFFE_PN1N_'.
Generating RTLIL representation for module `\$_DFFSR_PPP_'.
Generating RTLIL representation for module `\$_DFFSR_PNP_'.
Generating RTLIL representation for module `\$_DFFSR_PNN_'.
Generating RTLIL representation for module `\$_DFFSR_PPN_'.
Generating RTLIL representation for module `\$_DFFSR_NPP_'.
Generating RTLIL representation for module `\$_DFFSR_NNP_'.
Generating RTLIL representation for module `\$_DFFSR_NNN_'.
Generating RTLIL representation for module `\$_DFFSR_NPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PNPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPNP_'.
Generating RTLIL representation for module `\$_DFFSRE_PNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PNPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PPNN_'.
Generating RTLIL representation for module `\$_DFFSRE_PNNN_'.
Generating RTLIL representation for module `\$_DLATCHSR_PPP_'.
Generating RTLIL representation for module `\$_DLATCHSR_NPP_'.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP0N_'.
Generating RTLIL representation for module `\$_DFFE_NN0P_'.
Generating RTLIL representation for module `\$_DFFE_NN0N_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_NP1N_'.
Generating RTLIL representation for module `\$_DFFE_NN1P_'.
Generating RTLIL representation for module `\$_DFFE_NN1N_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNPP_'.
Generating RTLIL representation for module `\$_DFFSRE_NPNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPN_'.
Generating RTLIL representation for module `\$_DFFSRE_NNPN_'.
Generating RTLIL representation for module `\$_DFFSRE_NPNN_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNN_'.
Generating RTLIL representation for module `\$__SHREG_DFF_P_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PN0_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NN0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFF_PN1_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_NN1_'.
Successfully finished Verilog frontend.

3.147.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $lut.
Using template \$_DFF_PP0_ for cells of type $_DFF_PP0_.
Using template \$_DFFE_PP0P_ for cells of type $_DFFE_PP0P_.
Using extmapper simplemap for cells of type $mux.
Using template \$_DFFE_PP0N_ for cells of type $_DFFE_PP0N_.
Using extmapper simplemap for cells of type $logic_not.
No more expansions possible.
<suppressed ~599 debug messages>

yosys> opt_expr -mux_undef

3.148. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.
<suppressed ~7942 debug messages>

yosys> simplemap

3.149. Executing SIMPLEMAP pass (map simple cells to gate primitives).

yosys> opt_expr

3.150. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.

yosys> opt_merge

3.151. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
<suppressed ~3111 debug messages>
Removed a total of 1037 cells.

yosys> opt_dff -nodffe -nosdff

3.152. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.153. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..
Removed 0 unused cells and 1076 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.154. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.
<suppressed ~226 debug messages>

yosys> opt_merge -nomux

3.155. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
<suppressed ~9 debug messages>
Removed a total of 3 cells.

yosys> opt_muxtree

3.156. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.157. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

yosys> opt_merge

3.158. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_share

3.159. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.160. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.161. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..
Removed 0 unused cells and 22 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.162. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.
MAX OPT ITERATION = 1

yosys> abc -script /tmp/yosys_xUxXg5/abc_tmp_2.scr

3.163. Executing ABC pass (technology mapping using ABC).

3.163.1. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Extracted 1400 gates and 1525 wires to a netlist network with 123 inputs and 87 outputs.

3.163.1.1. Executing ABC.
DE:   #PIs = 123  #Luts =   219  Max Lvl =   6  Avg Lvl =   2.90  [   0.30 sec. at Pass 0]
DE:   #PIs = 123  #Luts =   219  Max Lvl =   6  Avg Lvl =   2.90  [   1.86 sec. at Pass 1]
DE:   #PIs = 123  #Luts =   219  Max Lvl =   6  Avg Lvl =   2.90  [   0.49 sec. at Pass 2]
DE:   #PIs = 123  #Luts =   219  Max Lvl =   6  Avg Lvl =   2.90  [   1.30 sec. at Pass 3]
DE:   #PIs = 123  #Luts =   219  Max Lvl =   6  Avg Lvl =   2.90  [   0.55 sec. at Pass 4]
DE:   #PIs = 123  #Luts =   219  Max Lvl =   6  Avg Lvl =   2.90  [   1.72 sec. at Pass 5]
DE:   #PIs = 123  #Luts =   218  Max Lvl =   6  Avg Lvl =   2.92  [  12.58 sec. at Pass 6]
DE:   #PIs = 123  #Luts =   218  Max Lvl =   6  Avg Lvl =   2.92  [   1.00 sec. at Pass 7]
DE:   #PIs = 123  #Luts =   218  Max Lvl =   6  Avg Lvl =   2.92  [   2.42 sec. at Pass 8]
DE:   #PIs = 123  #Luts =   218  Max Lvl =   6  Avg Lvl =   2.92  [   0.45 sec. at Pass 9]
DE:   #PIs = 123  #Luts =   218  Max Lvl =   6  Avg Lvl =   2.92  [   6.57 sec. at Pass 10]
DE:   #PIs = 123  #Luts =   218  Max Lvl =   6  Avg Lvl =   2.92  [   0.33 sec. at Pass 11]

yosys> opt_expr

3.164. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.

yosys> opt_merge -nomux

3.165. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.166. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.167. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

yosys> opt_merge

3.168. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_share

3.169. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.170. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.171. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..
Removed 0 unused cells and 1077 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.172. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.
MAX OPT ITERATION = 1

yosys> hierarchy -check

3.173. Executing HIERARCHY pass (managing design hierarchy).

3.173.1. Analyzing design hierarchy..
Top module:  \b12

3.173.2. Analyzing design hierarchy..
Top module:  \b12
Removed 0 unused modules.

yosys> stat

3.174. Printing statistics.

=== b12 ===

   Number of wires:                338
   Number of wire bits:            351
   Number of public wires:          11
   Number of public wire bits:      24
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                337
     $lut                          218
     dffsre                        119


yosys> opt_clean -purge

3.175. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

yosys> write_verilog -noattr -nohex synthesized.v

3.176. Executing Verilog backend.
Dumping module `\b12'.

Warnings: 1 unique messages, 1 total
End of script. Logfile hash: 1de2e2b2ed, CPU: user 3.58s system 0.18s, MEM: 49.39 MB peak
Yosys 0.18+10 (git sha1 c98b0e94e, gcc 9.4.0 -fPIC -Os)
Time spent: 99% 6x abc (583 sec), 0% 39x opt_expr (1 sec), ...
real 132.27
user 566.01
sys 20.94
