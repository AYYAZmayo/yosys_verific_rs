
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys-Verific 0.0.140
 Yosys 0.18+10 (git sha1 92b23013e, gcc 11.2.0 -fPIC -Os)


-- Executing script file `yosys.ys' --
echo on

yosys> plugin -i synth-rs

yosys> read -verific

yosys> read -incdir .

yosys> verific -vlog-incdir .

1. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Sep22_SW_Release, released at Fri Sep 30 20:01:32 2022.

yosys> verilog_defaults -add -I.

yosys> read -vhdl b12.vhd

yosys> verific -vhdl b12.vhd

2. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Sep22_SW_Release, released at Fri Sep 30 20:01:32 2022.
VERIFIC-INFO [VHDL-1504] default VHDL library search path is now "/nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008"
VERIFIC-COMMENT [VHDL-1481] Analyzing VHDL file 'b12.vhd'
VERIFIC-COMMENT [VHDL-1493] Restoring VHDL unit 'std.standard' from file '/nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008/std/standard.vdb'
VERIFIC-INFO [VHDL-1012] b12.vhd:1: analyzing entity 'b12'
VERIFIC-INFO [VHDL-1010] b12.vhd:12: analyzing architecture 'behav'

yosys> synth_rs -top b12 -tech genesis2 -goal area -de -verilog synthesized.v

3. Executing synth_rs pass: v0.4.116

yosys> read_verilog -lib -specify -nomem2reg +/rapidsilicon/common/cells_sim.v +/rapidsilicon/genesis2/cells_sim.v +/rapidsilicon/genesis2/dsp_sim.v +/rapidsilicon/genesis2/brams_sim.v

3.1. Executing Verilog-2005 frontend: /nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v
Parsing Verilog input from `/nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\inv'.
Generating RTLIL representation for module `\buff'.
Generating RTLIL representation for module `\logic_0'.
Generating RTLIL representation for module `\logic_1'.
Generating RTLIL representation for module `\gclkbuff'.
Successfully finished Verilog frontend.

3.2. Executing Verilog-2005 frontend: /nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/cells_sim.v
Parsing Verilog input from `/nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\dff'.
Generating RTLIL representation for module `\dffn'.
Generating RTLIL representation for module `\sdff'.
Generating RTLIL representation for module `\sdffn'.
Generating RTLIL representation for module `\dffr'.
Generating RTLIL representation for module `\dffnr'.
Generating RTLIL representation for module `\dffe'.
Generating RTLIL representation for module `\dffne'.
Generating RTLIL representation for module `\sdffre'.
Generating RTLIL representation for module `\sdffnre'.
Generating RTLIL representation for module `\dffre'.
Generating RTLIL representation for module `\dffnre'.
Generating RTLIL representation for module `\latch'.
Generating RTLIL representation for module `\latchn'.
Generating RTLIL representation for module `\latchr'.
Generating RTLIL representation for module `\latchnr'.
Generating RTLIL representation for module `\fa_1bit'.
Successfully finished Verilog frontend.

3.3. Executing Verilog-2005 frontend: /nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/dsp_sim.v
Parsing Verilog input from `/nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/dsp_sim.v' to AST representation.
Generating RTLIL representation for module `\RS_DSP'.
Generating RTLIL representation for module `\RS_DSP_MULT'.
Generating RTLIL representation for module `\RS_DSP_MULT_REGIN'.
Generating RTLIL representation for module `\RS_DSP_MULT_REGOUT'.
Generating RTLIL representation for module `\RS_DSP_MULT_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP_MULTADD'.
Generating RTLIL representation for module `\RS_DSP_MULTADD_REGIN'.
Generating RTLIL representation for module `\RS_DSP_MULTADD_REGOUT'.
Generating RTLIL representation for module `\RS_DSP_MULTADD_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP_MULTACC'.
Generating RTLIL representation for module `\RS_DSP_MULTACC_REGIN'.
Generating RTLIL representation for module `\RS_DSP_MULTACC_REGOUT'.
Generating RTLIL representation for module `\RS_DSP_MULTACC_REGIN_REGOUT'.
Generating RTLIL representation for module `\dsp_t1_20x18x64_cfg_ports'.
Generating RTLIL representation for module `\dsp_t1_sim_cfg_ports'.
Successfully finished Verilog frontend.

3.4. Executing Verilog-2005 frontend: /nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/brams_sim.v
Parsing Verilog input from `/nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/brams_sim.v' to AST representation.
Generating RTLIL representation for module `\TDP_BRAM18'.
Generating RTLIL representation for module `\RS_TDP36K'.
Generating RTLIL representation for module `\BRAM2x18_TDP'.
Generating RTLIL representation for module `\BRAM2x18_SDP'.
Generating RTLIL representation for module `\_$_mem_v2_asymmetric'.
Successfully finished Verilog frontend.

yosys> hierarchy -check -top b12

3.5. Executing HIERARCHY pass (managing design hierarchy).
VERIFIC-INFO [VHDL-1067] b12.vhd:1: processing 'b12(BEHAV)'
Importing module b12.

3.5.1. Analyzing design hierarchy..
Top module:  \b12

3.5.2. Analyzing design hierarchy..
Top module:  \b12
Removed 0 unused modules.

yosys> proc

3.6. Executing PROC pass (convert processes to netlists).

yosys> proc_clean

3.6.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> proc_rmdead

3.6.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

yosys> proc_prune

3.6.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

yosys> proc_init

3.6.4. Executing PROC_INIT pass (extract init attributes).

yosys> proc_arst

3.6.5. Executing PROC_ARST pass (detect async resets in processes).

yosys> proc_rom

3.6.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

yosys> proc_mux

3.6.7. Executing PROC_MUX pass (convert decision trees to multiplexers).

yosys> proc_dlatch

3.6.8. Executing PROC_DLATCH pass (convert process syncs to latches).

yosys> proc_dff

3.6.9. Executing PROC_DFF pass (convert process syncs to FFs).

yosys> proc_memwr

3.6.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

yosys> proc_clean

3.6.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> opt_expr -keepdc

3.6.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.
<suppressed ~9 debug messages>

yosys> demuxmap

3.7. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> flatten

3.8. Executing FLATTEN pass (flatten design).

yosys> demuxmap

3.9. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> tribuf -logic -formal

3.10. Executing TRIBUF pass.

yosys> deminout

3.11. Executing DEMINOUT pass (demote inout ports to input or output).

yosys> opt_expr

3.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.

yosys> opt_clean

3.13. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..
Removed 0 unused cells and 46 unused wires.
<suppressed ~19 debug messages>

yosys> check

3.14. Executing CHECK pass (checking for obvious problems).
Checking module b12...
Found and reported 0 problems.

yosys> opt_expr

3.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.

yosys> opt_merge -nomux

3.16. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

yosys> opt_muxtree

3.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~76 debug messages>

yosys> opt_reduce

3.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

yosys> opt_merge

3.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_share

3.20. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.21. Executing OPT_DFF pass (perform DFF optimizations).
Changing const-value async load to async reset on $verific$wr_reg$b12.vhd:564$542 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$timebase_reg$b12.vhd:564$546 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$speaker_reg$b12.vhd:144$304 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$sound_reg$b12.vhd:564$548 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$scan_reg$b12.vhd:564$543 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$s_reg$b12.vhd:144$303 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$play_reg$b12.vhd:564$541 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$nloss_reg$b12.vhd:564$539 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$nl_reg$b12.vhd:564$540 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_9$b12.vhd:184$391 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_8$b12.vhd:184$390 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_7$b12.vhd:184$389 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_6$b12.vhd:184$388 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_5$b12.vhd:184$387 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_4$b12.vhd:184$386 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_32$b12.vhd:184$414 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_31$b12.vhd:184$413 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_30$b12.vhd:184$412 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_3$b12.vhd:184$385 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_29$b12.vhd:184$411 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_28$b12.vhd:184$410 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_27$b12.vhd:184$409 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_26$b12.vhd:184$408 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_25$b12.vhd:184$407 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_24$b12.vhd:184$406 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_23$b12.vhd:184$405 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_22$b12.vhd:184$404 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_21$b12.vhd:184$403 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_20$b12.vhd:184$402 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_2$b12.vhd:184$384 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_19$b12.vhd:184$401 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_18$b12.vhd:184$400 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_17$b12.vhd:184$399 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_16$b12.vhd:184$398 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_15$b12.vhd:184$397 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_14$b12.vhd:184$396 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_13$b12.vhd:184$395 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_12$b12.vhd:184$394 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_11$b12.vhd:184$393 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_10$b12.vhd:184$392 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg$b12.vhd:184$415 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$max_reg$b12.vhd:564$544 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$ind_reg$b12.vhd:564$545 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$gamma_reg$b12.vhd:564$551 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$data_out_reg$b12.vhd:184$383 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$data_in_reg$b12.vhd:564$550 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$counter_reg$b12.vhd:144$305 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$count_reg_2$b12.vhd:164$311 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$count_reg$b12.vhd:564$547 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$address_reg$b12.vhd:564$549 ($aldff) from module b12.

yosys> opt_clean

3.22. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..

yosys> opt_expr

3.23. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.
MAX OPT ITERATION = 1

yosys> fsm -encoding binary

3.24. Executing FSM pass (extract and optimize FSM).

yosys> fsm_detect

3.24.1. Executing FSM_DETECT pass (finding FSMs in design).

yosys> fsm_extract

3.24.2. Executing FSM_EXTRACT pass (extracting FSM from design).

yosys> fsm_opt

3.24.3. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> opt_clean

3.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..

yosys> fsm_opt

3.24.5. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> fsm_recode -encoding binary

3.24.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

yosys> fsm_info

3.24.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

yosys> fsm_map

3.24.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

yosys> opt_expr

3.25. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.

yosys> opt_merge -nomux

3.26. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.27. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~76 debug messages>

yosys> opt_reduce

3.28. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

yosys> opt_merge

3.29. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_share

3.30. Executing OPT_SHARE pass.

yosys> opt_dff -sat

3.31. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $verific$s_reg$b12.vhd:144$303 ($adff) from module b12 (D = $verific$n125$27, Q = \s).
Adding EN signal on $verific$memory_reg_9$b12.vhd:184$391 ($adff) from module b12 (D = \data_in, Q = \memory[24]).
Adding EN signal on $verific$memory_reg_8$b12.vhd:184$390 ($adff) from module b12 (D = \data_in, Q = \memory[25]).
Adding EN signal on $verific$memory_reg_7$b12.vhd:184$389 ($adff) from module b12 (D = \data_in, Q = \memory[26]).
Adding EN signal on $verific$memory_reg_6$b12.vhd:184$388 ($adff) from module b12 (D = \data_in, Q = \memory[27]).
Adding EN signal on $verific$memory_reg_5$b12.vhd:184$387 ($adff) from module b12 (D = \data_in, Q = \memory[28]).
Adding EN signal on $verific$memory_reg_4$b12.vhd:184$386 ($adff) from module b12 (D = \data_in, Q = \memory[29]).
Adding EN signal on $verific$memory_reg_32$b12.vhd:184$414 ($adff) from module b12 (D = \data_in, Q = \memory[1]).
Adding EN signal on $verific$memory_reg_31$b12.vhd:184$413 ($adff) from module b12 (D = \data_in, Q = \memory[2]).
Adding EN signal on $verific$memory_reg_30$b12.vhd:184$412 ($adff) from module b12 (D = \data_in, Q = \memory[3]).
Adding EN signal on $verific$memory_reg_3$b12.vhd:184$385 ($adff) from module b12 (D = \data_in, Q = \memory[30]).
Adding EN signal on $verific$memory_reg_29$b12.vhd:184$411 ($adff) from module b12 (D = \data_in, Q = \memory[4]).
Adding EN signal on $verific$memory_reg_28$b12.vhd:184$410 ($adff) from module b12 (D = \data_in, Q = \memory[5]).
Adding EN signal on $verific$memory_reg_27$b12.vhd:184$409 ($adff) from module b12 (D = \data_in, Q = \memory[6]).
Adding EN signal on $verific$memory_reg_26$b12.vhd:184$408 ($adff) from module b12 (D = \data_in, Q = \memory[7]).
Adding EN signal on $verific$memory_reg_25$b12.vhd:184$407 ($adff) from module b12 (D = \data_in, Q = \memory[8]).
Adding EN signal on $verific$memory_reg_24$b12.vhd:184$406 ($adff) from module b12 (D = \data_in, Q = \memory[9]).
Adding EN signal on $verific$memory_reg_23$b12.vhd:184$405 ($adff) from module b12 (D = \data_in, Q = \memory[10]).
Adding EN signal on $verific$memory_reg_22$b12.vhd:184$404 ($adff) from module b12 (D = \data_in, Q = \memory[11]).
Adding EN signal on $verific$memory_reg_21$b12.vhd:184$403 ($adff) from module b12 (D = \data_in, Q = \memory[12]).
Adding EN signal on $verific$memory_reg_20$b12.vhd:184$402 ($adff) from module b12 (D = \data_in, Q = \memory[13]).
Adding EN signal on $verific$memory_reg_2$b12.vhd:184$384 ($adff) from module b12 (D = \data_in, Q = \memory[31]).
Adding EN signal on $verific$memory_reg_19$b12.vhd:184$401 ($adff) from module b12 (D = \data_in, Q = \memory[14]).
Adding EN signal on $verific$memory_reg_18$b12.vhd:184$400 ($adff) from module b12 (D = \data_in, Q = \memory[15]).
Adding EN signal on $verific$memory_reg_17$b12.vhd:184$399 ($adff) from module b12 (D = \data_in, Q = \memory[16]).
Adding EN signal on $verific$memory_reg_16$b12.vhd:184$398 ($adff) from module b12 (D = \data_in, Q = \memory[17]).
Adding EN signal on $verific$memory_reg_15$b12.vhd:184$397 ($adff) from module b12 (D = \data_in, Q = \memory[18]).
Adding EN signal on $verific$memory_reg_14$b12.vhd:184$396 ($adff) from module b12 (D = \data_in, Q = \memory[19]).
Adding EN signal on $verific$memory_reg_13$b12.vhd:184$395 ($adff) from module b12 (D = \data_in, Q = \memory[20]).
Adding EN signal on $verific$memory_reg_12$b12.vhd:184$394 ($adff) from module b12 (D = \data_in, Q = \memory[21]).
Adding EN signal on $verific$memory_reg_11$b12.vhd:184$393 ($adff) from module b12 (D = \data_in, Q = \memory[22]).
Adding EN signal on $verific$memory_reg_10$b12.vhd:184$392 ($adff) from module b12 (D = \data_in, Q = \memory[23]).
Adding EN signal on $verific$memory_reg$b12.vhd:184$415 ($adff) from module b12 (D = \data_in, Q = \memory[0]).

yosys> opt_clean

3.32. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..
Removed 65 unused cells and 65 unused wires.
<suppressed ~66 debug messages>

yosys> opt_expr

3.33. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.

yosys> opt_muxtree

3.34. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~43 debug messages>

yosys> opt_reduce

3.35. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

yosys> opt_merge

3.36. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_share

3.37. Executing OPT_SHARE pass.

yosys> opt_dff -sat

3.38. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.39. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..

yosys> opt_expr

3.40. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.
MAX OPT ITERATION = 2

yosys> wreduce -keepdc

3.41. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 3) from port A of cell b12.$verific$LessThan_4$b12.vhd:80$267 ($lt).
Removed top 2 bits (of 3) from port B of cell b12.$verific$add_8$b12.vhd:85$271 ($add).
Removed top 1 bits (of 4) from port Y of cell b12.$verific$add_8$b12.vhd:85$271 ($add).
Removed top 1 bits (of 3) from port A of cell b12.$verific$LessThan_13$b12.vhd:88$277 ($lt).
Removed top 2 bits (of 3) from port A of cell b12.$verific$LessThan_49$b12.vhd:125$293 ($lt).
Removed top 1 bits (of 2) from port B of cell b12.$verific$add_69$b12.vhd:159$308 ($add).
Removed top 31 bits (of 32) from port A of cell b12.$verific$Decoder_79$b12.vhd:182$318 ($shl).
Removed top 3 bits (of 4) from port A of cell b12.$verific$Decoder_195$b12.vhd:284$420 ($shl).
Removed top 1 bits (of 7) from port A of cell b12.$verific$sub_207$b12.vhd:298$427 ($sub).
Removed top 6 bits (of 7) from port B of cell b12.$verific$sub_207$b12.vhd:298$427 ($sub).
Removed top 1 bits (of 7) from port Y of cell b12.$verific$sub_207$b12.vhd:298$427 ($sub).
Removed top 4 bits (of 5) from port B of cell b12.$verific$add_215$b12.vhd:306$432 ($add).
Removed top 1 bits (of 6) from port Y of cell b12.$verific$add_215$b12.vhd:306$432 ($add).
Removed top 1 bits (of 2) from port A of cell b12.$verific$equal_239$b12.vhd:358$442 ($eq).
Removed top 1 bits (of 4) from mux cell b12.$verific$mux_273$b12.vhd:394$471 ($mux).
Removed top 1 bits (of 4) from mux cell b12.$verific$mux_274$b12.vhd:394$472 ($mux).
Removed top 1 bits (of 4) from mux cell b12.$verific$mux_275$b12.vhd:394$473 ($mux).
Removed top 1 bits (of 4) from mux cell b12.$verific$mux_276$b12.vhd:394$474 ($mux).
Removed top 3 bits (of 4) from port A of cell b12.$verific$Decoder_289$b12.vhd:400$482 ($shl).
Removed top 4 bits (of 5) from port B of cell b12.$verific$add_309$b12.vhd:423$488 ($add).
Removed top 1 bits (of 6) from port Y of cell b12.$verific$add_309$b12.vhd:423$488 ($add).
Removed top 1 bits (of 7) from port A of cell b12.$verific$sub_311$b12.vhd:424$491 ($sub).
Removed top 6 bits (of 7) from port B of cell b12.$verific$sub_311$b12.vhd:424$491 ($sub).
Removed top 1 bits (of 7) from port Y of cell b12.$verific$sub_311$b12.vhd:424$491 ($sub).
Removed top 2 bits (of 19) from mux cell b12.$verific$mux_503$b12.vhd:510$494 ($mux).
Removed top 1 bits (of 4) from wire b12.$verific$n1024$184.
Removed top 1 bits (of 4) from wire b12.$verific$n1073$186.
Removed top 1 bits (of 4) from wire b12.$verific$n1139$199.
Removed top 1 bits (of 4) from wire b12.$verific$n1144$200.
Removed top 1 bits (of 4) from wire b12.$verific$n1149$201.
Removed top 1 bits (of 4) from wire b12.$verific$n1154$202.
Removed top 1 bits (of 7) from wire b12.$verific$n1280$211.
Removed top 1 bits (of 5) from wire b12.$verific$n1336$215.
Removed top 3 bits (of 5) from wire b12.$verific$n1688$237.
Removed top 2 bits (of 5) from wire b12.$verific$n1733$242.
Removed top 4 bits (of 5) from wire b12.$verific$n1997$252.
Removed top 1 bits (of 7) from wire b12.$verific$n765$167.
Removed top 1 bits (of 4) from wire b12.$verific$n926$180.
Removed top 1 bits (of 4) from wire b12.$verific$n975$182.

yosys> peepopt

3.42. Executing PEEPOPT pass (run peephole optimizers).

yosys> opt_clean

3.43. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..
Removed 0 unused cells and 19 unused wires.
<suppressed ~1 debug messages>

yosys> demuxmap

3.44. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> stat

3.45. Printing statistics.

=== b12 ===

   Number of wires:                244
   Number of wire bits:            657
   Number of public wires:          56
   Number of public wire bits:     133
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                218
     $add                            4
     $adff                          17
     $adffe                         33
     $bmux                          17
     $eq                             3
     $logic_not                      2
     $lt                             6
     $mux                           88
     $ne                             3
     $not                            8
     $reduce_and                    32
     $shl                            3
     $sub                            2


yosys> wreduce t:$mul

3.46. Executing WREDUCE pass (reducing word size of cells).

yosys> rs_dsp_macc -genesis2 -max_dsp 154

3.47. Executing RS_DSP_MACC pass.

yosys> techmap -map +/mul2dsp_check_maxwidth.v -D DSP_A_MAXWIDTH=20 -D DSP_B_MAXWIDTH=18 -D DSP_A_MINWIDTH=11 -D DSP_B_MINWIDTH=10 -D DSP_NAME=$__RS_MUL20X18 a:valid_map

3.48. Executing TECHMAP pass (map to technology primitives).

3.48.1. Executing Verilog-2005 frontend: /nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/mul2dsp_check_maxwidth.v
Parsing Verilog input from `/nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/mul2dsp_check_maxwidth.v' to AST representation.
Generating RTLIL representation for module `\_80_mul'.
Generating RTLIL representation for module `\_90_soft_mul'.
Successfully finished Verilog frontend.

3.48.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

yosys> stat

3.49. Printing statistics.

=== b12 ===

   Number of wires:                244
   Number of wire bits:            657
   Number of public wires:          56
   Number of public wire bits:     133
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                218
     $add                            4
     $adff                          17
     $adffe                         33
     $bmux                          17
     $eq                             3
     $logic_not                      2
     $lt                             6
     $mux                           88
     $ne                             3
     $not                            8
     $reduce_and                    32
     $shl                            3
     $sub                            2


yosys> chtype -set $mul t:$__soft_mul

yosys> techmap -map +/rapidsilicon/genesis2/dsp_map.v -D USE_DSP_CFG_PARAMS=0

3.50. Executing TECHMAP pass (map to technology primitives).

3.50.1. Executing Verilog-2005 frontend: /nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/dsp_map.v
Parsing Verilog input from `/nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/dsp_map.v' to AST representation.
Generating RTLIL representation for module `\$__RS_MUL20X18'.
Successfully finished Verilog frontend.

3.50.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

yosys> techmap -map +/rapidsilicon/genesis2/dsp_final_map.v

3.51. Executing TECHMAP pass (map to technology primitives).

3.51.1. Executing Verilog-2005 frontend: /nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/dsp_final_map.v
Parsing Verilog input from `/nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/dsp_final_map.v' to AST representation.
Generating RTLIL representation for module `\dsp_t1_20x18x64_cfg_ports'.
Successfully finished Verilog frontend.

3.51.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

yosys> rs-pack-dsp-regs

3.52. Executing rs_pack_dsp_regs pass.

yosys> rs_dsp_io_regs

3.53. Executing RS_DSP_IO_REGS pass.

yosys> alumacc

3.54. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module b12:
  creating $macc model for $verific$add_215$b12.vhd:306$432 ($add).
  creating $macc model for $verific$add_309$b12.vhd:423$488 ($add).
  creating $macc model for $verific$add_69$b12.vhd:159$308 ($add).
  creating $macc model for $verific$add_8$b12.vhd:85$271 ($add).
  creating $macc model for $verific$sub_207$b12.vhd:298$427 ($sub).
  creating $macc model for $verific$sub_311$b12.vhd:424$491 ($sub).
  creating $alu model for $macc $verific$sub_311$b12.vhd:424$491.
  creating $alu model for $macc $verific$sub_207$b12.vhd:298$427.
  creating $alu model for $macc $verific$add_8$b12.vhd:85$271.
  creating $alu model for $macc $verific$add_69$b12.vhd:159$308.
  creating $alu model for $macc $verific$add_309$b12.vhd:423$488.
  creating $alu model for $macc $verific$add_215$b12.vhd:306$432.
  creating $alu model for $verific$LessThan_13$b12.vhd:88$277 ($lt): new $alu
  creating $alu model for $verific$LessThan_22$b12.vhd:98$281 ($lt): new $alu
  creating $alu model for $verific$LessThan_31$b12.vhd:107$285 ($lt): new $alu
  creating $alu model for $verific$LessThan_4$b12.vhd:80$267 ($lt): new $alu
  creating $alu model for $verific$LessThan_40$b12.vhd:116$289 ($lt): new $alu
  creating $alu model for $verific$LessThan_49$b12.vhd:125$293 ($lt): new $alu
  creating $alu cell for $verific$LessThan_40$b12.vhd:116$289: $auto$alumacc.cc:485:replace_alu$670
  creating $alu cell for $verific$LessThan_4$b12.vhd:80$267: $auto$alumacc.cc:485:replace_alu$675
  creating $alu cell for $verific$LessThan_31$b12.vhd:107$285: $auto$alumacc.cc:485:replace_alu$680
  creating $alu cell for $verific$LessThan_22$b12.vhd:98$281: $auto$alumacc.cc:485:replace_alu$685
  creating $alu cell for $verific$LessThan_13$b12.vhd:88$277: $auto$alumacc.cc:485:replace_alu$690
  creating $alu cell for $verific$add_215$b12.vhd:306$432: $auto$alumacc.cc:485:replace_alu$695
  creating $alu cell for $verific$add_309$b12.vhd:423$488: $auto$alumacc.cc:485:replace_alu$698
  creating $alu cell for $verific$add_69$b12.vhd:159$308: $auto$alumacc.cc:485:replace_alu$701
  creating $alu cell for $verific$LessThan_49$b12.vhd:125$293: $auto$alumacc.cc:485:replace_alu$704
  creating $alu cell for $verific$add_8$b12.vhd:85$271: $auto$alumacc.cc:485:replace_alu$709
  creating $alu cell for $verific$sub_207$b12.vhd:298$427: $auto$alumacc.cc:485:replace_alu$712
  creating $alu cell for $verific$sub_311$b12.vhd:424$491: $auto$alumacc.cc:485:replace_alu$715
  created 12 $alu and 0 $macc cells.

yosys> opt_expr

3.55. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.
<suppressed ~18 debug messages>

yosys> opt_merge -nomux

3.56. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.57. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~43 debug messages>

yosys> opt_reduce

3.58. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

yosys> opt_merge

3.59. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_share

3.60. Executing OPT_SHARE pass.

yosys> opt_dff -nodffe

3.61. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.62. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..
Removed 6 unused cells and 12 unused wires.
<suppressed ~7 debug messages>

yosys> opt_expr

3.63. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.

yosys> opt_muxtree

3.64. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~43 debug messages>

yosys> opt_reduce

3.65. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

yosys> opt_merge

3.66. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_share

3.67. Executing OPT_SHARE pass.

yosys> opt_dff -nodffe

3.68. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.69. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..

yosys> opt_expr

3.70. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.
MAX OPT ITERATION = 2

yosys> stat

3.71. Printing statistics.

=== b12 ===

   Number of wires:                268
   Number of wire bits:            759
   Number of public wires:          56
   Number of public wire bits:     133
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                218
     $adff                          17
     $adffe                         33
     $alu                           12
     $bmux                          17
     $eq                             3
     $logic_not                      2
     $mux                           88
     $ne                             3
     $not                            8
     $reduce_and                    32
     $shl                            3


yosys> memory -nomap

3.72. Executing MEMORY pass.

yosys> opt_mem

3.72.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

yosys> opt_mem_priority

3.72.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

yosys> opt_mem_feedback

3.72.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

yosys> memory_bmux2rom

3.72.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

yosys> memory_dff

3.72.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

yosys> opt_clean

3.72.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..

yosys> memory_share

3.72.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

yosys> opt_mem_widen

3.72.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

yosys> opt_clean

3.72.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..

yosys> memory_collect

3.72.10. Executing MEMORY_COLLECT pass (generating $mem cells).

yosys> stat

3.73. Printing statistics.

=== b12 ===

   Number of wires:                268
   Number of wire bits:            759
   Number of public wires:          56
   Number of public wire bits:     133
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                218
     $adff                          17
     $adffe                         33
     $alu                           12
     $bmux                          17
     $eq                             3
     $logic_not                      2
     $mux                           88
     $ne                             3
     $not                            8
     $reduce_and                    32
     $shl                            3


yosys> muxpack

3.74. Executing MUXPACK pass ($mux cell cascades to $pmux).
Converted 0 (p)mux cells into 0 pmux cells.
<suppressed ~60 debug messages>

yosys> opt_clean

3.75. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..

yosys> memory_libmap -lib +/rapidsilicon/genesis2/brams_new_swap.txt -limit 150 a:read_swapped

3.76. Executing MEMORY_LIBMAP pass (mapping memories to cells).

yosys> memory_libmap -lib +/rapidsilicon/genesis2/brams_new.txt -limit 150

3.77. Executing MEMORY_LIBMAP pass (mapping memories to cells).

yosys> rs_bram_split -new_mapping

3.78. Executing Rs_BRAM_Split pass.

yosys> techmap -autoproc -map +/rapidsilicon/genesis2/brams_map_new.v

3.79. Executing TECHMAP pass (map to technology primitives).

3.79.1. Executing Verilog-2005 frontend: /nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/brams_map_new.v
Parsing Verilog input from `/nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/brams_map_new.v' to AST representation.
Generating RTLIL representation for module `\$__RS_FACTOR_BRAM36_TDP'.
Generating RTLIL representation for module `\$__RS_FACTOR_BRAM18_TDP'.
Generating RTLIL representation for module `\$__RS_FACTOR_BRAM18_SDP'.
Generating RTLIL representation for module `\$__RS_FACTOR_BRAM36_SDP'.
Successfully finished Verilog frontend.

3.79.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~6 debug messages>

yosys> techmap -map +/rapidsilicon/genesis2/brams_final_map_new.v

3.80. Executing TECHMAP pass (map to technology primitives).

3.80.1. Executing Verilog-2005 frontend: /nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/brams_final_map_new.v
Parsing Verilog input from `/nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/brams_final_map_new.v' to AST representation.
Generating RTLIL representation for module `\BRAM2x18_TDP'.
Generating RTLIL representation for module `\BRAM2x18_SDP'.
Successfully finished Verilog frontend.

3.80.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

yosys> pmuxtree

3.81. Executing PMUXTREE pass.

yosys> muxpack

3.82. Executing MUXPACK pass ($mux cell cascades to $pmux).
Converted 0 (p)mux cells into 0 pmux cells.
<suppressed ~60 debug messages>

yosys> memory_map

3.83. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

yosys> stat

3.84. Printing statistics.

=== b12 ===

   Number of wires:                268
   Number of wire bits:            759
   Number of public wires:          56
   Number of public wire bits:     133
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                218
     $adff                          17
     $adffe                         33
     $alu                           12
     $bmux                          17
     $eq                             3
     $logic_not                      2
     $mux                           88
     $ne                             3
     $not                            8
     $reduce_and                    32
     $shl                            3


yosys> techmap -map +/techmap.v -map +/rapidsilicon/genesis2/arith_map.v

3.85. Executing TECHMAP pass (map to technology primitives).

3.85.1. Executing Verilog-2005 frontend: /nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.85.2. Executing Verilog-2005 frontend: /nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/arith_map.v
Parsing Verilog input from `/nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_rs_alu'.
Successfully finished Verilog frontend.

3.85.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $reduce_and.
Using template $paramod$78e969f2586efcf3a5b0b0440bcca0db83d5cca2\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $not.
Using template $paramod$a04dd9d4d8b430140c4ff94b50470fb380fda2a0\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $mux.
Using template $paramod$672a140277c71df8314410f22acc08d55222c3c7\_90_alu for cells of type $alu.
Using template $paramod$79fc7abbb3333dbd5736999d565fd903198fb1eb\_90_alu for cells of type $alu.
Using template $paramod$3ef7d3dd227da7627a99c5e5a6a4deb817573e39\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $bmux.
Using extmapper simplemap for cells of type $adffe.
Using extmapper simplemap for cells of type $adff.
Using template $paramod$constmap:dbcddb7b4524c1c5fa25e15435f3b9049e3d7d7a$paramod$3bf4391c2edcd7fdc564361d03ba2cf3a33c67d4\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using template $paramod$constmap:66d421c313e4e958be776b99540ac2de3b59fdbc$paramod$77562a466236eb4a6d905351a0995599b75075cb\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $eq.
Using template $paramod$175e67c02b86e96b1288b9dc100122520d7240d8\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $and.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000011 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000110 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000101 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000010 for cells of type $lcu.
Using extmapper simplemap for cells of type $or.
No more expansions possible.
<suppressed ~2206 debug messages>

yosys> stat

3.86. Printing statistics.

=== b12 ===

   Number of wires:                788
   Number of wire bits:          22688
   Number of public wires:          56
   Number of public wire bits:     133
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               2460
     $_AND_                        134
     $_DFFE_PP0P_                   65
     $_DFF_PP0_                     54
     $_MUX_                       1950
     $_NOT_                         62
     $_OR_                          72
     $_XOR_                        123


yosys> opt_expr

3.87. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.
<suppressed ~1084 debug messages>

yosys> opt_merge -nomux

3.88. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
<suppressed ~303 debug messages>
Removed a total of 101 cells.

yosys> opt_muxtree

3.89. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.90. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

yosys> opt_merge

3.91. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_share

3.92. Executing OPT_SHARE pass.

yosys> opt_dff -nodffe

3.93. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.94. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..
Removed 26 unused cells and 483 unused wires.
<suppressed ~27 debug messages>

yosys> opt_expr

3.95. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.
<suppressed ~1 debug messages>

yosys> opt_muxtree

3.96. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.97. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

yosys> opt_merge

3.98. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_share

3.99. Executing OPT_SHARE pass.

yosys> opt_dff -nodffe

3.100. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.101. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..

yosys> opt_expr

3.102. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.
MAX OPT ITERATION = 2

yosys> opt_expr -full

3.103. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.
<suppressed ~254 debug messages>

yosys> techmap -map +/techmap.v

3.104. Executing TECHMAP pass (map to technology primitives).

3.104.1. Executing Verilog-2005 frontend: /nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.104.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~71 debug messages>

yosys> stat

3.105. Printing statistics.

=== b12 ===

   Number of wires:                349
   Number of wire bits:           2327
   Number of public wires:          56
   Number of public wire bits:     133
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1317
     $_AND_                        171
     $_DFFE_PP0P_                   65
     $_DFF_PP0_                     54
     $_MUX_                        899
     $_NOT_                         35
     $_OR_                          67
     $_XOR_                         26


yosys> dfflegalize -cell $_SDFF_???_ 0 -cell $_SDFFE_????_ 0 t:$_SDFFCE_*

3.106. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

yosys> stat

3.107. Printing statistics.

=== b12 ===

   Number of wires:                349
   Number of wire bits:           2327
   Number of public wires:          56
   Number of public wire bits:     133
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1317
     $_AND_                        171
     $_DFFE_PP0P_                   65
     $_DFF_PP0_                     54
     $_MUX_                        899
     $_NOT_                         35
     $_OR_                          67
     $_XOR_                         26


yosys> opt_expr

3.108. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.

yosys> opt_merge -nomux

3.109. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.110. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.111. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

yosys> opt_merge

3.112. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -sat

3.113. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.114. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..

yosys> opt_expr

3.115. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.
MAX OPT ITERATION = 1

yosys> abc -dff -keepff

3.116. Executing ABC pass (technology mapping using ABC).

3.116.1. Summary of detected clock domains:
  2 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$576, arst=\reset, srst={ }
  2 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$579, arst=\reset, srst={ }
  2 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$582, arst=\reset, srst={ }
  2 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$588, arst=\reset, srst={ }
  2 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$591, arst=\reset, srst={ }
  2 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$594, arst=\reset, srst={ }
  2 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$597, arst=\reset, srst={ }
  2 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$600, arst=\reset, srst={ }
  2 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$603, arst=\reset, srst={ }
  2 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$606, arst=\reset, srst={ }
  2 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$609, arst=\reset, srst={ }
  2 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$612, arst=\reset, srst={ }
  2 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$615, arst=\reset, srst={ }
  2 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$621, arst=\reset, srst={ }
  2 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$624, arst=\reset, srst={ }
  2 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$627, arst=\reset, srst={ }
  2 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$630, arst=\reset, srst={ }
  2 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$633, arst=\reset, srst={ }
  2 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$636, arst=\reset, srst={ }
  2 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$639, arst=\reset, srst={ }
  2 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$642, arst=\reset, srst={ }
  2 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$645, arst=\reset, srst={ }
  2 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$648, arst=\reset, srst={ }
  2 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$558, arst=\reset, srst={ }
  2 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$561, arst=\reset, srst={ }
  2 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$564, arst=\reset, srst={ }
  2 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$567, arst=\reset, srst={ }
  2 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$570, arst=\reset, srst={ }
  2 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$573, arst=\reset, srst={ }
  2 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$585, arst=\reset, srst={ }
  2 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$618, arst=\reset, srst={ }
  8 cells in clk=\clock, en=\play, arst=\reset, srst={ }
  1245 cells in clk=\clock, en={ }, arst=\reset, srst={ }
  2 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$555, arst=\reset, srst={ }

3.116.2. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$576, asynchronously reset by \reset
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 2 outputs.

3.116.2.1. Executing ABC.

3.116.3. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$579, asynchronously reset by \reset
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 2 outputs.

3.116.3.1. Executing ABC.

3.116.4. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$582, asynchronously reset by \reset
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 2 outputs.

3.116.4.1. Executing ABC.

3.116.5. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$588, asynchronously reset by \reset
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 2 outputs.

3.116.5.1. Executing ABC.

3.116.6. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$591, asynchronously reset by \reset
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 2 outputs.

3.116.6.1. Executing ABC.

3.116.7. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$594, asynchronously reset by \reset
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 2 outputs.

3.116.7.1. Executing ABC.

3.116.8. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$597, asynchronously reset by \reset
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 2 outputs.

3.116.8.1. Executing ABC.

3.116.9. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$600, asynchronously reset by \reset
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 2 outputs.

3.116.9.1. Executing ABC.

3.116.10. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$603, asynchronously reset by \reset
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 2 outputs.

3.116.10.1. Executing ABC.

3.116.11. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$606, asynchronously reset by \reset
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 2 outputs.

3.116.11.1. Executing ABC.

3.116.12. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$609, asynchronously reset by \reset
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 2 outputs.

3.116.12.1. Executing ABC.

3.116.13. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$612, asynchronously reset by \reset
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 2 outputs.

3.116.13.1. Executing ABC.

3.116.14. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$615, asynchronously reset by \reset
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 2 outputs.

3.116.14.1. Executing ABC.

3.116.15. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$621, asynchronously reset by \reset
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 2 outputs.

3.116.15.1. Executing ABC.

3.116.16. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$624, asynchronously reset by \reset
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 2 outputs.

3.116.16.1. Executing ABC.

3.116.17. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$627, asynchronously reset by \reset
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 2 outputs.

3.116.17.1. Executing ABC.

3.116.18. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$630, asynchronously reset by \reset
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 2 outputs.

3.116.18.1. Executing ABC.

3.116.19. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$633, asynchronously reset by \reset
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 2 outputs.

3.116.19.1. Executing ABC.

3.116.20. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$636, asynchronously reset by \reset
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 2 outputs.

3.116.20.1. Executing ABC.

3.116.21. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$639, asynchronously reset by \reset
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 2 outputs.

3.116.21.1. Executing ABC.

3.116.22. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$642, asynchronously reset by \reset
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 2 outputs.

3.116.22.1. Executing ABC.

3.116.23. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$645, asynchronously reset by \reset
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 2 outputs.

3.116.23.1. Executing ABC.

3.116.24. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$648, asynchronously reset by \reset
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 2 outputs.

3.116.24.1. Executing ABC.

3.116.25. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$558, asynchronously reset by \reset
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 2 outputs.

3.116.25.1. Executing ABC.

3.116.26. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$561, asynchronously reset by \reset
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 2 outputs.

3.116.26.1. Executing ABC.

3.116.27. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$564, asynchronously reset by \reset
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 2 outputs.

3.116.27.1. Executing ABC.

3.116.28. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$567, asynchronously reset by \reset
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 2 outputs.

3.116.28.1. Executing ABC.

3.116.29. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$570, asynchronously reset by \reset
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 2 outputs.

3.116.29.1. Executing ABC.

3.116.30. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$573, asynchronously reset by \reset
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 2 outputs.

3.116.30.1. Executing ABC.

3.116.31. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$585, asynchronously reset by \reset
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 2 outputs.

3.116.31.1. Executing ABC.

3.116.32. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$618, asynchronously reset by \reset
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 2 outputs.

3.116.32.1. Executing ABC.

3.116.33. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by \play, asynchronously reset by \reset
Extracted 8 gates and 15 wires to a netlist network with 7 inputs and 8 outputs.

3.116.33.1. Executing ABC.

3.116.34. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, asynchronously reset by \reset
Extracted 1245 gates and 1324 wires to a netlist network with 77 inputs and 92 outputs.

3.116.34.1. Executing ABC.

3.116.35. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$4229$auto$opt_dff.cc:219:make_patterns_logic$555, asynchronously reset by \reset
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 2 outputs.

3.116.35.1. Executing ABC.

yosys> abc -dff -keepff

3.117. Executing ABC pass (technology mapping using ABC).

3.117.1. Summary of detected clock domains:
  5 cells in clk=\clock, en=$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$606, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$597, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$609, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$576, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$600, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$594, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$615, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$621, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$585, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$573, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$570, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$567, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$564, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$561, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$558, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$648, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$645, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$642, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$639, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$636, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$633, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$630, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$627, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$582, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$618, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$579, arst=\reset, srst={ }
  11 cells in clk=\clock, en=$abc$4229$play, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$612, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$624, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$603, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$588, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$591, arst=\reset, srst={ }
  1076 cells in clk=\clock, en={ }, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$555, arst=\reset, srst={ }

3.117.2. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$4229$auto$opt_dff.cc:219:make_patterns_logic$606, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 5 outputs.

3.117.2.1. Executing ABC.

3.117.3. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$4229$auto$opt_dff.cc:219:make_patterns_logic$597, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 5 outputs.

3.117.3.1. Executing ABC.

3.117.4. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$4229$auto$opt_dff.cc:219:make_patterns_logic$609, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 5 outputs.

3.117.4.1. Executing ABC.

3.117.5. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$4229$auto$opt_dff.cc:219:make_patterns_logic$576, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 5 outputs.

3.117.5.1. Executing ABC.

3.117.6. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$4229$auto$opt_dff.cc:219:make_patterns_logic$600, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 5 outputs.

3.117.6.1. Executing ABC.

3.117.7. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$4229$auto$opt_dff.cc:219:make_patterns_logic$594, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 5 outputs.

3.117.7.1. Executing ABC.

3.117.8. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$4229$auto$opt_dff.cc:219:make_patterns_logic$615, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 5 outputs.

3.117.8.1. Executing ABC.

3.117.9. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$4229$auto$opt_dff.cc:219:make_patterns_logic$621, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 5 outputs.

3.117.9.1. Executing ABC.

3.117.10. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$4229$auto$opt_dff.cc:219:make_patterns_logic$585, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 5 outputs.

3.117.10.1. Executing ABC.

3.117.11. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$4229$auto$opt_dff.cc:219:make_patterns_logic$573, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 5 outputs.

3.117.11.1. Executing ABC.

3.117.12. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$4229$auto$opt_dff.cc:219:make_patterns_logic$570, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 5 outputs.

3.117.12.1. Executing ABC.

3.117.13. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$4229$auto$opt_dff.cc:219:make_patterns_logic$567, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 5 outputs.

3.117.13.1. Executing ABC.

3.117.14. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$4229$auto$opt_dff.cc:219:make_patterns_logic$564, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 5 outputs.

3.117.14.1. Executing ABC.

3.117.15. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$4229$auto$opt_dff.cc:219:make_patterns_logic$561, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 5 outputs.

3.117.15.1. Executing ABC.

3.117.16. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$4229$auto$opt_dff.cc:219:make_patterns_logic$558, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 5 outputs.

3.117.16.1. Executing ABC.

3.117.17. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$4229$auto$opt_dff.cc:219:make_patterns_logic$648, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 5 outputs.

3.117.17.1. Executing ABC.

3.117.18. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$4229$auto$opt_dff.cc:219:make_patterns_logic$645, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 5 outputs.

3.117.18.1. Executing ABC.

3.117.19. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$4229$auto$opt_dff.cc:219:make_patterns_logic$642, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 5 outputs.

3.117.19.1. Executing ABC.

3.117.20. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$4229$auto$opt_dff.cc:219:make_patterns_logic$639, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 5 outputs.

3.117.20.1. Executing ABC.

3.117.21. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$4229$auto$opt_dff.cc:219:make_patterns_logic$636, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 5 outputs.

3.117.21.1. Executing ABC.

3.117.22. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$4229$auto$opt_dff.cc:219:make_patterns_logic$633, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 5 outputs.

3.117.22.1. Executing ABC.

3.117.23. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$4229$auto$opt_dff.cc:219:make_patterns_logic$630, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 5 outputs.

3.117.23.1. Executing ABC.

3.117.24. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$4229$auto$opt_dff.cc:219:make_patterns_logic$627, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 5 outputs.

3.117.24.1. Executing ABC.

3.117.25. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$4229$auto$opt_dff.cc:219:make_patterns_logic$582, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 5 outputs.

3.117.25.1. Executing ABC.

3.117.26. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$4229$auto$opt_dff.cc:219:make_patterns_logic$618, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 5 outputs.

3.117.26.1. Executing ABC.

3.117.27. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$4229$auto$opt_dff.cc:219:make_patterns_logic$579, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 5 outputs.

3.117.27.1. Executing ABC.

3.117.28. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$4229$play, asynchronously reset by \reset
Extracted 11 gates and 21 wires to a netlist network with 10 inputs and 9 outputs.

3.117.28.1. Executing ABC.

3.117.29. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$4229$auto$opt_dff.cc:219:make_patterns_logic$612, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 5 outputs.

3.117.29.1. Executing ABC.

3.117.30. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$4229$auto$opt_dff.cc:219:make_patterns_logic$624, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 5 outputs.

3.117.30.1. Executing ABC.

3.117.31. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$4229$auto$opt_dff.cc:219:make_patterns_logic$603, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 5 outputs.

3.117.31.1. Executing ABC.

3.117.32. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$4229$auto$opt_dff.cc:219:make_patterns_logic$588, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 5 outputs.

3.117.32.1. Executing ABC.

3.117.33. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$4229$auto$opt_dff.cc:219:make_patterns_logic$591, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 5 outputs.

3.117.33.1. Executing ABC.

3.117.34. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, asynchronously reset by \reset
Extracted 1076 gates and 1153 wires to a netlist network with 77 inputs and 84 outputs.

3.117.34.1. Executing ABC.

3.117.35. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$4229$auto$opt_dff.cc:219:make_patterns_logic$555, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 5 outputs.

3.117.35.1. Executing ABC.

yosys> abc -dff -keepff

3.118. Executing ABC pass (technology mapping using ABC).

3.118.1. Summary of detected clock domains:
  5 cells in clk=\clock, en=$abc$5410$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$606, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$5418$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$597, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$5426$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$609, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$5434$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$576, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$5442$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$600, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$5450$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$594, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$5458$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$615, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$5466$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$621, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$5474$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$585, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$5482$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$573, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$5490$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$570, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$5498$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$567, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$5506$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$564, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$5514$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$561, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$5522$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$558, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$5530$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$648, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$5538$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$645, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$5546$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$642, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$5554$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$639, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$5562$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$636, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$5570$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$633, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$5578$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$630, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$5586$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$627, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$5594$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$582, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$5602$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$618, arst=\reset, srst={ }
  9 cells in clk=\clock, en=$abc$5670$abc$4229$play, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$5630$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$612, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$5638$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$624, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$5646$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$603, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$5654$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$588, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$5610$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$579, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$5662$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$591, arst=\reset, srst={ }
  1045 cells in clk=\clock, en={ }, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$6715$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$555, arst=\reset, srst={ }

3.118.2. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$5410$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$606, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 5 outputs.

3.118.2.1. Executing ABC.

3.118.3. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$5418$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$597, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 5 outputs.

3.118.3.1. Executing ABC.

3.118.4. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$5426$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$609, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 5 outputs.

3.118.4.1. Executing ABC.

3.118.5. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$5434$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$576, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 5 outputs.

3.118.5.1. Executing ABC.

3.118.6. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$5442$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$600, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 5 outputs.

3.118.6.1. Executing ABC.

3.118.7. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$5450$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$594, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 5 outputs.

3.118.7.1. Executing ABC.

3.118.8. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$5458$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$615, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 5 outputs.

3.118.8.1. Executing ABC.

3.118.9. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$5466$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$621, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 5 outputs.

3.118.9.1. Executing ABC.

3.118.10. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$5474$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$585, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 5 outputs.

3.118.10.1. Executing ABC.

3.118.11. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$5482$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$573, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 5 outputs.

3.118.11.1. Executing ABC.

3.118.12. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$5490$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$570, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 5 outputs.

3.118.12.1. Executing ABC.

3.118.13. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$5498$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$567, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 5 outputs.

3.118.13.1. Executing ABC.

3.118.14. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$5506$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$564, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 5 outputs.

3.118.14.1. Executing ABC.

3.118.15. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$5514$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$561, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 5 outputs.

3.118.15.1. Executing ABC.

3.118.16. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$5522$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$558, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 5 outputs.

3.118.16.1. Executing ABC.

3.118.17. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$5530$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$648, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 5 outputs.

3.118.17.1. Executing ABC.

3.118.18. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$5538$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$645, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 5 outputs.

3.118.18.1. Executing ABC.

3.118.19. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$5546$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$642, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 5 outputs.

3.118.19.1. Executing ABC.

3.118.20. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$5554$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$639, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 5 outputs.

3.118.20.1. Executing ABC.

3.118.21. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$5562$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$636, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 5 outputs.

3.118.21.1. Executing ABC.

3.118.22. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$5570$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$633, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 5 outputs.

3.118.22.1. Executing ABC.

3.118.23. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$5578$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$630, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 5 outputs.

3.118.23.1. Executing ABC.

3.118.24. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$5586$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$627, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 5 outputs.

3.118.24.1. Executing ABC.

3.118.25. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$5594$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$582, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 5 outputs.

3.118.25.1. Executing ABC.

3.118.26. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$5602$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$618, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 5 outputs.

3.118.26.1. Executing ABC.

3.118.27. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$5670$abc$4229$play, asynchronously reset by \reset
Extracted 9 gates and 17 wires to a netlist network with 8 inputs and 8 outputs.

3.118.27.1. Executing ABC.

3.118.28. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$5630$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$612, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 5 outputs.

3.118.28.1. Executing ABC.

3.118.29. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$5638$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$624, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 5 outputs.

3.118.29.1. Executing ABC.

3.118.30. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$5646$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$603, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 5 outputs.

3.118.30.1. Executing ABC.

3.118.31. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$5654$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$588, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 5 outputs.

3.118.31.1. Executing ABC.

3.118.32. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$5610$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$579, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 5 outputs.

3.118.32.1. Executing ABC.

3.118.33. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$5662$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$591, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 5 outputs.

3.118.33.1. Executing ABC.

3.118.34. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, asynchronously reset by \reset
Extracted 1045 gates and 1122 wires to a netlist network with 77 inputs and 83 outputs.

3.118.34.1. Executing ABC.

3.118.35. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$6715$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$555, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 5 outputs.

3.118.35.1. Executing ABC.

yosys> abc -dff -keepff

3.119. Executing ABC pass (technology mapping using ABC).

3.119.1. Summary of detected clock domains:
  5 cells in clk=\clock, en=$abc$6723$abc$5410$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$606, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$6731$abc$5418$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$597, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$6739$abc$5426$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$609, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$6747$abc$5434$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$576, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$6755$abc$5442$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$600, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$6763$abc$5450$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$594, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$6771$abc$5458$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$615, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$6779$abc$5466$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$621, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$6787$abc$5474$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$585, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$6795$abc$5482$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$573, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$6803$abc$5490$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$570, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$6811$abc$5498$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$567, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$6819$abc$5506$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$564, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$6827$abc$5514$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$561, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$6835$abc$5522$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$558, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$6843$abc$5530$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$648, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$6851$abc$5538$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$645, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$6859$abc$5546$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$642, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$6867$abc$5554$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$639, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$6875$abc$5562$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$636, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$6883$abc$5570$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$633, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$6891$abc$5578$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$630, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$6899$abc$5586$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$627, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$6907$abc$5594$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$582, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$6915$abc$5602$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$618, arst=\reset, srst={ }
  10 cells in clk=\clock, en=$abc$6981$abc$5670$abc$4229$play, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$6933$abc$5630$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$612, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$6941$abc$5638$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$624, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$6949$abc$5646$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$603, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$6957$abc$5654$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$588, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$6973$abc$5662$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$591, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$6965$abc$5610$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$579, arst=\reset, srst={ }
  1040 cells in clk=\clock, en={ }, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$8023$abc$6715$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$555, arst=\reset, srst={ }

3.119.2. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$6723$abc$5410$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$606, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 5 outputs.

3.119.2.1. Executing ABC.

3.119.3. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$6731$abc$5418$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$597, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 5 outputs.

3.119.3.1. Executing ABC.

3.119.4. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$6739$abc$5426$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$609, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 5 outputs.

3.119.4.1. Executing ABC.

3.119.5. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$6747$abc$5434$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$576, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 5 outputs.

3.119.5.1. Executing ABC.

3.119.6. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$6755$abc$5442$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$600, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 5 outputs.

3.119.6.1. Executing ABC.

3.119.7. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$6763$abc$5450$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$594, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 5 outputs.

3.119.7.1. Executing ABC.

3.119.8. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$6771$abc$5458$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$615, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 5 outputs.

3.119.8.1. Executing ABC.

3.119.9. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$6779$abc$5466$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$621, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 5 outputs.

3.119.9.1. Executing ABC.

3.119.10. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$6787$abc$5474$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$585, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 5 outputs.

3.119.10.1. Executing ABC.

3.119.11. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$6795$abc$5482$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$573, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 5 outputs.

3.119.11.1. Executing ABC.

3.119.12. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$6803$abc$5490$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$570, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 5 outputs.

3.119.12.1. Executing ABC.

3.119.13. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$6811$abc$5498$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$567, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 5 outputs.

3.119.13.1. Executing ABC.

3.119.14. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$6819$abc$5506$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$564, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 5 outputs.

3.119.14.1. Executing ABC.

3.119.15. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$6827$abc$5514$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$561, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 5 outputs.

3.119.15.1. Executing ABC.

3.119.16. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$6835$abc$5522$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$558, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 5 outputs.

3.119.16.1. Executing ABC.

3.119.17. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$6843$abc$5530$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$648, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 5 outputs.

3.119.17.1. Executing ABC.

3.119.18. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$6851$abc$5538$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$645, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 5 outputs.

3.119.18.1. Executing ABC.

3.119.19. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$6859$abc$5546$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$642, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 5 outputs.

3.119.19.1. Executing ABC.

3.119.20. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$6867$abc$5554$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$639, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 5 outputs.

3.119.20.1. Executing ABC.

3.119.21. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$6875$abc$5562$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$636, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 5 outputs.

3.119.21.1. Executing ABC.

3.119.22. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$6883$abc$5570$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$633, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 5 outputs.

3.119.22.1. Executing ABC.

3.119.23. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$6891$abc$5578$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$630, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 5 outputs.

3.119.23.1. Executing ABC.

3.119.24. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$6899$abc$5586$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$627, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 5 outputs.

3.119.24.1. Executing ABC.

3.119.25. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$6907$abc$5594$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$582, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 5 outputs.

3.119.25.1. Executing ABC.

3.119.26. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$6915$abc$5602$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$618, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 5 outputs.

3.119.26.1. Executing ABC.

3.119.27. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$6981$abc$5670$abc$4229$play, asynchronously reset by \reset
Extracted 10 gates and 19 wires to a netlist network with 9 inputs and 9 outputs.

3.119.27.1. Executing ABC.

3.119.28. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$6933$abc$5630$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$612, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 5 outputs.

3.119.28.1. Executing ABC.

3.119.29. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$6941$abc$5638$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$624, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 5 outputs.

3.119.29.1. Executing ABC.

3.119.30. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$6949$abc$5646$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$603, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 5 outputs.

3.119.30.1. Executing ABC.

3.119.31. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$6957$abc$5654$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$588, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 5 outputs.

3.119.31.1. Executing ABC.

3.119.32. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$6973$abc$5662$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$591, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 5 outputs.

3.119.32.1. Executing ABC.

3.119.33. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$6965$abc$5610$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$579, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 5 outputs.

3.119.33.1. Executing ABC.

3.119.34. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, asynchronously reset by \reset
Extracted 1040 gates and 1117 wires to a netlist network with 77 inputs and 83 outputs.

3.119.34.1. Executing ABC.

3.119.35. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$8023$abc$6715$abc$4229$auto$opt_dff.cc:219:make_patterns_logic$555, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 5 outputs.

3.119.35.1. Executing ABC.

yosys> opt_ffinv

3.120. Executing OPT_FFINV pass (push inverters through FFs).
Discovering LUTs.
Pushed 0 inverters.

yosys> opt_expr

3.121. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.
<suppressed ~1 debug messages>

yosys> opt_merge -nomux

3.122. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.123. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.124. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

yosys> opt_merge

3.125. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_share

3.126. Executing OPT_SHARE pass.
    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$8290$auto$blifparse.cc:381:parse_blif$8387 in front of them:
        $abc$8231$auto$blifparse.cc:381:parse_blif$8237
        $abc$8231$auto$blifparse.cc:381:parse_blif$8235

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$8290$auto$blifparse.cc:381:parse_blif$8391 in front of them:
        $abc$8231$auto$blifparse.cc:381:parse_blif$8234
        $abc$8231$auto$blifparse.cc:381:parse_blif$8236


yosys> opt_dff -sat

3.127. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $abc$8290$auto$blifparse.cc:362:parse_blif$8294 ($_DFF_PP0_) from module b12 (D = $abc$8290$new_n505_, Q = $abc$8290$abc$6981$abc$5670$abc$4229$scan[0]).
Adding EN signal on $abc$8290$auto$blifparse.cc:362:parse_blif$8295 ($_DFF_PP0_) from module b12 (D = $abc$8290$new_n519_, Q = $abc$8290$abc$6981$abc$5670$abc$4229$scan[1]).
Adding EN signal on $abc$8290$auto$blifparse.cc:362:parse_blif$8327 ($_DFF_PP0_) from module b12 (D = $abc$8290$abc$6981$abc$5670$abc$4229$count_2[1], Q = $abc$8290$abc$6981$abc$5670$abc$4229$data_in[1]).
Adding EN signal on $abc$8290$auto$blifparse.cc:362:parse_blif$8326 ($_DFF_PP0_) from module b12 (D = $abc$8290$abc$6981$abc$5670$abc$4229$count_2[0], Q = $abc$8290$abc$6981$abc$5670$abc$4229$data_in[0]).
Adding EN signal on $abc$8290$auto$blifparse.cc:362:parse_blif$8304 ($_DFF_PP0_) from module b12 (D = $abc$8290$new_n654_, Q = $abc$8290$abc$6981$abc$5670$abc$4229$ind[0]).

yosys> opt_clean

3.128. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..
Removed 5 unused cells and 4879 unused wires.
<suppressed ~6 debug messages>

yosys> opt_expr

3.129. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.
<suppressed ~2 debug messages>

yosys> opt_muxtree

3.130. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

yosys> opt_reduce

3.131. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

yosys> opt_merge

3.132. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_share

3.133. Executing OPT_SHARE pass.

yosys> opt_dff -sat

3.134. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.135. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.136. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.
MAX OPT ITERATION = 2

yosys> bmuxmap

3.137. Executing BMUXMAP pass.

yosys> demuxmap

3.138. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> abc -script /tmp/yosys_m5r75D/abc_tmp_1.scr

3.139. Executing ABC pass (technology mapping using ABC).

3.139.1. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Extracted 1077 gates and 1201 wires to a netlist network with 124 inputs and 91 outputs.

3.139.1.1. Executing ABC.
DE:   #PIs = 124  #Luts =   353  Max Lvl =   4  Avg Lvl =   2.34  [   0.09 sec. at Pass 0]{firstMap}[1]
DE:   #PIs = 124  #Luts =   283  Max Lvl =   7  Avg Lvl =   3.22  [   1.35 sec. at Pass 1]{initMapFlow}[2]
DE:   #PIs = 124  #Luts =   270  Max Lvl =   8  Avg Lvl =   3.41  [   0.35 sec. at Pass 2]{map}[2]
DE:   #PIs = 124  #Luts =   264  Max Lvl =   8  Avg Lvl =   3.00  [   1.03 sec. at Pass 3]{postMap}[6]
DE:   #PIs = 124  #Luts =   256  Max Lvl =   8  Avg Lvl =   3.35  [   0.49 sec. at Pass 4]{map}[12]
DE:   #PIs = 124  #Luts =   249  Max Lvl =   8  Avg Lvl =   3.41  [   1.35 sec. at Pass 5]{postMap}[16]
DE:   #PIs = 124  #Luts =   244  Max Lvl =   9  Avg Lvl =   3.44  [   0.48 sec. at Pass 6]{map}[16]
DE:   #PIs = 124  #Luts =   238  Max Lvl =   8  Avg Lvl =   3.04  [   1.16 sec. at Pass 7]{postMap}[16]
DE:   #PIs = 124  #Luts =   237  Max Lvl =   9  Avg Lvl =   3.44  [   0.46 sec. at Pass 8]{map}[16]
DE:   #PIs = 124  #Luts =   235  Max Lvl =   8  Avg Lvl =   3.35  [   0.92 sec. at Pass 9]{postMap}[16]
DE:   #PIs = 124  #Luts =   235  Max Lvl =   8  Avg Lvl =   3.35  [   0.45 sec. at Pass 10]{map}[16]
DE:   #PIs = 124  #Luts =   235  Max Lvl =   8  Avg Lvl =   3.35  [   0.84 sec. at Pass 11]{postMap}[16]
DE:   #PIs = 124  #Luts =   230  Max Lvl =   8  Avg Lvl =   2.98  [   0.39 sec. at Pass 12]{map}[16]
DE:   #PIs = 124  #Luts =   230  Max Lvl =   8  Avg Lvl =   2.98  [   1.05 sec. at Pass 13]{postMap}[16]
DE:   #PIs = 124  #Luts =   230  Max Lvl =   8  Avg Lvl =   2.98  [   0.43 sec. at Pass 14]{map}[16]
DE:   #PIs = 124  #Luts =   229  Max Lvl =   8  Avg Lvl =   3.00  [   0.82 sec. at Pass 15]{postMap}[16]
DE:   #PIs = 124  #Luts =   227  Max Lvl =   8  Avg Lvl =   2.91  [   0.45 sec. at Pass 16]{map}[16]
DE:   #PIs = 124  #Luts =   227  Max Lvl =   8  Avg Lvl =   2.91  [   0.92 sec. at Pass 17]{postMap}[16]
DE:   #PIs = 124  #Luts =   227  Max Lvl =   8  Avg Lvl =   2.91  [   0.45 sec. at Pass 18]{map}[16]
DE:   #PIs = 124  #Luts =   227  Max Lvl =   8  Avg Lvl =   2.91  [   0.93 sec. at Pass 19]{postMap}[16]
DE:   #PIs = 124  #Luts =   223  Max Lvl =   8  Avg Lvl =   3.21  [   4.90 sec. at Pass 20]{pushMap}[16]
DE:   #PIs = 124  #Luts =   223  Max Lvl =   8  Avg Lvl =   3.21  [   0.59 sec. at Pass 21]{map}[16]
DE:   #PIs = 124  #Luts =   223  Max Lvl =   8  Avg Lvl =   3.21  [   1.56 sec. at Pass 22]{postMap}[16]
DE:   #PIs = 124  #Luts =   223  Max Lvl =   8  Avg Lvl =   3.21  [   0.49 sec. at Pass 23]{map}[16]
DE:   #PIs = 124  #Luts =   221  Max Lvl =   8  Avg Lvl =   2.93  [   5.63 sec. at Pass 24]{pushMap}[16]
DE:   #PIs = 124  #Luts =   221  Max Lvl =   8  Avg Lvl =   2.93  [   1.70 sec. at Pass 25]{postMap}[16]
DE:   #PIs = 124  #Luts =   221  Max Lvl =   8  Avg Lvl =   2.93  [   0.73 sec. at Pass 26]{map}[16]
DE:   #PIs = 124  #Luts =   221  Max Lvl =   8  Avg Lvl =   2.93  [   1.69 sec. at Pass 27]{postMap}[16]
DE:   #PIs = 124  #Luts =   220  Max Lvl =   9  Avg Lvl =   3.36  [   4.81 sec. at Pass 28]{pushMap}[16]
DE:   #PIs = 124  #Luts =   220  Max Lvl =   9  Avg Lvl =   3.36  [   1.17 sec. at Pass 29]{map}[16]
DE:   #PIs = 124  #Luts =   217  Max Lvl =   9  Avg Lvl =   3.36  [   1.88 sec. at Pass 30]{postMap}[16]
DE:   #PIs = 124  #Luts =   217  Max Lvl =   9  Avg Lvl =   3.36  [   1.64 sec. at Pass 31]{map}[16]
DE:   #PIs = 124  #Luts =   217  Max Lvl =   9  Avg Lvl =   3.36  [   1.78 sec. at Pass 32]{postMap}[16]
DE:   #PIs = 124  #Luts =   217  Max Lvl =   9  Avg Lvl =   3.36  [   0.82 sec. at Pass 33]{map}[16]
DE:   #PIs = 124  #Luts =   217  Max Lvl =   9  Avg Lvl =   3.36  [   4.46 sec. at Pass 34]{pushMap}[16]
DE:   #PIs = 124  #Luts =   217  Max Lvl =   9  Avg Lvl =   3.36  [   0.49 sec. at Pass 35]{finalMap}[16]

yosys> opt_expr

3.140. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.

yosys> opt_merge -nomux

3.141. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.142. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

yosys> opt_reduce

3.143. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

yosys> opt_merge

3.144. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_share

3.145. Executing OPT_SHARE pass.

yosys> opt_dff -nodffe

3.146. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.147. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..
Removed 0 unused cells and 1201 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.148. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.
MAX OPT ITERATION = 1

yosys> opt_ffinv

3.149. Executing OPT_FFINV pass (push inverters through FFs).
Discovering LUTs.
Pushed 0 inverters.

yosys> stat

3.150. Printing statistics.

=== b12 ===

   Number of wires:                632
   Number of wire bits:            717
   Number of public wires:          56
   Number of public wire bits:     133
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                338
     $_DFFE_PP0N_                    2
     $_DFFE_PP0P_                   68
     $_DFF_PP0_                     49
     $lut                          217
     $mux                            2


yosys> dfflegalize -cell $_DFF_?_ 0 -cell $_DFFE_??_ 0 -cell $_DFF_???_ 0 -cell $_DFFE_????_ 0 -cell $_SDFF_???_ 0 -cell $_SDFFE_????_ 0 -cell $_DLATCH_?_ 0 -cell $_DLATCH_???_ 0

3.151. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

yosys> stat

3.152. Printing statistics.

=== b12 ===

   Number of wires:                632
   Number of wire bits:            717
   Number of public wires:          56
   Number of public wire bits:     133
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                338
     $_DFFE_PP0N_                    2
     $_DFFE_PP0P_                   68
     $_DFF_PP0_                     49
     $lut                          217
     $mux                            2


yosys> techmap -map +/techmap.v -map +/rapidsilicon/genesis2/ffs_map.v

3.153. Executing TECHMAP pass (map to technology primitives).

3.153.1. Executing Verilog-2005 frontend: /nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.153.2. Executing Verilog-2005 frontend: /nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/ffs_map.v
Parsing Verilog input from `/nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/ffs_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP0N_'.
Generating RTLIL representation for module `\$_DFFE_PN0P_'.
Generating RTLIL representation for module `\$_DFFE_PN0N_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP1N_'.
Generating RTLIL representation for module `\$_DFFE_PN1P_'.
Generating RTLIL representation for module `\$_DFFE_PN1N_'.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP0N_'.
Generating RTLIL representation for module `\$_DFFE_NN0P_'.
Generating RTLIL representation for module `\$_DFFE_NN0N_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_NP1N_'.
Generating RTLIL representation for module `\$_DFFE_NN1P_'.
Generating RTLIL representation for module `\$_DFFE_NN1N_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PN0_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NN0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFF_PN1_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_NN1_'.
Generating RTLIL representation for module `\$_SDFFE_PP0P_'.
Generating RTLIL representation for module `\$_SDFFE_PP0N_'.
Generating RTLIL representation for module `\$_SDFFE_PN0P_'.
Generating RTLIL representation for module `\$_SDFFE_PN0N_'.
Generating RTLIL representation for module `\$_SDFFE_PP1P_'.
Generating RTLIL representation for module `\$_SDFFE_PP1N_'.
Generating RTLIL representation for module `\$_SDFFE_PN1P_'.
Generating RTLIL representation for module `\$_SDFFE_PN1N_'.
Generating RTLIL representation for module `\$_SDFFE_NP0P_'.
Generating RTLIL representation for module `\$_SDFFE_NP0N_'.
Generating RTLIL representation for module `\$_SDFFE_NN0P_'.
Generating RTLIL representation for module `\$_SDFFE_NN0N_'.
Generating RTLIL representation for module `\$_SDFFE_NP1P_'.
Generating RTLIL representation for module `\$_SDFFE_NP1N_'.
Generating RTLIL representation for module `\$_SDFFE_NN1P_'.
Generating RTLIL representation for module `\$_SDFFE_NN1N_'.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCH_PP0_'.
Generating RTLIL representation for module `\$_DLATCH_NP0_'.
Generating RTLIL representation for module `\$_DLATCH_PN0_'.
Generating RTLIL representation for module `\$_DLATCH_NN0_'.
Generating RTLIL representation for module `\$_DLATCH_PP1_'.
Generating RTLIL representation for module `\$_DLATCH_NP1_'.
Generating RTLIL representation for module `\$_DLATCH_PN1_'.
Generating RTLIL representation for module `\$_DLATCH_NN1_'.
Successfully finished Verilog frontend.

3.153.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $lut.
Using template \$_DFF_PP0_ for cells of type $_DFF_PP0_.
Using template \$_DFFE_PP0P_ for cells of type $_DFFE_PP0P_.
Using template \$_DFFE_PP0N_ for cells of type $_DFFE_PP0N_.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $logic_not.
No more expansions possible.
<suppressed ~475 debug messages>

yosys> opt_expr -mux_undef

3.154. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.
<suppressed ~7778 debug messages>

yosys> simplemap

3.155. Executing SIMPLEMAP pass (map simple cells to gate primitives).

yosys> opt_expr

3.156. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.

yosys> opt_merge

3.157. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
<suppressed ~1968 debug messages>
Removed a total of 656 cells.

yosys> opt_dff -nodffe -nosdff

3.158. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.159. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..
Removed 0 unused cells and 1026 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.160. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.
<suppressed ~111 debug messages>

yosys> opt_merge -nomux

3.161. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

yosys> opt_muxtree

3.162. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.163. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

yosys> opt_merge

3.164. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_share

3.165. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.166. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.167. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..
Removed 0 unused cells and 14 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.168. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.
MAX OPT ITERATION = 1

yosys> abc -script /tmp/yosys_m5r75D/abc_tmp_2.scr

3.169. Executing ABC pass (technology mapping using ABC).

3.169.1. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Extracted 1266 gates and 1390 wires to a netlist network with 122 inputs and 87 outputs.

3.169.1.1. Executing ABC.
DE:   #PIs = 122  #Luts =   221  Max Lvl =   6  Avg Lvl =   2.55  [   0.21 sec. at Pass 0]{firstMap}[1]
DE:   #PIs = 122  #Luts =   220  Max Lvl =   9  Avg Lvl =   3.48  [   2.19 sec. at Pass 1]{initMapFlow}[2]
DE:   #PIs = 122  #Luts =   218  Max Lvl =   9  Avg Lvl =   3.47  [   0.41 sec. at Pass 2]{map}[2]
DE:   #PIs = 122  #Luts =   216  Max Lvl =   9  Avg Lvl =   3.53  [   1.35 sec. at Pass 3]{postMap}[6]
DE:   #PIs = 122  #Luts =   216  Max Lvl =   9  Avg Lvl =   3.53  [   0.45 sec. at Pass 4]{map}[12]
DE:   #PIs = 122  #Luts =   214  Max Lvl =   9  Avg Lvl =   3.46  [   1.20 sec. at Pass 5]{postMap}[16]
DE:   #PIs = 122  #Luts =   214  Max Lvl =   9  Avg Lvl =   3.46  [   0.51 sec. at Pass 6]{map}[16]
DE:   #PIs = 122  #Luts =   214  Max Lvl =   9  Avg Lvl =   3.46  [   1.34 sec. at Pass 7]{postMap}[16]
DE:   #PIs = 122  #Luts =   214  Max Lvl =   9  Avg Lvl =   3.46  [   0.42 sec. at Pass 8]{map}[16]
DE:   #PIs = 122  #Luts =   211  Max Lvl =   8  Avg Lvl =   2.99  [   3.65 sec. at Pass 9]{pushMap}[16]
DE:   #PIs = 122  #Luts =   210  Max Lvl =   8  Avg Lvl =   3.30  [   1.35 sec. at Pass 10]{postMap}[16]
DE:   #PIs = 122  #Luts =   210  Max Lvl =   8  Avg Lvl =   3.30  [   0.45 sec. at Pass 11]{map}[16]
DE:   #PIs = 122  #Luts =   210  Max Lvl =   8  Avg Lvl =   3.30  [   0.93 sec. at Pass 12]{postMap}[16]
DE:   #PIs = 122  #Luts =   210  Max Lvl =   8  Avg Lvl =   3.30  [   0.44 sec. at Pass 13]{map}[16]
DE:   #PIs = 122  #Luts =   206  Max Lvl =   8  Avg Lvl =   3.29  [   4.42 sec. at Pass 14]{pushMap}[16]
DE:   #PIs = 122  #Luts =   206  Max Lvl =   8  Avg Lvl =   3.29  [   1.56 sec. at Pass 15]{postMap}[16]
DE:   #PIs = 122  #Luts =   206  Max Lvl =   8  Avg Lvl =   3.29  [   1.06 sec. at Pass 16]{map}[16]
DE:   #PIs = 122  #Luts =   206  Max Lvl =   8  Avg Lvl =   3.29  [   1.51 sec. at Pass 17]{postMap}[16]
DE:   #PIs = 122  #Luts =   206  Max Lvl =   8  Avg Lvl =   3.29  [   5.23 sec. at Pass 18]{pushMap}[16]
DE:   #PIs = 122  #Luts =   206  Max Lvl =   8  Avg Lvl =   3.29  [   0.74 sec. at Pass 19]{finalMap}[16]

yosys> opt_expr

3.170. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.

yosys> opt_merge -nomux

3.171. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.172. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.173. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

yosys> opt_merge

3.174. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_share

3.175. Executing OPT_SHARE pass.

yosys> opt_dff -nodffe

3.176. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.177. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..
Removed 0 unused cells and 965 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.178. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.
MAX OPT ITERATION = 1

yosys> hierarchy -check

3.179. Executing HIERARCHY pass (managing design hierarchy).

3.179.1. Analyzing design hierarchy..
Top module:  \b12

3.179.2. Analyzing design hierarchy..
Top module:  \b12
Removed 0 unused modules.

yosys> stat

3.180. Printing statistics.

=== b12 ===

   Number of wires:                619
   Number of wire bits:            696
   Number of public wires:          56
   Number of public wire bits:     133
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                325
     $lut                          206
     dffr                           49
     dffre                          70


yosys> opt_clean -purge

3.181. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..
Removed 0 unused cells and 2 unused wires.
<suppressed ~2 debug messages>

yosys> write_verilog -noattr -nohex synthesized.v

3.182. Executing Verilog backend.
Dumping module `\b12'.

End of script. Logfile hash: 1f8428b70d, CPU: user 4.25s system 0.36s, MEM: 43.03 MB peak
Yosys 0.18+10 (git sha1 92b23013e, gcc 11.2.0 -fPIC -Os)
Time spent: 99% 6x abc (703 sec), 0% 39x opt_expr (1 sec), ...
real 99.86
user 648.86
sys 58.16
