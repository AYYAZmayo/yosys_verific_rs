
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys-Verific 0.0.140
 Yosys 0.18+10 (git sha1 92b23013e, gcc 11.2.0 -fPIC -Os)


-- Executing script file `yosys.ys' --
echo on

yosys> plugin -i synth-rs

yosys> read -verific

yosys> read -incdir .

yosys> verific -vlog-incdir .

1. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Sep22_SW_Release, released at Fri Sep 30 20:01:32 2022.

yosys> verilog_defaults -add -I.

yosys> read -vhdl dual_mem.vhd tb_key_schedule.vhd key_schedule.vhd

yosys> verific -vhdl dual_mem.vhd tb_key_schedule.vhd key_schedule.vhd

2. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Sep22_SW_Release, released at Fri Sep 30 20:01:32 2022.
VERIFIC-INFO [VHDL-1504] default VHDL library search path is now "/nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008"
VERIFIC-COMMENT [VHDL-1481] Analyzing VHDL file 'dual_mem.vhd'
VERIFIC-COMMENT [VHDL-1493] Restoring VHDL unit 'ieee.std_logic_1164' from file '/nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008/ieee/std_logic_1164.vdb'
VERIFIC-COMMENT [VHDL-1493] Restoring VHDL unit 'std.standard' from file '/nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008/std/standard.vdb'
VERIFIC-COMMENT [VHDL-1493] Restoring VHDL unit 'std.textio' from file '/nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008/std/textio.vdb'
VERIFIC-COMMENT [VHDL-1493] Restoring VHDL unit 'ieee.std_logic_unsigned' from file '/nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008/ieee/std_logic_unsigned.vdb'
VERIFIC-COMMENT [VHDL-1493] Restoring VHDL unit 'ieee.std_logic_arith' from file '/nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008/ieee/std_logic_arith.vdb'
VERIFIC-INFO [VHDL-1012] dual_mem.vhd:20: analyzing entity 'dual_mem'
VERIFIC-INFO [VHDL-1010] dual_mem.vhd:33: analyzing architecture 'rtl'
VERIFIC-COMMENT [VHDL-1481] Analyzing VHDL file 'tb_key_schedule.vhd'
VERIFIC-INFO [VHDL-1012] tb_key_schedule.vhd:20: analyzing entity 'tb_key_schedule'
VERIFIC-INFO [VHDL-1010] tb_key_schedule.vhd:23: analyzing architecture 'behavior'
VERIFIC-COMMENT [VHDL-1481] Analyzing VHDL file 'key_schedule.vhd'
VERIFIC-INFO [VHDL-1012] key_schedule.vhd:22: analyzing entity 'key_schedule'
VERIFIC-INFO [VHDL-1010] key_schedule.vhd:35: analyzing architecture 'behavioral'

yosys> synth_rs -top key_schedule -tech genesis2 -goal area -de -verilog synthesized.v

3. Executing synth_rs pass: v0.4.116

yosys> read_verilog -lib -specify -nomem2reg +/rapidsilicon/common/cells_sim.v +/rapidsilicon/genesis2/cells_sim.v +/rapidsilicon/genesis2/dsp_sim.v +/rapidsilicon/genesis2/brams_sim.v

3.1. Executing Verilog-2005 frontend: /nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v
Parsing Verilog input from `/nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\inv'.
Generating RTLIL representation for module `\buff'.
Generating RTLIL representation for module `\logic_0'.
Generating RTLIL representation for module `\logic_1'.
Generating RTLIL representation for module `\gclkbuff'.
Successfully finished Verilog frontend.

3.2. Executing Verilog-2005 frontend: /nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/cells_sim.v
Parsing Verilog input from `/nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\dff'.
Generating RTLIL representation for module `\dffn'.
Generating RTLIL representation for module `\sdff'.
Generating RTLIL representation for module `\sdffn'.
Generating RTLIL representation for module `\dffr'.
Generating RTLIL representation for module `\dffnr'.
Generating RTLIL representation for module `\dffe'.
Generating RTLIL representation for module `\dffne'.
Generating RTLIL representation for module `\sdffre'.
Generating RTLIL representation for module `\sdffnre'.
Generating RTLIL representation for module `\dffre'.
Generating RTLIL representation for module `\dffnre'.
Generating RTLIL representation for module `\latch'.
Generating RTLIL representation for module `\latchn'.
Generating RTLIL representation for module `\latchr'.
Generating RTLIL representation for module `\latchnr'.
Generating RTLIL representation for module `\fa_1bit'.
Successfully finished Verilog frontend.

3.3. Executing Verilog-2005 frontend: /nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/dsp_sim.v
Parsing Verilog input from `/nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/dsp_sim.v' to AST representation.
Generating RTLIL representation for module `\RS_DSP'.
Generating RTLIL representation for module `\RS_DSP_MULT'.
Generating RTLIL representation for module `\RS_DSP_MULT_REGIN'.
Generating RTLIL representation for module `\RS_DSP_MULT_REGOUT'.
Generating RTLIL representation for module `\RS_DSP_MULT_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP_MULTADD'.
Generating RTLIL representation for module `\RS_DSP_MULTADD_REGIN'.
Generating RTLIL representation for module `\RS_DSP_MULTADD_REGOUT'.
Generating RTLIL representation for module `\RS_DSP_MULTADD_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP_MULTACC'.
Generating RTLIL representation for module `\RS_DSP_MULTACC_REGIN'.
Generating RTLIL representation for module `\RS_DSP_MULTACC_REGOUT'.
Generating RTLIL representation for module `\RS_DSP_MULTACC_REGIN_REGOUT'.
Generating RTLIL representation for module `\dsp_t1_20x18x64_cfg_ports'.
Generating RTLIL representation for module `\dsp_t1_sim_cfg_ports'.
Successfully finished Verilog frontend.

3.4. Executing Verilog-2005 frontend: /nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/brams_sim.v
Parsing Verilog input from `/nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/brams_sim.v' to AST representation.
Generating RTLIL representation for module `\TDP_BRAM18'.
Generating RTLIL representation for module `\RS_TDP36K'.
Generating RTLIL representation for module `\BRAM2x18_TDP'.
Generating RTLIL representation for module `\BRAM2x18_SDP'.
Generating RTLIL representation for module `\_$_mem_v2_asymmetric'.
Successfully finished Verilog frontend.

yosys> hierarchy -check -top key_schedule

3.5. Executing HIERARCHY pass (managing design hierarchy).
VERIFIC-INFO [VHDL-1067] key_schedule.vhd:22: processing 'key_schedule(Behavioral)'
VERIFIC-INFO [VHDL-1067] dual_mem.vhd:20: processing 'dual_mem(rtl)'
VERIFIC-INFO [VHDL-1754] dual_mem.vhd:35: extracting RAM for identifier 'RAM'
Importing module key_schedule.
Importing module dual_mem(rtl).

3.5.1. Analyzing design hierarchy..
Top module:  \key_schedule
Used module:     \dual_mem(rtl)

3.5.2. Analyzing design hierarchy..
Top module:  \key_schedule
Used module:     \dual_mem(rtl)
Removed 0 unused modules.

yosys> proc

3.6. Executing PROC pass (convert processes to netlists).

yosys> proc_clean

3.6.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> proc_rmdead

3.6.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

yosys> proc_prune

3.6.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

yosys> proc_init

3.6.4. Executing PROC_INIT pass (extract init attributes).

yosys> proc_arst

3.6.5. Executing PROC_ARST pass (detect async resets in processes).

yosys> proc_rom

3.6.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

yosys> proc_mux

3.6.7. Executing PROC_MUX pass (convert decision trees to multiplexers).

yosys> proc_dlatch

3.6.8. Executing PROC_DLATCH pass (convert process syncs to latches).

yosys> proc_dff

3.6.9. Executing PROC_DFF pass (convert process syncs to FFs).

yosys> proc_memwr

3.6.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

yosys> proc_clean

3.6.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> opt_expr -keepdc

3.6.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module dual_mem(rtl).
Optimizing module key_schedule.
<suppressed ~1 debug messages>

yosys> demuxmap

3.7. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> flatten

3.8. Executing FLATTEN pass (flatten design).
Deleting now unused module dual_mem(rtl).
<suppressed ~2 debug messages>

yosys> demuxmap

3.9. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> tribuf -logic -formal

3.10. Executing TRIBUF pass.

yosys> deminout

3.11. Executing DEMINOUT pass (demote inout ports to input or output).

yosys> opt_expr

3.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.
<suppressed ~2 debug messages>

yosys> opt_clean

3.13. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..
Removed 0 unused cells and 57 unused wires.
<suppressed ~30 debug messages>

yosys> check

3.14. Executing CHECK pass (checking for obvious problems).
Checking module key_schedule...
Found and reported 0 problems.

yosys> opt_expr

3.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.

yosys> opt_merge -nomux

3.16. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \key_schedule..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~10 debug messages>

yosys> opt_reduce

3.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \key_schedule.
Performed a total of 0 changes.

yosys> opt_merge

3.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
Removed a total of 0 cells.

yosys> opt_share

3.20. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.21. Executing OPT_DFF pass (perform DFF optimizations).
Removing never-active async load on $verific$gen_sub_keys.w_3_i_tmp_old_reg$key_schedule.vhd:130$187 ($aldff) from module key_schedule.
Removing never-active async load on $verific$gen_sub_keys.w_2_i_tmp_old_reg$key_schedule.vhd:130$186 ($aldff) from module key_schedule.
Removing never-active async load on $verific$gen_sub_keys.w_1_i_tmp_old_reg$key_schedule.vhd:130$185 ($aldff) from module key_schedule.
Removing never-active async load on $verific$gen_sub_keys.w_0_i_tmp_old_reg$key_schedule.vhd:130$184 ($aldff) from module key_schedule.
Removing never-active async load on $verific$gen_sub_keys.tmp_3_reg$key_schedule.vhd:130$191 ($aldff) from module key_schedule.
Removing never-active async load on $verific$gen_sub_keys.tmp_2_reg$key_schedule.vhd:130$190 ($aldff) from module key_schedule.
Removing never-active async load on $verific$gen_sub_keys.tmp_1_reg$key_schedule.vhd:130$189 ($aldff) from module key_schedule.
Removing never-active async load on $verific$gen_sub_keys.tmp_0_reg$key_schedule.vhd:130$188 ($aldff) from module key_schedule.
Removing never-active async load on $verific$count_5_reg$key_schedule.vhd:62$104 ($aldff) from module key_schedule.
Removing never-active async load on $verific$count_10_reg$key_schedule.vhd:77$111 ($aldff) from module key_schedule.
Removing never-active async load on $flatten\S_BOX_DUAL_2.$verific$read_dpra_reg$dual_mem.vhd:51$230 ($aldff) from module key_schedule.
Removing never-active async load on $flatten\S_BOX_DUAL_2.$verific$read_a_reg$dual_mem.vhd:51$229 ($aldff) from module key_schedule.
Removing never-active async load on $flatten\S_BOX_DUAL_1.$verific$read_dpra_reg$dual_mem.vhd:51$230 ($aldff) from module key_schedule.
Removing never-active async load on $flatten\S_BOX_DUAL_1.$verific$read_a_reg$dual_mem.vhd:51$229 ($aldff) from module key_schedule.

yosys> opt_clean

3.22. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..

yosys> opt_expr

3.23. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.
MAX OPT ITERATION = 1

yosys> fsm -encoding binary

3.24. Executing FSM pass (extract and optimize FSM).

yosys> fsm_detect

3.24.1. Executing FSM_DETECT pass (finding FSMs in design).

yosys> fsm_extract

3.24.2. Executing FSM_EXTRACT pass (extracting FSM from design).

yosys> fsm_opt

3.24.3. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> opt_clean

3.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..

yosys> fsm_opt

3.24.5. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> fsm_recode -encoding binary

3.24.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

yosys> fsm_info

3.24.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

yosys> fsm_map

3.24.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

yosys> opt_expr

3.25. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.

yosys> opt_merge -nomux

3.26. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.27. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \key_schedule..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~10 debug messages>

yosys> opt_reduce

3.28. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \key_schedule.
Performed a total of 0 changes.

yosys> opt_merge

3.29. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
Removed a total of 0 cells.

yosys> opt_share

3.30. Executing OPT_SHARE pass.

yosys> opt_dff -sat

3.31. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $verific$gen_sub_keys.w_3_i_tmp_old_reg$key_schedule.vhd:130$187 ($dff) from module key_schedule (D = $verific$n1740$80, Q = \gen_sub_keys.w_3_i_tmp_old, rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$237 ($sdff) from module key_schedule (D = $verific$n1740$80, Q = \gen_sub_keys.w_3_i_tmp_old).
Adding SRST signal on $verific$gen_sub_keys.w_2_i_tmp_old_reg$key_schedule.vhd:130$186 ($dff) from module key_schedule (D = $verific$n1641$77, Q = \gen_sub_keys.w_2_i_tmp_old, rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$251 ($sdff) from module key_schedule (D = $verific$n1641$77, Q = \gen_sub_keys.w_2_i_tmp_old).
Adding SRST signal on $verific$gen_sub_keys.w_1_i_tmp_old_reg$key_schedule.vhd:130$185 ($dff) from module key_schedule (D = $verific$n1542$74, Q = \gen_sub_keys.w_1_i_tmp_old, rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$263 ($sdff) from module key_schedule (D = $verific$n1542$74, Q = \gen_sub_keys.w_1_i_tmp_old).
Adding SRST signal on $verific$gen_sub_keys.w_0_i_tmp_old_reg$key_schedule.vhd:130$184 ($dff) from module key_schedule (D = $verific$n1443$71, Q = \gen_sub_keys.w_0_i_tmp_old, rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$273 ($sdff) from module key_schedule (D = $verific$n1443$71, Q = \gen_sub_keys.w_0_i_tmp_old).
Adding SRST signal on $verific$gen_sub_keys.tmp_3_reg$key_schedule.vhd:130$191 ($dff) from module key_schedule (D = $verific$n2136$92, Q = \gen_sub_keys.tmp_3, rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$281 ($sdff) from module key_schedule (D = $verific$n651$47, Q = \gen_sub_keys.tmp_3).
Adding SRST signal on $verific$gen_sub_keys.tmp_2_reg$key_schedule.vhd:130$190 ($dff) from module key_schedule (D = $verific$n2037$89, Q = \gen_sub_keys.tmp_2, rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$293 ($sdff) from module key_schedule (D = $verific$n551$44, Q = \gen_sub_keys.tmp_2).
Adding SRST signal on $verific$gen_sub_keys.tmp_1_reg$key_schedule.vhd:130$189 ($dff) from module key_schedule (D = $verific$n1938$86, Q = \gen_sub_keys.tmp_1, rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$303 ($sdff) from module key_schedule (D = $verific$n451$41, Q = \gen_sub_keys.tmp_1).
Adding SRST signal on $verific$gen_sub_keys.tmp_0_reg$key_schedule.vhd:130$188 ($dff) from module key_schedule (D = $verific$n1839$83, Q = \gen_sub_keys.tmp_0, rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$311 ($sdff) from module key_schedule (D = $verific$n351$38, Q = \gen_sub_keys.tmp_0).
Adding SRST signal on $verific$count_5_reg$key_schedule.vhd:62$104 ($dff) from module key_schedule (D = $verific$n86$24, Q = \count_5, rval = 3'000).
Adding EN signal on $auto$ff.cc:262:slice$317 ($sdff) from module key_schedule (D = $verific$n82$23, Q = \count_5).
Adding SRST signal on $verific$count_10_reg$key_schedule.vhd:77$111 ($dff) from module key_schedule (D = $verific$n185$31, Q = \count_10, rval = 4'0000).
Adding EN signal on $auto$ff.cc:262:slice$319 ($sdff) from module key_schedule (D = $verific$n180$30, Q = \count_10).

yosys> opt_clean

3.32. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..
Removed 30 unused cells and 30 unused wires.
<suppressed ~31 debug messages>

yosys> opt_expr

3.33. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.
<suppressed ~4 debug messages>

yosys> opt_muxtree

3.34. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \key_schedule..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~6 debug messages>

yosys> opt_reduce

3.35. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \key_schedule.
Performed a total of 0 changes.

yosys> opt_merge

3.36. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
<suppressed ~36 debug messages>
Removed a total of 12 cells.

yosys> opt_share

3.37. Executing OPT_SHARE pass.

yosys> opt_dff -sat

3.38. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.39. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..
Removed 0 unused cells and 12 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.40. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.

yosys> opt_muxtree

3.41. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \key_schedule..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~6 debug messages>

yosys> opt_reduce

3.42. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \key_schedule.
Performed a total of 0 changes.

yosys> opt_merge

3.43. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
Removed a total of 0 cells.

yosys> opt_share

3.44. Executing OPT_SHARE pass.

yosys> opt_dff -sat

3.45. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.46. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..

yosys> opt_expr

3.47. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.
MAX OPT ITERATION = 3

yosys> wreduce -keepdc

3.48. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 3) from port B of cell key_schedule.$auto$opt_dff.cc:195:make_patterns_logic$278 ($ne).
Removed top 2 bits (of 3) from port B of cell key_schedule.$verific$add_7$key_schedule.vhd:59$100 ($add).
Removed top 3 bits (of 4) from port B of cell key_schedule.$verific$add_19$key_schedule.vhd:74$107 ($add).
Removed top 2 bits (of 3) from port A of cell key_schedule.$verific$equal_30$key_schedule.vhd:116$116 ($eq).
Removed top 1 bits (of 3) from port A of cell key_schedule.$verific$equal_43$key_schedule.vhd:119$129 ($eq).
Removed top 1 bits (of 3) from port A of cell key_schedule.$verific$equal_47$key_schedule.vhd:122$133 ($eq).
Removed top 2 bits (of 4) from port B of cell key_schedule.$auto$opt_dff.cc:195:make_patterns_logic$268 ($ne).
Removed top 3 bits (of 5) from port B of cell key_schedule.$auto$opt_dff.cc:195:make_patterns_logic$256 ($ne).
Removed top 4 bits (of 6) from port B of cell key_schedule.$auto$opt_dff.cc:195:make_patterns_logic$242 ($ne).

yosys> peepopt

3.49. Executing PEEPOPT pass (run peephole optimizers).

yosys> opt_clean

3.50. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..

yosys> demuxmap

3.51. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> stat

3.52. Printing statistics.

=== key_schedule ===

   Number of wires:                101
   Number of wire bits:           1464
   Number of public wires:          40
   Number of public wire bits:     704
   Number of memories:               2
   Number of memory bits:         4096
   Number of processes:              0
   Number of cells:                 82
     $add                            2
     $and                            2
     $bmux                           8
     $dff                            4
     $eq                             5
     $memrd_v2                       4
     $memwr_v2                       2
     $mux                           20
     $ne                             7
     $not                            4
     $reduce_and                     8
     $reduce_bool                    1
     $sdffe                         10
     $xor                            5


yosys> wreduce t:$mul

3.53. Executing WREDUCE pass (reducing word size of cells).

yosys> rs_dsp_macc -genesis2 -max_dsp 154

3.54. Executing RS_DSP_MACC pass.

yosys> techmap -map +/mul2dsp_check_maxwidth.v -D DSP_A_MAXWIDTH=20 -D DSP_B_MAXWIDTH=18 -D DSP_A_MINWIDTH=11 -D DSP_B_MINWIDTH=10 -D DSP_NAME=$__RS_MUL20X18 a:valid_map

3.55. Executing TECHMAP pass (map to technology primitives).

3.55.1. Executing Verilog-2005 frontend: /nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/mul2dsp_check_maxwidth.v
Parsing Verilog input from `/nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/mul2dsp_check_maxwidth.v' to AST representation.
Generating RTLIL representation for module `\_80_mul'.
Generating RTLIL representation for module `\_90_soft_mul'.
Successfully finished Verilog frontend.

3.55.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

yosys> stat

3.56. Printing statistics.

=== key_schedule ===

   Number of wires:                101
   Number of wire bits:           1464
   Number of public wires:          40
   Number of public wire bits:     704
   Number of memories:               2
   Number of memory bits:         4096
   Number of processes:              0
   Number of cells:                 82
     $add                            2
     $and                            2
     $bmux                           8
     $dff                            4
     $eq                             5
     $memrd_v2                       4
     $memwr_v2                       2
     $mux                           20
     $ne                             7
     $not                            4
     $reduce_and                     8
     $reduce_bool                    1
     $sdffe                         10
     $xor                            5


yosys> chtype -set $mul t:$__soft_mul

yosys> techmap -map +/rapidsilicon/genesis2/dsp_map.v -D USE_DSP_CFG_PARAMS=0

3.57. Executing TECHMAP pass (map to technology primitives).

3.57.1. Executing Verilog-2005 frontend: /nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/dsp_map.v
Parsing Verilog input from `/nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/dsp_map.v' to AST representation.
Generating RTLIL representation for module `\$__RS_MUL20X18'.
Successfully finished Verilog frontend.

3.57.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

yosys> techmap -map +/rapidsilicon/genesis2/dsp_final_map.v

3.58. Executing TECHMAP pass (map to technology primitives).

3.58.1. Executing Verilog-2005 frontend: /nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/dsp_final_map.v
Parsing Verilog input from `/nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/dsp_final_map.v' to AST representation.
Generating RTLIL representation for module `\dsp_t1_20x18x64_cfg_ports'.
Successfully finished Verilog frontend.

3.58.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

yosys> rs-pack-dsp-regs

3.59. Executing rs_pack_dsp_regs pass.

yosys> rs_dsp_io_regs

3.60. Executing RS_DSP_IO_REGS pass.

yosys> alumacc

3.61. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module key_schedule:
  creating $macc model for $verific$add_19$key_schedule.vhd:74$107 ($add).
  creating $macc model for $verific$add_7$key_schedule.vhd:59$100 ($add).
  creating $alu model for $macc $verific$add_7$key_schedule.vhd:59$100.
  creating $alu model for $macc $verific$add_19$key_schedule.vhd:74$107.
  creating $alu cell for $verific$add_19$key_schedule.vhd:74$107: $auto$alumacc.cc:485:replace_alu$321
  creating $alu cell for $verific$add_7$key_schedule.vhd:59$100: $auto$alumacc.cc:485:replace_alu$324
  created 2 $alu and 0 $macc cells.

yosys> opt_expr

3.62. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.

yosys> opt_merge -nomux

3.63. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.64. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \key_schedule..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~6 debug messages>

yosys> opt_reduce

3.65. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \key_schedule.
Performed a total of 0 changes.

yosys> opt_merge

3.66. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
Removed a total of 0 cells.

yosys> opt_share

3.67. Executing OPT_SHARE pass.

yosys> opt_dff -nodffe

3.68. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.69. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..

yosys> opt_expr

3.70. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.
MAX OPT ITERATION = 1

yosys> stat

3.71. Printing statistics.

=== key_schedule ===

   Number of wires:                105
   Number of wire bits:           1478
   Number of public wires:          40
   Number of public wire bits:     704
   Number of memories:               2
   Number of memory bits:         4096
   Number of processes:              0
   Number of cells:                 82
     $alu                            2
     $and                            2
     $bmux                           8
     $dff                            4
     $eq                             5
     $memrd_v2                       4
     $memwr_v2                       2
     $mux                           20
     $ne                             7
     $not                            4
     $reduce_and                     8
     $reduce_bool                    1
     $sdffe                         10
     $xor                            5


yosys> memory -nomap

3.72. Executing MEMORY pass.

yosys> opt_mem

3.72.1. Executing OPT_MEM pass (optimize memories).
key_schedule.S_BOX_DUAL_1.RAM: removing const-0 lane 0
key_schedule.S_BOX_DUAL_1.RAM: removing const-0 lane 1
key_schedule.S_BOX_DUAL_1.RAM: removing const-0 lane 2
key_schedule.S_BOX_DUAL_1.RAM: removing const-0 lane 3
key_schedule.S_BOX_DUAL_1.RAM: removing const-0 lane 4
key_schedule.S_BOX_DUAL_1.RAM: removing const-0 lane 5
key_schedule.S_BOX_DUAL_1.RAM: removing const-0 lane 6
key_schedule.S_BOX_DUAL_1.RAM: removing const-0 lane 7
key_schedule.S_BOX_DUAL_2.RAM: removing const-0 lane 0
key_schedule.S_BOX_DUAL_2.RAM: removing const-0 lane 1
key_schedule.S_BOX_DUAL_2.RAM: removing const-0 lane 2
key_schedule.S_BOX_DUAL_2.RAM: removing const-0 lane 3
key_schedule.S_BOX_DUAL_2.RAM: removing const-0 lane 4
key_schedule.S_BOX_DUAL_2.RAM: removing const-0 lane 5
key_schedule.S_BOX_DUAL_2.RAM: removing const-0 lane 6
key_schedule.S_BOX_DUAL_2.RAM: removing const-0 lane 7
Performed a total of 2 transformations.

yosys> opt_mem_priority

3.72.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

yosys> opt_mem_feedback

3.72.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

yosys> memory_bmux2rom

3.72.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

yosys> memory_dff

3.72.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).
Checking read port `$auto$memory_bmux2rom.cc:63:execute$348'[0] in module `\key_schedule': no output FF found.
Checking read port `$auto$memory_bmux2rom.cc:63:execute$345'[0] in module `\key_schedule': no output FF found.
Checking read port `$auto$memory_bmux2rom.cc:63:execute$342'[0] in module `\key_schedule': no output FF found.
Checking read port `$auto$memory_bmux2rom.cc:63:execute$339'[0] in module `\key_schedule': no output FF found.
Checking read port `$auto$memory_bmux2rom.cc:63:execute$336'[0] in module `\key_schedule': no output FF found.
Checking read port `$auto$memory_bmux2rom.cc:63:execute$333'[0] in module `\key_schedule': no output FF found.
Checking read port `$auto$memory_bmux2rom.cc:63:execute$330'[0] in module `\key_schedule': no output FF found.
Checking read port `$auto$memory_bmux2rom.cc:63:execute$327'[0] in module `\key_schedule': no output FF found.
Checking read port address `$auto$memory_bmux2rom.cc:63:execute$348'[0] in module `\key_schedule': address FF clock is not compatible with write clock.
Checking read port address `$auto$memory_bmux2rom.cc:63:execute$345'[0] in module `\key_schedule': address FF clock is not compatible with write clock.
Checking read port address `$auto$memory_bmux2rom.cc:63:execute$342'[0] in module `\key_schedule': address FF clock is not compatible with write clock.
Checking read port address `$auto$memory_bmux2rom.cc:63:execute$339'[0] in module `\key_schedule': address FF clock is not compatible with write clock.
Checking read port address `$auto$memory_bmux2rom.cc:63:execute$336'[0] in module `\key_schedule': address FF clock is not compatible with write clock.
Checking read port address `$auto$memory_bmux2rom.cc:63:execute$333'[0] in module `\key_schedule': address FF clock is not compatible with write clock.
Checking read port address `$auto$memory_bmux2rom.cc:63:execute$330'[0] in module `\key_schedule': address FF clock is not compatible with write clock.
Checking read port address `$auto$memory_bmux2rom.cc:63:execute$327'[0] in module `\key_schedule': address FF clock is not compatible with write clock.

yosys> opt_clean

3.72.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..
Removed 4 unused cells and 4 unused wires.
<suppressed ~8 debug messages>

yosys> memory_share

3.72.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

yosys> opt_mem_widen

3.72.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

yosys> opt_clean

3.72.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..

yosys> memory_collect

3.72.10. Executing MEMORY_COLLECT pass (generating $mem cells).

yosys> stat

3.73. Printing statistics.

=== key_schedule ===

   Number of wires:                101
   Number of wire bits:           1446
   Number of public wires:          36
   Number of public wire bits:     672
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 72
     $alu                            2
     $and                            2
     $eq                             5
     $mem_v2                         8
     $mux                           20
     $ne                             7
     $not                            4
     $reduce_and                     8
     $reduce_bool                    1
     $sdffe                         10
     $xor                            5


yosys> muxpack

3.74. Executing MUXPACK pass ($mux cell cascades to $pmux).
Converting key_schedule.$verific$mux_59$key_schedule.vhd:128$144 ... key_schedule.$verific$mux_60$key_schedule.vhd:128$145 to a pmux with 2 cases.
Converting key_schedule.$verific$mux_64$key_schedule.vhd:128$149 ... key_schedule.$verific$mux_66$key_schedule.vhd:128$151 to a pmux with 3 cases.
Converting key_schedule.$verific$mux_71$key_schedule.vhd:128$156 ... key_schedule.$verific$mux_74$key_schedule.vhd:128$159 to a pmux with 4 cases.
Converted 9 (p)mux cells into 3 pmux cells.
<suppressed ~20 debug messages>

yosys> opt_clean

3.75. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..
Removed 0 unused cells and 6 unused wires.
<suppressed ~1 debug messages>

yosys> memory_libmap -lib +/rapidsilicon/genesis2/brams_new_swap.txt -limit 150 a:read_swapped

3.76. Executing MEMORY_LIBMAP pass (mapping memories to cells).

yosys> memory_libmap -lib +/rapidsilicon/genesis2/brams_new.txt -limit 150

3.77. Executing MEMORY_LIBMAP pass (mapping memories to cells).
using FF mapping for memory key_schedule.$auto$memory_bmux2rom.cc:63:execute$327
using FF mapping for memory key_schedule.$auto$memory_bmux2rom.cc:63:execute$330
using FF mapping for memory key_schedule.$auto$memory_bmux2rom.cc:63:execute$333
using FF mapping for memory key_schedule.$auto$memory_bmux2rom.cc:63:execute$336
using FF mapping for memory key_schedule.$auto$memory_bmux2rom.cc:63:execute$339
using FF mapping for memory key_schedule.$auto$memory_bmux2rom.cc:63:execute$342
using FF mapping for memory key_schedule.$auto$memory_bmux2rom.cc:63:execute$345
using FF mapping for memory key_schedule.$auto$memory_bmux2rom.cc:63:execute$348
<suppressed ~48 debug messages>

yosys> rs_bram_split -new_mapping

3.78. Executing Rs_BRAM_Split pass.

yosys> techmap -autoproc -map +/rapidsilicon/genesis2/brams_map_new.v

3.79. Executing TECHMAP pass (map to technology primitives).

3.79.1. Executing Verilog-2005 frontend: /nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/brams_map_new.v
Parsing Verilog input from `/nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/brams_map_new.v' to AST representation.
Generating RTLIL representation for module `\$__RS_FACTOR_BRAM36_TDP'.
Generating RTLIL representation for module `\$__RS_FACTOR_BRAM18_TDP'.
Generating RTLIL representation for module `\$__RS_FACTOR_BRAM18_SDP'.
Generating RTLIL representation for module `\$__RS_FACTOR_BRAM36_SDP'.
Successfully finished Verilog frontend.

3.79.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~6 debug messages>

yosys> techmap -map +/rapidsilicon/genesis2/brams_final_map_new.v

3.80. Executing TECHMAP pass (map to technology primitives).

3.80.1. Executing Verilog-2005 frontend: /nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/brams_final_map_new.v
Parsing Verilog input from `/nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/brams_final_map_new.v' to AST representation.
Generating RTLIL representation for module `\BRAM2x18_TDP'.
Generating RTLIL representation for module `\BRAM2x18_SDP'.
Successfully finished Verilog frontend.

3.80.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

yosys> pmuxtree

3.81. Executing PMUXTREE pass.

yosys> muxpack

3.82. Executing MUXPACK pass ($mux cell cascades to $pmux).
Converted 0 (p)mux cells into 0 pmux cells.
<suppressed ~16 debug messages>

yosys> memory_map

3.83. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).
Mapping memory $auto$memory_bmux2rom.cc:63:execute$327 in module \key_schedule:
  created 8 $dff cells and 0 static cells of width 1.
  read interface: 0 $dff and 7 $mux cells.
  write interface: 0 write mux blocks.
Mapping memory $auto$memory_bmux2rom.cc:63:execute$330 in module \key_schedule:
  created 8 $dff cells and 0 static cells of width 1.
  read interface: 0 $dff and 7 $mux cells.
  write interface: 0 write mux blocks.
Mapping memory $auto$memory_bmux2rom.cc:63:execute$333 in module \key_schedule:
  created 16 $dff cells and 0 static cells of width 1.
  read interface: 0 $dff and 15 $mux cells.
  write interface: 0 write mux blocks.
Mapping memory $auto$memory_bmux2rom.cc:63:execute$336 in module \key_schedule:
  created 16 $dff cells and 0 static cells of width 1.
  read interface: 0 $dff and 15 $mux cells.
  write interface: 0 write mux blocks.
Mapping memory $auto$memory_bmux2rom.cc:63:execute$339 in module \key_schedule:
  created 16 $dff cells and 0 static cells of width 1.
  read interface: 0 $dff and 15 $mux cells.
  write interface: 0 write mux blocks.
Mapping memory $auto$memory_bmux2rom.cc:63:execute$342 in module \key_schedule:
  created 16 $dff cells and 0 static cells of width 1.
  read interface: 0 $dff and 15 $mux cells.
  write interface: 0 write mux blocks.
Mapping memory $auto$memory_bmux2rom.cc:63:execute$345 in module \key_schedule:
  created 16 $dff cells and 0 static cells of width 1.
  read interface: 0 $dff and 15 $mux cells.
  write interface: 0 write mux blocks.
Mapping memory $auto$memory_bmux2rom.cc:63:execute$348 in module \key_schedule:
  created 8 $dff cells and 0 static cells of width 1.
  read interface: 0 $dff and 7 $mux cells.
  write interface: 0 write mux blocks.

yosys> stat

3.84. Printing statistics.

=== key_schedule ===

   Number of wires:                502
   Number of wire bits:           1847
   Number of public wires:          36
   Number of public wire bits:     672
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                262
     $alu                            2
     $and                            2
     $dff                          104
     $eq                             5
     $mux                          113
     $ne                             7
     $not                            4
     $or                             1
     $reduce_and                     8
     $reduce_bool                    1
     $sdffe                         10
     $xor                            5


yosys> techmap -map +/techmap.v -map +/rapidsilicon/genesis2/arith_map.v

3.85. Executing TECHMAP pass (map to technology primitives).

3.85.1. Executing Verilog-2005 frontend: /nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.85.2. Executing Verilog-2005 frontend: /nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/arith_map.v
Parsing Verilog input from `/nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_rs_alu'.
Successfully finished Verilog frontend.

3.85.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $mux.
Using template $paramod$32a7b7b86c07519b7537abc18e96f0331f97914d\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $sdffe.
Using extmapper simplemap for cells of type $and.
Using template $paramod$3ef7d3dd227da7627a99c5e5a6a4deb817573e39\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $reduce_bool.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000100 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000011 for cells of type $lcu.
No more expansions possible.
<suppressed ~792 debug messages>

yosys> stat

3.86. Printing statistics.

=== key_schedule ===

   Number of wires:                625
   Number of wire bits:           4279
   Number of public wires:          36
   Number of public wire bits:     672
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1257
     $_AND_                         42
     $_DFF_P_                      104
     $_MUX_                        590
     $_NOT_                         16
     $_OR_                          44
     $_SDFFE_PP0P_                 263
     $_XOR_                        198


yosys> opt_expr

3.87. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.
<suppressed ~383 debug messages>

yosys> opt_merge -nomux

3.88. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
<suppressed ~84 debug messages>
Removed a total of 28 cells.

yosys> opt_muxtree

3.89. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \key_schedule..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.90. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \key_schedule.
Performed a total of 0 changes.

yosys> opt_merge

3.91. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
Removed a total of 0 cells.

yosys> opt_share

3.92. Executing OPT_SHARE pass.

yosys> opt_dff -nodffe

3.93. Executing OPT_DFF pass (perform DFF optimizations).
Handling const CLK on $auto$ff.cc:262:slice$1482 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$989 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1058 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1447 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1483 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$999 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1037 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1152 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1094 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1093 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1060 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2149 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1127 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1128 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1057 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$998 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1448 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1414 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1191 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2096 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1196 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2043 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2002 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2113 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2097 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2115 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2114 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2044 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2045 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2048 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2049 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2009 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2157 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2158 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2159 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2160 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2161 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2162 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2163 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2164 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2165 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2166 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2167 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2168 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2169 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2170 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2171 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2172 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2188 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2189 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2190 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2191 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2192 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2193 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2194 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2195 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2196 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2197 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2198 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2199 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2200 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2201 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2202 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2203 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2219 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2220 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2221 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2222 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2223 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2224 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2225 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2226 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2227 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2228 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2229 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2230 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2231 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2232 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2233 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2234 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2250 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2251 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2252 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2253 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2254 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2255 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2256 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2257 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2258 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2259 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2260 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2261 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2262 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2263 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2264 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2265 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2281 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2282 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2283 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2284 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2285 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2286 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2287 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2288 ($_DFF_P_) from module key_schedule (removing D path).

yosys> opt_clean

3.94. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..
Removed 6 unused cells and 436 unused wires.
<suppressed ~7 debug messages>

yosys> opt_expr

3.95. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.
<suppressed ~60 debug messages>

yosys> opt_muxtree

3.96. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \key_schedule..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.97. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \key_schedule.
Performed a total of 0 changes.

yosys> opt_merge

3.98. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
<suppressed ~39 debug messages>
Removed a total of 13 cells.

yosys> opt_share

3.99. Executing OPT_SHARE pass.

yosys> opt_dff -nodffe

3.100. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.101. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..
Removed 0 unused cells and 73 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.102. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.

yosys> opt_muxtree

3.103. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \key_schedule..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.104. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \key_schedule.
Performed a total of 0 changes.

yosys> opt_merge

3.105. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
Removed a total of 0 cells.

yosys> opt_share

3.106. Executing OPT_SHARE pass.

yosys> opt_dff -nodffe

3.107. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.108. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..

yosys> opt_expr

3.109. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.
MAX OPT ITERATION = 3

yosys> opt_expr -full

3.110. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.
<suppressed ~307 debug messages>

yosys> techmap -map +/techmap.v

3.111. Executing TECHMAP pass (map to technology primitives).

3.111.1. Executing Verilog-2005 frontend: /nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.111.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~71 debug messages>

yosys> stat

3.112. Printing statistics.

=== key_schedule ===

   Number of wires:                135
   Number of wire bits:           1343
   Number of public wires:          36
   Number of public wire bits:     672
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                587
     $_AND_                         39
     $_MUX_                        139
     $_NOT_                         11
     $_OR_                          26
     $_SDFFE_PP0P_                 263
     $_XOR_                        109


yosys> dfflegalize -cell $_SDFF_???_ 0 -cell $_SDFFE_????_ 0 t:$_SDFFCE_*

3.113. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

yosys> stat

3.114. Printing statistics.

=== key_schedule ===

   Number of wires:                135
   Number of wire bits:           1343
   Number of public wires:          36
   Number of public wire bits:     672
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                587
     $_AND_                         39
     $_MUX_                        139
     $_NOT_                         11
     $_OR_                          26
     $_SDFFE_PP0P_                 263
     $_XOR_                        109


yosys> opt_expr

3.115. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.

yosys> opt_merge -nomux

3.116. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

yosys> opt_muxtree

3.117. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \key_schedule..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.118. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \key_schedule.
Performed a total of 0 changes.

yosys> opt_merge

3.119. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -sat

3.120. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.121. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..
Removed 1 unused cells and 18 unused wires.
<suppressed ~2 debug messages>

yosys> opt_expr

3.122. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.

yosys> opt_muxtree

3.123. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \key_schedule..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.124. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \key_schedule.
Performed a total of 0 changes.

yosys> opt_merge

3.125. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -sat

3.126. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.127. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..

yosys> opt_expr

3.128. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.
MAX OPT ITERATION = 2

yosys> abc -dff -keepff

3.129. Executing ABC pass (technology mapping using ABC).

3.129.1. Summary of detected clock domains:
  68 cells in clk=\clk, en=$auto$opt_dff.cc:219:make_patterns_logic$291, arst={ }, srst=\rst
  67 cells in clk=\clk, en=$auto$opt_dff.cc:219:make_patterns_logic$301, arst={ }, srst=\rst
  67 cells in clk=\clk, en=$auto$opt_dff.cc:219:make_patterns_logic$309, arst={ }, srst=\rst
  44 cells in clk=\clk, en=$auto$opt_dff.cc:219:make_patterns_logic$315, arst={ }, srst=\rst
  74 cells in clk=\clk, en=$auto$opt_dff.cc:219:make_patterns_logic$249, arst={ }, srst=\rst
  71 cells in clk=\clk, en=$auto$opt_dff.cc:219:make_patterns_logic$261, arst={ }, srst=\rst
  71 cells in clk=\clk, en=$auto$opt_dff.cc:219:make_patterns_logic$271, arst={ }, srst=\rst
  67 cells in clk=\clk, en=$auto$opt_dff.cc:219:make_patterns_logic$279, arst={ }, srst=\rst
  35 cells in clk=\clk, en=$verific$n133$5, arst={ }, srst=\rst
  20 cells in clk=\clk, en=\start, arst={ }, srst=\rst

3.129.2. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:219:make_patterns_logic$291, synchronously reset by \rst
Extracted 68 gates and 137 wires to a netlist network with 69 inputs and 65 outputs.

3.129.2.1. Executing ABC.

3.129.3. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:219:make_patterns_logic$301, synchronously reset by \rst
Extracted 67 gates and 135 wires to a netlist network with 68 inputs and 65 outputs.

3.129.3.1. Executing ABC.

3.129.4. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:219:make_patterns_logic$309, synchronously reset by \rst
Extracted 67 gates and 134 wires to a netlist network with 67 inputs and 66 outputs.

3.129.4.1. Executing ABC.

3.129.5. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:219:make_patterns_logic$315, synchronously reset by \rst
Extracted 44 gates and 87 wires to a netlist network with 43 inputs and 43 outputs.

3.129.5.1. Executing ABC.

3.129.6. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:219:make_patterns_logic$249, synchronously reset by \rst
Extracted 74 gates and 150 wires to a netlist network with 76 inputs and 34 outputs.

3.129.6.1. Executing ABC.

3.129.7. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:219:make_patterns_logic$261, synchronously reset by \rst
Extracted 71 gates and 143 wires to a netlist network with 72 inputs and 35 outputs.

3.129.7.1. Executing ABC.

3.129.8. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:219:make_patterns_logic$271, synchronously reset by \rst
Extracted 71 gates and 141 wires to a netlist network with 70 inputs and 36 outputs.

3.129.8.1. Executing ABC.

3.129.9. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:219:make_patterns_logic$279, synchronously reset by \rst
Extracted 67 gates and 111 wires to a netlist network with 44 inputs and 34 outputs.

3.129.9.1. Executing ABC.

3.129.10. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $verific$n133$5, synchronously reset by \rst
Extracted 35 gates and 39 wires to a netlist network with 2 inputs and 14 outputs.

3.129.10.1. Executing ABC.

3.129.11. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by \start, synchronously reset by \rst
Extracted 20 gates and 20 wires to a netlist network with 0 inputs and 7 outputs.

3.129.11.1. Executing ABC.

yosys> abc -dff -keepff

3.130. Executing ABC pass (technology mapping using ABC).

3.130.1. Summary of detected clock domains:
  102 cells in clk=\clk, en=$abc$3013$auto$opt_dff.cc:219:make_patterns_logic$271, arst={ }, srst=\rst
  131 cells in clk=\clk, en=$abc$3084$auto$opt_dff.cc:219:make_patterns_logic$279, arst={ }, srst=\rst
  26 cells in clk=\clk, en=$abc$3152$verific$n133$5, arst={ }, srst=\rst
  39 cells in clk=\clk, en=$abc$2489$auto$opt_dff.cc:219:make_patterns_logic$291, arst={ }, srst=\rst
  36 cells in clk=\clk, en=$abc$2590$auto$opt_dff.cc:219:make_patterns_logic$301, arst={ }, srst=\rst
  35 cells in clk=\clk, en=$abc$2690$auto$opt_dff.cc:219:make_patterns_logic$309, arst={ }, srst=\rst
  35 cells in clk=\clk, en=$abc$2790$auto$opt_dff.cc:219:make_patterns_logic$315, arst={ }, srst=\rst
  77 cells in clk=\clk, en=$abc$2866$auto$opt_dff.cc:219:make_patterns_logic$249, arst={ }, srst=\rst
  180 cells in clk=\clk, en=$abc$2941$auto$opt_dff.cc:219:make_patterns_logic$261, arst={ }, srst=\rst
  10 cells in clk=\clk, en=\start, arst={ }, srst=\rst

3.130.2. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$3013$auto$opt_dff.cc:219:make_patterns_logic$271, synchronously reset by \rst
Extracted 102 gates and 179 wires to a netlist network with 77 inputs and 58 outputs.

3.130.2.1. Executing ABC.

3.130.3. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$3084$auto$opt_dff.cc:219:make_patterns_logic$279, synchronously reset by \rst
Extracted 131 gates and 198 wires to a netlist network with 67 inputs and 87 outputs.

3.130.3.1. Executing ABC.

3.130.4. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$3152$verific$n133$5, synchronously reset by \rst
Extracted 26 gates and 28 wires to a netlist network with 2 inputs and 15 outputs.

3.130.4.1. Executing ABC.

3.130.5. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$2489$auto$opt_dff.cc:219:make_patterns_logic$291, synchronously reset by \rst
Extracted 39 gates and 79 wires to a netlist network with 40 inputs and 33 outputs.

3.130.5.1. Executing ABC.

3.130.6. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$2590$auto$opt_dff.cc:219:make_patterns_logic$301, synchronously reset by \rst
Extracted 36 gates and 72 wires to a netlist network with 36 inputs and 34 outputs.

3.130.6.1. Executing ABC.

3.130.7. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$2690$auto$opt_dff.cc:219:make_patterns_logic$309, synchronously reset by \rst
Extracted 35 gates and 70 wires to a netlist network with 35 inputs and 34 outputs.

3.130.7.1. Executing ABC.

3.130.8. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$2790$auto$opt_dff.cc:219:make_patterns_logic$315, synchronously reset by \rst
Extracted 35 gates and 70 wires to a netlist network with 35 inputs and 35 outputs.

3.130.8.1. Executing ABC.

3.130.9. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$2866$auto$opt_dff.cc:219:make_patterns_logic$249, synchronously reset by \rst
Extracted 77 gates and 152 wires to a netlist network with 75 inputs and 34 outputs.

3.130.9.1. Executing ABC.

3.130.10. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$2941$auto$opt_dff.cc:219:make_patterns_logic$261, synchronously reset by \rst
Extracted 180 gates and 281 wires to a netlist network with 101 inputs and 118 outputs.

3.130.10.1. Executing ABC.

3.130.11. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by \start, synchronously reset by \rst
Extracted 10 gates and 10 wires to a netlist network with 0 inputs and 7 outputs.

3.130.11.1. Executing ABC.

yosys> abc -dff -keepff

3.131. Executing ABC pass (technology mapping using ABC).

3.131.1. Summary of detected clock domains:
  140 cells in clk=\clk, en=$abc$3712$abc$2866$auto$opt_dff.cc:219:make_patterns_logic$249, arst={ }, srst=\rst
  46 cells in clk=\clk, en=$abc$3644$abc$2790$auto$opt_dff.cc:219:make_patterns_logic$315, arst={ }, srst=\rst
  152 cells in clk=\clk, en=$abc$3194$abc$3013$auto$opt_dff.cc:219:make_patterns_logic$271, arst={ }, srst=\rst
  69 cells in clk=\clk, en=$abc$3287$abc$3084$auto$opt_dff.cc:219:make_patterns_logic$279, arst={ }, srst=\rst
  26 cells in clk=\clk, en=$abc$3411$abc$3152$verific$n133$5, arst={ }, srst=\rst
  37 cells in clk=\clk, en=$abc$3438$abc$2489$auto$opt_dff.cc:219:make_patterns_logic$291, arst={ }, srst=\rst
  35 cells in clk=\clk, en=$abc$3507$abc$2590$auto$opt_dff.cc:219:make_patterns_logic$301, arst={ }, srst=\rst
  42 cells in clk=\clk, en=$abc$3576$abc$2690$auto$opt_dff.cc:219:make_patterns_logic$309, arst={ }, srst=\rst
  70 cells in clk=\clk, en=$abc$3790$abc$2941$auto$opt_dff.cc:219:make_patterns_logic$261, arst={ }, srst=\rst
  10 cells in clk=\clk, en=\start, arst={ }, srst=\rst

3.131.2. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$3712$abc$2866$auto$opt_dff.cc:219:make_patterns_logic$249, synchronously reset by \rst
Extracted 140 gates and 214 wires to a netlist network with 74 inputs and 67 outputs.

3.131.2.1. Executing ABC.

3.131.3. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$3644$abc$2790$auto$opt_dff.cc:219:make_patterns_logic$315, synchronously reset by \rst
Extracted 46 gates and 91 wires to a netlist network with 45 inputs and 43 outputs.

3.131.3.1. Executing ABC.

3.131.4. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$3194$abc$3013$auto$opt_dff.cc:219:make_patterns_logic$271, synchronously reset by \rst
Extracted 152 gates and 254 wires to a netlist network with 102 inputs and 97 outputs.

3.131.4.1. Executing ABC.

3.131.5. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$3287$abc$3084$auto$opt_dff.cc:219:make_patterns_logic$279, synchronously reset by \rst
Extracted 69 gates and 114 wires to a netlist network with 45 inputs and 36 outputs.

3.131.5.1. Executing ABC.

3.131.6. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$3411$abc$3152$verific$n133$5, synchronously reset by \rst
Extracted 26 gates and 28 wires to a netlist network with 2 inputs and 15 outputs.

3.131.6.1. Executing ABC.

3.131.7. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$3438$abc$2489$auto$opt_dff.cc:219:make_patterns_logic$291, synchronously reset by \rst
Extracted 37 gates and 74 wires to a netlist network with 37 inputs and 33 outputs.

3.131.7.1. Executing ABC.

3.131.8. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$3507$abc$2590$auto$opt_dff.cc:219:make_patterns_logic$301, synchronously reset by \rst
Extracted 35 gates and 71 wires to a netlist network with 36 inputs and 33 outputs.

3.131.8.1. Executing ABC.

3.131.9. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$3576$abc$2690$auto$opt_dff.cc:219:make_patterns_logic$309, synchronously reset by \rst
Extracted 42 gates and 85 wires to a netlist network with 43 inputs and 37 outputs.

3.131.9.1. Executing ABC.

3.131.10. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$3790$abc$2941$auto$opt_dff.cc:219:make_patterns_logic$261, synchronously reset by \rst
Extracted 70 gates and 142 wires to a netlist network with 72 inputs and 34 outputs.

3.131.10.1. Executing ABC.

3.131.11. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by \start, synchronously reset by \rst
Extracted 10 gates and 10 wires to a netlist network with 0 inputs and 7 outputs.

3.131.11.1. Executing ABC.

yosys> abc -dff -keepff

3.132. Executing ABC pass (technology mapping using ABC).

3.132.1. Summary of detected clock domains:
  101 cells in clk=\clk, en=$abc$3956$abc$3712$abc$2866$auto$opt_dff.cc:219:make_patterns_logic$249, arst={ }, srst=\rst
  62 cells in clk=\clk, en=$abc$4513$abc$3576$abc$2690$auto$opt_dff.cc:219:make_patterns_logic$309, arst={ }, srst=\rst
  43 cells in clk=\clk, en=$abc$4064$abc$3644$abc$2790$auto$opt_dff.cc:219:make_patterns_logic$315, arst={ }, srst=\rst
  93 cells in clk=\clk, en=$abc$4143$abc$3194$abc$3013$auto$opt_dff.cc:219:make_patterns_logic$271, arst={ }, srst=\rst
  77 cells in clk=\clk, en=$abc$4279$abc$3287$abc$3084$auto$opt_dff.cc:219:make_patterns_logic$279, arst={ }, srst=\rst
  26 cells in clk=\clk, en=$abc$4349$abc$3411$abc$3152$verific$n133$5, arst={ }, srst=\rst
  36 cells in clk=\clk, en=$abc$4376$abc$3438$abc$2489$auto$opt_dff.cc:219:make_patterns_logic$291, arst={ }, srst=\rst
  58 cells in clk=\clk, en=$abc$4445$abc$3507$abc$2590$auto$opt_dff.cc:219:make_patterns_logic$301, arst={ }, srst=\rst
  82 cells in clk=\clk, en=$abc$4584$abc$3790$abc$2941$auto$opt_dff.cc:219:make_patterns_logic$261, arst={ }, srst=\rst
  10 cells in clk=\clk, en=\start, arst={ }, srst=\rst

3.132.2. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$3956$abc$3712$abc$2866$auto$opt_dff.cc:219:make_patterns_logic$249, synchronously reset by \rst
Extracted 101 gates and 176 wires to a netlist network with 75 inputs and 60 outputs.

3.132.2.1. Executing ABC.

3.132.3. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$4513$abc$3576$abc$2690$auto$opt_dff.cc:219:make_patterns_logic$309, synchronously reset by \rst
Extracted 62 gates and 125 wires to a netlist network with 63 inputs and 52 outputs.

3.132.3.1. Executing ABC.

3.132.4. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$4064$abc$3644$abc$2790$auto$opt_dff.cc:219:make_patterns_logic$315, synchronously reset by \rst
Extracted 43 gates and 86 wires to a netlist network with 43 inputs and 35 outputs.

3.132.4.1. Executing ABC.

3.132.5. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$4143$abc$3194$abc$3013$auto$opt_dff.cc:219:make_patterns_logic$271, synchronously reset by \rst
Extracted 93 gates and 171 wires to a netlist network with 78 inputs and 50 outputs.

3.132.5.1. Executing ABC.

3.132.6. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$4279$abc$3287$abc$3084$auto$opt_dff.cc:219:make_patterns_logic$279, synchronously reset by \rst
Extracted 77 gates and 122 wires to a netlist network with 45 inputs and 36 outputs.

3.132.6.1. Executing ABC.

3.132.7. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$4349$abc$3411$abc$3152$verific$n133$5, synchronously reset by \rst
Extracted 26 gates and 28 wires to a netlist network with 2 inputs and 15 outputs.

3.132.7.1. Executing ABC.

3.132.8. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$4376$abc$3438$abc$2489$auto$opt_dff.cc:219:make_patterns_logic$291, synchronously reset by \rst
Extracted 36 gates and 73 wires to a netlist network with 37 inputs and 33 outputs.

3.132.8.1. Executing ABC.

3.132.9. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$4445$abc$3507$abc$2590$auto$opt_dff.cc:219:make_patterns_logic$301, synchronously reset by \rst
Extracted 58 gates and 117 wires to a netlist network with 59 inputs and 52 outputs.

3.132.9.1. Executing ABC.

3.132.10. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$4584$abc$3790$abc$2941$auto$opt_dff.cc:219:make_patterns_logic$261, synchronously reset by \rst
Extracted 82 gates and 160 wires to a netlist network with 78 inputs and 46 outputs.

3.132.10.1. Executing ABC.

3.132.11. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by \start, synchronously reset by \rst
Extracted 10 gates and 10 wires to a netlist network with 0 inputs and 7 outputs.

3.132.11.1. Executing ABC.

yosys> opt_ffinv

3.133. Executing OPT_FFINV pass (push inverters through FFs).
Discovering LUTs.
Pushed 0 inverters.

yosys> opt_expr

3.134. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.

yosys> opt_merge -nomux

3.135. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
<suppressed ~192 debug messages>
Removed a total of 64 cells.

yosys> opt_muxtree

3.136. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \key_schedule..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.137. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \key_schedule.
Performed a total of 0 changes.

yosys> opt_merge

3.138. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
Removed a total of 0 cells.

yosys> opt_share

3.139. Executing OPT_SHARE pass.

yosys> opt_dff -sat

3.140. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $abc$5015$auto$blifparse.cc:362:parse_blif$5021 ($_SDFFE_PP0P_) from module key_schedule (D = $abc$5015$key_in[29], Q = $abc$5015$abc$4279$abc$3287$abc$3084$gen_sub_keys.w_0_i_tmp_old[29]).
Adding EN signal on $abc$5015$auto$blifparse.cc:362:parse_blif$5026 ($_SDFFE_PP0P_) from module key_schedule (D = $abc$5015$key_in[22], Q = $abc$5015$abc$4279$abc$3287$abc$3084$gen_sub_keys.w_0_i_tmp_old[22]).
Adding EN signal on $abc$5015$auto$blifparse.cc:362:parse_blif$5035 ($_SDFFE_PP0P_) from module key_schedule (D = $abc$5015$key_in[11], Q = $abc$5015$abc$4279$abc$3287$abc$3084$gen_sub_keys.w_0_i_tmp_old[11]).
Adding EN signal on $abc$5015$auto$blifparse.cc:362:parse_blif$5041 ($_SDFFE_PP0P_) from module key_schedule (D = $abc$5015$key_in[27], Q = $abc$5015$abc$4279$abc$3287$abc$3084$gen_sub_keys.w_0_i_tmp_old[27]).
Adding EN signal on $abc$5015$auto$blifparse.cc:362:parse_blif$5027 ($_SDFFE_PP0P_) from module key_schedule (D = $abc$5015$key_in[14], Q = $abc$5015$abc$4279$abc$3287$abc$3084$gen_sub_keys.w_0_i_tmp_old[14]).
Adding EN signal on $abc$5015$auto$blifparse.cc:362:parse_blif$5028 ($_SDFFE_PP0P_) from module key_schedule (D = $abc$5015$key_in[18], Q = $abc$5015$abc$4279$abc$3287$abc$3084$gen_sub_keys.w_0_i_tmp_old[18]).
Adding EN signal on $abc$5015$auto$blifparse.cc:362:parse_blif$5029 ($_SDFFE_PP0P_) from module key_schedule (D = $abc$5015$key_in[24], Q = $abc$5015$abc$4279$abc$3287$abc$3084$gen_sub_keys.w_0_i_tmp_old[24]).
Adding EN signal on $abc$5015$auto$blifparse.cc:362:parse_blif$5030 ($_SDFFE_PP0P_) from module key_schedule (D = $abc$5015$key_in[8], Q = $abc$5015$abc$4279$abc$3287$abc$3084$gen_sub_keys.w_0_i_tmp_old[8]).
Adding EN signal on $abc$5015$auto$blifparse.cc:362:parse_blif$5031 ($_SDFFE_PP0P_) from module key_schedule (D = $abc$5015$key_in[30], Q = $abc$5015$abc$4279$abc$3287$abc$3084$gen_sub_keys.w_0_i_tmp_old[30]).
Adding EN signal on $abc$5015$auto$blifparse.cc:362:parse_blif$5022 ($_SDFFE_PP0P_) from module key_schedule (D = $abc$5015$key_in[16], Q = $abc$5015$abc$4279$abc$3287$abc$3084$gen_sub_keys.w_0_i_tmp_old[16]).
Adding EN signal on $abc$5015$auto$blifparse.cc:362:parse_blif$5032 ($_SDFFE_PP0P_) from module key_schedule (D = $abc$5015$key_in[10], Q = $abc$5015$abc$4279$abc$3287$abc$3084$gen_sub_keys.w_0_i_tmp_old[10]).
Adding EN signal on $abc$5015$auto$blifparse.cc:362:parse_blif$5023 ($_SDFFE_PP0P_) from module key_schedule (D = $abc$5015$key_in[15], Q = $abc$5015$abc$4279$abc$3287$abc$3084$gen_sub_keys.w_0_i_tmp_old[15]).
Adding EN signal on $abc$5015$auto$blifparse.cc:362:parse_blif$5025 ($_SDFFE_PP0P_) from module key_schedule (D = $abc$5015$key_in[25], Q = $abc$5015$abc$4279$abc$3287$abc$3084$gen_sub_keys.w_0_i_tmp_old[25]).
Adding EN signal on $abc$5015$auto$blifparse.cc:362:parse_blif$5038 ($_SDFFE_PP0P_) from module key_schedule (D = $abc$5015$key_in[19], Q = $abc$5015$abc$4279$abc$3287$abc$3084$gen_sub_keys.w_0_i_tmp_old[19]).
Adding EN signal on $abc$5015$auto$blifparse.cc:362:parse_blif$5039 ($_SDFFE_PP0P_) from module key_schedule (D = $abc$5015$key_in[28], Q = $abc$5015$abc$4279$abc$3287$abc$3084$gen_sub_keys.w_0_i_tmp_old[28]).
Adding EN signal on $abc$5015$auto$blifparse.cc:362:parse_blif$5020 ($_SDFFE_PP0P_) from module key_schedule (D = $abc$5015$key_in[23], Q = $abc$5015$abc$4279$abc$3287$abc$3084$gen_sub_keys.w_0_i_tmp_old[23]).
Adding EN signal on $abc$5015$auto$blifparse.cc:362:parse_blif$5018 ($_SDFFE_PP0P_) from module key_schedule (D = $abc$5015$key_in[26], Q = $abc$5015$abc$4279$abc$3287$abc$3084$gen_sub_keys.w_0_i_tmp_old[26]).
Adding EN signal on $abc$5015$auto$blifparse.cc:362:parse_blif$5017 ($_SDFFE_PP0P_) from module key_schedule (D = $abc$5015$key_in[17], Q = $abc$5015$abc$4279$abc$3287$abc$3084$gen_sub_keys.w_0_i_tmp_old[17]).
Adding EN signal on $abc$5015$auto$blifparse.cc:362:parse_blif$5016 ($_SDFFE_PP0P_) from module key_schedule (D = $abc$5015$key_in[9], Q = $abc$5015$abc$4279$abc$3287$abc$3084$gen_sub_keys.w_0_i_tmp_old[9]).
Adding EN signal on $abc$5015$auto$blifparse.cc:362:parse_blif$5046 ($_SDFFE_PP0P_) from module key_schedule (D = $abc$5015$key_in[13], Q = $abc$5015$abc$4279$abc$3287$abc$3084$gen_sub_keys.w_0_i_tmp_old[13]).
Adding EN signal on $abc$5015$auto$blifparse.cc:362:parse_blif$5045 ($_SDFFE_PP0P_) from module key_schedule (D = $abc$5015$key_in[31], Q = $abc$5015$abc$4279$abc$3287$abc$3084$gen_sub_keys.w_0_i_tmp_old[31]).
Adding EN signal on $abc$5015$auto$blifparse.cc:362:parse_blif$5044 ($_SDFFE_PP0P_) from module key_schedule (D = $abc$5015$key_in[12], Q = $abc$5015$abc$4279$abc$3287$abc$3084$gen_sub_keys.w_0_i_tmp_old[12]).
Adding EN signal on $abc$5015$auto$blifparse.cc:362:parse_blif$5043 ($_SDFFE_PP0P_) from module key_schedule (D = $abc$5015$key_in[20], Q = $abc$5015$abc$4279$abc$3287$abc$3084$gen_sub_keys.w_0_i_tmp_old[20]).
Adding EN signal on $abc$5015$auto$blifparse.cc:362:parse_blif$5042 ($_SDFFE_PP0P_) from module key_schedule (D = $abc$5015$key_in[21], Q = $abc$5015$abc$4279$abc$3287$abc$3084$gen_sub_keys.w_0_i_tmp_old[21]).

yosys> opt_clean

3.141. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..
Removed 24 unused cells and 3803 unused wires.
<suppressed ~25 debug messages>

yosys> opt_expr

3.142. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.
MAX OPT ITERATION = 1

yosys> bmuxmap

3.143. Executing BMUXMAP pass.

yosys> demuxmap

3.144. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> abc -script /tmp/yosys_BeLgrm/abc_tmp_1.scr

3.145. Executing ABC pass (technology mapping using ABC).

3.145.1. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Extracted 298 gates and 539 wires to a netlist network with 241 inputs and 249 outputs.

3.145.1.1. Executing ABC.
DE:   #PIs = 241  #Luts =   249  Max Lvl =   2  Avg Lvl =   1.02  [   0.08 sec. at Pass 0]{firstMap}[1]
DE:   #PIs = 241  #Luts =   249  Max Lvl =   2  Avg Lvl =   1.02  [   0.29 sec. at Pass 1]{initMapFlow}[2]
DE:   #PIs = 241  #Luts =   249  Max Lvl =   2  Avg Lvl =   1.02  [   0.13 sec. at Pass 2]{map}[2]
DE:   #PIs = 241  #Luts =   249  Max Lvl =   2  Avg Lvl =   1.02  [   0.20 sec. at Pass 3]{postMap}[6]
DE:   #PIs = 241  #Luts =   249  Max Lvl =   2  Avg Lvl =   1.02  [   0.36 sec. at Pass 4]{map}[12]
DE:   #PIs = 241  #Luts =   249  Max Lvl =   2  Avg Lvl =   1.02  [   0.55 sec. at Pass 5]{postMap}[16]
DE:   #PIs = 241  #Luts =   249  Max Lvl =   2  Avg Lvl =   1.02  [   0.29 sec. at Pass 6]{pushMap}[16]
DE:   #PIs = 241  #Luts =   249  Max Lvl =   2  Avg Lvl =   1.02  [   0.20 sec. at Pass 7]{finalMap}[16]

yosys> opt_expr

3.146. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.

yosys> opt_merge -nomux

3.147. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.148. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \key_schedule..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.149. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \key_schedule.
Performed a total of 0 changes.

yosys> opt_merge

3.150. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
Removed a total of 0 cells.

yosys> opt_share

3.151. Executing OPT_SHARE pass.

yosys> opt_dff -nodffe

3.152. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.153. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..
Removed 0 unused cells and 562 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.154. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.
MAX OPT ITERATION = 1

yosys> opt_ffinv

3.155. Executing OPT_FFINV pass (push inverters through FFs).
Discovering LUTs.
Pushed 0 inverters.

yosys> stat

3.156. Printing statistics.

=== key_schedule ===

   Number of wires:               1050
   Number of wire bits:           1686
   Number of public wires:          36
   Number of public wire bits:     672
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                489
     $_SDFFE_PP0P_                 263
     $lut                          226


yosys> dfflegalize -cell $_DFF_?_ 0 -cell $_DFFE_??_ 0 -cell $_DFF_???_ 0 -cell $_DFFE_????_ 0 -cell $_SDFF_???_ 0 -cell $_SDFFE_????_ 0 -cell $_DLATCH_?_ 0 -cell $_DLATCH_???_ 0

3.157. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

yosys> stat

3.158. Printing statistics.

=== key_schedule ===

   Number of wires:               1050
   Number of wire bits:           1686
   Number of public wires:          36
   Number of public wire bits:     672
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                489
     $_SDFFE_PP0P_                 263
     $lut                          226


yosys> techmap -map +/techmap.v -map +/rapidsilicon/genesis2/ffs_map.v

3.159. Executing TECHMAP pass (map to technology primitives).

3.159.1. Executing Verilog-2005 frontend: /nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.159.2. Executing Verilog-2005 frontend: /nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/ffs_map.v
Parsing Verilog input from `/nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/ffs_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP0N_'.
Generating RTLIL representation for module `\$_DFFE_PN0P_'.
Generating RTLIL representation for module `\$_DFFE_PN0N_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP1N_'.
Generating RTLIL representation for module `\$_DFFE_PN1P_'.
Generating RTLIL representation for module `\$_DFFE_PN1N_'.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP0N_'.
Generating RTLIL representation for module `\$_DFFE_NN0P_'.
Generating RTLIL representation for module `\$_DFFE_NN0N_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_NP1N_'.
Generating RTLIL representation for module `\$_DFFE_NN1P_'.
Generating RTLIL representation for module `\$_DFFE_NN1N_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PN0_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NN0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFF_PN1_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_NN1_'.
Generating RTLIL representation for module `\$_SDFFE_PP0P_'.
Generating RTLIL representation for module `\$_SDFFE_PP0N_'.
Generating RTLIL representation for module `\$_SDFFE_PN0P_'.
Generating RTLIL representation for module `\$_SDFFE_PN0N_'.
Generating RTLIL representation for module `\$_SDFFE_PP1P_'.
Generating RTLIL representation for module `\$_SDFFE_PP1N_'.
Generating RTLIL representation for module `\$_SDFFE_PN1P_'.
Generating RTLIL representation for module `\$_SDFFE_PN1N_'.
Generating RTLIL representation for module `\$_SDFFE_NP0P_'.
Generating RTLIL representation for module `\$_SDFFE_NP0N_'.
Generating RTLIL representation for module `\$_SDFFE_NN0P_'.
Generating RTLIL representation for module `\$_SDFFE_NN0N_'.
Generating RTLIL representation for module `\$_SDFFE_NP1P_'.
Generating RTLIL representation for module `\$_SDFFE_NP1N_'.
Generating RTLIL representation for module `\$_SDFFE_NN1P_'.
Generating RTLIL representation for module `\$_SDFFE_NN1N_'.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCH_PP0_'.
Generating RTLIL representation for module `\$_DLATCH_NP0_'.
Generating RTLIL representation for module `\$_DLATCH_PN0_'.
Generating RTLIL representation for module `\$_DLATCH_NN0_'.
Generating RTLIL representation for module `\$_DLATCH_PP1_'.
Generating RTLIL representation for module `\$_DLATCH_NP1_'.
Generating RTLIL representation for module `\$_DLATCH_PN1_'.
Generating RTLIL representation for module `\$_DLATCH_NN1_'.
Successfully finished Verilog frontend.

3.159.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $lut.
Using template \$_SDFFE_PP0P_ for cells of type $_SDFFE_PP0P_.
No more expansions possible.
<suppressed ~624 debug messages>

yosys> opt_expr -mux_undef

3.160. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.
<suppressed ~1741 debug messages>

yosys> simplemap

3.161. Executing SIMPLEMAP pass (map simple cells to gate primitives).

yosys> opt_expr

3.162. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.

yosys> opt_merge

3.163. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
<suppressed ~810 debug messages>
Removed a total of 270 cells.

yosys> opt_dff -nodffe -nosdff

3.164. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.165. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..
Removed 0 unused cells and 1909 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.166. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.
<suppressed ~2 debug messages>

yosys> opt_merge -nomux

3.167. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.168. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \key_schedule..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.169. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \key_schedule.
Performed a total of 0 changes.

yosys> opt_merge

3.170. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
Removed a total of 0 cells.

yosys> opt_share

3.171. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.172. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.173. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..

yosys> opt_expr

3.174. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.
MAX OPT ITERATION = 1

yosys> abc -script /tmp/yosys_BeLgrm/abc_tmp_2.scr

3.175. Executing ABC pass (technology mapping using ABC).

3.175.1. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Extracted 355 gates and 598 wires to a netlist network with 241 inputs and 225 outputs.

3.175.1.1. Executing ABC.
DE:   #PIs = 241  #Luts =   225  Max Lvl =   2  Avg Lvl =   1.02  [   1.19 sec. at Pass 0]{firstMap}[1]
DE:   #PIs = 241  #Luts =   225  Max Lvl =   2  Avg Lvl =   1.02  [   0.31 sec. at Pass 1]{initMapFlow}[2]
DE:   #PIs = 241  #Luts =   225  Max Lvl =   2  Avg Lvl =   1.02  [   0.18 sec. at Pass 2]{map}[2]
DE:   #PIs = 241  #Luts =   225  Max Lvl =   2  Avg Lvl =   1.02  [   0.23 sec. at Pass 3]{postMap}[6]
DE:   #PIs = 241  #Luts =   225  Max Lvl =   2  Avg Lvl =   1.02  [   0.20 sec. at Pass 4]{map}[12]
DE:   #PIs = 241  #Luts =   225  Max Lvl =   2  Avg Lvl =   1.02  [   0.49 sec. at Pass 5]{postMap}[16]
DE:   #PIs = 241  #Luts =   225  Max Lvl =   2  Avg Lvl =   1.02  [   1.16 sec. at Pass 6]{pushMap}[16]
DE:   #PIs = 241  #Luts =   225  Max Lvl =   2  Avg Lvl =   1.02  [   0.35 sec. at Pass 7]{finalMap}[16]

yosys> opt_expr

3.176. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.

yosys> opt_merge -nomux

3.177. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.178. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \key_schedule..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.179. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \key_schedule.
Performed a total of 0 changes.

yosys> opt_merge

3.180. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
Removed a total of 0 cells.

yosys> opt_share

3.181. Executing OPT_SHARE pass.

yosys> opt_dff -nodffe

3.182. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.183. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..
Removed 0 unused cells and 579 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.184. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.
MAX OPT ITERATION = 1

yosys> hierarchy -check

3.185. Executing HIERARCHY pass (managing design hierarchy).

3.185.1. Analyzing design hierarchy..
Top module:  \key_schedule

3.185.2. Analyzing design hierarchy..
Top module:  \key_schedule
Removed 0 unused modules.

yosys> stat

3.186. Printing statistics.

=== key_schedule ===

   Number of wires:               1049
   Number of wire bits:           1685
   Number of public wires:          36
   Number of public wire bits:     672
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                488
     $lut                          225
     sdffre                        263


yosys> opt_clean -purge

3.187. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..
Removed 0 unused cells and 15 unused wires.
<suppressed ~15 debug messages>

yosys> write_verilog -noattr -nohex synthesized.v

3.188. Executing Verilog backend.
Dumping module `\key_schedule'.

End of script. Logfile hash: ba650d1095, CPU: user 2.78s system 0.13s, MEM: 33.94 MB peak
Yosys 0.18+10 (git sha1 92b23013e, gcc 11.2.0 -fPIC -Os)
Time spent: 91% 6x abc (26 sec), 2% 17x opt_dff (0 sec), ...
real 32.68
user 18.28
sys 11.13
