
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys-Verific 0.0.64
 Yosys 0.18+10 (git sha1 c98b0e94e, gcc 9.4.0 -fPIC -Os)


-- Executing script file `yosys.ys' --
echo on

yosys> plugin -i synth-rs

yosys> read -verific

yosys> read -incdir .

yosys> verific -vlog-incdir .

1. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific May22_SW_Release, released at Wed Jun  1 00:39:28 2022.

yosys> verilog_defaults -add -I.

yosys> read -vhdl dual_mem.vhd tb_key_schedule.vhd key_schedule.vhd

yosys> verific -vhdl dual_mem.vhd tb_key_schedule.vhd key_schedule.vhd

2. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific May22_SW_Release, released at Wed Jun  1 00:39:28 2022.
VERIFIC-INFO [VHDL-1504] default VHDL library search path is now "/nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008"
VERIFIC-COMMENT [VHDL-1481] Analyzing VHDL file 'dual_mem.vhd'
VERIFIC-COMMENT [VHDL-1493] Restoring VHDL unit 'ieee.std_logic_1164' from file '/nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008/ieee/std_logic_1164.vdb'
VERIFIC-COMMENT [VHDL-1493] Restoring VHDL unit 'std.standard' from file '/nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008/std/standard.vdb'
VERIFIC-COMMENT [VHDL-1493] Restoring VHDL unit 'std.textio' from file '/nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008/std/textio.vdb'
VERIFIC-COMMENT [VHDL-1493] Restoring VHDL unit 'ieee.std_logic_unsigned' from file '/nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008/ieee/std_logic_unsigned.vdb'
VERIFIC-COMMENT [VHDL-1493] Restoring VHDL unit 'ieee.std_logic_arith' from file '/nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008/ieee/std_logic_arith.vdb'
VERIFIC-INFO [VHDL-1012] dual_mem.vhd:20: analyzing entity 'dual_mem'
VERIFIC-INFO [VHDL-1010] dual_mem.vhd:33: analyzing architecture 'rtl'
VERIFIC-COMMENT [VHDL-1481] Analyzing VHDL file 'tb_key_schedule.vhd'
VERIFIC-INFO [VHDL-1012] tb_key_schedule.vhd:20: analyzing entity 'tb_key_schedule'
VERIFIC-INFO [VHDL-1010] tb_key_schedule.vhd:23: analyzing architecture 'behavior'
VERIFIC-COMMENT [VHDL-1481] Analyzing VHDL file 'key_schedule.vhd'
VERIFIC-INFO [VHDL-1012] key_schedule.vhd:22: analyzing entity 'key_schedule'
VERIFIC-INFO [VHDL-1010] key_schedule.vhd:35: analyzing architecture 'behavioral'

yosys> synth_rs -top key_schedule -tech genesis -goal area -de -verilog synthesized.v

3. Executing synth_rs pass: v0.4.65

yosys> read_verilog -lib -specify -nomem2reg +/rapidsilicon/common/cells_sim.v +/rapidsilicon/genesis/cells_sim.v +/rapidsilicon/genesis/dsp_sim.v

3.1. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\inv'.
Generating RTLIL representation for module `\buff'.
Generating RTLIL representation for module `\logic_0'.
Generating RTLIL representation for module `\logic_1'.
Generating RTLIL representation for module `\gclkbuff'.
Successfully finished Verilog frontend.

3.2. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/cells_sim.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\dffsre'.
Generating RTLIL representation for module `\dffnsre'.
Generating RTLIL representation for module `\latchsre'.
Generating RTLIL representation for module `\latchnsre'.
Generating RTLIL representation for module `\io_scff'.
Generating RTLIL representation for module `\scff'.
Generating RTLIL representation for module `\sh_dff'.
Generating RTLIL representation for module `\adder_carry'.
Generating RTLIL representation for module `\sdffr'.
Generating RTLIL representation for module `\sdffs'.
Generating RTLIL representation for module `\TDP_BRAM18'.
Generating RTLIL representation for module `\TDP36K'.
Successfully finished Verilog frontend.

3.3. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/dsp_sim.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/dsp_sim.v' to AST representation.
Generating RTLIL representation for module `\RS_DSP1'.
Generating RTLIL representation for module `\RS_DSP2'.
Generating RTLIL representation for module `\RS_DSP2_MULT'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGIN_REGOUT'.
Generating RTLIL representation for module `\dsp_t1_20x18x64_cfg_ports'.
Generating RTLIL representation for module `\dsp_t1_10x9x32_cfg_ports'.
Generating RTLIL representation for module `\dsp_t1_sim_cfg_ports'.
Generating RTLIL representation for module `\RS_DSP3'.
Generating RTLIL representation for module `\RS_DSP3_MULT'.
Generating RTLIL representation for module `\RS_DSP3_MULT_REGIN'.
Generating RTLIL representation for module `\RS_DSP3_MULT_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULT_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULTADD'.
Generating RTLIL representation for module `\RS_DSP3_MULTADD_REGIN'.
Generating RTLIL representation for module `\RS_DSP3_MULTADD_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULTADD_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULTACC'.
Generating RTLIL representation for module `\RS_DSP3_MULTACC_REGIN'.
Generating RTLIL representation for module `\RS_DSP3_MULTACC_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULTACC_REGIN_REGOUT'.
Generating RTLIL representation for module `\dsp_t1_20x18x64_cfg_params'.
Generating RTLIL representation for module `\dsp_t1_10x9x32_cfg_params'.
Generating RTLIL representation for module `\dsp_t1_sim_cfg_params'.
Successfully finished Verilog frontend.

yosys> hierarchy -check -top key_schedule

3.4. Executing HIERARCHY pass (managing design hierarchy).
VERIFIC-INFO [VHDL-1067] key_schedule.vhd:22: processing 'key_schedule(Behavioral)'
VERIFIC-INFO [VHDL-1067] dual_mem.vhd:20: processing 'dual_mem(rtl)'
VERIFIC-INFO [VHDL-1754] dual_mem.vhd:35: extracting RAM for identifier 'RAM'
Importing module key_schedule.
Importing module dual_mem(rtl).

3.4.1. Analyzing design hierarchy..
Top module:  \key_schedule
Used module:     \dual_mem(rtl)

3.4.2. Analyzing design hierarchy..
Top module:  \key_schedule
Used module:     \dual_mem(rtl)
Removed 0 unused modules.

yosys> proc

3.5. Executing PROC pass (convert processes to netlists).

yosys> proc_clean

3.5.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> proc_rmdead

3.5.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

yosys> proc_prune

3.5.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

yosys> proc_init

3.5.4. Executing PROC_INIT pass (extract init attributes).

yosys> proc_arst

3.5.5. Executing PROC_ARST pass (detect async resets in processes).

yosys> proc_rom

3.5.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

yosys> proc_mux

3.5.7. Executing PROC_MUX pass (convert decision trees to multiplexers).

yosys> proc_dlatch

3.5.8. Executing PROC_DLATCH pass (convert process syncs to latches).

yosys> proc_dff

3.5.9. Executing PROC_DFF pass (convert process syncs to FFs).

yosys> proc_memwr

3.5.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

yosys> proc_clean

3.5.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> opt_expr -keepdc

3.5.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module dual_mem(rtl).
Optimizing module key_schedule.
<suppressed ~1 debug messages>

yosys> demuxmap

3.6. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> flatten

3.7. Executing FLATTEN pass (flatten design).
Deleting now unused module dual_mem(rtl).
<suppressed ~2 debug messages>

yosys> demuxmap

3.8. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> tribuf -logic -formal

3.9. Executing TRIBUF pass.

yosys> deminout

3.10. Executing DEMINOUT pass (demote inout ports to input or output).

yosys> opt_expr

3.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.
<suppressed ~2 debug messages>

yosys> opt_clean

3.12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..
Removed 0 unused cells and 57 unused wires.
<suppressed ~30 debug messages>

yosys> check

3.13. Executing CHECK pass (checking for obvious problems).
Checking module key_schedule...
Found and reported 0 problems.

yosys> opt_expr

3.14. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.

yosys> opt_merge -nomux

3.15. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.16. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \key_schedule..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~10 debug messages>

yosys> opt_reduce

3.17. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \key_schedule.
Performed a total of 0 changes.

yosys> opt_merge

3.18. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
Removed a total of 0 cells.

yosys> opt_share

3.19. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.20. Executing OPT_DFF pass (perform DFF optimizations).
Removing never-active async load on $verific$gen_sub_keys.w_3_i_tmp_old_reg$key_schedule.vhd:130$187 ($aldff) from module key_schedule.
Removing never-active async load on $verific$gen_sub_keys.w_2_i_tmp_old_reg$key_schedule.vhd:130$186 ($aldff) from module key_schedule.
Removing never-active async load on $verific$gen_sub_keys.w_1_i_tmp_old_reg$key_schedule.vhd:130$185 ($aldff) from module key_schedule.
Removing never-active async load on $verific$gen_sub_keys.w_0_i_tmp_old_reg$key_schedule.vhd:130$184 ($aldff) from module key_schedule.
Removing never-active async load on $verific$gen_sub_keys.tmp_3_reg$key_schedule.vhd:130$191 ($aldff) from module key_schedule.
Removing never-active async load on $verific$gen_sub_keys.tmp_2_reg$key_schedule.vhd:130$190 ($aldff) from module key_schedule.
Removing never-active async load on $verific$gen_sub_keys.tmp_1_reg$key_schedule.vhd:130$189 ($aldff) from module key_schedule.
Removing never-active async load on $verific$gen_sub_keys.tmp_0_reg$key_schedule.vhd:130$188 ($aldff) from module key_schedule.
Removing never-active async load on $verific$count_5_reg$key_schedule.vhd:62$104 ($aldff) from module key_schedule.
Removing never-active async load on $verific$count_10_reg$key_schedule.vhd:77$111 ($aldff) from module key_schedule.
Removing never-active async load on $flatten\S_BOX_DUAL_2.$verific$read_dpra_reg$dual_mem.vhd:51$230 ($aldff) from module key_schedule.
Removing never-active async load on $flatten\S_BOX_DUAL_2.$verific$read_a_reg$dual_mem.vhd:51$229 ($aldff) from module key_schedule.
Removing never-active async load on $flatten\S_BOX_DUAL_1.$verific$read_dpra_reg$dual_mem.vhd:51$230 ($aldff) from module key_schedule.
Removing never-active async load on $flatten\S_BOX_DUAL_1.$verific$read_a_reg$dual_mem.vhd:51$229 ($aldff) from module key_schedule.

yosys> opt_clean

3.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..

yosys> opt_expr

3.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.
MAX OPT ITERATION = 1

yosys> fsm -encoding binary

3.23. Executing FSM pass (extract and optimize FSM).

yosys> fsm_detect

3.23.1. Executing FSM_DETECT pass (finding FSMs in design).

yosys> fsm_extract

3.23.2. Executing FSM_EXTRACT pass (extracting FSM from design).

yosys> fsm_opt

3.23.3. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> opt_clean

3.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..

yosys> fsm_opt

3.23.5. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> fsm_recode -encoding binary

3.23.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

yosys> fsm_info

3.23.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

yosys> fsm_map

3.23.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

yosys> opt_expr

3.24. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.

yosys> opt_merge -nomux

3.25. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.26. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \key_schedule..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~10 debug messages>

yosys> opt_reduce

3.27. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \key_schedule.
Performed a total of 0 changes.

yosys> opt_merge

3.28. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
Removed a total of 0 cells.

yosys> opt_share

3.29. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -sat

3.30. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $verific$gen_sub_keys.w_3_i_tmp_old_reg$key_schedule.vhd:130$187 ($dff) from module key_schedule (D = $verific$n1773$81, Q = \gen_sub_keys.w_3_i_tmp_old).
Adding EN signal on $verific$gen_sub_keys.w_2_i_tmp_old_reg$key_schedule.vhd:130$186 ($dff) from module key_schedule (D = $verific$n1674$78, Q = \gen_sub_keys.w_2_i_tmp_old).
Adding EN signal on $verific$gen_sub_keys.w_1_i_tmp_old_reg$key_schedule.vhd:130$185 ($dff) from module key_schedule (D = $verific$n1575$75, Q = \gen_sub_keys.w_1_i_tmp_old).
Adding EN signal on $verific$gen_sub_keys.w_0_i_tmp_old_reg$key_schedule.vhd:130$184 ($dff) from module key_schedule (D = $verific$n1476$72, Q = \gen_sub_keys.w_0_i_tmp_old).
Adding EN signal on $verific$gen_sub_keys.tmp_3_reg$key_schedule.vhd:130$191 ($dff) from module key_schedule (D = $verific$n2169$93, Q = \gen_sub_keys.tmp_3).
Adding EN signal on $verific$gen_sub_keys.tmp_2_reg$key_schedule.vhd:130$190 ($dff) from module key_schedule (D = $verific$n2070$90, Q = \gen_sub_keys.tmp_2).
Adding EN signal on $verific$gen_sub_keys.tmp_1_reg$key_schedule.vhd:130$189 ($dff) from module key_schedule (D = $verific$n1971$87, Q = \gen_sub_keys.tmp_1).
Adding EN signal on $verific$gen_sub_keys.tmp_0_reg$key_schedule.vhd:130$188 ($dff) from module key_schedule (D = $verific$n1872$84, Q = \gen_sub_keys.tmp_0).
Adding EN signal on $verific$count_5_reg$key_schedule.vhd:62$104 ($dff) from module key_schedule (D = $verific$n90$25, Q = \count_5).
Adding EN signal on $verific$count_10_reg$key_schedule.vhd:77$111 ($dff) from module key_schedule (D = $verific$n190$32, Q = \count_10).

yosys> opt_clean

3.31. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..

yosys> opt_expr

3.32. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.
<suppressed ~10 debug messages>

yosys> opt_muxtree

3.33. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \key_schedule..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~10 debug messages>

yosys> opt_reduce

3.34. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \key_schedule.
Performed a total of 0 changes.

yosys> opt_merge

3.35. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
<suppressed ~111 debug messages>
Removed a total of 37 cells.

yosys> opt_share

3.36. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -sat

3.37. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.38. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..
Removed 0 unused cells and 37 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.39. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.

yosys> opt_muxtree

3.40. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \key_schedule..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~14 debug messages>

yosys> opt_reduce

3.41. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \key_schedule.
Performed a total of 0 changes.

yosys> opt_merge

3.42. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
Removed a total of 0 cells.

yosys> opt_share

3.43. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -sat

3.44. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.45. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..

yosys> opt_expr

3.46. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.
MAX OPT ITERATION = 3

yosys> wreduce -keepdc

3.47. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 4) from port B of cell key_schedule.$auto$opt_dff.cc:195:make_patterns_logic$274 ($ne).
Removed top 2 bits (of 3) from port B of cell key_schedule.$verific$add_7$key_schedule.vhd:59$100 ($add).
Removed top 3 bits (of 4) from port B of cell key_schedule.$verific$add_19$key_schedule.vhd:74$107 ($add).
Removed top 2 bits (of 3) from port A of cell key_schedule.$verific$equal_30$key_schedule.vhd:116$116 ($eq).
Removed top 1 bits (of 3) from port A of cell key_schedule.$verific$equal_43$key_schedule.vhd:119$129 ($eq).
Removed top 1 bits (of 3) from port A of cell key_schedule.$verific$equal_47$key_schedule.vhd:122$133 ($eq).
Removed top 2 bits (of 5) from port B of cell key_schedule.$auto$opt_dff.cc:195:make_patterns_logic$265 ($ne).
Removed top 3 bits (of 6) from port B of cell key_schedule.$auto$opt_dff.cc:195:make_patterns_logic$254 ($ne).
Removed top 4 bits (of 7) from port B of cell key_schedule.$auto$opt_dff.cc:195:make_patterns_logic$241 ($ne).

yosys> peepopt

3.48. Executing PEEPOPT pass (run peephole optimizers).

yosys> opt_clean

3.49. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..

yosys> demuxmap

3.50. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> stat

3.51. Printing statistics.

=== key_schedule ===

   Number of wires:                116
   Number of wire bits:           1861
   Number of public wires:          40
   Number of public wire bits:     704
   Number of memories:               2
   Number of memory bits:         4096
   Number of processes:              0
   Number of cells:                 97
     $add                            2
     $and                            2
     $bmux                           8
     $dff                            4
     $dffe                          10
     $eq                             5
     $memrd_v2                       4
     $memwr_v2                       2
     $mux                           36
     $ne                             8
     $reduce_and                     8
     $reduce_bool                    3
     $xor                            5


yosys> wreduce t:$mul

3.52. Executing WREDUCE pass (reducing word size of cells).

yosys> rs_dsp_macc

3.53. Executing RS_DSP_MACC pass.

yosys> techmap -map +/mul2dsp.v -D DSP_A_MAXWIDTH=20 -D DSP_B_MAXWIDTH=18 -D DSP_A_MINWIDTH=11 -D DSP_B_MINWIDTH=10 -D DSP_NAME=$__RS_MUL20X18

3.54. Executing TECHMAP pass (map to technology primitives).

3.54.1. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/mul2dsp.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/mul2dsp.v' to AST representation.
Generating RTLIL representation for module `\_80_mul'.
Generating RTLIL representation for module `\_90_soft_mul'.
Successfully finished Verilog frontend.

3.54.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

yosys> chtype -set $mul t:$__soft_mul

yosys> techmap -map +/mul2dsp.v -D DSP_A_MAXWIDTH=10 -D DSP_B_MAXWIDTH=9 -D DSP_A_MINWIDTH=4 -D DSP_B_MINWIDTH=4 -D DSP_NAME=$__RS_MUL10X9

3.55. Executing TECHMAP pass (map to technology primitives).

3.55.1. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/mul2dsp.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/mul2dsp.v' to AST representation.
Generating RTLIL representation for module `\_80_mul'.
Generating RTLIL representation for module `\_90_soft_mul'.
Successfully finished Verilog frontend.

3.55.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

yosys> chtype -set $mul t:$__soft_mul

yosys> techmap -map +/rapidsilicon/genesis/dsp_map.v -D USE_DSP_CFG_PARAMS=0

3.56. Executing TECHMAP pass (map to technology primitives).

3.56.1. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/dsp_map.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/dsp_map.v' to AST representation.
Generating RTLIL representation for module `\$__RS_MUL20X18'.
Generating RTLIL representation for module `\$__RS_MUL10X9'.
Successfully finished Verilog frontend.

3.56.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

yosys> rs_dsp_simd

3.57. Executing RS_DSP_SIMD pass.

yosys> techmap -map +/rapidsilicon/genesis/dsp_final_map.v

3.58. Executing TECHMAP pass (map to technology primitives).

3.58.1. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/dsp_final_map.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/dsp_final_map.v' to AST representation.
Generating RTLIL representation for module `\dsp_t1_20x18x64_cfg_ports'.
Generating RTLIL representation for module `\dsp_t1_10x9x32_cfg_ports'.
Generating RTLIL representation for module `\dsp_t1_20x18x64_cfg_params'.
Generating RTLIL representation for module `\dsp_t1_10x9x32_cfg_params'.
Successfully finished Verilog frontend.

3.58.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~6 debug messages>

yosys> rs_dsp_io_regs

3.59. Executing RS_DSP_IO_REGS pass.

yosys> alumacc

3.60. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module key_schedule:
  creating $macc model for $verific$add_19$key_schedule.vhd:74$107 ($add).
  creating $macc model for $verific$add_7$key_schedule.vhd:59$100 ($add).
  creating $alu model for $macc $verific$add_7$key_schedule.vhd:59$100.
  creating $alu model for $macc $verific$add_19$key_schedule.vhd:74$107.
  creating $alu cell for $verific$add_19$key_schedule.vhd:74$107: $auto$alumacc.cc:485:replace_alu$331
  creating $alu cell for $verific$add_7$key_schedule.vhd:59$100: $auto$alumacc.cc:485:replace_alu$334
  created 2 $alu and 0 $macc cells.

yosys> opt_expr

3.61. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.

yosys> opt_merge -nomux

3.62. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.63. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \key_schedule..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~14 debug messages>

yosys> opt_reduce

3.64. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \key_schedule.
Performed a total of 0 changes.

yosys> opt_merge

3.65. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
Removed a total of 0 cells.

yosys> opt_share

3.66. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.67. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.68. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..

yosys> opt_expr

3.69. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.
MAX OPT ITERATION = 1

yosys> stat

3.70. Printing statistics.

=== key_schedule ===

   Number of wires:                120
   Number of wire bits:           1875
   Number of public wires:          40
   Number of public wire bits:     704
   Number of memories:               2
   Number of memory bits:         4096
   Number of processes:              0
   Number of cells:                 97
     $alu                            2
     $and                            2
     $bmux                           8
     $dff                            4
     $dffe                          10
     $eq                             5
     $memrd_v2                       4
     $memwr_v2                       2
     $mux                           36
     $ne                             8
     $reduce_and                     8
     $reduce_bool                    3
     $xor                            5


yosys> memory -nomap

3.71. Executing MEMORY pass.

yosys> opt_mem

3.71.1. Executing OPT_MEM pass (optimize memories).
key_schedule.S_BOX_DUAL_1.RAM: removing const-0 lane 0
key_schedule.S_BOX_DUAL_1.RAM: removing const-0 lane 1
key_schedule.S_BOX_DUAL_1.RAM: removing const-0 lane 2
key_schedule.S_BOX_DUAL_1.RAM: removing const-0 lane 3
key_schedule.S_BOX_DUAL_1.RAM: removing const-0 lane 4
key_schedule.S_BOX_DUAL_1.RAM: removing const-0 lane 5
key_schedule.S_BOX_DUAL_1.RAM: removing const-0 lane 6
key_schedule.S_BOX_DUAL_1.RAM: removing const-0 lane 7
key_schedule.S_BOX_DUAL_2.RAM: removing const-0 lane 0
key_schedule.S_BOX_DUAL_2.RAM: removing const-0 lane 1
key_schedule.S_BOX_DUAL_2.RAM: removing const-0 lane 2
key_schedule.S_BOX_DUAL_2.RAM: removing const-0 lane 3
key_schedule.S_BOX_DUAL_2.RAM: removing const-0 lane 4
key_schedule.S_BOX_DUAL_2.RAM: removing const-0 lane 5
key_schedule.S_BOX_DUAL_2.RAM: removing const-0 lane 6
key_schedule.S_BOX_DUAL_2.RAM: removing const-0 lane 7
Performed a total of 2 transformations.

yosys> opt_mem_priority

3.71.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

yosys> opt_mem_feedback

3.71.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

yosys> memory_bmux2rom

3.71.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

yosys> memory_dff

3.71.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).
Checking read port `$auto$memory_bmux2rom.cc:63:execute$358'[0] in module `\key_schedule': no output FF found.
Checking read port `$auto$memory_bmux2rom.cc:63:execute$355'[0] in module `\key_schedule': no output FF found.
Checking read port `$auto$memory_bmux2rom.cc:63:execute$352'[0] in module `\key_schedule': no output FF found.
Checking read port `$auto$memory_bmux2rom.cc:63:execute$349'[0] in module `\key_schedule': no output FF found.
Checking read port `$auto$memory_bmux2rom.cc:63:execute$346'[0] in module `\key_schedule': no output FF found.
Checking read port `$auto$memory_bmux2rom.cc:63:execute$343'[0] in module `\key_schedule': no output FF found.
Checking read port `$auto$memory_bmux2rom.cc:63:execute$340'[0] in module `\key_schedule': no output FF found.
Checking read port `$auto$memory_bmux2rom.cc:63:execute$337'[0] in module `\key_schedule': no output FF found.
Checking read port address `$auto$memory_bmux2rom.cc:63:execute$358'[0] in module `\key_schedule': merged address FF to cell.
Checking read port address `$auto$memory_bmux2rom.cc:63:execute$355'[0] in module `\key_schedule': merged address FF to cell.
Checking read port address `$auto$memory_bmux2rom.cc:63:execute$352'[0] in module `\key_schedule': merged address FF to cell.
Checking read port address `$auto$memory_bmux2rom.cc:63:execute$349'[0] in module `\key_schedule': merged address FF to cell.
Checking read port address `$auto$memory_bmux2rom.cc:63:execute$346'[0] in module `\key_schedule': merged address FF to cell.
Checking read port address `$auto$memory_bmux2rom.cc:63:execute$343'[0] in module `\key_schedule': merged address FF to cell.
Checking read port address `$auto$memory_bmux2rom.cc:63:execute$340'[0] in module `\key_schedule': merged address FF to cell.
Checking read port address `$auto$memory_bmux2rom.cc:63:execute$337'[0] in module `\key_schedule': merged address FF to cell.

yosys> opt_clean

3.71.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..
Removed 4 unused cells and 4 unused wires.
<suppressed ~8 debug messages>

yosys> memory_share

3.71.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

yosys> opt_mem_widen

3.71.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

yosys> opt_clean

3.71.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..

yosys> memory_collect

3.71.10. Executing MEMORY_COLLECT pass (generating $mem cells).

yosys> stat

3.72. Printing statistics.

=== key_schedule ===

   Number of wires:                124
   Number of wire bits:           1872
   Number of public wires:          36
   Number of public wire bits:     672
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 95
     $alu                            2
     $and                            2
     $dffe                          10
     $eq                             5
     $mem_v2                         8
     $mux                           44
     $ne                             8
     $reduce_and                     8
     $reduce_bool                    3
     $xor                            5


yosys> muxpack

3.73. Executing MUXPACK pass ($mux cell cascades to $pmux).
Converting key_schedule.$verific$mux_57$key_schedule.vhd:128$142 ... key_schedule.$verific$mux_58$key_schedule.vhd:128$143 to a pmux with 2 cases.
Converting key_schedule.$verific$mux_61$key_schedule.vhd:128$146 ... key_schedule.$verific$mux_63$key_schedule.vhd:128$148 to a pmux with 3 cases.
Converting key_schedule.$verific$mux_67$key_schedule.vhd:128$152 ... key_schedule.$verific$mux_70$key_schedule.vhd:128$155 to a pmux with 4 cases.
Converted 9 (p)mux cells into 3 pmux cells.
<suppressed ~34 debug messages>

yosys> opt_clean

3.74. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..
Removed 0 unused cells and 6 unused wires.
<suppressed ~1 debug messages>

yosys> memory_bram -rules +/rapidsilicon/genesis/brams.txt

3.75. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).
Processing key_schedule.$auto$memory_bmux2rom.cc:63:execute$337:
  Properties: ports=1 bits=8 rports=1 wports=0 dbits=1 abits=3 words=8
  Checking rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 1):
    Bram geometry: abits=10 dbits=36 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_TDP: awaste=1016 dwaste=35 bwaste=36856 waste=36856 efficiency=0
    Rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 1) rejected: requirement 'min bits 128' not met.
  Checking rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 2):
    Bram geometry: abits=11 dbits=18 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_TDP: awaste=2040 dwaste=17 bwaste=36856 waste=36856 efficiency=0
    Rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 2) rejected: requirement 'min bits 128' not met.
  Checking rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 3):
    Bram geometry: abits=12 dbits=9 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_TDP: awaste=4088 dwaste=8 bwaste=36856 waste=36856 efficiency=0
    Rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 3) rejected: requirement 'min bits 128' not met.
  Checking rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 4):
    Bram geometry: abits=13 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_TDP: awaste=8184 dwaste=3 bwaste=32760 waste=32760 efficiency=0
    Rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 4) rejected: requirement 'min bits 128' not met.
  Checking rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 5):
    Bram geometry: abits=14 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_TDP: awaste=16376 dwaste=1 bwaste=32760 waste=32760 efficiency=0
    Rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 5) rejected: requirement 'min bits 128' not met.
  Checking rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 6):
    Bram geometry: abits=15 dbits=1 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_TDP: awaste=32760 dwaste=0 bwaste=32760 waste=32760 efficiency=0
    Rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 6) rejected: requirement 'min bits 128' not met.
  Checking rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 1):
    Bram geometry: abits=10 dbits=36 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_SDP: awaste=1016 dwaste=35 bwaste=36856 waste=36856 efficiency=0
    Rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 1) rejected: requirement 'min bits 128' not met.
  Checking rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 2):
    Bram geometry: abits=11 dbits=18 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_SDP: awaste=2040 dwaste=17 bwaste=36856 waste=36856 efficiency=0
    Rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 2) rejected: requirement 'min bits 128' not met.
  Checking rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 3):
    Bram geometry: abits=12 dbits=9 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_SDP: awaste=4088 dwaste=8 bwaste=36856 waste=36856 efficiency=0
    Rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 3) rejected: requirement 'min bits 128' not met.
  Checking rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 4):
    Bram geometry: abits=13 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_SDP: awaste=8184 dwaste=3 bwaste=32760 waste=32760 efficiency=0
    Rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 4) rejected: requirement 'min bits 128' not met.
  Checking rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 5):
    Bram geometry: abits=14 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_SDP: awaste=16376 dwaste=1 bwaste=32760 waste=32760 efficiency=0
    Rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 5) rejected: requirement 'min bits 128' not met.
  Checking rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 6):
    Bram geometry: abits=15 dbits=1 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_SDP: awaste=32760 dwaste=0 bwaste=32760 waste=32760 efficiency=0
    Rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 6) rejected: requirement 'min bits 128' not met.
  No acceptable bram resources found.
Processing key_schedule.$auto$memory_bmux2rom.cc:63:execute$340:
  Properties: ports=1 bits=8 rports=1 wports=0 dbits=1 abits=3 words=8
  Checking rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 1):
    Bram geometry: abits=10 dbits=36 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_TDP: awaste=1016 dwaste=35 bwaste=36856 waste=36856 efficiency=0
    Rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 1) rejected: requirement 'min bits 128' not met.
  Checking rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 2):
    Bram geometry: abits=11 dbits=18 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_TDP: awaste=2040 dwaste=17 bwaste=36856 waste=36856 efficiency=0
    Rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 2) rejected: requirement 'min bits 128' not met.
  Checking rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 3):
    Bram geometry: abits=12 dbits=9 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_TDP: awaste=4088 dwaste=8 bwaste=36856 waste=36856 efficiency=0
    Rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 3) rejected: requirement 'min bits 128' not met.
  Checking rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 4):
    Bram geometry: abits=13 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_TDP: awaste=8184 dwaste=3 bwaste=32760 waste=32760 efficiency=0
    Rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 4) rejected: requirement 'min bits 128' not met.
  Checking rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 5):
    Bram geometry: abits=14 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_TDP: awaste=16376 dwaste=1 bwaste=32760 waste=32760 efficiency=0
    Rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 5) rejected: requirement 'min bits 128' not met.
  Checking rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 6):
    Bram geometry: abits=15 dbits=1 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_TDP: awaste=32760 dwaste=0 bwaste=32760 waste=32760 efficiency=0
    Rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 6) rejected: requirement 'min bits 128' not met.
  Checking rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 1):
    Bram geometry: abits=10 dbits=36 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_SDP: awaste=1016 dwaste=35 bwaste=36856 waste=36856 efficiency=0
    Rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 1) rejected: requirement 'min bits 128' not met.
  Checking rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 2):
    Bram geometry: abits=11 dbits=18 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_SDP: awaste=2040 dwaste=17 bwaste=36856 waste=36856 efficiency=0
    Rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 2) rejected: requirement 'min bits 128' not met.
  Checking rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 3):
    Bram geometry: abits=12 dbits=9 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_SDP: awaste=4088 dwaste=8 bwaste=36856 waste=36856 efficiency=0
    Rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 3) rejected: requirement 'min bits 128' not met.
  Checking rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 4):
    Bram geometry: abits=13 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_SDP: awaste=8184 dwaste=3 bwaste=32760 waste=32760 efficiency=0
    Rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 4) rejected: requirement 'min bits 128' not met.
  Checking rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 5):
    Bram geometry: abits=14 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_SDP: awaste=16376 dwaste=1 bwaste=32760 waste=32760 efficiency=0
    Rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 5) rejected: requirement 'min bits 128' not met.
  Checking rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 6):
    Bram geometry: abits=15 dbits=1 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_SDP: awaste=32760 dwaste=0 bwaste=32760 waste=32760 efficiency=0
    Rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 6) rejected: requirement 'min bits 128' not met.
  No acceptable bram resources found.
Processing key_schedule.$auto$memory_bmux2rom.cc:63:execute$343:
  Properties: ports=1 bits=16 rports=1 wports=0 dbits=1 abits=4 words=16
  Checking rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 1):
    Bram geometry: abits=10 dbits=36 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_TDP: awaste=1008 dwaste=35 bwaste=36848 waste=36848 efficiency=0
    Rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 1) rejected: requirement 'min bits 128' not met.
  Checking rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 2):
    Bram geometry: abits=11 dbits=18 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_TDP: awaste=2032 dwaste=17 bwaste=36848 waste=36848 efficiency=0
    Rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 2) rejected: requirement 'min bits 128' not met.
  Checking rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 3):
    Bram geometry: abits=12 dbits=9 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_TDP: awaste=4080 dwaste=8 bwaste=36848 waste=36848 efficiency=0
    Rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 3) rejected: requirement 'min bits 128' not met.
  Checking rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 4):
    Bram geometry: abits=13 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_TDP: awaste=8176 dwaste=3 bwaste=32752 waste=32752 efficiency=0
    Rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 4) rejected: requirement 'min bits 128' not met.
  Checking rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 5):
    Bram geometry: abits=14 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_TDP: awaste=16368 dwaste=1 bwaste=32752 waste=32752 efficiency=0
    Rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 5) rejected: requirement 'min bits 128' not met.
  Checking rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 6):
    Bram geometry: abits=15 dbits=1 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_TDP: awaste=32752 dwaste=0 bwaste=32752 waste=32752 efficiency=0
    Rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 6) rejected: requirement 'min bits 128' not met.
  Checking rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 1):
    Bram geometry: abits=10 dbits=36 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_SDP: awaste=1008 dwaste=35 bwaste=36848 waste=36848 efficiency=0
    Rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 1) rejected: requirement 'min bits 128' not met.
  Checking rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 2):
    Bram geometry: abits=11 dbits=18 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_SDP: awaste=2032 dwaste=17 bwaste=36848 waste=36848 efficiency=0
    Rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 2) rejected: requirement 'min bits 128' not met.
  Checking rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 3):
    Bram geometry: abits=12 dbits=9 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_SDP: awaste=4080 dwaste=8 bwaste=36848 waste=36848 efficiency=0
    Rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 3) rejected: requirement 'min bits 128' not met.
  Checking rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 4):
    Bram geometry: abits=13 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_SDP: awaste=8176 dwaste=3 bwaste=32752 waste=32752 efficiency=0
    Rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 4) rejected: requirement 'min bits 128' not met.
  Checking rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 5):
    Bram geometry: abits=14 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_SDP: awaste=16368 dwaste=1 bwaste=32752 waste=32752 efficiency=0
    Rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 5) rejected: requirement 'min bits 128' not met.
  Checking rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 6):
    Bram geometry: abits=15 dbits=1 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_SDP: awaste=32752 dwaste=0 bwaste=32752 waste=32752 efficiency=0
    Rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 6) rejected: requirement 'min bits 128' not met.
  No acceptable bram resources found.
Processing key_schedule.$auto$memory_bmux2rom.cc:63:execute$346:
  Properties: ports=1 bits=16 rports=1 wports=0 dbits=1 abits=4 words=16
  Checking rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 1):
    Bram geometry: abits=10 dbits=36 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_TDP: awaste=1008 dwaste=35 bwaste=36848 waste=36848 efficiency=0
    Rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 1) rejected: requirement 'min bits 128' not met.
  Checking rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 2):
    Bram geometry: abits=11 dbits=18 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_TDP: awaste=2032 dwaste=17 bwaste=36848 waste=36848 efficiency=0
    Rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 2) rejected: requirement 'min bits 128' not met.
  Checking rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 3):
    Bram geometry: abits=12 dbits=9 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_TDP: awaste=4080 dwaste=8 bwaste=36848 waste=36848 efficiency=0
    Rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 3) rejected: requirement 'min bits 128' not met.
  Checking rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 4):
    Bram geometry: abits=13 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_TDP: awaste=8176 dwaste=3 bwaste=32752 waste=32752 efficiency=0
    Rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 4) rejected: requirement 'min bits 128' not met.
  Checking rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 5):
    Bram geometry: abits=14 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_TDP: awaste=16368 dwaste=1 bwaste=32752 waste=32752 efficiency=0
    Rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 5) rejected: requirement 'min bits 128' not met.
  Checking rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 6):
    Bram geometry: abits=15 dbits=1 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_TDP: awaste=32752 dwaste=0 bwaste=32752 waste=32752 efficiency=0
    Rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 6) rejected: requirement 'min bits 128' not met.
  Checking rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 1):
    Bram geometry: abits=10 dbits=36 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_SDP: awaste=1008 dwaste=35 bwaste=36848 waste=36848 efficiency=0
    Rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 1) rejected: requirement 'min bits 128' not met.
  Checking rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 2):
    Bram geometry: abits=11 dbits=18 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_SDP: awaste=2032 dwaste=17 bwaste=36848 waste=36848 efficiency=0
    Rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 2) rejected: requirement 'min bits 128' not met.
  Checking rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 3):
    Bram geometry: abits=12 dbits=9 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_SDP: awaste=4080 dwaste=8 bwaste=36848 waste=36848 efficiency=0
    Rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 3) rejected: requirement 'min bits 128' not met.
  Checking rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 4):
    Bram geometry: abits=13 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_SDP: awaste=8176 dwaste=3 bwaste=32752 waste=32752 efficiency=0
    Rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 4) rejected: requirement 'min bits 128' not met.
  Checking rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 5):
    Bram geometry: abits=14 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_SDP: awaste=16368 dwaste=1 bwaste=32752 waste=32752 efficiency=0
    Rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 5) rejected: requirement 'min bits 128' not met.
  Checking rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 6):
    Bram geometry: abits=15 dbits=1 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_SDP: awaste=32752 dwaste=0 bwaste=32752 waste=32752 efficiency=0
    Rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 6) rejected: requirement 'min bits 128' not met.
  No acceptable bram resources found.
Processing key_schedule.$auto$memory_bmux2rom.cc:63:execute$349:
  Properties: ports=1 bits=16 rports=1 wports=0 dbits=1 abits=4 words=16
  Checking rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 1):
    Bram geometry: abits=10 dbits=36 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_TDP: awaste=1008 dwaste=35 bwaste=36848 waste=36848 efficiency=0
    Rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 1) rejected: requirement 'min bits 128' not met.
  Checking rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 2):
    Bram geometry: abits=11 dbits=18 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_TDP: awaste=2032 dwaste=17 bwaste=36848 waste=36848 efficiency=0
    Rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 2) rejected: requirement 'min bits 128' not met.
  Checking rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 3):
    Bram geometry: abits=12 dbits=9 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_TDP: awaste=4080 dwaste=8 bwaste=36848 waste=36848 efficiency=0
    Rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 3) rejected: requirement 'min bits 128' not met.
  Checking rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 4):
    Bram geometry: abits=13 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_TDP: awaste=8176 dwaste=3 bwaste=32752 waste=32752 efficiency=0
    Rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 4) rejected: requirement 'min bits 128' not met.
  Checking rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 5):
    Bram geometry: abits=14 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_TDP: awaste=16368 dwaste=1 bwaste=32752 waste=32752 efficiency=0
    Rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 5) rejected: requirement 'min bits 128' not met.
  Checking rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 6):
    Bram geometry: abits=15 dbits=1 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_TDP: awaste=32752 dwaste=0 bwaste=32752 waste=32752 efficiency=0
    Rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 6) rejected: requirement 'min bits 128' not met.
  Checking rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 1):
    Bram geometry: abits=10 dbits=36 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_SDP: awaste=1008 dwaste=35 bwaste=36848 waste=36848 efficiency=0
    Rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 1) rejected: requirement 'min bits 128' not met.
  Checking rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 2):
    Bram geometry: abits=11 dbits=18 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_SDP: awaste=2032 dwaste=17 bwaste=36848 waste=36848 efficiency=0
    Rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 2) rejected: requirement 'min bits 128' not met.
  Checking rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 3):
    Bram geometry: abits=12 dbits=9 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_SDP: awaste=4080 dwaste=8 bwaste=36848 waste=36848 efficiency=0
    Rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 3) rejected: requirement 'min bits 128' not met.
  Checking rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 4):
    Bram geometry: abits=13 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_SDP: awaste=8176 dwaste=3 bwaste=32752 waste=32752 efficiency=0
    Rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 4) rejected: requirement 'min bits 128' not met.
  Checking rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 5):
    Bram geometry: abits=14 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_SDP: awaste=16368 dwaste=1 bwaste=32752 waste=32752 efficiency=0
    Rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 5) rejected: requirement 'min bits 128' not met.
  Checking rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 6):
    Bram geometry: abits=15 dbits=1 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_SDP: awaste=32752 dwaste=0 bwaste=32752 waste=32752 efficiency=0
    Rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 6) rejected: requirement 'min bits 128' not met.
  No acceptable bram resources found.
Processing key_schedule.$auto$memory_bmux2rom.cc:63:execute$352:
  Properties: ports=1 bits=16 rports=1 wports=0 dbits=1 abits=4 words=16
  Checking rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 1):
    Bram geometry: abits=10 dbits=36 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_TDP: awaste=1008 dwaste=35 bwaste=36848 waste=36848 efficiency=0
    Rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 1) rejected: requirement 'min bits 128' not met.
  Checking rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 2):
    Bram geometry: abits=11 dbits=18 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_TDP: awaste=2032 dwaste=17 bwaste=36848 waste=36848 efficiency=0
    Rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 2) rejected: requirement 'min bits 128' not met.
  Checking rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 3):
    Bram geometry: abits=12 dbits=9 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_TDP: awaste=4080 dwaste=8 bwaste=36848 waste=36848 efficiency=0
    Rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 3) rejected: requirement 'min bits 128' not met.
  Checking rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 4):
    Bram geometry: abits=13 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_TDP: awaste=8176 dwaste=3 bwaste=32752 waste=32752 efficiency=0
    Rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 4) rejected: requirement 'min bits 128' not met.
  Checking rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 5):
    Bram geometry: abits=14 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_TDP: awaste=16368 dwaste=1 bwaste=32752 waste=32752 efficiency=0
    Rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 5) rejected: requirement 'min bits 128' not met.
  Checking rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 6):
    Bram geometry: abits=15 dbits=1 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_TDP: awaste=32752 dwaste=0 bwaste=32752 waste=32752 efficiency=0
    Rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 6) rejected: requirement 'min bits 128' not met.
  Checking rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 1):
    Bram geometry: abits=10 dbits=36 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_SDP: awaste=1008 dwaste=35 bwaste=36848 waste=36848 efficiency=0
    Rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 1) rejected: requirement 'min bits 128' not met.
  Checking rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 2):
    Bram geometry: abits=11 dbits=18 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_SDP: awaste=2032 dwaste=17 bwaste=36848 waste=36848 efficiency=0
    Rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 2) rejected: requirement 'min bits 128' not met.
  Checking rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 3):
    Bram geometry: abits=12 dbits=9 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_SDP: awaste=4080 dwaste=8 bwaste=36848 waste=36848 efficiency=0
    Rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 3) rejected: requirement 'min bits 128' not met.
  Checking rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 4):
    Bram geometry: abits=13 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_SDP: awaste=8176 dwaste=3 bwaste=32752 waste=32752 efficiency=0
    Rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 4) rejected: requirement 'min bits 128' not met.
  Checking rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 5):
    Bram geometry: abits=14 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_SDP: awaste=16368 dwaste=1 bwaste=32752 waste=32752 efficiency=0
    Rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 5) rejected: requirement 'min bits 128' not met.
  Checking rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 6):
    Bram geometry: abits=15 dbits=1 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_SDP: awaste=32752 dwaste=0 bwaste=32752 waste=32752 efficiency=0
    Rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 6) rejected: requirement 'min bits 128' not met.
  No acceptable bram resources found.
Processing key_schedule.$auto$memory_bmux2rom.cc:63:execute$355:
  Properties: ports=1 bits=16 rports=1 wports=0 dbits=1 abits=4 words=16
  Checking rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 1):
    Bram geometry: abits=10 dbits=36 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_TDP: awaste=1008 dwaste=35 bwaste=36848 waste=36848 efficiency=0
    Rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 1) rejected: requirement 'min bits 128' not met.
  Checking rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 2):
    Bram geometry: abits=11 dbits=18 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_TDP: awaste=2032 dwaste=17 bwaste=36848 waste=36848 efficiency=0
    Rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 2) rejected: requirement 'min bits 128' not met.
  Checking rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 3):
    Bram geometry: abits=12 dbits=9 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_TDP: awaste=4080 dwaste=8 bwaste=36848 waste=36848 efficiency=0
    Rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 3) rejected: requirement 'min bits 128' not met.
  Checking rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 4):
    Bram geometry: abits=13 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_TDP: awaste=8176 dwaste=3 bwaste=32752 waste=32752 efficiency=0
    Rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 4) rejected: requirement 'min bits 128' not met.
  Checking rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 5):
    Bram geometry: abits=14 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_TDP: awaste=16368 dwaste=1 bwaste=32752 waste=32752 efficiency=0
    Rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 5) rejected: requirement 'min bits 128' not met.
  Checking rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 6):
    Bram geometry: abits=15 dbits=1 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_TDP: awaste=32752 dwaste=0 bwaste=32752 waste=32752 efficiency=0
    Rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 6) rejected: requirement 'min bits 128' not met.
  Checking rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 1):
    Bram geometry: abits=10 dbits=36 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_SDP: awaste=1008 dwaste=35 bwaste=36848 waste=36848 efficiency=0
    Rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 1) rejected: requirement 'min bits 128' not met.
  Checking rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 2):
    Bram geometry: abits=11 dbits=18 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_SDP: awaste=2032 dwaste=17 bwaste=36848 waste=36848 efficiency=0
    Rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 2) rejected: requirement 'min bits 128' not met.
  Checking rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 3):
    Bram geometry: abits=12 dbits=9 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_SDP: awaste=4080 dwaste=8 bwaste=36848 waste=36848 efficiency=0
    Rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 3) rejected: requirement 'min bits 128' not met.
  Checking rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 4):
    Bram geometry: abits=13 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_SDP: awaste=8176 dwaste=3 bwaste=32752 waste=32752 efficiency=0
    Rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 4) rejected: requirement 'min bits 128' not met.
  Checking rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 5):
    Bram geometry: abits=14 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_SDP: awaste=16368 dwaste=1 bwaste=32752 waste=32752 efficiency=0
    Rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 5) rejected: requirement 'min bits 128' not met.
  Checking rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 6):
    Bram geometry: abits=15 dbits=1 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_SDP: awaste=32752 dwaste=0 bwaste=32752 waste=32752 efficiency=0
    Rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 6) rejected: requirement 'min bits 128' not met.
  No acceptable bram resources found.
Processing key_schedule.$auto$memory_bmux2rom.cc:63:execute$358:
  Properties: ports=1 bits=8 rports=1 wports=0 dbits=1 abits=3 words=8
  Checking rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 1):
    Bram geometry: abits=10 dbits=36 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_TDP: awaste=1016 dwaste=35 bwaste=36856 waste=36856 efficiency=0
    Rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 1) rejected: requirement 'min bits 128' not met.
  Checking rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 2):
    Bram geometry: abits=11 dbits=18 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_TDP: awaste=2040 dwaste=17 bwaste=36856 waste=36856 efficiency=0
    Rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 2) rejected: requirement 'min bits 128' not met.
  Checking rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 3):
    Bram geometry: abits=12 dbits=9 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_TDP: awaste=4088 dwaste=8 bwaste=36856 waste=36856 efficiency=0
    Rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 3) rejected: requirement 'min bits 128' not met.
  Checking rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 4):
    Bram geometry: abits=13 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_TDP: awaste=8184 dwaste=3 bwaste=32760 waste=32760 efficiency=0
    Rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 4) rejected: requirement 'min bits 128' not met.
  Checking rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 5):
    Bram geometry: abits=14 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_TDP: awaste=16376 dwaste=1 bwaste=32760 waste=32760 efficiency=0
    Rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 5) rejected: requirement 'min bits 128' not met.
  Checking rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 6):
    Bram geometry: abits=15 dbits=1 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_TDP: awaste=32760 dwaste=0 bwaste=32760 waste=32760 efficiency=0
    Rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 6) rejected: requirement 'min bits 128' not met.
  Checking rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 1):
    Bram geometry: abits=10 dbits=36 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_SDP: awaste=1016 dwaste=35 bwaste=36856 waste=36856 efficiency=0
    Rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 1) rejected: requirement 'min bits 128' not met.
  Checking rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 2):
    Bram geometry: abits=11 dbits=18 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_SDP: awaste=2040 dwaste=17 bwaste=36856 waste=36856 efficiency=0
    Rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 2) rejected: requirement 'min bits 128' not met.
  Checking rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 3):
    Bram geometry: abits=12 dbits=9 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_SDP: awaste=4088 dwaste=8 bwaste=36856 waste=36856 efficiency=0
    Rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 3) rejected: requirement 'min bits 128' not met.
  Checking rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 4):
    Bram geometry: abits=13 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_SDP: awaste=8184 dwaste=3 bwaste=32760 waste=32760 efficiency=0
    Rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 4) rejected: requirement 'min bits 128' not met.
  Checking rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 5):
    Bram geometry: abits=14 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_SDP: awaste=16376 dwaste=1 bwaste=32760 waste=32760 efficiency=0
    Rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 5) rejected: requirement 'min bits 128' not met.
  Checking rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 6):
    Bram geometry: abits=15 dbits=1 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_SDP: awaste=32760 dwaste=0 bwaste=32760 waste=32760 efficiency=0
    Rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 6) rejected: requirement 'min bits 128' not met.
  No acceptable bram resources found.

yosys> techmap -map +/rapidsilicon/genesis/brams_map.v

3.76. Executing TECHMAP pass (map to technology primitives).

3.76.1. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/brams_map.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__RS_FACTOR_BRAM36_TDP'.
Generating RTLIL representation for module `\$__RS_FACTOR_BRAM18_TDP'.
/nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/brams_map.v:236: Warning: Range [2:0] select out of bounds on signal `\DOP': Setting 1 MSB bits to undef.
Generating RTLIL representation for module `\$__RS_FACTOR_BRAM36_SDP'.
Successfully finished Verilog frontend.

3.76.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~5 debug messages>

yosys> pmuxtree

3.77. Executing PMUXTREE pass.

yosys> muxpack

3.78. Executing MUXPACK pass ($mux cell cascades to $pmux).
Converted 0 (p)mux cells into 0 pmux cells.
<suppressed ~30 debug messages>

yosys> memory_map

3.79. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).
Mapping memory $auto$memory_bmux2rom.cc:63:execute$337 in module \key_schedule:
  created 8 $dff cells and 0 static cells of width 1.
Extracted data FF from read port 0 of key_schedule.$auto$memory_bmux2rom.cc:63:execute$337: $$auto$memory_bmux2rom.cc:63:execute$337$rdreg[0]
  read interface: 1 $dff and 7 $mux cells.
  write interface: 0 write mux blocks.
Mapping memory $auto$memory_bmux2rom.cc:63:execute$340 in module \key_schedule:
  created 8 $dff cells and 0 static cells of width 1.
Extracted data FF from read port 0 of key_schedule.$auto$memory_bmux2rom.cc:63:execute$340: $$auto$memory_bmux2rom.cc:63:execute$340$rdreg[0]
  read interface: 1 $dff and 7 $mux cells.
  write interface: 0 write mux blocks.
Mapping memory $auto$memory_bmux2rom.cc:63:execute$343 in module \key_schedule:
  created 16 $dff cells and 0 static cells of width 1.
Extracted data FF from read port 0 of key_schedule.$auto$memory_bmux2rom.cc:63:execute$343: $$auto$memory_bmux2rom.cc:63:execute$343$rdreg[0]
  read interface: 1 $dff and 15 $mux cells.
  write interface: 0 write mux blocks.
Mapping memory $auto$memory_bmux2rom.cc:63:execute$346 in module \key_schedule:
  created 16 $dff cells and 0 static cells of width 1.
Extracted data FF from read port 0 of key_schedule.$auto$memory_bmux2rom.cc:63:execute$346: $$auto$memory_bmux2rom.cc:63:execute$346$rdreg[0]
  read interface: 1 $dff and 15 $mux cells.
  write interface: 0 write mux blocks.
Mapping memory $auto$memory_bmux2rom.cc:63:execute$349 in module \key_schedule:
  created 16 $dff cells and 0 static cells of width 1.
Extracted data FF from read port 0 of key_schedule.$auto$memory_bmux2rom.cc:63:execute$349: $$auto$memory_bmux2rom.cc:63:execute$349$rdreg[0]
  read interface: 1 $dff and 15 $mux cells.
  write interface: 0 write mux blocks.
Mapping memory $auto$memory_bmux2rom.cc:63:execute$352 in module \key_schedule:
  created 16 $dff cells and 0 static cells of width 1.
Extracted data FF from read port 0 of key_schedule.$auto$memory_bmux2rom.cc:63:execute$352: $$auto$memory_bmux2rom.cc:63:execute$352$rdreg[0]
  read interface: 1 $dff and 15 $mux cells.
  write interface: 0 write mux blocks.
Mapping memory $auto$memory_bmux2rom.cc:63:execute$355 in module \key_schedule:
  created 16 $dff cells and 0 static cells of width 1.
Extracted data FF from read port 0 of key_schedule.$auto$memory_bmux2rom.cc:63:execute$355: $$auto$memory_bmux2rom.cc:63:execute$355$rdreg[0]
  read interface: 1 $dff and 15 $mux cells.
  write interface: 0 write mux blocks.
Mapping memory $auto$memory_bmux2rom.cc:63:execute$358 in module \key_schedule:
  created 8 $dff cells and 0 static cells of width 1.
Extracted data FF from read port 0 of key_schedule.$auto$memory_bmux2rom.cc:63:execute$358: $$auto$memory_bmux2rom.cc:63:execute$358$rdreg[0]
  read interface: 1 $dff and 7 $mux cells.
  write interface: 0 write mux blocks.

yosys> stat

3.80. Printing statistics.

=== key_schedule ===

   Number of wires:                533
   Number of wire bits:           2281
   Number of public wires:          36
   Number of public wire bits:     672
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                293
     $alu                            2
     $and                            2
     $dff                          112
     $dffe                          10
     $eq                             5
     $mux                          137
     $ne                             8
     $or                             1
     $reduce_and                     8
     $reduce_bool                    3
     $xor                            5


yosys> techmap -map +/techmap.v -map +/rapidsilicon/genesis/arith_map.v

3.81. Executing TECHMAP pass (map to technology primitives).

3.81.1. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.81.2. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/arith_map.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_rs_alu'.
Successfully finished Verilog frontend.

3.81.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $reduce_and.
Using template $paramod$32a7b7b86c07519b7537abc18e96f0331f97914d\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $dffe.
Using extmapper simplemap for cells of type $and.
Using template $paramod$3ef7d3dd227da7627a99c5e5a6a4deb817573e39\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $reduce_bool.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000100 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $not.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000011 for cells of type $lcu.
No more expansions possible.
<suppressed ~823 debug messages>

yosys> stat

3.82. Printing statistics.

=== key_schedule ===

   Number of wires:                663
   Number of wire bits:           4733
   Number of public wires:          36
   Number of public wire bits:     672
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1708
     $_AND_                         42
     $_DFFE_PP_                    263
     $_DFF_P_                      112
     $_MUX_                       1017
     $_NOT_                         12
     $_OR_                          55
     $_XOR_                        207


yosys> opt_expr

3.83. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.
<suppressed ~389 debug messages>

yosys> opt_merge -nomux

3.84. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
<suppressed ~171 debug messages>
Removed a total of 57 cells.

yosys> opt_muxtree

3.85. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \key_schedule..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.86. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \key_schedule.
Performed a total of 0 changes.

yosys> opt_merge

3.87. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
Removed a total of 0 cells.

yosys> opt_share

3.88. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.89. Executing OPT_DFF pass (perform DFF optimizations).
Handling const CLK on $auto$ff.cc:262:slice$1484 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1048 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2539 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2572 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2583 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2608 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2466 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$999 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2582 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1188 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2471 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2577 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1286 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1000 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1004 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2394 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2478 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2476 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2477 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2479 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2601 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2600 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2599 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2609 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2610 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2611 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2612 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2613 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2614 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2615 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2616 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2617 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2634 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2635 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2636 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2637 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2638 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2639 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2640 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2641 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2642 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2643 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2644 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2645 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2646 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2647 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2648 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2649 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2666 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2667 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2668 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2669 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2670 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2671 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2672 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2673 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2674 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2675 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2676 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2677 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2678 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2679 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2680 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2681 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2698 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2699 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2700 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2701 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2702 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2703 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2704 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2705 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2706 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2707 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2708 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2709 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2710 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2711 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2712 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2713 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2730 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2731 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2732 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2733 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2734 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2735 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2736 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2737 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2738 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2739 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2740 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2741 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2742 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2743 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2744 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2745 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2762 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2763 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2764 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2765 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2766 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2767 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2768 ($_DFF_P_) from module key_schedule (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$2769 ($_DFF_P_) from module key_schedule (removing D path).

yosys> opt_clean

3.90. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..
Removed 6 unused cells and 444 unused wires.
<suppressed ~7 debug messages>

yosys> opt_expr

3.91. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.
<suppressed ~60 debug messages>

yosys> opt_muxtree

3.92. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \key_schedule..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.93. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \key_schedule.
Performed a total of 0 changes.

yosys> opt_merge

3.94. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
<suppressed ~36 debug messages>
Removed a total of 12 cells.

yosys> opt_share

3.95. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.96. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.97. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..
Removed 0 unused cells and 72 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.98. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.

yosys> opt_muxtree

3.99. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \key_schedule..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.100. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \key_schedule.
Performed a total of 0 changes.

yosys> opt_merge

3.101. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
Removed a total of 0 cells.

yosys> opt_share

3.102. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.103. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.104. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..

yosys> opt_expr

3.105. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.
MAX OPT ITERATION = 3

yosys> opt_expr -full

3.106. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.
<suppressed ~442 debug messages>

yosys> techmap -map +/techmap.v

3.107. Executing TECHMAP pass (map to technology primitives).

3.107.1. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.107.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~71 debug messages>

yosys> opt_expr

3.108. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.

yosys> opt_merge -nomux

3.109. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.110. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \key_schedule..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.111. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \key_schedule.
Performed a total of 0 changes.

yosys> opt_merge

3.112. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
Removed a total of 0 cells.

yosys> opt_dff -nosdff -nodffe -sat

3.113. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.114. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..
Removed 1 unused cells and 22 unused wires.
<suppressed ~2 debug messages>

yosys> opt_expr

3.115. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.

yosys> opt_muxtree

3.116. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \key_schedule..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.117. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \key_schedule.
Performed a total of 0 changes.

yosys> opt_merge

3.118. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
Removed a total of 0 cells.

yosys> opt_dff -nosdff -nodffe -sat

3.119. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.120. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..

yosys> opt_expr

3.121. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.
MAX OPT ITERATION = 2

yosys> abc -dff

3.122. Executing ABC pass (technology mapping using ABC).

3.122.1. Summary of detected clock domains:
  132 cells in clk=\clk, en=$auto$opt_dff.cc:219:make_patterns_logic$248, arst={ }, srst={ }
  67 cells in clk=\clk, en=$auto$opt_dff.cc:219:make_patterns_logic$303, arst={ }, srst={ }
  71 cells in clk=\clk, en=$auto$opt_dff.cc:219:make_patterns_logic$314, arst={ }, srst={ }
  66 cells in clk=\clk, en=$auto$opt_dff.cc:219:make_patterns_logic$323, arst={ }, srst={ }
  24 cells in clk=\clk, en=$auto$opt_dff.cc:194:make_patterns_logic$326, arst={ }, srst={ }
  133 cells in clk=\clk, en=$auto$opt_dff.cc:219:make_patterns_logic$259, arst={ }, srst={ }
  133 cells in clk=\clk, en=$auto$opt_dff.cc:219:make_patterns_logic$268, arst={ }, srst={ }
  103 cells in clk=\clk, en=$auto$opt_dff.cc:219:make_patterns_logic$275, arst={ }, srst={ }
  78 cells in clk=\clk, en=$auto$opt_dff.cc:219:make_patterns_logic$290, arst={ }, srst={ }
  33 cells in clk=\clk, en={ }, arst={ }, srst={ }
  29 cells in clk=\clk, en=$auto$opt_dff.cc:194:make_patterns_logic$329, arst={ }, srst={ }

3.122.2. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:219:make_patterns_logic$248
Extracted 132 gates and 204 wires to a netlist network with 71 inputs and 34 outputs.

3.122.2.1. Executing ABC.

3.122.3. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:219:make_patterns_logic$303
Extracted 67 gates and 105 wires to a netlist network with 37 inputs and 33 outputs.

3.122.3.1. Executing ABC.

3.122.4. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:219:make_patterns_logic$314
Extracted 71 gates and 110 wires to a netlist network with 38 inputs and 36 outputs.

3.122.4.1. Executing ABC.

3.122.5. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:219:make_patterns_logic$323
Extracted 66 gates and 103 wires to a netlist network with 36 inputs and 33 outputs.

3.122.5.1. Executing ABC.

3.122.6. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:194:make_patterns_logic$326
Extracted 24 gates and 27 wires to a netlist network with 2 inputs and 5 outputs.

3.122.6.1. Executing ABC.

3.122.7. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:219:make_patterns_logic$259
Extracted 133 gates and 205 wires to a netlist network with 71 inputs and 67 outputs.

3.122.7.1. Executing ABC.

3.122.8. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:219:make_patterns_logic$268
Extracted 133 gates and 204 wires to a netlist network with 70 inputs and 67 outputs.

3.122.8.1. Executing ABC.

3.122.9. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:219:make_patterns_logic$275
Extracted 103 gates and 149 wires to a netlist network with 45 inputs and 38 outputs.

3.122.9.1. Executing ABC.

3.122.10. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:219:make_patterns_logic$290
Extracted 78 gates and 125 wires to a netlist network with 46 inputs and 38 outputs.

3.122.10.1. Executing ABC.

3.122.11. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk
Extracted 33 gates and 46 wires to a netlist network with 11 inputs and 8 outputs.

3.122.11.1. Executing ABC.

3.122.12. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:194:make_patterns_logic$329
Extracted 29 gates and 33 wires to a netlist network with 3 inputs and 6 outputs.

3.122.12.1. Executing ABC.

yosys> abc -dff

3.123. Executing ABC pass (technology mapping using ABC).

3.123.1. Summary of detected clock domains:
  225 cells in clk=\clk, en=$abc$3716$auto$opt_dff.cc:219:make_patterns_logic$268, arst={ }, srst={ }
  13 cells in clk=\clk, en=$abc$3472$auto$opt_dff.cc:194:make_patterns_logic$326, arst={ }, srst={ }
  198 cells in clk=\clk, en=$abc$3486$auto$opt_dff.cc:219:make_patterns_logic$259, arst={ }, srst={ }
  126 cells in clk=\clk, en=$abc$3946$auto$opt_dff.cc:219:make_patterns_logic$275, arst={ }, srst={ }
  79 cells in clk=\clk, en=$abc$4085$auto$opt_dff.cc:219:make_patterns_logic$290, arst={ }, srst={ }
  31 cells in clk=\clk, en={ }, arst={ }, srst={ }
  165 cells in clk=\clk, en=$abc$2973$auto$opt_dff.cc:219:make_patterns_logic$248, arst={ }, srst={ }
  67 cells in clk=\clk, en=$abc$3170$auto$opt_dff.cc:219:make_patterns_logic$303, arst={ }, srst={ }
  68 cells in clk=\clk, en=$abc$3270$auto$opt_dff.cc:219:make_patterns_logic$314, arst={ }, srst={ }
  63 cells in clk=\clk, en=$abc$3373$auto$opt_dff.cc:219:make_patterns_logic$323, arst={ }, srst={ }
  23 cells in clk=\clk, en=$abc$4236$auto$opt_dff.cc:194:make_patterns_logic$329, arst={ }, srst={ }

3.123.2. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$3716$auto$opt_dff.cc:219:make_patterns_logic$268
Extracted 225 gates and 328 wires to a netlist network with 103 inputs and 67 outputs.

3.123.2.1. Executing ABC.

3.123.3. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$3472$auto$opt_dff.cc:194:make_patterns_logic$326
Extracted 13 gates and 15 wires to a netlist network with 2 inputs and 5 outputs.

3.123.3.1. Executing ABC.

3.123.4. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$3486$auto$opt_dff.cc:219:make_patterns_logic$259
Extracted 198 gates and 302 wires to a netlist network with 104 inputs and 68 outputs.

3.123.4.1. Executing ABC.

3.123.5. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$3946$auto$opt_dff.cc:219:make_patterns_logic$275
Extracted 126 gates and 177 wires to a netlist network with 51 inputs and 48 outputs.

3.123.5.1. Executing ABC.

3.123.6. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$4085$auto$opt_dff.cc:219:make_patterns_logic$290
Extracted 79 gates and 123 wires to a netlist network with 44 inputs and 36 outputs.

3.123.6.1. Executing ABC.

3.123.7. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk
Extracted 31 gates and 42 wires to a netlist network with 11 inputs and 12 outputs.

3.123.7.1. Executing ABC.

3.123.8. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$2973$auto$opt_dff.cc:219:make_patterns_logic$248
Extracted 165 gates and 237 wires to a netlist network with 72 inputs and 35 outputs.

3.123.8.1. Executing ABC.

3.123.9. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$3170$auto$opt_dff.cc:219:make_patterns_logic$303
Extracted 67 gates and 104 wires to a netlist network with 37 inputs and 33 outputs.

3.123.9.1. Executing ABC.

3.123.10. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$3270$auto$opt_dff.cc:219:make_patterns_logic$314
Extracted 68 gates and 106 wires to a netlist network with 38 inputs and 34 outputs.

3.123.10.1. Executing ABC.

3.123.11. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$3373$auto$opt_dff.cc:219:make_patterns_logic$323
Extracted 63 gates and 99 wires to a netlist network with 36 inputs and 34 outputs.

3.123.11.1. Executing ABC.

3.123.12. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$4236$auto$opt_dff.cc:194:make_patterns_logic$329
Extracted 23 gates and 25 wires to a netlist network with 2 inputs and 9 outputs.

3.123.12.1. Executing ABC.

yosys> abc -dff

3.124. Executing ABC pass (technology mapping using ABC).

3.124.1. Summary of detected clock domains:
  206 cells in clk=\clk, en=$abc$4269$abc$3716$auto$opt_dff.cc:219:make_patterns_logic$268, arst={ }, srst={ }
  13 cells in clk=\clk, en=$abc$4492$abc$3472$auto$opt_dff.cc:194:make_patterns_logic$326, arst={ }, srst={ }
  136 cells in clk=\clk, en=$abc$4506$abc$3486$auto$opt_dff.cc:219:make_patterns_logic$259, arst={ }, srst={ }
  149 cells in clk=\clk, en=$abc$4674$abc$3946$auto$opt_dff.cc:219:make_patterns_logic$275, arst={ }, srst={ }
  78 cells in clk=\clk, en=$abc$4833$abc$4085$auto$opt_dff.cc:219:make_patterns_logic$290, arst={ }, srst={ }
  34 cells in clk=\clk, en={ }, arst={ }, srst={ }
  102 cells in clk=\clk, en=$abc$4975$abc$2973$auto$opt_dff.cc:219:make_patterns_logic$248, arst={ }, srst={ }
  67 cells in clk=\clk, en=$abc$5110$abc$3170$auto$opt_dff.cc:219:make_patterns_logic$303, arst={ }, srst={ }
  70 cells in clk=\clk, en=$abc$5210$abc$3270$auto$opt_dff.cc:219:make_patterns_logic$314, arst={ }, srst={ }
  51 cells in clk=\clk, en=$abc$5311$abc$3373$auto$opt_dff.cc:219:make_patterns_logic$323, arst={ }, srst={ }
  24 cells in clk=\clk, en=$abc$5411$abc$4236$auto$opt_dff.cc:194:make_patterns_logic$329, arst={ }, srst={ }

3.124.2. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$4269$abc$3716$auto$opt_dff.cc:219:make_patterns_logic$268
Extracted 206 gates and 307 wires to a netlist network with 101 inputs and 66 outputs.

3.124.2.1. Executing ABC.

3.124.3. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$4492$abc$3472$auto$opt_dff.cc:194:make_patterns_logic$326
Extracted 13 gates and 15 wires to a netlist network with 2 inputs and 5 outputs.

3.124.3.1. Executing ABC.

3.124.4. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$4506$abc$3486$auto$opt_dff.cc:219:make_patterns_logic$259
Extracted 136 gates and 240 wires to a netlist network with 104 inputs and 67 outputs.

3.124.4.1. Executing ABC.

3.124.5. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$4674$abc$3946$auto$opt_dff.cc:219:make_patterns_logic$275
Extracted 149 gates and 209 wires to a netlist network with 60 inputs and 63 outputs.

3.124.5.1. Executing ABC.

3.124.6. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$4833$abc$4085$auto$opt_dff.cc:219:make_patterns_logic$290
Extracted 78 gates and 121 wires to a netlist network with 43 inputs and 36 outputs.

3.124.6.1. Executing ABC.

3.124.7. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk
Extracted 34 gates and 47 wires to a netlist network with 13 inputs and 12 outputs.

3.124.7.1. Executing ABC.

3.124.8. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$4975$abc$2973$auto$opt_dff.cc:219:make_patterns_logic$248
Extracted 102 gates and 174 wires to a netlist network with 72 inputs and 35 outputs.

3.124.8.1. Executing ABC.

3.124.9. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$5110$abc$3170$auto$opt_dff.cc:219:make_patterns_logic$303
Extracted 67 gates and 104 wires to a netlist network with 37 inputs and 33 outputs.

3.124.9.1. Executing ABC.

3.124.10. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$5210$abc$3270$auto$opt_dff.cc:219:make_patterns_logic$314
Extracted 70 gates and 109 wires to a netlist network with 39 inputs and 35 outputs.

3.124.10.1. Executing ABC.

3.124.11. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$5311$abc$3373$auto$opt_dff.cc:219:make_patterns_logic$323
Extracted 51 gates and 87 wires to a netlist network with 36 inputs and 34 outputs.

3.124.11.1. Executing ABC.

3.124.12. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$5411$abc$4236$auto$opt_dff.cc:194:make_patterns_logic$329
Extracted 24 gates and 26 wires to a netlist network with 2 inputs and 11 outputs.

3.124.12.1. Executing ABC.

yosys> abc -dff

3.125. Executing ABC pass (technology mapping using ABC).

3.125.1. Summary of detected clock domains:
  70 cells in clk=\clk, en=$abc$6382$abc$5210$abc$3270$auto$opt_dff.cc:219:make_patterns_logic$314, arst={ }, srst={ }
  67 cells in clk=\clk, en=$abc$6282$abc$5110$abc$3170$auto$opt_dff.cc:219:make_patterns_logic$303, arst={ }, srst={ }
  163 cells in clk=\clk, en=$abc$5440$abc$4269$abc$3716$auto$opt_dff.cc:219:make_patterns_logic$268, arst={ }, srst={ }
  13 cells in clk=\clk, en=$abc$5644$abc$4492$abc$3472$auto$opt_dff.cc:194:make_patterns_logic$326, arst={ }, srst={ }
  159 cells in clk=\clk, en=$abc$5658$abc$4506$abc$3486$auto$opt_dff.cc:219:make_patterns_logic$259, arst={ }, srst={ }
  154 cells in clk=\clk, en=$abc$5829$abc$4674$abc$3946$auto$opt_dff.cc:219:make_patterns_logic$275, arst={ }, srst={ }
  76 cells in clk=\clk, en=$abc$6001$abc$4833$abc$4085$auto$opt_dff.cc:219:make_patterns_logic$290, arst={ }, srst={ }
  34 cells in clk=\clk, en={ }, arst={ }, srst={ }
  103 cells in clk=\clk, en=$abc$6147$abc$4975$abc$2973$auto$opt_dff.cc:219:make_patterns_logic$248, arst={ }, srst={ }
  52 cells in clk=\clk, en=$abc$6485$abc$5311$abc$3373$auto$opt_dff.cc:219:make_patterns_logic$323, arst={ }, srst={ }
  24 cells in clk=\clk, en=$abc$6585$abc$5411$abc$4236$auto$opt_dff.cc:194:make_patterns_logic$329, arst={ }, srst={ }

3.125.2. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$6382$abc$5210$abc$3270$auto$opt_dff.cc:219:make_patterns_logic$314
Extracted 70 gates and 109 wires to a netlist network with 39 inputs and 35 outputs.

3.125.2.1. Executing ABC.

3.125.3. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$6282$abc$5110$abc$3170$auto$opt_dff.cc:219:make_patterns_logic$303
Extracted 67 gates and 104 wires to a netlist network with 37 inputs and 33 outputs.

3.125.3.1. Executing ABC.

3.125.4. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$5440$abc$4269$abc$3716$auto$opt_dff.cc:219:make_patterns_logic$268
Extracted 163 gates and 244 wires to a netlist network with 81 inputs and 54 outputs.

3.125.4.1. Executing ABC.

3.125.5. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$5644$abc$4492$abc$3472$auto$opt_dff.cc:194:make_patterns_logic$326
Extracted 13 gates and 15 wires to a netlist network with 2 inputs and 5 outputs.

3.125.5.1. Executing ABC.

3.125.6. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$5658$abc$4506$abc$3486$auto$opt_dff.cc:219:make_patterns_logic$259
Extracted 159 gates and 262 wires to a netlist network with 103 inputs and 67 outputs.

3.125.6.1. Executing ABC.

3.125.7. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$5829$abc$4674$abc$3946$auto$opt_dff.cc:219:make_patterns_logic$275
Extracted 154 gates and 220 wires to a netlist network with 66 inputs and 64 outputs.

3.125.7.1. Executing ABC.

3.125.8. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$6001$abc$4833$abc$4085$auto$opt_dff.cc:219:make_patterns_logic$290
Extracted 76 gates and 119 wires to a netlist network with 43 inputs and 36 outputs.

3.125.8.1. Executing ABC.

3.125.9. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk
Extracted 34 gates and 47 wires to a netlist network with 13 inputs and 13 outputs.

3.125.9.1. Executing ABC.

3.125.10. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$6147$abc$4975$abc$2973$auto$opt_dff.cc:219:make_patterns_logic$248
Extracted 103 gates and 175 wires to a netlist network with 72 inputs and 35 outputs.

3.125.10.1. Executing ABC.

3.125.11. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$6485$abc$5311$abc$3373$auto$opt_dff.cc:219:make_patterns_logic$323
Extracted 52 gates and 88 wires to a netlist network with 36 inputs and 34 outputs.

3.125.11.1. Executing ABC.

3.125.12. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$6585$abc$5411$abc$4236$auto$opt_dff.cc:194:make_patterns_logic$329
Extracted 24 gates and 26 wires to a netlist network with 2 inputs and 11 outputs.

3.125.12.1. Executing ABC.

yosys> opt_ffinv

3.126. Executing OPT_FFINV pass (push inverters through FFs).
Discovering LUTs.
Pushed 0 inverters.

yosys> opt_expr

3.127. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.
<suppressed ~5 debug messages>

yosys> opt_merge -nomux

3.128. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
<suppressed ~21 debug messages>
Removed a total of 7 cells.

yosys> opt_muxtree

3.129. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \key_schedule..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.130. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \key_schedule.
Performed a total of 0 changes.

yosys> opt_merge

3.131. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
Removed a total of 0 cells.

yosys> opt_share

3.132. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -sat

3.133. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.134. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..
Removed 1 unused cells and 6054 unused wires.
<suppressed ~10 debug messages>

yosys> opt_expr

3.135. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.

yosys> opt_muxtree

3.136. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \key_schedule..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.137. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \key_schedule.
Performed a total of 0 changes.

yosys> opt_merge

3.138. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
Removed a total of 0 cells.

yosys> opt_share

3.139. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -sat

3.140. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.141. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..

yosys> opt_expr

3.142. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.
MAX OPT ITERATION = 2

yosys> bmuxmap

3.143. Executing BMUXMAP pass.

yosys> demuxmap

3.144. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> abc -script /tmp/yosys_PTo66X/abc_tmp_1.scr

3.145. Executing ABC pass (technology mapping using ABC).

3.145.1. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Extracted 672 gates and 944 wires to a netlist network with 272 inputs and 280 outputs.

3.145.1.1. Executing ABC.
DE:   #PIs = 272  #Luts =   288  Max Lvl =   4  Avg Lvl =   1.08  [   0.26 sec. at Pass 0]
DE:   #PIs = 272  #Luts =   288  Max Lvl =   2  Avg Lvl =   1.06  [   1.88 sec. at Pass 1]
DE:   #PIs = 272  #Luts =   284  Max Lvl =   3  Avg Lvl =   1.34  [   0.28 sec. at Pass 2]
DE:   #PIs = 272  #Luts =   283  Max Lvl =   3  Avg Lvl =   1.41  [   0.65 sec. at Pass 3]
DE:   #PIs = 272  #Luts =   283  Max Lvl =   3  Avg Lvl =   1.41  [   0.50 sec. at Pass 4]
DE:   #PIs = 272  #Luts =   283  Max Lvl =   3  Avg Lvl =   1.41  [   1.43 sec. at Pass 5]
DE:   #PIs = 272  #Luts =   283  Max Lvl =   3  Avg Lvl =   1.41  [   0.91 sec. at Pass 6]
DE:   #PIs = 272  #Luts =   283  Max Lvl =   3  Avg Lvl =   1.41  [   0.82 sec. at Pass 7]
DE:   #PIs = 272  #Luts =   283  Max Lvl =   3  Avg Lvl =   1.41  [   0.41 sec. at Pass 8]

yosys> opt_expr

3.146. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.

yosys> opt_merge -nomux

3.147. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.148. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \key_schedule..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.149. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \key_schedule.
Performed a total of 0 changes.

yosys> opt_merge

3.150. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
Removed a total of 0 cells.

yosys> opt_share

3.151. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.152. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.153. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..
Removed 0 unused cells and 944 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.154. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.
MAX OPT ITERATION = 1

yosys> opt_ffinv

3.155. Executing OPT_FFINV pass (push inverters through FFs).
Discovering LUTs.
Pushed 0 inverters.

yosys> stat

3.156. Printing statistics.

=== key_schedule ===

   Number of wires:                423
   Number of wire bits:            964
   Number of public wires:          28
   Number of public wire bits:     569
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                552
     $_DFFE_PN_                      4
     $_DFFE_PP_                    259
     $_DFF_P_                        6
     $lut                          283


yosys> shregmap -minlen 8 -maxlen 20

3.157. Executing SHREGMAP pass (map shift registers).
Converted 0 dff cells into 0 shift registers.

yosys> dfflegalize -cell $_DFF_?_ 0 -cell $_DFF_???_ 0 -cell $_DFFE_????_ 0 -cell $_DFFSR_???_ 0 -cell $_DFFSRE_????_ 0 -cell $_DLATCHSR_PPP_ 0

3.158. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

yosys> stat

3.159. Printing statistics.

=== key_schedule ===

   Number of wires:                423
   Number of wire bits:            964
   Number of public wires:          28
   Number of public wire bits:     569
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                552
     $_DFFE_PP0N_                    4
     $_DFFE_PP0P_                  259
     $_DFF_P_                        6
     $lut                          283


yosys> techmap -map +/techmap.v -map +/rapidsilicon/genesis/ffs_map.v

3.160. Executing TECHMAP pass (map to technology primitives).

3.160.1. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.160.2. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/ffs_map.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/davit/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/ffs_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP0N_'.
Generating RTLIL representation for module `\$_DFFE_PN0P_'.
Generating RTLIL representation for module `\$_DFFE_PN0N_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP1N_'.
Generating RTLIL representation for module `\$_DFFE_PN1P_'.
Generating RTLIL representation for module `\$_DFFE_PN1N_'.
Generating RTLIL representation for module `\$_DFFSR_PPP_'.
Generating RTLIL representation for module `\$_DFFSR_PNP_'.
Generating RTLIL representation for module `\$_DFFSR_PNN_'.
Generating RTLIL representation for module `\$_DFFSR_PPN_'.
Generating RTLIL representation for module `\$_DFFSR_NPP_'.
Generating RTLIL representation for module `\$_DFFSR_NNP_'.
Generating RTLIL representation for module `\$_DFFSR_NNN_'.
Generating RTLIL representation for module `\$_DFFSR_NPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PNPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPNP_'.
Generating RTLIL representation for module `\$_DFFSRE_PNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PNPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PPNN_'.
Generating RTLIL representation for module `\$_DFFSRE_PNNN_'.
Generating RTLIL representation for module `\$_DLATCHSR_PPP_'.
Generating RTLIL representation for module `\$_DLATCHSR_NPP_'.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP0N_'.
Generating RTLIL representation for module `\$_DFFE_NN0P_'.
Generating RTLIL representation for module `\$_DFFE_NN0N_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_NP1N_'.
Generating RTLIL representation for module `\$_DFFE_NN1P_'.
Generating RTLIL representation for module `\$_DFFE_NN1N_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNPP_'.
Generating RTLIL representation for module `\$_DFFSRE_NPNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPN_'.
Generating RTLIL representation for module `\$_DFFSRE_NNPN_'.
Generating RTLIL representation for module `\$_DFFSRE_NPNN_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNN_'.
Generating RTLIL representation for module `\$__SHREG_DFF_P_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PN0_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NN0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFF_PN1_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_NN1_'.
Successfully finished Verilog frontend.

3.160.3. Continuing TECHMAP pass.
Using template \$_DFFE_PP0P_ for cells of type $_DFFE_PP0P_.
Using extmapper simplemap for cells of type $lut.
Using template \$_DFF_P_ for cells of type $_DFF_P_.
Using template \$_DFFE_PP0N_ for cells of type $_DFFE_PP0N_.
Using extmapper simplemap for cells of type $logic_not.
No more expansions possible.
<suppressed ~955 debug messages>

yosys> opt_expr -mux_undef

3.161. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.
<suppressed ~2441 debug messages>

yosys> simplemap

3.162. Executing SIMPLEMAP pass (map simple cells to gate primitives).

yosys> opt_expr

3.163. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.

yosys> opt_merge

3.164. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
<suppressed ~1575 debug messages>
Removed a total of 525 cells.

yosys> opt_dff -nodffe -nosdff

3.165. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.166. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..
Removed 0 unused cells and 2202 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.167. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.
<suppressed ~36 debug messages>

yosys> opt_merge -nomux

3.168. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.169. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \key_schedule..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.170. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \key_schedule.
Performed a total of 0 changes.

yosys> opt_merge

3.171. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
Removed a total of 0 cells.

yosys> opt_share

3.172. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.173. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.174. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..
Removed 0 unused cells and 22 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.175. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.
MAX OPT ITERATION = 1

yosys> abc -script /tmp/yosys_PTo66X/abc_tmp_2.scr

3.176. Executing ABC pass (technology mapping using ABC).

3.176.1. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Extracted 874 gates and 1148 wires to a netlist network with 272 inputs and 280 outputs.

3.176.1.1. Executing ABC.
DE:   #PIs = 272  #Luts =   284  Max Lvl =   4  Avg Lvl =   1.42  [   0.12 sec. at Pass 0]
DE:   #PIs = 272  #Luts =   283  Max Lvl =   3  Avg Lvl =   1.42  [   0.50 sec. at Pass 1]
DE:   #PIs = 272  #Luts =   283  Max Lvl =   3  Avg Lvl =   1.42  [   0.22 sec. at Pass 2]
DE:   #PIs = 272  #Luts =   283  Max Lvl =   3  Avg Lvl =   1.42  [   0.15 sec. at Pass 3]
DE:   #PIs = 272  #Luts =   283  Max Lvl =   3  Avg Lvl =   1.42  [   1.08 sec. at Pass 4]
DE:   #PIs = 272  #Luts =   283  Max Lvl =   3  Avg Lvl =   1.42  [   0.87 sec. at Pass 5]
DE:   #PIs = 272  #Luts =   283  Max Lvl =   3  Avg Lvl =   1.42  [   0.67 sec. at Pass 6]
DE:   #PIs = 272  #Luts =   283  Max Lvl =   3  Avg Lvl =   1.42  [   0.26 sec. at Pass 7]

yosys> opt_expr

3.177. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.

yosys> opt_merge -nomux

3.178. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.179. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \key_schedule..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.180. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \key_schedule.
Performed a total of 0 changes.

yosys> opt_merge

3.181. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
Removed a total of 0 cells.

yosys> opt_share

3.182. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.183. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.184. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..
Removed 0 unused cells and 924 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.185. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.
MAX OPT ITERATION = 1

yosys> hierarchy -check

3.186. Executing HIERARCHY pass (managing design hierarchy).

3.186.1. Analyzing design hierarchy..
Top module:  \key_schedule

3.186.2. Analyzing design hierarchy..
Top module:  \key_schedule
Removed 0 unused modules.

yosys> stat

3.187. Printing statistics.

=== key_schedule ===

   Number of wires:                423
   Number of wire bits:            964
   Number of public wires:          28
   Number of public wire bits:     569
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                552
     $lut                          283
     dffsre                        269


yosys> opt_clean -purge

3.188. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..
Removed 0 unused cells and 18 unused wires.
<suppressed ~18 debug messages>

yosys> write_verilog -noattr -nohex synthesized.v

3.189. Executing Verilog backend.
Dumping module `\key_schedule'.

Warnings: 1 unique messages, 1 total
End of script. Logfile hash: 1860c5fca1, CPU: user 2.26s system 0.12s, MEM: 41.77 MB peak
Yosys 0.18+10 (git sha1 c98b0e94e, gcc 9.4.0 -fPIC -Os)
Time spent: 88% 6x abc (14 sec), 3% 33x opt_expr (0 sec), ...
real 35.28
user 13.49
sys 3.31
