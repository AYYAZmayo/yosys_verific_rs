
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys-Verific 0.0.140
 Yosys 0.18+10 (git sha1 92b23013e, gcc 11.2.0 -fPIC -Os)


-- Executing script file `yosys.ys' --
echo on

yosys> plugin -i synth-rs

yosys> read -verific

yosys> read -incdir .

yosys> verific -vlog-incdir .

1. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Sep22_SW_Release, released at Fri Sep 30 20:01:32 2022.

yosys> verilog_defaults -add -I.

yosys> read -vlog2k mux.v demux.v wrapper_io_reg_max.v

yosys> verific -vlog2k mux.v demux.v wrapper_io_reg_max.v

2. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Sep22_SW_Release, released at Fri Sep 30 20:01:32 2022.
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'mux.v'
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'demux.v'
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'wrapper_io_reg_max.v'
VERIFIC-INFO [VERI-2561] wrapper_io_reg_max.v:15: undeclared symbol 'mux_out', assumed default net type 'wire'

yosys> synth_rs -top wrapper_io_reg_max -tech genesis2 -goal area -de -verilog synthesized.v

3. Executing synth_rs pass: v0.4.116

yosys> read_verilog -lib -specify -nomem2reg +/rapidsilicon/common/cells_sim.v +/rapidsilicon/genesis2/cells_sim.v +/rapidsilicon/genesis2/dsp_sim.v +/rapidsilicon/genesis2/brams_sim.v

3.1. Executing Verilog-2005 frontend: /nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v
Parsing Verilog input from `/nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\inv'.
Generating RTLIL representation for module `\buff'.
Generating RTLIL representation for module `\logic_0'.
Generating RTLIL representation for module `\logic_1'.
Generating RTLIL representation for module `\gclkbuff'.
Successfully finished Verilog frontend.

3.2. Executing Verilog-2005 frontend: /nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/cells_sim.v
Parsing Verilog input from `/nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\dff'.
Generating RTLIL representation for module `\dffn'.
Generating RTLIL representation for module `\sdff'.
Generating RTLIL representation for module `\sdffn'.
Generating RTLIL representation for module `\dffr'.
Generating RTLIL representation for module `\dffnr'.
Generating RTLIL representation for module `\dffe'.
Generating RTLIL representation for module `\dffne'.
Generating RTLIL representation for module `\sdffre'.
Generating RTLIL representation for module `\sdffnre'.
Generating RTLIL representation for module `\dffre'.
Generating RTLIL representation for module `\dffnre'.
Generating RTLIL representation for module `\latch'.
Generating RTLIL representation for module `\latchn'.
Generating RTLIL representation for module `\latchr'.
Generating RTLIL representation for module `\latchnr'.
Generating RTLIL representation for module `\fa_1bit'.
Successfully finished Verilog frontend.

3.3. Executing Verilog-2005 frontend: /nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/dsp_sim.v
Parsing Verilog input from `/nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/dsp_sim.v' to AST representation.
Generating RTLIL representation for module `\RS_DSP'.
Generating RTLIL representation for module `\RS_DSP_MULT'.
Generating RTLIL representation for module `\RS_DSP_MULT_REGIN'.
Generating RTLIL representation for module `\RS_DSP_MULT_REGOUT'.
Generating RTLIL representation for module `\RS_DSP_MULT_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP_MULTADD'.
Generating RTLIL representation for module `\RS_DSP_MULTADD_REGIN'.
Generating RTLIL representation for module `\RS_DSP_MULTADD_REGOUT'.
Generating RTLIL representation for module `\RS_DSP_MULTADD_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP_MULTACC'.
Generating RTLIL representation for module `\RS_DSP_MULTACC_REGIN'.
Generating RTLIL representation for module `\RS_DSP_MULTACC_REGOUT'.
Generating RTLIL representation for module `\RS_DSP_MULTACC_REGIN_REGOUT'.
Generating RTLIL representation for module `\dsp_t1_20x18x64_cfg_ports'.
Generating RTLIL representation for module `\dsp_t1_sim_cfg_ports'.
Successfully finished Verilog frontend.

3.4. Executing Verilog-2005 frontend: /nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/brams_sim.v
Parsing Verilog input from `/nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/brams_sim.v' to AST representation.
Generating RTLIL representation for module `\TDP_BRAM18'.
Generating RTLIL representation for module `\RS_TDP36K'.
Generating RTLIL representation for module `\BRAM2x18_TDP'.
Generating RTLIL representation for module `\BRAM2x18_SDP'.
Generating RTLIL representation for module `\_$_mem_v2_asymmetric'.
Successfully finished Verilog frontend.

yosys> hierarchy -check -top wrapper_io_reg_max

3.5. Executing HIERARCHY pass (managing design hierarchy).
VERIFIC-INFO [VERI-1018] wrapper_io_reg_max.v:1: compiling module 'wrapper_io_reg_max'
VERIFIC-INFO [VERI-1018] mux.v:2: compiling module 'mux_128_2'
VERIFIC-WARNING [VERI-2580] mux.v:29: latch inferred for net 'in_internal1[127]'
VERIFIC-INFO [VERI-1018] mux.v:47: compiling module 'mux_128x1'
VERIFIC-INFO [VERI-1018] mux.v:61: compiling module 'mux_64x1'
VERIFIC-INFO [VERI-1018] mux.v:75: compiling module 'mux_32x1'
VERIFIC-INFO [VERI-1018] mux.v:89: compiling module 'mux_16x1'
VERIFIC-INFO [VERI-1018] mux.v:103: compiling module 'mux_8x1'
VERIFIC-INFO [VERI-1018] mux.v:117: compiling module 'mux_4x1'
VERIFIC-INFO [VERI-1018] mux.v:131: compiling module 'mux_2x1_reg'
VERIFIC-INFO [VERI-1018] mux.v:149: compiling module 'mux_2x1'
VERIFIC-WARNING [VERI-1330] mux.v:34: actual bit length 8 differs from formal bit length 7 for port 'sel'
VERIFIC-WARNING [VERI-1330] mux.v:40: actual bit length 8 differs from formal bit length 7 for port 'sel'
VERIFIC-WARNING [VERI-1330] wrapper_io_reg_max.v:15: actual bit length 7 differs from formal bit length 8 for port 'sel'
VERIFIC-INFO [VERI-1018] demux.v:2: compiling module 'demux_128_2'
VERIFIC-WARNING [VERI-2580] demux.v:29: latch inferred for net 'in_internal1'
VERIFIC-INFO [VERI-1018] demux.v:47: compiling module 'demux_1x128'
VERIFIC-INFO [VERI-1018] demux.v:133: compiling module 'demux_1x2'
VERIFIC-INFO [VERI-1018] demux.v:61: compiling module 'demux_1x64'
VERIFIC-INFO [VERI-1018] demux.v:75: compiling module 'demux_1x32'
VERIFIC-INFO [VERI-1018] demux.v:90: compiling module 'demux_1x16'
VERIFIC-INFO [VERI-1018] demux.v:104: compiling module 'demux_1x8'
VERIFIC-INFO [VERI-1018] demux.v:118: compiling module 'demux_1x4'
VERIFIC-INFO [VERI-1018] demux.v:142: compiling module 'demux_1x2_reg'
VERIFIC-WARNING [VERI-1330] demux.v:34: actual bit length 8 differs from formal bit length 7 for port 'sel'
VERIFIC-WARNING [VERI-1330] demux.v:40: actual bit length 8 differs from formal bit length 7 for port 'sel'
VERIFIC-WARNING [VERI-1330] wrapper_io_reg_max.v:16: actual bit length 7 differs from formal bit length 8 for port 'sel'
Importing module wrapper_io_reg_max.
Importing module demux_128_2.
Importing module demux_1x128.
Importing module demux_1x2.
Importing module demux_1x64.
Importing module demux_1x32.
Importing module demux_1x16.
Importing module demux_1x8.
Importing module demux_1x4.
Importing module demux_1x2_reg.
Importing module mux_128_2.
Importing module mux_128x1.
Importing module mux_2x1.
Importing module mux_64x1.
Importing module mux_32x1.
Importing module mux_16x1.
Importing module mux_8x1.
Importing module mux_4x1.
Importing module mux_2x1_reg.

3.5.1. Analyzing design hierarchy..
Top module:  \wrapper_io_reg_max
Used module:     \demux_128_2
Used module:         \demux_1x128
Used module:             \demux_1x64
Used module:                 \demux_1x32
Used module:                     \demux_1x16
Used module:                         \demux_1x8
Used module:                             \demux_1x4
Used module:                                 \demux_1x2_reg
Used module:                                 \demux_1x2
Used module:     \mux_128_2
Used module:         \mux_128x1
Used module:             \mux_2x1
Used module:             \mux_64x1
Used module:                 \mux_32x1
Used module:                     \mux_16x1
Used module:                         \mux_8x1
Used module:                             \mux_4x1
Used module:                                 \mux_2x1_reg

3.5.2. Analyzing design hierarchy..
Top module:  \wrapper_io_reg_max
Used module:     \demux_128_2
Used module:         \demux_1x128
Used module:             \demux_1x64
Used module:                 \demux_1x32
Used module:                     \demux_1x16
Used module:                         \demux_1x8
Used module:                             \demux_1x4
Used module:                                 \demux_1x2_reg
Used module:                                 \demux_1x2
Used module:     \mux_128_2
Used module:         \mux_128x1
Used module:             \mux_2x1
Used module:             \mux_64x1
Used module:                 \mux_32x1
Used module:                     \mux_16x1
Used module:                         \mux_8x1
Used module:                             \mux_4x1
Used module:                                 \mux_2x1_reg
Removed 0 unused modules.

yosys> proc

3.6. Executing PROC pass (convert processes to netlists).

yosys> proc_clean

3.6.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> proc_rmdead

3.6.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

yosys> proc_prune

3.6.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

yosys> proc_init

3.6.4. Executing PROC_INIT pass (extract init attributes).

yosys> proc_arst

3.6.5. Executing PROC_ARST pass (detect async resets in processes).

yosys> proc_rom

3.6.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

yosys> proc_mux

3.6.7. Executing PROC_MUX pass (convert decision trees to multiplexers).

yosys> proc_dlatch

3.6.8. Executing PROC_DLATCH pass (convert process syncs to latches).

yosys> proc_dff

3.6.9. Executing PROC_DFF pass (convert process syncs to FFs).

yosys> proc_memwr

3.6.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

yosys> proc_clean

3.6.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> opt_expr -keepdc

3.6.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module mux_2x1_reg.
Optimizing module mux_4x1.
Optimizing module mux_8x1.
Optimizing module mux_16x1.
Optimizing module mux_32x1.
Optimizing module mux_64x1.
Optimizing module mux_2x1.
Optimizing module mux_128x1.
Optimizing module mux_128_2.
<suppressed ~12 debug messages>
Optimizing module demux_1x2_reg.
Optimizing module demux_1x4.
Optimizing module demux_1x8.
Optimizing module demux_1x16.
Optimizing module demux_1x32.
Optimizing module demux_1x64.
Optimizing module demux_1x2.
Optimizing module demux_1x128.
Optimizing module demux_128_2.
<suppressed ~7 debug messages>
Optimizing module wrapper_io_reg_max.

yosys> demuxmap

3.7. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> flatten

3.8. Executing FLATTEN pass (flatten design).
Deleting now unused module demux_128_2.
Deleting now unused module demux_1x128.
Deleting now unused module demux_1x16.
Deleting now unused module demux_1x2.
Deleting now unused module demux_1x2_reg.
Deleting now unused module demux_1x32.
Deleting now unused module demux_1x4.
Deleting now unused module demux_1x64.
Deleting now unused module demux_1x8.
Deleting now unused module mux_128_2.
Deleting now unused module mux_128x1.
Deleting now unused module mux_16x1.
Deleting now unused module mux_2x1.
Deleting now unused module mux_2x1_reg.
Deleting now unused module mux_32x1.
Deleting now unused module mux_4x1.
Deleting now unused module mux_64x1.
Deleting now unused module mux_8x1.
<suppressed ~42 debug messages>

yosys> demuxmap

3.9. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> tribuf -logic -formal

3.10. Executing TRIBUF pass.

yosys> deminout

3.11. Executing DEMINOUT pass (demote inout ports to input or output).

yosys> opt_expr

3.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module wrapper_io_reg_max.

yosys> opt_clean

3.13. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \wrapper_io_reg_max..
Removed 1 unused cells and 8439 unused wires.
<suppressed ~905 debug messages>

yosys> check

3.14. Executing CHECK pass (checking for obvious problems).
Checking module wrapper_io_reg_max...
Found and reported 0 problems.

yosys> opt_expr

3.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module wrapper_io_reg_max.

yosys> opt_merge -nomux

3.16. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\wrapper_io_reg_max'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \wrapper_io_reg_max..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~283 debug messages>

yosys> opt_reduce

3.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \wrapper_io_reg_max.
  Optimizing cells in module \wrapper_io_reg_max.
Performed a total of 5 changes.

yosys> opt_merge

3.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\wrapper_io_reg_max'.
Removed a total of 0 cells.

yosys> opt_share

3.20. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.21. Executing OPT_DFF pass (perform DFF optimizations).
Removing never-active CLR on $flatten\mux0.$verific$sel_internal1_reg$mux.v:29$986 ($dlatchsr) from module wrapper_io_reg_max.
Removing never-active ARST on $flatten\mux0.$verific$sel_internal1_reg$mux.v:29$986 ($dlatchsr) from module wrapper_io_reg_max.
Removing never-active CLR on $flatten\mux0.$verific$sel_internal0_reg$mux.v:29$971 ($dlatchsr) from module wrapper_io_reg_max.
Removing never-active ARST on $flatten\mux0.$verific$sel_internal0_reg$mux.v:29$971 ($dlatchsr) from module wrapper_io_reg_max.
Removing never-active CLR on $flatten\mux0.$verific$in_internal1_reg$mux.v:29$979 ($dlatchsr) from module wrapper_io_reg_max.
Removing never-active ARST on $flatten\mux0.$verific$in_internal1_reg$mux.v:29$979 ($dlatchsr) from module wrapper_io_reg_max.
Removing never-active CLR on $flatten\mux0.$verific$in_internal0_reg$mux.v:29$993 ($dlatchsr) from module wrapper_io_reg_max.
Removing never-active ARST on $flatten\mux0.$verific$in_internal0_reg$mux.v:29$993 ($dlatchsr) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst1.\d128_2.\d64_2.\d32_2.\d16_2.\d8_2.\d4_2.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst1.\d128_2.\d64_2.\d32_2.\d16_2.\d8_2.\d4_1.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst1.\d128_2.\d64_2.\d32_2.\d16_2.\d8_1.\d4_2.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst1.\d128_2.\d64_2.\d32_2.\d16_2.\d8_1.\d4_1.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst1.\d128_2.\d64_2.\d32_2.\d16_1.\d8_2.\d4_2.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst1.\d128_2.\d64_2.\d32_2.\d16_1.\d8_2.\d4_1.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst1.\d128_2.\d64_2.\d32_2.\d16_1.\d8_1.\d4_2.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst1.\d128_2.\d64_2.\d32_2.\d16_1.\d8_1.\d4_1.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst1.\d128_2.\d64_2.\d32_1.\d16_2.\d8_2.\d4_2.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst1.\d128_2.\d64_2.\d32_1.\d16_2.\d8_2.\d4_1.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst1.\d128_2.\d64_2.\d32_1.\d16_2.\d8_1.\d4_2.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst1.\d128_2.\d64_2.\d32_1.\d16_2.\d8_1.\d4_1.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst1.\d128_2.\d64_2.\d32_1.\d16_1.\d8_2.\d4_2.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst1.\d128_2.\d64_2.\d32_1.\d16_1.\d8_2.\d4_1.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst1.\d128_2.\d64_2.\d32_1.\d16_1.\d8_1.\d4_2.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst1.\d128_2.\d64_2.\d32_1.\d16_1.\d8_1.\d4_1.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst1.\d128_2.\d64_1.\d32_2.\d16_2.\d8_2.\d4_2.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst1.\d128_2.\d64_1.\d32_2.\d16_2.\d8_2.\d4_1.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst1.\d128_2.\d64_1.\d32_2.\d16_2.\d8_1.\d4_2.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst1.\d128_2.\d64_1.\d32_2.\d16_2.\d8_1.\d4_1.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst1.\d128_2.\d64_1.\d32_2.\d16_1.\d8_2.\d4_2.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst1.\d128_2.\d64_1.\d32_2.\d16_1.\d8_2.\d4_1.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst1.\d128_2.\d64_1.\d32_2.\d16_1.\d8_1.\d4_2.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst1.\d128_2.\d64_1.\d32_2.\d16_1.\d8_1.\d4_1.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst1.\d128_2.\d64_1.\d32_1.\d16_2.\d8_2.\d4_2.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst1.\d128_2.\d64_1.\d32_1.\d16_2.\d8_2.\d4_1.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst1.\d128_2.\d64_1.\d32_1.\d16_2.\d8_1.\d4_2.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst1.\d128_2.\d64_1.\d32_1.\d16_2.\d8_1.\d4_1.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst1.\d128_2.\d64_1.\d32_1.\d16_1.\d8_2.\d4_2.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst1.\d128_2.\d64_1.\d32_1.\d16_1.\d8_2.\d4_1.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst1.\d128_2.\d64_1.\d32_1.\d16_1.\d8_1.\d4_2.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst1.\d128_2.\d64_1.\d32_1.\d16_1.\d8_1.\d4_1.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst1.\d128_1.\d64_2.\d32_2.\d16_2.\d8_2.\d4_2.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst1.\d128_1.\d64_2.\d32_2.\d16_2.\d8_2.\d4_1.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst1.\d128_1.\d64_2.\d32_2.\d16_2.\d8_1.\d4_2.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst1.\d128_1.\d64_2.\d32_2.\d16_2.\d8_1.\d4_1.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst1.\d128_1.\d64_2.\d32_2.\d16_1.\d8_2.\d4_2.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst1.\d128_1.\d64_2.\d32_2.\d16_1.\d8_2.\d4_1.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst1.\d128_1.\d64_2.\d32_2.\d16_1.\d8_1.\d4_2.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst1.\d128_1.\d64_2.\d32_2.\d16_1.\d8_1.\d4_1.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst1.\d128_1.\d64_2.\d32_1.\d16_2.\d8_2.\d4_2.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst1.\d128_1.\d64_2.\d32_1.\d16_2.\d8_2.\d4_1.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst1.\d128_1.\d64_2.\d32_1.\d16_2.\d8_1.\d4_2.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst1.\d128_1.\d64_2.\d32_1.\d16_2.\d8_1.\d4_1.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst1.\d128_1.\d64_2.\d32_1.\d16_1.\d8_2.\d4_2.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst1.\d128_1.\d64_2.\d32_1.\d16_1.\d8_2.\d4_1.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst1.\d128_1.\d64_2.\d32_1.\d16_1.\d8_1.\d4_2.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst1.\d128_1.\d64_2.\d32_1.\d16_1.\d8_1.\d4_1.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst1.\d128_1.\d64_1.\d32_2.\d16_2.\d8_2.\d4_2.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst1.\d128_1.\d64_1.\d32_2.\d16_2.\d8_2.\d4_1.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst1.\d128_1.\d64_1.\d32_2.\d16_2.\d8_1.\d4_2.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst1.\d128_1.\d64_1.\d32_2.\d16_2.\d8_1.\d4_1.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst1.\d128_1.\d64_1.\d32_2.\d16_1.\d8_2.\d4_2.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst1.\d128_1.\d64_1.\d32_2.\d16_1.\d8_2.\d4_1.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst1.\d128_1.\d64_1.\d32_2.\d16_1.\d8_1.\d4_2.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst1.\d128_1.\d64_1.\d32_2.\d16_1.\d8_1.\d4_1.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst1.\d128_1.\d64_1.\d32_1.\d16_2.\d8_2.\d4_2.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst1.\d128_1.\d64_1.\d32_1.\d16_2.\d8_2.\d4_1.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst1.\d128_1.\d64_1.\d32_1.\d16_2.\d8_1.\d4_2.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst1.\d128_1.\d64_1.\d32_1.\d16_2.\d8_1.\d4_1.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst1.\d128_1.\d64_1.\d32_1.\d16_1.\d8_2.\d4_2.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst1.\d128_1.\d64_1.\d32_1.\d16_1.\d8_2.\d4_1.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst1.\d128_1.\d64_1.\d32_1.\d16_1.\d8_1.\d4_2.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst1.\d128_1.\d64_1.\d32_1.\d16_1.\d8_1.\d4_1.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst0.\d128_2.\d64_2.\d32_2.\d16_2.\d8_2.\d4_2.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst0.\d128_2.\d64_2.\d32_2.\d16_2.\d8_2.\d4_1.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst0.\d128_2.\d64_2.\d32_2.\d16_2.\d8_1.\d4_2.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst0.\d128_2.\d64_2.\d32_2.\d16_2.\d8_1.\d4_1.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst0.\d128_2.\d64_2.\d32_2.\d16_1.\d8_2.\d4_2.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst0.\d128_2.\d64_2.\d32_2.\d16_1.\d8_2.\d4_1.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst0.\d128_2.\d64_2.\d32_2.\d16_1.\d8_1.\d4_2.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst0.\d128_2.\d64_2.\d32_2.\d16_1.\d8_1.\d4_1.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst0.\d128_2.\d64_2.\d32_1.\d16_2.\d8_2.\d4_2.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst0.\d128_2.\d64_2.\d32_1.\d16_2.\d8_2.\d4_1.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst0.\d128_2.\d64_2.\d32_1.\d16_2.\d8_1.\d4_2.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst0.\d128_2.\d64_2.\d32_1.\d16_2.\d8_1.\d4_1.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst0.\d128_2.\d64_2.\d32_1.\d16_1.\d8_2.\d4_2.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst0.\d128_2.\d64_2.\d32_1.\d16_1.\d8_2.\d4_1.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst0.\d128_2.\d64_2.\d32_1.\d16_1.\d8_1.\d4_2.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst0.\d128_2.\d64_2.\d32_1.\d16_1.\d8_1.\d4_1.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst0.\d128_2.\d64_1.\d32_2.\d16_2.\d8_2.\d4_2.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst0.\d128_2.\d64_1.\d32_2.\d16_2.\d8_2.\d4_1.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst0.\d128_2.\d64_1.\d32_2.\d16_2.\d8_1.\d4_2.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst0.\d128_2.\d64_1.\d32_2.\d16_2.\d8_1.\d4_1.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst0.\d128_2.\d64_1.\d32_2.\d16_1.\d8_2.\d4_2.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst0.\d128_2.\d64_1.\d32_2.\d16_1.\d8_2.\d4_1.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst0.\d128_2.\d64_1.\d32_2.\d16_1.\d8_1.\d4_2.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst0.\d128_2.\d64_1.\d32_2.\d16_1.\d8_1.\d4_1.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst0.\d128_2.\d64_1.\d32_1.\d16_2.\d8_2.\d4_2.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst0.\d128_2.\d64_1.\d32_1.\d16_2.\d8_2.\d4_1.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst0.\d128_2.\d64_1.\d32_1.\d16_2.\d8_1.\d4_2.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst0.\d128_2.\d64_1.\d32_1.\d16_2.\d8_1.\d4_1.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst0.\d128_2.\d64_1.\d32_1.\d16_1.\d8_2.\d4_2.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst0.\d128_2.\d64_1.\d32_1.\d16_1.\d8_2.\d4_1.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst0.\d128_2.\d64_1.\d32_1.\d16_1.\d8_1.\d4_2.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst0.\d128_2.\d64_1.\d32_1.\d16_1.\d8_1.\d4_1.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst0.\d128_1.\d64_2.\d32_2.\d16_2.\d8_2.\d4_2.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst0.\d128_1.\d64_2.\d32_2.\d16_2.\d8_2.\d4_1.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst0.\d128_1.\d64_2.\d32_2.\d16_2.\d8_1.\d4_2.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst0.\d128_1.\d64_2.\d32_2.\d16_2.\d8_1.\d4_1.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst0.\d128_1.\d64_2.\d32_2.\d16_1.\d8_2.\d4_2.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst0.\d128_1.\d64_2.\d32_2.\d16_1.\d8_2.\d4_1.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst0.\d128_1.\d64_2.\d32_2.\d16_1.\d8_1.\d4_2.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst0.\d128_1.\d64_2.\d32_2.\d16_1.\d8_1.\d4_1.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst0.\d128_1.\d64_2.\d32_1.\d16_2.\d8_2.\d4_2.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst0.\d128_1.\d64_2.\d32_1.\d16_2.\d8_2.\d4_1.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst0.\d128_1.\d64_2.\d32_1.\d16_2.\d8_1.\d4_2.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst0.\d128_1.\d64_2.\d32_1.\d16_2.\d8_1.\d4_1.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst0.\d128_1.\d64_2.\d32_1.\d16_1.\d8_2.\d4_2.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst0.\d128_1.\d64_2.\d32_1.\d16_1.\d8_2.\d4_1.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst0.\d128_1.\d64_2.\d32_1.\d16_1.\d8_1.\d4_2.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst0.\d128_1.\d64_2.\d32_1.\d16_1.\d8_1.\d4_1.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst0.\d128_1.\d64_1.\d32_2.\d16_2.\d8_2.\d4_2.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst0.\d128_1.\d64_1.\d32_2.\d16_2.\d8_2.\d4_1.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst0.\d128_1.\d64_1.\d32_2.\d16_2.\d8_1.\d4_2.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst0.\d128_1.\d64_1.\d32_2.\d16_2.\d8_1.\d4_1.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst0.\d128_1.\d64_1.\d32_2.\d16_1.\d8_2.\d4_2.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst0.\d128_1.\d64_1.\d32_2.\d16_1.\d8_2.\d4_1.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst0.\d128_1.\d64_1.\d32_2.\d16_1.\d8_1.\d4_2.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst0.\d128_1.\d64_1.\d32_2.\d16_1.\d8_1.\d4_1.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst0.\d128_1.\d64_1.\d32_1.\d16_2.\d8_2.\d4_2.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst0.\d128_1.\d64_1.\d32_1.\d16_2.\d8_2.\d4_1.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst0.\d128_1.\d64_1.\d32_1.\d16_2.\d8_1.\d4_2.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst0.\d128_1.\d64_1.\d32_1.\d16_2.\d8_1.\d4_1.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst0.\d128_1.\d64_1.\d32_1.\d16_1.\d8_2.\d4_2.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst0.\d128_1.\d64_1.\d32_1.\d16_1.\d8_2.\d4_1.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst0.\d128_1.\d64_1.\d32_1.\d16_1.\d8_1.\d4_2.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active async load on $flatten\demux0.\inst0.\d128_1.\d64_1.\d32_1.\d16_1.\d8_1.\d4_1.$verific$out_reg$demux.v:153$951 ($aldff) from module wrapper_io_reg_max.
Removing never-active CLR on $flatten\demux0.$verific$sel_internal1_reg$demux.v:29$306 ($dlatchsr) from module wrapper_io_reg_max.
Removing never-active ARST on $flatten\demux0.$verific$sel_internal1_reg$demux.v:29$306 ($dlatchsr) from module wrapper_io_reg_max.
Removing never-active CLR on $flatten\demux0.$verific$sel_internal0_reg$demux.v:29$313 ($dlatchsr) from module wrapper_io_reg_max.
Removing never-active ARST on $flatten\demux0.$verific$sel_internal0_reg$demux.v:29$313 ($dlatchsr) from module wrapper_io_reg_max.
Setting constant 0-bit at position 7 on $flatten\demux0.$verific$sel_internal0_reg$demux.v:29$313 ($dlatch) from module wrapper_io_reg_max.
Setting constant 0-bit at position 7 on $flatten\demux0.$verific$sel_internal1_reg$demux.v:29$306 ($dlatch) from module wrapper_io_reg_max.
Setting constant 0-bit at position 7 on $flatten\mux0.$verific$sel_internal0_reg$mux.v:29$971 ($dlatch) from module wrapper_io_reg_max.
Setting constant 0-bit at position 7 on $flatten\mux0.$verific$sel_internal1_reg$mux.v:29$986 ($dlatch) from module wrapper_io_reg_max.

yosys> opt_clean

3.22. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \wrapper_io_reg_max..

yosys> opt_expr

3.23. Executing OPT_EXPR pass (perform const folding).
Optimizing module wrapper_io_reg_max.
<suppressed ~3 debug messages>
MAX OPT ITERATION = 1

yosys> fsm -encoding binary

3.24. Executing FSM pass (extract and optimize FSM).

yosys> fsm_detect

3.24.1. Executing FSM_DETECT pass (finding FSMs in design).

yosys> fsm_extract

3.24.2. Executing FSM_EXTRACT pass (extracting FSM from design).

yosys> fsm_opt

3.24.3. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> opt_clean

3.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \wrapper_io_reg_max..
Removed 2 unused cells and 2 unused wires.
<suppressed ~3 debug messages>

yosys> fsm_opt

3.24.5. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> fsm_recode -encoding binary

3.24.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

yosys> fsm_info

3.24.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

yosys> fsm_map

3.24.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

yosys> opt_expr

3.25. Executing OPT_EXPR pass (perform const folding).
Optimizing module wrapper_io_reg_max.

yosys> opt_merge -nomux

3.26. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\wrapper_io_reg_max'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.27. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \wrapper_io_reg_max..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~286 debug messages>

yosys> opt_reduce

3.28. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \wrapper_io_reg_max.
Performed a total of 0 changes.

yosys> opt_merge

3.29. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\wrapper_io_reg_max'.
Removed a total of 0 cells.

yosys> opt_share

3.30. Executing OPT_SHARE pass.

yosys> opt_dff -sat

3.31. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $flatten\demux0.\inst1.\d128_2.\d64_2.\d32_2.\d16_2.\d8_2.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_2.d64_2.d32_2.d16_2.d8_2.d4_0.out [1], Q = \demux0.inst1.d128_2.d64_2.d32_2.d16_2.d8_2.d4_2.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_2.\d64_2.\d32_2.\d16_2.\d8_2.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_2.d64_2.d32_2.d16_2.d8_2.d4_0.out [1], Q = \demux0.inst1.d128_2.d64_2.d32_2.d16_2.d8_2.d4_2.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_2.\d64_2.\d32_2.\d16_2.\d8_2.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_2.d64_2.d32_2.d16_2.d8_2.d4_0.out [0], Q = \demux0.inst1.d128_2.d64_2.d32_2.d16_2.d8_2.d4_1.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_2.\d64_2.\d32_2.\d16_2.\d8_2.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_2.d64_2.d32_2.d16_2.d8_2.d4_0.out [0], Q = \demux0.inst1.d128_2.d64_2.d32_2.d16_2.d8_2.d4_1.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_2.\d64_2.\d32_2.\d16_2.\d8_1.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_2.d64_2.d32_2.d16_2.d8_1.d4_0.out [1], Q = \demux0.inst1.d128_2.d64_2.d32_2.d16_2.d8_1.d4_2.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_2.\d64_2.\d32_2.\d16_2.\d8_1.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_2.d64_2.d32_2.d16_2.d8_1.d4_0.out [1], Q = \demux0.inst1.d128_2.d64_2.d32_2.d16_2.d8_1.d4_2.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_2.\d64_2.\d32_2.\d16_2.\d8_1.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_2.d64_2.d32_2.d16_2.d8_1.d4_0.out [0], Q = \demux0.inst1.d128_2.d64_2.d32_2.d16_2.d8_1.d4_1.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_2.\d64_2.\d32_2.\d16_2.\d8_1.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_2.d64_2.d32_2.d16_2.d8_1.d4_0.out [0], Q = \demux0.inst1.d128_2.d64_2.d32_2.d16_2.d8_1.d4_1.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_2.\d64_2.\d32_2.\d16_1.\d8_2.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_2.d64_2.d32_2.d16_1.d8_2.d4_0.out [1], Q = \demux0.inst1.d128_2.d64_2.d32_2.d16_1.d8_2.d4_2.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_2.\d64_2.\d32_2.\d16_1.\d8_2.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_2.d64_2.d32_2.d16_1.d8_2.d4_0.out [1], Q = \demux0.inst1.d128_2.d64_2.d32_2.d16_1.d8_2.d4_2.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_2.\d64_2.\d32_2.\d16_1.\d8_2.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_2.d64_2.d32_2.d16_1.d8_2.d4_0.out [0], Q = \demux0.inst1.d128_2.d64_2.d32_2.d16_1.d8_2.d4_1.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_2.\d64_2.\d32_2.\d16_1.\d8_2.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_2.d64_2.d32_2.d16_1.d8_2.d4_0.out [0], Q = \demux0.inst1.d128_2.d64_2.d32_2.d16_1.d8_2.d4_1.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_2.\d64_2.\d32_2.\d16_1.\d8_1.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_2.d64_2.d32_2.d16_1.d8_1.d4_0.out [1], Q = \demux0.inst1.d128_2.d64_2.d32_2.d16_1.d8_1.d4_2.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_2.\d64_2.\d32_2.\d16_1.\d8_1.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_2.d64_2.d32_2.d16_1.d8_1.d4_0.out [1], Q = \demux0.inst1.d128_2.d64_2.d32_2.d16_1.d8_1.d4_2.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_2.\d64_2.\d32_2.\d16_1.\d8_1.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_2.d64_2.d32_2.d16_1.d8_1.d4_0.out [0], Q = \demux0.inst1.d128_2.d64_2.d32_2.d16_1.d8_1.d4_1.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_2.\d64_2.\d32_2.\d16_1.\d8_1.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_2.d64_2.d32_2.d16_1.d8_1.d4_0.out [0], Q = \demux0.inst1.d128_2.d64_2.d32_2.d16_1.d8_1.d4_1.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_2.\d64_2.\d32_1.\d16_2.\d8_2.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_2.d64_2.d32_1.d16_2.d8_2.d4_0.out [1], Q = \demux0.inst1.d128_2.d64_2.d32_1.d16_2.d8_2.d4_2.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_2.\d64_2.\d32_1.\d16_2.\d8_2.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_2.d64_2.d32_1.d16_2.d8_2.d4_0.out [1], Q = \demux0.inst1.d128_2.d64_2.d32_1.d16_2.d8_2.d4_2.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_2.\d64_2.\d32_1.\d16_2.\d8_2.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_2.d64_2.d32_1.d16_2.d8_2.d4_0.out [0], Q = \demux0.inst1.d128_2.d64_2.d32_1.d16_2.d8_2.d4_1.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_2.\d64_2.\d32_1.\d16_2.\d8_2.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_2.d64_2.d32_1.d16_2.d8_2.d4_0.out [0], Q = \demux0.inst1.d128_2.d64_2.d32_1.d16_2.d8_2.d4_1.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_2.\d64_2.\d32_1.\d16_2.\d8_1.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_2.d64_2.d32_1.d16_2.d8_1.d4_0.out [1], Q = \demux0.inst1.d128_2.d64_2.d32_1.d16_2.d8_1.d4_2.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_2.\d64_2.\d32_1.\d16_2.\d8_1.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_2.d64_2.d32_1.d16_2.d8_1.d4_0.out [1], Q = \demux0.inst1.d128_2.d64_2.d32_1.d16_2.d8_1.d4_2.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_2.\d64_2.\d32_1.\d16_2.\d8_1.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_2.d64_2.d32_1.d16_2.d8_1.d4_0.out [0], Q = \demux0.inst1.d128_2.d64_2.d32_1.d16_2.d8_1.d4_1.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_2.\d64_2.\d32_1.\d16_2.\d8_1.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_2.d64_2.d32_1.d16_2.d8_1.d4_0.out [0], Q = \demux0.inst1.d128_2.d64_2.d32_1.d16_2.d8_1.d4_1.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_2.\d64_2.\d32_1.\d16_1.\d8_2.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_2.d64_2.d32_1.d16_1.d8_2.d4_0.out [1], Q = \demux0.inst1.d128_2.d64_2.d32_1.d16_1.d8_2.d4_2.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_2.\d64_2.\d32_1.\d16_1.\d8_2.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_2.d64_2.d32_1.d16_1.d8_2.d4_0.out [1], Q = \demux0.inst1.d128_2.d64_2.d32_1.d16_1.d8_2.d4_2.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_2.\d64_2.\d32_1.\d16_1.\d8_2.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_2.d64_2.d32_1.d16_1.d8_2.d4_0.out [0], Q = \demux0.inst1.d128_2.d64_2.d32_1.d16_1.d8_2.d4_1.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_2.\d64_2.\d32_1.\d16_1.\d8_2.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_2.d64_2.d32_1.d16_1.d8_2.d4_0.out [0], Q = \demux0.inst1.d128_2.d64_2.d32_1.d16_1.d8_2.d4_1.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_2.\d64_2.\d32_1.\d16_1.\d8_1.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_2.d64_2.d32_1.d16_1.d8_1.d4_0.out [1], Q = \demux0.inst1.d128_2.d64_2.d32_1.d16_1.d8_1.d4_2.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_2.\d64_2.\d32_1.\d16_1.\d8_1.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_2.d64_2.d32_1.d16_1.d8_1.d4_0.out [1], Q = \demux0.inst1.d128_2.d64_2.d32_1.d16_1.d8_1.d4_2.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_2.\d64_2.\d32_1.\d16_1.\d8_1.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_2.d64_2.d32_1.d16_1.d8_1.d4_0.out [0], Q = \demux0.inst1.d128_2.d64_2.d32_1.d16_1.d8_1.d4_1.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_2.\d64_2.\d32_1.\d16_1.\d8_1.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_2.d64_2.d32_1.d16_1.d8_1.d4_0.out [0], Q = \demux0.inst1.d128_2.d64_2.d32_1.d16_1.d8_1.d4_1.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_2.\d64_1.\d32_2.\d16_2.\d8_2.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_2.d64_1.d32_2.d16_2.d8_2.d4_0.out [1], Q = \demux0.inst1.d128_2.d64_1.d32_2.d16_2.d8_2.d4_2.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_2.\d64_1.\d32_2.\d16_2.\d8_2.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_2.d64_1.d32_2.d16_2.d8_2.d4_0.out [1], Q = \demux0.inst1.d128_2.d64_1.d32_2.d16_2.d8_2.d4_2.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_2.\d64_1.\d32_2.\d16_2.\d8_2.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_2.d64_1.d32_2.d16_2.d8_2.d4_0.out [0], Q = \demux0.inst1.d128_2.d64_1.d32_2.d16_2.d8_2.d4_1.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_2.\d64_1.\d32_2.\d16_2.\d8_2.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_2.d64_1.d32_2.d16_2.d8_2.d4_0.out [0], Q = \demux0.inst1.d128_2.d64_1.d32_2.d16_2.d8_2.d4_1.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_2.\d64_1.\d32_2.\d16_2.\d8_1.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_2.d64_1.d32_2.d16_2.d8_1.d4_0.out [1], Q = \demux0.inst1.d128_2.d64_1.d32_2.d16_2.d8_1.d4_2.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_2.\d64_1.\d32_2.\d16_2.\d8_1.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_2.d64_1.d32_2.d16_2.d8_1.d4_0.out [1], Q = \demux0.inst1.d128_2.d64_1.d32_2.d16_2.d8_1.d4_2.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_2.\d64_1.\d32_2.\d16_2.\d8_1.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_2.d64_1.d32_2.d16_2.d8_1.d4_0.out [0], Q = \demux0.inst1.d128_2.d64_1.d32_2.d16_2.d8_1.d4_1.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_2.\d64_1.\d32_2.\d16_2.\d8_1.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_2.d64_1.d32_2.d16_2.d8_1.d4_0.out [0], Q = \demux0.inst1.d128_2.d64_1.d32_2.d16_2.d8_1.d4_1.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_2.\d64_1.\d32_2.\d16_1.\d8_2.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_2.d64_1.d32_2.d16_1.d8_2.d4_0.out [1], Q = \demux0.inst1.d128_2.d64_1.d32_2.d16_1.d8_2.d4_2.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_2.\d64_1.\d32_2.\d16_1.\d8_2.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_2.d64_1.d32_2.d16_1.d8_2.d4_0.out [1], Q = \demux0.inst1.d128_2.d64_1.d32_2.d16_1.d8_2.d4_2.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_2.\d64_1.\d32_2.\d16_1.\d8_2.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_2.d64_1.d32_2.d16_1.d8_2.d4_0.out [0], Q = \demux0.inst1.d128_2.d64_1.d32_2.d16_1.d8_2.d4_1.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_2.\d64_1.\d32_2.\d16_1.\d8_2.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_2.d64_1.d32_2.d16_1.d8_2.d4_0.out [0], Q = \demux0.inst1.d128_2.d64_1.d32_2.d16_1.d8_2.d4_1.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_2.\d64_1.\d32_2.\d16_1.\d8_1.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_2.d64_1.d32_2.d16_1.d8_1.d4_0.out [1], Q = \demux0.inst1.d128_2.d64_1.d32_2.d16_1.d8_1.d4_2.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_2.\d64_1.\d32_2.\d16_1.\d8_1.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_2.d64_1.d32_2.d16_1.d8_1.d4_0.out [1], Q = \demux0.inst1.d128_2.d64_1.d32_2.d16_1.d8_1.d4_2.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_2.\d64_1.\d32_2.\d16_1.\d8_1.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_2.d64_1.d32_2.d16_1.d8_1.d4_0.out [0], Q = \demux0.inst1.d128_2.d64_1.d32_2.d16_1.d8_1.d4_1.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_2.\d64_1.\d32_2.\d16_1.\d8_1.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_2.d64_1.d32_2.d16_1.d8_1.d4_0.out [0], Q = \demux0.inst1.d128_2.d64_1.d32_2.d16_1.d8_1.d4_1.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_2.\d64_1.\d32_1.\d16_2.\d8_2.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_2.d64_1.d32_1.d16_2.d8_2.d4_0.out [1], Q = \demux0.inst1.d128_2.d64_1.d32_1.d16_2.d8_2.d4_2.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_2.\d64_1.\d32_1.\d16_2.\d8_2.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_2.d64_1.d32_1.d16_2.d8_2.d4_0.out [1], Q = \demux0.inst1.d128_2.d64_1.d32_1.d16_2.d8_2.d4_2.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_2.\d64_1.\d32_1.\d16_2.\d8_2.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_2.d64_1.d32_1.d16_2.d8_2.d4_0.out [0], Q = \demux0.inst1.d128_2.d64_1.d32_1.d16_2.d8_2.d4_1.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_2.\d64_1.\d32_1.\d16_2.\d8_2.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_2.d64_1.d32_1.d16_2.d8_2.d4_0.out [0], Q = \demux0.inst1.d128_2.d64_1.d32_1.d16_2.d8_2.d4_1.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_2.\d64_1.\d32_1.\d16_2.\d8_1.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_2.d64_1.d32_1.d16_2.d8_1.d4_0.out [1], Q = \demux0.inst1.d128_2.d64_1.d32_1.d16_2.d8_1.d4_2.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_2.\d64_1.\d32_1.\d16_2.\d8_1.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_2.d64_1.d32_1.d16_2.d8_1.d4_0.out [1], Q = \demux0.inst1.d128_2.d64_1.d32_1.d16_2.d8_1.d4_2.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_2.\d64_1.\d32_1.\d16_2.\d8_1.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_2.d64_1.d32_1.d16_2.d8_1.d4_0.out [0], Q = \demux0.inst1.d128_2.d64_1.d32_1.d16_2.d8_1.d4_1.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_2.\d64_1.\d32_1.\d16_2.\d8_1.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_2.d64_1.d32_1.d16_2.d8_1.d4_0.out [0], Q = \demux0.inst1.d128_2.d64_1.d32_1.d16_2.d8_1.d4_1.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_2.\d64_1.\d32_1.\d16_1.\d8_2.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_2.d64_1.d32_1.d16_1.d8_2.d4_0.out [1], Q = \demux0.inst1.d128_2.d64_1.d32_1.d16_1.d8_2.d4_2.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_2.\d64_1.\d32_1.\d16_1.\d8_2.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_2.d64_1.d32_1.d16_1.d8_2.d4_0.out [1], Q = \demux0.inst1.d128_2.d64_1.d32_1.d16_1.d8_2.d4_2.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_2.\d64_1.\d32_1.\d16_1.\d8_2.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_2.d64_1.d32_1.d16_1.d8_2.d4_0.out [0], Q = \demux0.inst1.d128_2.d64_1.d32_1.d16_1.d8_2.d4_1.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_2.\d64_1.\d32_1.\d16_1.\d8_2.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_2.d64_1.d32_1.d16_1.d8_2.d4_0.out [0], Q = \demux0.inst1.d128_2.d64_1.d32_1.d16_1.d8_2.d4_1.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_2.\d64_1.\d32_1.\d16_1.\d8_1.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_2.d64_1.d32_1.d16_1.d8_1.d4_0.out [1], Q = \demux0.inst1.d128_2.d64_1.d32_1.d16_1.d8_1.d4_2.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_2.\d64_1.\d32_1.\d16_1.\d8_1.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_2.d64_1.d32_1.d16_1.d8_1.d4_0.out [1], Q = \demux0.inst1.d128_2.d64_1.d32_1.d16_1.d8_1.d4_2.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_2.\d64_1.\d32_1.\d16_1.\d8_1.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_2.d64_1.d32_1.d16_1.d8_1.d4_0.out [0], Q = \demux0.inst1.d128_2.d64_1.d32_1.d16_1.d8_1.d4_1.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_2.\d64_1.\d32_1.\d16_1.\d8_1.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_2.d64_1.d32_1.d16_1.d8_1.d4_0.out [0], Q = \demux0.inst1.d128_2.d64_1.d32_1.d16_1.d8_1.d4_1.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_1.\d64_2.\d32_2.\d16_2.\d8_2.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_1.d64_2.d32_2.d16_2.d8_2.d4_0.out [1], Q = \demux0.inst1.d128_1.d64_2.d32_2.d16_2.d8_2.d4_2.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_1.\d64_2.\d32_2.\d16_2.\d8_2.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_1.d64_2.d32_2.d16_2.d8_2.d4_0.out [1], Q = \demux0.inst1.d128_1.d64_2.d32_2.d16_2.d8_2.d4_2.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_1.\d64_2.\d32_2.\d16_2.\d8_2.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_1.d64_2.d32_2.d16_2.d8_2.d4_0.out [0], Q = \demux0.inst1.d128_1.d64_2.d32_2.d16_2.d8_2.d4_1.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_1.\d64_2.\d32_2.\d16_2.\d8_2.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_1.d64_2.d32_2.d16_2.d8_2.d4_0.out [0], Q = \demux0.inst1.d128_1.d64_2.d32_2.d16_2.d8_2.d4_1.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_1.\d64_2.\d32_2.\d16_2.\d8_1.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_1.d64_2.d32_2.d16_2.d8_1.d4_0.out [1], Q = \demux0.inst1.d128_1.d64_2.d32_2.d16_2.d8_1.d4_2.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_1.\d64_2.\d32_2.\d16_2.\d8_1.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_1.d64_2.d32_2.d16_2.d8_1.d4_0.out [1], Q = \demux0.inst1.d128_1.d64_2.d32_2.d16_2.d8_1.d4_2.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_1.\d64_2.\d32_2.\d16_2.\d8_1.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_1.d64_2.d32_2.d16_2.d8_1.d4_0.out [0], Q = \demux0.inst1.d128_1.d64_2.d32_2.d16_2.d8_1.d4_1.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_1.\d64_2.\d32_2.\d16_2.\d8_1.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_1.d64_2.d32_2.d16_2.d8_1.d4_0.out [0], Q = \demux0.inst1.d128_1.d64_2.d32_2.d16_2.d8_1.d4_1.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_1.\d64_2.\d32_2.\d16_1.\d8_2.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_1.d64_2.d32_2.d16_1.d8_2.d4_0.out [1], Q = \demux0.inst1.d128_1.d64_2.d32_2.d16_1.d8_2.d4_2.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_1.\d64_2.\d32_2.\d16_1.\d8_2.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_1.d64_2.d32_2.d16_1.d8_2.d4_0.out [1], Q = \demux0.inst1.d128_1.d64_2.d32_2.d16_1.d8_2.d4_2.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_1.\d64_2.\d32_2.\d16_1.\d8_2.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_1.d64_2.d32_2.d16_1.d8_2.d4_0.out [0], Q = \demux0.inst1.d128_1.d64_2.d32_2.d16_1.d8_2.d4_1.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_1.\d64_2.\d32_2.\d16_1.\d8_2.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_1.d64_2.d32_2.d16_1.d8_2.d4_0.out [0], Q = \demux0.inst1.d128_1.d64_2.d32_2.d16_1.d8_2.d4_1.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_1.\d64_2.\d32_2.\d16_1.\d8_1.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_1.d64_2.d32_2.d16_1.d8_1.d4_0.out [1], Q = \demux0.inst1.d128_1.d64_2.d32_2.d16_1.d8_1.d4_2.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_1.\d64_2.\d32_2.\d16_1.\d8_1.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_1.d64_2.d32_2.d16_1.d8_1.d4_0.out [1], Q = \demux0.inst1.d128_1.d64_2.d32_2.d16_1.d8_1.d4_2.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_1.\d64_2.\d32_2.\d16_1.\d8_1.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_1.d64_2.d32_2.d16_1.d8_1.d4_0.out [0], Q = \demux0.inst1.d128_1.d64_2.d32_2.d16_1.d8_1.d4_1.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_1.\d64_2.\d32_2.\d16_1.\d8_1.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_1.d64_2.d32_2.d16_1.d8_1.d4_0.out [0], Q = \demux0.inst1.d128_1.d64_2.d32_2.d16_1.d8_1.d4_1.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_1.\d64_2.\d32_1.\d16_2.\d8_2.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_1.d64_2.d32_1.d16_2.d8_2.d4_0.out [1], Q = \demux0.inst1.d128_1.d64_2.d32_1.d16_2.d8_2.d4_2.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_1.\d64_2.\d32_1.\d16_2.\d8_2.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_1.d64_2.d32_1.d16_2.d8_2.d4_0.out [1], Q = \demux0.inst1.d128_1.d64_2.d32_1.d16_2.d8_2.d4_2.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_1.\d64_2.\d32_1.\d16_2.\d8_2.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_1.d64_2.d32_1.d16_2.d8_2.d4_0.out [0], Q = \demux0.inst1.d128_1.d64_2.d32_1.d16_2.d8_2.d4_1.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_1.\d64_2.\d32_1.\d16_2.\d8_2.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_1.d64_2.d32_1.d16_2.d8_2.d4_0.out [0], Q = \demux0.inst1.d128_1.d64_2.d32_1.d16_2.d8_2.d4_1.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_1.\d64_2.\d32_1.\d16_2.\d8_1.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_1.d64_2.d32_1.d16_2.d8_1.d4_0.out [1], Q = \demux0.inst1.d128_1.d64_2.d32_1.d16_2.d8_1.d4_2.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_1.\d64_2.\d32_1.\d16_2.\d8_1.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_1.d64_2.d32_1.d16_2.d8_1.d4_0.out [1], Q = \demux0.inst1.d128_1.d64_2.d32_1.d16_2.d8_1.d4_2.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_1.\d64_2.\d32_1.\d16_2.\d8_1.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_1.d64_2.d32_1.d16_2.d8_1.d4_0.out [0], Q = \demux0.inst1.d128_1.d64_2.d32_1.d16_2.d8_1.d4_1.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_1.\d64_2.\d32_1.\d16_2.\d8_1.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_1.d64_2.d32_1.d16_2.d8_1.d4_0.out [0], Q = \demux0.inst1.d128_1.d64_2.d32_1.d16_2.d8_1.d4_1.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_1.\d64_2.\d32_1.\d16_1.\d8_2.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_1.d64_2.d32_1.d16_1.d8_2.d4_0.out [1], Q = \demux0.inst1.d128_1.d64_2.d32_1.d16_1.d8_2.d4_2.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_1.\d64_2.\d32_1.\d16_1.\d8_2.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_1.d64_2.d32_1.d16_1.d8_2.d4_0.out [1], Q = \demux0.inst1.d128_1.d64_2.d32_1.d16_1.d8_2.d4_2.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_1.\d64_2.\d32_1.\d16_1.\d8_2.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_1.d64_2.d32_1.d16_1.d8_2.d4_0.out [0], Q = \demux0.inst1.d128_1.d64_2.d32_1.d16_1.d8_2.d4_1.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_1.\d64_2.\d32_1.\d16_1.\d8_2.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_1.d64_2.d32_1.d16_1.d8_2.d4_0.out [0], Q = \demux0.inst1.d128_1.d64_2.d32_1.d16_1.d8_2.d4_1.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_1.\d64_2.\d32_1.\d16_1.\d8_1.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_1.d64_2.d32_1.d16_1.d8_1.d4_0.out [1], Q = \demux0.inst1.d128_1.d64_2.d32_1.d16_1.d8_1.d4_2.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_1.\d64_2.\d32_1.\d16_1.\d8_1.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_1.d64_2.d32_1.d16_1.d8_1.d4_0.out [1], Q = \demux0.inst1.d128_1.d64_2.d32_1.d16_1.d8_1.d4_2.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_1.\d64_2.\d32_1.\d16_1.\d8_1.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_1.d64_2.d32_1.d16_1.d8_1.d4_0.out [0], Q = \demux0.inst1.d128_1.d64_2.d32_1.d16_1.d8_1.d4_1.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_1.\d64_2.\d32_1.\d16_1.\d8_1.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_1.d64_2.d32_1.d16_1.d8_1.d4_0.out [0], Q = \demux0.inst1.d128_1.d64_2.d32_1.d16_1.d8_1.d4_1.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_1.\d64_1.\d32_2.\d16_2.\d8_2.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_1.d64_1.d32_2.d16_2.d8_2.d4_0.out [1], Q = \demux0.inst1.d128_1.d64_1.d32_2.d16_2.d8_2.d4_2.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_1.\d64_1.\d32_2.\d16_2.\d8_2.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_1.d64_1.d32_2.d16_2.d8_2.d4_0.out [1], Q = \demux0.inst1.d128_1.d64_1.d32_2.d16_2.d8_2.d4_2.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_1.\d64_1.\d32_2.\d16_2.\d8_2.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_1.d64_1.d32_2.d16_2.d8_2.d4_0.out [0], Q = \demux0.inst1.d128_1.d64_1.d32_2.d16_2.d8_2.d4_1.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_1.\d64_1.\d32_2.\d16_2.\d8_2.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_1.d64_1.d32_2.d16_2.d8_2.d4_0.out [0], Q = \demux0.inst1.d128_1.d64_1.d32_2.d16_2.d8_2.d4_1.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_1.\d64_1.\d32_2.\d16_2.\d8_1.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_1.d64_1.d32_2.d16_2.d8_1.d4_0.out [1], Q = \demux0.inst1.d128_1.d64_1.d32_2.d16_2.d8_1.d4_2.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_1.\d64_1.\d32_2.\d16_2.\d8_1.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_1.d64_1.d32_2.d16_2.d8_1.d4_0.out [1], Q = \demux0.inst1.d128_1.d64_1.d32_2.d16_2.d8_1.d4_2.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_1.\d64_1.\d32_2.\d16_2.\d8_1.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_1.d64_1.d32_2.d16_2.d8_1.d4_0.out [0], Q = \demux0.inst1.d128_1.d64_1.d32_2.d16_2.d8_1.d4_1.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_1.\d64_1.\d32_2.\d16_2.\d8_1.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_1.d64_1.d32_2.d16_2.d8_1.d4_0.out [0], Q = \demux0.inst1.d128_1.d64_1.d32_2.d16_2.d8_1.d4_1.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_1.\d64_1.\d32_2.\d16_1.\d8_2.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_1.d64_1.d32_2.d16_1.d8_2.d4_0.out [1], Q = \demux0.inst1.d128_1.d64_1.d32_2.d16_1.d8_2.d4_2.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_1.\d64_1.\d32_2.\d16_1.\d8_2.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_1.d64_1.d32_2.d16_1.d8_2.d4_0.out [1], Q = \demux0.inst1.d128_1.d64_1.d32_2.d16_1.d8_2.d4_2.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_1.\d64_1.\d32_2.\d16_1.\d8_2.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_1.d64_1.d32_2.d16_1.d8_2.d4_0.out [0], Q = \demux0.inst1.d128_1.d64_1.d32_2.d16_1.d8_2.d4_1.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_1.\d64_1.\d32_2.\d16_1.\d8_2.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_1.d64_1.d32_2.d16_1.d8_2.d4_0.out [0], Q = \demux0.inst1.d128_1.d64_1.d32_2.d16_1.d8_2.d4_1.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_1.\d64_1.\d32_2.\d16_1.\d8_1.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_1.d64_1.d32_2.d16_1.d8_1.d4_0.out [1], Q = \demux0.inst1.d128_1.d64_1.d32_2.d16_1.d8_1.d4_2.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_1.\d64_1.\d32_2.\d16_1.\d8_1.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_1.d64_1.d32_2.d16_1.d8_1.d4_0.out [1], Q = \demux0.inst1.d128_1.d64_1.d32_2.d16_1.d8_1.d4_2.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_1.\d64_1.\d32_2.\d16_1.\d8_1.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_1.d64_1.d32_2.d16_1.d8_1.d4_0.out [0], Q = \demux0.inst1.d128_1.d64_1.d32_2.d16_1.d8_1.d4_1.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_1.\d64_1.\d32_2.\d16_1.\d8_1.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_1.d64_1.d32_2.d16_1.d8_1.d4_0.out [0], Q = \demux0.inst1.d128_1.d64_1.d32_2.d16_1.d8_1.d4_1.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_1.\d64_1.\d32_1.\d16_2.\d8_2.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_1.d64_1.d32_1.d16_2.d8_2.d4_0.out [1], Q = \demux0.inst1.d128_1.d64_1.d32_1.d16_2.d8_2.d4_2.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_1.\d64_1.\d32_1.\d16_2.\d8_2.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_1.d64_1.d32_1.d16_2.d8_2.d4_0.out [1], Q = \demux0.inst1.d128_1.d64_1.d32_1.d16_2.d8_2.d4_2.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_1.\d64_1.\d32_1.\d16_2.\d8_2.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_1.d64_1.d32_1.d16_2.d8_2.d4_0.out [0], Q = \demux0.inst1.d128_1.d64_1.d32_1.d16_2.d8_2.d4_1.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_1.\d64_1.\d32_1.\d16_2.\d8_2.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_1.d64_1.d32_1.d16_2.d8_2.d4_0.out [0], Q = \demux0.inst1.d128_1.d64_1.d32_1.d16_2.d8_2.d4_1.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_1.\d64_1.\d32_1.\d16_2.\d8_1.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_1.d64_1.d32_1.d16_2.d8_1.d4_0.out [1], Q = \demux0.inst1.d128_1.d64_1.d32_1.d16_2.d8_1.d4_2.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_1.\d64_1.\d32_1.\d16_2.\d8_1.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_1.d64_1.d32_1.d16_2.d8_1.d4_0.out [1], Q = \demux0.inst1.d128_1.d64_1.d32_1.d16_2.d8_1.d4_2.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_1.\d64_1.\d32_1.\d16_2.\d8_1.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_1.d64_1.d32_1.d16_2.d8_1.d4_0.out [0], Q = \demux0.inst1.d128_1.d64_1.d32_1.d16_2.d8_1.d4_1.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_1.\d64_1.\d32_1.\d16_2.\d8_1.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_1.d64_1.d32_1.d16_2.d8_1.d4_0.out [0], Q = \demux0.inst1.d128_1.d64_1.d32_1.d16_2.d8_1.d4_1.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_1.\d64_1.\d32_1.\d16_1.\d8_2.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_1.d64_1.d32_1.d16_1.d8_2.d4_0.out [1], Q = \demux0.inst1.d128_1.d64_1.d32_1.d16_1.d8_2.d4_2.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_1.\d64_1.\d32_1.\d16_1.\d8_2.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_1.d64_1.d32_1.d16_1.d8_2.d4_0.out [1], Q = \demux0.inst1.d128_1.d64_1.d32_1.d16_1.d8_2.d4_2.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_1.\d64_1.\d32_1.\d16_1.\d8_2.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_1.d64_1.d32_1.d16_1.d8_2.d4_0.out [0], Q = \demux0.inst1.d128_1.d64_1.d32_1.d16_1.d8_2.d4_1.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_1.\d64_1.\d32_1.\d16_1.\d8_2.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_1.d64_1.d32_1.d16_1.d8_2.d4_0.out [0], Q = \demux0.inst1.d128_1.d64_1.d32_1.d16_1.d8_2.d4_1.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_1.\d64_1.\d32_1.\d16_1.\d8_1.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_1.d64_1.d32_1.d16_1.d8_1.d4_0.out [1], Q = \demux0.inst1.d128_1.d64_1.d32_1.d16_1.d8_1.d4_2.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_1.\d64_1.\d32_1.\d16_1.\d8_1.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_1.d64_1.d32_1.d16_1.d8_1.d4_0.out [1], Q = \demux0.inst1.d128_1.d64_1.d32_1.d16_1.d8_1.d4_2.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_1.\d64_1.\d32_1.\d16_1.\d8_1.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_1.d64_1.d32_1.d16_1.d8_1.d4_0.out [0], Q = \demux0.inst1.d128_1.d64_1.d32_1.d16_1.d8_1.d4_1.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst1.\d128_1.\d64_1.\d32_1.\d16_1.\d8_1.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst1.d128_1.d64_1.d32_1.d16_1.d8_1.d4_0.out [0], Q = \demux0.inst1.d128_1.d64_1.d32_1.d16_1.d8_1.d4_1.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_2.\d64_2.\d32_2.\d16_2.\d8_2.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_2.d64_2.d32_2.d16_2.d8_2.d4_0.out [1], Q = \demux0.inst0.d128_2.d64_2.d32_2.d16_2.d8_2.d4_2.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_2.\d64_2.\d32_2.\d16_2.\d8_2.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_2.d64_2.d32_2.d16_2.d8_2.d4_0.out [1], Q = \demux0.inst0.d128_2.d64_2.d32_2.d16_2.d8_2.d4_2.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_2.\d64_2.\d32_2.\d16_2.\d8_2.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_2.d64_2.d32_2.d16_2.d8_2.d4_0.out [0], Q = \demux0.inst0.d128_2.d64_2.d32_2.d16_2.d8_2.d4_1.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_2.\d64_2.\d32_2.\d16_2.\d8_2.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_2.d64_2.d32_2.d16_2.d8_2.d4_0.out [0], Q = \demux0.inst0.d128_2.d64_2.d32_2.d16_2.d8_2.d4_1.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_2.\d64_2.\d32_2.\d16_2.\d8_1.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_2.d64_2.d32_2.d16_2.d8_1.d4_0.out [1], Q = \demux0.inst0.d128_2.d64_2.d32_2.d16_2.d8_1.d4_2.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_2.\d64_2.\d32_2.\d16_2.\d8_1.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_2.d64_2.d32_2.d16_2.d8_1.d4_0.out [1], Q = \demux0.inst0.d128_2.d64_2.d32_2.d16_2.d8_1.d4_2.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_2.\d64_2.\d32_2.\d16_2.\d8_1.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_2.d64_2.d32_2.d16_2.d8_1.d4_0.out [0], Q = \demux0.inst0.d128_2.d64_2.d32_2.d16_2.d8_1.d4_1.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_2.\d64_2.\d32_2.\d16_2.\d8_1.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_2.d64_2.d32_2.d16_2.d8_1.d4_0.out [0], Q = \demux0.inst0.d128_2.d64_2.d32_2.d16_2.d8_1.d4_1.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_2.\d64_2.\d32_2.\d16_1.\d8_2.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_2.d64_2.d32_2.d16_1.d8_2.d4_0.out [1], Q = \demux0.inst0.d128_2.d64_2.d32_2.d16_1.d8_2.d4_2.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_2.\d64_2.\d32_2.\d16_1.\d8_2.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_2.d64_2.d32_2.d16_1.d8_2.d4_0.out [1], Q = \demux0.inst0.d128_2.d64_2.d32_2.d16_1.d8_2.d4_2.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_2.\d64_2.\d32_2.\d16_1.\d8_2.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_2.d64_2.d32_2.d16_1.d8_2.d4_0.out [0], Q = \demux0.inst0.d128_2.d64_2.d32_2.d16_1.d8_2.d4_1.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_2.\d64_2.\d32_2.\d16_1.\d8_2.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_2.d64_2.d32_2.d16_1.d8_2.d4_0.out [0], Q = \demux0.inst0.d128_2.d64_2.d32_2.d16_1.d8_2.d4_1.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_2.\d64_2.\d32_2.\d16_1.\d8_1.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_2.d64_2.d32_2.d16_1.d8_1.d4_0.out [1], Q = \demux0.inst0.d128_2.d64_2.d32_2.d16_1.d8_1.d4_2.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_2.\d64_2.\d32_2.\d16_1.\d8_1.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_2.d64_2.d32_2.d16_1.d8_1.d4_0.out [1], Q = \demux0.inst0.d128_2.d64_2.d32_2.d16_1.d8_1.d4_2.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_2.\d64_2.\d32_2.\d16_1.\d8_1.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_2.d64_2.d32_2.d16_1.d8_1.d4_0.out [0], Q = \demux0.inst0.d128_2.d64_2.d32_2.d16_1.d8_1.d4_1.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_2.\d64_2.\d32_2.\d16_1.\d8_1.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_2.d64_2.d32_2.d16_1.d8_1.d4_0.out [0], Q = \demux0.inst0.d128_2.d64_2.d32_2.d16_1.d8_1.d4_1.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_2.\d64_2.\d32_1.\d16_2.\d8_2.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_2.d64_2.d32_1.d16_2.d8_2.d4_0.out [1], Q = \demux0.inst0.d128_2.d64_2.d32_1.d16_2.d8_2.d4_2.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_2.\d64_2.\d32_1.\d16_2.\d8_2.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_2.d64_2.d32_1.d16_2.d8_2.d4_0.out [1], Q = \demux0.inst0.d128_2.d64_2.d32_1.d16_2.d8_2.d4_2.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_2.\d64_2.\d32_1.\d16_2.\d8_2.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_2.d64_2.d32_1.d16_2.d8_2.d4_0.out [0], Q = \demux0.inst0.d128_2.d64_2.d32_1.d16_2.d8_2.d4_1.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_2.\d64_2.\d32_1.\d16_2.\d8_2.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_2.d64_2.d32_1.d16_2.d8_2.d4_0.out [0], Q = \demux0.inst0.d128_2.d64_2.d32_1.d16_2.d8_2.d4_1.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_2.\d64_2.\d32_1.\d16_2.\d8_1.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_2.d64_2.d32_1.d16_2.d8_1.d4_0.out [1], Q = \demux0.inst0.d128_2.d64_2.d32_1.d16_2.d8_1.d4_2.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_2.\d64_2.\d32_1.\d16_2.\d8_1.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_2.d64_2.d32_1.d16_2.d8_1.d4_0.out [1], Q = \demux0.inst0.d128_2.d64_2.d32_1.d16_2.d8_1.d4_2.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_2.\d64_2.\d32_1.\d16_2.\d8_1.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_2.d64_2.d32_1.d16_2.d8_1.d4_0.out [0], Q = \demux0.inst0.d128_2.d64_2.d32_1.d16_2.d8_1.d4_1.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_2.\d64_2.\d32_1.\d16_2.\d8_1.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_2.d64_2.d32_1.d16_2.d8_1.d4_0.out [0], Q = \demux0.inst0.d128_2.d64_2.d32_1.d16_2.d8_1.d4_1.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_2.\d64_2.\d32_1.\d16_1.\d8_2.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_2.d64_2.d32_1.d16_1.d8_2.d4_0.out [1], Q = \demux0.inst0.d128_2.d64_2.d32_1.d16_1.d8_2.d4_2.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_2.\d64_2.\d32_1.\d16_1.\d8_2.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_2.d64_2.d32_1.d16_1.d8_2.d4_0.out [1], Q = \demux0.inst0.d128_2.d64_2.d32_1.d16_1.d8_2.d4_2.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_2.\d64_2.\d32_1.\d16_1.\d8_2.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_2.d64_2.d32_1.d16_1.d8_2.d4_0.out [0], Q = \demux0.inst0.d128_2.d64_2.d32_1.d16_1.d8_2.d4_1.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_2.\d64_2.\d32_1.\d16_1.\d8_2.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_2.d64_2.d32_1.d16_1.d8_2.d4_0.out [0], Q = \demux0.inst0.d128_2.d64_2.d32_1.d16_1.d8_2.d4_1.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_2.\d64_2.\d32_1.\d16_1.\d8_1.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_2.d64_2.d32_1.d16_1.d8_1.d4_0.out [1], Q = \demux0.inst0.d128_2.d64_2.d32_1.d16_1.d8_1.d4_2.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_2.\d64_2.\d32_1.\d16_1.\d8_1.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_2.d64_2.d32_1.d16_1.d8_1.d4_0.out [1], Q = \demux0.inst0.d128_2.d64_2.d32_1.d16_1.d8_1.d4_2.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_2.\d64_2.\d32_1.\d16_1.\d8_1.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_2.d64_2.d32_1.d16_1.d8_1.d4_0.out [0], Q = \demux0.inst0.d128_2.d64_2.d32_1.d16_1.d8_1.d4_1.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_2.\d64_2.\d32_1.\d16_1.\d8_1.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_2.d64_2.d32_1.d16_1.d8_1.d4_0.out [0], Q = \demux0.inst0.d128_2.d64_2.d32_1.d16_1.d8_1.d4_1.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_2.\d64_1.\d32_2.\d16_2.\d8_2.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_2.d64_1.d32_2.d16_2.d8_2.d4_0.out [1], Q = \demux0.inst0.d128_2.d64_1.d32_2.d16_2.d8_2.d4_2.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_2.\d64_1.\d32_2.\d16_2.\d8_2.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_2.d64_1.d32_2.d16_2.d8_2.d4_0.out [1], Q = \demux0.inst0.d128_2.d64_1.d32_2.d16_2.d8_2.d4_2.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_2.\d64_1.\d32_2.\d16_2.\d8_2.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_2.d64_1.d32_2.d16_2.d8_2.d4_0.out [0], Q = \demux0.inst0.d128_2.d64_1.d32_2.d16_2.d8_2.d4_1.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_2.\d64_1.\d32_2.\d16_2.\d8_2.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_2.d64_1.d32_2.d16_2.d8_2.d4_0.out [0], Q = \demux0.inst0.d128_2.d64_1.d32_2.d16_2.d8_2.d4_1.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_2.\d64_1.\d32_2.\d16_2.\d8_1.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_2.d64_1.d32_2.d16_2.d8_1.d4_0.out [1], Q = \demux0.inst0.d128_2.d64_1.d32_2.d16_2.d8_1.d4_2.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_2.\d64_1.\d32_2.\d16_2.\d8_1.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_2.d64_1.d32_2.d16_2.d8_1.d4_0.out [1], Q = \demux0.inst0.d128_2.d64_1.d32_2.d16_2.d8_1.d4_2.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_2.\d64_1.\d32_2.\d16_2.\d8_1.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_2.d64_1.d32_2.d16_2.d8_1.d4_0.out [0], Q = \demux0.inst0.d128_2.d64_1.d32_2.d16_2.d8_1.d4_1.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_2.\d64_1.\d32_2.\d16_2.\d8_1.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_2.d64_1.d32_2.d16_2.d8_1.d4_0.out [0], Q = \demux0.inst0.d128_2.d64_1.d32_2.d16_2.d8_1.d4_1.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_2.\d64_1.\d32_2.\d16_1.\d8_2.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_2.d64_1.d32_2.d16_1.d8_2.d4_0.out [1], Q = \demux0.inst0.d128_2.d64_1.d32_2.d16_1.d8_2.d4_2.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_2.\d64_1.\d32_2.\d16_1.\d8_2.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_2.d64_1.d32_2.d16_1.d8_2.d4_0.out [1], Q = \demux0.inst0.d128_2.d64_1.d32_2.d16_1.d8_2.d4_2.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_2.\d64_1.\d32_2.\d16_1.\d8_2.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_2.d64_1.d32_2.d16_1.d8_2.d4_0.out [0], Q = \demux0.inst0.d128_2.d64_1.d32_2.d16_1.d8_2.d4_1.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_2.\d64_1.\d32_2.\d16_1.\d8_2.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_2.d64_1.d32_2.d16_1.d8_2.d4_0.out [0], Q = \demux0.inst0.d128_2.d64_1.d32_2.d16_1.d8_2.d4_1.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_2.\d64_1.\d32_2.\d16_1.\d8_1.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_2.d64_1.d32_2.d16_1.d8_1.d4_0.out [1], Q = \demux0.inst0.d128_2.d64_1.d32_2.d16_1.d8_1.d4_2.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_2.\d64_1.\d32_2.\d16_1.\d8_1.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_2.d64_1.d32_2.d16_1.d8_1.d4_0.out [1], Q = \demux0.inst0.d128_2.d64_1.d32_2.d16_1.d8_1.d4_2.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_2.\d64_1.\d32_2.\d16_1.\d8_1.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_2.d64_1.d32_2.d16_1.d8_1.d4_0.out [0], Q = \demux0.inst0.d128_2.d64_1.d32_2.d16_1.d8_1.d4_1.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_2.\d64_1.\d32_2.\d16_1.\d8_1.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_2.d64_1.d32_2.d16_1.d8_1.d4_0.out [0], Q = \demux0.inst0.d128_2.d64_1.d32_2.d16_1.d8_1.d4_1.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_2.\d64_1.\d32_1.\d16_2.\d8_2.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_2.d64_1.d32_1.d16_2.d8_2.d4_0.out [1], Q = \demux0.inst0.d128_2.d64_1.d32_1.d16_2.d8_2.d4_2.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_2.\d64_1.\d32_1.\d16_2.\d8_2.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_2.d64_1.d32_1.d16_2.d8_2.d4_0.out [1], Q = \demux0.inst0.d128_2.d64_1.d32_1.d16_2.d8_2.d4_2.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_2.\d64_1.\d32_1.\d16_2.\d8_2.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_2.d64_1.d32_1.d16_2.d8_2.d4_0.out [0], Q = \demux0.inst0.d128_2.d64_1.d32_1.d16_2.d8_2.d4_1.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_2.\d64_1.\d32_1.\d16_2.\d8_2.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_2.d64_1.d32_1.d16_2.d8_2.d4_0.out [0], Q = \demux0.inst0.d128_2.d64_1.d32_1.d16_2.d8_2.d4_1.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_2.\d64_1.\d32_1.\d16_2.\d8_1.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_2.d64_1.d32_1.d16_2.d8_1.d4_0.out [1], Q = \demux0.inst0.d128_2.d64_1.d32_1.d16_2.d8_1.d4_2.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_2.\d64_1.\d32_1.\d16_2.\d8_1.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_2.d64_1.d32_1.d16_2.d8_1.d4_0.out [1], Q = \demux0.inst0.d128_2.d64_1.d32_1.d16_2.d8_1.d4_2.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_2.\d64_1.\d32_1.\d16_2.\d8_1.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_2.d64_1.d32_1.d16_2.d8_1.d4_0.out [0], Q = \demux0.inst0.d128_2.d64_1.d32_1.d16_2.d8_1.d4_1.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_2.\d64_1.\d32_1.\d16_2.\d8_1.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_2.d64_1.d32_1.d16_2.d8_1.d4_0.out [0], Q = \demux0.inst0.d128_2.d64_1.d32_1.d16_2.d8_1.d4_1.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_2.\d64_1.\d32_1.\d16_1.\d8_2.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_2.d64_1.d32_1.d16_1.d8_2.d4_0.out [1], Q = \demux0.inst0.d128_2.d64_1.d32_1.d16_1.d8_2.d4_2.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_2.\d64_1.\d32_1.\d16_1.\d8_2.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_2.d64_1.d32_1.d16_1.d8_2.d4_0.out [1], Q = \demux0.inst0.d128_2.d64_1.d32_1.d16_1.d8_2.d4_2.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_2.\d64_1.\d32_1.\d16_1.\d8_2.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_2.d64_1.d32_1.d16_1.d8_2.d4_0.out [0], Q = \demux0.inst0.d128_2.d64_1.d32_1.d16_1.d8_2.d4_1.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_2.\d64_1.\d32_1.\d16_1.\d8_2.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_2.d64_1.d32_1.d16_1.d8_2.d4_0.out [0], Q = \demux0.inst0.d128_2.d64_1.d32_1.d16_1.d8_2.d4_1.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_2.\d64_1.\d32_1.\d16_1.\d8_1.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_2.d64_1.d32_1.d16_1.d8_1.d4_0.out [1], Q = \demux0.inst0.d128_2.d64_1.d32_1.d16_1.d8_1.d4_2.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_2.\d64_1.\d32_1.\d16_1.\d8_1.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_2.d64_1.d32_1.d16_1.d8_1.d4_0.out [1], Q = \demux0.inst0.d128_2.d64_1.d32_1.d16_1.d8_1.d4_2.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_2.\d64_1.\d32_1.\d16_1.\d8_1.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_2.d64_1.d32_1.d16_1.d8_1.d4_0.out [0], Q = \demux0.inst0.d128_2.d64_1.d32_1.d16_1.d8_1.d4_1.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_2.\d64_1.\d32_1.\d16_1.\d8_1.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_2.d64_1.d32_1.d16_1.d8_1.d4_0.out [0], Q = \demux0.inst0.d128_2.d64_1.d32_1.d16_1.d8_1.d4_1.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_1.\d64_2.\d32_2.\d16_2.\d8_2.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_1.d64_2.d32_2.d16_2.d8_2.d4_0.out [1], Q = \demux0.inst0.d128_1.d64_2.d32_2.d16_2.d8_2.d4_2.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_1.\d64_2.\d32_2.\d16_2.\d8_2.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_1.d64_2.d32_2.d16_2.d8_2.d4_0.out [1], Q = \demux0.inst0.d128_1.d64_2.d32_2.d16_2.d8_2.d4_2.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_1.\d64_2.\d32_2.\d16_2.\d8_2.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_1.d64_2.d32_2.d16_2.d8_2.d4_0.out [0], Q = \demux0.inst0.d128_1.d64_2.d32_2.d16_2.d8_2.d4_1.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_1.\d64_2.\d32_2.\d16_2.\d8_2.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_1.d64_2.d32_2.d16_2.d8_2.d4_0.out [0], Q = \demux0.inst0.d128_1.d64_2.d32_2.d16_2.d8_2.d4_1.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_1.\d64_2.\d32_2.\d16_2.\d8_1.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_1.d64_2.d32_2.d16_2.d8_1.d4_0.out [1], Q = \demux0.inst0.d128_1.d64_2.d32_2.d16_2.d8_1.d4_2.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_1.\d64_2.\d32_2.\d16_2.\d8_1.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_1.d64_2.d32_2.d16_2.d8_1.d4_0.out [1], Q = \demux0.inst0.d128_1.d64_2.d32_2.d16_2.d8_1.d4_2.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_1.\d64_2.\d32_2.\d16_2.\d8_1.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_1.d64_2.d32_2.d16_2.d8_1.d4_0.out [0], Q = \demux0.inst0.d128_1.d64_2.d32_2.d16_2.d8_1.d4_1.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_1.\d64_2.\d32_2.\d16_2.\d8_1.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_1.d64_2.d32_2.d16_2.d8_1.d4_0.out [0], Q = \demux0.inst0.d128_1.d64_2.d32_2.d16_2.d8_1.d4_1.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_1.\d64_2.\d32_2.\d16_1.\d8_2.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_1.d64_2.d32_2.d16_1.d8_2.d4_0.out [1], Q = \demux0.inst0.d128_1.d64_2.d32_2.d16_1.d8_2.d4_2.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_1.\d64_2.\d32_2.\d16_1.\d8_2.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_1.d64_2.d32_2.d16_1.d8_2.d4_0.out [1], Q = \demux0.inst0.d128_1.d64_2.d32_2.d16_1.d8_2.d4_2.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_1.\d64_2.\d32_2.\d16_1.\d8_2.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_1.d64_2.d32_2.d16_1.d8_2.d4_0.out [0], Q = \demux0.inst0.d128_1.d64_2.d32_2.d16_1.d8_2.d4_1.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_1.\d64_2.\d32_2.\d16_1.\d8_2.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_1.d64_2.d32_2.d16_1.d8_2.d4_0.out [0], Q = \demux0.inst0.d128_1.d64_2.d32_2.d16_1.d8_2.d4_1.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_1.\d64_2.\d32_2.\d16_1.\d8_1.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_1.d64_2.d32_2.d16_1.d8_1.d4_0.out [1], Q = \demux0.inst0.d128_1.d64_2.d32_2.d16_1.d8_1.d4_2.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_1.\d64_2.\d32_2.\d16_1.\d8_1.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_1.d64_2.d32_2.d16_1.d8_1.d4_0.out [1], Q = \demux0.inst0.d128_1.d64_2.d32_2.d16_1.d8_1.d4_2.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_1.\d64_2.\d32_2.\d16_1.\d8_1.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_1.d64_2.d32_2.d16_1.d8_1.d4_0.out [0], Q = \demux0.inst0.d128_1.d64_2.d32_2.d16_1.d8_1.d4_1.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_1.\d64_2.\d32_2.\d16_1.\d8_1.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_1.d64_2.d32_2.d16_1.d8_1.d4_0.out [0], Q = \demux0.inst0.d128_1.d64_2.d32_2.d16_1.d8_1.d4_1.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_1.\d64_2.\d32_1.\d16_2.\d8_2.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_1.d64_2.d32_1.d16_2.d8_2.d4_0.out [1], Q = \demux0.inst0.d128_1.d64_2.d32_1.d16_2.d8_2.d4_2.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_1.\d64_2.\d32_1.\d16_2.\d8_2.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_1.d64_2.d32_1.d16_2.d8_2.d4_0.out [1], Q = \demux0.inst0.d128_1.d64_2.d32_1.d16_2.d8_2.d4_2.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_1.\d64_2.\d32_1.\d16_2.\d8_2.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_1.d64_2.d32_1.d16_2.d8_2.d4_0.out [0], Q = \demux0.inst0.d128_1.d64_2.d32_1.d16_2.d8_2.d4_1.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_1.\d64_2.\d32_1.\d16_2.\d8_2.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_1.d64_2.d32_1.d16_2.d8_2.d4_0.out [0], Q = \demux0.inst0.d128_1.d64_2.d32_1.d16_2.d8_2.d4_1.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_1.\d64_2.\d32_1.\d16_2.\d8_1.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_1.d64_2.d32_1.d16_2.d8_1.d4_0.out [1], Q = \demux0.inst0.d128_1.d64_2.d32_1.d16_2.d8_1.d4_2.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_1.\d64_2.\d32_1.\d16_2.\d8_1.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_1.d64_2.d32_1.d16_2.d8_1.d4_0.out [1], Q = \demux0.inst0.d128_1.d64_2.d32_1.d16_2.d8_1.d4_2.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_1.\d64_2.\d32_1.\d16_2.\d8_1.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_1.d64_2.d32_1.d16_2.d8_1.d4_0.out [0], Q = \demux0.inst0.d128_1.d64_2.d32_1.d16_2.d8_1.d4_1.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_1.\d64_2.\d32_1.\d16_2.\d8_1.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_1.d64_2.d32_1.d16_2.d8_1.d4_0.out [0], Q = \demux0.inst0.d128_1.d64_2.d32_1.d16_2.d8_1.d4_1.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_1.\d64_2.\d32_1.\d16_1.\d8_2.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_1.d64_2.d32_1.d16_1.d8_2.d4_0.out [1], Q = \demux0.inst0.d128_1.d64_2.d32_1.d16_1.d8_2.d4_2.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_1.\d64_2.\d32_1.\d16_1.\d8_2.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_1.d64_2.d32_1.d16_1.d8_2.d4_0.out [1], Q = \demux0.inst0.d128_1.d64_2.d32_1.d16_1.d8_2.d4_2.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_1.\d64_2.\d32_1.\d16_1.\d8_2.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_1.d64_2.d32_1.d16_1.d8_2.d4_0.out [0], Q = \demux0.inst0.d128_1.d64_2.d32_1.d16_1.d8_2.d4_1.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_1.\d64_2.\d32_1.\d16_1.\d8_2.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_1.d64_2.d32_1.d16_1.d8_2.d4_0.out [0], Q = \demux0.inst0.d128_1.d64_2.d32_1.d16_1.d8_2.d4_1.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_1.\d64_2.\d32_1.\d16_1.\d8_1.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_1.d64_2.d32_1.d16_1.d8_1.d4_0.out [1], Q = \demux0.inst0.d128_1.d64_2.d32_1.d16_1.d8_1.d4_2.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_1.\d64_2.\d32_1.\d16_1.\d8_1.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_1.d64_2.d32_1.d16_1.d8_1.d4_0.out [1], Q = \demux0.inst0.d128_1.d64_2.d32_1.d16_1.d8_1.d4_2.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_1.\d64_2.\d32_1.\d16_1.\d8_1.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_1.d64_2.d32_1.d16_1.d8_1.d4_0.out [0], Q = \demux0.inst0.d128_1.d64_2.d32_1.d16_1.d8_1.d4_1.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_1.\d64_2.\d32_1.\d16_1.\d8_1.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_1.d64_2.d32_1.d16_1.d8_1.d4_0.out [0], Q = \demux0.inst0.d128_1.d64_2.d32_1.d16_1.d8_1.d4_1.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_1.\d64_1.\d32_2.\d16_2.\d8_2.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_1.d64_1.d32_2.d16_2.d8_2.d4_0.out [1], Q = \demux0.inst0.d128_1.d64_1.d32_2.d16_2.d8_2.d4_2.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_1.\d64_1.\d32_2.\d16_2.\d8_2.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_1.d64_1.d32_2.d16_2.d8_2.d4_0.out [1], Q = \demux0.inst0.d128_1.d64_1.d32_2.d16_2.d8_2.d4_2.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_1.\d64_1.\d32_2.\d16_2.\d8_2.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_1.d64_1.d32_2.d16_2.d8_2.d4_0.out [0], Q = \demux0.inst0.d128_1.d64_1.d32_2.d16_2.d8_2.d4_1.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_1.\d64_1.\d32_2.\d16_2.\d8_2.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_1.d64_1.d32_2.d16_2.d8_2.d4_0.out [0], Q = \demux0.inst0.d128_1.d64_1.d32_2.d16_2.d8_2.d4_1.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_1.\d64_1.\d32_2.\d16_2.\d8_1.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_1.d64_1.d32_2.d16_2.d8_1.d4_0.out [1], Q = \demux0.inst0.d128_1.d64_1.d32_2.d16_2.d8_1.d4_2.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_1.\d64_1.\d32_2.\d16_2.\d8_1.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_1.d64_1.d32_2.d16_2.d8_1.d4_0.out [1], Q = \demux0.inst0.d128_1.d64_1.d32_2.d16_2.d8_1.d4_2.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_1.\d64_1.\d32_2.\d16_2.\d8_1.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_1.d64_1.d32_2.d16_2.d8_1.d4_0.out [0], Q = \demux0.inst0.d128_1.d64_1.d32_2.d16_2.d8_1.d4_1.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_1.\d64_1.\d32_2.\d16_2.\d8_1.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_1.d64_1.d32_2.d16_2.d8_1.d4_0.out [0], Q = \demux0.inst0.d128_1.d64_1.d32_2.d16_2.d8_1.d4_1.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_1.\d64_1.\d32_2.\d16_1.\d8_2.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_1.d64_1.d32_2.d16_1.d8_2.d4_0.out [1], Q = \demux0.inst0.d128_1.d64_1.d32_2.d16_1.d8_2.d4_2.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_1.\d64_1.\d32_2.\d16_1.\d8_2.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_1.d64_1.d32_2.d16_1.d8_2.d4_0.out [1], Q = \demux0.inst0.d128_1.d64_1.d32_2.d16_1.d8_2.d4_2.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_1.\d64_1.\d32_2.\d16_1.\d8_2.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_1.d64_1.d32_2.d16_1.d8_2.d4_0.out [0], Q = \demux0.inst0.d128_1.d64_1.d32_2.d16_1.d8_2.d4_1.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_1.\d64_1.\d32_2.\d16_1.\d8_2.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_1.d64_1.d32_2.d16_1.d8_2.d4_0.out [0], Q = \demux0.inst0.d128_1.d64_1.d32_2.d16_1.d8_2.d4_1.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_1.\d64_1.\d32_2.\d16_1.\d8_1.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_1.d64_1.d32_2.d16_1.d8_1.d4_0.out [1], Q = \demux0.inst0.d128_1.d64_1.d32_2.d16_1.d8_1.d4_2.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_1.\d64_1.\d32_2.\d16_1.\d8_1.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_1.d64_1.d32_2.d16_1.d8_1.d4_0.out [1], Q = \demux0.inst0.d128_1.d64_1.d32_2.d16_1.d8_1.d4_2.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_1.\d64_1.\d32_2.\d16_1.\d8_1.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_1.d64_1.d32_2.d16_1.d8_1.d4_0.out [0], Q = \demux0.inst0.d128_1.d64_1.d32_2.d16_1.d8_1.d4_1.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_1.\d64_1.\d32_2.\d16_1.\d8_1.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_1.d64_1.d32_2.d16_1.d8_1.d4_0.out [0], Q = \demux0.inst0.d128_1.d64_1.d32_2.d16_1.d8_1.d4_1.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_1.\d64_1.\d32_1.\d16_2.\d8_2.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_1.d64_1.d32_1.d16_2.d8_2.d4_0.out [1], Q = \demux0.inst0.d128_1.d64_1.d32_1.d16_2.d8_2.d4_2.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_1.\d64_1.\d32_1.\d16_2.\d8_2.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_1.d64_1.d32_1.d16_2.d8_2.d4_0.out [1], Q = \demux0.inst0.d128_1.d64_1.d32_1.d16_2.d8_2.d4_2.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_1.\d64_1.\d32_1.\d16_2.\d8_2.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_1.d64_1.d32_1.d16_2.d8_2.d4_0.out [0], Q = \demux0.inst0.d128_1.d64_1.d32_1.d16_2.d8_2.d4_1.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_1.\d64_1.\d32_1.\d16_2.\d8_2.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_1.d64_1.d32_1.d16_2.d8_2.d4_0.out [0], Q = \demux0.inst0.d128_1.d64_1.d32_1.d16_2.d8_2.d4_1.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_1.\d64_1.\d32_1.\d16_2.\d8_1.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_1.d64_1.d32_1.d16_2.d8_1.d4_0.out [1], Q = \demux0.inst0.d128_1.d64_1.d32_1.d16_2.d8_1.d4_2.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_1.\d64_1.\d32_1.\d16_2.\d8_1.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_1.d64_1.d32_1.d16_2.d8_1.d4_0.out [1], Q = \demux0.inst0.d128_1.d64_1.d32_1.d16_2.d8_1.d4_2.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_1.\d64_1.\d32_1.\d16_2.\d8_1.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_1.d64_1.d32_1.d16_2.d8_1.d4_0.out [0], Q = \demux0.inst0.d128_1.d64_1.d32_1.d16_2.d8_1.d4_1.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_1.\d64_1.\d32_1.\d16_2.\d8_1.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_1.d64_1.d32_1.d16_2.d8_1.d4_0.out [0], Q = \demux0.inst0.d128_1.d64_1.d32_1.d16_2.d8_1.d4_1.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_1.\d64_1.\d32_1.\d16_1.\d8_2.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_1.d64_1.d32_1.d16_1.d8_2.d4_0.out [1], Q = \demux0.inst0.d128_1.d64_1.d32_1.d16_1.d8_2.d4_2.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_1.\d64_1.\d32_1.\d16_1.\d8_2.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_1.d64_1.d32_1.d16_1.d8_2.d4_0.out [1], Q = \demux0.inst0.d128_1.d64_1.d32_1.d16_1.d8_2.d4_2.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_1.\d64_1.\d32_1.\d16_1.\d8_2.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_1.d64_1.d32_1.d16_1.d8_2.d4_0.out [0], Q = \demux0.inst0.d128_1.d64_1.d32_1.d16_1.d8_2.d4_1.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_1.\d64_1.\d32_1.\d16_1.\d8_2.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_1.d64_1.d32_1.d16_1.d8_2.d4_0.out [0], Q = \demux0.inst0.d128_1.d64_1.d32_1.d16_1.d8_2.d4_1.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_1.\d64_1.\d32_1.\d16_1.\d8_1.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_1.d64_1.d32_1.d16_1.d8_1.d4_0.out [1], Q = \demux0.inst0.d128_1.d64_1.d32_1.d16_1.d8_1.d4_2.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_1.\d64_1.\d32_1.\d16_1.\d8_1.\d4_2.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_1.d64_1.d32_1.d16_1.d8_1.d4_0.out [1], Q = \demux0.inst0.d128_1.d64_1.d32_1.d16_1.d8_1.d4_2.out [0], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_1.\d64_1.\d32_1.\d16_1.\d8_1.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_1.d64_1.d32_1.d16_1.d8_1.d4_0.out [0], Q = \demux0.inst0.d128_1.d64_1.d32_1.d16_1.d8_1.d4_1.out [1], rval = 1'0).
Adding SRST signal on $flatten\demux0.\inst0.\d128_1.\d64_1.\d32_1.\d16_1.\d8_1.\d4_1.$verific$out_reg$demux.v:153$951 ($dff) from module wrapper_io_reg_max (D = \demux0.inst0.d128_1.d64_1.d32_1.d16_1.d8_1.d4_0.out [0], Q = \demux0.inst0.d128_1.d64_1.d32_1.d16_1.d8_1.d4_1.out [0], rval = 1'0).

yosys> opt_clean

3.32. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \wrapper_io_reg_max..
Removed 128 unused cells and 128 unused wires.
<suppressed ~256 debug messages>

yosys> opt_expr

3.33. Executing OPT_EXPR pass (perform const folding).
Optimizing module wrapper_io_reg_max.
MAX OPT ITERATION = 1

yosys> wreduce -keepdc

3.34. Executing WREDUCE pass (reducing word size of cells).
Removed top 4 bits (of 7) from port B of cell wrapper_io_reg_max.$verific$xor_3$wrapper_io_reg_max.v:13$4 ($xor).

yosys> peepopt

3.35. Executing PEEPOPT pass (run peephole optimizers).

yosys> opt_clean

3.36. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \wrapper_io_reg_max..

yosys> demuxmap

3.37. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> stat

3.38. Printing statistics.

=== wrapper_io_reg_max ===

   Number of wires:               3713
   Number of wire bits:           8725
   Number of public wires:        3711
   Number of public wire bits:    8723
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                905
     $dff                          256
     $dlatch                         8
     $mux                          384
     $sdff                         256
     $xor                            1


yosys> wreduce t:$mul

3.39. Executing WREDUCE pass (reducing word size of cells).

yosys> rs_dsp_macc -genesis2 -max_dsp 154

3.40. Executing RS_DSP_MACC pass.

yosys> techmap -map +/mul2dsp_check_maxwidth.v -D DSP_A_MAXWIDTH=20 -D DSP_B_MAXWIDTH=18 -D DSP_A_MINWIDTH=11 -D DSP_B_MINWIDTH=10 -D DSP_NAME=$__RS_MUL20X18 a:valid_map

3.41. Executing TECHMAP pass (map to technology primitives).

3.41.1. Executing Verilog-2005 frontend: /nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/mul2dsp_check_maxwidth.v
Parsing Verilog input from `/nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/mul2dsp_check_maxwidth.v' to AST representation.
Generating RTLIL representation for module `\_80_mul'.
Generating RTLIL representation for module `\_90_soft_mul'.
Successfully finished Verilog frontend.

3.41.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

yosys> stat

3.42. Printing statistics.

=== wrapper_io_reg_max ===

   Number of wires:               3713
   Number of wire bits:           8725
   Number of public wires:        3711
   Number of public wire bits:    8723
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                905
     $dff                          256
     $dlatch                         8
     $mux                          384
     $sdff                         256
     $xor                            1


yosys> chtype -set $mul t:$__soft_mul

yosys> techmap -map +/rapidsilicon/genesis2/dsp_map.v -D USE_DSP_CFG_PARAMS=0

3.43. Executing TECHMAP pass (map to technology primitives).

3.43.1. Executing Verilog-2005 frontend: /nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/dsp_map.v
Parsing Verilog input from `/nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/dsp_map.v' to AST representation.
Generating RTLIL representation for module `\$__RS_MUL20X18'.
Successfully finished Verilog frontend.

3.43.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

yosys> techmap -map +/rapidsilicon/genesis2/dsp_final_map.v

3.44. Executing TECHMAP pass (map to technology primitives).

3.44.1. Executing Verilog-2005 frontend: /nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/dsp_final_map.v
Parsing Verilog input from `/nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/dsp_final_map.v' to AST representation.
Generating RTLIL representation for module `\dsp_t1_20x18x64_cfg_ports'.
Successfully finished Verilog frontend.

3.44.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

yosys> rs-pack-dsp-regs

3.45. Executing rs_pack_dsp_regs pass.

yosys> rs_dsp_io_regs

3.46. Executing RS_DSP_IO_REGS pass.

yosys> alumacc

3.47. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module wrapper_io_reg_max:
  created 0 $alu and 0 $macc cells.

yosys> opt_expr

3.48. Executing OPT_EXPR pass (perform const folding).
Optimizing module wrapper_io_reg_max.

yosys> opt_merge -nomux

3.49. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\wrapper_io_reg_max'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.50. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \wrapper_io_reg_max..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~142 debug messages>

yosys> opt_reduce

3.51. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \wrapper_io_reg_max.
Performed a total of 0 changes.

yosys> opt_merge

3.52. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\wrapper_io_reg_max'.
Removed a total of 0 cells.

yosys> opt_share

3.53. Executing OPT_SHARE pass.

yosys> opt_dff -nodffe

3.54. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.55. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \wrapper_io_reg_max..

yosys> opt_expr

3.56. Executing OPT_EXPR pass (perform const folding).
Optimizing module wrapper_io_reg_max.
MAX OPT ITERATION = 1

yosys> stat

3.57. Printing statistics.

=== wrapper_io_reg_max ===

   Number of wires:               3713
   Number of wire bits:           8725
   Number of public wires:        3711
   Number of public wire bits:    8723
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                905
     $dff                          256
     $dlatch                         8
     $mux                          384
     $sdff                         256
     $xor                            1


yosys> memory -nomap

3.58. Executing MEMORY pass.

yosys> opt_mem

3.58.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

yosys> opt_mem_priority

3.58.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

yosys> opt_mem_feedback

3.58.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

yosys> memory_bmux2rom

3.58.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

yosys> memory_dff

3.58.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

yosys> opt_clean

3.58.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \wrapper_io_reg_max..

yosys> memory_share

3.58.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

yosys> opt_mem_widen

3.58.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

yosys> opt_clean

3.58.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \wrapper_io_reg_max..

yosys> memory_collect

3.58.10. Executing MEMORY_COLLECT pass (generating $mem cells).

yosys> stat

3.59. Printing statistics.

=== wrapper_io_reg_max ===

   Number of wires:               3713
   Number of wire bits:           8725
   Number of public wires:        3711
   Number of public wire bits:    8723
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                905
     $dff                          256
     $dlatch                         8
     $mux                          384
     $sdff                         256
     $xor                            1


yosys> muxpack

3.60. Executing MUXPACK pass ($mux cell cascades to $pmux).
Converted 0 (p)mux cells into 0 pmux cells.
<suppressed ~383 debug messages>

yosys> opt_clean

3.61. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \wrapper_io_reg_max..

yosys> memory_libmap -lib +/rapidsilicon/genesis2/brams_new_swap.txt -limit 150 a:read_swapped

3.62. Executing MEMORY_LIBMAP pass (mapping memories to cells).

yosys> memory_libmap -lib +/rapidsilicon/genesis2/brams_new.txt -limit 150

3.63. Executing MEMORY_LIBMAP pass (mapping memories to cells).

yosys> rs_bram_split -new_mapping

3.64. Executing Rs_BRAM_Split pass.

yosys> techmap -autoproc -map +/rapidsilicon/genesis2/brams_map_new.v

3.65. Executing TECHMAP pass (map to technology primitives).

3.65.1. Executing Verilog-2005 frontend: /nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/brams_map_new.v
Parsing Verilog input from `/nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/brams_map_new.v' to AST representation.
Generating RTLIL representation for module `\$__RS_FACTOR_BRAM36_TDP'.
Generating RTLIL representation for module `\$__RS_FACTOR_BRAM18_TDP'.
Generating RTLIL representation for module `\$__RS_FACTOR_BRAM18_SDP'.
Generating RTLIL representation for module `\$__RS_FACTOR_BRAM36_SDP'.
Successfully finished Verilog frontend.

3.65.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~6 debug messages>

yosys> techmap -map +/rapidsilicon/genesis2/brams_final_map_new.v

3.66. Executing TECHMAP pass (map to technology primitives).

3.66.1. Executing Verilog-2005 frontend: /nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/brams_final_map_new.v
Parsing Verilog input from `/nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/brams_final_map_new.v' to AST representation.
Generating RTLIL representation for module `\BRAM2x18_TDP'.
Generating RTLIL representation for module `\BRAM2x18_SDP'.
Successfully finished Verilog frontend.

3.66.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

yosys> pmuxtree

3.67. Executing PMUXTREE pass.

yosys> muxpack

3.68. Executing MUXPACK pass ($mux cell cascades to $pmux).
Converted 0 (p)mux cells into 0 pmux cells.
<suppressed ~383 debug messages>

yosys> memory_map

3.69. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

yosys> stat

3.70. Printing statistics.

=== wrapper_io_reg_max ===

   Number of wires:               3713
   Number of wire bits:           8725
   Number of public wires:        3711
   Number of public wire bits:    8723
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                905
     $dff                          256
     $dlatch                         8
     $mux                          384
     $sdff                         256
     $xor                            1


yosys> techmap -map +/techmap.v -map +/rapidsilicon/genesis2/arith_map.v

3.71. Executing TECHMAP pass (map to technology primitives).

3.71.1. Executing Verilog-2005 frontend: /nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.71.2. Executing Verilog-2005 frontend: /nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/arith_map.v
Parsing Verilog input from `/nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_rs_alu'.
Successfully finished Verilog frontend.

3.71.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $sdff.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $dlatch.
No more expansions possible.
<suppressed ~976 debug messages>

yosys> stat

3.72. Printing statistics.

=== wrapper_io_reg_max ===

   Number of wires:               3713
   Number of wire bits:           8725
   Number of public wires:        3711
   Number of public wire bits:    8723
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1442
     $_DFF_P_                      256
     $_DLATCH_N_                   143
     $_DLATCH_P_                   143
     $_MUX_                        637
     $_SDFF_PN0_                   128
     $_SDFF_PP0_                   128
     $_XOR_                          7


yosys> opt_expr

3.73. Executing OPT_EXPR pass (perform const folding).
Optimizing module wrapper_io_reg_max.
<suppressed ~6 debug messages>

yosys> opt_merge -nomux

3.74. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\wrapper_io_reg_max'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.75. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \wrapper_io_reg_max..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.76. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \wrapper_io_reg_max.
Performed a total of 0 changes.

yosys> opt_merge

3.77. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\wrapper_io_reg_max'.
Removed a total of 0 cells.

yosys> opt_share

3.78. Executing OPT_SHARE pass.

yosys> opt_dff -nodffe

3.79. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.80. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \wrapper_io_reg_max..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.81. Executing OPT_EXPR pass (perform const folding).
Optimizing module wrapper_io_reg_max.
MAX OPT ITERATION = 1

yosys> opt_expr -full

3.82. Executing OPT_EXPR pass (perform const folding).
Optimizing module wrapper_io_reg_max.
<suppressed ~126 debug messages>

yosys> techmap -map +/techmap.v

3.83. Executing TECHMAP pass (map to technology primitives).

3.83.1. Executing Verilog-2005 frontend: /nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.83.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~71 debug messages>

yosys> stat

3.84. Printing statistics.

=== wrapper_io_reg_max ===

   Number of wires:               3711
   Number of wire bits:           8723
   Number of public wires:        3711
   Number of public wire bits:    8723
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1436
     $_AND_                        126
     $_DFF_P_                      256
     $_DLATCH_N_                   143
     $_DLATCH_P_                   143
     $_MUX_                        509
     $_SDFF_PN0_                   128
     $_SDFF_PP0_                   128
     $_XOR_                          3


yosys> dfflegalize -cell $_SDFF_???_ 0 -cell $_SDFFE_????_ 0 t:$_SDFFCE_*

3.85. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

yosys> stat

3.86. Printing statistics.

=== wrapper_io_reg_max ===

   Number of wires:               3711
   Number of wire bits:           8723
   Number of public wires:        3711
   Number of public wire bits:    8723
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1436
     $_AND_                        126
     $_DFF_P_                      256
     $_DLATCH_N_                   143
     $_DLATCH_P_                   143
     $_MUX_                        509
     $_SDFF_PN0_                   128
     $_SDFF_PP0_                   128
     $_XOR_                          3


yosys> opt_expr

3.87. Executing OPT_EXPR pass (perform const folding).
Optimizing module wrapper_io_reg_max.

yosys> opt_merge -nomux

3.88. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\wrapper_io_reg_max'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.89. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \wrapper_io_reg_max..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.90. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \wrapper_io_reg_max.
Performed a total of 0 changes.

yosys> opt_merge

3.91. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\wrapper_io_reg_max'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -sat

3.92. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.93. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \wrapper_io_reg_max..

yosys> opt_expr

3.94. Executing OPT_EXPR pass (perform const folding).
Optimizing module wrapper_io_reg_max.
MAX OPT ITERATION = 1

yosys> abc -dff -keepff

3.95. Executing ABC pass (technology mapping using ABC).

3.95.1. Summary of detected clock domains:
  340 cells in clk=\clk, en={ }, arst={ }, srst=!\demux0.sel_internal0 [0]
  261 cells in clk=\clk, en={ }, arst={ }, srst=!\demux0.sel_internal1 [0]
  127 cells in clk=\clk, en={ }, arst={ }, srst=\demux0.sel_internal0 [0]
  643 cells in clk=\clk, en={ }, arst={ }, srst={ }
  65 cells in clk=\clk, en={ }, arst={ }, srst=\demux0.sel_internal1 [0]

3.95.2. Extracting gate netlist of module `\wrapper_io_reg_max' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, synchronously reset by !\demux0.sel_internal0 [0]
Extracted 320 gates and 475 wires to a netlist network with 154 inputs and 132 outputs.

3.95.2.1. Executing ABC.

3.95.3. Extracting gate netlist of module `\wrapper_io_reg_max' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, synchronously reset by !\demux0.sel_internal1 [0]
Extracted 253 gates and 325 wires to a netlist network with 71 inputs and 191 outputs.

3.95.3.1. Executing ABC.

3.95.4. Extracting gate netlist of module `\wrapper_io_reg_max' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, synchronously reset by \demux0.sel_internal0 [0]
Extracted 127 gates and 255 wires to a netlist network with 128 inputs and 127 outputs.

3.95.4.1. Executing ABC.

3.95.5. Extracting gate netlist of module `\wrapper_io_reg_max' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk
Extracted 385 gates and 645 wires to a netlist network with 260 inputs and 385 outputs.

3.95.5.1. Executing ABC.

3.95.6. Extracting gate netlist of module `\wrapper_io_reg_max' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, synchronously reset by \demux0.sel_internal1 [0]
Extracted 65 gates and 131 wires to a netlist network with 66 inputs and 65 outputs.

3.95.6.1. Executing ABC.

yosys> abc -dff -keepff

3.96. Executing ABC pass (technology mapping using ABC).

3.96.1. Summary of detected clock domains:
  257 cells in clk=\clk, en={ }, arst={ }, srst=\demux0.sel_internal0 [0]
  197 cells in clk=\clk, en={ }, arst={ }, srst=!\demux0.sel_internal0 [0]
  129 cells in clk=\clk, en={ }, arst={ }, srst=!\demux0.sel_internal1 [0]
  643 cells in clk=\clk, en={ }, arst={ }, srst={ }
  458 cells in clk=\clk, en={ }, arst={ }, srst=\demux0.sel_internal1 [0]

3.96.2. Extracting gate netlist of module `\wrapper_io_reg_max' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, synchronously reset by \demux0.sel_internal0 [0]
Extracted 251 gates and 326 wires to a netlist network with 75 inputs and 160 outputs.

3.96.2.1. Executing ABC.

3.96.3. Extracting gate netlist of module `\wrapper_io_reg_max' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, synchronously reset by !\demux0.sel_internal0 [0]
Extracted 195 gates and 295 wires to a netlist network with 100 inputs and 131 outputs.

3.96.3.1. Executing ABC.

3.96.4. Extracting gate netlist of module `\wrapper_io_reg_max' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, synchronously reset by !\demux0.sel_internal1 [0]
Extracted 128 gates and 161 wires to a netlist network with 33 inputs and 64 outputs.

3.96.4.1. Executing ABC.

3.96.5. Extracting gate netlist of module `\wrapper_io_reg_max' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk
Extracted 385 gates and 645 wires to a netlist network with 260 inputs and 385 outputs.

3.96.5.1. Executing ABC.

3.96.6. Extracting gate netlist of module `\wrapper_io_reg_max' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, synchronously reset by \demux0.sel_internal1 [0]
Extracted 439 gates and 591 wires to a netlist network with 152 inputs and 99 outputs.

3.96.6.1. Executing ABC.

yosys> abc -dff -keepff

3.97. Executing ABC pass (technology mapping using ABC).

3.97.1. Summary of detected clock domains:
  193 cells in clk=\clk, en={ }, arst={ }, srst=!\demux0.sel_internal1 [0]
  193 cells in clk=\clk, en={ }, arst={ }, srst=\demux0.sel_internal0 [0]
  197 cells in clk=\clk, en={ }, arst={ }, srst=!\demux0.sel_internal0 [0]
  643 cells in clk=\clk, en={ }, arst={ }, srst={ }
  460 cells in clk=\clk, en={ }, arst={ }, srst=\demux0.sel_internal1 [0]

3.97.2. Extracting gate netlist of module `\wrapper_io_reg_max' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, synchronously reset by !\demux0.sel_internal1 [0]
Extracted 192 gates and 290 wires to a netlist network with 98 inputs and 128 outputs.

3.97.2.1. Executing ABC.

3.97.3. Extracting gate netlist of module `\wrapper_io_reg_max' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, synchronously reset by \demux0.sel_internal0 [0]
Extracted 192 gates and 290 wires to a netlist network with 98 inputs and 128 outputs.

3.97.3.1. Executing ABC.

3.97.4. Extracting gate netlist of module `\wrapper_io_reg_max' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, synchronously reset by !\demux0.sel_internal0 [0]
Extracted 190 gates and 197 wires to a netlist network with 7 inputs and 96 outputs.

3.97.4.1. Executing ABC.

3.97.5. Extracting gate netlist of module `\wrapper_io_reg_max' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk
Extracted 385 gates and 645 wires to a netlist network with 260 inputs and 385 outputs.

3.97.5.1. Executing ABC.

3.97.6. Extracting gate netlist of module `\wrapper_io_reg_max' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, synchronously reset by \demux0.sel_internal1 [0]
Extracted 441 gates and 593 wires to a netlist network with 152 inputs and 99 outputs.

3.97.6.1. Executing ABC.

yosys> abc -dff -keepff

3.98. Executing ABC pass (technology mapping using ABC).

3.98.1. Summary of detected clock domains:
  192 cells in clk=\clk, en={ }, arst={ }, srst=!\demux0.sel_internal1 [0]
  240 cells in clk=\clk, en={ }, arst={ }, srst=\demux0.sel_internal0 [0]
  643 cells in clk=\clk, en={ }, arst={ }, srst={ }
  151 cells in clk=\clk, en={ }, arst={ }, srst=!\demux0.sel_internal0 [0]
  428 cells in clk=\clk, en={ }, arst={ }, srst=\demux0.sel_internal1 [0]

3.98.2. Extracting gate netlist of module `\wrapper_io_reg_max' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, synchronously reset by !\demux0.sel_internal1 [0]
Extracted 191 gates and 288 wires to a netlist network with 97 inputs and 127 outputs.

3.98.2.1. Executing ABC.

3.98.3. Extracting gate netlist of module `\wrapper_io_reg_max' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, synchronously reset by \demux0.sel_internal0 [0]
Extracted 236 gates and 321 wires to a netlist network with 85 inputs and 154 outputs.

3.98.3.1. Executing ABC.

3.98.4. Extracting gate netlist of module `\wrapper_io_reg_max' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk
Extracted 385 gates and 645 wires to a netlist network with 260 inputs and 385 outputs.

3.98.4.1. Executing ABC.

3.98.5. Extracting gate netlist of module `\wrapper_io_reg_max' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, synchronously reset by !\demux0.sel_internal0 [0]
Extracted 147 gates and 182 wires to a netlist network with 35 inputs and 78 outputs.

3.98.5.1. Executing ABC.

3.98.6. Extracting gate netlist of module `\wrapper_io_reg_max' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, synchronously reset by \demux0.sel_internal1 [0]
Extracted 409 gates and 561 wires to a netlist network with 152 inputs and 99 outputs.

3.98.6.1. Executing ABC.

yosys> opt_ffinv

3.99. Executing OPT_FFINV pass (push inverters through FFs).
Discovering LUTs.
Pushed 0 inverters.

yosys> opt_expr

3.100. Executing OPT_EXPR pass (perform const folding).
Optimizing module wrapper_io_reg_max.

yosys> opt_merge -nomux

3.101. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\wrapper_io_reg_max'.
<suppressed ~384 debug messages>
Removed a total of 128 cells.

yosys> opt_muxtree

3.102. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \wrapper_io_reg_max..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.103. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \wrapper_io_reg_max.
Performed a total of 0 changes.

yosys> opt_merge

3.104. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\wrapper_io_reg_max'.
Removed a total of 0 cells.

yosys> opt_share

3.105. Executing OPT_SHARE pass.

yosys> opt_dff -sat

3.106. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.107. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \wrapper_io_reg_max..
Removed 0 unused cells and 8355 unused wires.
<suppressed ~1131 debug messages>

yosys> opt_expr

3.108. Executing OPT_EXPR pass (perform const folding).
Optimizing module wrapper_io_reg_max.
MAX OPT ITERATION = 1

yosys> bmuxmap

3.109. Executing BMUXMAP pass.

yosys> demuxmap

3.110. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> abc -script /tmp/yosys_ATaepy/abc_tmp_1.scr

3.111. Executing ABC pass (technology mapping using ABC).

3.111.1. Extracting gate netlist of module `\wrapper_io_reg_max' to `<abc-temp-dir>/input.blif'..
Extracted 760 gates and 1308 wires to a netlist network with 548 inputs and 260 outputs.

3.111.1.1. Executing ABC.
DE:   #PIs = 548  #Luts =   442  Max Lvl =   5  Avg Lvl =   1.51  [   0.85 sec. at Pass 0]{firstMap}[1]
DE:   #PIs = 548  #Luts =   353  Max Lvl =   5  Avg Lvl =   1.51  [   1.42 sec. at Pass 1]{initMapFlow}[2]
DE:   #PIs = 548  #Luts =   352  Max Lvl =   5  Avg Lvl =   1.51  [   1.97 sec. at Pass 2]{map}[2]
DE:   #PIs = 548  #Luts =   352  Max Lvl =   5  Avg Lvl =   1.51  [   0.75 sec. at Pass 3]{postMap}[6]
DE:   #PIs = 548  #Luts =   352  Max Lvl =   5  Avg Lvl =   1.51  [   0.48 sec. at Pass 4]{map}[12]
DE:   #PIs = 548  #Luts =   352  Max Lvl =   5  Avg Lvl =   1.51  [   1.22 sec. at Pass 5]{postMap}[16]
DE:   #PIs = 548  #Luts =   352  Max Lvl =   5  Avg Lvl =   1.51  [   1.63 sec. at Pass 6]{pushMap}[16]
DE:   #PIs = 548  #Luts =   352  Max Lvl =   5  Avg Lvl =   1.51  [   0.59 sec. at Pass 7]{finalMap}[16]

yosys> opt_expr

3.112. Executing OPT_EXPR pass (perform const folding).
Optimizing module wrapper_io_reg_max.

yosys> opt_merge -nomux

3.113. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\wrapper_io_reg_max'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.114. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \wrapper_io_reg_max..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.115. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \wrapper_io_reg_max.
Performed a total of 0 changes.

yosys> opt_merge

3.116. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\wrapper_io_reg_max'.
Removed a total of 0 cells.

yosys> opt_share

3.117. Executing OPT_SHARE pass.

yosys> opt_dff -nodffe

3.118. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.119. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \wrapper_io_reg_max..
Removed 0 unused cells and 1564 unused wires.
<suppressed ~385 debug messages>

yosys> opt_expr

3.120. Executing OPT_EXPR pass (perform const folding).
Optimizing module wrapper_io_reg_max.
MAX OPT ITERATION = 1

yosys> opt_ffinv

3.121. Executing OPT_FFINV pass (push inverters through FFs).
Discovering LUTs.
Pushed 0 inverters.

yosys> stat

3.122. Printing statistics.

=== wrapper_io_reg_max ===

   Number of wires:               3953
   Number of wire bits:           8713
   Number of public wires:        2197
   Number of public wire bits:    6957
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1150
     $_DFF_P_                      256
     $_DLATCH_N_                   143
     $_DLATCH_P_                   143
     $_SDFF_PN0_                   128
     $_SDFF_PP0_                   128
     $lut                          352


yosys> dfflegalize -cell $_DFF_?_ 0 -cell $_DFFE_??_ 0 -cell $_DFF_???_ 0 -cell $_DFFE_????_ 0 -cell $_SDFF_???_ 0 -cell $_SDFFE_????_ 0 -cell $_DLATCH_?_ 0 -cell $_DLATCH_???_ 0

3.123. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

yosys> stat

3.124. Printing statistics.

=== wrapper_io_reg_max ===

   Number of wires:               3953
   Number of wire bits:           8713
   Number of public wires:        2197
   Number of public wire bits:    6957
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1150
     $_DFF_P_                      256
     $_DLATCH_N_                   143
     $_DLATCH_P_                   143
     $_SDFF_PN0_                   128
     $_SDFF_PP0_                   128
     $lut                          352


yosys> techmap -map +/techmap.v -map +/rapidsilicon/genesis2/ffs_map.v

3.125. Executing TECHMAP pass (map to technology primitives).

3.125.1. Executing Verilog-2005 frontend: /nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.125.2. Executing Verilog-2005 frontend: /nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/ffs_map.v
Parsing Verilog input from `/nfs_project/github_runner/yosys_verific_rs_runner/_work/yosys_verific_rs/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis2/ffs_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP0N_'.
Generating RTLIL representation for module `\$_DFFE_PN0P_'.
Generating RTLIL representation for module `\$_DFFE_PN0N_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP1N_'.
Generating RTLIL representation for module `\$_DFFE_PN1P_'.
Generating RTLIL representation for module `\$_DFFE_PN1N_'.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP0N_'.
Generating RTLIL representation for module `\$_DFFE_NN0P_'.
Generating RTLIL representation for module `\$_DFFE_NN0N_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_NP1N_'.
Generating RTLIL representation for module `\$_DFFE_NN1P_'.
Generating RTLIL representation for module `\$_DFFE_NN1N_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PN0_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NN0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFF_PN1_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_NN1_'.
Generating RTLIL representation for module `\$_SDFFE_PP0P_'.
Generating RTLIL representation for module `\$_SDFFE_PP0N_'.
Generating RTLIL representation for module `\$_SDFFE_PN0P_'.
Generating RTLIL representation for module `\$_SDFFE_PN0N_'.
Generating RTLIL representation for module `\$_SDFFE_PP1P_'.
Generating RTLIL representation for module `\$_SDFFE_PP1N_'.
Generating RTLIL representation for module `\$_SDFFE_PN1P_'.
Generating RTLIL representation for module `\$_SDFFE_PN1N_'.
Generating RTLIL representation for module `\$_SDFFE_NP0P_'.
Generating RTLIL representation for module `\$_SDFFE_NP0N_'.
Generating RTLIL representation for module `\$_SDFFE_NN0P_'.
Generating RTLIL representation for module `\$_SDFFE_NN0N_'.
Generating RTLIL representation for module `\$_SDFFE_NP1P_'.
Generating RTLIL representation for module `\$_SDFFE_NP1N_'.
Generating RTLIL representation for module `\$_SDFFE_NN1P_'.
Generating RTLIL representation for module `\$_SDFFE_NN1N_'.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCH_PP0_'.
Generating RTLIL representation for module `\$_DLATCH_NP0_'.
Generating RTLIL representation for module `\$_DLATCH_PN0_'.
Generating RTLIL representation for module `\$_DLATCH_NN0_'.
Generating RTLIL representation for module `\$_DLATCH_PP1_'.
Generating RTLIL representation for module `\$_DLATCH_NP1_'.
Generating RTLIL representation for module `\$_DLATCH_PN1_'.
Generating RTLIL representation for module `\$_DLATCH_NN1_'.
Successfully finished Verilog frontend.

3.125.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $lut.
Using template \$_DLATCH_P_ for cells of type $_DLATCH_P_.
Using template \$_SDFF_PP0_ for cells of type $_SDFF_PP0_.
Using template \$_DFF_P_ for cells of type $_DFF_P_.
Using template \$_DLATCH_N_ for cells of type $_DLATCH_N_.
Using template \$_SDFF_PN0_ for cells of type $_SDFF_PN0_.
Using extmapper simplemap for cells of type $logic_not.
No more expansions possible.
<suppressed ~1413 debug messages>

yosys> opt_expr -mux_undef

3.126. Executing OPT_EXPR pass (perform const folding).
Optimizing module wrapper_io_reg_max.
<suppressed ~12622 debug messages>

yosys> simplemap

3.127. Executing SIMPLEMAP pass (map simple cells to gate primitives).

yosys> opt_expr

3.128. Executing OPT_EXPR pass (perform const folding).
Optimizing module wrapper_io_reg_max.

yosys> opt_merge

3.129. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\wrapper_io_reg_max'.
<suppressed ~2322 debug messages>
Removed a total of 774 cells.

yosys> opt_dff -nodffe -nosdff

3.130. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.131. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \wrapper_io_reg_max..
Removed 0 unused cells and 3989 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.132. Executing OPT_EXPR pass (perform const folding).
Optimizing module wrapper_io_reg_max.
<suppressed ~119 debug messages>

yosys> opt_merge -nomux

3.133. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\wrapper_io_reg_max'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.134. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \wrapper_io_reg_max..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.135. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \wrapper_io_reg_max.
Performed a total of 0 changes.

yosys> opt_merge

3.136. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\wrapper_io_reg_max'.
Removed a total of 0 cells.

yosys> opt_share

3.137. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.138. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.139. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \wrapper_io_reg_max..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.140. Executing OPT_EXPR pass (perform const folding).
Optimizing module wrapper_io_reg_max.
MAX OPT ITERATION = 1

yosys> abc -script /tmp/yosys_ATaepy/abc_tmp_2.scr

3.141. Executing ABC pass (technology mapping using ABC).

3.141.1. Extracting gate netlist of module `\wrapper_io_reg_max' to `<abc-temp-dir>/input.blif'..
Extracted 905 gates and 1456 wires to a netlist network with 550 inputs and 262 outputs.

3.141.1.1. Executing ABC.
DE:   #PIs = 550  #Luts =   354  Max Lvl =   5  Avg Lvl =   1.50  [   0.20 sec. at Pass 0]{firstMap}[1]
DE:   #PIs = 550  #Luts =   354  Max Lvl =   5  Avg Lvl =   1.50  [   1.53 sec. at Pass 1]{initMapFlow}[2]
DE:   #PIs = 550  #Luts =   354  Max Lvl =   5  Avg Lvl =   1.50  [   0.37 sec. at Pass 2]{map}[2]
DE:   #PIs = 550  #Luts =   354  Max Lvl =   5  Avg Lvl =   1.50  [   0.68 sec. at Pass 3]{postMap}[6]
DE:   #PIs = 550  #Luts =   353  Max Lvl =   5  Avg Lvl =   1.50  [   0.35 sec. at Pass 4]{map}[12]
DE:   #PIs = 550  #Luts =   353  Max Lvl =   5  Avg Lvl =   1.50  [   0.66 sec. at Pass 5]{postMap}[16]
DE:   #PIs = 550  #Luts =   353  Max Lvl =   5  Avg Lvl =   1.50  [   0.50 sec. at Pass 6]{map}[16]
DE:   #PIs = 550  #Luts =   353  Max Lvl =   5  Avg Lvl =   1.50  [   1.39 sec. at Pass 7]{postMap}[16]
DE:   #PIs = 550  #Luts =   353  Max Lvl =   5  Avg Lvl =   1.50  [   1.49 sec. at Pass 8]{pushMap}[16]
DE:   #PIs = 550  #Luts =   353  Max Lvl =   5  Avg Lvl =   1.50  [   0.76 sec. at Pass 9]{finalMap}[16]

yosys> opt_expr

3.142. Executing OPT_EXPR pass (perform const folding).
Optimizing module wrapper_io_reg_max.

yosys> opt_merge -nomux

3.143. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\wrapper_io_reg_max'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.144. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \wrapper_io_reg_max..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.145. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \wrapper_io_reg_max.
Performed a total of 0 changes.

yosys> opt_merge

3.146. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\wrapper_io_reg_max'.
Removed a total of 0 cells.

yosys> opt_share

3.147. Executing OPT_SHARE pass.

yosys> opt_dff -nodffe

3.148. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.149. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \wrapper_io_reg_max..
Removed 0 unused cells and 1372 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.150. Executing OPT_EXPR pass (perform const folding).
Optimizing module wrapper_io_reg_max.
MAX OPT ITERATION = 1

yosys> hierarchy -check

3.151. Executing HIERARCHY pass (managing design hierarchy).

3.151.1. Analyzing design hierarchy..
Top module:  \wrapper_io_reg_max

3.151.2. Analyzing design hierarchy..
Top module:  \wrapper_io_reg_max
Removed 0 unused modules.

yosys> stat

3.152. Printing statistics.

=== wrapper_io_reg_max ===

   Number of wires:               3954
   Number of wire bits:           8714
   Number of public wires:        2197
   Number of public wire bits:    6957
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1151
     $lut                          353
     dff                           256
     latch                         143
     latchn                        143
     sdffre                        256


yosys> opt_clean -purge

3.153. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \wrapper_io_reg_max..
Removed 0 unused cells and 1517 unused wires.
<suppressed ~1517 debug messages>

yosys> write_verilog -noattr -nohex synthesized.v

3.154. Executing Verilog backend.
Dumping module `\wrapper_io_reg_max'.

Warnings: 8 unique messages, 8 total
End of script. Logfile hash: 902f4d640e, CPU: user 6.90s system 0.19s, MEM: 64.80 MB peak
Yosys 0.18+10 (git sha1 92b23013e, gcc 11.2.0 -fPIC -Os)
Time spent: 92% 6x abc (81 sec), 1% 17x opt_clean (1 sec), ...
real 36.51
user 75.53
sys 12.00
