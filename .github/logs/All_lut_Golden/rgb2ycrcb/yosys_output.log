
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.14+36 (git sha1 15a4e900b, gcc 7.1.0 -fPIC -Os)


-- Executing script file `yosys.ys' --
echo on

yosys> plugin -i synth-rs

yosys> read -verific

yosys> read -incdir .

yosys> verific -vlog-incdir .

1. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Jan22_SW_Release, released at Sat Jan 29 02:42:49 2022.

yosys> verilog_defaults -add -I.

yosys> read -vlog2k rgb2ycrcb.v

yosys> verific -vlog2k rgb2ycrcb.v

2. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Jan22_SW_Release, released at Sat Jan 29 02:42:49 2022.
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'rgb2ycrcb.v'

yosys> synth_rs -top top -tech generic -goal area -no_dsp -no_bram -verilog top.verilog

3. Executing synth_rs pass.

yosys> hierarchy -check -top top

3.1. Executing HIERARCHY pass (managing design hierarchy).
VERIFIC-INFO [VERI-1018] rgb2ycrcb.v:57: compiling module 'top'
VERIFIC-WARNING [VERI-2371] rgb2ycrcb.v:100: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] rgb2ycrcb.v:101: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] rgb2ycrcb.v:102: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] rgb2ycrcb.v:104: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] rgb2ycrcb.v:113: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] rgb2ycrcb.v:114: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] rgb2ycrcb.v:115: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] rgb2ycrcb.v:117: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] rgb2ycrcb.v:126: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] rgb2ycrcb.v:127: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] rgb2ycrcb.v:128: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] rgb2ycrcb.v:130: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] rgb2ycrcb.v:140: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] rgb2ycrcb.v:143: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] rgb2ycrcb.v:146: delay control is not supported for synthesis
Importing module top.

3.1.1. Analyzing design hierarchy..
Top module:  \top

3.1.2. Analyzing design hierarchy..
Top module:  \top
Removed 0 unused modules.

yosys> proc

3.2. Executing PROC pass (convert processes to netlists).

yosys> proc_clean

3.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> proc_rmdead

3.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

yosys> proc_prune

3.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

yosys> proc_init

3.2.4. Executing PROC_INIT pass (extract init attributes).

yosys> proc_arst

3.2.5. Executing PROC_ARST pass (detect async resets in processes).

yosys> proc_mux

3.2.6. Executing PROC_MUX pass (convert decision trees to multiplexers).

yosys> proc_dlatch

3.2.7. Executing PROC_DLATCH pass (convert process syncs to latches).

yosys> proc_dff

3.2.8. Executing PROC_DFF pass (convert process syncs to FFs).

yosys> proc_memwr

3.2.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

yosys> proc_clean

3.2.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> opt_expr -keepdc

3.2.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

yosys> flatten

3.3. Executing FLATTEN pass (flatten design).

yosys> tribuf -logic

3.4. Executing TRIBUF pass.

yosys> opt_expr

3.5. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~2 debug messages>

yosys> opt_clean

3.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 18 unused wires.
<suppressed ~16 debug messages>

yosys> check

3.7. Executing CHECK pass (checking for obvious problems).
Checking module top...
Found and reported 0 problems.

yosys> deminout

3.8. Executing DEMINOUT pass (demote inout ports to input or output).

yosys> opt -nodffe -nosdff

3.9. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.9.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

yosys> opt_merge -nomux

3.9.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.9.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~15 debug messages>

yosys> opt_reduce

3.9.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.9.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.9.6. Executing OPT_DFF pass (perform DFF optimizations).
Removing never-active async load on $verific$yr_reg$rgb2ycrcb.v:105$77 ($aldff) from module top.
Removing never-active async load on $verific$yg_reg$rgb2ycrcb.v:105$78 ($aldff) from module top.
Removing never-active async load on $verific$yb_reg$rgb2ycrcb.v:105$79 ($aldff) from module top.
Removing never-active async load on $verific$y_reg$rgb2ycrcb.v:147$127 ($aldff) from module top.
Removing never-active async load on $verific$y1_reg$rgb2ycrcb.v:105$80 ($aldff) from module top.
Removing never-active async load on $verific$crr_reg$rgb2ycrcb.v:118$93 ($aldff) from module top.
Removing never-active async load on $verific$crg_reg$rgb2ycrcb.v:118$94 ($aldff) from module top.
Removing never-active async load on $verific$crb_reg$rgb2ycrcb.v:118$95 ($aldff) from module top.
Removing never-active async load on $verific$cr_reg$rgb2ycrcb.v:147$128 ($aldff) from module top.
Removing never-active async load on $verific$cr1_reg$rgb2ycrcb.v:118$96 ($aldff) from module top.
Removing never-active async load on $verific$cbr_reg$rgb2ycrcb.v:131$109 ($aldff) from module top.
Removing never-active async load on $verific$cbg_reg$rgb2ycrcb.v:131$110 ($aldff) from module top.
Removing never-active async load on $verific$cbb_reg$rgb2ycrcb.v:131$111 ($aldff) from module top.
Removing never-active async load on $verific$cb_reg$rgb2ycrcb.v:147$129 ($aldff) from module top.
Removing never-active async load on $verific$cb1_reg$rgb2ycrcb.v:131$112 ($aldff) from module top.

yosys> opt_clean

3.9.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

yosys> opt_expr

3.9.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.9.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.9.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~15 debug messages>

yosys> opt_reduce

3.9.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.9.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.9.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.9.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

yosys> opt_expr

3.9.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.9.16. Finished OPT passes. (There is nothing left to do.)

yosys> fsm

3.10. Executing FSM pass (extract and optimize FSM).

yosys> fsm_detect

3.10.1. Executing FSM_DETECT pass (finding FSMs in design).

yosys> fsm_extract

3.10.2. Executing FSM_EXTRACT pass (extracting FSM from design).

yosys> fsm_opt

3.10.3. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> opt_clean

3.10.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

yosys> fsm_opt

3.10.5. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> fsm_recode

3.10.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

yosys> fsm_info

3.10.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

yosys> fsm_map

3.10.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

yosys> opt -sat

3.11. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

yosys> opt_merge -nomux

3.11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.11.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~15 debug messages>

yosys> opt_reduce

3.11.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.11.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.11.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $verific$yr_reg$rgb2ycrcb.v:105$77 ($dff) from module top (D = { 1'0 $verific$n25$13 [18:1] 1'0 }, Q = \yr).
Adding EN signal on $verific$yg_reg$rgb2ycrcb.v:105$78 ($dff) from module top (D = $verific$n46$14, Q = \yg).
Adding EN signal on $verific$yb_reg$rgb2ycrcb.v:105$79 ($dff) from module top (D = { 3'000 $verific$n106$17 [16:2] 2'00 }, Q = \yb).
Adding EN signal on $verific$y_reg$rgb2ycrcb.v:147$127 ($dff) from module top (D = $verific$n1067$50, Q = \y).
Adding EN signal on $verific$y1_reg$rgb2ycrcb.v:105$80 ($dff) from module top (D = { $verific$n149$5 $verific$n150$19 }, Q = \y1).
Adding EN signal on $verific$crr_reg$rgb2ycrcb.v:118$93 ($dff) from module top (D = { 1'0 \r 9'000000000 }, Q = \crr).
Adding EN signal on $verific$crg_reg$rgb2ycrcb.v:118$94 ($dff) from module top (D = { 1'0 $verific$n389$26 }, Q = \crg).
Adding EN signal on $verific$crb_reg$rgb2ycrcb.v:118$95 ($dff) from module top (D = { 3'000 $verific$n430$28 }, Q = \crb).
Adding EN signal on $verific$cr_reg$rgb2ycrcb.v:147$128 ($dff) from module top (D = $verific$n1103$53, Q = \cr).
Adding EN signal on $verific$cr1_reg$rgb2ycrcb.v:118$96 ($dff) from module top (D = $verific$n491$31, Q = \cr1).
Adding EN signal on $verific$cbr_reg$rgb2ycrcb.v:131$109 ($dff) from module top (D = { 2'00 $verific$n710$37 }, Q = \cbr).
Adding EN signal on $verific$cbg_reg$rgb2ycrcb.v:131$110 ($dff) from module top (D = { 1'0 $verific$n750$39 }, Q = \cbg).
Adding EN signal on $verific$cbb_reg$rgb2ycrcb.v:131$111 ($dff) from module top (D = { 1'0 \b 9'000000000 }, Q = \cbb).
Adding EN signal on $verific$cb_reg$rgb2ycrcb.v:147$129 ($dff) from module top (D = $verific$n1139$56, Q = \cb).
Adding EN signal on $verific$cb1_reg$rgb2ycrcb.v:131$112 ($dff) from module top (D = $verific$n834$43, Q = \cb1).
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$143 ($dffe) from module top.
Setting constant 0-bit at position 1 on $auto$ff.cc:262:slice$143 ($dffe) from module top.
Setting constant 0-bit at position 2 on $auto$ff.cc:262:slice$143 ($dffe) from module top.
Setting constant 0-bit at position 3 on $auto$ff.cc:262:slice$143 ($dffe) from module top.
Setting constant 0-bit at position 4 on $auto$ff.cc:262:slice$143 ($dffe) from module top.
Setting constant 0-bit at position 5 on $auto$ff.cc:262:slice$143 ($dffe) from module top.
Setting constant 0-bit at position 6 on $auto$ff.cc:262:slice$143 ($dffe) from module top.
Setting constant 0-bit at position 7 on $auto$ff.cc:262:slice$143 ($dffe) from module top.
Setting constant 0-bit at position 8 on $auto$ff.cc:262:slice$143 ($dffe) from module top.
Setting constant 0-bit at position 19 on $auto$ff.cc:262:slice$143 ($dffe) from module top.
Setting constant 0-bit at position 19 on $auto$ff.cc:262:slice$142 ($dffe) from module top.
Setting constant 0-bit at position 18 on $auto$ff.cc:262:slice$141 ($dffe) from module top.
Setting constant 0-bit at position 19 on $auto$ff.cc:262:slice$141 ($dffe) from module top.
Setting constant 0-bit at position 17 on $auto$ff.cc:262:slice$138 ($dffe) from module top.
Setting constant 0-bit at position 18 on $auto$ff.cc:262:slice$138 ($dffe) from module top.
Setting constant 0-bit at position 19 on $auto$ff.cc:262:slice$138 ($dffe) from module top.
Setting constant 0-bit at position 19 on $auto$ff.cc:262:slice$137 ($dffe) from module top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$136 ($dffe) from module top.
Setting constant 0-bit at position 1 on $auto$ff.cc:262:slice$136 ($dffe) from module top.
Setting constant 0-bit at position 2 on $auto$ff.cc:262:slice$136 ($dffe) from module top.
Setting constant 0-bit at position 3 on $auto$ff.cc:262:slice$136 ($dffe) from module top.
Setting constant 0-bit at position 4 on $auto$ff.cc:262:slice$136 ($dffe) from module top.
Setting constant 0-bit at position 5 on $auto$ff.cc:262:slice$136 ($dffe) from module top.
Setting constant 0-bit at position 6 on $auto$ff.cc:262:slice$136 ($dffe) from module top.
Setting constant 0-bit at position 7 on $auto$ff.cc:262:slice$136 ($dffe) from module top.
Setting constant 0-bit at position 8 on $auto$ff.cc:262:slice$136 ($dffe) from module top.
Setting constant 0-bit at position 19 on $auto$ff.cc:262:slice$136 ($dffe) from module top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$133 ($dffe) from module top.
Setting constant 0-bit at position 1 on $auto$ff.cc:262:slice$133 ($dffe) from module top.
Setting constant 0-bit at position 17 on $auto$ff.cc:262:slice$133 ($dffe) from module top.
Setting constant 0-bit at position 18 on $auto$ff.cc:262:slice$133 ($dffe) from module top.
Setting constant 0-bit at position 19 on $auto$ff.cc:262:slice$133 ($dffe) from module top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$131 ($dffe) from module top.
Setting constant 0-bit at position 19 on $auto$ff.cc:262:slice$131 ($dffe) from module top.

yosys> opt_clean

3.11.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 15 unused cells and 15 unused wires.
<suppressed ~16 debug messages>

yosys> opt_expr

3.11.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.11.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.11.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.11.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.11.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.11.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.11.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

yosys> opt_expr

3.11.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.11.16. Finished OPT passes. (There is nothing left to do.)

yosys> wreduce -keepdc

3.12. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 20) from port A of cell top.$verific$add_10$rgb2ycrcb.v:104$70 ($add).
Removed top 4 bits (of 21) from port B of cell top.$verific$add_11$rgb2ycrcb.v:104$71 ($add).
Removed top 2 bits (of 21) from port A of cell top.$verific$sub_27$rgb2ycrcb.v:117$86 ($sub).
Removed top 2 bits (of 21) from port B of cell top.$verific$sub_27$rgb2ycrcb.v:117$86 ($sub).
Removed top 1 bits (of 21) from port Y of cell top.$verific$sub_27$rgb2ycrcb.v:117$86 ($sub).
Removed top 5 bits (of 22) from port B of cell top.$verific$sub_28$rgb2ycrcb.v:117$87 ($sub).
Removed top 2 bits (of 21) from port A of cell top.$verific$sub_44$rgb2ycrcb.v:130$102 ($sub).
Removed top 3 bits (of 21) from port B of cell top.$verific$sub_44$rgb2ycrcb.v:130$102 ($sub).
Removed top 1 bits (of 21) from port Y of cell top.$verific$sub_44$rgb2ycrcb.v:130$102 ($sub).
Removed top 3 bits (of 22) from port B of cell top.$verific$sub_45$rgb2ycrcb.v:130$103 ($sub).
Removed top 3 bits (of 20) from wire top.$verific$n106$17.
Removed top 1 bits (of 20) from wire top.$verific$n25$13.
Removed top 1 bits (of 20) from wire top.cbb.
Removed top 1 bits (of 20) from wire top.cbg.
Removed top 2 bits (of 20) from wire top.cbr.
Removed top 3 bits (of 20) from wire top.crb.
Removed top 1 bits (of 20) from wire top.crg.
Removed top 1 bits (of 20) from wire top.crr.
Removed top 3 bits (of 20) from wire top.yb.
Removed top 1 bits (of 20) from wire top.yr.

yosys> peepopt

3.13. Executing PEEPOPT pass (run peephole optimizers).

yosys> pmuxtree

3.14. Executing PMUXTREE pass.

yosys> opt_clean

3.15. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 10 unused wires.
<suppressed ~1 debug messages>

yosys> techmap

3.16. Executing TECHMAP pass (map to technology primitives).

3.16.1. Executing Verilog-2005 frontend: /home/users/aram/Workspace/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/aram/Workspace/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.16.2. Continuing TECHMAP pass.
Running "alumacc" on wrapper $extern:wrap:$mul:A_SIGNED=0:A_WIDTH=8:B_SIGNED=0:B_WIDTH=10:Y_WIDTH=18:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$mul:A_SIGNED=0:A_WIDTH=8:B_SIGNED=0:B_WIDTH=10:Y_WIDTH=18:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$mul:A_SIGNED=0:A_WIDTH=8:B_SIGNED=0:B_WIDTH=10:Y_WIDTH=18:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$mul:A_SIGNED=0:A_WIDTH=10:B_SIGNED=0:B_WIDTH=10:Y_WIDTH=20:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$mul:A_SIGNED=0:A_WIDTH=10:B_SIGNED=0:B_WIDTH=10:Y_WIDTH=20:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$mul:A_SIGNED=0:A_WIDTH=10:B_SIGNED=0:B_WIDTH=10:Y_WIDTH=20:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$mul:A_SIGNED=0:A_WIDTH=5:B_SIGNED=0:B_WIDTH=10:Y_WIDTH=15:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$mul:A_SIGNED=0:A_WIDTH=5:B_SIGNED=0:B_WIDTH=10:Y_WIDTH=15:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$mul:A_SIGNED=0:A_WIDTH=5:B_SIGNED=0:B_WIDTH=10:Y_WIDTH=15:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$add:A_SIGNED=0:A_WIDTH=19:B_SIGNED=0:B_WIDTH=20:Y_WIDTH=21:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$add:A_SIGNED=0:A_WIDTH=19:B_SIGNED=0:B_WIDTH=20:Y_WIDTH=21:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$add:A_SIGNED=0:A_WIDTH=19:B_SIGNED=0:B_WIDTH=20:Y_WIDTH=21:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$add:A_SIGNED=0:A_WIDTH=21:B_SIGNED=0:B_WIDTH=17:Y_WIDTH=22:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$add:A_SIGNED=0:A_WIDTH=21:B_SIGNED=0:B_WIDTH=17:Y_WIDTH=22:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$add:A_SIGNED=0:A_WIDTH=21:B_SIGNED=0:B_WIDTH=17:Y_WIDTH=22:394426c56d1a028ba8fdd5469b163e04011def47.
Using extmapper simplemap for cells of type $dffe.
Running "alumacc" on wrapper $extern:wrap:$mul:A_SIGNED=0:A_WIDTH=9:B_SIGNED=0:B_WIDTH=10:Y_WIDTH=19:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$mul:A_SIGNED=0:A_WIDTH=9:B_SIGNED=0:B_WIDTH=10:Y_WIDTH=19:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$mul:A_SIGNED=0:A_WIDTH=9:B_SIGNED=0:B_WIDTH=10:Y_WIDTH=19:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$mul:A_SIGNED=0:A_WIDTH=7:B_SIGNED=0:B_WIDTH=10:Y_WIDTH=17:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$mul:A_SIGNED=0:A_WIDTH=7:B_SIGNED=0:B_WIDTH=10:Y_WIDTH=17:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$mul:A_SIGNED=0:A_WIDTH=7:B_SIGNED=0:B_WIDTH=10:Y_WIDTH=17:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:A_SIGNED=0:A_WIDTH=19:B_SIGNED=0:B_WIDTH=19:Y_WIDTH=20:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:A_SIGNED=0:A_WIDTH=19:B_SIGNED=0:B_WIDTH=19:Y_WIDTH=20:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:A_SIGNED=0:A_WIDTH=19:B_SIGNED=0:B_WIDTH=19:Y_WIDTH=20:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:A_SIGNED=0:A_WIDTH=22:B_SIGNED=0:B_WIDTH=17:Y_WIDTH=22:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:A_SIGNED=0:A_WIDTH=22:B_SIGNED=0:B_WIDTH=17:Y_WIDTH=22:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:A_SIGNED=0:A_WIDTH=22:B_SIGNED=0:B_WIDTH=17:Y_WIDTH=22:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:A_SIGNED=0:A_WIDTH=19:B_SIGNED=0:B_WIDTH=18:Y_WIDTH=20:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:A_SIGNED=0:A_WIDTH=19:B_SIGNED=0:B_WIDTH=18:Y_WIDTH=20:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:A_SIGNED=0:A_WIDTH=19:B_SIGNED=0:B_WIDTH=18:Y_WIDTH=20:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:A_SIGNED=0:A_WIDTH=22:B_SIGNED=0:B_WIDTH=19:Y_WIDTH=22:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:A_SIGNED=0:A_WIDTH=22:B_SIGNED=0:B_WIDTH=19:Y_WIDTH=22:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:A_SIGNED=0:A_WIDTH=22:B_SIGNED=0:B_WIDTH=19:Y_WIDTH=22:394426c56d1a028ba8fdd5469b163e04011def47.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $or.
Using extmapper maccmap for cells of type $macc.
  add \r * 8'10011001 (10x8 bits, unsigned)
  add 10'1001011001 * \g (10x10 bits, unsigned)
  add \b * 5'11101 (10x5 bits, unsigned)
Using template $paramod$7625443a2b29a69e83f7ff807e2eb352e3267312\_90_alu for cells of type $alu.
Using template $paramod$886ac64901cf267626b2916d943974aef3ba6fd9\_90_alu for cells of type $alu.
  add \g * 9'110101101 (10x9 bits, unsigned)
  add \b * 7'1010011 (10x7 bits, unsigned)
Using template $paramod$aac77111ec976962096d49169906492758c7e4cd\_90_alu for cells of type $alu.
Using template $paramod$61903aa0d8c74376e6a0d884440167125cba3a00\_90_alu for cells of type $alu.
  add \r * 8'10101101 (10x8 bits, unsigned)
  add \g * 9'101010011 (10x9 bits, unsigned)
Using template $paramod$3f130b1307126b2ad59695abd14050e58a80d0ee\_90_alu for cells of type $alu.
Using template $paramod$6307e5ce3d533ec50c4ecf347391090fef570026\_90_alu for cells of type $alu.
Using template $paramod\_90_fa\WIDTH=32'00000000000000000000000000010010 for cells of type $fa.
Using template $paramod$12350b8c8422a70d10b7db4eaae1202a7148b784\_90_alu for cells of type $alu.
Using template $paramod\_90_fa\WIDTH=32'00000000000000000000000000010100 for cells of type $fa.
Using template $paramod$6fc37af1c109ae54e8aed83fcd995c12d378ce93\_90_alu for cells of type $alu.
Using template $paramod\_90_fa\WIDTH=32'00000000000000000000000000001111 for cells of type $fa.
Using template $paramod$67e8f4b8dba01cd3d8fc718acd02276257d102de\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010101 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $mux.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010110 for cells of type $lcu.
Using template $paramod\_90_fa\WIDTH=32'00000000000000000000000000010011 for cells of type $fa.
Using template $paramod$4e6ee5eb737cf7428f8e246e911ae1dac9ae2979\_90_alu for cells of type $alu.
Using template $paramod\_90_fa\WIDTH=32'00000000000000000000000000010001 for cells of type $fa.
Using template $paramod$3bb72ad0665cdca279bbc49ed6a39f403f16497f\_90_alu for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010100 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010010 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001111 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010011 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010001 for cells of type $lcu.
No more expansions possible.
<suppressed ~3200 debug messages>

yosys> alumacc

3.17. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module top:
  created 0 $alu and 0 $macc cells.

yosys> opt

3.18. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~4612 debug messages>

yosys> opt_merge -nomux

3.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~411 debug messages>
Removed a total of 137 cells.

yosys> opt_muxtree

3.18.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.18.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.18.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_dff

3.18.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.18.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 243 unused cells and 1159 unused wires.
<suppressed ~244 debug messages>

yosys> opt_expr

3.18.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.18.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.18.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.18.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.18.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_dff

3.18.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.18.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

yosys> opt_expr

3.18.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.18.16. Finished OPT passes. (There is nothing left to do.)

yosys> memory -nomap

3.19. Executing MEMORY pass.

yosys> opt_mem

3.19.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

yosys> opt_mem_priority

3.19.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

yosys> opt_mem_feedback

3.19.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

yosys> memory_dff

3.19.4. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

yosys> opt_clean

3.19.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

yosys> memory_share

3.19.6. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

yosys> opt_mem_widen

3.19.7. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

yosys> opt_clean

3.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

yosys> memory_collect

3.19.9. Executing MEMORY_COLLECT pass (generating $mem cells).

yosys> opt_clean

3.20. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

yosys> opt_expr -mux_undef

3.21. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

yosys> simplemap

3.22. Executing SIMPLEMAP pass (map simple cells to gate primitives).

yosys> opt_expr

3.23. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

yosys> opt_merge

3.24. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.25. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.26. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

yosys> opt -nodffe -nosdff

3.27. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.27.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

yosys> opt_merge -nomux

3.27.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.27.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.27.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.27.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.27.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.27.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

yosys> opt_expr

3.27.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.27.9. Finished OPT passes. (There is nothing left to do.)

yosys> opt -fast -full

3.28. Executing OPT pass (performing simple optimizations).

yosys> opt_expr -full

3.28.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~29 debug messages>

yosys> opt_merge

3.28.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_dff

3.28.3. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.28.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

3.28.5. Finished fast OPT passes.

yosys> memory_map

3.29. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

yosys> opt -full

3.30. Executing OPT pass (performing simple optimizations).

yosys> opt_expr -full

3.30.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

yosys> opt_merge -nomux

3.30.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.30.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce -full

3.30.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.30.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_share

3.30.6. Executing OPT_SHARE pass.

yosys> opt_dff

3.30.7. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.30.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

yosys> opt_expr -full

3.30.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.30.10. Finished OPT passes. (There is nothing left to do.)

yosys> techmap

3.31. Executing TECHMAP pass (map to technology primitives).

3.31.1. Executing Verilog-2005 frontend: /home/users/aram/Workspace/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/aram/Workspace/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.31.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~71 debug messages>

yosys> opt

3.32. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.32.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

yosys> opt_merge -nomux

3.32.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.32.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.32.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.32.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_dff

3.32.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.32.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

yosys> opt_expr

3.32.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.32.9. Finished OPT passes. (There is nothing left to do.)

yosys> abc -script abc_tmp.scr

3.33. Executing ABC pass (technology mapping using ABC).

3.33.1. Extracting gate netlist of module `\top' to `<abc-temp-dir>/input.blif'..
Extracted 2302 gates and 2503 wires to a netlist network with 201 inputs and 178 outputs.

3.33.1.1. Executing ABC.
Running ABC command: /home/users/aram/Workspace/yosys_verific_rs/logic_synthesis-rs/abc-rs/abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + source /home/users/aram/Workspace/yosys_verific_rs/result_09-03-2022T20-36-44/All_lut_synth_rs_area.json/rgb2ycrcb/abc_tmp.scr 
ABC: netlist  : i/o =    201/    178  and =    7054  lev =   49 (21.46)  mem = 0.09 MB
ABC: Mapping (K=6)  :  lut =    593  edge =    2495  lev =   15 (6.39)  mem = 0.04 MB
ABC: netlist  : i/o =    201/    178  and =    7170  lev =   50 (21.06)  mem = 0.09 MB
ABC: Mapping (K=6)  :  lut =    525  edge =    2288  lev =   16 (6.23)  mem = 0.04 MB
ABC: netlist  : i/o =    201/    178  and =    7024  lev =   50 (21.18)  mem = 0.09 MB
ABC: Mapping (K=6)  :  lut =    513  edge =    2203  lev =   16 (6.31)  mem = 0.04 MB
ABC: netlist  : i/o =    201/    178  and =    7604  lev =   50 (19.98)  mem = 0.10 MB
ABC: Mapping (K=6)  :  lut =    507  edge =    2188  lev =   16 (6.24)  mem = 0.04 MB
ABC: netlist  : i/o =    201/    178  and =    6860  lev =   53 (21.45)  mem = 0.09 MB
ABC: Mapping (K=6)  :  lut =    519  edge =    2198  lev =   17 (6.34)  mem = 0.04 MB
ABC: netlist  : i/o =    201/    178  and =    6852  lev =   53 (20.81)  mem = 0.12 MB
ABC: Mapping (K=6)  :  lut =    476  edge =    2160  lev =   16 (5.71)  mem = 0.04 MB
ABC: netlist  : i/o =    201/    178  and =    6817  lev =   54 (20.74)  mem = 0.12 MB
ABC: Mapping (K=6)  :  lut =    477  edge =    2158  lev =   16 (5.53)  mem = 0.04 MB
ABC: netlist  : i/o =    201/    178  and =    6864  lev =   55 (20.73)  mem = 0.12 MB
ABC: Mapping (K=6)  :  lut =    475  edge =    2160  lev =   16 (5.50)  mem = 0.04 MB
ABC: netlist  : i/o =    201/    178  and =    7172  lev =   52 (20.48)  mem = 0.12 MB
ABC: Mapping (K=6)  :  lut =    483  edge =    2174  lev =   16 (6.03)  mem = 0.04 MB
ABC: netlist  : i/o =    201/    178  and =    6811  lev =   52 (21.31)  mem = 0.12 MB
ABC: Mapping (K=6)  :  lut =    482  edge =    2157  lev =   16 (5.96)  mem = 0.04 MB
ABC: netlist  : i/o =    201/    178  and =    6735  lev =   54 (21.07)  mem = 0.12 MB
ABC: Mapping (K=6)  :  lut =    482  edge =    2158  lev =   16 (5.82)  mem = 0.04 MB
ABC: netlist  : i/o =    201/    178  and =    6788  lev =   53 (21.07)  mem = 0.12 MB
ABC: Mapping (K=6)  :  lut =    482  edge =    2166  lev =   16 (5.81)  mem = 0.04 MB
ABC: netlist  : i/o =    201/    178  and =    6822  lev =   51 (20.98)  mem = 0.12 MB
ABC: Mapping (K=6)  :  lut =    481  edge =    2164  lev =   15 (5.72)  mem = 0.04 MB
ABC: netlist  : i/o =    201/    178  and =    6864  lev =   55 (20.73)  mem = 0.09 MB
ABC: Mapping (K=6)  :  lut =    475  edge =    2160  lev =   16 (5.50)  mem = 0.04 MB
ABC: netlist  : i/o =    201/    178  and =    6864  lev =   55 (20.73)  mem = 0.12 MB
ABC: Mapping (K=6)  :  lut =    475  edge =    2160  lev =   16 (5.50)  mem = 0.04 MB
ABC: netlist  : i/o =    201/    178  and =    6882  lev =   54 (20.94)  mem = 0.09 MB
ABC: Mapping (K=6)  :  lut =    475  edge =    2160  lev =   16 (5.50)  mem = 0.04 MB
ABC: + write_blif <abc-temp-dir>/output.blif 

3.33.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:      477
ABC RESULTS:        internal signals:     2124
ABC RESULTS:           input signals:      201
ABC RESULTS:          output signals:      178
Removing temp directory.

yosys> opt

3.34. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.34.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

yosys> opt_merge -nomux

3.34.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

yosys> opt_muxtree

3.34.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.34.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.34.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_dff

3.34.6. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$516 ($_DFFE_PP_) from module top.

yosys> opt_clean

3.34.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 1027 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.34.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.34.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.34.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.34.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.34.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_dff

3.34.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.34.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

yosys> opt_expr

3.34.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.34.16. Finished OPT passes. (There is nothing left to do.)

yosys> hierarchy -check

3.35. Executing HIERARCHY pass (managing design hierarchy).

3.35.1. Analyzing design hierarchy..
Top module:  \top

3.35.2. Analyzing design hierarchy..
Top module:  \top
Removed 0 unused modules.

yosys> stat

3.36. Printing statistics.

=== top ===

   Number of wires:                395
   Number of wire bits:           1448
   Number of public wires:          20
   Number of public wire bits:     295
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                673
     $_DFFE_PP_                    198
     $lut                          475


yosys> opt_clean -purge

3.37. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

yosys> write_verilog -noattr -nohex top.verilog

3.38. Executing Verilog backend.

yosys> bmuxmap

3.38.1. Executing BMUXMAP pass.

yosys> demuxmap

3.38.2. Executing DEMUXMAP pass.

yosys> clean_zerowidth
Dumping module `\top'.

Warnings: 15 unique messages, 15 total
End of script. Logfile hash: d6d6833fbd, CPU: user 3.75s system 0.07s, MEM: 42.72 MB peak
Yosys 0.14+36 (git sha1 15a4e900b, gcc 7.1.0 -fPIC -Os)
Time spent: 79% 1x abc (14 sec), 8% 37x opt_expr (1 sec), ...
