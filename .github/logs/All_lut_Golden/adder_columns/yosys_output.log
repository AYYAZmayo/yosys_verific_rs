
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.14+36 (git sha1 15a4e900b, gcc 7.1.0 -fPIC -Os)


-- Executing script file `yosys.ys' --
echo on

yosys> plugin -i synth-rs

yosys> read -verific

yosys> read -incdir .

yosys> verific -vlog-incdir .

1. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Jan22_SW_Release, released at Sat Jan 29 02:42:49 2022.

yosys> verilog_defaults -add -I.

yosys> read -vlog2k adder_columns.v

yosys> verific -vlog2k adder_columns.v

2. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Jan22_SW_Release, released at Sat Jan 29 02:42:49 2022.
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'adder_columns.v'

yosys> synth_rs -top adder_columns -tech generic -goal area -no_dsp -no_bram -verilog adder_columns.verilog

3. Executing synth_rs pass.

yosys> hierarchy -check -top adder_columns

3.1. Executing HIERARCHY pass (managing design hierarchy).
VERIFIC-INFO [VERI-1018] adder_columns.v:1: compiling module 'adder_columns'
VERIFIC-INFO [VERI-1018] adder_columns.v:15: compiling module 'adder_max'
Importing module adder_columns.
Importing module adder_max.

3.1.1. Analyzing design hierarchy..
Top module:  \adder_columns
Used module:     \adder_max

3.1.2. Analyzing design hierarchy..
Top module:  \adder_columns
Used module:     \adder_max
Removed 0 unused modules.

yosys> proc

3.2. Executing PROC pass (convert processes to netlists).

yosys> proc_clean

3.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> proc_rmdead

3.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

yosys> proc_prune

3.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

yosys> proc_init

3.2.4. Executing PROC_INIT pass (extract init attributes).

yosys> proc_arst

3.2.5. Executing PROC_ARST pass (detect async resets in processes).

yosys> proc_mux

3.2.6. Executing PROC_MUX pass (convert decision trees to multiplexers).

yosys> proc_dlatch

3.2.7. Executing PROC_DLATCH pass (convert process syncs to latches).

yosys> proc_dff

3.2.8. Executing PROC_DFF pass (convert process syncs to FFs).

yosys> proc_memwr

3.2.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

yosys> proc_clean

3.2.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> opt_expr -keepdc

3.2.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder_max.
Optimizing module adder_columns.

yosys> flatten

3.3. Executing FLATTEN pass (flatten design).
Deleting now unused module adder_max.
<suppressed ~2 debug messages>

yosys> tribuf -logic

3.4. Executing TRIBUF pass.

yosys> opt_expr

3.5. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder_columns.

yosys> opt_clean

3.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder_columns..
Removed 0 unused cells and 1148 unused wires.
<suppressed ~3 debug messages>

yosys> check

3.7. Executing CHECK pass (checking for obvious problems).
Checking module adder_columns...
Found and reported 0 problems.

yosys> deminout

3.8. Executing DEMINOUT pass (demote inout ports to input or output).

yosys> opt -nodffe -nosdff

3.9. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.9.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder_columns.

yosys> opt_merge -nomux

3.9.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder_columns'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.9.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \adder_columns..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.9.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \adder_columns.
Performed a total of 0 changes.

yosys> opt_merge

3.9.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder_columns'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.9.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.9.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder_columns..

yosys> opt_expr

3.9.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder_columns.

3.9.9. Finished OPT passes. (There is nothing left to do.)

yosys> fsm

3.10. Executing FSM pass (extract and optimize FSM).

yosys> fsm_detect

3.10.1. Executing FSM_DETECT pass (finding FSMs in design).

yosys> fsm_extract

3.10.2. Executing FSM_EXTRACT pass (extracting FSM from design).

yosys> fsm_opt

3.10.3. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> opt_clean

3.10.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder_columns..

yosys> fsm_opt

3.10.5. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> fsm_recode

3.10.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

yosys> fsm_info

3.10.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

yosys> fsm_map

3.10.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

yosys> opt -sat

3.11. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder_columns.

yosys> opt_merge -nomux

3.11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder_columns'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.11.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \adder_columns..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.11.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \adder_columns.
Performed a total of 0 changes.

yosys> opt_merge

3.11.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder_columns'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.11.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.11.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder_columns..

yosys> opt_expr

3.11.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder_columns.

3.11.9. Finished OPT passes. (There is nothing left to do.)

yosys> wreduce -keepdc

3.12. Executing WREDUCE pass (reducing word size of cells).
Removed top 190 bits (of 191) from port B of cell adder_columns.$flatten\ad1.$verific$add_4$adder_columns.v:22$1151 ($add).
Removed top 190 bits (of 191) from port B of cell adder_columns.$flatten\ad2.$verific$add_4$adder_columns.v:22$1151 ($add).

yosys> peepopt

3.13. Executing PEEPOPT pass (run peephole optimizers).

yosys> pmuxtree

3.14. Executing PMUXTREE pass.

yosys> opt_clean

3.15. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder_columns..

yosys> techmap

3.16. Executing TECHMAP pass (map to technology primitives).

3.16.1. Executing Verilog-2005 frontend: /home/users/aram/Workspace/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/aram/Workspace/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.16.2. Continuing TECHMAP pass.
Running "alumacc" on wrapper $extern:wrap:$add:A_SIGNED=0:A_WIDTH=191:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=191:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$add:A_SIGNED=0:A_WIDTH=191:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=191:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$add:A_SIGNED=0:A_WIDTH=191:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=191:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$add:A_SIGNED=0:A_WIDTH=190:B_SIGNED=0:B_WIDTH=190:Y_WIDTH=191:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$add:A_SIGNED=0:A_WIDTH=190:B_SIGNED=0:B_WIDTH=190:Y_WIDTH=191:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$add:A_SIGNED=0:A_WIDTH=190:B_SIGNED=0:B_WIDTH=190:Y_WIDTH=191:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $paramod$8c9c842abb68e68546a5b075140e03bc80554d9b\_90_alu for cells of type $alu.
Using template $paramod$a0f8221959570d61118db5c0db8b8e3d5dff3689\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000010111111 for cells of type $lcu.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $or.
No more expansions possible.
<suppressed ~4181 debug messages>

yosys> alumacc

3.17. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module adder_columns:
  created 0 $alu and 0 $macc cells.

yosys> opt

3.18. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder_columns.
<suppressed ~2640 debug messages>

yosys> opt_merge -nomux

3.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder_columns'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.18.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \adder_columns..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.18.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \adder_columns.
Performed a total of 0 changes.

yosys> opt_merge

3.18.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder_columns'.
Removed a total of 0 cells.

yosys> opt_dff

3.18.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.18.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder_columns..
Removed 764 unused cells and 1208 unused wires.
<suppressed ~765 debug messages>

yosys> opt_expr

3.18.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder_columns.

3.18.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.18.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \adder_columns..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.18.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \adder_columns.
Performed a total of 0 changes.

yosys> opt_merge

3.18.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder_columns'.
Removed a total of 0 cells.

yosys> opt_dff

3.18.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.18.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder_columns..

yosys> opt_expr

3.18.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder_columns.

3.18.16. Finished OPT passes. (There is nothing left to do.)

yosys> memory -nomap

3.19. Executing MEMORY pass.

yosys> opt_mem

3.19.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

yosys> opt_mem_priority

3.19.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

yosys> opt_mem_feedback

3.19.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

yosys> memory_dff

3.19.4. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

yosys> opt_clean

3.19.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder_columns..

yosys> memory_share

3.19.6. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

yosys> opt_mem_widen

3.19.7. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

yosys> opt_clean

3.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder_columns..

yosys> memory_collect

3.19.9. Executing MEMORY_COLLECT pass (generating $mem cells).

yosys> opt_clean

3.20. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder_columns..

yosys> opt_expr -mux_undef

3.21. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder_columns.

yosys> simplemap

3.22. Executing SIMPLEMAP pass (map simple cells to gate primitives).

yosys> opt_expr

3.23. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder_columns.

yosys> opt_merge

3.24. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder_columns'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.25. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.26. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder_columns..

yosys> opt -nodffe -nosdff

3.27. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.27.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder_columns.

yosys> opt_merge -nomux

3.27.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder_columns'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.27.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \adder_columns..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.27.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \adder_columns.
Performed a total of 0 changes.

yosys> opt_merge

3.27.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder_columns'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.27.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.27.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder_columns..

yosys> opt_expr

3.27.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder_columns.

3.27.9. Finished OPT passes. (There is nothing left to do.)

yosys> opt -fast -full

3.28. Executing OPT pass (performing simple optimizations).

yosys> opt_expr -full

3.28.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder_columns.

yosys> opt_merge

3.28.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder_columns'.
Removed a total of 0 cells.

yosys> opt_dff

3.28.3. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.28.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder_columns..

3.28.5. Finished fast OPT passes.

yosys> memory_map

3.29. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

yosys> opt -full

3.30. Executing OPT pass (performing simple optimizations).

yosys> opt_expr -full

3.30.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder_columns.

yosys> opt_merge -nomux

3.30.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder_columns'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.30.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \adder_columns..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce -full

3.30.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \adder_columns.
Performed a total of 0 changes.

yosys> opt_merge

3.30.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder_columns'.
Removed a total of 0 cells.

yosys> opt_share

3.30.6. Executing OPT_SHARE pass.

yosys> opt_dff

3.30.7. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.30.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder_columns..

yosys> opt_expr -full

3.30.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder_columns.

3.30.10. Finished OPT passes. (There is nothing left to do.)

yosys> techmap

3.31. Executing TECHMAP pass (map to technology primitives).

3.31.1. Executing Verilog-2005 frontend: /home/users/aram/Workspace/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/aram/Workspace/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.31.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~71 debug messages>

yosys> opt

3.32. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.32.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder_columns.

yosys> opt_merge -nomux

3.32.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder_columns'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.32.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \adder_columns..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.32.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \adder_columns.
Performed a total of 0 changes.

yosys> opt_merge

3.32.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder_columns'.
Removed a total of 0 cells.

yosys> opt_dff

3.32.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.32.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder_columns..

yosys> opt_expr

3.32.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder_columns.

3.32.9. Finished OPT passes. (There is nothing left to do.)

yosys> abc -script abc_tmp.scr

3.33. Executing ABC pass (technology mapping using ABC).

3.33.1. Extracting gate netlist of module `\adder_columns' to `<abc-temp-dir>/input.blif'..
Extracted 4072 gates and 4834 wires to a netlist network with 762 inputs and 382 outputs.

3.33.1.1. Executing ABC.
Running ABC command: /home/users/aram/Workspace/yosys_verific_rs/logic_synthesis-rs/abc-rs/abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + source /home/users/aram/Workspace/yosys_verific_rs/result_09-03-2022T20-36-44/All_lut_synth_rs_area.json/adder_columns/abc_tmp.scr 
ABC: netlist  : i/o =    762/    382  and =   11172  lev =   96 (63.96)  mem = 0.16 MB
ABC: Mapping (K=6)  :  lut =   1609  edge =    6288  lev =   29 (19.79)  mem = 0.08 MB
ABC: netlist  : i/o =    762/    382  and =   12271  lev =  129 (73.29)  mem = 0.17 MB
ABC: Mapping (K=6)  :  lut =   1447  edge =    5939  lev =   39 (23.73)  mem = 0.08 MB
ABC: netlist  : i/o =    762/    382  and =   11902  lev =  196 (101.32)  mem = 0.16 MB
ABC: Mapping (K=6)  :  lut =   1290  edge =    5504  lev =   57 (31.24)  mem = 0.08 MB
ABC: netlist  : i/o =    762/    382  and =   11570  lev =  284 (137.55)  mem = 0.16 MB
ABC: Mapping (K=6)  :  lut =   1128  edge =    4936  lev =   84 (43.21)  mem = 0.08 MB
ABC: netlist  : i/o =    762/    382  and =   10710  lev =  307 (152.24)  mem = 0.15 MB
ABC: Mapping (K=6)  :  lut =   1212  edge =    5128  lev =   94 (46.58)  mem = 0.07 MB
ABC: netlist  : i/o =    762/    382  and =   10273  lev =  321 (158.49)  mem = 0.19 MB
ABC: Mapping (K=6)  :  lut =   1091  edge =    5060  lev =   90 (45.47)  mem = 0.07 MB
ABC: netlist  : i/o =    762/    382  and =   10065  lev =  333 (163.76)  mem = 0.19 MB
ABC: Mapping (K=6)  :  lut =   1072  edge =    4943  lev =   90 (45.36)  mem = 0.07 MB
ABC: netlist  : i/o =    762/    382  and =    9825  lev =  334 (162.25)  mem = 0.18 MB
ABC: Mapping (K=6)  :  lut =   1024  edge =    4708  lev =   90 (44.82)  mem = 0.07 MB
ABC: netlist  : i/o =    762/    382  and =    8959  lev =  342 (168.22)  mem = 0.17 MB
ABC: Mapping (K=6)  :  lut =    948  edge =    4384  lev =   91 (45.30)  mem = 0.06 MB
ABC: netlist  : i/o =    762/    382  and =    8557  lev =  358 (174.39)  mem = 0.16 MB
ABC: Mapping (K=6)  :  lut =    904  edge =    4174  lev =   96 (47.22)  mem = 0.06 MB
ABC: netlist  : i/o =    762/    382  and =    8000  lev =  359 (173.25)  mem = 0.15 MB
ABC: Mapping (K=6)  :  lut =    880  edge =    4015  lev =   94 (47.15)  mem = 0.06 MB
ABC: netlist  : i/o =    762/    382  and =    8480  lev =  359 (173.89)  mem = 0.16 MB
ABC: Mapping (K=6)  :  lut =    877  edge =    3988  lev =   94 (47.08)  mem = 0.06 MB
ABC: netlist  : i/o =    762/    382  and =    8155  lev =  356 (173.03)  mem = 0.16 MB
ABC: Mapping (K=6)  :  lut =    871  edge =    3968  lev =   94 (46.30)  mem = 0.06 MB
ABC: netlist  : i/o =    762/    382  and =    8155  lev =  356 (173.03)  mem = 0.12 MB
ABC: Mapping (K=6)  :  lut =    871  edge =    3968  lev =   94 (46.30)  mem = 0.06 MB
ABC: netlist  : i/o =    762/    382  and =    8155  lev =  356 (173.03)  mem = 0.16 MB
ABC: Mapping (K=6)  :  lut =    871  edge =    3968  lev =   94 (46.30)  mem = 0.06 MB
ABC: netlist  : i/o =    762/    382  and =    8414  lev =  366 (178.25)  mem = 0.12 MB
ABC: Mapping (K=6)  :  lut =    871  edge =    3968  lev =   94 (46.30)  mem = 0.06 MB
ABC: + write_blif <abc-temp-dir>/output.blif 

3.33.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:      871
ABC RESULTS:        internal signals:     3690
ABC RESULTS:           input signals:      762
ABC RESULTS:          output signals:      382
Removing temp directory.

yosys> opt

3.34. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.34.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder_columns.

yosys> opt_merge -nomux

3.34.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder_columns'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.34.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \adder_columns..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.34.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \adder_columns.
Performed a total of 0 changes.

yosys> opt_merge

3.34.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder_columns'.
Removed a total of 0 cells.

yosys> opt_dff

3.34.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.34.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder_columns..
Removed 0 unused cells and 2948 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.34.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder_columns.

3.34.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.34.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \adder_columns..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.34.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \adder_columns.
Performed a total of 0 changes.

yosys> opt_merge

3.34.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder_columns'.
Removed a total of 0 cells.

yosys> opt_dff

3.34.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.34.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder_columns..

yosys> opt_expr

3.34.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder_columns.

3.34.16. Finished OPT passes. (There is nothing left to do.)

yosys> hierarchy -check

3.35. Executing HIERARCHY pass (managing design hierarchy).

3.35.1. Analyzing design hierarchy..
Top module:  \adder_columns

3.35.2. Analyzing design hierarchy..
Top module:  \adder_columns
Removed 0 unused modules.

yosys> stat

3.36. Printing statistics.

=== adder_columns ===

   Number of wires:                504
   Number of wire bits:           2777
   Number of public wires:          15
   Number of public wire bits:    2288
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                871
     $lut                          871


yosys> opt_clean -purge

3.37. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder_columns..
Removed 0 unused cells and 8 unused wires.
<suppressed ~8 debug messages>

yosys> write_verilog -noattr -nohex adder_columns.verilog

3.38. Executing Verilog backend.

yosys> bmuxmap

3.38.1. Executing BMUXMAP pass.

yosys> demuxmap

3.38.2. Executing DEMUXMAP pass.

yosys> clean_zerowidth
Dumping module `\adder_columns'.

End of script. Logfile hash: 2f55bad109, CPU: user 5.89s system 0.06s, MEM: 52.64 MB peak
Yosys 0.14+36 (git sha1 15a4e900b, gcc 7.1.0 -fPIC -Os)
Time spent: 85% 1x abc (33 sec), 5% 23x opt_expr (2 sec), ...
