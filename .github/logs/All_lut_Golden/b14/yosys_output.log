
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.14+36 (git sha1 4cd3e3b51, gcc 7.1.0 -fPIC -Os)


-- Executing script file `yosys.ys' --
echo on

yosys> plugin -i synth-rs

yosys> read -verific

yosys> read -incdir .

yosys> verific -vlog-incdir .

1. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Jan22_SW_Release, released at Sat Jan 29 02:42:49 2022.

yosys> verilog_defaults -add -I.

yosys> read -vhdl b14.vhd

yosys> verific -vhdl b14.vhd

2. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Jan22_SW_Release, released at Sat Jan 29 02:42:49 2022.
VERIFIC-INFO [VHDL-1504] default VHDL library search path is now "/home/users/meri/Documents/workspace/clean/for_push/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008"
VERIFIC-COMMENT [VHDL-1481] Analyzing VHDL file 'b14.vhd'
VERIFIC-COMMENT [VHDL-1493] Restoring VHDL unit 'std.standard' from file '/home/users/meri/Documents/workspace/clean/for_push/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008/std/standard.vdb'
VERIFIC-INFO [VHDL-1012] b14.vhd:1: analyzing entity 'b14'
VERIFIC-INFO [VHDL-1010] b14.vhd:11: analyzing architecture 'behav'

yosys> synth_rs -top b14 -tech genesis -goal area -de -no_dsp -no_bram -verilog b14.verilog

3. Executing synth_rs pass.

yosys> read_verilog -lib -specify -nomem2reg +/rapidsilicon/common/cells_sim.v +/rapidsilicon/genesis/cells_sim.v

3.1. Executing Verilog-2005 frontend: /home/users/meri/Documents/workspace/clean/for_push/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v
Parsing Verilog input from `/home/users/meri/Documents/workspace/clean/for_push/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\inv'.
Generating RTLIL representation for module `\buff'.
Generating RTLIL representation for module `\logic_0'.
Generating RTLIL representation for module `\logic_1'.
Generating RTLIL representation for module `\gclkbuff'.
Successfully finished Verilog frontend.

3.2. Executing Verilog-2005 frontend: /home/users/meri/Documents/workspace/clean/for_push/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/cells_sim.v
Parsing Verilog input from `/home/users/meri/Documents/workspace/clean/for_push/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\dff'.
Generating RTLIL representation for module `\dffn'.
Generating RTLIL representation for module `\dffsre'.
Generating RTLIL representation for module `\dffnsre'.
Generating RTLIL representation for module `\latchsre'.
Generating RTLIL representation for module `\latchnsre'.
Generating RTLIL representation for module `\io_scff'.
Generating RTLIL representation for module `\scff'.
Generating RTLIL representation for module `\sh_dff'.
Successfully finished Verilog frontend.

yosys> hierarchy -check -top b14

3.3. Executing HIERARCHY pass (managing design hierarchy).
VERIFIC-INFO [VHDL-1067] b14.vhd:1: processing 'b14(BEHAV)'
VERIFIC-INFO [VHDL-1172] b14.vhd:478: 'others' clause is never selected
Importing module b14.
Importing module standard.

3.3.1. Analyzing design hierarchy..
Top module:  \b14

3.3.2. Analyzing design hierarchy..
Top module:  \b14
Removing unused module `\standard'.
Removed 1 unused modules.

yosys> proc

3.4. Executing PROC pass (convert processes to netlists).

yosys> proc_clean

3.4.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> proc_rmdead

3.4.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

yosys> proc_prune

3.4.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

yosys> proc_init

3.4.4. Executing PROC_INIT pass (extract init attributes).

yosys> proc_arst

3.4.5. Executing PROC_ARST pass (detect async resets in processes).

yosys> proc_mux

3.4.6. Executing PROC_MUX pass (convert decision trees to multiplexers).

yosys> proc_dlatch

3.4.7. Executing PROC_DLATCH pass (convert process syncs to latches).

yosys> proc_dff

3.4.8. Executing PROC_DFF pass (convert process syncs to FFs).

yosys> proc_memwr

3.4.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

yosys> proc_clean

3.4.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> opt_expr -keepdc

3.4.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module b14.
<suppressed ~26 debug messages>

yosys> flatten

3.5. Executing FLATTEN pass (flatten design).

yosys> tribuf -logic

3.6. Executing TRIBUF pass.

yosys> deminout

3.7. Executing DEMINOUT pass (demote inout ports to input or output).

yosys> opt_expr

3.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module b14.
<suppressed ~7 debug messages>

yosys> opt_clean

3.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b14..
Removed 7 unused cells and 160 unused wires.
<suppressed ~54 debug messages>

yosys> check

3.10. Executing CHECK pass (checking for obvious problems).
Checking module b14...
Found and reported 0 problems.

yosys> opt -nodffe -nosdff

3.11. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b14.

yosys> opt_merge -nomux

3.11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b14'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.11.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b14..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $verific$i684$b14.vhd:501$461.
    dead port 2/2 on $mux $verific$mux_672$b14.vhd:501$452.
    dead port 2/2 on $mux $verific$mux_685$b14.vhd:501$463.
Removed 3 multiplexer ports.
<suppressed ~19 debug messages>

yosys> opt_reduce

3.11.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b14.
    New ctrl vector for $pmux cell $verific$select_746$b14.vhd:486$414: { $verific$n2255$45 $auto$opt_reduce.cc:134:opt_pmux$513 }
    New ctrl vector for $pmux cell $verific$select_750$b14.vhd:486$355: { $verific$n2256$46 $auto$opt_reduce.cc:134:opt_pmux$515 }
    New ctrl vector for $pmux cell $verific$select_751$b14.vhd:486$432: { $verific$n2257$47 $auto$opt_reduce.cc:134:opt_pmux$517 }
    New ctrl vector for $pmux cell $verific$select_752$b14.vhd:486$433: { $verific$n2258$48 $auto$opt_reduce.cc:134:opt_pmux$519 }
  Optimizing cells in module \b14.
Performed a total of 4 changes.

yosys> opt_merge

3.11.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b14'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.11.6. Executing OPT_DFF pass (perform DFF optimizations).
Changing const-value async load to async reset on $verific$wr_reg$b14.vhd:505$498 ($aldff) from module b14.
Changing const-value async load to async reset on $verific$state_reg$b14.vhd:505$500 ($aldff) from module b14.
Changing const-value async load to async reset on $verific$reg3_reg$b14.vhd:505$495 ($aldff) from module b14.
Changing const-value async load to async reset on $verific$reg2_reg$b14.vhd:505$494 ($aldff) from module b14.
Changing const-value async load to async reset on $verific$reg1_reg$b14.vhd:505$493 ($aldff) from module b14.
Changing const-value async load to async reset on $verific$reg0_reg$b14.vhd:505$492 ($aldff) from module b14.
Changing const-value async load to async reset on $verific$rd_reg$b14.vhd:505$497 ($aldff) from module b14.
Changing const-value async load to async reset on $verific$IR_reg$b14.vhd:505$489 ($aldff) from module b14.
Changing const-value async load to async reset on $verific$B_reg$b14.vhd:505$491 ($aldff) from module b14.
Changing const-value async load to async reset on $verific$datao_reg$b14.vhd:505$499 ($aldff) from module b14.
Changing const-value async load to async reset on $verific$d_reg$b14.vhd:505$490 ($aldff) from module b14.
Changing const-value async load to async reset on $verific$addr_reg$b14.vhd:505$496 ($aldff) from module b14.

yosys> opt_clean

3.11.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b14..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.11.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module b14.

3.11.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.11.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b14..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~19 debug messages>

yosys> opt_reduce

3.11.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b14.
Performed a total of 0 changes.

yosys> opt_merge

3.11.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b14'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.11.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.11.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b14..

yosys> opt_expr

3.11.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module b14.

3.11.16. Finished OPT passes. (There is nothing left to do.)

yosys> fsm

3.12. Executing FSM pass (extract and optimize FSM).

yosys> fsm_detect

3.12.1. Executing FSM_DETECT pass (finding FSMs in design).
Found FSM state register b14.d.

yosys> fsm_extract

3.12.2. Executing FSM_EXTRACT pass (extracting FSM from design).
Extracting FSM `\d' from module `\b14'.
  found $adff cell for state register: $verific$d_reg$b14.vhd:505$490
  root of input selection tree: $verific$n11472$295
  found reset state: 0 (from async reset)
  found ctrl input: \state
  found ctrl input: $verific$n341$141 [0]
  found ctrl input: $verific$n10346$112
  found ctrl input: $verific$n1405$39
  found ctrl input: $verific$n1440$40
  found ctrl input: $verific$n1474$41
  found ctrl input: $verific$n1475$42
  found ctrl input: $verific$n1476$43
  found ctrl input: $verific$n1477$44
  found state code: 1
  found state code: 2
  found state code: 3
  found ctrl input: \B
  ctrl inputs: { $verific$n341$141 [0] $verific$n10346$112 $verific$n1477$44 $verific$n1476$43 $verific$n1475$42 $verific$n1474$41 $verific$n1440$40 $verific$n1405$39 \state \B }
  ctrl outputs: $verific$n11472$295
  transition:          0 10'--------0- ->          0 0
  transition:          0 10'000000001- ->          0 0
  transition:          0 10'001000001- ->          0 0
  transition:          0 10'00-100001- ->          1 1
  transition:          0 10'00--10001- ->          2 2
  transition:          0 10'00---1001- ->          3 3
  transition:          0 10'00----1010 ->          0 0
  transition:          0 10'00----1011 ->          3 3
  transition:          0 10'00-----110 ->          3 3
  transition:          0 10'00-----111 ->          0 0
  transition:          0 10'01------1- ->          0 0
  transition:          0 10'1-------1- ->          0 0
  transition:          2 10'--------0- ->          2 2
  transition:          2 10'000000001- ->          2 2
  transition:          2 10'001000001- ->          0 0
  transition:          2 10'00-100001- ->          1 1
  transition:          2 10'00--10001- ->          2 2
  transition:          2 10'00---1001- ->          3 3
  transition:          2 10'00----1010 ->          2 2
  transition:          2 10'00----1011 ->          3 3
  transition:          2 10'00-----110 ->          3 3
  transition:          2 10'00-----111 ->          2 2
  transition:          2 10'01------1- ->          2 2
  transition:          2 10'1-------1- ->          2 2
  transition:          1 10'--------0- ->          1 1
  transition:          1 10'000000001- ->          1 1
  transition:          1 10'001000001- ->          0 0
  transition:          1 10'00-100001- ->          1 1
  transition:          1 10'00--10001- ->          2 2
  transition:          1 10'00---1001- ->          3 3
  transition:          1 10'00----1010 ->          1 1
  transition:          1 10'00----1011 ->          3 3
  transition:          1 10'00-----110 ->          3 3
  transition:          1 10'00-----111 ->          1 1
  transition:          1 10'01------1- ->          1 1
  transition:          1 10'1-------1- ->          1 1
  transition:          3 10'--------0- ->          3 3
  transition:          3 10'000000001- ->          3 3
  transition:          3 10'001000001- ->          0 0
  transition:          3 10'00-100001- ->          1 1
  transition:          3 10'00--10001- ->          2 2
  transition:          3 10'00---1001- ->          3 3
  transition:          3 10'00----1010 ->          3 3
  transition:          3 10'00----1011 ->          3 3
  transition:          3 10'00-----110 ->          3 3
  transition:          3 10'00-----111 ->          3 3
  transition:          3 10'01------1- ->          3 3
  transition:          3 10'1-------1- ->          3 3

yosys> fsm_opt

3.12.3. Executing FSM_OPT pass (simple optimizations of FSMs).
Optimizing FSM `$fsm$\d$520' from module `\b14'.
  Merging pattern 10'000000001- and 10'001000001- from group (0 0 0).
  Merging pattern 10'001000001- and 10'000000001- from group (0 0 0).
  Merging pattern 10'00----1010 and 10'00----1011 from group (3 3 3).
  Merging pattern 10'00-----110 and 10'00-----111 from group (3 3 3).
  Merging pattern 10'00----1011 and 10'00----1010 from group (3 3 3).
  Merging pattern 10'00-----111 and 10'00-----110 from group (3 3 3).

yosys> opt_clean

3.12.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b14..
Removed 3 unused cells and 3 unused wires.
<suppressed ~4 debug messages>

yosys> fsm_opt

3.12.5. Executing FSM_OPT pass (simple optimizations of FSMs).
Optimizing FSM `$fsm$\d$520' from module `\b14'.

yosys> fsm_recode

3.12.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).
Recoding FSM `$fsm$\d$520' from module `\b14' using `auto' encoding:
  mapping auto encoding to `one-hot` for this FSM.
  00000000000000000000000000000000 -> ---1
  00000000000000000000000000000010 -> --1-
  00000000000000000000000000000001 -> -1--
  00000000000000000000000000000011 -> 1---

yosys> fsm_info

3.12.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

FSM `$fsm$\d$520' from module `b14':
-------------------------------------

  Information on FSM $fsm$\d$520 (\d):

  Number of input signals:   10
  Number of output signals:  32
  Number of state bits:       4

  Input signals:
    0: \B
    1: \state
    2: $verific$n1405$39
    3: $verific$n1440$40
    4: $verific$n1474$41
    5: $verific$n1475$42
    6: $verific$n1476$43
    7: $verific$n1477$44
    8: $verific$n10346$112
    9: $verific$n341$141 [0]

  Output signals:
    0: $verific$n11472$295 [0]
    1: $verific$n11472$295 [1]
    2: $verific$n11472$295 [2]
    3: $verific$n11472$295 [3]
    4: $verific$n11472$295 [4]
    5: $verific$n11472$295 [5]
    6: $verific$n11472$295 [6]
    7: $verific$n11472$295 [7]
    8: $verific$n11472$295 [8]
    9: $verific$n11472$295 [9]
   10: $verific$n11472$295 [10]
   11: $verific$n11472$295 [11]
   12: $verific$n11472$295 [12]
   13: $verific$n11472$295 [13]
   14: $verific$n11472$295 [14]
   15: $verific$n11472$295 [15]
   16: $verific$n11472$295 [16]
   17: $verific$n11472$295 [17]
   18: $verific$n11472$295 [18]
   19: $verific$n11472$295 [19]
   20: $verific$n11472$295 [20]
   21: $verific$n11472$295 [21]
   22: $verific$n11472$295 [22]
   23: $verific$n11472$295 [23]
   24: $verific$n11472$295 [24]
   25: $verific$n11472$295 [25]
   26: $verific$n11472$295 [26]
   27: $verific$n11472$295 [27]
   28: $verific$n11472$295 [28]
   29: $verific$n11472$295 [29]
   30: $verific$n11472$295 [30]
   31: $verific$n11472$295 [31]

  State encoding:
    0:     4'---1  <RESET STATE>
    1:     4'--1-
    2:     4'-1--
    3:     4'1---

  Transition Table (state_in, ctrl_in, state_out, ctrl_out):
      0:     0 10'00----1010   ->     0 0
      1:     0 10'00-----111   ->     0 0
      2:     0 10'--------0-   ->     0 0
      3:     0 10'00-000001-   ->     0 0
      4:     0 10'01------1-   ->     0 0
      5:     0 10'1-------1-   ->     0 0
      6:     0 10'00--10001-   ->     1 2
      7:     0 10'00-100001-   ->     2 1
      8:     0 10'00-----110   ->     3 3
      9:     0 10'00----1011   ->     3 3
     10:     0 10'00---1001-   ->     3 3
     11:     1 10'001000001-   ->     0 0
     12:     1 10'00----1010   ->     1 2
     13:     1 10'00-----111   ->     1 2
     14:     1 10'--------0-   ->     1 2
     15:     1 10'000000001-   ->     1 2
     16:     1 10'00--10001-   ->     1 2
     17:     1 10'01------1-   ->     1 2
     18:     1 10'1-------1-   ->     1 2
     19:     1 10'00-100001-   ->     2 1
     20:     1 10'00-----110   ->     3 3
     21:     1 10'00----1011   ->     3 3
     22:     1 10'00---1001-   ->     3 3
     23:     2 10'001000001-   ->     0 0
     24:     2 10'00--10001-   ->     1 2
     25:     2 10'00----1010   ->     2 1
     26:     2 10'00-----111   ->     2 1
     27:     2 10'--------0-   ->     2 1
     28:     2 10'000000001-   ->     2 1
     29:     2 10'00-100001-   ->     2 1
     30:     2 10'01------1-   ->     2 1
     31:     2 10'1-------1-   ->     2 1
     32:     2 10'00-----110   ->     3 3
     33:     2 10'00----1011   ->     3 3
     34:     2 10'00---1001-   ->     3 3
     35:     3 10'001000001-   ->     0 0
     36:     3 10'00--10001-   ->     1 2
     37:     3 10'00-100001-   ->     2 1
     38:     3 10'--------0-   ->     3 3
     39:     3 10'000000001-   ->     3 3
     40:     3 10'00---1001-   ->     3 3
     41:     3 10'00----101-   ->     3 3
     42:     3 10'00-----11-   ->     3 3
     43:     3 10'01------1-   ->     3 3
     44:     3 10'1-------1-   ->     3 3

-------------------------------------

yosys> fsm_map

3.12.8. Executing FSM_MAP pass (mapping FSMs to basic logic).
Mapping FSM `$fsm$\d$520' from module `\b14'.

yosys> opt -sat

3.13. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b14.
<suppressed ~6 debug messages>

yosys> opt_merge -nomux

3.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b14'.
<suppressed ~162 debug messages>
Removed a total of 54 cells.

yosys> opt_muxtree

3.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b14..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~18 debug messages>

yosys> opt_reduce

3.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b14.
Performed a total of 0 changes.

yosys> opt_merge

3.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b14'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.13.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $verific$reg3_reg$b14.vhd:505$495 ($adff) from module b14 (D = $verific$n11178$290 [31:3], Q = \reg3 [31:3]).
Adding EN signal on $verific$reg3_reg$b14.vhd:505$495 ($adff) from module b14 (D = $verific$n10312$265 [2:0], Q = \reg3 [2:0]).
Adding EN signal on $verific$reg2_reg$b14.vhd:505$494 ($adff) from module b14 (D = $verific$n10279$264, Q = \reg2).
Adding EN signal on $verific$reg1_reg$b14.vhd:505$493 ($adff) from module b14 (D = $verific$n10246$263, Q = \reg1).
Adding EN signal on $verific$reg0_reg$b14.vhd:505$492 ($adff) from module b14 (D = $verific$n10213$262, Q = \reg0).
Adding EN signal on $verific$datao_reg$b14.vhd:505$499 ($adff) from module b14 (D = { $verific$add_570$b14.vhd:466$423 $verific$n10514$273 [0] }, Q = \datao).
Adding EN signal on $verific$B_reg$b14.vhd:505$491 ($adff) from module b14 (D = $verific$n10979$120, Q = \B).

yosys> opt_clean

3.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b14..
Removed 14 unused cells and 70 unused wires.
<suppressed ~15 debug messages>

yosys> opt_expr

3.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module b14.

3.13.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.13.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b14..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~14 debug messages>

yosys> opt_reduce

3.13.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b14.
Performed a total of 0 changes.

yosys> opt_merge

3.13.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b14'.
<suppressed ~30 debug messages>
Removed a total of 10 cells.

yosys> opt_dff -sat

3.13.13. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 2 on $verific$d_reg$b14.vhd:505$490 ($adff) from module b14.
Setting constant 0-bit at position 3 on $verific$d_reg$b14.vhd:505$490 ($adff) from module b14.
Setting constant 0-bit at position 4 on $verific$d_reg$b14.vhd:505$490 ($adff) from module b14.
Setting constant 0-bit at position 5 on $verific$d_reg$b14.vhd:505$490 ($adff) from module b14.
Setting constant 0-bit at position 6 on $verific$d_reg$b14.vhd:505$490 ($adff) from module b14.
Setting constant 0-bit at position 7 on $verific$d_reg$b14.vhd:505$490 ($adff) from module b14.
Setting constant 0-bit at position 8 on $verific$d_reg$b14.vhd:505$490 ($adff) from module b14.
Setting constant 0-bit at position 9 on $verific$d_reg$b14.vhd:505$490 ($adff) from module b14.
Setting constant 0-bit at position 10 on $verific$d_reg$b14.vhd:505$490 ($adff) from module b14.
Setting constant 0-bit at position 11 on $verific$d_reg$b14.vhd:505$490 ($adff) from module b14.
Setting constant 0-bit at position 12 on $verific$d_reg$b14.vhd:505$490 ($adff) from module b14.
Setting constant 0-bit at position 13 on $verific$d_reg$b14.vhd:505$490 ($adff) from module b14.
Setting constant 0-bit at position 14 on $verific$d_reg$b14.vhd:505$490 ($adff) from module b14.
Setting constant 0-bit at position 15 on $verific$d_reg$b14.vhd:505$490 ($adff) from module b14.
Setting constant 0-bit at position 16 on $verific$d_reg$b14.vhd:505$490 ($adff) from module b14.
Setting constant 0-bit at position 17 on $verific$d_reg$b14.vhd:505$490 ($adff) from module b14.
Setting constant 0-bit at position 18 on $verific$d_reg$b14.vhd:505$490 ($adff) from module b14.
Setting constant 0-bit at position 19 on $verific$d_reg$b14.vhd:505$490 ($adff) from module b14.
Setting constant 0-bit at position 20 on $verific$d_reg$b14.vhd:505$490 ($adff) from module b14.
Setting constant 0-bit at position 21 on $verific$d_reg$b14.vhd:505$490 ($adff) from module b14.
Setting constant 0-bit at position 22 on $verific$d_reg$b14.vhd:505$490 ($adff) from module b14.
Setting constant 0-bit at position 23 on $verific$d_reg$b14.vhd:505$490 ($adff) from module b14.
Setting constant 0-bit at position 24 on $verific$d_reg$b14.vhd:505$490 ($adff) from module b14.
Setting constant 0-bit at position 25 on $verific$d_reg$b14.vhd:505$490 ($adff) from module b14.
Setting constant 0-bit at position 26 on $verific$d_reg$b14.vhd:505$490 ($adff) from module b14.
Setting constant 0-bit at position 27 on $verific$d_reg$b14.vhd:505$490 ($adff) from module b14.
Setting constant 0-bit at position 28 on $verific$d_reg$b14.vhd:505$490 ($adff) from module b14.
Setting constant 0-bit at position 29 on $verific$d_reg$b14.vhd:505$490 ($adff) from module b14.
Setting constant 0-bit at position 30 on $verific$d_reg$b14.vhd:505$490 ($adff) from module b14.
Setting constant 0-bit at position 31 on $verific$d_reg$b14.vhd:505$490 ($adff) from module b14.

yosys> opt_clean

3.13.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b14..
Removed 0 unused cells and 10 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.13.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module b14.

3.13.16. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.13.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b14..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~14 debug messages>

yosys> opt_reduce

3.13.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b14.
Performed a total of 0 changes.

yosys> opt_merge

3.13.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b14'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.13.20. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.13.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b14..

yosys> opt_expr

3.13.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module b14.

3.13.23. Finished OPT passes. (There is nothing left to do.)

yosys> wreduce -keepdc

3.14. Executing WREDUCE pass (reducing word size of cells).
Removed top 2 bits (of 8) from port B of cell b14.$auto$fsm_map.cc:77:implement_pattern_cache$663 ($eq).
Removed top 3 bits (of 29) from FF cell b14.$auto$ff.cc:262:slice$736 ($adffe).
Removed top 1 bits (of 2) from port B of cell b14.$auto$opt_dff.cc:195:make_patterns_logic$772 ($ne).
Removed top 7 bits (of 8) from port B of cell b14.$auto$fsm_map.cc:77:implement_pattern_cache$541 ($eq).
Removed top 2 bits (of 9) from port B of cell b14.$auto$fsm_map.cc:77:implement_pattern_cache$539 ($eq).
Removed top 1 bits (of 3) from port B of cell b14.$auto$fsm_map.cc:77:implement_pattern_cache$724 ($eq).
Removed top 2 bits (of 5) from port B of cell b14.$auto$fsm_map.cc:77:implement_pattern_cache$692 ($eq).
Removed top 2 bits (of 6) from port B of cell b14.$auto$fsm_map.cc:77:implement_pattern_cache$694 ($eq).
Removed top 1 bits (of 32) from port A of cell b14.$verific$LessThan_14$b14.vhd:83$312 ($lt).
Removed top 1 bits (of 33) from port Y of cell b14.$verific$unary_minus_15$b14.vhd:84$313 ($neg).
Removed top 1 bits (of 33) from port A of cell b14.$verific$unary_minus_15$b14.vhd:84$313 ($neg).
Removed top 2 bits (of 5) from port B of cell b14.$auto$fsm_map.cc:77:implement_pattern_cache$696 ($eq).
Removed top 3 bits (of 5) from port Y of cell b14.$verific$add_21$b14.vhd:86$319 ($add).
Removed top 3 bits (of 5) from port A of cell b14.$verific$add_21$b14.vhd:86$319 ($add).
Removed top 5 bits (of 8) from port Y of cell b14.$verific$add_26$b14.vhd:88$326 ($add).
Removed top 5 bits (of 8) from port A of cell b14.$verific$add_26$b14.vhd:88$326 ($add).
Removed top 9 bits (of 13) from port Y of cell b14.$verific$add_31$b14.vhd:90$333 ($add).
Removed top 9 bits (of 13) from port A of cell b14.$verific$add_31$b14.vhd:90$333 ($add).
Removed top 8 bits (of 9) from port Y of cell b14.$verific$add_36$b14.vhd:92$340 ($add).
Removed top 8 bits (of 9) from port A of cell b14.$verific$add_36$b14.vhd:92$340 ($add).
Removed top 25 bits (of 26) from port B of cell b14.$verific$add_39$b14.vhd:95$346 ($add).
Removed top 8 bits (of 9) from port B of cell b14.$auto$fsm_map.cc:77:implement_pattern_cache$706 ($eq).
Removed top 1 bits (of 3) from port Y of cell b14.$verific$add_44$b14.vhd:96$350 ($add).
Removed top 1 bits (of 3) from port A of cell b14.$verific$add_44$b14.vhd:96$350 ($add).
Removed top 12 bits (of 32) from port A of cell b14.$verific$add_56$b14.vhd:110$358 ($add).
Removed top 12 bits (of 32) from port Y of cell b14.$verific$add_56$b14.vhd:110$358 ($add).
Removed top 12 bits (of 32) from port B of cell b14.$verific$add_56$b14.vhd:110$358 ($add).
Removed top 12 bits (of 32) from port A of cell b14.$verific$add_61$b14.vhd:113$360 ($add).
Removed top 12 bits (of 32) from port Y of cell b14.$verific$add_61$b14.vhd:113$360 ($add).
Removed top 12 bits (of 32) from port B of cell b14.$verific$add_61$b14.vhd:113$360 ($add).
Removed top 1 bits (of 32) from port B of cell b14.$verific$LessThan_83$b14.vhd:148$372 ($lt).
Removed top 2 bits (of 33) from port B of cell b14.$verific$sub_84$b14.vhd:149$373 ($sub).
Removed top 1 bits (of 33) from port Y of cell b14.$verific$sub_84$b14.vhd:149$373 ($sub).
Removed top 1 bits (of 33) from port A of cell b14.$verific$sub_84$b14.vhd:149$373 ($sub).
Removed top 30 bits (of 32) from mux cell b14.$verific$mux_138$b14.vhd:216$391 ($mux).
Removed top 30 bits (of 32) from mux cell b14.$verific$mux_140$b14.vhd:220$393 ($mux).
Removed top 1 bits (of 3) from port A of cell b14.$verific$equal_141$b14.vhd:221$394 ($eq).
Removed top 1 bits (of 3) from port A of cell b14.$verific$equal_142$b14.vhd:223$395 ($eq).
Removed top 2 bits (of 3) from port A of cell b14.$verific$equal_143$b14.vhd:224$396 ($eq).
Removed top 30 bits (of 32) from mux cell b14.$verific$mux_145$b14.vhd:226$398 ($mux).
Removed top 30 bits (of 32) from mux cell b14.$verific$mux_146$b14.vhd:226$399 ($mux).
Removed top 30 bits (of 32) from mux cell b14.$verific$mux_147$b14.vhd:226$400 ($mux).
Removed top 30 bits (of 32) from mux cell b14.$verific$mux_148$b14.vhd:226$401 ($mux).
Removed top 30 bits (of 32) from mux cell b14.$verific$mux_149$b14.vhd:226$402 ($mux).
Removed top 30 bits (of 32) from mux cell b14.$verific$mux_150$b14.vhd:226$403 ($mux).
Removed top 32 bits (of 33) from port A of cell b14.$verific$sub_168$b14.vhd:243$404 ($sub).
Removed top 1 bits (of 33) from port Y of cell b14.$verific$sub_168$b14.vhd:243$404 ($sub).
Removed top 1 bits (of 33) from port B of cell b14.$verific$sub_168$b14.vhd:243$404 ($sub).
Removed top 31 bits (of 32) from port A of cell b14.$verific$equal_177$b14.vhd:244$407 ($eq).
Removed top 30 bits (of 32) from port B of cell b14.$verific$equal_177$b14.vhd:244$407 ($eq).
Removed top 30 bits (of 32) from port A of cell b14.$verific$equal_178$b14.vhd:245$408 ($eq).
Removed top 30 bits (of 32) from port B of cell b14.$verific$equal_178$b14.vhd:245$408 ($eq).
Removed top 30 bits (of 32) from port A of cell b14.$verific$equal_179$b14.vhd:246$409 ($eq).
Removed top 30 bits (of 32) from port B of cell b14.$verific$equal_179$b14.vhd:246$409 ($eq).
Removed top 2 bits (of 7) from port B of cell b14.$auto$fsm_map.cc:77:implement_pattern_cache$712 ($eq).
Removed top 2 bits (of 32) from port Y of cell b14.$verific$add_283$b14.vhd:318$415 ($add).
Removed top 2 bits (of 32) from port A of cell b14.$verific$add_283$b14.vhd:318$415 ($add).
Removed top 2 bits (of 32) from port B of cell b14.$verific$add_283$b14.vhd:318$415 ($add).
Removed top 3 bits (of 33) from port Y of cell b14.$verific$sub_365$b14.vhd:358$417 ($sub).
Removed top 3 bits (of 33) from port A of cell b14.$verific$sub_365$b14.vhd:358$417 ($sub).
Removed top 3 bits (of 33) from port B of cell b14.$verific$sub_365$b14.vhd:358$417 ($sub).
Removed top 2 bits (of 6) from port B of cell b14.$auto$fsm_map.cc:77:implement_pattern_cache$714 ($eq).
Removed top 2 bits (of 5) from port B of cell b14.$auto$fsm_map.cc:77:implement_pattern_cache$716 ($eq).
Removed top 2 bits (of 6) from port B of cell b14.$auto$fsm_map.cc:77:implement_pattern_cache$688 ($eq).
Removed top 2 bits (of 4) from port B of cell b14.$auto$fsm_map.cc:77:implement_pattern_cache$720 ($eq).
Removed top 3 bits (of 32) from mux cell b14.$verific$mux_698$b14.vhd:502$473 ($mux).
Removed top 3 bits (of 32) from mux cell b14.$verific$mux_679$b14.vhd:501$459 ($mux).
Removed top 30 bits (of 32) from wire b14.$fsm$oldstate\d.
Removed top 20 bits (of 21) from wire b14.$verific$n10477$270.
Removed top 3 bits (of 32) from wire b14.$verific$n10755$281.
Removed top 3 bits (of 32) from wire b14.$verific$n11178$290.
Removed top 30 bits (of 32) from wire b14.$verific$n11472$295.
Removed top 30 bits (of 32) from wire b14.$verific$n1407$163.
Removed top 30 bits (of 32) from wire b14.$verific$n1441$164.
Removed top 1 bits (of 33) from wire b14.$verific$n184$132.
Removed top 27 bits (of 30) from wire b14.$verific$n2703$190.
Removed top 9 bits (of 13) from wire b14.$verific$n318$139.
Removed top 8 bits (of 9) from wire b14.$verific$n341$141.
Removed top 2 bits (of 32) from wire b14.$verific$n4241$209.
Removed top 1 bits (of 3) from wire b14.$verific$n436$145.
Removed top 3 bits (of 33) from wire b14.$verific$n5666$223.
Removed top 1 bits (of 32) from wire b14.$verific$n862$158.
Removed top 1 bits (of 33) from wire b14.$verific$n933$160.
Removed top 3 bits (of 32) from wire b14.reg3.

yosys> peepopt

3.15. Executing PEEPOPT pass (run peephole optimizers).

yosys> pmuxtree

3.16. Executing PMUXTREE pass.

yosys> opt_clean

3.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b14..
Removed 8 unused cells and 57 unused wires.
<suppressed ~9 debug messages>

yosys> alumacc

3.18. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module b14:
  creating $macc model for $verific$add_21$b14.vhd:86$319 ($add).
  creating $macc model for $verific$add_26$b14.vhd:88$326 ($add).
  creating $macc model for $verific$add_283$b14.vhd:318$415 ($add).
  creating $macc model for $verific$add_31$b14.vhd:90$333 ($add).
  creating $macc model for $verific$add_36$b14.vhd:92$340 ($add).
  creating $macc model for $verific$add_39$b14.vhd:95$346 ($add).
  creating $macc model for $verific$add_44$b14.vhd:96$350 ($add).
  creating $macc model for $verific$add_56$b14.vhd:110$358 ($add).
  creating $macc model for $verific$add_570$b14.vhd:466$422 ($add).
  creating $macc model for $verific$add_61$b14.vhd:113$360 ($add).
  creating $macc model for $verific$add_662$b14.vhd:493$442 ($add).
  creating $macc model for $verific$add_664$b14.vhd:494$444 ($add).
  creating $macc model for $verific$mult_667$b14.vhd:497$448 ($mul).
  creating $macc model for $verific$sub_168$b14.vhd:243$404 ($sub).
  creating $macc model for $verific$sub_365$b14.vhd:358$417 ($sub).
  creating $macc model for $verific$sub_84$b14.vhd:149$373 ($sub).
  creating $macc model for $verific$unary_minus_15$b14.vhd:84$313 ($neg).
  creating $alu model for $macc $verific$unary_minus_15$b14.vhd:84$313.
  creating $alu model for $macc $verific$sub_84$b14.vhd:149$373.
  creating $alu model for $macc $verific$sub_365$b14.vhd:358$417.
  creating $alu model for $macc $verific$sub_168$b14.vhd:243$404.
  creating $alu model for $macc $verific$add_664$b14.vhd:494$444.
  creating $alu model for $macc $verific$add_662$b14.vhd:493$442.
  creating $alu model for $macc $verific$add_61$b14.vhd:113$360.
  creating $alu model for $macc $verific$add_570$b14.vhd:466$422.
  creating $alu model for $macc $verific$add_56$b14.vhd:110$358.
  creating $alu model for $macc $verific$add_44$b14.vhd:96$350.
  creating $alu model for $macc $verific$add_39$b14.vhd:95$346.
  creating $alu model for $macc $verific$add_36$b14.vhd:92$340.
  creating $alu model for $macc $verific$add_31$b14.vhd:90$333.
  creating $alu model for $macc $verific$add_283$b14.vhd:318$415.
  creating $alu model for $macc $verific$add_26$b14.vhd:88$326.
  creating $alu model for $macc $verific$add_21$b14.vhd:86$319.
  creating $macc cell for $verific$mult_667$b14.vhd:497$448: $auto$alumacc.cc:365:replace_macc$825
  creating $alu model for $verific$LessThan_14$b14.vhd:83$312 ($lt): new $alu
  creating $alu model for $verific$LessThan_68$b14.vhd:118$366 ($lt): new $alu
  creating $alu model for $verific$LessThan_78$b14.vhd:138$370 ($lt): merged with $verific$LessThan_68$b14.vhd:118$366.
  creating $alu model for $verific$LessThan_83$b14.vhd:148$372 ($lt): new $alu
  creating $alu model for $verific$LessThan_87$b14.vhd:151$377 ($lt): new $alu
  creating $alu cell for $verific$LessThan_87$b14.vhd:151$377: $auto$alumacc.cc:485:replace_alu$830
  creating $alu cell for $verific$LessThan_83$b14.vhd:148$372: $auto$alumacc.cc:485:replace_alu$841
  creating $alu cell for $verific$LessThan_68$b14.vhd:118$366, $verific$LessThan_78$b14.vhd:138$370: $auto$alumacc.cc:485:replace_alu$852
  creating $alu cell for $verific$LessThan_14$b14.vhd:83$312: $auto$alumacc.cc:485:replace_alu$863
  creating $alu cell for $verific$add_21$b14.vhd:86$319: $auto$alumacc.cc:485:replace_alu$868
  creating $alu cell for $verific$add_26$b14.vhd:88$326: $auto$alumacc.cc:485:replace_alu$871
  creating $alu cell for $verific$add_283$b14.vhd:318$415: $auto$alumacc.cc:485:replace_alu$874
  creating $alu cell for $verific$add_31$b14.vhd:90$333: $auto$alumacc.cc:485:replace_alu$877
  creating $alu cell for $verific$add_36$b14.vhd:92$340: $auto$alumacc.cc:485:replace_alu$880
  creating $alu cell for $verific$add_39$b14.vhd:95$346: $auto$alumacc.cc:485:replace_alu$883
  creating $alu cell for $verific$add_44$b14.vhd:96$350: $auto$alumacc.cc:485:replace_alu$886
  creating $alu cell for $verific$add_570$b14.vhd:466$422: $auto$alumacc.cc:485:replace_alu$889
  creating $alu cell for $verific$add_56$b14.vhd:110$358: $auto$alumacc.cc:485:replace_alu$892
  creating $alu cell for $verific$add_662$b14.vhd:493$442: $auto$alumacc.cc:485:replace_alu$895
  creating $alu cell for $verific$add_61$b14.vhd:113$360: $auto$alumacc.cc:485:replace_alu$898
  creating $alu cell for $verific$add_664$b14.vhd:494$444: $auto$alumacc.cc:485:replace_alu$901
  creating $alu cell for $verific$sub_168$b14.vhd:243$404: $auto$alumacc.cc:485:replace_alu$904
  creating $alu cell for $verific$sub_365$b14.vhd:358$417: $auto$alumacc.cc:485:replace_alu$907
  creating $alu cell for $verific$sub_84$b14.vhd:149$373: $auto$alumacc.cc:485:replace_alu$910
  creating $alu cell for $verific$unary_minus_15$b14.vhd:84$313: $auto$alumacc.cc:485:replace_alu$913
  created 20 $alu and 1 $macc cells.

yosys> opt

3.19. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b14.
<suppressed ~5 debug messages>

yosys> opt_merge -nomux

3.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b14'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b14..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~14 debug messages>

yosys> opt_reduce

3.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b14.
Performed a total of 0 changes.

yosys> opt_merge

3.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b14'.
Removed a total of 0 cells.

yosys> opt_dff

3.19.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.19.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b14..
Removed 2 unused cells and 10 unused wires.
<suppressed ~3 debug messages>

yosys> opt_expr

3.19.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module b14.

3.19.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.19.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b14..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~14 debug messages>

yosys> opt_reduce

3.19.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b14.
Performed a total of 0 changes.

yosys> opt_merge

3.19.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b14'.
Removed a total of 0 cells.

yosys> opt_dff

3.19.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.19.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b14..

yosys> opt_expr

3.19.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module b14.

3.19.16. Finished OPT passes. (There is nothing left to do.)

yosys> memory -nomap

3.20. Executing MEMORY pass.

yosys> opt_mem

3.20.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

yosys> opt_mem_priority

3.20.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

yosys> opt_mem_feedback

3.20.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

yosys> memory_dff

3.20.4. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

yosys> opt_clean

3.20.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b14..

yosys> memory_share

3.20.6. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

yosys> opt_mem_widen

3.20.7. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

yosys> opt_clean

3.20.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b14..

yosys> memory_collect

3.20.9. Executing MEMORY_COLLECT pass (generating $mem cells).

yosys> opt_clean

3.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b14..

yosys> techmap

3.22. Executing TECHMAP pass (map to technology primitives).

3.22.1. Executing Verilog-2005 frontend: /home/users/meri/Documents/workspace/clean/for_push/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/meri/Documents/workspace/clean/for_push/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.22.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $and.
Using extmapper maccmap for cells of type $macc.
  add 3'101 * $auto$wreduce.cc:454:run$777 [0] (3x1 bits, unsigned)
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $adffe.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $adff.
Using template $paramod$175e67c02b86e96b1288b9dc100122520d7240d8\_90_alu for cells of type $alu.
Using template $paramod$3ef7d3dd227da7627a99c5e5a6a4deb817573e39\_90_alu for cells of type $alu.
Using template $paramod$403d07c18de10cda2ac652a859c56aea81aaf9b5\_90_alu for cells of type $alu.
Using template $paramod$fc972a7a46956c1788f3cb5257b53c8f1df2d0cc\_90_alu for cells of type $alu.
Using template $paramod$83784888def4f70dbbded37c6d05d2ea1157c936\_90_alu for cells of type $alu.
Using template $paramod$788c3d57e5abb3a3f89aea6d4acd665be37f4e9b\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $bmux.
Using template $paramod$a7926d38756e33b5022e02ebfd484599309272c7\_90_alu for cells of type $alu.
Using template $paramod$e891e6b399cf52748460a311fafe476815d24bd7\_90_alu for cells of type $alu.
Using template $paramod$fbc7873bff55778c0b3173955b7e4bce1d9d6834\_90_alu for cells of type $alu.
Using template $paramod$c6baa65225090ac0a120feab1b920965244aa496\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $logic_not.
Using template $paramod$32a7b7b86c07519b7537abc18e96f0331f97914d\_90_alu for cells of type $alu.
Using template $paramod$c32aaa9fd758c6ea2b382f4327253b21b576e597\_90_alu for cells of type $alu.
Using template $paramod$6fc37af1c109ae54e8aed83fcd995c12d378ce93\_90_alu for cells of type $alu.
Using template $paramod$6a42b6fefed750f8a1c58eab59479d960557103c\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000010 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000011 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011110 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000001 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011011 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011111 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010101 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000100000 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000100 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010100 for cells of type $lcu.
No more expansions possible.
<suppressed ~4237 debug messages>

yosys> opt

3.23. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.23.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b14.
<suppressed ~3147 debug messages>

yosys> opt_merge -nomux

3.23.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b14'.
<suppressed ~5658 debug messages>
Removed a total of 1886 cells.

yosys> opt_muxtree

3.23.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b14..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.23.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b14.
Performed a total of 0 changes.

yosys> opt_merge

3.23.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b14'.
Removed a total of 0 cells.

yosys> opt_dff

3.23.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $auto$ff.cc:262:slice$6372 ($_DFF_PP0_) from module b14 (D = $verific$n11246$292 [19], Q = \addr [19]).
Adding EN signal on $auto$ff.cc:262:slice$6375 ($_DFFE_PP0P_) from module b14 (D = $verific$n10979$120, Q = \B).
Adding EN signal on $auto$ff.cc:262:slice$6193 ($_DFF_PP0_) from module b14 (D = $verific$n11301$293 [0], Q = \IR [0]).
Adding EN signal on $auto$ff.cc:262:slice$6353 ($_DFF_PP0_) from module b14 (D = $verific$n11246$292 [0], Q = \addr [0]).
Adding EN signal on $auto$ff.cc:262:slice$6354 ($_DFF_PP0_) from module b14 (D = $verific$n11246$292 [1], Q = \addr [1]).
Adding EN signal on $auto$ff.cc:262:slice$6355 ($_DFF_PP0_) from module b14 (D = $verific$n11246$292 [2], Q = \addr [2]).
Adding EN signal on $auto$ff.cc:262:slice$6356 ($_DFF_PP0_) from module b14 (D = $verific$n11246$292 [3], Q = \addr [3]).
Adding EN signal on $auto$ff.cc:262:slice$6357 ($_DFF_PP0_) from module b14 (D = $verific$n11246$292 [4], Q = \addr [4]).
Adding EN signal on $auto$ff.cc:262:slice$6358 ($_DFF_PP0_) from module b14 (D = $verific$n11246$292 [5], Q = \addr [5]).
Adding EN signal on $auto$ff.cc:262:slice$6359 ($_DFF_PP0_) from module b14 (D = $verific$n11246$292 [6], Q = \addr [6]).
Adding EN signal on $auto$ff.cc:262:slice$6360 ($_DFF_PP0_) from module b14 (D = $verific$n11246$292 [7], Q = \addr [7]).
Adding EN signal on $auto$ff.cc:262:slice$6361 ($_DFF_PP0_) from module b14 (D = $verific$n11246$292 [8], Q = \addr [8]).
Adding EN signal on $auto$ff.cc:262:slice$6362 ($_DFF_PP0_) from module b14 (D = $verific$n11246$292 [9], Q = \addr [9]).
Adding EN signal on $auto$ff.cc:262:slice$6363 ($_DFF_PP0_) from module b14 (D = $verific$n11246$292 [10], Q = \addr [10]).
Adding EN signal on $auto$ff.cc:262:slice$6364 ($_DFF_PP0_) from module b14 (D = $verific$n11246$292 [11], Q = \addr [11]).
Adding EN signal on $auto$ff.cc:262:slice$6365 ($_DFF_PP0_) from module b14 (D = $verific$n11246$292 [12], Q = \addr [12]).
Adding EN signal on $auto$ff.cc:262:slice$6366 ($_DFF_PP0_) from module b14 (D = $verific$n11246$292 [13], Q = \addr [13]).
Adding EN signal on $auto$ff.cc:262:slice$6367 ($_DFF_PP0_) from module b14 (D = $verific$n11246$292 [14], Q = \addr [14]).
Adding EN signal on $auto$ff.cc:262:slice$6368 ($_DFF_PP0_) from module b14 (D = $verific$n11246$292 [15], Q = \addr [15]).
Adding EN signal on $auto$ff.cc:262:slice$6369 ($_DFF_PP0_) from module b14 (D = $verific$n11246$292 [16], Q = \addr [16]).
Adding EN signal on $auto$ff.cc:262:slice$6370 ($_DFF_PP0_) from module b14 (D = $verific$n11246$292 [17], Q = \addr [17]).
Adding EN signal on $auto$ff.cc:262:slice$6371 ($_DFF_PP0_) from module b14 (D = $verific$n11246$292 [18], Q = \addr [18]).

yosys> opt_clean

3.23.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b14..
Removed 496 unused cells and 1565 unused wires.
<suppressed ~497 debug messages>

yosys> opt_expr

3.23.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module b14.
<suppressed ~332 debug messages>

3.23.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.23.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b14..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.23.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b14.
Performed a total of 0 changes.

yosys> opt_merge

3.23.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b14'.
<suppressed ~528 debug messages>
Removed a total of 176 cells.

yosys> opt_dff

3.23.13. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $auto$ff.cc:262:slice$6352 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$5228 [31], Q = \reg2 [31]).
Adding EN signal on $auto$ff.cc:262:slice$6351 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$5228 [30], Q = \reg2 [30]).
Adding EN signal on $auto$ff.cc:262:slice$6350 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$5228 [29], Q = \reg2 [29]).
Adding EN signal on $auto$ff.cc:262:slice$6349 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$5228 [28], Q = \reg2 [28]).
Adding EN signal on $auto$ff.cc:262:slice$6348 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$5228 [27], Q = \reg2 [27]).
Adding EN signal on $auto$ff.cc:262:slice$6347 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$5228 [26], Q = \reg2 [26]).
Adding EN signal on $auto$ff.cc:262:slice$6346 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$5228 [25], Q = \reg2 [25]).
Adding EN signal on $auto$ff.cc:262:slice$6345 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$5228 [24], Q = \reg2 [24]).
Adding EN signal on $auto$ff.cc:262:slice$6344 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$5228 [23], Q = \reg2 [23]).
Adding EN signal on $auto$ff.cc:262:slice$6343 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$5228 [22], Q = \reg2 [22]).
Adding EN signal on $auto$ff.cc:262:slice$6342 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$5228 [21], Q = \reg2 [21]).
Adding EN signal on $auto$ff.cc:262:slice$6341 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$5228 [20], Q = \reg2 [20]).
Adding EN signal on $auto$ff.cc:262:slice$6340 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$5228 [19], Q = \reg2 [19]).
Adding EN signal on $auto$ff.cc:262:slice$6339 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$5228 [18], Q = \reg2 [18]).
Adding EN signal on $auto$ff.cc:262:slice$6338 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$5228 [17], Q = \reg2 [17]).
Adding EN signal on $auto$ff.cc:262:slice$6337 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$5228 [16], Q = \reg2 [16]).
Adding EN signal on $auto$ff.cc:262:slice$6336 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$5228 [15], Q = \reg2 [15]).
Adding EN signal on $auto$ff.cc:262:slice$6335 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$5228 [14], Q = \reg2 [14]).
Adding EN signal on $auto$ff.cc:262:slice$6334 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$5228 [13], Q = \reg2 [13]).
Adding EN signal on $auto$ff.cc:262:slice$6333 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$5228 [12], Q = \reg2 [12]).
Adding EN signal on $auto$ff.cc:262:slice$6332 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$5228 [11], Q = \reg2 [11]).
Adding EN signal on $auto$ff.cc:262:slice$6331 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$5228 [10], Q = \reg2 [10]).
Adding EN signal on $auto$ff.cc:262:slice$6330 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$5228 [9], Q = \reg2 [9]).
Adding EN signal on $auto$ff.cc:262:slice$6329 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$5228 [8], Q = \reg2 [8]).
Adding EN signal on $auto$ff.cc:262:slice$6328 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$5228 [7], Q = \reg2 [7]).
Adding EN signal on $auto$ff.cc:262:slice$6327 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$5228 [6], Q = \reg2 [6]).
Adding EN signal on $auto$ff.cc:262:slice$6326 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$5228 [5], Q = \reg2 [5]).
Adding EN signal on $auto$ff.cc:262:slice$6325 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$5228 [4], Q = \reg2 [4]).
Adding EN signal on $auto$ff.cc:262:slice$6324 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$5228 [3], Q = \reg2 [3]).
Adding EN signal on $auto$ff.cc:262:slice$6323 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$5228 [2], Q = \reg2 [2]).
Adding EN signal on $auto$ff.cc:262:slice$6322 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$5228 [1], Q = \reg2 [1]).
Adding EN signal on $auto$ff.cc:262:slice$6321 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$5228 [0], Q = \reg2 [0]).
Adding EN signal on $auto$ff.cc:262:slice$6320 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4744 [31], Q = \reg1 [31]).
Adding EN signal on $auto$ff.cc:262:slice$6319 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4744 [30], Q = \reg1 [30]).
Adding EN signal on $auto$ff.cc:262:slice$6318 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4744 [29], Q = \reg1 [29]).
Adding EN signal on $auto$ff.cc:262:slice$6317 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4744 [28], Q = \reg1 [28]).
Adding EN signal on $auto$ff.cc:262:slice$6316 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4744 [27], Q = \reg1 [27]).
Adding EN signal on $auto$ff.cc:262:slice$6315 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4744 [26], Q = \reg1 [26]).
Adding EN signal on $auto$ff.cc:262:slice$6314 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4744 [25], Q = \reg1 [25]).
Adding EN signal on $auto$ff.cc:262:slice$6313 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4744 [24], Q = \reg1 [24]).
Adding EN signal on $auto$ff.cc:262:slice$6312 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4744 [23], Q = \reg1 [23]).
Adding EN signal on $auto$ff.cc:262:slice$6311 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4744 [22], Q = \reg1 [22]).
Adding EN signal on $auto$ff.cc:262:slice$6310 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4744 [21], Q = \reg1 [21]).
Adding EN signal on $auto$ff.cc:262:slice$6309 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4744 [20], Q = \reg1 [20]).
Adding EN signal on $auto$ff.cc:262:slice$6308 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4744 [19], Q = \reg1 [19]).
Adding EN signal on $auto$ff.cc:262:slice$6307 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4744 [18], Q = \reg1 [18]).
Adding EN signal on $auto$ff.cc:262:slice$6306 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4744 [17], Q = \reg1 [17]).
Adding EN signal on $auto$ff.cc:262:slice$6305 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4744 [16], Q = \reg1 [16]).
Adding EN signal on $auto$ff.cc:262:slice$6304 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4744 [15], Q = \reg1 [15]).
Adding EN signal on $auto$ff.cc:262:slice$6303 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4744 [14], Q = \reg1 [14]).
Adding EN signal on $auto$ff.cc:262:slice$6302 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4744 [13], Q = \reg1 [13]).
Adding EN signal on $auto$ff.cc:262:slice$6301 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4744 [12], Q = \reg1 [12]).
Adding EN signal on $auto$ff.cc:262:slice$6300 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4744 [11], Q = \reg1 [11]).
Adding EN signal on $auto$ff.cc:262:slice$6299 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4744 [10], Q = \reg1 [10]).
Adding EN signal on $auto$ff.cc:262:slice$6298 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4744 [9], Q = \reg1 [9]).
Adding EN signal on $auto$ff.cc:262:slice$6297 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4744 [8], Q = \reg1 [8]).
Adding EN signal on $auto$ff.cc:262:slice$6296 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4744 [7], Q = \reg1 [7]).
Adding EN signal on $auto$ff.cc:262:slice$6295 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4744 [6], Q = \reg1 [6]).
Adding EN signal on $auto$ff.cc:262:slice$6294 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4744 [5], Q = \reg1 [5]).
Adding EN signal on $auto$ff.cc:262:slice$6293 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4744 [4], Q = \reg1 [4]).
Adding EN signal on $auto$ff.cc:262:slice$6292 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4744 [3], Q = \reg1 [3]).
Adding EN signal on $auto$ff.cc:262:slice$6291 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4744 [2], Q = \reg1 [2]).
Adding EN signal on $auto$ff.cc:262:slice$6290 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4744 [1], Q = \reg1 [1]).
Adding EN signal on $auto$ff.cc:262:slice$6289 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4744 [0], Q = \reg1 [0]).
Adding EN signal on $auto$ff.cc:262:slice$6288 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4260 [31], Q = \reg0 [31]).
Adding EN signal on $auto$ff.cc:262:slice$6287 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4260 [30], Q = \reg0 [30]).
Adding EN signal on $auto$ff.cc:262:slice$6286 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4260 [29], Q = \reg0 [29]).
Adding EN signal on $auto$ff.cc:262:slice$6285 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4260 [28], Q = \reg0 [28]).
Adding EN signal on $auto$ff.cc:262:slice$6284 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4260 [27], Q = \reg0 [27]).
Adding EN signal on $auto$ff.cc:262:slice$6283 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4260 [26], Q = \reg0 [26]).
Adding EN signal on $auto$ff.cc:262:slice$6282 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4260 [25], Q = \reg0 [25]).
Adding EN signal on $auto$ff.cc:262:slice$6281 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4260 [24], Q = \reg0 [24]).
Adding EN signal on $auto$ff.cc:262:slice$6280 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4260 [23], Q = \reg0 [23]).
Adding EN signal on $auto$ff.cc:262:slice$6279 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4260 [22], Q = \reg0 [22]).
Adding EN signal on $auto$ff.cc:262:slice$6278 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4260 [21], Q = \reg0 [21]).
Adding EN signal on $auto$ff.cc:262:slice$6277 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4260 [20], Q = \reg0 [20]).
Adding EN signal on $auto$ff.cc:262:slice$6276 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4260 [19], Q = \reg0 [19]).
Adding EN signal on $auto$ff.cc:262:slice$6275 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4260 [18], Q = \reg0 [18]).
Adding EN signal on $auto$ff.cc:262:slice$6274 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4260 [17], Q = \reg0 [17]).
Adding EN signal on $auto$ff.cc:262:slice$6273 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4260 [16], Q = \reg0 [16]).
Adding EN signal on $auto$ff.cc:262:slice$6272 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4260 [15], Q = \reg0 [15]).
Adding EN signal on $auto$ff.cc:262:slice$6271 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4260 [14], Q = \reg0 [14]).
Adding EN signal on $auto$ff.cc:262:slice$6270 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4260 [13], Q = \reg0 [13]).
Adding EN signal on $auto$ff.cc:262:slice$6269 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4260 [12], Q = \reg0 [12]).
Adding EN signal on $auto$ff.cc:262:slice$6268 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4260 [11], Q = \reg0 [11]).
Adding EN signal on $auto$ff.cc:262:slice$6267 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4260 [10], Q = \reg0 [10]).
Adding EN signal on $auto$ff.cc:262:slice$6266 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4260 [9], Q = \reg0 [9]).
Adding EN signal on $auto$ff.cc:262:slice$6265 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4260 [8], Q = \reg0 [8]).
Adding EN signal on $auto$ff.cc:262:slice$6264 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4260 [7], Q = \reg0 [7]).
Adding EN signal on $auto$ff.cc:262:slice$6263 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4260 [6], Q = \reg0 [6]).
Adding EN signal on $auto$ff.cc:262:slice$6262 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4260 [5], Q = \reg0 [5]).
Adding EN signal on $auto$ff.cc:262:slice$6261 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4260 [4], Q = \reg0 [4]).
Adding EN signal on $auto$ff.cc:262:slice$6260 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4260 [3], Q = \reg0 [3]).
Adding EN signal on $auto$ff.cc:262:slice$6259 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4260 [2], Q = \reg0 [2]).
Adding EN signal on $auto$ff.cc:262:slice$6258 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4260 [1], Q = \reg0 [1]).
Adding EN signal on $auto$ff.cc:262:slice$6257 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4260 [0], Q = \reg0 [0]).
Adding EN signal on $auto$ff.cc:262:slice$1467 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$5712 [2], Q = \reg3 [2]).
Adding EN signal on $auto$ff.cc:262:slice$1466 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$5712 [1], Q = \reg3 [1]).
Adding EN signal on $auto$ff.cc:262:slice$1465 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$5712 [0], Q = \reg3 [0]).

yosys> opt_clean

3.23.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b14..
Removed 0 unused cells and 830 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.23.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module b14.
<suppressed ~2299 debug messages>

3.23.16. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.23.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b14..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.23.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b14.
Performed a total of 0 changes.

yosys> opt_merge

3.23.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b14'.
<suppressed ~10443 debug messages>
Removed a total of 3481 cells.

yosys> opt_dff

3.23.20. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.23.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b14..
Removed 0 unused cells and 3324 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.23.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module b14.

3.23.23. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.23.24. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b14..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.23.25. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b14.
Performed a total of 0 changes.

yosys> opt_merge

3.23.26. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b14'.
Removed a total of 0 cells.

yosys> opt_dff

3.23.27. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.23.28. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b14..

yosys> opt_expr

3.23.29. Executing OPT_EXPR pass (perform const folding).
Optimizing module b14.

3.23.30. Finished OPT passes. (There is nothing left to do.)

yosys> opt -fast -full

3.24. Executing OPT pass (performing simple optimizations).

yosys> opt_expr -full

3.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b14.
<suppressed ~638 debug messages>

yosys> opt_merge

3.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b14'.
Removed a total of 0 cells.

yosys> opt_dff

3.24.3. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $auto$ff.cc:262:slice$22083 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4260 [0], Q = \reg0 [0]).
Adding EN signal on $auto$ff.cc:262:slice$18916 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4744 [0], Q = \reg1 [0]).

yosys> opt_clean

3.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b14..
Removed 0 unused cells and 13 unused wires.
<suppressed ~1 debug messages>

3.24.5. Rerunning OPT passes. (Removed registers in this run.)

yosys> opt_expr -full

3.24.6. Executing OPT_EXPR pass (perform const folding).
Optimizing module b14.
<suppressed ~9 debug messages>

yosys> opt_merge

3.24.7. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b14'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

yosys> opt_dff

3.24.8. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.24.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b14..
Removed 0 unused cells and 4 unused wires.
<suppressed ~1 debug messages>

3.24.10. Finished fast OPT passes.

yosys> memory_map

3.25. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

yosys> opt -full

3.26. Executing OPT pass (performing simple optimizations).

yosys> opt_expr -full

3.26.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b14.

yosys> opt_merge -nomux

3.26.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b14'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.26.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b14..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce -full

3.26.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b14.
Performed a total of 0 changes.

yosys> opt_merge

3.26.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b14'.
Removed a total of 0 cells.

yosys> opt_share

3.26.6. Executing OPT_SHARE pass.
    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$2656 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$2644
        $auto$simplemap.cc:86:simplemap_bitop$2643

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$2657 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$2646
        $auto$simplemap.cc:86:simplemap_bitop$2645

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$2658 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$2648
        $auto$simplemap.cc:86:simplemap_bitop$2647

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$2659 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$2650
        $auto$simplemap.cc:86:simplemap_bitop$2649

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$6840 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$8485
        $auto$simplemap.cc:86:simplemap_bitop$9756


yosys> opt_dff

3.26.7. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.26.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b14..
Removed 0 unused cells and 8 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr -full

3.26.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module b14.
<suppressed ~5 debug messages>

3.26.10. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.26.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b14..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

yosys> opt_reduce -full

3.26.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b14.
Performed a total of 0 changes.

yosys> opt_merge

3.26.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b14'.
Removed a total of 0 cells.

yosys> opt_share

3.26.14. Executing OPT_SHARE pass.
    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$2663 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$2646
        $auto$simplemap.cc:86:simplemap_bitop$2644

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$2664 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$2650
        $auto$simplemap.cc:86:simplemap_bitop$2648


yosys> opt_dff

3.26.15. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.26.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b14..
Removed 0 unused cells and 4 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr -full

3.26.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module b14.
<suppressed ~2 debug messages>

3.26.18. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.26.19. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b14..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

yosys> opt_reduce -full

3.26.20. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b14.
Performed a total of 0 changes.

yosys> opt_merge

3.26.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b14'.
Removed a total of 0 cells.

yosys> opt_share

3.26.22. Executing OPT_SHARE pass.
    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$2667 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$2650
        $auto$simplemap.cc:86:simplemap_bitop$2646


yosys> opt_dff

3.26.23. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.26.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b14..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr -full

3.26.25. Executing OPT_EXPR pass (perform const folding).
Optimizing module b14.
<suppressed ~1 debug messages>

3.26.26. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.26.27. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b14..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

yosys> opt_reduce -full

3.26.28. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b14.
Performed a total of 0 changes.

yosys> opt_merge

3.26.29. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b14'.
Removed a total of 0 cells.

yosys> opt_share

3.26.30. Executing OPT_SHARE pass.

yosys> opt_dff

3.26.31. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.26.32. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b14..

yosys> opt_expr -full

3.26.33. Executing OPT_EXPR pass (perform const folding).
Optimizing module b14.

3.26.34. Finished OPT passes. (There is nothing left to do.)

yosys> abc -script abc_tmp.scr

3.27. Executing ABC pass (technology mapping using ABC).

3.27.1. Extracting gate netlist of module `\b14' to `<abc-temp-dir>/input.blif'..
Extracted 4322 gates and 4542 wires to a netlist network with 218 inputs and 240 outputs.

3.27.1.1. Executing ABC.
Running ABC command: /home/users/meri/Documents/workspace/clean/for_push/yosys_verific_rs/logic_synthesis-rs/abc-rs/abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + source /home/users/meri/Documents/workspace/clean/for_push/yosys_verific_rs/result_23-03-2022T14-57-36/All_lut_synth_rs_ade.json/b14/abc_tmp.scr 
ABC:   #Luts =  1344  Max Lvl =  23  Avg Lvl =  15.59  [   0.70 sec. at Pass 0]
ABC:   #Luts =   925  Max Lvl =  32  Avg Lvl =  15.94  [  44.27 sec. at Pass 1]
ABC:   #Luts =   892  Max Lvl =  31  Avg Lvl =  14.87  [   7.53 sec. at Pass 2]
ABC:   #Luts =   876  Max Lvl =  33  Avg Lvl =  15.63  [  13.90 sec. at Pass 3]
ABC:   #Luts =   865  Max Lvl =  34  Avg Lvl =  16.36  [   7.19 sec. at Pass 4]
ABC:   #Luts =   823  Max Lvl =  30  Avg Lvl =  15.57  [  10.77 sec. at Pass 5]
ABC:   #Luts =   802  Max Lvl =  29  Avg Lvl =  14.60  [   6.19 sec. at Pass 6]
ABC:   #Luts =   789  Max Lvl =  30  Avg Lvl =  15.57  [   8.19 sec. at Pass 7]
ABC:   #Luts =   780  Max Lvl =  31  Avg Lvl =  16.47  [   5.02 sec. at Pass 8]
ABC:   #Luts =   769  Max Lvl =  31  Avg Lvl =  16.52  [  10.79 sec. at Pass 9]
ABC:   #Luts =   760  Max Lvl =  32  Avg Lvl =  16.70  [   6.21 sec. at Pass 10]
ABC:   #Luts =   756  Max Lvl =  33  Avg Lvl =  17.63  [   9.60 sec. at Pass 11]
ABC:   #Luts =   740  Max Lvl =  32  Avg Lvl =  16.67  [   6.22 sec. at Pass 12]
ABC:   #Luts =   740  Max Lvl =  32  Avg Lvl =  16.67  [   8.23 sec. at Pass 13]
ABC:   #Luts =   735  Max Lvl =  34  Avg Lvl =  17.32  [   6.78 sec. at Pass 14]
ABC:   #Luts =   735  Max Lvl =  34  Avg Lvl =  17.32  [   9.43 sec. at Pass 15]
ABC:   #Luts =   729  Max Lvl =  32  Avg Lvl =  15.25  [   6.06 sec. at Pass 16]
ABC:   #Luts =   726  Max Lvl =  34  Avg Lvl =  17.40  [   8.36 sec. at Pass 17]
ABC:   #Luts =   720  Max Lvl =  34  Avg Lvl =  17.48  [   6.29 sec. at Pass 18]
ABC:   #Luts =   720  Max Lvl =  34  Avg Lvl =  17.48  [   9.76 sec. at Pass 19]
ABC:   #Luts =   712  Max Lvl =  35  Avg Lvl =  17.47  [   7.06 sec. at Pass 20]
ABC:   #Luts =   707  Max Lvl =  36  Avg Lvl =  18.55  [  10.44 sec. at Pass 21]
ABC:   #Luts =   705  Max Lvl =  36  Avg Lvl =  18.08  [   8.56 sec. at Pass 22]
ABC:   #Luts =   704  Max Lvl =  33  Avg Lvl =  16.23  [   9.80 sec. at Pass 23]
ABC:   #Luts =   702  Max Lvl =  35  Avg Lvl =  18.50  [   8.33 sec. at Pass 24]
ABC:   #Luts =   699  Max Lvl =  35  Avg Lvl =  17.60  [  11.13 sec. at Pass 25]
ABC:   #Luts =   698  Max Lvl =  35  Avg Lvl =  18.27  [   6.56 sec. at Pass 26]
ABC:   #Luts =   691  Max Lvl =  35  Avg Lvl =  17.48  [  10.79 sec. at Pass 27]
ABC:   #Luts =   690  Max Lvl =  35  Avg Lvl =  17.66  [   7.56 sec. at Pass 28]
ABC:   #Luts =   690  Max Lvl =  35  Avg Lvl =  17.66  [   8.61 sec. at Pass 29]
ABC:   #Luts =   689  Max Lvl =  37  Avg Lvl =  18.09  [   5.86 sec. at Pass 30]
ABC:   #Luts =   686  Max Lvl =  36  Avg Lvl =  18.86  [   6.96 sec. at Pass 31]
ABC:   #Luts =   686  Max Lvl =  33  Avg Lvl =  15.91  [   5.93 sec. at Pass 32]
ABC:   #Luts =   686  Max Lvl =  33  Avg Lvl =  15.91  [   7.18 sec. at Pass 33]
ABC:   #Luts =   686  Max Lvl =  33  Avg Lvl =  15.91  [   4.52 sec. at Pass 34]
ABC: + write_blif <abc-temp-dir>/output.blif 

3.27.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:      694
ABC RESULTS:        internal signals:     4084
ABC RESULTS:           input signals:      218
ABC RESULTS:          output signals:      240
Removing temp directory.

yosys> opt

3.28. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.28.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b14.

yosys> opt_merge -nomux

3.28.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b14'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.28.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b14..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

yosys> opt_reduce

3.28.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b14.
Performed a total of 0 changes.

yosys> opt_merge

3.28.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b14'.
Removed a total of 0 cells.

yosys> opt_dff

3.28.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.28.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b14..
Removed 0 unused cells and 1295 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.28.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module b14.

3.28.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.28.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b14..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

yosys> opt_reduce

3.28.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b14.
Performed a total of 0 changes.

yosys> opt_merge

3.28.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b14'.
Removed a total of 0 cells.

yosys> opt_dff

3.28.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.28.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b14..

yosys> opt_expr

3.28.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module b14.

3.28.16. Finished OPT passes. (There is nothing left to do.)

yosys> stat

3.29. Printing statistics.

=== b14 ===

   Number of wires:                686
   Number of wire bits:           1052
   Number of public wires:          15
   Number of public wire bits:     251
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                917
     $_DFFE_PP0N_                    1
     $_DFFE_PP0P_                  178
     $_DFF_PP0_                     39
     $lut                          691
     $mux                            8


yosys> shregmap -minlen 8 -maxlen 20

3.30. Executing SHREGMAP pass (map shift registers).
Converted 0 dff cells into 0 shift registers.

yosys> dfflegalize -cell $_DFF_?_ 0 -cell $_DFF_???_ 0 -cell $_DFFE_????_ 0 -cell $_DFFSR_???_ 0 -cell $_DFFSRE_????_ 0 -cell $_DLATCHSR_PPP_ 0

3.31. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

yosys> stat

3.32. Printing statistics.

=== b14 ===

   Number of wires:                686
   Number of wire bits:           1052
   Number of public wires:          15
   Number of public wire bits:     251
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                917
     $_DFFE_PP0N_                    1
     $_DFFE_PP0P_                  178
     $_DFF_PP0_                     39
     $lut                          691
     $mux                            8


yosys> techmap -map +/techmap.v -map +/rapidsilicon/genesis/ffs_map.v

3.33. Executing TECHMAP pass (map to technology primitives).

3.33.1. Executing Verilog-2005 frontend: /home/users/meri/Documents/workspace/clean/for_push/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/meri/Documents/workspace/clean/for_push/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.33.2. Executing Verilog-2005 frontend: /home/users/meri/Documents/workspace/clean/for_push/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/ffs_map.v
Parsing Verilog input from `/home/users/meri/Documents/workspace/clean/for_push/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/ffs_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP0N_'.
Generating RTLIL representation for module `\$_DFFE_PN0P_'.
Generating RTLIL representation for module `\$_DFFE_PN0N_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP1N_'.
Generating RTLIL representation for module `\$_DFFE_PN1P_'.
Generating RTLIL representation for module `\$_DFFE_PN1N_'.
Generating RTLIL representation for module `\$_DFFSR_PPP_'.
Generating RTLIL representation for module `\$_DFFSR_PNP_'.
Generating RTLIL representation for module `\$_DFFSR_PNN_'.
Generating RTLIL representation for module `\$_DFFSR_PPN_'.
Generating RTLIL representation for module `\$_DFFSR_NPP_'.
Generating RTLIL representation for module `\$_DFFSR_NNP_'.
Generating RTLIL representation for module `\$_DFFSR_NNN_'.
Generating RTLIL representation for module `\$_DFFSR_NPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PNPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPNP_'.
Generating RTLIL representation for module `\$_DFFSRE_PNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PNPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PPNN_'.
Generating RTLIL representation for module `\$_DFFSRE_PNNN_'.
Generating RTLIL representation for module `\$_DLATCHSR_PPP_'.
Generating RTLIL representation for module `\$_DLATCHSR_NPP_'.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP0N_'.
Generating RTLIL representation for module `\$_DFFE_NN0P_'.
Generating RTLIL representation for module `\$_DFFE_NN0N_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_NP1N_'.
Generating RTLIL representation for module `\$_DFFE_NN1P_'.
Generating RTLIL representation for module `\$_DFFE_NN1N_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNPP_'.
Generating RTLIL representation for module `\$_DFFSRE_NPNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPN_'.
Generating RTLIL representation for module `\$_DFFSRE_NNPN_'.
Generating RTLIL representation for module `\$_DFFSRE_NPNN_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNN_'.
Generating RTLIL representation for module `\$__SHREG_DFF_P_'.
Successfully finished Verilog frontend.

3.33.3. Continuing TECHMAP pass.
Using template \$_DFF_PP0_ for cells of type $_DFF_PP0_.
Using template \$_DFFE_PP0P_ for cells of type $_DFFE_PP0P_.
Using extmapper simplemap for cells of type $lut.
Using template \$_DFFE_PP0N_ for cells of type $_DFFE_PP0N_.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $logic_not.
No more expansions possible.
<suppressed ~1264 debug messages>

yosys> opt_expr -mux_undef

3.34. Executing OPT_EXPR pass (perform const folding).
Optimizing module b14.
<suppressed ~16148 debug messages>

yosys> simplemap

3.35. Executing SIMPLEMAP pass (map simple cells to gate primitives).

yosys> opt_expr

3.36. Executing OPT_EXPR pass (perform const folding).
Optimizing module b14.

yosys> opt_merge

3.37. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b14'.
<suppressed ~9969 debug messages>
Removed a total of 3323 cells.

yosys> opt_dff -nodffe -nosdff

3.38. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.39. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b14..
Removed 0 unused cells and 2572 unused wires.
<suppressed ~1 debug messages>

yosys> opt -nodffe -nosdff

3.40. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.40.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b14.
<suppressed ~559 debug messages>

yosys> opt_merge -nomux

3.40.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b14'.
<suppressed ~18 debug messages>
Removed a total of 6 cells.

yosys> opt_muxtree

3.40.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b14..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.40.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b14.
Performed a total of 0 changes.

yosys> opt_merge

3.40.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b14'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.40.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.40.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b14..
Removed 0 unused cells and 215 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.40.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module b14.

3.40.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.40.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b14..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.40.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b14.
Performed a total of 0 changes.

yosys> opt_merge

3.40.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b14'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.40.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.40.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b14..

yosys> opt_expr

3.40.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module b14.

3.40.16. Finished OPT passes. (There is nothing left to do.)

yosys> abc -script abc_tmp.scr

3.41. Executing ABC pass (technology mapping using ABC).

3.41.1. Extracting gate netlist of module `\b14' to `<abc-temp-dir>/input.blif'..
Extracted 3422 gates and 3641 wires to a netlist network with 217 inputs and 226 outputs.

3.41.1.1. Executing ABC.
Running ABC command: /home/users/meri/Documents/workspace/clean/for_push/yosys_verific_rs/logic_synthesis-rs/abc-rs/abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + source /home/users/meri/Documents/workspace/clean/for_push/yosys_verific_rs/result_23-03-2022T14-57-36/All_lut_synth_rs_ade.json/b14/abc_tmp.scr 
ABC:   #Luts =   686  Max Lvl =  33  Avg Lvl =  15.81  [   0.66 sec. at Pass 0]
ABC:   #Luts =   686  Max Lvl =  33  Avg Lvl =  15.81  [  21.27 sec. at Pass 1]
ABC:   #Luts =   685  Max Lvl =  34  Avg Lvl =  16.08  [   3.73 sec. at Pass 2]
ABC:   #Luts =   685  Max Lvl =  34  Avg Lvl =  16.08  [   6.28 sec. at Pass 3]
ABC:   #Luts =   685  Max Lvl =  34  Avg Lvl =  16.08  [   5.70 sec. at Pass 4]
ABC:   #Luts =   682  Max Lvl =  34  Avg Lvl =  16.28  [   8.84 sec. at Pass 5]
ABC:   #Luts =   676  Max Lvl =  34  Avg Lvl =  16.36  [   7.82 sec. at Pass 6]
ABC:   #Luts =   676  Max Lvl =  34  Avg Lvl =  16.36  [  12.69 sec. at Pass 7]
ABC:   #Luts =   674  Max Lvl =  35  Avg Lvl =  17.51  [   5.29 sec. at Pass 8]
ABC:   #Luts =   674  Max Lvl =  35  Avg Lvl =  17.51  [   9.77 sec. at Pass 9]
ABC:   #Luts =   673  Max Lvl =  36  Avg Lvl =  17.59  [   6.19 sec. at Pass 10]
ABC:   #Luts =   673  Max Lvl =  36  Avg Lvl =  17.59  [  11.02 sec. at Pass 11]
ABC:   #Luts =   671  Max Lvl =  34  Avg Lvl =  17.77  [   8.46 sec. at Pass 12]
ABC:   #Luts =   671  Max Lvl =  34  Avg Lvl =  17.77  [   8.94 sec. at Pass 13]
ABC:   #Luts =   670  Max Lvl =  34  Avg Lvl =  17.70  [   6.86 sec. at Pass 14]
ABC:   #Luts =   670  Max Lvl =  34  Avg Lvl =  17.70  [  10.23 sec. at Pass 15]
ABC:   #Luts =   669  Max Lvl =  36  Avg Lvl =  18.62  [   7.75 sec. at Pass 16]
ABC:   #Luts =   669  Max Lvl =  36  Avg Lvl =  18.62  [  10.69 sec. at Pass 17]
ABC:   #Luts =   668  Max Lvl =  35  Avg Lvl =  17.78  [   6.48 sec. at Pass 18]
ABC:   #Luts =   668  Max Lvl =  35  Avg Lvl =  17.78  [  11.85 sec. at Pass 19]
ABC:   #Luts =   666  Max Lvl =  35  Avg Lvl =  17.59  [   6.30 sec. at Pass 20]
ABC:   #Luts =   666  Max Lvl =  35  Avg Lvl =  17.59  [  10.11 sec. at Pass 21]
ABC:   #Luts =   666  Max Lvl =  35  Avg Lvl =  17.59  [   5.75 sec. at Pass 22]
ABC: + write_blif <abc-temp-dir>/output.blif 

3.41.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:      668
ABC RESULTS:        internal signals:     3198
ABC RESULTS:           input signals:      217
ABC RESULTS:          output signals:      226
Removing temp directory.

yosys> opt

3.42. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.42.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b14.

yosys> opt_merge -nomux

3.42.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b14'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.42.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b14..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.42.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b14.
Performed a total of 0 changes.

yosys> opt_merge

3.42.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b14'.
Removed a total of 0 cells.

yosys> opt_dff

3.42.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.42.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b14..
Removed 0 unused cells and 2559 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.42.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module b14.

3.42.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.42.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b14..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.42.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b14.
Performed a total of 0 changes.

yosys> opt_merge

3.42.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b14'.
Removed a total of 0 cells.

yosys> opt_dff

3.42.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.42.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b14..

yosys> opt_expr

3.42.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module b14.

3.42.16. Finished OPT passes. (There is nothing left to do.)

yosys> hierarchy -check

3.43. Executing HIERARCHY pass (managing design hierarchy).

3.43.1. Analyzing design hierarchy..
Top module:  \b14

3.43.2. Analyzing design hierarchy..
Top module:  \b14
Removed 0 unused modules.

yosys> stat

3.44. Printing statistics.

=== b14 ===

   Number of wires:                656
   Number of wire bits:            984
   Number of public wires:          15
   Number of public wire bits:     251
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                886
     $lut                          668
     dffsre                        218


yosys> opt_clean -purge

3.45. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b14..

yosys> write_verilog -noattr -nohex b14.verilog

3.46. Executing Verilog backend.

yosys> bmuxmap

3.46.1. Executing BMUXMAP pass.

yosys> demuxmap

3.46.2. Executing DEMUXMAP pass.

yosys> clean_zerowidth
Dumping module `\b14'.

End of script. Logfile hash: d7debb165d, CPU: user 26.96s system 0.25s, MEM: 63.81 MB peak
Yosys 0.14+36 (git sha1 4cd3e3b51, gcc 7.1.0 -fPIC -Os)
Time spent: 99% 2x abc (3245 sec), 0% 55x opt_expr (10 sec), ...
real 583.32
user 3018.66
sys 253.89
