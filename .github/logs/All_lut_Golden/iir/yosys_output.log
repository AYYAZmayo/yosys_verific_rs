
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.14+36 (git sha1 15a4e900b, gcc 7.1.0 -fPIC -Os)


-- Executing script file `yosys.ys' --
echo on

yosys> plugin -i synth-rs

yosys> read -verific

yosys> read -incdir .

yosys> verific -vlog-incdir .

1. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Jan22_SW_Release, released at Sat Jan 29 02:42:49 2022.

yosys> verilog_defaults -add -I.

yosys> read -vlog2k iir.v

yosys> verific -vlog2k iir.v

2. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Jan22_SW_Release, released at Sat Jan 29 02:42:49 2022.
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'iir.v'

yosys> synth_rs -top top -tech generic -goal area -no_dsp -no_bram -verilog top.verilog

3. Executing synth_rs pass.

yosys> hierarchy -check -top top

3.1. Executing HIERARCHY pass (managing design hierarchy).
VERIFIC-INFO [VERI-1018] iir.v:1: compiling module 'top'
VERIFIC-WARNING [VERI-1221] iir.v:62: 'params' should be on the sensitivity list
VERIFIC-WARNING [VERI-1221] iir.v:67: 'params' should be on the sensitivity list
VERIFIC-WARNING [VERI-1221] iir.v:72: 'params' should be on the sensitivity list
VERIFIC-WARNING [VERI-1221] iir.v:77: 'params' should be on the sensitivity list
VERIFIC-WARNING [VERI-1221] iir.v:82: 'params' should be on the sensitivity list
VERIFIC-WARNING [VERI-1221] iir.v:94: 'uk' should be on the sensitivity list
VERIFIC-WARNING [VERI-1209] iir.v:96: expression size 3 truncated to fit in target size 1
VERIFIC-WARNING [VERI-1221] iir.v:106: 'yo1' should be on the sensitivity list
VERIFIC-WARNING [VERI-1221] iir.v:106: 'yo2' should be on the sensitivity list
VERIFIC-WARNING [VERI-1221] iir.v:113: 'b0t' should be on the sensitivity list
VERIFIC-WARNING [VERI-1221] iir.v:113: 'b1t' should be on the sensitivity list
VERIFIC-WARNING [VERI-1221] iir.v:113: 'b2t' should be on the sensitivity list
VERIFIC-WARNING [VERI-1221] iir.v:118: 'uk' should be on the sensitivity list
VERIFIC-WARNING [VERI-1221] iir.v:119: 'uk1' should be on the sensitivity list
VERIFIC-WARNING [VERI-1221] iir.v:120: 'ysum' should be on the sensitivity list
VERIFIC-WARNING [VERI-1221] iir.v:120: 'utmp' should be on the sensitivity list
VERIFIC-WARNING [VERI-1221] iir.v:120: 'utmp' should be on the sensitivity list
VERIFIC-WARNING [VERI-1221] iir.v:120: 'utmp' should be on the sensitivity list
VERIFIC-WARNING [VERI-1221] iir.v:120: 'utmp' should be on the sensitivity list
VERIFIC-WARNING [VERI-1221] iir.v:120: 'utmp' should be on the sensitivity list
VERIFIC-WARNING [VERI-1221] iir.v:130: 'yk' should be on the sensitivity list
VERIFIC-WARNING [VERI-1221] iir.v:131: 'yk' should be on the sensitivity list
VERIFIC-WARNING [VERI-1221] iir.v:132: 'yk1' should be on the sensitivity list
VERIFIC-WARNING [VERI-1221] iir.v:137: 'dout' should be on the sensitivity list
VERIFIC-WARNING [VERI-1221] iir.v:138: 'yk1' should be on the sensitivity list
VERIFIC-WARNING [VERI-1209] iir.v:142: expression size 32 truncated to fit in target size 4
VERIFIC-WARNING [VERI-2580] iir.v:150: latch inferred for net 'obf_next_state[3]'
VERIFIC-WARNING [VERI-1209] iir.v:225: expression size 32 truncated to fit in target size 7
Importing module top.

3.1.1. Analyzing design hierarchy..
Top module:  \top

3.1.2. Analyzing design hierarchy..
Top module:  \top
Removed 0 unused modules.

yosys> proc

3.2. Executing PROC pass (convert processes to netlists).

yosys> proc_clean

3.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> proc_rmdead

3.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

yosys> proc_prune

3.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

yosys> proc_init

3.2.4. Executing PROC_INIT pass (extract init attributes).

yosys> proc_arst

3.2.5. Executing PROC_ARST pass (detect async resets in processes).

yosys> proc_mux

3.2.6. Executing PROC_MUX pass (convert decision trees to multiplexers).

yosys> proc_dlatch

3.2.7. Executing PROC_DLATCH pass (convert process syncs to latches).

yosys> proc_dff

3.2.8. Executing PROC_DFF pass (convert process syncs to FFs).

yosys> proc_memwr

3.2.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

yosys> proc_clean

3.2.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> opt_expr -keepdc

3.2.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~58 debug messages>

yosys> flatten

3.3. Executing FLATTEN pass (flatten design).

yosys> tribuf -logic

3.4. Executing TRIBUF pass.

yosys> opt_expr

3.5. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

yosys> opt_clean

3.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 101 unused wires.
<suppressed ~40 debug messages>

yosys> check

3.7. Executing CHECK pass (checking for obvious problems).
Checking module top...
Found and reported 0 problems.

yosys> deminout

3.8. Executing DEMINOUT pass (demote inout ports to input or output).

yosys> opt -nodffe -nosdff

3.9. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.9.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

yosys> opt_merge -nomux

3.9.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.9.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

yosys> opt_reduce

3.9.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.9.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.9.6. Executing OPT_DFF pass (perform DFF optimizations).
Changing const-value async load to async reset on $verific$ysum_reg$iir.v:206$280 ($aldff) from module top.
Changing const-value async load to async reset on $verific$yk_reg$iir.v:206$279 ($aldff) from module top.
Changing const-value async load to async reset on $verific$yk2_reg$iir.v:206$278 ($aldff) from module top.
Changing const-value async load to async reset on $verific$yk1_reg$iir.v:206$277 ($aldff) from module top.
Changing const-value async load to async reset on $verific$wait_counter_reg$iir.v:217$292 ($aldff) from module top.
Changing const-value async load to async reset on $verific$utmp_reg$iir.v:206$281 ($aldff) from module top.
Changing const-value async load to async reset on $verific$uk_reg$iir.v:206$274 ($aldff) from module top.
Changing const-value async load to async reset on $verific$uk2_reg$iir.v:206$276 ($aldff) from module top.
Changing const-value async load to async reset on $verific$uk1_reg$iir.v:206$275 ($aldff) from module top.
Removing never-active CLR on $verific$temp_ysum_reg$iir.v:150$145 ($dlatchsr) from module top.
Removing never-active ARST on $verific$temp_ysum_reg$iir.v:150$145 ($dlatchsr) from module top.
Removing never-active CLR on $verific$temp_yk_reg$iir.v:150$185 ($dlatchsr) from module top.
Removing never-active ARST on $verific$temp_yk_reg$iir.v:150$185 ($dlatchsr) from module top.
Removing never-active CLR on $verific$temp_yk2_reg$iir.v:150$137 ($dlatchsr) from module top.
Removing never-active ARST on $verific$temp_yk2_reg$iir.v:150$137 ($dlatchsr) from module top.
Removing never-active CLR on $verific$temp_yk1_reg$iir.v:150$106 ($dlatchsr) from module top.
Removing never-active ARST on $verific$temp_yk1_reg$iir.v:150$106 ($dlatchsr) from module top.
Removing never-active CLR on $verific$temp_wait_counter_reg$iir.v:150$152 ($dlatchsr) from module top.
Removing never-active ARST on $verific$temp_wait_counter_reg$iir.v:150$152 ($dlatchsr) from module top.
Removing never-active CLR on $verific$temp_utmp_reg$iir.v:150$175 ($dlatchsr) from module top.
Removing never-active ARST on $verific$temp_utmp_reg$iir.v:150$175 ($dlatchsr) from module top.
Removing never-active CLR on $verific$temp_uk_reg$iir.v:150$89 ($dlatchsr) from module top.
Removing never-active ARST on $verific$temp_uk_reg$iir.v:150$89 ($dlatchsr) from module top.
Removing never-active CLR on $verific$temp_uk2_reg$iir.v:150$161 ($dlatchsr) from module top.
Removing never-active ARST on $verific$temp_uk2_reg$iir.v:150$161 ($dlatchsr) from module top.
Removing never-active CLR on $verific$temp_uk1_reg$iir.v:150$193 ($dlatchsr) from module top.
Removing never-active ARST on $verific$temp_uk1_reg$iir.v:150$193 ($dlatchsr) from module top.
Removing never-active CLR on $verific$temp_dout_reg$iir.v:150$113 ($dlatchsr) from module top.
Removing never-active ARST on $verific$temp_dout_reg$iir.v:150$113 ($dlatchsr) from module top.
Removing never-active CLR on $verific$temp_b2_reg$iir.v:150$204 ($dlatchsr) from module top.
Removing never-active ARST on $verific$temp_b2_reg$iir.v:150$204 ($dlatchsr) from module top.
Removing never-active CLR on $verific$temp_b1_reg$iir.v:150$212 ($dlatchsr) from module top.
Removing never-active ARST on $verific$temp_b1_reg$iir.v:150$212 ($dlatchsr) from module top.
Removing never-active CLR on $verific$temp_b0_reg$iir.v:150$220 ($dlatchsr) from module top.
Removing never-active ARST on $verific$temp_b0_reg$iir.v:150$220 ($dlatchsr) from module top.
Removing never-active CLR on $verific$temp_a2_reg$iir.v:150$228 ($dlatchsr) from module top.
Removing never-active ARST on $verific$temp_a2_reg$iir.v:150$228 ($dlatchsr) from module top.
Removing never-active CLR on $verific$temp_a1_reg$iir.v:150$168 ($dlatchsr) from module top.
Removing never-active ARST on $verific$temp_a1_reg$iir.v:150$168 ($dlatchsr) from module top.
Changing const-value async load to async reset on $verific$ready_reg$iir.v:206$289 ($aldff) from module top.
Changing const-value async load to async reset on $verific$obf_state_reg$iir.v:206$288 ($aldff) from module top.
Removing never-active CLR on $verific$obf_next_state_reg$iir.v:150$120 ($dlatchsr) from module top.
Removing never-active ARST on $verific$obf_next_state_reg$iir.v:150$120 ($dlatchsr) from module top.
Removing never-active async load on $verific$finite_counter_reg$iir.v:228$299 ($aldff) from module top.
Changing const-value async load to async reset on $verific$dout_reg$iir.v:206$287 ($aldff) from module top.
Changing const-value async load to async reset on $verific$b2_reg$iir.v:206$286 ($aldff) from module top.
Changing const-value async load to async reset on $verific$b1_reg$iir.v:206$285 ($aldff) from module top.
Changing const-value async load to async reset on $verific$b0_reg$iir.v:206$284 ($aldff) from module top.
Changing const-value async load to async reset on $verific$a2_reg$iir.v:206$283 ($aldff) from module top.
Changing const-value async load to async reset on $verific$a1_reg$iir.v:206$282 ($aldff) from module top.
Setting constant 0-bit at position 0 on $verific$temp_ready_reg$iir.v:150$200 ($dlatch) from module top.

yosys> opt_clean

3.9.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

yosys> opt_expr

3.9.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.9.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.9.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

yosys> opt_reduce

3.9.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.9.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.9.13. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on $verific$ready_reg$iir.v:206$289 ($adff) from module top.

yosys> opt_clean

3.9.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

yosys> opt_expr

3.9.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.9.16. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.9.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

yosys> opt_reduce

3.9.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.9.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.9.20. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.9.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

yosys> opt_expr

3.9.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.9.23. Finished OPT passes. (There is nothing left to do.)

yosys> fsm

3.10. Executing FSM pass (extract and optimize FSM).

yosys> fsm_detect

3.10.1. Executing FSM_DETECT pass (finding FSMs in design).

yosys> fsm_extract

3.10.2. Executing FSM_EXTRACT pass (extracting FSM from design).

yosys> fsm_opt

3.10.3. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> opt_clean

3.10.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

yosys> fsm_opt

3.10.5. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> fsm_recode

3.10.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

yosys> fsm_info

3.10.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

yosys> fsm_map

3.10.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

yosys> opt -sat

3.11. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

yosys> opt_merge -nomux

3.11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.11.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

yosys> opt_reduce

3.11.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.11.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.11.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $verific$finite_counter_reg$iir.v:228$299 ($dff) from module top (D = $verific$n2523$82, Q = \finite_counter, rval = 7'1100100).
Adding EN signal on $auto$ff.cc:262:slice$308 ($sdff) from module top (D = $verific$n2498$79 [6:0], Q = \finite_counter).

yosys> opt_clean

3.11.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 2 unused cells and 2 unused wires.
<suppressed ~3 debug messages>

yosys> opt_expr

3.11.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.11.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.11.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

yosys> opt_reduce

3.11.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.11.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.11.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.11.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

yosys> opt_expr

3.11.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.11.16. Finished OPT passes. (There is nothing left to do.)

yosys> wreduce -keepdc

3.12. Executing WREDUCE pass (reducing word size of cells).
Removed top 15 bits (of 29) from port A of cell top.$verific$add_13$iir.v:106$97 ($add).
Removed top 15 bits (of 29) from port B of cell top.$verific$add_13$iir.v:106$97 ($add).
Removed top 14 bits (of 29) from port Y of cell top.$verific$add_13$iir.v:106$97 ($add).
Removed top 1 bits (of 5) from port A of cell top.$verific$sub_32$iir.v:142$129 ($sub).
Removed top 4 bits (of 5) from port B of cell top.$verific$sub_32$iir.v:142$129 ($sub).
Removed top 1 bits (of 5) from port Y of cell top.$verific$sub_32$iir.v:142$129 ($sub).
Removed top 14 bits (of 29) from FF cell top.$verific$temp_ysum_reg$iir.v:150$145 ($dlatch).
Removed top 1 bits (of 24) from port Y of cell top.$verific$mult_768$iir.v:161$239 ($mul).
Removed top 1 bits (of 24) from port Y of cell top.$verific$mult_770$iir.v:162$242 ($mul).
Removed top 1 bits (of 24) from port Y of cell top.$verific$mult_772$iir.v:163$245 ($mul).
Removed top 14 bits (of 29) from FF cell top.$verific$ysum_reg$iir.v:206$280 ($adff).
Removed top 1 bits (of 8) from port A of cell top.$verific$sub_832$iir.v:225$295 ($sub).
Removed top 7 bits (of 8) from port B of cell top.$verific$sub_832$iir.v:225$295 ($sub).
Removed top 1 bits (of 8) from port Y of cell top.$verific$sub_832$iir.v:225$295 ($sub).
Removed top 12 bits (of 27) from port A of cell top.$verific$add_20$iir.v:120$103 ($add).
Removed top 14 bits (of 29) from wire top.$verific$n121$31.
Removed top 1 bits (of 8) from wire top.$verific$n2498$79.
Removed top 1 bits (of 2) from wire top.$verific$n4$26.
Removed top 2 bits (of 3) from wire top.$verific$n400$43.
Removed top 1 bits (of 5) from wire top.$verific$n447$46.
Removed top 14 bits (of 29) from wire top.temp_ysum.
Removed top 15 bits (of 32) from wire top.yo1.
Removed top 15 bits (of 32) from wire top.yo2.
Removed top 14 bits (of 29) from wire top.ysum.

yosys> peepopt

3.13. Executing PEEPOPT pass (run peephole optimizers).

yosys> pmuxtree

3.14. Executing PMUXTREE pass.

yosys> opt_clean

3.15. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 14 unused wires.
<suppressed ~1 debug messages>

yosys> techmap

3.16. Executing TECHMAP pass (map to technology primitives).

3.16.1. Executing Verilog-2005 frontend: /home/users/aram/Workspace/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/aram/Workspace/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.16.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $dlatch.
Using extmapper simplemap for cells of type $mux.
Running "alumacc" on wrapper $extern:wrap:$add:A_SIGNED=0:A_WIDTH=14:B_SIGNED=0:B_WIDTH=14:Y_WIDTH=15:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$add:A_SIGNED=0:A_WIDTH=14:B_SIGNED=0:B_WIDTH=14:Y_WIDTH=15:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$add:A_SIGNED=0:A_WIDTH=14:B_SIGNED=0:B_WIDTH=14:Y_WIDTH=15:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$add:A_SIGNED=0:A_WIDTH=23:B_SIGNED=0:B_WIDTH=23:Y_WIDTH=23:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$add:A_SIGNED=0:A_WIDTH=23:B_SIGNED=0:B_WIDTH=23:Y_WIDTH=23:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$add:A_SIGNED=0:A_WIDTH=23:B_SIGNED=0:B_WIDTH=23:Y_WIDTH=23:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$add:A_SIGNED=0:A_WIDTH=15:B_SIGNED=0:B_WIDTH=27:Y_WIDTH=27:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$add:A_SIGNED=0:A_WIDTH=15:B_SIGNED=0:B_WIDTH=27:Y_WIDTH=27:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$add:A_SIGNED=0:A_WIDTH=15:B_SIGNED=0:B_WIDTH=27:Y_WIDTH=27:394426c56d1a028ba8fdd5469b163e04011def47.
Using extmapper simplemap for cells of type $logic_not.
Running "alumacc" on wrapper $extern:wrap:$sub:A_SIGNED=0:A_WIDTH=4:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=4:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:A_SIGNED=0:A_WIDTH=4:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=4:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:A_SIGNED=0:A_WIDTH=4:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=4:394426c56d1a028ba8fdd5469b163e04011def47.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $bmux.
Running "alumacc" on wrapper $extern:wrap:$add:A_SIGNED=0:A_WIDTH=16:B_SIGNED=0:B_WIDTH=16:Y_WIDTH=17:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$add:A_SIGNED=0:A_WIDTH=16:B_SIGNED=0:B_WIDTH=16:Y_WIDTH=17:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$add:A_SIGNED=0:A_WIDTH=16:B_SIGNED=0:B_WIDTH=16:Y_WIDTH=17:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$mul:A_SIGNED=0:A_WIDTH=8:B_SIGNED=0:B_WIDTH=16:Y_WIDTH=23:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$mul:A_SIGNED=0:A_WIDTH=8:B_SIGNED=0:B_WIDTH=16:Y_WIDTH=23:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$mul:A_SIGNED=0:A_WIDTH=8:B_SIGNED=0:B_WIDTH=16:Y_WIDTH=23:394426c56d1a028ba8fdd5469b163e04011def47.
Using extmapper simplemap for cells of type $adff.
Running "alumacc" on wrapper $extern:wrap:$sub:A_SIGNED=0:A_WIDTH=7:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=7:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:A_SIGNED=0:A_WIDTH=7:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=7:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:A_SIGNED=0:A_WIDTH=7:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=7:394426c56d1a028ba8fdd5469b163e04011def47.
Using extmapper simplemap for cells of type $sdffe.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $and.
Using template $paramod$081ba1a4a7201ecdb44563d3c3bd7013d1ebf4eb\_90_alu for cells of type $alu.
Using template $paramod$b6ce0c8955977b221a89650d58ba8da4bf595cb5\_90_alu for cells of type $alu.
Using template $paramod$448756c9a9dfaa49080ce4b90c6cc182883e181f\_90_alu for cells of type $alu.
Using template $paramod$ce2c825c700802cb47978a6b7889f198e64340ac\_90_alu for cells of type $alu.
Using template $paramod$8742280fdebca84e1c87f2a86ed84f62d558f4cc\_90_alu for cells of type $alu.
Using extmapper maccmap for cells of type $macc.
  add \b0 * \uk (16x8 bits, unsigned)
  add \b1 * \uk1 (16x8 bits, unsigned)
  add \b2 * \uk2 (16x8 bits, unsigned)
Using template $paramod$10ed987432f06055e5279101f9ec60a49861b43c\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010001 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001111 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010111 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011011 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000100 for cells of type $lcu.
Using template $paramod\_90_fa\WIDTH=32'00000000000000000000000000010111 for cells of type $fa.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000111 for cells of type $lcu.
Using extmapper simplemap for cells of type $or.
No more expansions possible.
<suppressed ~2417 debug messages>

yosys> alumacc

3.17. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module top:
  created 0 $alu and 0 $macc cells.

yosys> opt

3.18. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~1539 debug messages>

yosys> opt_merge -nomux

3.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~108 debug messages>
Removed a total of 36 cells.

yosys> opt_muxtree

3.18.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.18.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.18.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_dff

3.18.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.18.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 254 unused cells and 636 unused wires.
<suppressed ~255 debug messages>

yosys> opt_expr

3.18.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.18.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.18.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.18.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.18.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_dff

3.18.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.18.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

yosys> opt_expr

3.18.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.18.16. Finished OPT passes. (There is nothing left to do.)

yosys> memory -nomap

3.19. Executing MEMORY pass.

yosys> opt_mem

3.19.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

yosys> opt_mem_priority

3.19.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

yosys> opt_mem_feedback

3.19.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

yosys> memory_dff

3.19.4. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

yosys> opt_clean

3.19.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

yosys> memory_share

3.19.6. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

yosys> opt_mem_widen

3.19.7. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

yosys> opt_clean

3.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

yosys> memory_collect

3.19.9. Executing MEMORY_COLLECT pass (generating $mem cells).

yosys> opt_clean

3.20. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

yosys> opt_expr -mux_undef

3.21. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~22 debug messages>

yosys> simplemap

3.22. Executing SIMPLEMAP pass (map simple cells to gate primitives).

yosys> opt_expr

3.23. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

yosys> opt_merge

3.24. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

yosys> opt_dff -nodffe -nosdff

3.25. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.26. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 4 unused wires.
<suppressed ~1 debug messages>

yosys> opt -nodffe -nosdff

3.27. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.27.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

yosys> opt_merge -nomux

3.27.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.27.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.27.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.27.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.27.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.27.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

yosys> opt_expr

3.27.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.27.9. Finished OPT passes. (There is nothing left to do.)

yosys> opt -fast -full

3.28. Executing OPT pass (performing simple optimizations).

yosys> opt_expr -full

3.28.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~46 debug messages>

yosys> opt_merge

3.28.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_dff

3.28.3. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.28.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

3.28.5. Finished fast OPT passes.

yosys> memory_map

3.29. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

yosys> opt -full

3.30. Executing OPT pass (performing simple optimizations).

yosys> opt_expr -full

3.30.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

yosys> opt_merge -nomux

3.30.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.30.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce -full

3.30.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.30.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_share

3.30.6. Executing OPT_SHARE pass.

yosys> opt_dff

3.30.7. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.30.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

yosys> opt_expr -full

3.30.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.30.10. Finished OPT passes. (There is nothing left to do.)

yosys> techmap

3.31. Executing TECHMAP pass (map to technology primitives).

3.31.1. Executing Verilog-2005 frontend: /home/users/aram/Workspace/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/aram/Workspace/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.31.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~71 debug messages>

yosys> opt

3.32. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.32.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

yosys> opt_merge -nomux

3.32.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.32.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.32.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.32.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_dff

3.32.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.32.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

yosys> opt_expr

3.32.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.32.9. Finished OPT passes. (There is nothing left to do.)

yosys> abc -script abc_tmp.scr

3.33. Executing ABC pass (technology mapping using ABC).

3.33.1. Extracting gate netlist of module `\top' to `<abc-temp-dir>/input.blif'..
Extracted 2998 gates and 3223 wires to a netlist network with 223 inputs and 115 outputs.

3.33.1.1. Executing ABC.
Running ABC command: /home/users/aram/Workspace/yosys_verific_rs/logic_synthesis-rs/abc-rs/abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + source /home/users/aram/Workspace/yosys_verific_rs/result_09-03-2022T20-36-44/All_lut_synth_rs_area.json/iir/abc_tmp.scr 
ABC: netlist  : i/o =    223/    115  and =    7696  lev =   68 (18.75)  mem = 0.10 MB
ABC: Mapping (K=6)  :  lut =    952  edge =    3831  lev =   25 (6.68)  mem = 0.05 MB
ABC: netlist  : i/o =    223/    115  and =    8120  lev =   73 (19.11)  mem = 0.10 MB
ABC: Mapping (K=6)  :  lut =    857  edge =    3657  lev =   24 (5.97)  mem = 0.05 MB
ABC: netlist  : i/o =    223/    115  and =    8075  lev =   70 (18.97)  mem = 0.10 MB
ABC: Mapping (K=6)  :  lut =    861  edge =    3639  lev =   24 (6.08)  mem = 0.05 MB
ABC: netlist  : i/o =    223/    115  and =    5865  lev =   60 (18.46)  mem = 0.08 MB
ABC: Mapping (K=6)  :  lut =    860  edge =    3653  lev =   25 (5.97)  mem = 0.04 MB
ABC: netlist  : i/o =    223/    115  and =    8226  lev =   76 (19.79)  mem = 0.10 MB
ABC: Mapping (K=6)  :  lut =    882  edge =    3782  lev =   26 (6.22)  mem = 0.05 MB
ABC: netlist  : i/o =    223/    115  and =    8118  lev =   77 (18.76)  mem = 0.14 MB
ABC: Mapping (K=6)  :  lut =    788  edge =    3766  lev =   22 (5.66)  mem = 0.05 MB
ABC: netlist  : i/o =    223/    115  and =    8234  lev =   72 (18.84)  mem = 0.14 MB
ABC: Mapping (K=6)  :  lut =    787  edge =    3743  lev =   21 (5.82)  mem = 0.05 MB
ABC: netlist  : i/o =    223/    115  and =    8252  lev =   72 (18.90)  mem = 0.14 MB
ABC: Mapping (K=6)  :  lut =    796  edge =    3753  lev =   20 (5.42)  mem = 0.05 MB
ABC: netlist  : i/o =    223/    115  and =    9787  lev =   79 (19.61)  mem = 0.16 MB
ABC: Mapping (K=6)  :  lut =    810  edge =    3826  lev =   24 (5.77)  mem = 0.06 MB
ABC: netlist  : i/o =    223/    115  and =    8248  lev =   74 (19.17)  mem = 0.14 MB
ABC: Mapping (K=6)  :  lut =    787  edge =    3773  lev =   19 (5.36)  mem = 0.05 MB
ABC: netlist  : i/o =    223/    115  and =    8327  lev =   77 (19.39)  mem = 0.14 MB
ABC: Mapping (K=6)  :  lut =    791  edge =    3772  lev =   21 (5.46)  mem = 0.05 MB
ABC: netlist  : i/o =    223/    115  and =    8640  lev =   75 (19.16)  mem = 0.14 MB
ABC: Mapping (K=6)  :  lut =    784  edge =    3772  lev =   20 (5.43)  mem = 0.05 MB
ABC: netlist  : i/o =    223/    115  and =    8661  lev =   76 (19.46)  mem = 0.14 MB
ABC: Mapping (K=6)  :  lut =    790  edge =    3779  lev =   19 (5.30)  mem = 0.05 MB
ABC: netlist  : i/o =    223/    115  and =    8640  lev =   75 (19.16)  mem = 0.11 MB
ABC: Mapping (K=6)  :  lut =    784  edge =    3772  lev =   20 (5.43)  mem = 0.05 MB
ABC: netlist  : i/o =    223/    115  and =    8640  lev =   75 (19.16)  mem = 0.14 MB
ABC: Mapping (K=6)  :  lut =    784  edge =    3772  lev =   20 (5.43)  mem = 0.05 MB
ABC: netlist  : i/o =    223/    115  and =    8829  lev =   75 (19.59)  mem = 0.11 MB
ABC: Mapping (K=6)  :  lut =    784  edge =    3772  lev =   20 (5.43)  mem = 0.06 MB
ABC: + write_blif <abc-temp-dir>/output.blif 

3.33.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:      787
ABC RESULTS:        internal signals:     2885
ABC RESULTS:           input signals:      223
ABC RESULTS:          output signals:      115
Removing temp directory.

yosys> opt

3.34. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.34.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

yosys> opt_merge -nomux

3.34.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~12 debug messages>
Removed a total of 4 cells.

yosys> opt_muxtree

3.34.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.34.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.34.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_dff

3.34.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.34.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 959 unused wires.
<suppressed ~7 debug messages>

yosys> opt_expr

3.34.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.34.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.34.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.34.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.34.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_dff

3.34.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.34.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

yosys> opt_expr

3.34.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.34.16. Finished OPT passes. (There is nothing left to do.)

yosys> hierarchy -check

3.35. Executing HIERARCHY pass (managing design hierarchy).

3.35.1. Analyzing design hierarchy..
Top module:  \top

3.35.2. Analyzing design hierarchy..
Top module:  \top
Removed 0 unused modules.

yosys> stat

3.36. Printing statistics.

=== top ===

   Number of wires:                778
   Number of wire bits:           1358
   Number of public wires:          46
   Number of public wire bits:     508
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1199
     $_DFF_PP0_                    202
     $_DFF_PP1_                      1
     $_DFF_P_                        1
     $_DLATCH_P_                   203
     $_SDFFE_PP0P_                   4
     $_SDFFE_PP1P_                   3
     $lut                          785


yosys> opt_clean -purge

3.37. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 3 unused wires.
<suppressed ~3 debug messages>

yosys> write_verilog -noattr -nohex top.verilog

3.38. Executing Verilog backend.

yosys> bmuxmap

3.38.1. Executing BMUXMAP pass.

yosys> demuxmap

3.38.2. Executing DEMUXMAP pass.

yosys> clean_zerowidth
Dumping module `\top'.

Warnings: 24 unique messages, 28 total
End of script. Logfile hash: 32735e77db, CPU: user 5.35s system 0.04s, MEM: 35.43 MB peak
Yosys 0.14+36 (git sha1 15a4e900b, gcc 7.1.0 -fPIC -Os)
Time spent: 82% 1x abc (25 sec), 6% 36x opt_expr (2 sec), ...
