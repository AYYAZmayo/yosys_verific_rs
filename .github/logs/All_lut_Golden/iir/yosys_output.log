
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.16+6 (git sha1 0c82fb7e3, gcc 9.1.0 -fPIC -Os)


-- Executing script file `yosys.ys' --
echo on

yosys> plugin -i synth-rs

yosys> read -verific

yosys> read -incdir .

yosys> verific -vlog-incdir .

1. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Mar22_SW_Release, released at Fri Apr  1 00:31:54 2022.

yosys> verilog_defaults -add -I.

yosys> read -vlog2k iir.v

yosys> verific -vlog2k iir.v

2. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Mar22_SW_Release, released at Fri Apr  1 00:31:54 2022.
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'iir.v'

yosys> synth_rs -top top -tech genesis -goal area -de -no_dsp -no_bram -verilog synthesized.v

3. Executing synth_rs pass: v0.2.36

yosys> read_verilog -lib -specify -nomem2reg +/rapidsilicon/common/cells_sim.v +/rapidsilicon/genesis/cells_sim.v

3.1. Executing Verilog-2005 frontend: /home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v
Parsing Verilog input from `/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\inv'.
Generating RTLIL representation for module `\buff'.
Generating RTLIL representation for module `\logic_0'.
Generating RTLIL representation for module `\logic_1'.
Generating RTLIL representation for module `\gclkbuff'.
Successfully finished Verilog frontend.

3.2. Executing Verilog-2005 frontend: /home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/cells_sim.v
Parsing Verilog input from `/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\dffsre'.
Generating RTLIL representation for module `\dffnsre'.
Generating RTLIL representation for module `\latchsre'.
Generating RTLIL representation for module `\latchnsre'.
Generating RTLIL representation for module `\io_scff'.
Generating RTLIL representation for module `\scff'.
Generating RTLIL representation for module `\sh_dff'.
Generating RTLIL representation for module `\adder_carry'.
Generating RTLIL representation for module `\sdffr'.
Generating RTLIL representation for module `\sdffs'.
Successfully finished Verilog frontend.

yosys> hierarchy -check -top top

3.3. Executing HIERARCHY pass (managing design hierarchy).
VERIFIC-INFO [VERI-1018] iir.v:1: compiling module 'top'
VERIFIC-WARNING [VERI-1221] iir.v:62: 'params' should be on the sensitivity list
VERIFIC-WARNING [VERI-1221] iir.v:67: 'params' should be on the sensitivity list
VERIFIC-WARNING [VERI-1221] iir.v:72: 'params' should be on the sensitivity list
VERIFIC-WARNING [VERI-1221] iir.v:77: 'params' should be on the sensitivity list
VERIFIC-WARNING [VERI-1221] iir.v:82: 'params' should be on the sensitivity list
VERIFIC-WARNING [VERI-1221] iir.v:94: 'uk' should be on the sensitivity list
VERIFIC-WARNING [VERI-1209] iir.v:96: expression size 3 truncated to fit in target size 1
VERIFIC-WARNING [VERI-1221] iir.v:106: 'yo1' should be on the sensitivity list
VERIFIC-WARNING [VERI-1221] iir.v:106: 'yo2' should be on the sensitivity list
VERIFIC-WARNING [VERI-1221] iir.v:113: 'b0t' should be on the sensitivity list
VERIFIC-WARNING [VERI-1221] iir.v:113: 'b1t' should be on the sensitivity list
VERIFIC-WARNING [VERI-1221] iir.v:113: 'b2t' should be on the sensitivity list
VERIFIC-WARNING [VERI-1221] iir.v:118: 'uk' should be on the sensitivity list
VERIFIC-WARNING [VERI-1221] iir.v:119: 'uk1' should be on the sensitivity list
VERIFIC-WARNING [VERI-1221] iir.v:120: 'ysum' should be on the sensitivity list
VERIFIC-WARNING [VERI-1221] iir.v:120: 'utmp' should be on the sensitivity list
VERIFIC-WARNING [VERI-1221] iir.v:120: 'utmp' should be on the sensitivity list
VERIFIC-WARNING [VERI-1221] iir.v:120: 'utmp' should be on the sensitivity list
VERIFIC-WARNING [VERI-1221] iir.v:120: 'utmp' should be on the sensitivity list
VERIFIC-WARNING [VERI-1221] iir.v:120: 'utmp' should be on the sensitivity list
VERIFIC-WARNING [VERI-1221] iir.v:130: 'yk' should be on the sensitivity list
VERIFIC-WARNING [VERI-1221] iir.v:131: 'yk' should be on the sensitivity list
VERIFIC-WARNING [VERI-1221] iir.v:132: 'yk1' should be on the sensitivity list
VERIFIC-WARNING [VERI-1221] iir.v:137: 'dout' should be on the sensitivity list
VERIFIC-WARNING [VERI-1221] iir.v:138: 'yk1' should be on the sensitivity list
VERIFIC-WARNING [VERI-1209] iir.v:142: expression size 32 truncated to fit in target size 4
VERIFIC-WARNING [VERI-2580] iir.v:150: latch inferred for net 'obf_next_state[3]'
VERIFIC-WARNING [VERI-1209] iir.v:225: expression size 32 truncated to fit in target size 7
Importing module top.

3.3.1. Analyzing design hierarchy..
Top module:  \top

3.3.2. Analyzing design hierarchy..
Top module:  \top
Removed 0 unused modules.

yosys> proc

3.4. Executing PROC pass (convert processes to netlists).

yosys> proc_clean

3.4.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> proc_rmdead

3.4.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

yosys> proc_prune

3.4.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

yosys> proc_init

3.4.4. Executing PROC_INIT pass (extract init attributes).

yosys> proc_arst

3.4.5. Executing PROC_ARST pass (detect async resets in processes).

yosys> proc_mux

3.4.6. Executing PROC_MUX pass (convert decision trees to multiplexers).

yosys> proc_dlatch

3.4.7. Executing PROC_DLATCH pass (convert process syncs to latches).

yosys> proc_dff

3.4.8. Executing PROC_DFF pass (convert process syncs to FFs).

yosys> proc_memwr

3.4.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

yosys> proc_clean

3.4.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> opt_expr -keepdc

3.4.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~58 debug messages>

yosys> flatten

3.5. Executing FLATTEN pass (flatten design).

yosys> tribuf -logic

3.6. Executing TRIBUF pass.

yosys> deminout

3.7. Executing DEMINOUT pass (demote inout ports to input or output).

yosys> opt_expr

3.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

yosys> opt_clean

3.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 101 unused wires.
<suppressed ~40 debug messages>

yosys> check

3.10. Executing CHECK pass (checking for obvious problems).
Checking module top...
Found and reported 0 problems.

yosys> opt -nodffe -nosdff

3.11. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

yosys> opt_merge -nomux

3.11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.11.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

yosys> opt_reduce

3.11.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.11.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.11.6. Executing OPT_DFF pass (perform DFF optimizations).
Changing const-value async load to async reset on $verific$ysum_reg$iir.v:206$280 ($aldff) from module top.
Changing const-value async load to async reset on $verific$yk_reg$iir.v:206$279 ($aldff) from module top.
Changing const-value async load to async reset on $verific$yk2_reg$iir.v:206$278 ($aldff) from module top.
Changing const-value async load to async reset on $verific$yk1_reg$iir.v:206$277 ($aldff) from module top.
Changing const-value async load to async reset on $verific$wait_counter_reg$iir.v:217$292 ($aldff) from module top.
Changing const-value async load to async reset on $verific$utmp_reg$iir.v:206$281 ($aldff) from module top.
Changing const-value async load to async reset on $verific$uk_reg$iir.v:206$274 ($aldff) from module top.
Changing const-value async load to async reset on $verific$uk2_reg$iir.v:206$276 ($aldff) from module top.
Changing const-value async load to async reset on $verific$uk1_reg$iir.v:206$275 ($aldff) from module top.
Removing never-active CLR on $verific$temp_ysum_reg$iir.v:150$145 ($dlatchsr) from module top.
Removing never-active ARST on $verific$temp_ysum_reg$iir.v:150$145 ($dlatchsr) from module top.
Removing never-active CLR on $verific$temp_yk_reg$iir.v:150$185 ($dlatchsr) from module top.
Removing never-active ARST on $verific$temp_yk_reg$iir.v:150$185 ($dlatchsr) from module top.
Removing never-active CLR on $verific$temp_yk2_reg$iir.v:150$137 ($dlatchsr) from module top.
Removing never-active ARST on $verific$temp_yk2_reg$iir.v:150$137 ($dlatchsr) from module top.
Removing never-active CLR on $verific$temp_yk1_reg$iir.v:150$106 ($dlatchsr) from module top.
Removing never-active ARST on $verific$temp_yk1_reg$iir.v:150$106 ($dlatchsr) from module top.
Removing never-active CLR on $verific$temp_wait_counter_reg$iir.v:150$152 ($dlatchsr) from module top.
Removing never-active ARST on $verific$temp_wait_counter_reg$iir.v:150$152 ($dlatchsr) from module top.
Removing never-active CLR on $verific$temp_utmp_reg$iir.v:150$175 ($dlatchsr) from module top.
Removing never-active ARST on $verific$temp_utmp_reg$iir.v:150$175 ($dlatchsr) from module top.
Removing never-active CLR on $verific$temp_uk_reg$iir.v:150$89 ($dlatchsr) from module top.
Removing never-active ARST on $verific$temp_uk_reg$iir.v:150$89 ($dlatchsr) from module top.
Removing never-active CLR on $verific$temp_uk2_reg$iir.v:150$161 ($dlatchsr) from module top.
Removing never-active ARST on $verific$temp_uk2_reg$iir.v:150$161 ($dlatchsr) from module top.
Removing never-active CLR on $verific$temp_uk1_reg$iir.v:150$193 ($dlatchsr) from module top.
Removing never-active ARST on $verific$temp_uk1_reg$iir.v:150$193 ($dlatchsr) from module top.
Removing never-active CLR on $verific$temp_dout_reg$iir.v:150$113 ($dlatchsr) from module top.
Removing never-active ARST on $verific$temp_dout_reg$iir.v:150$113 ($dlatchsr) from module top.
Removing never-active CLR on $verific$temp_b2_reg$iir.v:150$204 ($dlatchsr) from module top.
Removing never-active ARST on $verific$temp_b2_reg$iir.v:150$204 ($dlatchsr) from module top.
Removing never-active CLR on $verific$temp_b1_reg$iir.v:150$212 ($dlatchsr) from module top.
Removing never-active ARST on $verific$temp_b1_reg$iir.v:150$212 ($dlatchsr) from module top.
Removing never-active CLR on $verific$temp_b0_reg$iir.v:150$220 ($dlatchsr) from module top.
Removing never-active ARST on $verific$temp_b0_reg$iir.v:150$220 ($dlatchsr) from module top.
Removing never-active CLR on $verific$temp_a2_reg$iir.v:150$228 ($dlatchsr) from module top.
Removing never-active ARST on $verific$temp_a2_reg$iir.v:150$228 ($dlatchsr) from module top.
Removing never-active CLR on $verific$temp_a1_reg$iir.v:150$168 ($dlatchsr) from module top.
Removing never-active ARST on $verific$temp_a1_reg$iir.v:150$168 ($dlatchsr) from module top.
Changing const-value async load to async reset on $verific$ready_reg$iir.v:206$289 ($aldff) from module top.
Changing const-value async load to async reset on $verific$obf_state_reg$iir.v:206$288 ($aldff) from module top.
Removing never-active CLR on $verific$obf_next_state_reg$iir.v:150$120 ($dlatchsr) from module top.
Removing never-active ARST on $verific$obf_next_state_reg$iir.v:150$120 ($dlatchsr) from module top.
Removing never-active async load on $verific$finite_counter_reg$iir.v:228$299 ($aldff) from module top.
Changing const-value async load to async reset on $verific$dout_reg$iir.v:206$287 ($aldff) from module top.
Changing const-value async load to async reset on $verific$b2_reg$iir.v:206$286 ($aldff) from module top.
Changing const-value async load to async reset on $verific$b1_reg$iir.v:206$285 ($aldff) from module top.
Changing const-value async load to async reset on $verific$b0_reg$iir.v:206$284 ($aldff) from module top.
Changing const-value async load to async reset on $verific$a2_reg$iir.v:206$283 ($aldff) from module top.
Changing const-value async load to async reset on $verific$a1_reg$iir.v:206$282 ($aldff) from module top.
Setting constant 0-bit at position 0 on $verific$temp_ready_reg$iir.v:150$200 ($dlatch) from module top.

yosys> opt_clean

3.11.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

yosys> opt_expr

3.11.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.11.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.11.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

yosys> opt_reduce

3.11.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.11.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.11.13. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on $verific$ready_reg$iir.v:206$289 ($adff) from module top.

yosys> opt_clean

3.11.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

yosys> opt_expr

3.11.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.11.16. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.11.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

yosys> opt_reduce

3.11.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.11.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.11.20. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.11.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

yosys> opt_expr

3.11.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.11.23. Finished OPT passes. (There is nothing left to do.)

yosys> fsm -encoding binary

3.12. Executing FSM pass (extract and optimize FSM).

yosys> fsm_detect

3.12.1. Executing FSM_DETECT pass (finding FSMs in design).

yosys> fsm_extract

3.12.2. Executing FSM_EXTRACT pass (extracting FSM from design).

yosys> fsm_opt

3.12.3. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> opt_clean

3.12.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

yosys> fsm_opt

3.12.5. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> fsm_recode -encoding binary

3.12.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

yosys> fsm_info

3.12.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

yosys> fsm_map

3.12.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

yosys> opt -sat

3.13. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

yosys> opt_merge -nomux

3.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

yosys> opt_reduce

3.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.13.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $verific$finite_counter_reg$iir.v:228$299 ($dff) from module top (D = $verific$n2523$82, Q = \finite_counter, rval = 7'1100100).
Adding EN signal on $auto$ff.cc:262:slice$308 ($sdff) from module top (D = $verific$n2498$79 [6:0], Q = \finite_counter).

yosys> opt_clean

3.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 2 unused cells and 2 unused wires.
<suppressed ~3 debug messages>

yosys> opt_expr

3.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.13.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.13.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

yosys> opt_reduce

3.13.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.13.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.13.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.13.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

yosys> opt_expr

3.13.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.13.16. Finished OPT passes. (There is nothing left to do.)

yosys> wreduce -keepdc

3.14. Executing WREDUCE pass (reducing word size of cells).
Removed top 15 bits (of 29) from port A of cell top.$verific$add_13$iir.v:106$97 ($add).
Removed top 15 bits (of 29) from port B of cell top.$verific$add_13$iir.v:106$97 ($add).
Removed top 14 bits (of 29) from port Y of cell top.$verific$add_13$iir.v:106$97 ($add).
Removed top 1 bits (of 5) from port A of cell top.$verific$sub_32$iir.v:142$129 ($sub).
Removed top 4 bits (of 5) from port B of cell top.$verific$sub_32$iir.v:142$129 ($sub).
Removed top 1 bits (of 5) from port Y of cell top.$verific$sub_32$iir.v:142$129 ($sub).
Removed top 14 bits (of 29) from FF cell top.$verific$temp_ysum_reg$iir.v:150$145 ($dlatch).
Removed top 1 bits (of 24) from port Y of cell top.$verific$mult_768$iir.v:161$239 ($mul).
Removed top 1 bits (of 24) from port Y of cell top.$verific$mult_770$iir.v:162$242 ($mul).
Removed top 1 bits (of 24) from port Y of cell top.$verific$mult_772$iir.v:163$245 ($mul).
Removed top 14 bits (of 29) from FF cell top.$verific$ysum_reg$iir.v:206$280 ($adff).
Removed top 1 bits (of 8) from port A of cell top.$verific$sub_832$iir.v:225$295 ($sub).
Removed top 7 bits (of 8) from port B of cell top.$verific$sub_832$iir.v:225$295 ($sub).
Removed top 1 bits (of 8) from port Y of cell top.$verific$sub_832$iir.v:225$295 ($sub).
Removed top 12 bits (of 27) from port A of cell top.$verific$add_20$iir.v:120$103 ($add).
Removed top 14 bits (of 29) from wire top.$verific$n121$31.
Removed top 1 bits (of 8) from wire top.$verific$n2498$79.
Removed top 1 bits (of 2) from wire top.$verific$n4$26.
Removed top 2 bits (of 3) from wire top.$verific$n400$43.
Removed top 1 bits (of 5) from wire top.$verific$n447$46.
Removed top 14 bits (of 29) from wire top.temp_ysum.
Removed top 15 bits (of 32) from wire top.yo1.
Removed top 15 bits (of 32) from wire top.yo2.
Removed top 14 bits (of 29) from wire top.ysum.

yosys> peepopt

3.15. Executing PEEPOPT pass (run peephole optimizers).

yosys> pmuxtree

3.16. Executing PMUXTREE pass.

yosys> opt_clean

3.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 14 unused wires.
<suppressed ~1 debug messages>

yosys> alumacc

3.18. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module top:
  creating $macc model for $verific$add_13$iir.v:106$97 ($add).
  creating $macc model for $verific$add_15$iir.v:113$99 ($add).
  creating $macc model for $verific$add_16$iir.v:113$100 ($add).
  creating $macc model for $verific$add_20$iir.v:120$103 ($add).
  creating $macc model for $verific$add_764$iir.v:155$235 ($add).
  creating $macc model for $verific$add_766$iir.v:157$237 ($add).
  creating $macc model for $verific$mult_768$iir.v:161$239 ($mul).
  creating $macc model for $verific$mult_770$iir.v:162$242 ($mul).
  creating $macc model for $verific$mult_772$iir.v:163$245 ($mul).
  creating $macc model for $verific$sub_32$iir.v:142$129 ($sub).
  creating $macc model for $verific$sub_832$iir.v:225$295 ($sub).
  merging $macc model for $verific$add_15$iir.v:113$99 into $verific$add_16$iir.v:113$100.
  merging $macc model for $verific$mult_768$iir.v:161$239 into $verific$add_16$iir.v:113$100.
  merging $macc model for $verific$mult_772$iir.v:163$245 into $verific$add_16$iir.v:113$100.
  merging $macc model for $verific$mult_770$iir.v:162$242 into $verific$add_16$iir.v:113$100.
  creating $alu model for $macc $verific$sub_32$iir.v:142$129.
  creating $alu model for $macc $verific$add_766$iir.v:157$237.
  creating $alu model for $macc $verific$add_764$iir.v:155$235.
  creating $alu model for $macc $verific$add_20$iir.v:120$103.
  creating $alu model for $macc $verific$sub_832$iir.v:225$295.
  creating $alu model for $macc $verific$add_13$iir.v:106$97.
  creating $macc cell for $verific$add_16$iir.v:113$100: $auto$alumacc.cc:365:replace_macc$319
  creating $alu cell for $verific$add_13$iir.v:106$97: $auto$alumacc.cc:485:replace_alu$320
  creating $alu cell for $verific$sub_832$iir.v:225$295: $auto$alumacc.cc:485:replace_alu$323
  creating $alu cell for $verific$add_20$iir.v:120$103: $auto$alumacc.cc:485:replace_alu$326
  creating $alu cell for $verific$add_764$iir.v:155$235: $auto$alumacc.cc:485:replace_alu$329
  creating $alu cell for $verific$add_766$iir.v:157$237: $auto$alumacc.cc:485:replace_alu$332
  creating $alu cell for $verific$sub_32$iir.v:142$129: $auto$alumacc.cc:485:replace_alu$335
  created 6 $alu and 1 $macc cells.

yosys> opt

3.19. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

yosys> opt_merge -nomux

3.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

yosys> opt_reduce

3.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_dff

3.19.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.19.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 4 unused cells and 7 unused wires.
<suppressed ~11 debug messages>

yosys> opt_expr

3.19.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.19.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.19.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

yosys> opt_reduce

3.19.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.19.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_dff

3.19.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.19.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

yosys> opt_expr

3.19.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.19.16. Finished OPT passes. (There is nothing left to do.)

yosys> memory -nomap

3.20. Executing MEMORY pass.

yosys> opt_mem

3.20.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

yosys> opt_mem_priority

3.20.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

yosys> opt_mem_feedback

3.20.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

yosys> memory_dff

3.20.4. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

yosys> opt_clean

3.20.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

yosys> memory_share

3.20.6. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

yosys> opt_mem_widen

3.20.7. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

yosys> opt_clean

3.20.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

yosys> memory_collect

3.20.9. Executing MEMORY_COLLECT pass (generating $mem cells).

yosys> opt_clean

3.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

yosys> stat

3.22. Printing statistics.

=== top ===

   Number of wires:                 86
   Number of wire bits:            837
   Number of public wires:          46
   Number of public wire bits:     508
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 64
     $adff                          16
     $alu                            6
     $and                            1
     $bmux                          15
     $dff                            1
     $dlatch                        16
     $logic_not                      2
     $macc                           1
     $mux                            3
     $not                            2
     $sdffe                          1


yosys> techmap -map +/techmap.v -map +/rapidsilicon/genesis/arith_map.v

3.23. Executing TECHMAP pass (map to technology primitives).

3.23.1. Executing Verilog-2005 frontend: /home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.23.2. Executing Verilog-2005 frontend: /home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/arith_map.v
Parsing Verilog input from `/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_rs_alu'.
Successfully finished Verilog frontend.

3.23.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $dlatch.
Using extmapper simplemap for cells of type $mux.
Using template $paramod$10ed987432f06055e5279101f9ec60a49861b43c\_90_alu for cells of type $alu.
Using template $paramod$7af1f06bbc40fd1ded04244783bd06e99b8f67a0\_80_rs_alu for cells of type $alu.
Using template $paramod$786227a72d9bddb8e10f7cc4fa6fe1f0691aad48\_80_rs_alu for cells of type $alu.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $bmux.
Using extmapper maccmap for cells of type $macc.
  add \b0 * \uk (16x8 bits, unsigned)
  add \b2 * \uk2 (16x8 bits, unsigned)
  add \b1 * \uk1 (16x8 bits, unsigned)
Using template $paramod$8742280fdebca84e1c87f2a86ed84f62d558f4cc\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $adff.
Using template $paramod$0e3b906a1f87161a196582db14e3d9e65c4436fa\_80_rs_alu for cells of type $alu.
Using extmapper simplemap for cells of type $sdffe.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000111 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_fa\WIDTH=32'00000000000000000000000000010111 for cells of type $fa.
Using template $paramod\_90_fa\WIDTH=32'00000000000000000000000000010110 for cells of type $fa.
Using template $paramod$448756c9a9dfaa49080ce4b90c6cc182883e181f\_90_alu for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000100 for cells of type $lcu.
Using extmapper simplemap for cells of type $or.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010111 for cells of type $lcu.
No more expansions possible.
<suppressed ~1248 debug messages>

yosys> stat

3.24. Printing statistics.

=== top ===

   Number of wires:                759
   Number of wire bits:          14440
   Number of public wires:          46
   Number of public wire bits:     508
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               4497
     $_AND_                       1667
     $_DFF_PP0_                    216
     $_DFF_PP1_                      1
     $_DFF_P_                        1
     $_DLATCH_P_                   217
     $_MUX_                        465
     $_NOT_                        116
     $_OR_                         566
     $_SDFFE_PP0P_                   4
     $_SDFFE_PP1P_                   3
     $_XOR_                       1165
     adder_carry                    76


yosys> opt

3.25. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.25.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~1326 debug messages>

yosys> opt_merge -nomux

3.25.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~96 debug messages>
Removed a total of 32 cells.

yosys> opt_muxtree

3.25.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.25.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.25.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_dff

3.25.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.25.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 141 unused cells and 448 unused wires.
<suppressed ~142 debug messages>

yosys> opt_expr

3.25.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.25.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.25.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.25.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.25.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_dff

3.25.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.25.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

yosys> opt_expr

3.25.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.25.16. Finished OPT passes. (There is nothing left to do.)

yosys> opt -fast -full

3.26. Executing OPT pass (performing simple optimizations).

yosys> opt_expr -full

3.26.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~62 debug messages>

yosys> opt_merge

3.26.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_dff

3.26.3. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.26.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 4 unused wires.
<suppressed ~1 debug messages>

3.26.5. Finished fast OPT passes.

yosys> memory_map

3.27. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

yosys> opt -full

3.28. Executing OPT pass (performing simple optimizations).

yosys> opt_expr -full

3.28.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~2 debug messages>

yosys> opt_merge -nomux

3.28.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

yosys> opt_muxtree

3.28.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce -full

3.28.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.28.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_share

3.28.6. Executing OPT_SHARE pass.

yosys> opt_dff

3.28.7. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.28.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

yosys> opt_expr -full

3.28.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.28.10. Finished OPT passes. (There is nothing left to do.)

yosys> abc -dff

3.29. Executing ABC pass (technology mapping using ABC).

3.29.1. Summary of detected clock domains:
  3 cells in clk=\clk, en={ }, arst={ }, srst={ }
  2967 cells in clk=\clk, en={ }, arst=\reset, srst={ }
  40 cells in clk=\clk, en=\iir_start, arst={ }, srst=\reset

3.29.2. Extracting gate netlist of module `\top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk
Extracted 3 gates and 4 wires to a netlist network with 1 inputs and 2 outputs.

3.29.2.1. Executing ABC.
Running ABC command: /home/users/aram/Workspace/clean_repo/yosys_verific_rs/build/logic_synthesis-rs/bin/abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: 1 registers in this network have don't-care init values.
ABC: The don't-care are assumed to be 0. The result may not verify.
ABC: Use command "print_latch" to see the init values of registers.
ABC: Use command "zero" to convert or "init" to change the values.
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.29.2.2. Re-integrating ABC results.
ABC RESULTS:               DFF cells:        1
ABC RESULTS:               NOT cells:        3
ABC RESULTS:        internal signals:        1
ABC RESULTS:           input signals:        1
ABC RESULTS:          output signals:        2
Removing temp directory.

3.29.3. Extracting gate netlist of module `\top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, asynchronously reset by \reset
Extracted 2685 gates and 2936 wires to a netlist network with 249 inputs and 234 outputs.

3.29.3.1. Executing ABC.
Running ABC command: /home/users/aram/Workspace/clean_repo/yosys_verific_rs/build/logic_synthesis-rs/bin/abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.29.3.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:      452
ABC RESULTS:            ANDNOT cells:       11
ABC RESULTS:               BUF cells:      265
ABC RESULTS:               DFF cells:      173
ABC RESULTS:               MUX cells:       36
ABC RESULTS:              NAND cells:     1055
ABC RESULTS:               NOR cells:        9
ABC RESULTS:               NOT cells:        2
ABC RESULTS:                OR cells:       27
ABC RESULTS:             ORNOT cells:       15
ABC RESULTS:              XNOR cells:       51
ABC RESULTS:               XOR cells:      773
ABC RESULTS:        internal signals:     2453
ABC RESULTS:           input signals:      249
ABC RESULTS:          output signals:      234
Removing temp directory.

3.29.4. Extracting gate netlist of module `\top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by \iir_start, synchronously reset by \reset
Extracted 40 gates and 40 wires to a netlist network with 0 inputs and 3 outputs.

3.29.4.1. Executing ABC.
Running ABC command: /home/users/aram/Workspace/clean_repo/yosys_verific_rs/build/logic_synthesis-rs/bin/abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.29.4.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        2
ABC RESULTS:               DFF cells:        7
ABC RESULTS:              NAND cells:        1
ABC RESULTS:               NOR cells:        1
ABC RESULTS:               NOT cells:        2
ABC RESULTS:                OR cells:        5
ABC RESULTS:             ORNOT cells:        2
ABC RESULTS:              XNOR cells:        4
ABC RESULTS:               XOR cells:        1
ABC RESULTS:        internal signals:       37
ABC RESULTS:           input signals:        0
ABC RESULTS:          output signals:        3
Removing temp directory.

yosys> abc -script abc_tmp.scr

3.30. Executing ABC pass (technology mapping using ABC).

3.30.1. Extracting gate netlist of module `\top' to `<abc-temp-dir>/input.blif'..
Extracted 2452 gates and 2706 wires to a netlist network with 254 inputs and 149 outputs.

3.30.1.1. Executing ABC.
Running ABC command: /home/users/aram/Workspace/clean_repo/yosys_verific_rs/build/logic_synthesis-rs/bin/abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + source /home/users/aram/Workspace/clean_repo/yosys_verific_rs/result_20-04-2022T11-33-54/All_lut_synth_rs_ade.json/iir/abc_tmp.scr 
ABC:   #Luts =   899  Max Lvl =  26  Avg Lvl =   3.54  [   0.12 sec. at Pass 0]
ABC:   #Luts =   855  Max Lvl =  25  Avg Lvl =   3.28  [  10.83 sec. at Pass 1]
ABC:   #Luts =   770  Max Lvl =  19  Avg Lvl =   2.88  [   1.27 sec. at Pass 2]
ABC:   #Luts =   770  Max Lvl =  19  Avg Lvl =   2.88  [   4.27 sec. at Pass 3]
ABC:   #Luts =   769  Max Lvl =  18  Avg Lvl =   2.94  [   1.77 sec. at Pass 4]
ABC:   #Luts =   769  Max Lvl =  18  Avg Lvl =   2.94  [   5.67 sec. at Pass 5]
ABC:   #Luts =   768  Max Lvl =  18  Avg Lvl =   2.91  [   2.78 sec. at Pass 6]
ABC:   #Luts =   768  Max Lvl =  18  Avg Lvl =   2.91  [   7.28 sec. at Pass 7]
ABC:   #Luts =   766  Max Lvl =  17  Avg Lvl =   2.80  [   2.88 sec. at Pass 8]
ABC:   #Luts =   765  Max Lvl =  17  Avg Lvl =   2.78  [   5.99 sec. at Pass 9]
ABC:   #Luts =   765  Max Lvl =  17  Avg Lvl =   2.78  [   2.24 sec. at Pass 10]
ABC:   #Luts =   765  Max Lvl =  17  Avg Lvl =   2.78  [   5.87 sec. at Pass 11]
ABC: + write_blif <abc-temp-dir>/output.blif 

3.30.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:      765
ABC RESULTS:        internal signals:     2303
ABC RESULTS:           input signals:      254
ABC RESULTS:          output signals:      149
Removing temp directory.

yosys> opt

3.31. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.31.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

yosys> opt_merge -nomux

3.31.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.31.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.31.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.31.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_dff

3.31.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.31.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 3665 unused wires.
<suppressed ~11 debug messages>

yosys> opt_expr

3.31.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.31.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.31.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.31.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.31.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_dff

3.31.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.31.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

yosys> opt_expr

3.31.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.31.16. Finished OPT passes. (There is nothing left to do.)

yosys> stat

3.32. Printing statistics.

=== top ===

   Number of wires:                821
   Number of wire bits:           1502
   Number of public wires:          36
   Number of public wire bits:     419
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1228
     $_DFF_PP0_                    173
     $_DFF_P_                        1
     $_DLATCH_P_                   206
     $_SDFFE_PP0P_                   7
     $lut                          765
     adder_carry                    76


yosys> shregmap -minlen 8 -maxlen 20

3.33. Executing SHREGMAP pass (map shift registers).
Converted 0 dff cells into 0 shift registers.

yosys> dfflegalize -cell $_DFF_?_ 0 -cell $_DFF_???_ 0 -cell $_DFFE_????_ 0 -cell $_DFFSR_???_ 0 -cell $_DFFSRE_????_ 0 -cell $_DLATCHSR_PPP_ 0

3.34. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

yosys> stat

3.35. Printing statistics.

=== top ===

   Number of wires:                835
   Number of wire bits:           1516
   Number of public wires:          36
   Number of public wire bits:     419
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1242
     $_DFF_PP0_                    173
     $_DFF_P_                        8
     $_DLATCHSR_PPP_               206
     $_MUX_                         14
     $lut                          765
     adder_carry                    76


yosys> techmap -map +/techmap.v -map +/rapidsilicon/genesis/ffs_map.v

3.36. Executing TECHMAP pass (map to technology primitives).

3.36.1. Executing Verilog-2005 frontend: /home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.36.2. Executing Verilog-2005 frontend: /home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/ffs_map.v
Parsing Verilog input from `/home/users/aram/Workspace/clean_repo/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/ffs_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP0N_'.
Generating RTLIL representation for module `\$_DFFE_PN0P_'.
Generating RTLIL representation for module `\$_DFFE_PN0N_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP1N_'.
Generating RTLIL representation for module `\$_DFFE_PN1P_'.
Generating RTLIL representation for module `\$_DFFE_PN1N_'.
Generating RTLIL representation for module `\$_DFFSR_PPP_'.
Generating RTLIL representation for module `\$_DFFSR_PNP_'.
Generating RTLIL representation for module `\$_DFFSR_PNN_'.
Generating RTLIL representation for module `\$_DFFSR_PPN_'.
Generating RTLIL representation for module `\$_DFFSR_NPP_'.
Generating RTLIL representation for module `\$_DFFSR_NNP_'.
Generating RTLIL representation for module `\$_DFFSR_NNN_'.
Generating RTLIL representation for module `\$_DFFSR_NPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PNPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPNP_'.
Generating RTLIL representation for module `\$_DFFSRE_PNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PNPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PPNN_'.
Generating RTLIL representation for module `\$_DFFSRE_PNNN_'.
Generating RTLIL representation for module `\$_DLATCHSR_PPP_'.
Generating RTLIL representation for module `\$_DLATCHSR_NPP_'.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP0N_'.
Generating RTLIL representation for module `\$_DFFE_NN0P_'.
Generating RTLIL representation for module `\$_DFFE_NN0N_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_NP1N_'.
Generating RTLIL representation for module `\$_DFFE_NN1P_'.
Generating RTLIL representation for module `\$_DFFE_NN1N_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNPP_'.
Generating RTLIL representation for module `\$_DFFSRE_NPNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPN_'.
Generating RTLIL representation for module `\$_DFFSRE_NNPN_'.
Generating RTLIL representation for module `\$_DFFSRE_NPNN_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNN_'.
Generating RTLIL representation for module `\$__SHREG_DFF_P_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PN0_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NN0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFF_PN1_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_NN1_'.
Successfully finished Verilog frontend.

3.36.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $lut.
Using template \$_DLATCHSR_PPP_ for cells of type $_DLATCHSR_PPP_.
Using template \$_DFF_PP0_ for cells of type $_DFF_PP0_.
Using template \$_DFF_P_ for cells of type $_DFF_P_.
Using extmapper simplemap for cells of type $logic_not.
No more expansions possible.
<suppressed ~1873 debug messages>

yosys> opt_expr -mux_undef

3.37. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~14120 debug messages>

yosys> simplemap

3.38. Executing SIMPLEMAP pass (map simple cells to gate primitives).

yosys> opt_expr

3.39. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

yosys> opt_merge

3.40. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~22233 debug messages>
Removed a total of 7411 cells.

yosys> opt_dff -nodffe -nosdff

3.41. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.42. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 3621 unused wires.
<suppressed ~1 debug messages>

yosys> opt -nodffe -nosdff

3.43. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.43.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~504 debug messages>

yosys> opt_merge -nomux

3.43.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.43.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.43.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.43.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.43.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.43.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 4 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.43.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.43.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.43.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.43.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.43.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.43.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.43.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

yosys> opt_expr

3.43.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.43.16. Finished OPT passes. (There is nothing left to do.)

yosys> abc -script abc_tmp.scr

3.44. Executing ABC pass (technology mapping using ABC).

3.44.1. Extracting gate netlist of module `\top' to `<abc-temp-dir>/input.blif'..
Extracted 4907 gates and 5164 wires to a netlist network with 255 inputs and 150 outputs.

3.44.1.1. Executing ABC.
Running ABC command: /home/users/aram/Workspace/clean_repo/yosys_verific_rs/build/logic_synthesis-rs/bin/abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + source /home/users/aram/Workspace/clean_repo/yosys_verific_rs/result_20-04-2022T11-33-54/All_lut_synth_rs_ade.json/iir/abc_tmp.scr 
ABC:   #Luts =   777  Max Lvl =  17  Avg Lvl =   2.78  [   0.28 sec. at Pass 0]
ABC:   #Luts =   777  Max Lvl =  17  Avg Lvl =   2.78  [  15.05 sec. at Pass 1]
ABC:   #Luts =   770  Max Lvl =  17  Avg Lvl =   2.81  [   2.83 sec. at Pass 2]
ABC:   #Luts =   769  Max Lvl =  16  Avg Lvl =   2.66  [   5.72 sec. at Pass 3]
ABC:   #Luts =   766  Max Lvl =  18  Avg Lvl =   2.89  [   2.10 sec. at Pass 4]
ABC:   #Luts =   765  Max Lvl =  17  Avg Lvl =   2.79  [   6.20 sec. at Pass 5]
ABC:   #Luts =   765  Max Lvl =  17  Avg Lvl =   2.79  [   2.32 sec. at Pass 6]
ABC:   #Luts =   765  Max Lvl =  17  Avg Lvl =   2.79  [   5.61 sec. at Pass 7]
ABC: + write_blif <abc-temp-dir>/output.blif 

3.44.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:      765
ABC RESULTS:        internal signals:     4759
ABC RESULTS:           input signals:      255
ABC RESULTS:          output signals:      150
Removing temp directory.

yosys> opt

3.45. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.45.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

yosys> opt_merge -nomux

3.45.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.45.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.45.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.45.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_dff

3.45.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.45.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 3245 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.45.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.45.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.45.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.45.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.45.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_dff

3.45.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.45.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

yosys> opt_expr

3.45.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.45.16. Finished OPT passes. (There is nothing left to do.)

yosys> hierarchy -check

3.46. Executing HIERARCHY pass (managing design hierarchy).

3.46.1. Analyzing design hierarchy..
Top module:  \top

3.46.2. Analyzing design hierarchy..
Top module:  \top
Removed 0 unused modules.

yosys> stat

3.47. Printing statistics.

=== top ===

   Number of wires:                821
   Number of wire bits:           1502
   Number of public wires:          36
   Number of public wire bits:     419
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1228
     $lut                          765
     adder_carry                    76
     dffsre                        181
     latchsre                      206


yosys> opt_clean -purge

3.48. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 2 unused wires.
<suppressed ~2 debug messages>

yosys> write_verilog -noattr -nohex synthesized.v

3.49. Executing Verilog backend.

yosys> bmuxmap

3.49.1. Executing BMUXMAP pass.

yosys> demuxmap

3.49.2. Executing DEMUXMAP pass.

yosys> clean_zerowidth
Dumping module `\top'.

Warnings: 24 unique messages, 28 total
End of script. Logfile hash: 9f98cf471f, CPU: user 8.28s system 0.13s, MEM: 67.86 MB peak
Yosys 0.16+6 (git sha1 0c82fb7e3, gcc 9.1.0 -fPIC -Os)
Time spent: 99% 3x abc (945 sec), 0% 35x opt_expr (3 sec), ...
real 101.57
user 900.50
sys 53.15
