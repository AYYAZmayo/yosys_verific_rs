
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.14+36 (git sha1 4cd3e3b51, gcc 7.1.0 -fPIC -Os)


-- Executing script file `yosys.ys' --
echo on

yosys> plugin -i synth-rs

yosys> read -verific

yosys> read -incdir .

yosys> verific -vlog-incdir .

1. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Jan22_SW_Release, released at Sat Jan 29 02:42:49 2022.

yosys> verilog_defaults -add -I.

yosys> read -vlog2k decoder.v encoder.v multi_enc_decx2x4.v topenc_decx2.v

yosys> verific -vlog2k decoder.v encoder.v multi_enc_decx2x4.v topenc_decx2.v

2. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Jan22_SW_Release, released at Sat Jan 29 02:42:49 2022.
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'decoder.v'
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'encoder.v'
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'multi_enc_decx2x4.v'
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'topenc_decx2.v'

yosys> synth_rs -top top -tech genesis -goal area -no_dsp -no_bram -verilog top.verilog

3. Executing synth_rs pass.

yosys> read_verilog -lib -specify -nomem2reg +/rapidsilicon/common/cells_sim.v +/rapidsilicon/genesis/cells_sim.v

3.1. Executing Verilog-2005 frontend: /home/users/meri/Documents/workspace/clean/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v
Parsing Verilog input from `/home/users/meri/Documents/workspace/clean/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\inv'.
Generating RTLIL representation for module `\buff'.
Generating RTLIL representation for module `\logic_0'.
Generating RTLIL representation for module `\logic_1'.
Generating RTLIL representation for module `\gclkbuff'.
Successfully finished Verilog frontend.

3.2. Executing Verilog-2005 frontend: /home/users/meri/Documents/workspace/clean/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/cells_sim.v
Parsing Verilog input from `/home/users/meri/Documents/workspace/clean/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\dff'.
Generating RTLIL representation for module `\dffn'.
Generating RTLIL representation for module `\dffsre'.
Generating RTLIL representation for module `\dffnsre'.
Generating RTLIL representation for module `\latchsre'.
Generating RTLIL representation for module `\latchnsre'.
Generating RTLIL representation for module `\io_scff'.
Generating RTLIL representation for module `\scff'.
Generating RTLIL representation for module `\sh_dff'.
Successfully finished Verilog frontend.

yosys> hierarchy -check -top top

3.3. Executing HIERARCHY pass (managing design hierarchy).
VERIFIC-INFO [VERI-1018] topenc_decx2.v:2: compiling module 'top'
VERIFIC-INFO [VERI-1018] encoder.v:1: compiling module 'encoder128'
VERIFIC-INFO [VERI-1018] decoder.v:1: compiling module 'decoder128'
Importing module top.
Importing module encoder128.
Importing module decoder128.

3.3.1. Analyzing design hierarchy..
Top module:  \top
Used module:     \decoder128
Used module:     \encoder128

3.3.2. Analyzing design hierarchy..
Top module:  \top
Used module:     \decoder128
Used module:     \encoder128
Removed 0 unused modules.

yosys> proc

3.4. Executing PROC pass (convert processes to netlists).

yosys> proc_clean

3.4.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> proc_rmdead

3.4.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

yosys> proc_prune

3.4.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

yosys> proc_init

3.4.4. Executing PROC_INIT pass (extract init attributes).

yosys> proc_arst

3.4.5. Executing PROC_ARST pass (detect async resets in processes).

yosys> proc_mux

3.4.6. Executing PROC_MUX pass (convert decision trees to multiplexers).

yosys> proc_dlatch

3.4.7. Executing PROC_DLATCH pass (convert process syncs to latches).

yosys> proc_dff

3.4.8. Executing PROC_DFF pass (convert process syncs to FFs).

yosys> proc_memwr

3.4.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

yosys> proc_clean

3.4.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> opt_expr -keepdc

3.4.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module decoder128.
<suppressed ~1 debug messages>
Optimizing module encoder128.
<suppressed ~1 debug messages>
Optimizing module top.

yosys> flatten

3.5. Executing FLATTEN pass (flatten design).
Deleting now unused module decoder128.
Deleting now unused module encoder128.
<suppressed ~4 debug messages>

yosys> tribuf -logic

3.6. Executing TRIBUF pass.

yosys> deminout

3.7. Executing DEMINOUT pass (demote inout ports to input or output).

yosys> opt_expr

3.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

yosys> opt_clean

3.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 1072 unused wires.
<suppressed ~5 debug messages>

yosys> check

3.10. Executing CHECK pass (checking for obvious problems).
Checking module top...
Found and reported 0 problems.

yosys> opt -nodffe -nosdff

3.11. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

yosys> opt_merge -nomux

3.11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.11.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

yosys> opt_reduce

3.11.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
    New ctrl vector for $pmux cell $flatten\U01.$verific$select_261$encoder.v:147$962: { $flatten\U01.$verific$n1037$572 $flatten\U01.$verific$n1038$573 $flatten\U01.$verific$n1039$574 $flatten\U01.$verific$n1040$575 $flatten\U01.$verific$n1041$576 $flatten\U01.$verific$n1042$577 $flatten\U01.$verific$n1043$578 $flatten\U01.$verific$n1045$580 $flatten\U01.$verific$n1046$581 $flatten\U01.$verific$n1047$582 $auto$opt_reduce.cc:134:opt_pmux$1113 $flatten\U01.$verific$n1049$584 $flatten\U01.$verific$n1050$585 $flatten\U01.$verific$n1051$586 $flatten\U01.$verific$n1052$587 $flatten\U01.$verific$n1053$588 $flatten\U01.$verific$n1054$589 $flatten\U01.$verific$n1055$590 $flatten\U01.$verific$n1056$591 $flatten\U01.$verific$n1057$592 $flatten\U01.$verific$n1058$593 $flatten\U01.$verific$n1059$594 $flatten\U01.$verific$n1061$596 $flatten\U01.$verific$n1062$597 $flatten\U01.$verific$n1063$598 $auto$opt_reduce.cc:134:opt_pmux$1111 $flatten\U01.$verific$n1065$600 $flatten\U01.$verific$n1066$601 $flatten\U01.$verific$n1067$602 $flatten\U01.$verific$n1068$603 $flatten\U01.$verific$n1069$604 $flatten\U01.$verific$n1070$605 $flatten\U01.$verific$n1071$606 $flatten\U01.$verific$n1072$607 $flatten\U01.$verific$n1073$608 $flatten\U01.$verific$n1074$609 $flatten\U01.$verific$n1075$610 $flatten\U01.$verific$n1077$612 $flatten\U01.$verific$n1078$613 $flatten\U01.$verific$n1079$614 $auto$opt_reduce.cc:134:opt_pmux$1109 $flatten\U01.$verific$n1081$616 $flatten\U01.$verific$n1082$617 $flatten\U01.$verific$n1083$618 $flatten\U01.$verific$n1084$619 $flatten\U01.$verific$n1085$620 $flatten\U01.$verific$n1086$621 $flatten\U01.$verific$n1087$622 $flatten\U01.$verific$n1088$623 $flatten\U01.$verific$n1089$624 $flatten\U01.$verific$n1090$625 $flatten\U01.$verific$n1091$626 $flatten\U01.$verific$n1093$628 $flatten\U01.$verific$n1094$629 $flatten\U01.$verific$n1095$630 $auto$opt_reduce.cc:134:opt_pmux$1107 $flatten\U01.$verific$n1097$632 $flatten\U01.$verific$n1098$633 $flatten\U01.$verific$n1099$634 $flatten\U01.$verific$n1100$635 $flatten\U01.$verific$n1101$636 $flatten\U01.$verific$n1102$637 $flatten\U01.$verific$n1103$638 $flatten\U01.$verific$n1104$639 $flatten\U01.$verific$n1105$640 $flatten\U01.$verific$n1106$641 $flatten\U01.$verific$n1107$642 $flatten\U01.$verific$n1109$644 $flatten\U01.$verific$n1110$645 $flatten\U01.$verific$n1111$646 $auto$opt_reduce.cc:134:opt_pmux$1105 $flatten\U01.$verific$n1113$648 $flatten\U01.$verific$n1114$649 $flatten\U01.$verific$n1115$650 $flatten\U01.$verific$n1116$651 $flatten\U01.$verific$n1117$652 $flatten\U01.$verific$n1118$653 $flatten\U01.$verific$n1119$654 $flatten\U01.$verific$n1120$655 $flatten\U01.$verific$n1121$656 $flatten\U01.$verific$n1122$657 $flatten\U01.$verific$n1123$658 $flatten\U01.$verific$n1125$660 $flatten\U01.$verific$n1126$661 $flatten\U01.$verific$n1127$662 $auto$opt_reduce.cc:134:opt_pmux$1103 $flatten\U01.$verific$n1129$664 $flatten\U01.$verific$n1130$665 $flatten\U01.$verific$n1131$666 $flatten\U01.$verific$n1132$667 $flatten\U01.$verific$n1133$668 $flatten\U01.$verific$n1134$669 $flatten\U01.$verific$n1135$670 $flatten\U01.$verific$n1136$671 $flatten\U01.$verific$n1137$672 $flatten\U01.$verific$n1138$673 $flatten\U01.$verific$n1139$674 $flatten\U01.$verific$n1141$676 $flatten\U01.$verific$n1142$677 $flatten\U01.$verific$n1143$678 $auto$opt_reduce.cc:134:opt_pmux$1101 $flatten\U01.$verific$n1145$680 $flatten\U01.$verific$n1146$681 $flatten\U01.$verific$n1147$682 $flatten\U01.$verific$n1148$683 $flatten\U01.$verific$n1149$684 $flatten\U01.$verific$n1150$685 $flatten\U01.$verific$n1151$686 $flatten\U01.$verific$n1152$687 $flatten\U01.$verific$n1153$688 $flatten\U01.$verific$n1154$689 $flatten\U01.$verific$n1155$690 $flatten\U01.$verific$n1157$692 $flatten\U01.$verific$n1158$693 $flatten\U01.$verific$n1159$694 $auto$opt_reduce.cc:134:opt_pmux$1099 $flatten\U01.$verific$n1161$696 $flatten\U01.$verific$n1162$697 $flatten\U01.$verific$n1163$698 }
    New ctrl vector for $pmux cell $flatten\U011.$verific$select_261$encoder.v:147$962: { $flatten\U011.$verific$n1037$572 $flatten\U011.$verific$n1038$573 $flatten\U011.$verific$n1039$574 $flatten\U011.$verific$n1040$575 $flatten\U011.$verific$n1041$576 $flatten\U011.$verific$n1042$577 $flatten\U011.$verific$n1043$578 $flatten\U011.$verific$n1045$580 $flatten\U011.$verific$n1046$581 $flatten\U011.$verific$n1047$582 $auto$opt_reduce.cc:134:opt_pmux$1129 $flatten\U011.$verific$n1049$584 $flatten\U011.$verific$n1050$585 $flatten\U011.$verific$n1051$586 $flatten\U011.$verific$n1052$587 $flatten\U011.$verific$n1053$588 $flatten\U011.$verific$n1054$589 $flatten\U011.$verific$n1055$590 $flatten\U011.$verific$n1056$591 $flatten\U011.$verific$n1057$592 $flatten\U011.$verific$n1058$593 $flatten\U011.$verific$n1059$594 $flatten\U011.$verific$n1061$596 $flatten\U011.$verific$n1062$597 $flatten\U011.$verific$n1063$598 $auto$opt_reduce.cc:134:opt_pmux$1127 $flatten\U011.$verific$n1065$600 $flatten\U011.$verific$n1066$601 $flatten\U011.$verific$n1067$602 $flatten\U011.$verific$n1068$603 $flatten\U011.$verific$n1069$604 $flatten\U011.$verific$n1070$605 $flatten\U011.$verific$n1071$606 $flatten\U011.$verific$n1072$607 $flatten\U011.$verific$n1073$608 $flatten\U011.$verific$n1074$609 $flatten\U011.$verific$n1075$610 $flatten\U011.$verific$n1077$612 $flatten\U011.$verific$n1078$613 $flatten\U011.$verific$n1079$614 $auto$opt_reduce.cc:134:opt_pmux$1125 $flatten\U011.$verific$n1081$616 $flatten\U011.$verific$n1082$617 $flatten\U011.$verific$n1083$618 $flatten\U011.$verific$n1084$619 $flatten\U011.$verific$n1085$620 $flatten\U011.$verific$n1086$621 $flatten\U011.$verific$n1087$622 $flatten\U011.$verific$n1088$623 $flatten\U011.$verific$n1089$624 $flatten\U011.$verific$n1090$625 $flatten\U011.$verific$n1091$626 $flatten\U011.$verific$n1093$628 $flatten\U011.$verific$n1094$629 $flatten\U011.$verific$n1095$630 $auto$opt_reduce.cc:134:opt_pmux$1123 $flatten\U011.$verific$n1097$632 $flatten\U011.$verific$n1098$633 $flatten\U011.$verific$n1099$634 $flatten\U011.$verific$n1100$635 $flatten\U011.$verific$n1101$636 $flatten\U011.$verific$n1102$637 $flatten\U011.$verific$n1103$638 $flatten\U011.$verific$n1104$639 $flatten\U011.$verific$n1105$640 $flatten\U011.$verific$n1106$641 $flatten\U011.$verific$n1107$642 $flatten\U011.$verific$n1109$644 $flatten\U011.$verific$n1110$645 $flatten\U011.$verific$n1111$646 $auto$opt_reduce.cc:134:opt_pmux$1121 $flatten\U011.$verific$n1113$648 $flatten\U011.$verific$n1114$649 $flatten\U011.$verific$n1115$650 $flatten\U011.$verific$n1116$651 $flatten\U011.$verific$n1117$652 $flatten\U011.$verific$n1118$653 $flatten\U011.$verific$n1119$654 $flatten\U011.$verific$n1120$655 $flatten\U011.$verific$n1121$656 $flatten\U011.$verific$n1122$657 $flatten\U011.$verific$n1123$658 $flatten\U011.$verific$n1125$660 $flatten\U011.$verific$n1126$661 $flatten\U011.$verific$n1127$662 $auto$opt_reduce.cc:134:opt_pmux$1119 $flatten\U011.$verific$n1129$664 $flatten\U011.$verific$n1130$665 $flatten\U011.$verific$n1131$666 $flatten\U011.$verific$n1132$667 $flatten\U011.$verific$n1133$668 $flatten\U011.$verific$n1134$669 $flatten\U011.$verific$n1135$670 $flatten\U011.$verific$n1136$671 $flatten\U011.$verific$n1137$672 $flatten\U011.$verific$n1138$673 $flatten\U011.$verific$n1139$674 $flatten\U011.$verific$n1141$676 $flatten\U011.$verific$n1142$677 $flatten\U011.$verific$n1143$678 $auto$opt_reduce.cc:134:opt_pmux$1117 $flatten\U011.$verific$n1145$680 $flatten\U011.$verific$n1146$681 $flatten\U011.$verific$n1147$682 $flatten\U011.$verific$n1148$683 $flatten\U011.$verific$n1149$684 $flatten\U011.$verific$n1150$685 $flatten\U011.$verific$n1151$686 $flatten\U011.$verific$n1152$687 $flatten\U011.$verific$n1153$688 $flatten\U011.$verific$n1154$689 $flatten\U011.$verific$n1155$690 $flatten\U011.$verific$n1157$692 $flatten\U011.$verific$n1158$693 $flatten\U011.$verific$n1159$694 $auto$opt_reduce.cc:134:opt_pmux$1115 $flatten\U011.$verific$n1161$696 $flatten\U011.$verific$n1162$697 $flatten\U011.$verific$n1163$698 }
  Optimizing cells in module \top.
Performed a total of 2 changes.

yosys> opt_merge

3.11.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.11.6. Executing OPT_DFF pass (perform DFF optimizations).
Removing never-active async load on $verific$data_encout_reg$topenc_decx2.v:62$562 ($aldff) from module top.
Removing never-active async load on $verific$data_encout1_reg$topenc_decx2.v:95$567 ($aldff) from module top.
Removing never-active async load on $verific$data_encin_reg$topenc_decx2.v:46$559 ($aldff) from module top.
Removing never-active async load on $verific$data_encin1_reg$topenc_decx2.v:79$565 ($aldff) from module top.

yosys> opt_clean

3.11.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 6 unused cells and 6 unused wires.
<suppressed ~7 debug messages>

yosys> opt_expr

3.11.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.11.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.11.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

yosys> opt_reduce

3.11.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.11.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.11.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.11.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

yosys> opt_expr

3.11.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.11.16. Finished OPT passes. (There is nothing left to do.)

yosys> fsm

3.12. Executing FSM pass (extract and optimize FSM).

yosys> fsm_detect

3.12.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking top.data_encout as FSM state register:
    Users of register don't seem to benefit from recoding.
Not marking top.data_encout1 as FSM state register:
    Users of register don't seem to benefit from recoding.

yosys> fsm_extract

3.12.2. Executing FSM_EXTRACT pass (extracting FSM from design).

yosys> fsm_opt

3.12.3. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> opt_clean

3.12.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

yosys> fsm_opt

3.12.5. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> fsm_recode

3.12.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

yosys> fsm_info

3.12.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

yosys> fsm_map

3.12.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

yosys> opt -sat

3.13. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

yosys> opt_merge -nomux

3.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

yosys> opt_reduce

3.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.13.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $verific$data_encout_reg$topenc_decx2.v:62$562 ($dff) from module top (D = \U01.dataout, Q = \data_encout, rval = 7'0000000).
Adding SRST signal on $verific$data_encout1_reg$topenc_decx2.v:95$567 ($dff) from module top (D = \U011.dataout, Q = \data_encout1, rval = 7'0000000).
Adding SRST signal on $verific$data_encin_reg$topenc_decx2.v:46$559 ($dff) from module top (D = \datain, Q = \data_encin, rval = 128'00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000).
Adding SRST signal on $verific$data_encin1_reg$topenc_decx2.v:79$565 ($dff) from module top (D = \datain1, Q = \data_encin1, rval = 128'00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000).

yosys> opt_clean

3.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 4 unused cells and 4 unused wires.
<suppressed ~5 debug messages>

yosys> opt_expr

3.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.13.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.13.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

yosys> opt_reduce

3.13.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.13.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.13.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.13.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

yosys> opt_expr

3.13.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.13.16. Finished OPT passes. (There is nothing left to do.)

yosys> wreduce -keepdc

3.14. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_258$encoder.v:142$957 ($eq).
Removed top 2 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_257$encoder.v:141$956 ($eq).
Removed top 3 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_256$encoder.v:140$955 ($eq).
Removed top 4 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_255$encoder.v:139$954 ($eq).
Removed top 5 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_254$encoder.v:138$953 ($eq).
Removed top 6 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_253$encoder.v:137$952 ($eq).
Removed top 7 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_252$encoder.v:136$951 ($eq).
Removed top 8 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_251$encoder.v:135$950 ($eq).
Removed top 9 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_250$encoder.v:134$949 ($eq).
Removed top 10 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_249$encoder.v:133$948 ($eq).
Removed top 11 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_248$encoder.v:132$947 ($eq).
Removed top 12 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_247$encoder.v:131$946 ($eq).
Removed top 13 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_246$encoder.v:130$945 ($eq).
Removed top 14 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_245$encoder.v:129$944 ($eq).
Removed top 15 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_244$encoder.v:128$943 ($eq).
Removed top 16 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_243$encoder.v:127$942 ($eq).
Removed top 17 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_242$encoder.v:126$941 ($eq).
Removed top 18 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_241$encoder.v:125$940 ($eq).
Removed top 19 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_240$encoder.v:124$939 ($eq).
Removed top 20 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_239$encoder.v:123$938 ($eq).
Removed top 21 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_238$encoder.v:122$937 ($eq).
Removed top 22 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_237$encoder.v:121$936 ($eq).
Removed top 23 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_236$encoder.v:120$935 ($eq).
Removed top 24 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_235$encoder.v:119$934 ($eq).
Removed top 25 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_234$encoder.v:118$933 ($eq).
Removed top 26 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_233$encoder.v:117$932 ($eq).
Removed top 27 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_232$encoder.v:116$931 ($eq).
Removed top 28 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_231$encoder.v:115$930 ($eq).
Removed top 29 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_230$encoder.v:114$929 ($eq).
Removed top 30 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_229$encoder.v:113$928 ($eq).
Removed top 31 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_228$encoder.v:112$927 ($eq).
Removed top 32 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_227$encoder.v:110$926 ($eq).
Removed top 33 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_226$encoder.v:109$925 ($eq).
Removed top 34 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_225$encoder.v:108$924 ($eq).
Removed top 35 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_224$encoder.v:107$923 ($eq).
Removed top 36 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_223$encoder.v:106$922 ($eq).
Removed top 37 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_222$encoder.v:105$921 ($eq).
Removed top 38 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_221$encoder.v:104$920 ($eq).
Removed top 39 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_220$encoder.v:103$919 ($eq).
Removed top 40 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_219$encoder.v:102$918 ($eq).
Removed top 41 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_218$encoder.v:101$917 ($eq).
Removed top 42 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_217$encoder.v:100$916 ($eq).
Removed top 43 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_216$encoder.v:99$915 ($eq).
Removed top 44 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_215$encoder.v:98$914 ($eq).
Removed top 45 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_214$encoder.v:97$913 ($eq).
Removed top 46 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_213$encoder.v:96$912 ($eq).
Removed top 47 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_212$encoder.v:95$911 ($eq).
Removed top 48 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_211$encoder.v:94$910 ($eq).
Removed top 49 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_210$encoder.v:93$909 ($eq).
Removed top 50 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_209$encoder.v:92$908 ($eq).
Removed top 51 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_208$encoder.v:91$907 ($eq).
Removed top 52 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_207$encoder.v:90$906 ($eq).
Removed top 53 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_206$encoder.v:89$905 ($eq).
Removed top 54 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_205$encoder.v:88$904 ($eq).
Removed top 55 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_204$encoder.v:87$903 ($eq).
Removed top 56 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_203$encoder.v:86$902 ($eq).
Removed top 57 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_202$encoder.v:85$901 ($eq).
Removed top 58 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_201$encoder.v:84$900 ($eq).
Removed top 59 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_200$encoder.v:83$899 ($eq).
Removed top 60 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_199$encoder.v:82$898 ($eq).
Removed top 61 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_198$encoder.v:81$897 ($eq).
Removed top 62 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_197$encoder.v:80$896 ($eq).
Removed top 63 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_196$encoder.v:79$895 ($eq).
Removed top 64 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_195$encoder.v:77$894 ($eq).
Removed top 65 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_194$encoder.v:76$893 ($eq).
Removed top 66 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_193$encoder.v:75$892 ($eq).
Removed top 67 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_192$encoder.v:74$891 ($eq).
Removed top 68 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_191$encoder.v:73$890 ($eq).
Removed top 69 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_190$encoder.v:72$889 ($eq).
Removed top 70 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_189$encoder.v:71$888 ($eq).
Removed top 71 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_188$encoder.v:70$887 ($eq).
Removed top 72 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_187$encoder.v:69$886 ($eq).
Removed top 73 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_186$encoder.v:68$885 ($eq).
Removed top 74 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_185$encoder.v:67$884 ($eq).
Removed top 75 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_184$encoder.v:66$883 ($eq).
Removed top 76 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_183$encoder.v:65$882 ($eq).
Removed top 77 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_182$encoder.v:64$881 ($eq).
Removed top 78 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_181$encoder.v:63$880 ($eq).
Removed top 79 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_180$encoder.v:62$879 ($eq).
Removed top 80 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_179$encoder.v:61$878 ($eq).
Removed top 81 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_178$encoder.v:60$877 ($eq).
Removed top 82 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_177$encoder.v:59$876 ($eq).
Removed top 83 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_176$encoder.v:58$875 ($eq).
Removed top 84 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_175$encoder.v:57$874 ($eq).
Removed top 85 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_174$encoder.v:56$873 ($eq).
Removed top 86 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_173$encoder.v:55$872 ($eq).
Removed top 87 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_172$encoder.v:54$871 ($eq).
Removed top 88 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_171$encoder.v:53$870 ($eq).
Removed top 89 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_170$encoder.v:52$869 ($eq).
Removed top 90 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_169$encoder.v:51$868 ($eq).
Removed top 91 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_168$encoder.v:50$867 ($eq).
Removed top 92 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_167$encoder.v:49$866 ($eq).
Removed top 93 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_166$encoder.v:48$865 ($eq).
Removed top 94 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_165$encoder.v:47$864 ($eq).
Removed top 95 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_164$encoder.v:46$863 ($eq).
Removed top 96 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_163$encoder.v:44$862 ($eq).
Removed top 97 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_162$encoder.v:43$861 ($eq).
Removed top 98 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_161$encoder.v:42$860 ($eq).
Removed top 99 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_160$encoder.v:41$859 ($eq).
Removed top 100 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_159$encoder.v:40$858 ($eq).
Removed top 101 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_158$encoder.v:39$857 ($eq).
Removed top 102 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_157$encoder.v:38$856 ($eq).
Removed top 103 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_156$encoder.v:37$855 ($eq).
Removed top 104 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_155$encoder.v:36$854 ($eq).
Removed top 105 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_154$encoder.v:35$853 ($eq).
Removed top 106 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_153$encoder.v:34$852 ($eq).
Removed top 107 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_152$encoder.v:33$851 ($eq).
Removed top 108 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_151$encoder.v:32$850 ($eq).
Removed top 109 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_150$encoder.v:31$849 ($eq).
Removed top 110 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_149$encoder.v:30$848 ($eq).
Removed top 111 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_148$encoder.v:29$847 ($eq).
Removed top 112 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_147$encoder.v:28$846 ($eq).
Removed top 113 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_146$encoder.v:27$845 ($eq).
Removed top 114 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_145$encoder.v:26$844 ($eq).
Removed top 115 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_144$encoder.v:25$843 ($eq).
Removed top 116 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_143$encoder.v:24$842 ($eq).
Removed top 117 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_142$encoder.v:23$841 ($eq).
Removed top 118 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_141$encoder.v:22$840 ($eq).
Removed top 119 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_140$encoder.v:21$839 ($eq).
Removed top 120 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_139$encoder.v:20$838 ($eq).
Removed top 121 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_138$encoder.v:19$837 ($eq).
Removed top 122 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_137$encoder.v:18$836 ($eq).
Removed top 123 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_136$encoder.v:17$835 ($eq).
Removed top 124 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_135$encoder.v:16$834 ($eq).
Removed top 125 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_134$encoder.v:15$833 ($eq).
Removed top 126 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_133$encoder.v:14$832 ($eq).
Removed top 1 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_258$encoder.v:142$957 ($eq).
Removed top 2 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_257$encoder.v:141$956 ($eq).
Removed top 3 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_256$encoder.v:140$955 ($eq).
Removed top 4 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_255$encoder.v:139$954 ($eq).
Removed top 5 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_254$encoder.v:138$953 ($eq).
Removed top 6 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_253$encoder.v:137$952 ($eq).
Removed top 7 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_252$encoder.v:136$951 ($eq).
Removed top 8 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_251$encoder.v:135$950 ($eq).
Removed top 9 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_250$encoder.v:134$949 ($eq).
Removed top 10 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_249$encoder.v:133$948 ($eq).
Removed top 11 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_248$encoder.v:132$947 ($eq).
Removed top 12 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_247$encoder.v:131$946 ($eq).
Removed top 13 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_246$encoder.v:130$945 ($eq).
Removed top 14 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_245$encoder.v:129$944 ($eq).
Removed top 15 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_244$encoder.v:128$943 ($eq).
Removed top 16 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_243$encoder.v:127$942 ($eq).
Removed top 17 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_242$encoder.v:126$941 ($eq).
Removed top 18 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_241$encoder.v:125$940 ($eq).
Removed top 19 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_240$encoder.v:124$939 ($eq).
Removed top 20 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_239$encoder.v:123$938 ($eq).
Removed top 21 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_238$encoder.v:122$937 ($eq).
Removed top 22 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_237$encoder.v:121$936 ($eq).
Removed top 23 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_236$encoder.v:120$935 ($eq).
Removed top 24 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_235$encoder.v:119$934 ($eq).
Removed top 25 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_234$encoder.v:118$933 ($eq).
Removed top 26 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_233$encoder.v:117$932 ($eq).
Removed top 27 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_232$encoder.v:116$931 ($eq).
Removed top 28 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_231$encoder.v:115$930 ($eq).
Removed top 29 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_230$encoder.v:114$929 ($eq).
Removed top 30 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_229$encoder.v:113$928 ($eq).
Removed top 31 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_228$encoder.v:112$927 ($eq).
Removed top 32 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_227$encoder.v:110$926 ($eq).
Removed top 33 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_226$encoder.v:109$925 ($eq).
Removed top 34 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_225$encoder.v:108$924 ($eq).
Removed top 35 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_224$encoder.v:107$923 ($eq).
Removed top 36 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_223$encoder.v:106$922 ($eq).
Removed top 37 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_222$encoder.v:105$921 ($eq).
Removed top 38 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_221$encoder.v:104$920 ($eq).
Removed top 39 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_220$encoder.v:103$919 ($eq).
Removed top 40 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_219$encoder.v:102$918 ($eq).
Removed top 41 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_218$encoder.v:101$917 ($eq).
Removed top 42 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_217$encoder.v:100$916 ($eq).
Removed top 43 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_216$encoder.v:99$915 ($eq).
Removed top 44 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_215$encoder.v:98$914 ($eq).
Removed top 45 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_214$encoder.v:97$913 ($eq).
Removed top 46 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_213$encoder.v:96$912 ($eq).
Removed top 47 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_212$encoder.v:95$911 ($eq).
Removed top 48 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_211$encoder.v:94$910 ($eq).
Removed top 49 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_210$encoder.v:93$909 ($eq).
Removed top 50 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_209$encoder.v:92$908 ($eq).
Removed top 51 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_208$encoder.v:91$907 ($eq).
Removed top 52 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_207$encoder.v:90$906 ($eq).
Removed top 53 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_206$encoder.v:89$905 ($eq).
Removed top 54 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_205$encoder.v:88$904 ($eq).
Removed top 55 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_204$encoder.v:87$903 ($eq).
Removed top 56 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_203$encoder.v:86$902 ($eq).
Removed top 57 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_202$encoder.v:85$901 ($eq).
Removed top 58 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_201$encoder.v:84$900 ($eq).
Removed top 59 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_200$encoder.v:83$899 ($eq).
Removed top 60 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_199$encoder.v:82$898 ($eq).
Removed top 61 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_198$encoder.v:81$897 ($eq).
Removed top 62 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_197$encoder.v:80$896 ($eq).
Removed top 63 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_196$encoder.v:79$895 ($eq).
Removed top 64 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_195$encoder.v:77$894 ($eq).
Removed top 65 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_194$encoder.v:76$893 ($eq).
Removed top 66 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_193$encoder.v:75$892 ($eq).
Removed top 67 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_192$encoder.v:74$891 ($eq).
Removed top 68 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_191$encoder.v:73$890 ($eq).
Removed top 69 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_190$encoder.v:72$889 ($eq).
Removed top 70 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_189$encoder.v:71$888 ($eq).
Removed top 71 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_188$encoder.v:70$887 ($eq).
Removed top 72 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_187$encoder.v:69$886 ($eq).
Removed top 73 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_186$encoder.v:68$885 ($eq).
Removed top 74 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_185$encoder.v:67$884 ($eq).
Removed top 75 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_184$encoder.v:66$883 ($eq).
Removed top 76 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_183$encoder.v:65$882 ($eq).
Removed top 77 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_182$encoder.v:64$881 ($eq).
Removed top 78 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_181$encoder.v:63$880 ($eq).
Removed top 79 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_180$encoder.v:62$879 ($eq).
Removed top 80 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_179$encoder.v:61$878 ($eq).
Removed top 81 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_178$encoder.v:60$877 ($eq).
Removed top 82 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_177$encoder.v:59$876 ($eq).
Removed top 83 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_176$encoder.v:58$875 ($eq).
Removed top 84 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_175$encoder.v:57$874 ($eq).
Removed top 85 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_174$encoder.v:56$873 ($eq).
Removed top 86 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_173$encoder.v:55$872 ($eq).
Removed top 87 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_172$encoder.v:54$871 ($eq).
Removed top 88 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_171$encoder.v:53$870 ($eq).
Removed top 89 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_170$encoder.v:52$869 ($eq).
Removed top 90 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_169$encoder.v:51$868 ($eq).
Removed top 91 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_168$encoder.v:50$867 ($eq).
Removed top 92 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_167$encoder.v:49$866 ($eq).
Removed top 93 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_166$encoder.v:48$865 ($eq).
Removed top 94 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_165$encoder.v:47$864 ($eq).
Removed top 95 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_164$encoder.v:46$863 ($eq).
Removed top 96 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_163$encoder.v:44$862 ($eq).
Removed top 97 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_162$encoder.v:43$861 ($eq).
Removed top 98 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_161$encoder.v:42$860 ($eq).
Removed top 99 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_160$encoder.v:41$859 ($eq).
Removed top 100 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_159$encoder.v:40$858 ($eq).
Removed top 101 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_158$encoder.v:39$857 ($eq).
Removed top 102 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_157$encoder.v:38$856 ($eq).
Removed top 103 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_156$encoder.v:37$855 ($eq).
Removed top 104 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_155$encoder.v:36$854 ($eq).
Removed top 105 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_154$encoder.v:35$853 ($eq).
Removed top 106 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_153$encoder.v:34$852 ($eq).
Removed top 107 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_152$encoder.v:33$851 ($eq).
Removed top 108 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_151$encoder.v:32$850 ($eq).
Removed top 109 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_150$encoder.v:31$849 ($eq).
Removed top 110 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_149$encoder.v:30$848 ($eq).
Removed top 111 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_148$encoder.v:29$847 ($eq).
Removed top 112 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_147$encoder.v:28$846 ($eq).
Removed top 113 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_146$encoder.v:27$845 ($eq).
Removed top 114 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_145$encoder.v:26$844 ($eq).
Removed top 115 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_144$encoder.v:25$843 ($eq).
Removed top 116 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_143$encoder.v:24$842 ($eq).
Removed top 117 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_142$encoder.v:23$841 ($eq).
Removed top 118 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_141$encoder.v:22$840 ($eq).
Removed top 119 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_140$encoder.v:21$839 ($eq).
Removed top 120 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_139$encoder.v:20$838 ($eq).
Removed top 121 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_138$encoder.v:19$837 ($eq).
Removed top 122 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_137$encoder.v:18$836 ($eq).
Removed top 123 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_136$encoder.v:17$835 ($eq).
Removed top 124 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_135$encoder.v:16$834 ($eq).
Removed top 125 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_134$encoder.v:15$833 ($eq).
Removed top 126 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_133$encoder.v:14$832 ($eq).

yosys> peepopt

3.15. Executing PEEPOPT pass (run peephole optimizers).

yosys> pmuxtree

3.16. Executing PMUXTREE pass.

yosys> opt_clean

3.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 4 unused cells and 6 unused wires.
<suppressed ~5 debug messages>

yosys> techmap

3.18. Executing TECHMAP pass (map to technology primitives).

3.18.1. Executing Verilog-2005 frontend: /home/users/meri/Documents/workspace/clean/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/meri/Documents/workspace/clean/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.18.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $sdff.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $bmux.
No more expansions possible.
<suppressed ~695 debug messages>

yosys> alumacc

3.19. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module top:
  created 0 $alu and 0 $macc cells.

yosys> opt

3.20. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~65410 debug messages>

yosys> opt_merge -nomux

3.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~94494 debug messages>
Removed a total of 31498 cells.

yosys> opt_muxtree

3.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_dff

3.20.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.20.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 718 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.20.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.20.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.20.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.20.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.20.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_dff

3.20.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.20.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

yosys> opt_expr

3.20.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.20.16. Finished OPT passes. (There is nothing left to do.)

yosys> memory -nomap

3.21. Executing MEMORY pass.

yosys> opt_mem

3.21.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

yosys> opt_mem_priority

3.21.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

yosys> opt_mem_feedback

3.21.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

yosys> memory_dff

3.21.4. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

yosys> opt_clean

3.21.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

yosys> memory_share

3.21.6. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

yosys> opt_mem_widen

3.21.7. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

yosys> opt_clean

3.21.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

yosys> memory_collect

3.21.9. Executing MEMORY_COLLECT pass (generating $mem cells).

yosys> opt_clean

3.22. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

yosys> stat

3.23. Printing statistics.

=== top ===

   Number of wires:               2626
   Number of wire bits:          68122
   Number of public wires:          20
   Number of public wire bits:    1338
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               3842
     $_MUX_                        776
     $_NOT_                        526
     $_OR_                        2270
     $_SDFF_PP0_                   270


yosys> shregmap -minlen 8 -maxlen 20

3.24. Executing SHREGMAP pass (map shift registers).
Converted 0 dff cells into 0 shift registers.

yosys> dfflegalize -cell $_DFF_?_ 0 -cell $_DFF_???_ 0 -cell $_DFFE_????_ 0 -cell $_DFFSR_???_ 0 -cell $_DFFSRE_????_ 0 -cell $_DLATCHSR_PPP_ 0

3.25. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

yosys> stat

3.26. Printing statistics.

=== top ===

   Number of wires:               2896
   Number of wire bits:          68392
   Number of public wires:          20
   Number of public wire bits:    1338
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               4112
     $_DFF_P_                      270
     $_MUX_                       1046
     $_NOT_                        526
     $_OR_                        2270


yosys> techmap -map +/techmap.v -map +/rapidsilicon/genesis/ffs_map.v

3.27. Executing TECHMAP pass (map to technology primitives).

3.27.1. Executing Verilog-2005 frontend: /home/users/meri/Documents/workspace/clean/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/meri/Documents/workspace/clean/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.27.2. Executing Verilog-2005 frontend: /home/users/meri/Documents/workspace/clean/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/ffs_map.v
Parsing Verilog input from `/home/users/meri/Documents/workspace/clean/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/ffs_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP0N_'.
Generating RTLIL representation for module `\$_DFFE_PN0P_'.
Generating RTLIL representation for module `\$_DFFE_PN0N_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP1N_'.
Generating RTLIL representation for module `\$_DFFE_PN1P_'.
Generating RTLIL representation for module `\$_DFFE_PN1N_'.
Generating RTLIL representation for module `\$_DFFSR_PPP_'.
Generating RTLIL representation for module `\$_DFFSR_PNP_'.
Generating RTLIL representation for module `\$_DFFSR_PNN_'.
Generating RTLIL representation for module `\$_DFFSR_PPN_'.
Generating RTLIL representation for module `\$_DFFSR_NPP_'.
Generating RTLIL representation for module `\$_DFFSR_NNP_'.
Generating RTLIL representation for module `\$_DFFSR_NNN_'.
Generating RTLIL representation for module `\$_DFFSR_NPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PNPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPNP_'.
Generating RTLIL representation for module `\$_DFFSRE_PNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PNPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PPNN_'.
Generating RTLIL representation for module `\$_DFFSRE_PNNN_'.
Generating RTLIL representation for module `\$_DLATCHSR_PPP_'.
Generating RTLIL representation for module `\$_DLATCHSR_NPP_'.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP0N_'.
Generating RTLIL representation for module `\$_DFFE_NN0P_'.
Generating RTLIL representation for module `\$_DFFE_NN0N_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_NP1N_'.
Generating RTLIL representation for module `\$_DFFE_NN1P_'.
Generating RTLIL representation for module `\$_DFFE_NN1N_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNPP_'.
Generating RTLIL representation for module `\$_DFFSRE_NPNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPN_'.
Generating RTLIL representation for module `\$_DFFSRE_NNPN_'.
Generating RTLIL representation for module `\$_DFFSRE_NPNN_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNN_'.
Generating RTLIL representation for module `\$__SHREG_DFF_P_'.
Successfully finished Verilog frontend.

3.27.3. Continuing TECHMAP pass.
Using template \$_DFF_P_ for cells of type $_DFF_P_.
No more expansions possible.
<suppressed ~398 debug messages>

yosys> opt_expr -mux_undef

3.28. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

yosys> simplemap

3.29. Executing SIMPLEMAP pass (map simple cells to gate primitives).

yosys> opt_expr

3.30. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

yosys> opt_merge

3.31. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.32. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.33. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 810 unused wires.
<suppressed ~1 debug messages>

yosys> opt -nodffe -nosdff

3.34. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.34.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

yosys> opt_merge -nomux

3.34.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.34.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.34.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.34.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.34.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.34.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

yosys> opt_expr

3.34.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.34.9. Finished OPT passes. (There is nothing left to do.)

yosys> opt -fast -full

3.35. Executing OPT pass (performing simple optimizations).

yosys> opt_expr -full

3.35.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~252 debug messages>

yosys> opt_merge

3.35.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_dff

3.35.3. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.35.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

3.35.5. Finished fast OPT passes.

yosys> memory_map

3.36. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

yosys> opt -full

3.37. Executing OPT pass (performing simple optimizations).

yosys> opt_expr -full

3.37.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

yosys> opt_merge -nomux

3.37.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.37.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce -full

3.37.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.37.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_share

3.37.6. Executing OPT_SHARE pass.

yosys> opt_dff

3.37.7. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.37.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

yosys> opt_expr -full

3.37.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.37.10. Finished OPT passes. (There is nothing left to do.)

yosys> techmap

3.38. Executing TECHMAP pass (map to technology primitives).

3.38.1. Executing Verilog-2005 frontend: /home/users/meri/Documents/workspace/clean/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/meri/Documents/workspace/clean/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.38.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~71 debug messages>

yosys> opt

3.39. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.39.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

yosys> opt_merge -nomux

3.39.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.39.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.39.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.39.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_dff

3.39.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.39.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

yosys> opt_expr

3.39.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.39.9. Finished OPT passes. (There is nothing left to do.)

yosys> abc -script abc_tmp.scr

3.40. Executing ABC pass (technology mapping using ABC).

3.40.1. Extracting gate netlist of module `\top' to `<abc-temp-dir>/input.blif'..
Extracted 3842 gates and 4371 wires to a netlist network with 527 inputs and 526 outputs.

3.40.1.1. Executing ABC.
Running ABC command: /home/users/meri/Documents/workspace/clean/yosys_verific_rs/logic_synthesis-rs/abc-rs/abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + source /home/users/meri/Documents/workspace/clean/yosys_verific_rs/result_18-03-2022T17-26-14/All_lut_synth_rs_area.json/multi_enc_decx2x4/abc_tmp.scr 
ABC: netlist  : i/o =    527/    526  and =    3291  lev =   30 (4.08)  mem = 0.07 MB
ABC: Mapping (K=6)  :  lut =   1146  edge =    3952  lev =   14 (1.79)  mem = 0.04 MB
ABC: netlist  : i/o =    527/    526  and =    3448  lev =   26 (3.28)  mem = 0.07 MB
ABC: Mapping (K=6)  :  lut =    955  edge =    3659  lev =   15 (1.78)  mem = 0.04 MB
ABC: netlist  : i/o =    527/    526  and =    3494  lev =   25 (3.26)  mem = 0.07 MB
ABC: Mapping (K=6)  :  lut =    925  edge =    3588  lev =   13 (1.77)  mem = 0.04 MB
ABC: netlist  : i/o =    527/    526  and =    3513  lev =   24 (2.60)  mem = 0.07 MB
ABC: Mapping (K=6)  :  lut =    923  edge =    3530  lev =   13 (1.77)  mem = 0.04 MB
ABC: netlist  : i/o =    527/    526  and =    3314  lev =   26 (3.27)  mem = 0.07 MB
ABC: Mapping (K=6)  :  lut =    903  edge =    3430  lev =   14 (1.77)  mem = 0.04 MB
ABC: netlist  : i/o =    527/    526  and =    3311  lev =   26 (3.25)  mem = 0.08 MB
ABC: Mapping (K=6)  :  lut =    879  edge =    3424  lev =   13 (1.76)  mem = 0.04 MB
ABC: netlist  : i/o =    527/    526  and =    3446  lev =   28 (3.27)  mem = 0.09 MB
ABC: Mapping (K=6)  :  lut =    873  edge =    3537  lev =   12 (1.73)  mem = 0.04 MB
ABC: netlist  : i/o =    527/    526  and =    3423  lev =   26 (3.32)  mem = 0.09 MB
ABC: Mapping (K=6)  :  lut =    865  edge =    3520  lev =   12 (1.73)  mem = 0.04 MB
ABC: netlist  : i/o =    527/    526  and =    3486  lev =   24 (2.90)  mem = 0.09 MB
ABC: Mapping (K=6)  :  lut =    863  edge =    3494  lev =   13 (1.72)  mem = 0.04 MB
ABC: netlist  : i/o =    527/    526  and =    3345  lev =   24 (3.27)  mem = 0.08 MB
ABC: Mapping (K=6)  :  lut =    859  edge =    3415  lev =   12 (1.71)  mem = 0.04 MB
ABC: netlist  : i/o =    527/    526  and =    3324  lev =   26 (3.27)  mem = 0.08 MB
ABC: Mapping (K=6)  :  lut =    859  edge =    3390  lev =   12 (1.72)  mem = 0.04 MB
ABC: netlist  : i/o =    527/    526  and =    3449  lev =   24 (3.25)  mem = 0.09 MB
ABC: Mapping (K=6)  :  lut =    853  edge =    3386  lev =   12 (1.72)  mem = 0.04 MB
ABC: netlist  : i/o =    527/    526  and =    3351  lev =   26 (3.26)  mem = 0.08 MB
ABC: Mapping (K=6)  :  lut =    852  edge =    3395  lev =   12 (1.72)  mem = 0.04 MB
ABC: netlist  : i/o =    527/    526  and =    3351  lev =   26 (3.26)  mem = 0.07 MB
ABC: Mapping (K=6)  :  lut =    852  edge =    3395  lev =   12 (1.72)  mem = 0.04 MB
ABC: netlist  : i/o =    527/    526  and =    3351  lev =   26 (3.26)  mem = 0.08 MB
ABC: Mapping (K=6)  :  lut =    852  edge =    3395  lev =   12 (1.72)  mem = 0.04 MB
ABC: netlist  : i/o =    527/    526  and =    3360  lev =   26 (3.26)  mem = 0.07 MB
ABC: Mapping (K=6)  :  lut =    852  edge =    3395  lev =   12 (1.72)  mem = 0.04 MB
ABC: + write_blif <abc-temp-dir>/output.blif 

3.40.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:      852
ABC RESULTS:        internal signals:     3318
ABC RESULTS:           input signals:      527
ABC RESULTS:          output signals:      526
Removing temp directory.

yosys> opt

3.41. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.41.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

yosys> opt_merge -nomux

3.41.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.41.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.41.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.41.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_dff

3.41.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.41.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 3663 unused wires.
<suppressed ~5 debug messages>

yosys> opt_expr

3.41.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.41.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.41.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.41.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.41.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_dff

3.41.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.41.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

yosys> opt_expr

3.41.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.41.16. Finished OPT passes. (There is nothing left to do.)

yosys> hierarchy -check

3.42. Executing HIERARCHY pass (managing design hierarchy).

3.42.1. Analyzing design hierarchy..
Top module:  \top

3.42.2. Analyzing design hierarchy..
Top module:  \top
Removed 0 unused modules.

yosys> stat

3.43. Printing statistics.

=== top ===

   Number of wires:                612
   Number of wire bits:           1906
   Number of public wires:          16
   Number of public wire bits:    1310
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1122
     $lut                          852
     dff                           270


yosys> opt_clean -purge

3.44. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 6 unused wires.
<suppressed ~6 debug messages>

yosys> write_verilog -noattr -nohex top.verilog

3.45. Executing Verilog backend.

yosys> bmuxmap

3.45.1. Executing BMUXMAP pass.

yosys> demuxmap

3.45.2. Executing DEMUXMAP pass.

yosys> clean_zerowidth
Dumping module `\top'.

End of script. Logfile hash: f3c8ac8ed7, CPU: user 14.73s system 0.34s, MEM: 200.40 MB peak
Yosys 0.14+36 (git sha1 4cd3e3b51, gcc 7.1.0 -fPIC -Os)
Time spent: 38% 1x abc (9 sec), 25% 23x opt_expr (6 sec), ...
real 24.45
user 23.38
sys 1.06
