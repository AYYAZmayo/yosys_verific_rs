
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.14+36 (git sha1 4cd3e3b51, gcc 7.1.0 -fPIC -Os)


-- Executing script file `yosys.ys' --
echo on

yosys> plugin -i synth-rs

yosys> read -verific

yosys> read -incdir .

yosys> verific -vlog-incdir .

1. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Jan22_SW_Release, released at Sat Jan 29 02:42:49 2022.

yosys> verilog_defaults -add -I.

yosys> read -vlog2k DMA_DEFINE.vh DMA_FIX_DEFINE.vh dma_ahbdec.v dma_ahbmst.v dma_ahbmux.v dma_ahbslv.v dma_chrf.v dma_chsel.v dma_ctlrf.v dma_engine.v dma_fifo.v dma_rrarb.v dma_top.v

yosys> verific -vlog2k DMA_DEFINE.vh DMA_FIX_DEFINE.vh dma_ahbdec.v dma_ahbmst.v dma_ahbmux.v dma_ahbslv.v dma_chrf.v dma_chsel.v dma_ctlrf.v dma_engine.v dma_fifo.v dma_rrarb.v dma_top.v

2. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Jan22_SW_Release, released at Sat Jan 29 02:42:49 2022.
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'DMA_DEFINE.vh'
VERIFIC-INFO [VERI-1328] DMA_DEFINE.vh:90: analyzing included file 'DMA_FIX_DEFINE.vh'
VERIFIC-INFO [VERI-2320] DMA_DEFINE.vh:90: back to file 'DMA_DEFINE.vh'
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'DMA_FIX_DEFINE.vh'
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'dma_ahbdec.v'
VERIFIC-INFO [VERI-1328] dma_ahbdec.v:38: analyzing included file 'DMA_DEFINE.vh'
VERIFIC-INFO [VERI-1328] DMA_DEFINE.vh:90: analyzing included file 'DMA_FIX_DEFINE.vh'
VERIFIC-INFO [VERI-2320] DMA_DEFINE.vh:90: back to file 'DMA_DEFINE.vh'
VERIFIC-INFO [VERI-2320] dma_ahbdec.v:38: back to file 'dma_ahbdec.v'
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'dma_ahbmst.v'
VERIFIC-INFO [VERI-1328] dma_ahbmst.v:39: analyzing included file 'DMA_DEFINE.vh'
VERIFIC-INFO [VERI-1328] DMA_DEFINE.vh:90: analyzing included file 'DMA_FIX_DEFINE.vh'
VERIFIC-INFO [VERI-2320] DMA_DEFINE.vh:90: back to file 'DMA_DEFINE.vh'
VERIFIC-INFO [VERI-2320] dma_ahbmst.v:39: back to file 'dma_ahbmst.v'
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'dma_ahbmux.v'
VERIFIC-INFO [VERI-1328] dma_ahbmux.v:39: analyzing included file 'DMA_DEFINE.vh'
VERIFIC-INFO [VERI-1328] DMA_DEFINE.vh:90: analyzing included file 'DMA_FIX_DEFINE.vh'
VERIFIC-INFO [VERI-2320] DMA_DEFINE.vh:90: back to file 'DMA_DEFINE.vh'
VERIFIC-INFO [VERI-2320] dma_ahbmux.v:39: back to file 'dma_ahbmux.v'
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'dma_ahbslv.v'
VERIFIC-INFO [VERI-1328] dma_ahbslv.v:40: analyzing included file 'DMA_DEFINE.vh'
VERIFIC-INFO [VERI-1328] DMA_DEFINE.vh:90: analyzing included file 'DMA_FIX_DEFINE.vh'
VERIFIC-INFO [VERI-2320] DMA_DEFINE.vh:90: back to file 'DMA_DEFINE.vh'
VERIFIC-INFO [VERI-2320] dma_ahbslv.v:40: back to file 'dma_ahbslv.v'
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'dma_chrf.v'
VERIFIC-INFO [VERI-1328] dma_chrf.v:39: analyzing included file 'DMA_DEFINE.vh'
VERIFIC-INFO [VERI-1328] DMA_DEFINE.vh:90: analyzing included file 'DMA_FIX_DEFINE.vh'
VERIFIC-INFO [VERI-2320] DMA_DEFINE.vh:90: back to file 'DMA_DEFINE.vh'
VERIFIC-INFO [VERI-2320] dma_chrf.v:39: back to file 'dma_chrf.v'
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'dma_chsel.v'
VERIFIC-INFO [VERI-1328] dma_chsel.v:41: analyzing included file 'DMA_DEFINE.vh'
VERIFIC-INFO [VERI-1328] DMA_DEFINE.vh:90: analyzing included file 'DMA_FIX_DEFINE.vh'
VERIFIC-INFO [VERI-2320] DMA_DEFINE.vh:90: back to file 'DMA_DEFINE.vh'
VERIFIC-INFO [VERI-2320] dma_chsel.v:41: back to file 'dma_chsel.v'
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'dma_ctlrf.v'
VERIFIC-INFO [VERI-1328] dma_ctlrf.v:41: analyzing included file 'DMA_DEFINE.vh'
VERIFIC-INFO [VERI-1328] DMA_DEFINE.vh:90: analyzing included file 'DMA_FIX_DEFINE.vh'
VERIFIC-INFO [VERI-2320] DMA_DEFINE.vh:90: back to file 'DMA_DEFINE.vh'
VERIFIC-INFO [VERI-2320] dma_ctlrf.v:41: back to file 'dma_ctlrf.v'
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'dma_engine.v'
VERIFIC-INFO [VERI-1328] dma_engine.v:39: analyzing included file 'DMA_DEFINE.vh'
VERIFIC-INFO [VERI-1328] DMA_DEFINE.vh:90: analyzing included file 'DMA_FIX_DEFINE.vh'
VERIFIC-INFO [VERI-2320] DMA_DEFINE.vh:90: back to file 'DMA_DEFINE.vh'
VERIFIC-INFO [VERI-2320] dma_engine.v:39: back to file 'dma_engine.v'
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'dma_fifo.v'
VERIFIC-INFO [VERI-1328] dma_fifo.v:44: analyzing included file 'DMA_DEFINE.vh'
VERIFIC-INFO [VERI-1328] DMA_DEFINE.vh:90: analyzing included file 'DMA_FIX_DEFINE.vh'
VERIFIC-INFO [VERI-2320] DMA_DEFINE.vh:90: back to file 'DMA_DEFINE.vh'
VERIFIC-INFO [VERI-2320] dma_fifo.v:44: back to file 'dma_fifo.v'
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'dma_rrarb.v'
VERIFIC-INFO [VERI-1328] dma_rrarb.v:40: analyzing included file 'DMA_DEFINE.vh'
VERIFIC-INFO [VERI-1328] DMA_DEFINE.vh:90: analyzing included file 'DMA_FIX_DEFINE.vh'
VERIFIC-INFO [VERI-2320] DMA_DEFINE.vh:90: back to file 'DMA_DEFINE.vh'
VERIFIC-INFO [VERI-2320] dma_rrarb.v:40: back to file 'dma_rrarb.v'
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'dma_top.v'
VERIFIC-INFO [VERI-1328] dma_top.v:38: analyzing included file 'DMA_DEFINE.vh'
VERIFIC-INFO [VERI-1328] DMA_DEFINE.vh:90: analyzing included file 'DMA_FIX_DEFINE.vh'
VERIFIC-INFO [VERI-2320] DMA_DEFINE.vh:90: back to file 'DMA_DEFINE.vh'
VERIFIC-INFO [VERI-2320] dma_top.v:38: back to file 'dma_top.v'
VERIFIC-INFO [VERI-2561] dma_top.v:689: undeclared symbol 'de_err_notify', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:691: undeclared symbol 'st_llp0t3', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:693: undeclared symbol 'dst_m', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:694: undeclared symbol 'src_m', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:695: undeclared symbol 'dst_a', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:696: undeclared symbol 'src_a', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:697: undeclared symbol 'dst_e', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:698: undeclared symbol 'src_e', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:699: undeclared symbol 'dst_wid_wd', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:700: undeclared symbol 'src_wid_wd', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:701: undeclared symbol 'dst_wid_hw', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:702: undeclared symbol 'src_wid_hw', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:703: undeclared symbol 'dst_wid_bt', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:704: undeclared symbol 'src_wid_bt', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:706: undeclared symbol 'bst_eq0', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:707: undeclared symbol 'bst_eq1', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:708: undeclared symbol 'bst_eq2', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:709: undeclared symbol 'tsz_eq0', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:710: undeclared symbol 'tsz_eq1', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:711: undeclared symbol 'tsz_eq2', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:712: undeclared symbol 'cv8t32', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:713: undeclared symbol 'cv8t16', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:714: undeclared symbol 'cv16t32', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:715: undeclared symbol 'cvtp2', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:716: undeclared symbol 'pack_en', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:717: undeclared symbol 'pack_end', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:718: undeclared symbol 'unpack_en', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:719: undeclared symbol 'upk_cnteq0', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:720: undeclared symbol 'upk_cnteq1', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:732: undeclared symbol 'm0_cp', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:733: undeclared symbol 'm0_tr_sq', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:734: undeclared symbol 'm0_rp_err', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:736: undeclared symbol 'm0_rp_rty', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:740: undeclared symbol 'm0_dma_err_ok', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:743: undeclared symbol 'm0_is_dst', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:744: undeclared symbol 'm0_is_src', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:746: undeclared symbol 'm0_is_llp', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:748: undeclared symbol 'm0_arb_src', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:749: undeclared symbol 'm0_arb_dst', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:762: undeclared symbol 'm1_cp', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:763: undeclared symbol 'm1_tr_sq', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:764: undeclared symbol 'm1_rp_err', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:765: undeclared symbol 'm1_rp_rty', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:768: undeclared symbol 'm1_dtp', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:769: undeclared symbol 'm1_dma_had_a_rty', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:771: undeclared symbol 'm1_dma_err_ok', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:774: undeclared symbol 'm1_is_dst', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:775: undeclared symbol 'm1_is_src', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:777: undeclared symbol 'm1_is_llp', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:779: undeclared symbol 'm1_arb_src', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:780: undeclared symbol 'm1_arb_dst', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:783: undeclared symbol 'm1_src2br', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:785: undeclared symbol 'm0_m1_same', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:794: undeclared symbol 'm1_arb_br', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:798: undeclared symbol 'slv_br_req', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:801: undeclared symbol 'slv_brst_cmd', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:802: undeclared symbol 'slv_brst_mscd', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:805: undeclared symbol 'br_req_qf', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:811: undeclared symbol 'ff_eq1', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:812: undeclared symbol 'ff_eq2', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:813: undeclared symbol 'ff_2ltfl', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:814: undeclared symbol 'ff_1ltfl', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:815: undeclared symbol 'ff_part_wd', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:819: undeclared symbol 'ff_wr', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:822: undeclared symbol 'de_ff_push', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:823: undeclared symbol 'de_ff_pop', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:824: undeclared symbol 'de_ff_ahead', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:825: undeclared symbol 'de_ff_flush', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:826: undeclared symbol 'de_ff_clear', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:827: undeclared symbol 'de_ff_ini', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:833: undeclared symbol 'arb_req', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:840: undeclared symbol 'arb_chllpen', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:844: undeclared symbol 'de_ack', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:845: undeclared symbol 'de_tc_st', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:849: undeclared symbol 'rf_cherr', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:850: undeclared symbol 'arb_chabt', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:852: undeclared symbol 'arb_abt_any', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:863: undeclared symbol 'de_llpen', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:865: undeclared symbol 'de_busy', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:866: undeclared symbol 'de_sad_we', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:867: undeclared symbol 'de_dad_we', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:868: undeclared symbol 'de_tsz_we', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:870: undeclared symbol 'de_llp_we', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:871: undeclared symbol 'de_csr_we', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:872: undeclared symbol 'de_llpen_we', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:874: undeclared symbol 'de_en_clr', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:876: undeclared symbol 'de_abt_on_idle', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:877: undeclared symbol 'de_err_st', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:903: undeclared symbol 'slv_wr_d1', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:936: undeclared symbol 'ff_geth', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:938: undeclared symbol 'ff_q_full', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:939: undeclared symbol 'ff_empty', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:1152: undeclared symbol 'h1req', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:1223: undeclared symbol 'slv_rf_req', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:1288: undeclared symbol 'c0llpen', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:1290: undeclared symbol 'c0abt', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:1310: undeclared symbol 'c1llpen', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:1312: undeclared symbol 'c1abt', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:1333: undeclared symbol 'c2llpen', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:1336: undeclared symbol 'c2abt', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:1358: undeclared symbol 'c3llpen', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:1361: undeclared symbol 'c3abt', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:1383: undeclared symbol 'c4llpen', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:1386: undeclared symbol 'c4abt', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:1408: undeclared symbol 'c5llpen', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:1411: undeclared symbol 'c5abt', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:1433: undeclared symbol 'c6llpen', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:1436: undeclared symbol 'c6abt', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:1458: undeclared symbol 'c7llpen', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:1461: undeclared symbol 'c7abt', assumed default net type 'wire'

yosys> synth_rs -top dma_top -tech genesis -goal area -de -no_dsp -no_bram -verilog dma_top.verilog

3. Executing synth_rs pass.

yosys> read_verilog -lib -specify -nomem2reg +/rapidsilicon/common/cells_sim.v +/rapidsilicon/genesis/cells_sim.v

3.1. Executing Verilog-2005 frontend: /home/users/meri/Documents/workspace/clean/for_push/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v
Parsing Verilog input from `/home/users/meri/Documents/workspace/clean/for_push/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\inv'.
Generating RTLIL representation for module `\buff'.
Generating RTLIL representation for module `\logic_0'.
Generating RTLIL representation for module `\logic_1'.
Generating RTLIL representation for module `\gclkbuff'.
Successfully finished Verilog frontend.

3.2. Executing Verilog-2005 frontend: /home/users/meri/Documents/workspace/clean/for_push/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/cells_sim.v
Parsing Verilog input from `/home/users/meri/Documents/workspace/clean/for_push/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\dff'.
Generating RTLIL representation for module `\dffn'.
Generating RTLIL representation for module `\dffsre'.
Generating RTLIL representation for module `\dffnsre'.
Generating RTLIL representation for module `\latchsre'.
Generating RTLIL representation for module `\latchnsre'.
Generating RTLIL representation for module `\io_scff'.
Generating RTLIL representation for module `\scff'.
Generating RTLIL representation for module `\sh_dff'.
Successfully finished Verilog frontend.

yosys> hierarchy -check -top dma_top

3.3. Executing HIERARCHY pass (managing design hierarchy).
VERIFIC-INFO [VERI-1018] dma_top.v:40: compiling module 'dma_top'
VERIFIC-INFO [VERI-1018] dma_engine.v:41: compiling module 'dma_engine'
VERIFIC-WARNING [VERI-1209] dma_engine.v:1379: expression size 32 truncated to fit in target size 12
VERIFIC-WARNING [VERI-1209] dma_engine.v:1522: expression size 32 truncated to fit in target size 9
VERIFIC-WARNING [VERI-1209] dma_engine.v:1630: expression size 32 truncated to fit in target size 2
VERIFIC-INFO [VERI-1018] dma_ahbmst.v:41: compiling module 'dma_ahbmst(THIS_IS_M1=0)'
VERIFIC-WARNING [VERI-1209] dma_ahbmst.v:414: expression size 32 truncated to fit in target size 1
VERIFIC-WARNING [VERI-1209] dma_ahbmst.v:464: expression size 32 truncated to fit in target size 1
VERIFIC-WARNING [VERI-1209] dma_ahbmst.v:519: expression size 32 truncated to fit in target size 1
VERIFIC-WARNING [VERI-1209] dma_ahbmst.v:635: expression size 32 truncated to fit in target size 1
VERIFIC-WARNING [VERI-1209] dma_ahbmst.v:660: expression size 32 truncated to fit in target size 1
VERIFIC-WARNING [VERI-1209] dma_ahbmst.v:799: expression size 32 truncated to fit in target size 1
VERIFIC-WARNING [VERI-1209] dma_ahbmst.v:1096: expression size 17 truncated to fit in target size 16
VERIFIC-WARNING [VERI-1209] dma_ahbmst.v:1097: expression size 32 truncated to fit in target size 16
VERIFIC-INFO [VERI-1018] dma_ahbmst.v:41: compiling module 'dma_ahbmst'
VERIFIC-WARNING [VERI-1209] dma_ahbmst.v:414: expression size 32 truncated to fit in target size 1
VERIFIC-WARNING [VERI-1209] dma_ahbmst.v:464: expression size 32 truncated to fit in target size 1
VERIFIC-WARNING [VERI-1209] dma_ahbmst.v:519: expression size 32 truncated to fit in target size 1
VERIFIC-WARNING [VERI-1209] dma_ahbmst.v:635: expression size 32 truncated to fit in target size 1
VERIFIC-WARNING [VERI-1209] dma_ahbmst.v:660: expression size 32 truncated to fit in target size 1
VERIFIC-WARNING [VERI-1209] dma_ahbmst.v:799: expression size 32 truncated to fit in target size 1
VERIFIC-WARNING [VERI-1209] dma_ahbmst.v:1096: expression size 17 truncated to fit in target size 16
VERIFIC-WARNING [VERI-1209] dma_ahbmst.v:1097: expression size 32 truncated to fit in target size 16
VERIFIC-INFO [VERI-1018] dma_fifo.v:48: compiling module 'dma_fifo'
VERIFIC-WARNING [VERI-1209] dma_fifo.v:419: expression size 4 truncated to fit in target size 3
VERIFIC-WARNING [VERI-1209] dma_fifo.v:427: expression size 4 truncated to fit in target size 3
VERIFIC-WARNING [VERI-1209] dma_fifo.v:438: expression size 5 truncated to fit in target size 4
VERIFIC-WARNING [VERI-1209] dma_fifo.v:440: expression size 32 truncated to fit in target size 4
VERIFIC-INFO [VERI-1018] dma_fifo.v:458: compiling module 'ff_ram'
VERIFIC-INFO [VERI-2571] dma_fifo.v:479: extracting RAM for identifier 'ram_dt'
VERIFIC-INFO [VERI-1018] dma_ctlrf.v:43: compiling module 'dma_ctlrf'
VERIFIC-INFO [VERI-1018] dma_chrf.v:41: compiling module 'dma_chrf'
VERIFIC-WARNING [VERI-1209] dma_chrf.v:279: expression size 5 truncated to fit in target size 4
VERIFIC-INFO [VERI-1018] dma_chrf.v:41: compiling module 'dma_chrf(CH_NO=1)'
VERIFIC-WARNING [VERI-1209] dma_chrf.v:279: expression size 5 truncated to fit in target size 4
VERIFIC-INFO [VERI-1018] dma_chrf.v:41: compiling module 'dma_chrf(CH_NO=2)'
VERIFIC-WARNING [VERI-1209] dma_chrf.v:279: expression size 5 truncated to fit in target size 4
VERIFIC-INFO [VERI-1018] dma_chrf.v:41: compiling module 'dma_chrf(CH_NO=3)'
VERIFIC-WARNING [VERI-1209] dma_chrf.v:279: expression size 5 truncated to fit in target size 4
VERIFIC-INFO [VERI-1018] dma_chrf.v:41: compiling module 'dma_chrf(CH_NO=4)'
VERIFIC-WARNING [VERI-1209] dma_chrf.v:279: expression size 5 truncated to fit in target size 4
VERIFIC-INFO [VERI-1018] dma_chrf.v:41: compiling module 'dma_chrf(CH_NO=5)'
VERIFIC-WARNING [VERI-1209] dma_chrf.v:279: expression size 5 truncated to fit in target size 4
VERIFIC-INFO [VERI-1018] dma_chrf.v:41: compiling module 'dma_chrf(CH_NO=6)'
VERIFIC-WARNING [VERI-1209] dma_chrf.v:279: expression size 5 truncated to fit in target size 4
VERIFIC-INFO [VERI-1018] dma_chrf.v:41: compiling module 'dma_chrf(CH_NO=7)'
VERIFIC-WARNING [VERI-1209] dma_chrf.v:279: expression size 5 truncated to fit in target size 4
VERIFIC-INFO [VERI-1018] dma_chsel.v:43: compiling module 'dma_chsel'
VERIFIC-WARNING [VERI-2580] dma_chsel.v:858: latch inferred for net 'arb_ch_sel[2]'
VERIFIC-INFO [VERI-1018] dma_rrarb.v:42: compiling module 'dma_rrarb'
VERIFIC-INFO [VERI-1018] dma_ahbslv.v:42: compiling module 'dma_ahbslv'
VERIFIC-INFO [VERI-1018] dma_ahbdec.v:43: compiling module 'dma_ahbdec'
VERIFIC-INFO [VERI-1018] dma_ahbmux.v:44: compiling module 'dma_ahbmux'
Importing module dma_top.
Importing module dma_engine.
Importing module dma_ahbmst(THIS_IS_M1=0).
Importing module dma_ctlrf.
Importing module dma_ahbmst.
Importing module dma_fifo.
Importing module ff_ram.
Importing module dma_chsel.
Importing module dma_chrf.
Importing module dma_chrf(CH_NO=1).
Importing module dma_chrf(CH_NO=2).
Importing module dma_chrf(CH_NO=3).
Importing module dma_chrf(CH_NO=4).
Importing module dma_chrf(CH_NO=5).
Importing module dma_chrf(CH_NO=6).
Importing module dma_chrf(CH_NO=7).
Importing module dma_rrarb.
Importing module dma_ahbslv.
Importing module dma_ahbdec.
Importing module dma_ahbmux.

3.3.1. Analyzing design hierarchy..
Top module:  \dma_top
Used module:     \dma_ahbmux
Used module:     \dma_ahbdec
Used module:     \dma_ahbslv
Used module:     \dma_chsel
Used module:         \dma_rrarb
Used module:     \dma_ctlrf
Used module:         \dma_chrf(CH_NO=7)
Used module:         \dma_chrf(CH_NO=6)
Used module:         \dma_chrf(CH_NO=5)
Used module:         \dma_chrf(CH_NO=4)
Used module:         \dma_chrf(CH_NO=3)
Used module:         \dma_chrf(CH_NO=2)
Used module:         \dma_chrf(CH_NO=1)
Used module:         \dma_chrf
Used module:     \dma_fifo
Used module:         \ff_ram
Used module:     \dma_ahbmst
Used module:     \dma_ahbmst(THIS_IS_M1=0)
Used module:     \dma_engine

3.3.2. Analyzing design hierarchy..
Top module:  \dma_top
Used module:     \dma_ahbmux
Used module:     \dma_ahbdec
Used module:     \dma_ahbslv
Used module:     \dma_chsel
Used module:         \dma_rrarb
Used module:     \dma_ctlrf
Used module:         \dma_chrf(CH_NO=7)
Used module:         \dma_chrf(CH_NO=6)
Used module:         \dma_chrf(CH_NO=5)
Used module:         \dma_chrf(CH_NO=4)
Used module:         \dma_chrf(CH_NO=3)
Used module:         \dma_chrf(CH_NO=2)
Used module:         \dma_chrf(CH_NO=1)
Used module:         \dma_chrf
Used module:     \dma_fifo
Used module:         \ff_ram
Used module:     \dma_ahbmst
Used module:     \dma_ahbmst(THIS_IS_M1=0)
Used module:     \dma_engine
Removed 0 unused modules.

yosys> proc

3.4. Executing PROC pass (convert processes to netlists).

yosys> proc_clean

3.4.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> proc_rmdead

3.4.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

yosys> proc_prune

3.4.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

yosys> proc_init

3.4.4. Executing PROC_INIT pass (extract init attributes).

yosys> proc_arst

3.4.5. Executing PROC_ARST pass (detect async resets in processes).

yosys> proc_mux

3.4.6. Executing PROC_MUX pass (convert decision trees to multiplexers).

yosys> proc_dlatch

3.4.7. Executing PROC_DLATCH pass (convert process syncs to latches).

yosys> proc_dff

3.4.8. Executing PROC_DFF pass (convert process syncs to FFs).

yosys> proc_memwr

3.4.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

yosys> proc_clean

3.4.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> opt_expr -keepdc

3.4.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module dma_ahbmux.
<suppressed ~7 debug messages>
Optimizing module dma_ahbdec.
<suppressed ~16 debug messages>
Optimizing module dma_ahbslv.
<suppressed ~20 debug messages>
Optimizing module dma_rrarb.
<suppressed ~2 debug messages>
Optimizing module dma_chrf(CH_NO=7).
<suppressed ~34 debug messages>
Optimizing module dma_chrf(CH_NO=6).
<suppressed ~34 debug messages>
Optimizing module dma_chrf(CH_NO=5).
<suppressed ~34 debug messages>
Optimizing module dma_chrf(CH_NO=4).
<suppressed ~34 debug messages>
Optimizing module dma_chrf(CH_NO=3).
<suppressed ~34 debug messages>
Optimizing module dma_chrf(CH_NO=2).
<suppressed ~34 debug messages>
Optimizing module dma_chrf(CH_NO=1).
<suppressed ~34 debug messages>
Optimizing module dma_chrf.
<suppressed ~35 debug messages>
Optimizing module dma_chsel.
<suppressed ~30 debug messages>
Optimizing module ff_ram.
Optimizing module dma_fifo.
<suppressed ~16 debug messages>
Optimizing module dma_ahbmst.
<suppressed ~23 debug messages>
Optimizing module dma_ctlrf.
<suppressed ~32 debug messages>
Optimizing module dma_ahbmst(THIS_IS_M1=0).
<suppressed ~23 debug messages>
Optimizing module dma_engine.
<suppressed ~27 debug messages>
Optimizing module dma_top.

yosys> flatten

3.5. Executing FLATTEN pass (flatten design).
Deleting now unused module dma_ahbmux.
Deleting now unused module dma_ahbdec.
Deleting now unused module dma_ahbslv.
Deleting now unused module dma_rrarb.
Deleting now unused module dma_chrf(CH_NO=7).
Deleting now unused module dma_chrf(CH_NO=6).
Deleting now unused module dma_chrf(CH_NO=5).
Deleting now unused module dma_chrf(CH_NO=4).
Deleting now unused module dma_chrf(CH_NO=3).
Deleting now unused module dma_chrf(CH_NO=2).
Deleting now unused module dma_chrf(CH_NO=1).
Deleting now unused module dma_chrf.
Deleting now unused module dma_chsel.
Deleting now unused module ff_ram.
Deleting now unused module dma_fifo.
Deleting now unused module dma_ahbmst.
Deleting now unused module dma_ctlrf.
Deleting now unused module dma_ahbmst(THIS_IS_M1=0).
Deleting now unused module dma_engine.
<suppressed ~22 debug messages>

yosys> tribuf -logic

3.6. Executing TRIBUF pass.

yosys> deminout

3.7. Executing DEMINOUT pass (demote inout ports to input or output).

yosys> opt_expr

3.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module dma_top.
<suppressed ~4 debug messages>

yosys> opt_clean

3.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dma_top..
Removed 67 unused cells and 11627 unused wires.
<suppressed ~1666 debug messages>

yosys> check

3.10. Executing CHECK pass (checking for obvious problems).
Checking module dma_top...
Found and reported 0 problems.

yosys> opt -nodffe -nosdff

3.11. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dma_top.
<suppressed ~17 debug messages>

yosys> opt_merge -nomux

3.11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dma_top'.
<suppressed ~282 debug messages>
Removed a total of 94 cells.

yosys> opt_muxtree

3.11.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dma_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port B of cell $flatten\de.$verific$i150$dma_engine.v:858$7008: \de.st_ed1s -> 1'1
      Replacing known input bits on port B of cell $flatten\m1_mux.$verific$i65$dma_ahbmux.v:359$18791: \m1_mux.hrdy_df -> 1'1
  Analyzing evaluation results.
    dead port 5/7 on $pmux $flatten\ahb_mst0.$verific$select_342$dma_ahbmst.v:978$7990.
Removed 1 multiplexer ports.
<suppressed ~522 debug messages>

yosys> opt_reduce

3.11.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dma_top.
    New input vector for $reduce_or cell $flatten\ahb_mst0.$verific$reduce_nor_341$dma_ahbmst.v:978$7988: { $flatten\ahb_mst0.$verific$n2949$7551 $flatten\ahb_mst0.$verific$n2951$7553 $flatten\ahb_mst0.$verific$n2952$7554 \ahb_mst0.mx_cmd_st [1] }
    New input vector for $reduce_or cell $flatten\ahb_mst0.$verific$reduce_nor_339$dma_ahbmst.v:975$7984: { \ahb_mst0.ad_sel_llp $flatten\ahb_mst0.$verific$n2950$7552 \ahb_mst0.mx_cmd_st [1] }
    New input vector for $reduce_or cell $flatten\ahb_mst0.$verific$reduce_nor_337$dma_ahbmst.v:972$7980: { $flatten\ahb_mst0.$verific$n2948$7550 \ahb_mst0.mx_cmd_st [1] }
    New ctrl vector for $pmux cell $flatten\ahb_mst0.$verific$select_400$dma_ahbmst.v:1033$8038: { $flatten\ahb_mst0.$verific$n3165$7584 $flatten\ahb_mst0.$verific$n3166$7585 $flatten\ahb_mst0.$verific$n3167$7586 $flatten\ahb_mst0.$verific$n3168$7587 $flatten\ahb_mst0.$verific$n3169$7588 $flatten\ahb_mst0.$verific$n3170$7589 }
    New ctrl vector for $pmux cell $flatten\ahb_mst1.$verific$select_418$dma_ahbmst.v:1033$13059: { $flatten\ahb_mst1.$verific$n3603$12566 $flatten\ahb_mst1.$verific$n3604$12567 $flatten\ahb_mst1.$verific$n3605$12568 $flatten\ahb_mst1.$verific$n3606$12569 $flatten\ahb_mst1.$verific$n3607$12570 $flatten\ahb_mst1.$verific$n3608$12571 }
    New ctrl vector for $pmux cell $flatten\ch_sel.$verific$Select_268$dma_chsel.v:858$13981: $auto$opt_reduce.cc:134:opt_pmux$18825
    New ctrl vector for $pmux cell $flatten\de.$verific$select_221$dma_engine.v:1010$7069: { $flatten\de.$verific$n621$6610 $flatten\de.$verific$n622$6611 $flatten\de.$verific$n623$6612 $flatten\de.$verific$n624$6613 $flatten\de.$verific$n625$6614 $flatten\de.$verific$n627$6616 $flatten\de.$verific$n628$6617 $flatten\de.$verific$n629$6618 $flatten\de.$verific$n630$6619 $flatten\de.$verific$n631$6620 $auto$opt_reduce.cc:134:opt_pmux$18827 }
    New ctrl vector for $pmux cell $flatten\de.$verific$select_634$dma_engine.v:1602$7373: { $flatten\de.$verific$n1730$6783 $flatten\de.$verific$n1731$6784 }
    New ctrl vector for $pmux cell $flatten\m1_decoder.$verific$select_14$dma_ahbdec.v:215$18432: { $flatten\m1_decoder.$verific$n15$18275 $flatten\m1_decoder.$verific$n16$18276 $flatten\m1_decoder.$verific$n17$18277 $flatten\m1_decoder.$verific$n18$18278 }
    New ctrl vector for $pmux cell $flatten\m1_decoder.$verific$select_20$dma_ahbdec.v:226$18440: { $flatten\m1_decoder.$verific$n25$18280 $flatten\m1_decoder.$verific$n26$18281 $flatten\m1_decoder.$verific$n27$18282 $flatten\m1_decoder.$verific$n28$18283 }
    New ctrl vector for $pmux cell $flatten\m1_decoder.$verific$select_26$dma_ahbdec.v:237$18448: { $flatten\m1_decoder.$verific$n35$18285 $flatten\m1_decoder.$verific$n36$18286 $flatten\m1_decoder.$verific$n37$18287 $flatten\m1_decoder.$verific$n38$18288 }
    New ctrl vector for $pmux cell $flatten\m1_decoder.$verific$select_32$dma_ahbdec.v:248$18456: { $flatten\m1_decoder.$verific$n45$18290 $flatten\m1_decoder.$verific$n46$18291 $flatten\m1_decoder.$verific$n47$18292 $flatten\m1_decoder.$verific$n48$18293 }
    New ctrl vector for $pmux cell $flatten\m1_decoder.$verific$select_38$dma_ahbdec.v:259$18464: { $flatten\m1_decoder.$verific$n55$18295 $flatten\m1_decoder.$verific$n56$18296 $flatten\m1_decoder.$verific$n57$18297 $flatten\m1_decoder.$verific$n58$18298 }
    New ctrl vector for $pmux cell $flatten\m1_decoder.$verific$select_44$dma_ahbdec.v:270$18472: { $flatten\m1_decoder.$verific$n65$18300 $flatten\m1_decoder.$verific$n66$18301 $flatten\m1_decoder.$verific$n67$18302 $flatten\m1_decoder.$verific$n68$18303 }
    New ctrl vector for $pmux cell $flatten\m1_decoder.$verific$select_50$dma_ahbdec.v:281$18480: { $flatten\m1_decoder.$verific$n75$18305 $flatten\m1_decoder.$verific$n76$18306 $flatten\m1_decoder.$verific$n77$18307 $flatten\m1_decoder.$verific$n78$18308 }
    New ctrl vector for $pmux cell $flatten\m1_decoder.$verific$select_56$dma_ahbdec.v:292$18488: { $flatten\m1_decoder.$verific$n85$18310 $flatten\m1_decoder.$verific$n86$18311 $flatten\m1_decoder.$verific$n87$18312 $flatten\m1_decoder.$verific$n88$18313 }
    New ctrl vector for $pmux cell $flatten\m1_decoder.$verific$select_62$dma_ahbdec.v:302$18496: { $flatten\m1_decoder.$verific$n95$18315 $flatten\m1_decoder.$verific$n96$18316 $flatten\m1_decoder.$verific$n97$18317 $flatten\m1_decoder.$verific$n98$18318 }
    New ctrl vector for $pmux cell $flatten\m1_decoder.$verific$select_68$dma_ahbdec.v:313$18504: { $flatten\m1_decoder.$verific$n105$18320 $flatten\m1_decoder.$verific$n106$18321 $flatten\m1_decoder.$verific$n107$18322 $flatten\m1_decoder.$verific$n108$18323 }
    New ctrl vector for $pmux cell $flatten\m1_decoder.$verific$select_74$dma_ahbdec.v:324$18512: { $flatten\m1_decoder.$verific$n115$18325 $flatten\m1_decoder.$verific$n116$18326 $flatten\m1_decoder.$verific$n117$18327 $flatten\m1_decoder.$verific$n118$18328 }
    New ctrl vector for $pmux cell $flatten\m1_decoder.$verific$select_8$dma_ahbdec.v:205$18424: { $flatten\m1_decoder.$verific$n5$18270 $flatten\m1_decoder.$verific$n6$18271 $flatten\m1_decoder.$verific$n7$18272 $flatten\m1_decoder.$verific$n8$18273 }
    New ctrl vector for $pmux cell $flatten\m1_decoder.$verific$select_80$dma_ahbdec.v:335$18520: { $flatten\m1_decoder.$verific$n125$18330 $flatten\m1_decoder.$verific$n126$18331 $flatten\m1_decoder.$verific$n127$18332 $flatten\m1_decoder.$verific$n128$18333 }
    New ctrl vector for $pmux cell $flatten\m1_decoder.$verific$select_86$dma_ahbdec.v:346$18528: { $flatten\m1_decoder.$verific$n135$18335 $flatten\m1_decoder.$verific$n136$18336 $flatten\m1_decoder.$verific$n137$18337 $flatten\m1_decoder.$verific$n138$18338 }
    New ctrl vector for $pmux cell $flatten\m1_decoder.$verific$select_92$dma_ahbdec.v:357$18536: { $flatten\m1_decoder.$verific$n145$18340 $flatten\m1_decoder.$verific$n146$18341 $flatten\m1_decoder.$verific$n147$18342 $flatten\m1_decoder.$verific$n148$18343 }
    New ctrl vector for $pmux cell $flatten\m1_decoder.$verific$select_98$dma_ahbdec.v:368$18544: { $flatten\m1_decoder.$verific$n155$18345 $flatten\m1_decoder.$verific$n156$18346 $flatten\m1_decoder.$verific$n157$18347 $flatten\m1_decoder.$verific$n158$18348 }
    New ctrl vector for $pmux cell $flatten\m1_mux.$verific$select_14$dma_ahbmux.v:282$18753: { $flatten\m1_mux.$verific$n7$18649 $flatten\m1_mux.$verific$n8$18650 $flatten\m1_mux.$verific$n9$18651 $flatten\m1_mux.$verific$n10$18652 $flatten\m1_mux.$verific$n11$18653 $flatten\m1_mux.$verific$n12$18654 $flatten\m1_mux.$verific$n13$18655 }
    New ctrl vector for $pmux cell $flatten\m1_mux.$verific$select_24$dma_ahbmux.v:309$18765: { $flatten\m1_mux.$verific$n20$18658 $flatten\m1_mux.$verific$n21$18659 $flatten\m1_mux.$verific$n22$18660 $flatten\m1_mux.$verific$n23$18661 $flatten\m1_mux.$verific$n24$18662 $flatten\m1_mux.$verific$n25$18663 $flatten\m1_mux.$verific$n26$18664 }
  Optimizing cells in module \dma_top.
Performed a total of 28 changes.

yosys> opt_merge

3.11.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dma_top'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

yosys> opt_dff -nodffe -nosdff

3.11.6. Executing OPT_DFF pass (perform DFF optimizations).
Changing const-value async load to async reset on $flatten\m1_mux.$verific$mux_no_reg$dma_ahbmux.v:325$18777 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\m1_mux.$verific$hrp_df_reg$dma_ahbmux.v:369$18797 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\m1_mux.$verific$hrmxnof_reg$dma_ahbmux.v:341$18785 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\m1_mux.$verific$hrdy_df_reg$dma_ahbmux.v:359$18793 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\dma_fifo.$verific$ram_wrq_reg$dma_fifo.v:356$13403 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\dma_fifo.$verific$ram_wr_reg$dma_fifo.v:322$13391 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\dma_fifo.$verific$part_wd_reg$dma_fifo.v:387$13422 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\dma_fifo.$verific$ff_fram_wado_reg$dma_fifo.v:419$13432 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\dma_fifo.$verific$ff_fram_radx_reg$dma_fifo.v:427$13437 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\dma_fifo.$verific$ff_cnv_q_vld_reg$dma_fifo.v:313$13386 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\dma_fifo.$verific$ff_cnt_reg$dma_fifo.v:440$13451 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\dma_fifo.$verific$cnv_bt3_reg$dma_fifo.v:302$13376 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\dma_fifo.$verific$cnv_bt2_reg$dma_fifo.v:296$13373 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\dma_fifo.$verific$cnv_bt1_reg$dma_fifo.v:290$13370 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\dma_fifo.$verific$cnv_bt0_reg$dma_fifo.v:284$13367 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\dma_fifo.$verific$cbe_reg$dma_fifo.v:271$13354 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\de.$verific$upk_cnt1_reg$dma_engine.v:1638$7388 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\de.$verific$upk_cnt0_reg$dma_engine.v:1630$7383 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\de.$verific$tsz_cnt_reg$dma_engine.v:1537$7332 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\de.$verific$st_rd_msk_reg$dma_engine.v:1500$7315 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\de.$verific$st_ed1s_reg$dma_engine.v:858$7010 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\de.$verific$m1_is_llp_reg$dma_engine.v:1096$7146 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\de.$verific$m1_arb_st_reg$dma_engine.v:1269$7209 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\de.$verific$m0_is_llp_reg$dma_engine.v:1081$7142 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\de.$verific$m0_arb_st_reg$dma_engine.v:1122$7163 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\de.$verific$de_st_reg$dma_engine.v:911$7042 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\de.$verific$de_mllp_reg$dma_engine.v:653$6909 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\de.$verific$de_ff_flush_d1_reg$dma_engine.v:1364$7241 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\de.$verific$de_err_notify_reg$dma_engine.v:1473$7301 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\de.$verific$bst_cnt_reg$dma_engine.v:1522$7325 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c7_rf.$verific$swidth_reg$dma_chrf.v:411$17673 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c7_rf.$verific$src_sz_reg$dma_chrf.v:352$17650 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c7_rf.$verific$src_sel_reg$dma_chrf.v:463$17710 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c7_rf.$verific$sad_ctl1_reg$dma_chrf.v:463$17706 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c7_rf.$verific$sad_ctl0_reg$dma_chrf.v:463$17707 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c7_rf.$verific$prot3_reg$dma_chrf.v:343$17644 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c7_rf.$verific$prot2_reg$dma_chrf.v:343$17645 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c7_rf.$verific$prot1_reg$dma_chrf.v:343$17646 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c7_rf.$verific$mode_reg$dma_chrf.v:431$17681 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c7_rf.$verific$int_tc_msk_reg$dma_chrf.v:306$17629 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c7_rf.$verific$int_tc1_msk_reg$dma_chrf.v:500$17728 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c7_rf.$verific$int_err_msk_reg$dma_chrf.v:500$17727 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c7_rf.$verific$int_abt_msk_reg$dma_chrf.v:500$17726 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c7_rf.$verific$dwidth_reg$dma_chrf.v:422$17678 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c7_rf.$verific$dst_sel_reg$dma_chrf.v:463$17711 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c7_rf.$verific$dreqmode_reg$dma_chrf.v:326$17637 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c7_rf.$verific$dad_ctl1_reg$dma_chrf.v:463$17708 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c7_rf.$verific$dad_ctl0_reg$dma_chrf.v:463$17709 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c7_rf.$verific$chtsz_reg$dma_chrf.v:644$17810 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c7_rf.$verific$chsad_reg$dma_chrf.v:540$17742 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c7_rf.$verific$chpri_reg$dma_chrf.v:316$17634 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c7_rf.$verific$chllpen_reg$dma_chrf.v:239$17586 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c7_rf.$verific$chllp_reg$dma_chrf.v:621$17791 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c7_rf.$verific$chllp_on_reg$dma_chrf.v:267$17598 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c7_rf.$verific$chllp_cnt_reg$dma_chrf.v:279$17613 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c7_rf.$verific$chdad_reg$dma_chrf.v:580$17768 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c7_rf.$verific$chabt_reg$dma_chrf.v:390$17663 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c7_rf.$verific$ch_en_reg$dma_chrf.v:480$17720 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c7_rf.$verific$autold_reg$dma_chrf.v:400$17667 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c6_rf.$verific$swidth_reg$dma_chrf.v:411$17222 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c6_rf.$verific$src_sz_reg$dma_chrf.v:352$17199 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c6_rf.$verific$src_sel_reg$dma_chrf.v:463$17259 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c6_rf.$verific$sad_ctl1_reg$dma_chrf.v:463$17255 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c6_rf.$verific$sad_ctl0_reg$dma_chrf.v:463$17256 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c6_rf.$verific$prot3_reg$dma_chrf.v:343$17193 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c6_rf.$verific$prot2_reg$dma_chrf.v:343$17194 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c6_rf.$verific$prot1_reg$dma_chrf.v:343$17195 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c6_rf.$verific$mode_reg$dma_chrf.v:431$17230 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c6_rf.$verific$int_tc_msk_reg$dma_chrf.v:306$17178 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c6_rf.$verific$int_tc1_msk_reg$dma_chrf.v:500$17277 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c6_rf.$verific$int_err_msk_reg$dma_chrf.v:500$17276 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c6_rf.$verific$int_abt_msk_reg$dma_chrf.v:500$17275 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c6_rf.$verific$dwidth_reg$dma_chrf.v:422$17227 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c6_rf.$verific$dst_sel_reg$dma_chrf.v:463$17260 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c6_rf.$verific$dreqmode_reg$dma_chrf.v:326$17186 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c6_rf.$verific$dad_ctl1_reg$dma_chrf.v:463$17257 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c6_rf.$verific$dad_ctl0_reg$dma_chrf.v:463$17258 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c6_rf.$verific$chtsz_reg$dma_chrf.v:644$17359 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c6_rf.$verific$chsad_reg$dma_chrf.v:540$17291 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c6_rf.$verific$chpri_reg$dma_chrf.v:316$17183 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c6_rf.$verific$chllpen_reg$dma_chrf.v:239$17135 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c6_rf.$verific$chllp_reg$dma_chrf.v:621$17340 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c6_rf.$verific$chllp_on_reg$dma_chrf.v:267$17147 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c6_rf.$verific$chllp_cnt_reg$dma_chrf.v:279$17162 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c6_rf.$verific$chdad_reg$dma_chrf.v:580$17317 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c6_rf.$verific$chabt_reg$dma_chrf.v:390$17212 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c6_rf.$verific$ch_en_reg$dma_chrf.v:480$17269 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c6_rf.$verific$autold_reg$dma_chrf.v:400$17216 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c5_rf.$verific$swidth_reg$dma_chrf.v:411$16771 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c5_rf.$verific$src_sz_reg$dma_chrf.v:352$16748 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c5_rf.$verific$src_sel_reg$dma_chrf.v:463$16808 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c5_rf.$verific$sad_ctl1_reg$dma_chrf.v:463$16804 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c5_rf.$verific$sad_ctl0_reg$dma_chrf.v:463$16805 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c5_rf.$verific$prot3_reg$dma_chrf.v:343$16742 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c5_rf.$verific$prot2_reg$dma_chrf.v:343$16743 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c5_rf.$verific$prot1_reg$dma_chrf.v:343$16744 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c5_rf.$verific$mode_reg$dma_chrf.v:431$16779 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c5_rf.$verific$int_tc_msk_reg$dma_chrf.v:306$16727 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c5_rf.$verific$int_tc1_msk_reg$dma_chrf.v:500$16826 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c5_rf.$verific$int_err_msk_reg$dma_chrf.v:500$16825 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c5_rf.$verific$int_abt_msk_reg$dma_chrf.v:500$16824 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c5_rf.$verific$dwidth_reg$dma_chrf.v:422$16776 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c5_rf.$verific$dst_sel_reg$dma_chrf.v:463$16809 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c5_rf.$verific$dreqmode_reg$dma_chrf.v:326$16735 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c5_rf.$verific$dad_ctl1_reg$dma_chrf.v:463$16806 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c5_rf.$verific$dad_ctl0_reg$dma_chrf.v:463$16807 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c5_rf.$verific$chtsz_reg$dma_chrf.v:644$16908 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c5_rf.$verific$chsad_reg$dma_chrf.v:540$16840 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c5_rf.$verific$chpri_reg$dma_chrf.v:316$16732 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c5_rf.$verific$chllpen_reg$dma_chrf.v:239$16684 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c5_rf.$verific$chllp_reg$dma_chrf.v:621$16889 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c5_rf.$verific$chllp_on_reg$dma_chrf.v:267$16696 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c5_rf.$verific$chllp_cnt_reg$dma_chrf.v:279$16711 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c5_rf.$verific$chdad_reg$dma_chrf.v:580$16866 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c5_rf.$verific$chabt_reg$dma_chrf.v:390$16761 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c5_rf.$verific$ch_en_reg$dma_chrf.v:480$16818 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c5_rf.$verific$autold_reg$dma_chrf.v:400$16765 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c4_rf.$verific$swidth_reg$dma_chrf.v:411$16320 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c4_rf.$verific$src_sz_reg$dma_chrf.v:352$16297 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c4_rf.$verific$src_sel_reg$dma_chrf.v:463$16357 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c4_rf.$verific$sad_ctl1_reg$dma_chrf.v:463$16353 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c4_rf.$verific$sad_ctl0_reg$dma_chrf.v:463$16354 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c4_rf.$verific$prot3_reg$dma_chrf.v:343$16291 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c4_rf.$verific$prot2_reg$dma_chrf.v:343$16292 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c4_rf.$verific$prot1_reg$dma_chrf.v:343$16293 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c4_rf.$verific$mode_reg$dma_chrf.v:431$16328 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c4_rf.$verific$int_tc_msk_reg$dma_chrf.v:306$16276 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c4_rf.$verific$int_tc1_msk_reg$dma_chrf.v:500$16375 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c4_rf.$verific$int_err_msk_reg$dma_chrf.v:500$16374 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c4_rf.$verific$int_abt_msk_reg$dma_chrf.v:500$16373 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c4_rf.$verific$dwidth_reg$dma_chrf.v:422$16325 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c4_rf.$verific$dst_sel_reg$dma_chrf.v:463$16358 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c4_rf.$verific$dreqmode_reg$dma_chrf.v:326$16284 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c4_rf.$verific$dad_ctl1_reg$dma_chrf.v:463$16355 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c4_rf.$verific$dad_ctl0_reg$dma_chrf.v:463$16356 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c4_rf.$verific$chtsz_reg$dma_chrf.v:644$16457 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c4_rf.$verific$chsad_reg$dma_chrf.v:540$16389 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c4_rf.$verific$chpri_reg$dma_chrf.v:316$16281 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c4_rf.$verific$chllpen_reg$dma_chrf.v:239$16233 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c4_rf.$verific$chllp_reg$dma_chrf.v:621$16438 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c4_rf.$verific$chllp_on_reg$dma_chrf.v:267$16245 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c4_rf.$verific$chllp_cnt_reg$dma_chrf.v:279$16260 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c4_rf.$verific$chdad_reg$dma_chrf.v:580$16415 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c4_rf.$verific$chabt_reg$dma_chrf.v:390$16310 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c4_rf.$verific$ch_en_reg$dma_chrf.v:480$16367 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c4_rf.$verific$autold_reg$dma_chrf.v:400$16314 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c3_rf.$verific$swidth_reg$dma_chrf.v:411$15869 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c3_rf.$verific$src_sz_reg$dma_chrf.v:352$15846 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c3_rf.$verific$src_sel_reg$dma_chrf.v:463$15906 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c3_rf.$verific$sad_ctl1_reg$dma_chrf.v:463$15902 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c3_rf.$verific$sad_ctl0_reg$dma_chrf.v:463$15903 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c3_rf.$verific$prot3_reg$dma_chrf.v:343$15840 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c3_rf.$verific$prot2_reg$dma_chrf.v:343$15841 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c3_rf.$verific$prot1_reg$dma_chrf.v:343$15842 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c3_rf.$verific$mode_reg$dma_chrf.v:431$15877 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c3_rf.$verific$int_tc_msk_reg$dma_chrf.v:306$15825 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c3_rf.$verific$int_tc1_msk_reg$dma_chrf.v:500$15924 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c3_rf.$verific$int_err_msk_reg$dma_chrf.v:500$15923 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c3_rf.$verific$int_abt_msk_reg$dma_chrf.v:500$15922 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c3_rf.$verific$dwidth_reg$dma_chrf.v:422$15874 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c3_rf.$verific$dst_sel_reg$dma_chrf.v:463$15907 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c3_rf.$verific$dreqmode_reg$dma_chrf.v:326$15833 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c3_rf.$verific$dad_ctl1_reg$dma_chrf.v:463$15904 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c3_rf.$verific$dad_ctl0_reg$dma_chrf.v:463$15905 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c3_rf.$verific$chtsz_reg$dma_chrf.v:644$16006 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c3_rf.$verific$chsad_reg$dma_chrf.v:540$15938 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c3_rf.$verific$chpri_reg$dma_chrf.v:316$15830 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c3_rf.$verific$chllpen_reg$dma_chrf.v:239$15782 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c3_rf.$verific$chllp_reg$dma_chrf.v:621$15987 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c3_rf.$verific$chllp_on_reg$dma_chrf.v:267$15794 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c3_rf.$verific$chllp_cnt_reg$dma_chrf.v:279$15809 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c3_rf.$verific$chdad_reg$dma_chrf.v:580$15964 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c3_rf.$verific$chabt_reg$dma_chrf.v:390$15859 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c3_rf.$verific$ch_en_reg$dma_chrf.v:480$15916 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c3_rf.$verific$autold_reg$dma_chrf.v:400$15863 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c2_rf.$verific$swidth_reg$dma_chrf.v:411$15418 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c2_rf.$verific$src_sz_reg$dma_chrf.v:352$15395 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c2_rf.$verific$src_sel_reg$dma_chrf.v:463$15455 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c2_rf.$verific$sad_ctl1_reg$dma_chrf.v:463$15451 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c2_rf.$verific$sad_ctl0_reg$dma_chrf.v:463$15452 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c2_rf.$verific$prot3_reg$dma_chrf.v:343$15389 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c2_rf.$verific$prot2_reg$dma_chrf.v:343$15390 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c2_rf.$verific$prot1_reg$dma_chrf.v:343$15391 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c2_rf.$verific$mode_reg$dma_chrf.v:431$15426 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c2_rf.$verific$int_tc_msk_reg$dma_chrf.v:306$15374 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c2_rf.$verific$int_tc1_msk_reg$dma_chrf.v:500$15473 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c2_rf.$verific$int_err_msk_reg$dma_chrf.v:500$15472 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c2_rf.$verific$int_abt_msk_reg$dma_chrf.v:500$15471 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c2_rf.$verific$dwidth_reg$dma_chrf.v:422$15423 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c2_rf.$verific$dst_sel_reg$dma_chrf.v:463$15456 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c2_rf.$verific$dreqmode_reg$dma_chrf.v:326$15382 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c2_rf.$verific$dad_ctl1_reg$dma_chrf.v:463$15453 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c2_rf.$verific$dad_ctl0_reg$dma_chrf.v:463$15454 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c2_rf.$verific$chtsz_reg$dma_chrf.v:644$15555 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c2_rf.$verific$chsad_reg$dma_chrf.v:540$15487 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c2_rf.$verific$chpri_reg$dma_chrf.v:316$15379 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c2_rf.$verific$chllpen_reg$dma_chrf.v:239$15331 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c2_rf.$verific$chllp_reg$dma_chrf.v:621$15536 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c2_rf.$verific$chllp_on_reg$dma_chrf.v:267$15343 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c2_rf.$verific$chllp_cnt_reg$dma_chrf.v:279$15358 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c2_rf.$verific$chdad_reg$dma_chrf.v:580$15513 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c2_rf.$verific$chabt_reg$dma_chrf.v:390$15408 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c2_rf.$verific$ch_en_reg$dma_chrf.v:480$15465 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c2_rf.$verific$autold_reg$dma_chrf.v:400$15412 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c1_rf.$verific$swidth_reg$dma_chrf.v:411$14967 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c1_rf.$verific$src_sz_reg$dma_chrf.v:352$14944 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c1_rf.$verific$src_sel_reg$dma_chrf.v:463$15004 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c1_rf.$verific$sad_ctl1_reg$dma_chrf.v:463$15000 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c1_rf.$verific$sad_ctl0_reg$dma_chrf.v:463$15001 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c1_rf.$verific$prot3_reg$dma_chrf.v:343$14938 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c1_rf.$verific$prot2_reg$dma_chrf.v:343$14939 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c1_rf.$verific$prot1_reg$dma_chrf.v:343$14940 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c1_rf.$verific$mode_reg$dma_chrf.v:431$14975 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c1_rf.$verific$int_tc_msk_reg$dma_chrf.v:306$14923 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c1_rf.$verific$int_tc1_msk_reg$dma_chrf.v:500$15022 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c1_rf.$verific$int_err_msk_reg$dma_chrf.v:500$15021 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c1_rf.$verific$int_abt_msk_reg$dma_chrf.v:500$15020 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c1_rf.$verific$dwidth_reg$dma_chrf.v:422$14972 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c1_rf.$verific$dst_sel_reg$dma_chrf.v:463$15005 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c1_rf.$verific$dreqmode_reg$dma_chrf.v:326$14931 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c1_rf.$verific$dad_ctl1_reg$dma_chrf.v:463$15002 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c1_rf.$verific$dad_ctl0_reg$dma_chrf.v:463$15003 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c1_rf.$verific$chtsz_reg$dma_chrf.v:644$15104 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c1_rf.$verific$chsad_reg$dma_chrf.v:540$15036 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c1_rf.$verific$chpri_reg$dma_chrf.v:316$14928 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c1_rf.$verific$chllpen_reg$dma_chrf.v:239$14880 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c1_rf.$verific$chllp_reg$dma_chrf.v:621$15085 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c1_rf.$verific$chllp_on_reg$dma_chrf.v:267$14892 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c1_rf.$verific$chllp_cnt_reg$dma_chrf.v:279$14907 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c1_rf.$verific$chdad_reg$dma_chrf.v:580$15062 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c1_rf.$verific$chabt_reg$dma_chrf.v:390$14957 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c1_rf.$verific$ch_en_reg$dma_chrf.v:480$15014 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c1_rf.$verific$autold_reg$dma_chrf.v:400$14961 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c0_rf.$verific$swidth_reg$dma_chrf.v:411$14516 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c0_rf.$verific$src_sz_reg$dma_chrf.v:352$14493 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c0_rf.$verific$src_sel_reg$dma_chrf.v:463$14553 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c0_rf.$verific$sad_ctl1_reg$dma_chrf.v:463$14549 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c0_rf.$verific$sad_ctl0_reg$dma_chrf.v:463$14550 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c0_rf.$verific$prot3_reg$dma_chrf.v:343$14487 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c0_rf.$verific$prot2_reg$dma_chrf.v:343$14488 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c0_rf.$verific$prot1_reg$dma_chrf.v:343$14489 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c0_rf.$verific$mode_reg$dma_chrf.v:431$14524 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c0_rf.$verific$int_tc_msk_reg$dma_chrf.v:306$14472 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c0_rf.$verific$int_tc1_msk_reg$dma_chrf.v:500$14571 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c0_rf.$verific$int_err_msk_reg$dma_chrf.v:500$14570 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c0_rf.$verific$int_abt_msk_reg$dma_chrf.v:500$14569 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c0_rf.$verific$dwidth_reg$dma_chrf.v:422$14521 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c0_rf.$verific$dst_sel_reg$dma_chrf.v:463$14554 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c0_rf.$verific$dreqmode_reg$dma_chrf.v:326$14480 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c0_rf.$verific$dad_ctl1_reg$dma_chrf.v:463$14551 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c0_rf.$verific$dad_ctl0_reg$dma_chrf.v:463$14552 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c0_rf.$verific$chtsz_reg$dma_chrf.v:644$14653 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c0_rf.$verific$chsad_reg$dma_chrf.v:540$14585 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c0_rf.$verific$chpri_reg$dma_chrf.v:316$14477 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c0_rf.$verific$chllpen_reg$dma_chrf.v:239$14429 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c0_rf.$verific$chllp_reg$dma_chrf.v:621$14634 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c0_rf.$verific$chllp_on_reg$dma_chrf.v:267$14441 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c0_rf.$verific$chllp_cnt_reg$dma_chrf.v:279$14456 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c0_rf.$verific$chdad_reg$dma_chrf.v:580$14611 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c0_rf.$verific$chabt_reg$dma_chrf.v:390$14506 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c0_rf.$verific$ch_en_reg$dma_chrf.v:480$14563 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c0_rf.$verific$autold_reg$dma_chrf.v:400$14510 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.$verific$tc_reg$dma_ctlrf.v:1902$9273 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.$verific$sync_reg$dma_ctlrf.v:2281$9293 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.$verific$rf_sel_d1_reg$dma_ctlrf.v:1475$8820 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.$verific$m1end_reg$dma_ctlrf.v:2257$9280 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.$verific$m0end_reg$dma_ctlrf.v:2263$9283 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.$verific$err_reg$dma_ctlrf.v:2224$8813 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ahb_mst0.$verific$hwriteo_reg$dma_ahbmst.v:671$7885 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ahb_mst0.$verific$hwdatao_reg$dma_ahbmst.v:893$7943 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ahb_mst0.$verific$hsizeo_reg$dma_ahbmst.v:726$7904 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ahb_mst0.$verific$hreqo_reg$dma_ahbmst.v:1174$8105 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ahb_mst0.$verific$hproto_reg$dma_ahbmst.v:783$7909 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ahb_mst0.$verific$hbursto_reg$dma_ahbmst.v:811$7921 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ahb_mst0.$verific$haddro_reg$dma_ahbmst.v:987$7994 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.$verific$dmaint_tc_reg$dma_ctlrf.v:1721$9171 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.$verific$dmaint_reg$dma_ctlrf.v:1715$9169 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.$verific$dmaint_err_reg$dma_ctlrf.v:1727$9173 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.$verific$dmacen_reg$dma_ctlrf.v:2269$9286 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.$verific$c7dmabs_reg$dma_ctlrf.v:2420$9349 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.$verific$c7brbs_reg$dma_ctlrf.v:2557$9405 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.$verific$c6dmabs_reg$dma_ctlrf.v:2403$9342 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.$verific$c6brbs_reg$dma_ctlrf.v:2540$9398 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.$verific$c5dmabs_reg$dma_ctlrf.v:2386$9335 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.$verific$c5brbs_reg$dma_ctlrf.v:2523$9391 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.$verific$c4dmabs_reg$dma_ctlrf.v:2369$9328 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.$verific$c4brbs_reg$dma_ctlrf.v:2506$9384 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.$verific$c3dmabs_reg$dma_ctlrf.v:2352$9321 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.$verific$c3brbs_reg$dma_ctlrf.v:2489$9377 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.$verific$c2dmabs_reg$dma_ctlrf.v:2335$9314 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.$verific$c2brbs_reg$dma_ctlrf.v:2472$9370 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.$verific$c1dmabs_reg$dma_ctlrf.v:2318$9307 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.$verific$c1brbs_reg$dma_ctlrf.v:2455$9363 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.$verific$c0dmabs_reg$dma_ctlrf.v:2302$9299 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.$verific$c0brbs_reg$dma_ctlrf.v:2439$9356 ($aldff) from module dma_top.
Removing never-active async load on $flatten\ctl_rf.$verific$be_d1_reg$dma_ctlrf.v:1469$8816 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.$verific$abt_reg$dma_ctlrf.v:2233$9270 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ch_sel.\dma_rrarb3.$verific$state_reg$dma_rrarb.v:74$17905 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ch_sel.\dma_rrarb2.$verific$state_reg$dma_rrarb.v:74$17905 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ch_sel.\dma_rrarb1.$verific$state_reg$dma_rrarb.v:74$17905 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ch_sel.\dma_rrarb0.$verific$state_reg$dma_rrarb.v:74$17905 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ch_sel.$verific$vld_req_any_d1_reg$dma_chsel.v:868$13986 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ch_sel.$verific$fix_pri_sel_reg$dma_chsel.v:848$13965 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ch_sel.$verific$dma_tc_reg$dma_chsel.v:1243$14098 ($aldff) from module dma_top.
Removing never-active async load on $flatten\ch_sel.$verific$dma_reqd2_reg$dma_chsel.v:485$13839 ($aldff) from module dma_top.
Removing never-active async load on $flatten\ch_sel.$verific$dma_reqd1_reg$dma_chsel.v:459$13836 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ch_sel.$verific$dma_ack_reg$dma_chsel.v:1085$14051 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ch_sel.$verific$de_stup_d1_reg$dma_chsel.v:905$14001 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ch_sel.$verific$arb_req_reg$dma_chsel.v:890$13999 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ch_sel.$verific$arb_chcsr_reg_reg$dma_chsel.v:1310$14104 ($aldff) from module dma_top.
Removing never-active CLR on $flatten\ch_sel.$verific$arb_ch_sel_reg$dma_chsel.v:858$13966 ($dlatchsr) from module dma_top.
Removing never-active ARST on $flatten\ch_sel.$verific$arb_ch_sel_reg$dma_chsel.v:858$13966 ($dlatchsr) from module dma_top.
Changing const-value async load to async reset on $flatten\ahb_slv.$verific$slv_wr_d1o_reg$dma_ahbslv.v:274$18114 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ahb_slv.$verific$slv_sz_d1o_reg$dma_ahbslv.v:268$18109 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ahb_slv.$verific$slv_pt_d1o_reg$dma_ahbslv.v:268$18110 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ahb_slv.$verific$slv_br_req_reg$dma_ahbslv.v:366$18179 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ahb_slv.$verific$slv_ad_d1o_reg$dma_ahbslv.v:268$18108 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ahb_slv.$verific$hresp_br_reg$dma_ahbslv.v:448$18229 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ahb_slv.$verific$hreadyout_reg_reg$dma_ahbslv.v:315$18143 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ahb_slv.$verific$hreadyout_br_reg$dma_ahbslv.v:435$18222 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ahb_slv.$verific$hrdata_reg_reg$dma_ahbslv.v:346$18169 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ahb_slv.$verific$hrdata_br_reg$dma_ahbslv.v:492$18264 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ahb_slv.$verific$br_st_reg$dma_ahbslv.v:407$18200 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ahb_mst1.$verific$mx_dtp_reg$dma_ahbmst.v:596$12867 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ahb_mst1.$verific$mx_dt_st_reg$dma_ahbmst.v:607$12876 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ahb_mst1.$verific$mx_dma_had_a_rty_reg$dma_ahbmst.v:1209$13141 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ahb_mst1.$verific$mx_cmd_st_reg$dma_ahbmst.v:586$12862 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ahb_mst1.$verific$mx_ad1t0x_reg$dma_ahbmst.v:1111$13086 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ahb_mst1.$verific$m0_m1_diff_tx_reg$dma_ahbmst.v:926$12978 ($aldff) from module dma_top.
Removing never-active async load on $flatten\ahb_mst1.$verific$inc_selx_reg$dma_ahbmst.v:1045$13063 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ahb_mst1.$verific$hwriteo_reg$dma_ahbmst.v:671$12905 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ahb_mst1.$verific$hwdatao_reg$dma_ahbmst.v:893$12964 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ahb_mst1.$verific$hsizeo_reg$dma_ahbmst.v:726$12924 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ahb_mst1.$verific$hproto_reg$dma_ahbmst.v:783$12930 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ahb_mst1.$verific$hbursto_reg$dma_ahbmst.v:811$12942 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ahb_mst1.$verific$haddro_reg$dma_ahbmst.v:987$13015 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ahb_mst1.$verific$adin_is_neg_reg$dma_ahbmst.v:1094$13074 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ahb_mst1.$verific$add_cfx_reg$dma_ahbmst.v:1088$13071 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ahb_mst0.$verific$mx_dtp_reg$dma_ahbmst.v:596$7861 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ahb_mst0.$verific$mx_dt_st_reg$dma_ahbmst.v:607$7870 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ahb_mst0.$verific$mx_dma_had_a_rty_reg$dma_ahbmst.v:1209$8117 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ahb_mst0.$verific$mx_cmd_st_reg$dma_ahbmst.v:586$7856 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ahb_mst0.$verific$mx_ad1t0x_reg$dma_ahbmst.v:1111$8065 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ahb_mst0.$verific$m0_m1_diff_tx_reg$dma_ahbmst.v:926$7957 ($aldff) from module dma_top.
Removing never-active async load on $flatten\ahb_mst0.$verific$inc_selx_reg$dma_ahbmst.v:1045$8042 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ahb_mst0.$verific$add_cfx_reg$dma_ahbmst.v:1088$8050 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ahb_mst0.$verific$adin_is_neg_reg$dma_ahbmst.v:1094$8053 ($aldff) from module dma_top.

yosys> opt_clean

3.11.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dma_top..
Removed 14 unused cells and 106 unused wires.
<suppressed ~15 debug messages>

yosys> opt_expr

3.11.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module dma_top.

3.11.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.11.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dma_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~522 debug messages>

yosys> opt_reduce

3.11.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dma_top.
Performed a total of 0 changes.

yosys> opt_merge

3.11.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dma_top'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.11.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.11.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dma_top..

yosys> opt_expr

3.11.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module dma_top.

3.11.16. Finished OPT passes. (There is nothing left to do.)

yosys> fsm

3.12. Executing FSM pass (extract and optimize FSM).

yosys> fsm_detect

3.12.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking dma_top.ahb_mst0.inc_selx as FSM state register:
    Users of register don't seem to benefit from recoding.
Not marking dma_top.ahb_mst1.inc_selx as FSM state register:
    Users of register don't seem to benefit from recoding.
Not marking dma_top.m1_mux.mux_no as FSM state register:
    Users of register don't seem to benefit from recoding.

yosys> fsm_extract

3.12.2. Executing FSM_EXTRACT pass (extracting FSM from design).

yosys> fsm_opt

3.12.3. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> opt_clean

3.12.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dma_top..

yosys> fsm_opt

3.12.5. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> fsm_recode

3.12.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

yosys> fsm_info

3.12.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

yosys> fsm_map

3.12.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

yosys> opt -sat

3.13. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dma_top.

yosys> opt_merge -nomux

3.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dma_top'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dma_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~522 debug messages>

yosys> opt_reduce

3.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dma_top.
Performed a total of 0 changes.

yosys> opt_merge

3.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dma_top'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.13.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $flatten\m1_mux.$verific$mux_no_reg$dma_ahbmux.v:325$18777 ($adff) from module dma_top (D = \m1_mux.mux_noi, Q = \m1_mux.mux_no).
Adding EN signal on $flatten\m1_mux.$verific$hrp_df_reg$dma_ahbmux.v:369$18797 ($adff) from module dma_top (D = { 1'0 \m1_mux.df_cmd }, Q = \m1_mux.hrp_df).
Adding EN signal on $flatten\m1_mux.$verific$hrmxnof_reg$dma_ahbmux.v:341$18785 ($adff) from module dma_top (D = \m1_mux.hsel_df, Q = \m1_mux.hrmxnof).
Adding EN signal on $flatten\dma_fifo.$verific$part_wd_reg$dma_fifo.v:387$13422 ($adff) from module dma_top (D = $flatten\dma_fifo.$verific$n539$13233, Q = \dma_fifo.part_wd).
Adding EN signal on $flatten\dma_fifo.$verific$ff_fram_wado_reg$dma_fifo.v:419$13432 ($adff) from module dma_top (D = $flatten\dma_fifo.$verific$n601$13259, Q = \dma_fifo.ff_fram_wado).
Adding EN signal on $flatten\dma_fifo.$verific$ff_fram_radx_reg$dma_fifo.v:427$13437 ($adff) from module dma_top (D = $flatten\dma_fifo.$verific$n633$13263, Q = \dma_fifo.ff_fram_radx).
Adding EN signal on $flatten\dma_fifo.$verific$ff_cnv_q_vld_reg$dma_fifo.v:313$13386 ($adff) from module dma_top (D = $flatten\dma_fifo.$verific$n483$13208, Q = \dma_fifo.ff_cnv_q_vld).
Adding EN signal on $flatten\dma_fifo.$verific$ff_cnt_reg$dma_fifo.v:440$13451 ($adff) from module dma_top (D = $flatten\dma_fifo.$verific$n699$13271, Q = \dma_fifo.ff_cnt).
Adding EN signal on $flatten\dma_fifo.$verific$cnv_bt3_reg$dma_fifo.v:302$13376 ($adff) from module dma_top (D = \dma_fifo.cb3i, Q = \dma_fifo.cnv_bt3).
Adding EN signal on $flatten\dma_fifo.$verific$cnv_bt2_reg$dma_fifo.v:296$13373 ($adff) from module dma_top (D = \dma_fifo.cb2i, Q = \dma_fifo.cnv_bt2).
Adding EN signal on $flatten\dma_fifo.$verific$cnv_bt1_reg$dma_fifo.v:290$13370 ($adff) from module dma_top (D = \dma_fifo.cb1i, Q = \dma_fifo.cnv_bt1).
Adding EN signal on $flatten\dma_fifo.$verific$cnv_bt0_reg$dma_fifo.v:284$13367 ($adff) from module dma_top (D = \dma_fifo.cb0i, Q = \dma_fifo.cnv_bt0).
Adding EN signal on $flatten\dma_fifo.$verific$cbe_reg$dma_fifo.v:271$13354 ($adff) from module dma_top (D = $flatten\dma_fifo.$verific$n291$13245, Q = \dma_fifo.cbe).
Adding EN signal on $flatten\de.$verific$upk_cnt1_reg$dma_engine.v:1638$7388 ($adff) from module dma_top (D = $flatten\de.$verific$n1788$6867, Q = \de.upk_cnt1).
Adding EN signal on $flatten\de.$verific$upk_cnt0_reg$dma_engine.v:1630$7383 ($adff) from module dma_top (D = $flatten\de.$verific$n1767$6864, Q = \de.upk_cnt0).
Adding EN signal on $flatten\de.$verific$tsz_cnt_reg$dma_engine.v:1537$7332 ($adff) from module dma_top (D = $flatten\de.$verific$n1632$6857, Q = \de.tsz_cnt).
Adding EN signal on $flatten\de.$verific$st_rd_msk_reg$dma_engine.v:1500$7315 ($adff) from module dma_top (D = $flatten\de.$verific$n1488$6764, Q = \de.st_rd_msk).
Adding EN signal on $flatten\de.$verific$m1_is_llp_reg$dma_engine.v:1096$7146 ($adff) from module dma_top (D = $flatten\de.$verific$n760$6673, Q = \de.m1_is_llp).
Adding EN signal on $flatten\de.$verific$m0_is_llp_reg$dma_engine.v:1081$7142 ($adff) from module dma_top (D = $flatten\de.$verific$n750$6670, Q = \de.m0_is_llp).
Adding EN signal on $flatten\de.$verific$m0_arb_st_reg$dma_engine.v:1122$7163 ($adff) from module dma_top (D = $flatten\de.$verific$n783$6685, Q = \de.m0_arb_st).
Adding EN signal on $flatten\de.$verific$de_mllp_reg$dma_engine.v:653$6909 ($adff) from module dma_top (D = $flatten\de.$verific$n217$6811, Q = \de.de_mllp).
Adding EN signal on $flatten\de.$verific$de_err_notify_reg$dma_engine.v:1473$7301 ($adff) from module dma_top (D = $flatten\de.$verific$n1468$6753, Q = \de.de_err_notify).
Adding EN signal on $flatten\de.$verific$bst_cnt_reg$dma_engine.v:1522$7325 ($adff) from module dma_top (D = $flatten\de.$verific$n1556$6852, Q = \de.bst_cnt).
Adding EN signal on $flatten\ctl_rf.\c7_rf.$verific$swidth_reg$dma_chrf.v:411$17673 ($adff) from module dma_top (D = $flatten\ctl_rf.\c7_rf.$verific$n231$17510, Q = \ctl_rf.c7_rf.swidth).
Adding EN signal on $flatten\ctl_rf.\c7_rf.$verific$src_sz_reg$dma_chrf.v:352$17650 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb2 [2:0], Q = \ctl_rf.c7_rf.src_sz).
Adding EN signal on $flatten\ctl_rf.\c7_rf.$verific$src_sel_reg$dma_chrf.v:463$17710 ($adff) from module dma_top (D = $flatten\ctl_rf.\c7_rf.$verific$n308$17464, Q = \ctl_rf.c7_rf.src_sel).
Adding EN signal on $flatten\ctl_rf.\c7_rf.$verific$sad_ctl1_reg$dma_chrf.v:463$17706 ($adff) from module dma_top (D = $flatten\ctl_rf.\c7_rf.$verific$n304$17460, Q = \ctl_rf.c7_rf.sad_ctl1).
Adding EN signal on $flatten\ctl_rf.\c7_rf.$verific$sad_ctl0_reg$dma_chrf.v:463$17707 ($adff) from module dma_top (D = $flatten\ctl_rf.\c7_rf.$verific$n305$17461, Q = \ctl_rf.c7_rf.sad_ctl0).
Adding EN signal on $flatten\ctl_rf.\c7_rf.$verific$prot3_reg$dma_chrf.v:343$17644 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb2 [5], Q = \ctl_rf.c7_rf.prot3).
Adding EN signal on $flatten\ctl_rf.\c7_rf.$verific$prot2_reg$dma_chrf.v:343$17645 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb2 [4], Q = \ctl_rf.c7_rf.prot2).
Adding EN signal on $flatten\ctl_rf.\c7_rf.$verific$prot1_reg$dma_chrf.v:343$17646 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb2 [3], Q = \ctl_rf.c7_rf.prot1).
Adding EN signal on $flatten\ctl_rf.\c7_rf.$verific$mode_reg$dma_chrf.v:431$17681 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb0 [7], Q = \ctl_rf.c7_rf.mode).
Adding EN signal on $flatten\ctl_rf.\c7_rf.$verific$int_tc_msk_reg$dma_chrf.v:306$17629 ($adff) from module dma_top (D = $flatten\ctl_rf.\c7_rf.$verific$n114$17416, Q = \ctl_rf.c7_rf.int_tc_msk).
Adding EN signal on $flatten\ctl_rf.\c7_rf.$verific$int_tc1_msk_reg$dma_chrf.v:500$17728 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb0 [0], Q = \ctl_rf.c7_rf.int_tc1_msk).
Adding EN signal on $flatten\ctl_rf.\c7_rf.$verific$int_err_msk_reg$dma_chrf.v:500$17727 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb0 [1], Q = \ctl_rf.c7_rf.int_err_msk).
Adding EN signal on $flatten\ctl_rf.\c7_rf.$verific$int_abt_msk_reg$dma_chrf.v:500$17726 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb0 [2], Q = \ctl_rf.c7_rf.int_abt_msk).
Adding EN signal on $flatten\ctl_rf.\c7_rf.$verific$dwidth_reg$dma_chrf.v:422$17678 ($adff) from module dma_top (D = $flatten\ctl_rf.\c7_rf.$verific$n261$17514, Q = \ctl_rf.c7_rf.dwidth).
Adding EN signal on $flatten\ctl_rf.\c7_rf.$verific$dst_sel_reg$dma_chrf.v:463$17711 ($adff) from module dma_top (D = $flatten\ctl_rf.\c7_rf.$verific$n309$17465, Q = \ctl_rf.c7_rf.dst_sel).
Adding EN signal on $flatten\ctl_rf.\c7_rf.$verific$dreqmode_reg$dma_chrf.v:326$17637 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb3 [0], Q = \ctl_rf.c7_rf.dreqmode).
Adding EN signal on $flatten\ctl_rf.\c7_rf.$verific$dad_ctl1_reg$dma_chrf.v:463$17708 ($adff) from module dma_top (D = $flatten\ctl_rf.\c7_rf.$verific$n306$17462, Q = \ctl_rf.c7_rf.dad_ctl1).
Adding EN signal on $flatten\ctl_rf.\c7_rf.$verific$dad_ctl0_reg$dma_chrf.v:463$17709 ($adff) from module dma_top (D = $flatten\ctl_rf.\c7_rf.$verific$n307$17463, Q = \ctl_rf.c7_rf.dad_ctl0).
Adding EN signal on $flatten\ctl_rf.\c7_rf.$verific$chtsz_reg$dma_chrf.v:644$17810 ($adff) from module dma_top (D = $flatten\ctl_rf.\c7_rf.$verific$n1218$17561, Q = \ctl_rf.c7_rf.chtsz [7:0]).
Adding EN signal on $flatten\ctl_rf.\c7_rf.$verific$chtsz_reg$dma_chrf.v:644$17810 ($adff) from module dma_top (D = $flatten\ctl_rf.\c7_rf.$verific$n1216$17559, Q = \ctl_rf.c7_rf.chtsz [11:8]).
Adding EN signal on $flatten\ctl_rf.\c7_rf.$verific$chsad_reg$dma_chrf.v:540$17742 ($adff) from module dma_top (D = $flatten\ctl_rf.\c7_rf.$verific$n1195$17541, Q = \ctl_rf.c7_rf.chsad [7:0]).
Adding EN signal on $flatten\ctl_rf.\c7_rf.$verific$chsad_reg$dma_chrf.v:540$17742 ($adff) from module dma_top (D = $flatten\ctl_rf.\c7_rf.$verific$n1193$17539, Q = \ctl_rf.c7_rf.chsad [15:8]).
Adding EN signal on $flatten\ctl_rf.\c7_rf.$verific$chsad_reg$dma_chrf.v:540$17742 ($adff) from module dma_top (D = $flatten\ctl_rf.\c7_rf.$verific$n1191$17537, Q = \ctl_rf.c7_rf.chsad [23:16]).
Adding EN signal on $flatten\ctl_rf.\c7_rf.$verific$chsad_reg$dma_chrf.v:540$17742 ($adff) from module dma_top (D = $flatten\ctl_rf.\c7_rf.$verific$n1189$17535, Q = \ctl_rf.c7_rf.chsad [31:24]).
Adding EN signal on $flatten\ctl_rf.\c7_rf.$verific$chpri_reg$dma_chrf.v:316$17634 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb2 [7:6], Q = \ctl_rf.c7_rf.chpri).
Adding EN signal on $flatten\ctl_rf.\c7_rf.$verific$chllpen_reg$dma_chrf.v:239$17586 ($adff) from module dma_top (D = $flatten\ctl_rf.\c7_rf.$verific$n28$17389, Q = \ctl_rf.c7_rf.chllpen).
Adding EN signal on $flatten\ctl_rf.\c7_rf.$verific$chllp_reg$dma_chrf.v:621$17791 ($adff) from module dma_top (D = $flatten\ctl_rf.\c7_rf.$verific$n1213$17557, Q = \ctl_rf.c7_rf.chllp [7:0]).
Adding EN signal on $flatten\ctl_rf.\c7_rf.$verific$chllp_reg$dma_chrf.v:621$17791 ($adff) from module dma_top (D = $flatten\ctl_rf.\c7_rf.$verific$n1211$17555, Q = \ctl_rf.c7_rf.chllp [15:8]).
Adding EN signal on $flatten\ctl_rf.\c7_rf.$verific$chllp_reg$dma_chrf.v:621$17791 ($adff) from module dma_top (D = $flatten\ctl_rf.\c7_rf.$verific$n1209$17553, Q = \ctl_rf.c7_rf.chllp [23:16]).
Adding EN signal on $flatten\ctl_rf.\c7_rf.$verific$chllp_reg$dma_chrf.v:621$17791 ($adff) from module dma_top (D = $flatten\ctl_rf.\c7_rf.$verific$n1207$17551, Q = \ctl_rf.c7_rf.chllp [31:24]).
Adding EN signal on $flatten\ctl_rf.\c7_rf.$verific$chllp_on_reg$dma_chrf.v:267$17598 ($adff) from module dma_top (D = $flatten\ctl_rf.\c7_rf.$verific$n45$17398, Q = \ctl_rf.c7_rf.chllp_on).
Adding EN signal on $flatten\ctl_rf.\c7_rf.$verific$chllp_cnt_reg$dma_chrf.v:279$17613 ($adff) from module dma_top (D = $flatten\ctl_rf.\c7_rf.$verific$n86$17499, Q = \ctl_rf.c7_rf.chllp_cnt).
Adding EN signal on $flatten\ctl_rf.\c7_rf.$verific$chdad_reg$dma_chrf.v:580$17768 ($adff) from module dma_top (D = $flatten\ctl_rf.\c7_rf.$verific$n1204$17549, Q = \ctl_rf.c7_rf.chdad [7:0]).
Adding EN signal on $flatten\ctl_rf.\c7_rf.$verific$chdad_reg$dma_chrf.v:580$17768 ($adff) from module dma_top (D = $flatten\ctl_rf.\c7_rf.$verific$n1202$17547, Q = \ctl_rf.c7_rf.chdad [15:8]).
Adding EN signal on $flatten\ctl_rf.\c7_rf.$verific$chdad_reg$dma_chrf.v:580$17768 ($adff) from module dma_top (D = $flatten\ctl_rf.\c7_rf.$verific$n1200$17545, Q = \ctl_rf.c7_rf.chdad [23:16]).
Adding EN signal on $flatten\ctl_rf.\c7_rf.$verific$chdad_reg$dma_chrf.v:580$17768 ($adff) from module dma_top (D = $flatten\ctl_rf.\c7_rf.$verific$n1198$17543, Q = \ctl_rf.c7_rf.chdad [31:24]).
Adding EN signal on $flatten\ctl_rf.\c7_rf.$verific$chabt_reg$dma_chrf.v:390$17663 ($adff) from module dma_top (D = $flatten\ctl_rf.\c7_rf.$verific$n198$17435, Q = \ctl_rf.c7_rf.chabt).
Adding EN signal on $flatten\ctl_rf.\c7_rf.$verific$ch_en_reg$dma_chrf.v:480$17720 ($adff) from module dma_top (D = $flatten\ctl_rf.\c7_rf.$verific$n334$17471, Q = \ctl_rf.c7_rf.ch_en).
Adding EN signal on $flatten\ctl_rf.\c7_rf.$verific$autold_reg$dma_chrf.v:400$17667 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb1 [6], Q = \ctl_rf.c7_rf.autold).
Adding EN signal on $flatten\ctl_rf.\c6_rf.$verific$swidth_reg$dma_chrf.v:411$17222 ($adff) from module dma_top (D = $flatten\ctl_rf.\c6_rf.$verific$n231$17059, Q = \ctl_rf.c6_rf.swidth).
Adding EN signal on $flatten\ctl_rf.\c6_rf.$verific$src_sz_reg$dma_chrf.v:352$17199 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb2 [2:0], Q = \ctl_rf.c6_rf.src_sz).
Adding EN signal on $flatten\ctl_rf.\c6_rf.$verific$src_sel_reg$dma_chrf.v:463$17259 ($adff) from module dma_top (D = $flatten\ctl_rf.\c6_rf.$verific$n308$17013, Q = \ctl_rf.c6_rf.src_sel).
Adding EN signal on $flatten\ctl_rf.\c6_rf.$verific$sad_ctl1_reg$dma_chrf.v:463$17255 ($adff) from module dma_top (D = $flatten\ctl_rf.\c6_rf.$verific$n304$17009, Q = \ctl_rf.c6_rf.sad_ctl1).
Adding EN signal on $flatten\ctl_rf.\c6_rf.$verific$sad_ctl0_reg$dma_chrf.v:463$17256 ($adff) from module dma_top (D = $flatten\ctl_rf.\c6_rf.$verific$n305$17010, Q = \ctl_rf.c6_rf.sad_ctl0).
Adding EN signal on $flatten\ctl_rf.\c6_rf.$verific$prot3_reg$dma_chrf.v:343$17193 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb2 [5], Q = \ctl_rf.c6_rf.prot3).
Adding EN signal on $flatten\ctl_rf.\c6_rf.$verific$prot2_reg$dma_chrf.v:343$17194 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb2 [4], Q = \ctl_rf.c6_rf.prot2).
Adding EN signal on $flatten\ctl_rf.\c6_rf.$verific$prot1_reg$dma_chrf.v:343$17195 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb2 [3], Q = \ctl_rf.c6_rf.prot1).
Adding EN signal on $flatten\ctl_rf.\c6_rf.$verific$mode_reg$dma_chrf.v:431$17230 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb0 [7], Q = \ctl_rf.c6_rf.mode).
Adding EN signal on $flatten\ctl_rf.\c6_rf.$verific$int_tc_msk_reg$dma_chrf.v:306$17178 ($adff) from module dma_top (D = $flatten\ctl_rf.\c6_rf.$verific$n114$16965, Q = \ctl_rf.c6_rf.int_tc_msk).
Adding EN signal on $flatten\ctl_rf.\c6_rf.$verific$int_tc1_msk_reg$dma_chrf.v:500$17277 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb0 [0], Q = \ctl_rf.c6_rf.int_tc1_msk).
Adding EN signal on $flatten\ctl_rf.\c6_rf.$verific$int_err_msk_reg$dma_chrf.v:500$17276 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb0 [1], Q = \ctl_rf.c6_rf.int_err_msk).
Adding EN signal on $flatten\ctl_rf.\c6_rf.$verific$int_abt_msk_reg$dma_chrf.v:500$17275 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb0 [2], Q = \ctl_rf.c6_rf.int_abt_msk).
Adding EN signal on $flatten\ctl_rf.\c6_rf.$verific$dwidth_reg$dma_chrf.v:422$17227 ($adff) from module dma_top (D = $flatten\ctl_rf.\c6_rf.$verific$n261$17063, Q = \ctl_rf.c6_rf.dwidth).
Adding EN signal on $flatten\ctl_rf.\c6_rf.$verific$dst_sel_reg$dma_chrf.v:463$17260 ($adff) from module dma_top (D = $flatten\ctl_rf.\c6_rf.$verific$n309$17014, Q = \ctl_rf.c6_rf.dst_sel).
Adding EN signal on $flatten\ctl_rf.\c6_rf.$verific$dreqmode_reg$dma_chrf.v:326$17186 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb3 [0], Q = \ctl_rf.c6_rf.dreqmode).
Adding EN signal on $flatten\ctl_rf.\c6_rf.$verific$dad_ctl1_reg$dma_chrf.v:463$17257 ($adff) from module dma_top (D = $flatten\ctl_rf.\c6_rf.$verific$n306$17011, Q = \ctl_rf.c6_rf.dad_ctl1).
Adding EN signal on $flatten\ctl_rf.\c6_rf.$verific$dad_ctl0_reg$dma_chrf.v:463$17258 ($adff) from module dma_top (D = $flatten\ctl_rf.\c6_rf.$verific$n307$17012, Q = \ctl_rf.c6_rf.dad_ctl0).
Adding EN signal on $flatten\ctl_rf.\c6_rf.$verific$chtsz_reg$dma_chrf.v:644$17359 ($adff) from module dma_top (D = $flatten\ctl_rf.\c6_rf.$verific$n1218$17110, Q = \ctl_rf.c6_rf.chtsz [7:0]).
Adding EN signal on $flatten\ctl_rf.\c6_rf.$verific$chtsz_reg$dma_chrf.v:644$17359 ($adff) from module dma_top (D = $flatten\ctl_rf.\c6_rf.$verific$n1216$17108, Q = \ctl_rf.c6_rf.chtsz [11:8]).
Adding EN signal on $flatten\ctl_rf.\c6_rf.$verific$chsad_reg$dma_chrf.v:540$17291 ($adff) from module dma_top (D = $flatten\ctl_rf.\c6_rf.$verific$n1195$17090, Q = \ctl_rf.c6_rf.chsad [7:0]).
Adding EN signal on $flatten\ctl_rf.\c6_rf.$verific$chsad_reg$dma_chrf.v:540$17291 ($adff) from module dma_top (D = $flatten\ctl_rf.\c6_rf.$verific$n1193$17088, Q = \ctl_rf.c6_rf.chsad [15:8]).
Adding EN signal on $flatten\ctl_rf.\c6_rf.$verific$chsad_reg$dma_chrf.v:540$17291 ($adff) from module dma_top (D = $flatten\ctl_rf.\c6_rf.$verific$n1191$17086, Q = \ctl_rf.c6_rf.chsad [23:16]).
Adding EN signal on $flatten\ctl_rf.\c6_rf.$verific$chsad_reg$dma_chrf.v:540$17291 ($adff) from module dma_top (D = $flatten\ctl_rf.\c6_rf.$verific$n1189$17084, Q = \ctl_rf.c6_rf.chsad [31:24]).
Adding EN signal on $flatten\ctl_rf.\c6_rf.$verific$chpri_reg$dma_chrf.v:316$17183 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb2 [7:6], Q = \ctl_rf.c6_rf.chpri).
Adding EN signal on $flatten\ctl_rf.\c6_rf.$verific$chllpen_reg$dma_chrf.v:239$17135 ($adff) from module dma_top (D = $flatten\ctl_rf.\c6_rf.$verific$n28$16938, Q = \ctl_rf.c6_rf.chllpen).
Adding EN signal on $flatten\ctl_rf.\c6_rf.$verific$chllp_reg$dma_chrf.v:621$17340 ($adff) from module dma_top (D = $flatten\ctl_rf.\c6_rf.$verific$n1213$17106, Q = \ctl_rf.c6_rf.chllp [7:0]).
Adding EN signal on $flatten\ctl_rf.\c6_rf.$verific$chllp_reg$dma_chrf.v:621$17340 ($adff) from module dma_top (D = $flatten\ctl_rf.\c6_rf.$verific$n1211$17104, Q = \ctl_rf.c6_rf.chllp [15:8]).
Adding EN signal on $flatten\ctl_rf.\c6_rf.$verific$chllp_reg$dma_chrf.v:621$17340 ($adff) from module dma_top (D = $flatten\ctl_rf.\c6_rf.$verific$n1209$17102, Q = \ctl_rf.c6_rf.chllp [23:16]).
Adding EN signal on $flatten\ctl_rf.\c6_rf.$verific$chllp_reg$dma_chrf.v:621$17340 ($adff) from module dma_top (D = $flatten\ctl_rf.\c6_rf.$verific$n1207$17100, Q = \ctl_rf.c6_rf.chllp [31:24]).
Adding EN signal on $flatten\ctl_rf.\c6_rf.$verific$chllp_on_reg$dma_chrf.v:267$17147 ($adff) from module dma_top (D = $flatten\ctl_rf.\c6_rf.$verific$n45$16947, Q = \ctl_rf.c6_rf.chllp_on).
Adding EN signal on $flatten\ctl_rf.\c6_rf.$verific$chllp_cnt_reg$dma_chrf.v:279$17162 ($adff) from module dma_top (D = $flatten\ctl_rf.\c6_rf.$verific$n86$17048, Q = \ctl_rf.c6_rf.chllp_cnt).
Adding EN signal on $flatten\ctl_rf.\c6_rf.$verific$chdad_reg$dma_chrf.v:580$17317 ($adff) from module dma_top (D = $flatten\ctl_rf.\c6_rf.$verific$n1204$17098, Q = \ctl_rf.c6_rf.chdad [7:0]).
Adding EN signal on $flatten\ctl_rf.\c6_rf.$verific$chdad_reg$dma_chrf.v:580$17317 ($adff) from module dma_top (D = $flatten\ctl_rf.\c6_rf.$verific$n1202$17096, Q = \ctl_rf.c6_rf.chdad [15:8]).
Adding EN signal on $flatten\ctl_rf.\c6_rf.$verific$chdad_reg$dma_chrf.v:580$17317 ($adff) from module dma_top (D = $flatten\ctl_rf.\c6_rf.$verific$n1200$17094, Q = \ctl_rf.c6_rf.chdad [23:16]).
Adding EN signal on $flatten\ctl_rf.\c6_rf.$verific$chdad_reg$dma_chrf.v:580$17317 ($adff) from module dma_top (D = $flatten\ctl_rf.\c6_rf.$verific$n1198$17092, Q = \ctl_rf.c6_rf.chdad [31:24]).
Adding EN signal on $flatten\ctl_rf.\c6_rf.$verific$chabt_reg$dma_chrf.v:390$17212 ($adff) from module dma_top (D = $flatten\ctl_rf.\c6_rf.$verific$n198$16984, Q = \ctl_rf.c6_rf.chabt).
Adding EN signal on $flatten\ctl_rf.\c6_rf.$verific$ch_en_reg$dma_chrf.v:480$17269 ($adff) from module dma_top (D = $flatten\ctl_rf.\c6_rf.$verific$n334$17020, Q = \ctl_rf.c6_rf.ch_en).
Adding EN signal on $flatten\ctl_rf.\c6_rf.$verific$autold_reg$dma_chrf.v:400$17216 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb1 [6], Q = \ctl_rf.c6_rf.autold).
Adding EN signal on $flatten\ctl_rf.\c5_rf.$verific$swidth_reg$dma_chrf.v:411$16771 ($adff) from module dma_top (D = $flatten\ctl_rf.\c5_rf.$verific$n231$16608, Q = \ctl_rf.c5_rf.swidth).
Adding EN signal on $flatten\ctl_rf.\c5_rf.$verific$src_sz_reg$dma_chrf.v:352$16748 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb2 [2:0], Q = \ctl_rf.c5_rf.src_sz).
Adding EN signal on $flatten\ctl_rf.\c5_rf.$verific$src_sel_reg$dma_chrf.v:463$16808 ($adff) from module dma_top (D = $flatten\ctl_rf.\c5_rf.$verific$n308$16562, Q = \ctl_rf.c5_rf.src_sel).
Adding EN signal on $flatten\ctl_rf.\c5_rf.$verific$sad_ctl1_reg$dma_chrf.v:463$16804 ($adff) from module dma_top (D = $flatten\ctl_rf.\c5_rf.$verific$n304$16558, Q = \ctl_rf.c5_rf.sad_ctl1).
Adding EN signal on $flatten\ctl_rf.\c5_rf.$verific$sad_ctl0_reg$dma_chrf.v:463$16805 ($adff) from module dma_top (D = $flatten\ctl_rf.\c5_rf.$verific$n305$16559, Q = \ctl_rf.c5_rf.sad_ctl0).
Adding EN signal on $flatten\ctl_rf.\c5_rf.$verific$prot3_reg$dma_chrf.v:343$16742 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb2 [5], Q = \ctl_rf.c5_rf.prot3).
Adding EN signal on $flatten\ctl_rf.\c5_rf.$verific$prot2_reg$dma_chrf.v:343$16743 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb2 [4], Q = \ctl_rf.c5_rf.prot2).
Adding EN signal on $flatten\ctl_rf.\c5_rf.$verific$prot1_reg$dma_chrf.v:343$16744 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb2 [3], Q = \ctl_rf.c5_rf.prot1).
Adding EN signal on $flatten\ctl_rf.\c5_rf.$verific$mode_reg$dma_chrf.v:431$16779 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb0 [7], Q = \ctl_rf.c5_rf.mode).
Adding EN signal on $flatten\ctl_rf.\c5_rf.$verific$int_tc_msk_reg$dma_chrf.v:306$16727 ($adff) from module dma_top (D = $flatten\ctl_rf.\c5_rf.$verific$n114$16514, Q = \ctl_rf.c5_rf.int_tc_msk).
Adding EN signal on $flatten\ctl_rf.\c5_rf.$verific$int_tc1_msk_reg$dma_chrf.v:500$16826 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb0 [0], Q = \ctl_rf.c5_rf.int_tc1_msk).
Adding EN signal on $flatten\ctl_rf.\c5_rf.$verific$int_err_msk_reg$dma_chrf.v:500$16825 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb0 [1], Q = \ctl_rf.c5_rf.int_err_msk).
Adding EN signal on $flatten\ctl_rf.\c5_rf.$verific$int_abt_msk_reg$dma_chrf.v:500$16824 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb0 [2], Q = \ctl_rf.c5_rf.int_abt_msk).
Adding EN signal on $flatten\ctl_rf.\c5_rf.$verific$dwidth_reg$dma_chrf.v:422$16776 ($adff) from module dma_top (D = $flatten\ctl_rf.\c5_rf.$verific$n261$16612, Q = \ctl_rf.c5_rf.dwidth).
Adding EN signal on $flatten\ctl_rf.\c5_rf.$verific$dst_sel_reg$dma_chrf.v:463$16809 ($adff) from module dma_top (D = $flatten\ctl_rf.\c5_rf.$verific$n309$16563, Q = \ctl_rf.c5_rf.dst_sel).
Adding EN signal on $flatten\ctl_rf.\c5_rf.$verific$dreqmode_reg$dma_chrf.v:326$16735 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb3 [0], Q = \ctl_rf.c5_rf.dreqmode).
Adding EN signal on $flatten\ctl_rf.\c5_rf.$verific$dad_ctl1_reg$dma_chrf.v:463$16806 ($adff) from module dma_top (D = $flatten\ctl_rf.\c5_rf.$verific$n306$16560, Q = \ctl_rf.c5_rf.dad_ctl1).
Adding EN signal on $flatten\ctl_rf.\c5_rf.$verific$dad_ctl0_reg$dma_chrf.v:463$16807 ($adff) from module dma_top (D = $flatten\ctl_rf.\c5_rf.$verific$n307$16561, Q = \ctl_rf.c5_rf.dad_ctl0).
Adding EN signal on $flatten\ctl_rf.\c5_rf.$verific$chtsz_reg$dma_chrf.v:644$16908 ($adff) from module dma_top (D = $flatten\ctl_rf.\c5_rf.$verific$n1218$16659, Q = \ctl_rf.c5_rf.chtsz [7:0]).
Adding EN signal on $flatten\ctl_rf.\c5_rf.$verific$chtsz_reg$dma_chrf.v:644$16908 ($adff) from module dma_top (D = $flatten\ctl_rf.\c5_rf.$verific$n1216$16657, Q = \ctl_rf.c5_rf.chtsz [11:8]).
Adding EN signal on $flatten\ctl_rf.\c5_rf.$verific$chsad_reg$dma_chrf.v:540$16840 ($adff) from module dma_top (D = $flatten\ctl_rf.\c5_rf.$verific$n1195$16639, Q = \ctl_rf.c5_rf.chsad [7:0]).
Adding EN signal on $flatten\ctl_rf.\c5_rf.$verific$chsad_reg$dma_chrf.v:540$16840 ($adff) from module dma_top (D = $flatten\ctl_rf.\c5_rf.$verific$n1193$16637, Q = \ctl_rf.c5_rf.chsad [15:8]).
Adding EN signal on $flatten\ctl_rf.\c5_rf.$verific$chsad_reg$dma_chrf.v:540$16840 ($adff) from module dma_top (D = $flatten\ctl_rf.\c5_rf.$verific$n1191$16635, Q = \ctl_rf.c5_rf.chsad [23:16]).
Adding EN signal on $flatten\ctl_rf.\c5_rf.$verific$chsad_reg$dma_chrf.v:540$16840 ($adff) from module dma_top (D = $flatten\ctl_rf.\c5_rf.$verific$n1189$16633, Q = \ctl_rf.c5_rf.chsad [31:24]).
Adding EN signal on $flatten\ctl_rf.\c5_rf.$verific$chpri_reg$dma_chrf.v:316$16732 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb2 [7:6], Q = \ctl_rf.c5_rf.chpri).
Adding EN signal on $flatten\ctl_rf.\c5_rf.$verific$chllpen_reg$dma_chrf.v:239$16684 ($adff) from module dma_top (D = $flatten\ctl_rf.\c5_rf.$verific$n28$16487, Q = \ctl_rf.c5_rf.chllpen).
Adding EN signal on $flatten\ctl_rf.\c5_rf.$verific$chllp_reg$dma_chrf.v:621$16889 ($adff) from module dma_top (D = $flatten\ctl_rf.\c5_rf.$verific$n1213$16655, Q = \ctl_rf.c5_rf.chllp [7:0]).
Adding EN signal on $flatten\ctl_rf.\c5_rf.$verific$chllp_reg$dma_chrf.v:621$16889 ($adff) from module dma_top (D = $flatten\ctl_rf.\c5_rf.$verific$n1211$16653, Q = \ctl_rf.c5_rf.chllp [15:8]).
Adding EN signal on $flatten\ctl_rf.\c5_rf.$verific$chllp_reg$dma_chrf.v:621$16889 ($adff) from module dma_top (D = $flatten\ctl_rf.\c5_rf.$verific$n1209$16651, Q = \ctl_rf.c5_rf.chllp [23:16]).
Adding EN signal on $flatten\ctl_rf.\c5_rf.$verific$chllp_reg$dma_chrf.v:621$16889 ($adff) from module dma_top (D = $flatten\ctl_rf.\c5_rf.$verific$n1207$16649, Q = \ctl_rf.c5_rf.chllp [31:24]).
Adding EN signal on $flatten\ctl_rf.\c5_rf.$verific$chllp_on_reg$dma_chrf.v:267$16696 ($adff) from module dma_top (D = $flatten\ctl_rf.\c5_rf.$verific$n45$16496, Q = \ctl_rf.c5_rf.chllp_on).
Adding EN signal on $flatten\ctl_rf.\c5_rf.$verific$chllp_cnt_reg$dma_chrf.v:279$16711 ($adff) from module dma_top (D = $flatten\ctl_rf.\c5_rf.$verific$n86$16597, Q = \ctl_rf.c5_rf.chllp_cnt).
Adding EN signal on $flatten\ctl_rf.\c5_rf.$verific$chdad_reg$dma_chrf.v:580$16866 ($adff) from module dma_top (D = $flatten\ctl_rf.\c5_rf.$verific$n1204$16647, Q = \ctl_rf.c5_rf.chdad [7:0]).
Adding EN signal on $flatten\ctl_rf.\c5_rf.$verific$chdad_reg$dma_chrf.v:580$16866 ($adff) from module dma_top (D = $flatten\ctl_rf.\c5_rf.$verific$n1202$16645, Q = \ctl_rf.c5_rf.chdad [15:8]).
Adding EN signal on $flatten\ctl_rf.\c5_rf.$verific$chdad_reg$dma_chrf.v:580$16866 ($adff) from module dma_top (D = $flatten\ctl_rf.\c5_rf.$verific$n1200$16643, Q = \ctl_rf.c5_rf.chdad [23:16]).
Adding EN signal on $flatten\ctl_rf.\c5_rf.$verific$chdad_reg$dma_chrf.v:580$16866 ($adff) from module dma_top (D = $flatten\ctl_rf.\c5_rf.$verific$n1198$16641, Q = \ctl_rf.c5_rf.chdad [31:24]).
Adding EN signal on $flatten\ctl_rf.\c5_rf.$verific$chabt_reg$dma_chrf.v:390$16761 ($adff) from module dma_top (D = $flatten\ctl_rf.\c5_rf.$verific$n198$16533, Q = \ctl_rf.c5_rf.chabt).
Adding EN signal on $flatten\ctl_rf.\c5_rf.$verific$ch_en_reg$dma_chrf.v:480$16818 ($adff) from module dma_top (D = $flatten\ctl_rf.\c5_rf.$verific$n334$16569, Q = \ctl_rf.c5_rf.ch_en).
Adding EN signal on $flatten\ctl_rf.\c5_rf.$verific$autold_reg$dma_chrf.v:400$16765 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb1 [6], Q = \ctl_rf.c5_rf.autold).
Adding EN signal on $flatten\ctl_rf.\c4_rf.$verific$swidth_reg$dma_chrf.v:411$16320 ($adff) from module dma_top (D = $flatten\ctl_rf.\c4_rf.$verific$n231$16157, Q = \ctl_rf.c4_rf.swidth).
Adding EN signal on $flatten\ctl_rf.\c4_rf.$verific$src_sz_reg$dma_chrf.v:352$16297 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb2 [2:0], Q = \ctl_rf.c4_rf.src_sz).
Adding EN signal on $flatten\ctl_rf.\c4_rf.$verific$src_sel_reg$dma_chrf.v:463$16357 ($adff) from module dma_top (D = $flatten\ctl_rf.\c4_rf.$verific$n308$16111, Q = \ctl_rf.c4_rf.src_sel).
Adding EN signal on $flatten\ctl_rf.\c4_rf.$verific$sad_ctl1_reg$dma_chrf.v:463$16353 ($adff) from module dma_top (D = $flatten\ctl_rf.\c4_rf.$verific$n304$16107, Q = \ctl_rf.c4_rf.sad_ctl1).
Adding EN signal on $flatten\ctl_rf.\c4_rf.$verific$sad_ctl0_reg$dma_chrf.v:463$16354 ($adff) from module dma_top (D = $flatten\ctl_rf.\c4_rf.$verific$n305$16108, Q = \ctl_rf.c4_rf.sad_ctl0).
Adding EN signal on $flatten\ctl_rf.\c4_rf.$verific$prot3_reg$dma_chrf.v:343$16291 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb2 [5], Q = \ctl_rf.c4_rf.prot3).
Adding EN signal on $flatten\ctl_rf.\c4_rf.$verific$prot2_reg$dma_chrf.v:343$16292 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb2 [4], Q = \ctl_rf.c4_rf.prot2).
Adding EN signal on $flatten\ctl_rf.\c4_rf.$verific$prot1_reg$dma_chrf.v:343$16293 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb2 [3], Q = \ctl_rf.c4_rf.prot1).
Adding EN signal on $flatten\ctl_rf.\c4_rf.$verific$mode_reg$dma_chrf.v:431$16328 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb0 [7], Q = \ctl_rf.c4_rf.mode).
Adding EN signal on $flatten\ctl_rf.\c4_rf.$verific$int_tc_msk_reg$dma_chrf.v:306$16276 ($adff) from module dma_top (D = $flatten\ctl_rf.\c4_rf.$verific$n114$16063, Q = \ctl_rf.c4_rf.int_tc_msk).
Adding EN signal on $flatten\ctl_rf.\c4_rf.$verific$int_tc1_msk_reg$dma_chrf.v:500$16375 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb0 [0], Q = \ctl_rf.c4_rf.int_tc1_msk).
Adding EN signal on $flatten\ctl_rf.\c4_rf.$verific$int_err_msk_reg$dma_chrf.v:500$16374 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb0 [1], Q = \ctl_rf.c4_rf.int_err_msk).
Adding EN signal on $flatten\ctl_rf.\c4_rf.$verific$int_abt_msk_reg$dma_chrf.v:500$16373 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb0 [2], Q = \ctl_rf.c4_rf.int_abt_msk).
Adding EN signal on $flatten\ctl_rf.\c4_rf.$verific$dwidth_reg$dma_chrf.v:422$16325 ($adff) from module dma_top (D = $flatten\ctl_rf.\c4_rf.$verific$n261$16161, Q = \ctl_rf.c4_rf.dwidth).
Adding EN signal on $flatten\ctl_rf.\c4_rf.$verific$dst_sel_reg$dma_chrf.v:463$16358 ($adff) from module dma_top (D = $flatten\ctl_rf.\c4_rf.$verific$n309$16112, Q = \ctl_rf.c4_rf.dst_sel).
Adding EN signal on $flatten\ctl_rf.\c4_rf.$verific$dreqmode_reg$dma_chrf.v:326$16284 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb3 [0], Q = \ctl_rf.c4_rf.dreqmode).
Adding EN signal on $flatten\ctl_rf.\c4_rf.$verific$dad_ctl1_reg$dma_chrf.v:463$16355 ($adff) from module dma_top (D = $flatten\ctl_rf.\c4_rf.$verific$n306$16109, Q = \ctl_rf.c4_rf.dad_ctl1).
Adding EN signal on $flatten\ctl_rf.\c4_rf.$verific$dad_ctl0_reg$dma_chrf.v:463$16356 ($adff) from module dma_top (D = $flatten\ctl_rf.\c4_rf.$verific$n307$16110, Q = \ctl_rf.c4_rf.dad_ctl0).
Adding EN signal on $flatten\ctl_rf.\c4_rf.$verific$chtsz_reg$dma_chrf.v:644$16457 ($adff) from module dma_top (D = $flatten\ctl_rf.\c4_rf.$verific$n1218$16208, Q = \ctl_rf.c4_rf.chtsz [7:0]).
Adding EN signal on $flatten\ctl_rf.\c4_rf.$verific$chtsz_reg$dma_chrf.v:644$16457 ($adff) from module dma_top (D = $flatten\ctl_rf.\c4_rf.$verific$n1216$16206, Q = \ctl_rf.c4_rf.chtsz [11:8]).
Adding EN signal on $flatten\ctl_rf.\c4_rf.$verific$chsad_reg$dma_chrf.v:540$16389 ($adff) from module dma_top (D = $flatten\ctl_rf.\c4_rf.$verific$n1195$16188, Q = \ctl_rf.c4_rf.chsad [7:0]).
Adding EN signal on $flatten\ctl_rf.\c4_rf.$verific$chsad_reg$dma_chrf.v:540$16389 ($adff) from module dma_top (D = $flatten\ctl_rf.\c4_rf.$verific$n1193$16186, Q = \ctl_rf.c4_rf.chsad [15:8]).
Adding EN signal on $flatten\ctl_rf.\c4_rf.$verific$chsad_reg$dma_chrf.v:540$16389 ($adff) from module dma_top (D = $flatten\ctl_rf.\c4_rf.$verific$n1191$16184, Q = \ctl_rf.c4_rf.chsad [23:16]).
Adding EN signal on $flatten\ctl_rf.\c4_rf.$verific$chsad_reg$dma_chrf.v:540$16389 ($adff) from module dma_top (D = $flatten\ctl_rf.\c4_rf.$verific$n1189$16182, Q = \ctl_rf.c4_rf.chsad [31:24]).
Adding EN signal on $flatten\ctl_rf.\c4_rf.$verific$chpri_reg$dma_chrf.v:316$16281 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb2 [7:6], Q = \ctl_rf.c4_rf.chpri).
Adding EN signal on $flatten\ctl_rf.\c4_rf.$verific$chllpen_reg$dma_chrf.v:239$16233 ($adff) from module dma_top (D = $flatten\ctl_rf.\c4_rf.$verific$n28$16036, Q = \ctl_rf.c4_rf.chllpen).
Adding EN signal on $flatten\ctl_rf.\c4_rf.$verific$chllp_reg$dma_chrf.v:621$16438 ($adff) from module dma_top (D = $flatten\ctl_rf.\c4_rf.$verific$n1213$16204, Q = \ctl_rf.c4_rf.chllp [7:0]).
Adding EN signal on $flatten\ctl_rf.\c4_rf.$verific$chllp_reg$dma_chrf.v:621$16438 ($adff) from module dma_top (D = $flatten\ctl_rf.\c4_rf.$verific$n1211$16202, Q = \ctl_rf.c4_rf.chllp [15:8]).
Adding EN signal on $flatten\ctl_rf.\c4_rf.$verific$chllp_reg$dma_chrf.v:621$16438 ($adff) from module dma_top (D = $flatten\ctl_rf.\c4_rf.$verific$n1209$16200, Q = \ctl_rf.c4_rf.chllp [23:16]).
Adding EN signal on $flatten\ctl_rf.\c4_rf.$verific$chllp_reg$dma_chrf.v:621$16438 ($adff) from module dma_top (D = $flatten\ctl_rf.\c4_rf.$verific$n1207$16198, Q = \ctl_rf.c4_rf.chllp [31:24]).
Adding EN signal on $flatten\ctl_rf.\c4_rf.$verific$chllp_on_reg$dma_chrf.v:267$16245 ($adff) from module dma_top (D = $flatten\ctl_rf.\c4_rf.$verific$n45$16045, Q = \ctl_rf.c4_rf.chllp_on).
Adding EN signal on $flatten\ctl_rf.\c4_rf.$verific$chllp_cnt_reg$dma_chrf.v:279$16260 ($adff) from module dma_top (D = $flatten\ctl_rf.\c4_rf.$verific$n86$16146, Q = \ctl_rf.c4_rf.chllp_cnt).
Adding EN signal on $flatten\ctl_rf.\c4_rf.$verific$chdad_reg$dma_chrf.v:580$16415 ($adff) from module dma_top (D = $flatten\ctl_rf.\c4_rf.$verific$n1204$16196, Q = \ctl_rf.c4_rf.chdad [7:0]).
Adding EN signal on $flatten\ctl_rf.\c4_rf.$verific$chdad_reg$dma_chrf.v:580$16415 ($adff) from module dma_top (D = $flatten\ctl_rf.\c4_rf.$verific$n1202$16194, Q = \ctl_rf.c4_rf.chdad [15:8]).
Adding EN signal on $flatten\ctl_rf.\c4_rf.$verific$chdad_reg$dma_chrf.v:580$16415 ($adff) from module dma_top (D = $flatten\ctl_rf.\c4_rf.$verific$n1200$16192, Q = \ctl_rf.c4_rf.chdad [23:16]).
Adding EN signal on $flatten\ctl_rf.\c4_rf.$verific$chdad_reg$dma_chrf.v:580$16415 ($adff) from module dma_top (D = $flatten\ctl_rf.\c4_rf.$verific$n1198$16190, Q = \ctl_rf.c4_rf.chdad [31:24]).
Adding EN signal on $flatten\ctl_rf.\c4_rf.$verific$chabt_reg$dma_chrf.v:390$16310 ($adff) from module dma_top (D = $flatten\ctl_rf.\c4_rf.$verific$n198$16082, Q = \ctl_rf.c4_rf.chabt).
Adding EN signal on $flatten\ctl_rf.\c4_rf.$verific$ch_en_reg$dma_chrf.v:480$16367 ($adff) from module dma_top (D = $flatten\ctl_rf.\c4_rf.$verific$n334$16118, Q = \ctl_rf.c4_rf.ch_en).
Adding EN signal on $flatten\ctl_rf.\c4_rf.$verific$autold_reg$dma_chrf.v:400$16314 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb1 [6], Q = \ctl_rf.c4_rf.autold).
Adding EN signal on $flatten\ctl_rf.\c3_rf.$verific$swidth_reg$dma_chrf.v:411$15869 ($adff) from module dma_top (D = $flatten\ctl_rf.\c3_rf.$verific$n231$15706, Q = \ctl_rf.c3_rf.swidth).
Adding EN signal on $flatten\ctl_rf.\c3_rf.$verific$src_sz_reg$dma_chrf.v:352$15846 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb2 [2:0], Q = \ctl_rf.c3_rf.src_sz).
Adding EN signal on $flatten\ctl_rf.\c3_rf.$verific$src_sel_reg$dma_chrf.v:463$15906 ($adff) from module dma_top (D = $flatten\ctl_rf.\c3_rf.$verific$n308$15660, Q = \ctl_rf.c3_rf.src_sel).
Adding EN signal on $flatten\ctl_rf.\c3_rf.$verific$sad_ctl1_reg$dma_chrf.v:463$15902 ($adff) from module dma_top (D = $flatten\ctl_rf.\c3_rf.$verific$n304$15656, Q = \ctl_rf.c3_rf.sad_ctl1).
Adding EN signal on $flatten\ctl_rf.\c3_rf.$verific$sad_ctl0_reg$dma_chrf.v:463$15903 ($adff) from module dma_top (D = $flatten\ctl_rf.\c3_rf.$verific$n305$15657, Q = \ctl_rf.c3_rf.sad_ctl0).
Adding EN signal on $flatten\ctl_rf.\c3_rf.$verific$prot3_reg$dma_chrf.v:343$15840 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb2 [5], Q = \ctl_rf.c3_rf.prot3).
Adding EN signal on $flatten\ctl_rf.\c3_rf.$verific$prot2_reg$dma_chrf.v:343$15841 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb2 [4], Q = \ctl_rf.c3_rf.prot2).
Adding EN signal on $flatten\ctl_rf.\c3_rf.$verific$prot1_reg$dma_chrf.v:343$15842 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb2 [3], Q = \ctl_rf.c3_rf.prot1).
Adding EN signal on $flatten\ctl_rf.\c3_rf.$verific$mode_reg$dma_chrf.v:431$15877 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb0 [7], Q = \ctl_rf.c3_rf.mode).
Adding EN signal on $flatten\ctl_rf.\c3_rf.$verific$int_tc_msk_reg$dma_chrf.v:306$15825 ($adff) from module dma_top (D = $flatten\ctl_rf.\c3_rf.$verific$n114$15612, Q = \ctl_rf.c3_rf.int_tc_msk).
Adding EN signal on $flatten\ctl_rf.\c3_rf.$verific$int_tc1_msk_reg$dma_chrf.v:500$15924 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb0 [0], Q = \ctl_rf.c3_rf.int_tc1_msk).
Adding EN signal on $flatten\ctl_rf.\c3_rf.$verific$int_err_msk_reg$dma_chrf.v:500$15923 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb0 [1], Q = \ctl_rf.c3_rf.int_err_msk).
Adding EN signal on $flatten\ctl_rf.\c3_rf.$verific$int_abt_msk_reg$dma_chrf.v:500$15922 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb0 [2], Q = \ctl_rf.c3_rf.int_abt_msk).
Adding EN signal on $flatten\ctl_rf.\c3_rf.$verific$dwidth_reg$dma_chrf.v:422$15874 ($adff) from module dma_top (D = $flatten\ctl_rf.\c3_rf.$verific$n261$15710, Q = \ctl_rf.c3_rf.dwidth).
Adding EN signal on $flatten\ctl_rf.\c3_rf.$verific$dst_sel_reg$dma_chrf.v:463$15907 ($adff) from module dma_top (D = $flatten\ctl_rf.\c3_rf.$verific$n309$15661, Q = \ctl_rf.c3_rf.dst_sel).
Adding EN signal on $flatten\ctl_rf.\c3_rf.$verific$dreqmode_reg$dma_chrf.v:326$15833 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb3 [0], Q = \ctl_rf.c3_rf.dreqmode).
Adding EN signal on $flatten\ctl_rf.\c3_rf.$verific$dad_ctl1_reg$dma_chrf.v:463$15904 ($adff) from module dma_top (D = $flatten\ctl_rf.\c3_rf.$verific$n306$15658, Q = \ctl_rf.c3_rf.dad_ctl1).
Adding EN signal on $flatten\ctl_rf.\c3_rf.$verific$dad_ctl0_reg$dma_chrf.v:463$15905 ($adff) from module dma_top (D = $flatten\ctl_rf.\c3_rf.$verific$n307$15659, Q = \ctl_rf.c3_rf.dad_ctl0).
Adding EN signal on $flatten\ctl_rf.\c3_rf.$verific$chtsz_reg$dma_chrf.v:644$16006 ($adff) from module dma_top (D = $flatten\ctl_rf.\c3_rf.$verific$n1218$15757, Q = \ctl_rf.c3_rf.chtsz [7:0]).
Adding EN signal on $flatten\ctl_rf.\c3_rf.$verific$chtsz_reg$dma_chrf.v:644$16006 ($adff) from module dma_top (D = $flatten\ctl_rf.\c3_rf.$verific$n1216$15755, Q = \ctl_rf.c3_rf.chtsz [11:8]).
Adding EN signal on $flatten\ctl_rf.\c3_rf.$verific$chsad_reg$dma_chrf.v:540$15938 ($adff) from module dma_top (D = $flatten\ctl_rf.\c3_rf.$verific$n1195$15737, Q = \ctl_rf.c3_rf.chsad [7:0]).
Adding EN signal on $flatten\ctl_rf.\c3_rf.$verific$chsad_reg$dma_chrf.v:540$15938 ($adff) from module dma_top (D = $flatten\ctl_rf.\c3_rf.$verific$n1193$15735, Q = \ctl_rf.c3_rf.chsad [15:8]).
Adding EN signal on $flatten\ctl_rf.\c3_rf.$verific$chsad_reg$dma_chrf.v:540$15938 ($adff) from module dma_top (D = $flatten\ctl_rf.\c3_rf.$verific$n1191$15733, Q = \ctl_rf.c3_rf.chsad [23:16]).
Adding EN signal on $flatten\ctl_rf.\c3_rf.$verific$chsad_reg$dma_chrf.v:540$15938 ($adff) from module dma_top (D = $flatten\ctl_rf.\c3_rf.$verific$n1189$15731, Q = \ctl_rf.c3_rf.chsad [31:24]).
Adding EN signal on $flatten\ctl_rf.\c3_rf.$verific$chpri_reg$dma_chrf.v:316$15830 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb2 [7:6], Q = \ctl_rf.c3_rf.chpri).
Adding EN signal on $flatten\ctl_rf.\c3_rf.$verific$chllpen_reg$dma_chrf.v:239$15782 ($adff) from module dma_top (D = $flatten\ctl_rf.\c3_rf.$verific$n28$15585, Q = \ctl_rf.c3_rf.chllpen).
Adding EN signal on $flatten\ctl_rf.\c3_rf.$verific$chllp_reg$dma_chrf.v:621$15987 ($adff) from module dma_top (D = $flatten\ctl_rf.\c3_rf.$verific$n1213$15753, Q = \ctl_rf.c3_rf.chllp [7:0]).
Adding EN signal on $flatten\ctl_rf.\c3_rf.$verific$chllp_reg$dma_chrf.v:621$15987 ($adff) from module dma_top (D = $flatten\ctl_rf.\c3_rf.$verific$n1211$15751, Q = \ctl_rf.c3_rf.chllp [15:8]).
Adding EN signal on $flatten\ctl_rf.\c3_rf.$verific$chllp_reg$dma_chrf.v:621$15987 ($adff) from module dma_top (D = $flatten\ctl_rf.\c3_rf.$verific$n1209$15749, Q = \ctl_rf.c3_rf.chllp [23:16]).
Adding EN signal on $flatten\ctl_rf.\c3_rf.$verific$chllp_reg$dma_chrf.v:621$15987 ($adff) from module dma_top (D = $flatten\ctl_rf.\c3_rf.$verific$n1207$15747, Q = \ctl_rf.c3_rf.chllp [31:24]).
Adding EN signal on $flatten\ctl_rf.\c3_rf.$verific$chllp_on_reg$dma_chrf.v:267$15794 ($adff) from module dma_top (D = $flatten\ctl_rf.\c3_rf.$verific$n45$15594, Q = \ctl_rf.c3_rf.chllp_on).
Adding EN signal on $flatten\ctl_rf.\c3_rf.$verific$chllp_cnt_reg$dma_chrf.v:279$15809 ($adff) from module dma_top (D = $flatten\ctl_rf.\c3_rf.$verific$n86$15695, Q = \ctl_rf.c3_rf.chllp_cnt).
Adding EN signal on $flatten\ctl_rf.\c3_rf.$verific$chdad_reg$dma_chrf.v:580$15964 ($adff) from module dma_top (D = $flatten\ctl_rf.\c3_rf.$verific$n1204$15745, Q = \ctl_rf.c3_rf.chdad [7:0]).
Adding EN signal on $flatten\ctl_rf.\c3_rf.$verific$chdad_reg$dma_chrf.v:580$15964 ($adff) from module dma_top (D = $flatten\ctl_rf.\c3_rf.$verific$n1202$15743, Q = \ctl_rf.c3_rf.chdad [15:8]).
Adding EN signal on $flatten\ctl_rf.\c3_rf.$verific$chdad_reg$dma_chrf.v:580$15964 ($adff) from module dma_top (D = $flatten\ctl_rf.\c3_rf.$verific$n1200$15741, Q = \ctl_rf.c3_rf.chdad [23:16]).
Adding EN signal on $flatten\ctl_rf.\c3_rf.$verific$chdad_reg$dma_chrf.v:580$15964 ($adff) from module dma_top (D = $flatten\ctl_rf.\c3_rf.$verific$n1198$15739, Q = \ctl_rf.c3_rf.chdad [31:24]).
Adding EN signal on $flatten\ctl_rf.\c3_rf.$verific$chabt_reg$dma_chrf.v:390$15859 ($adff) from module dma_top (D = $flatten\ctl_rf.\c3_rf.$verific$n198$15631, Q = \ctl_rf.c3_rf.chabt).
Adding EN signal on $flatten\ctl_rf.\c3_rf.$verific$ch_en_reg$dma_chrf.v:480$15916 ($adff) from module dma_top (D = $flatten\ctl_rf.\c3_rf.$verific$n334$15667, Q = \ctl_rf.c3_rf.ch_en).
Adding EN signal on $flatten\ctl_rf.\c3_rf.$verific$autold_reg$dma_chrf.v:400$15863 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb1 [6], Q = \ctl_rf.c3_rf.autold).
Adding EN signal on $flatten\ctl_rf.\c2_rf.$verific$swidth_reg$dma_chrf.v:411$15418 ($adff) from module dma_top (D = $flatten\ctl_rf.\c2_rf.$verific$n231$15255, Q = \ctl_rf.c2_rf.swidth).
Adding EN signal on $flatten\ctl_rf.\c2_rf.$verific$src_sz_reg$dma_chrf.v:352$15395 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb2 [2:0], Q = \ctl_rf.c2_rf.src_sz).
Adding EN signal on $flatten\ctl_rf.\c2_rf.$verific$src_sel_reg$dma_chrf.v:463$15455 ($adff) from module dma_top (D = $flatten\ctl_rf.\c2_rf.$verific$n308$15209, Q = \ctl_rf.c2_rf.src_sel).
Adding EN signal on $flatten\ctl_rf.\c2_rf.$verific$sad_ctl1_reg$dma_chrf.v:463$15451 ($adff) from module dma_top (D = $flatten\ctl_rf.\c2_rf.$verific$n304$15205, Q = \ctl_rf.c2_rf.sad_ctl1).
Adding EN signal on $flatten\ctl_rf.\c2_rf.$verific$sad_ctl0_reg$dma_chrf.v:463$15452 ($adff) from module dma_top (D = $flatten\ctl_rf.\c2_rf.$verific$n305$15206, Q = \ctl_rf.c2_rf.sad_ctl0).
Adding EN signal on $flatten\ctl_rf.\c2_rf.$verific$prot3_reg$dma_chrf.v:343$15389 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb2 [5], Q = \ctl_rf.c2_rf.prot3).
Adding EN signal on $flatten\ctl_rf.\c2_rf.$verific$prot2_reg$dma_chrf.v:343$15390 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb2 [4], Q = \ctl_rf.c2_rf.prot2).
Adding EN signal on $flatten\ctl_rf.\c2_rf.$verific$prot1_reg$dma_chrf.v:343$15391 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb2 [3], Q = \ctl_rf.c2_rf.prot1).
Adding EN signal on $flatten\ctl_rf.\c2_rf.$verific$mode_reg$dma_chrf.v:431$15426 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb0 [7], Q = \ctl_rf.c2_rf.mode).
Adding EN signal on $flatten\ctl_rf.\c2_rf.$verific$int_tc_msk_reg$dma_chrf.v:306$15374 ($adff) from module dma_top (D = $flatten\ctl_rf.\c2_rf.$verific$n114$15161, Q = \ctl_rf.c2_rf.int_tc_msk).
Adding EN signal on $flatten\ctl_rf.\c2_rf.$verific$int_tc1_msk_reg$dma_chrf.v:500$15473 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb0 [0], Q = \ctl_rf.c2_rf.int_tc1_msk).
Adding EN signal on $flatten\ctl_rf.\c2_rf.$verific$int_err_msk_reg$dma_chrf.v:500$15472 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb0 [1], Q = \ctl_rf.c2_rf.int_err_msk).
Adding EN signal on $flatten\ctl_rf.\c2_rf.$verific$int_abt_msk_reg$dma_chrf.v:500$15471 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb0 [2], Q = \ctl_rf.c2_rf.int_abt_msk).
Adding EN signal on $flatten\ctl_rf.\c2_rf.$verific$dwidth_reg$dma_chrf.v:422$15423 ($adff) from module dma_top (D = $flatten\ctl_rf.\c2_rf.$verific$n261$15259, Q = \ctl_rf.c2_rf.dwidth).
Adding EN signal on $flatten\ctl_rf.\c2_rf.$verific$dst_sel_reg$dma_chrf.v:463$15456 ($adff) from module dma_top (D = $flatten\ctl_rf.\c2_rf.$verific$n309$15210, Q = \ctl_rf.c2_rf.dst_sel).
Adding EN signal on $flatten\ctl_rf.\c2_rf.$verific$dreqmode_reg$dma_chrf.v:326$15382 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb3 [0], Q = \ctl_rf.c2_rf.dreqmode).
Adding EN signal on $flatten\ctl_rf.\c2_rf.$verific$dad_ctl1_reg$dma_chrf.v:463$15453 ($adff) from module dma_top (D = $flatten\ctl_rf.\c2_rf.$verific$n306$15207, Q = \ctl_rf.c2_rf.dad_ctl1).
Adding EN signal on $flatten\ctl_rf.\c2_rf.$verific$dad_ctl0_reg$dma_chrf.v:463$15454 ($adff) from module dma_top (D = $flatten\ctl_rf.\c2_rf.$verific$n307$15208, Q = \ctl_rf.c2_rf.dad_ctl0).
Adding EN signal on $flatten\ctl_rf.\c2_rf.$verific$chtsz_reg$dma_chrf.v:644$15555 ($adff) from module dma_top (D = $flatten\ctl_rf.\c2_rf.$verific$n1218$15306, Q = \ctl_rf.c2_rf.chtsz [7:0]).
Adding EN signal on $flatten\ctl_rf.\c2_rf.$verific$chtsz_reg$dma_chrf.v:644$15555 ($adff) from module dma_top (D = $flatten\ctl_rf.\c2_rf.$verific$n1216$15304, Q = \ctl_rf.c2_rf.chtsz [11:8]).
Adding EN signal on $flatten\ctl_rf.\c2_rf.$verific$chsad_reg$dma_chrf.v:540$15487 ($adff) from module dma_top (D = $flatten\ctl_rf.\c2_rf.$verific$n1195$15286, Q = \ctl_rf.c2_rf.chsad [7:0]).
Adding EN signal on $flatten\ctl_rf.\c2_rf.$verific$chsad_reg$dma_chrf.v:540$15487 ($adff) from module dma_top (D = $flatten\ctl_rf.\c2_rf.$verific$n1193$15284, Q = \ctl_rf.c2_rf.chsad [15:8]).
Adding EN signal on $flatten\ctl_rf.\c2_rf.$verific$chsad_reg$dma_chrf.v:540$15487 ($adff) from module dma_top (D = $flatten\ctl_rf.\c2_rf.$verific$n1191$15282, Q = \ctl_rf.c2_rf.chsad [23:16]).
Adding EN signal on $flatten\ctl_rf.\c2_rf.$verific$chsad_reg$dma_chrf.v:540$15487 ($adff) from module dma_top (D = $flatten\ctl_rf.\c2_rf.$verific$n1189$15280, Q = \ctl_rf.c2_rf.chsad [31:24]).
Adding EN signal on $flatten\ctl_rf.\c2_rf.$verific$chpri_reg$dma_chrf.v:316$15379 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb2 [7:6], Q = \ctl_rf.c2_rf.chpri).
Adding EN signal on $flatten\ctl_rf.\c2_rf.$verific$chllpen_reg$dma_chrf.v:239$15331 ($adff) from module dma_top (D = $flatten\ctl_rf.\c2_rf.$verific$n28$15134, Q = \ctl_rf.c2_rf.chllpen).
Adding EN signal on $flatten\ctl_rf.\c2_rf.$verific$chllp_reg$dma_chrf.v:621$15536 ($adff) from module dma_top (D = $flatten\ctl_rf.\c2_rf.$verific$n1213$15302, Q = \ctl_rf.c2_rf.chllp [7:0]).
Adding EN signal on $flatten\ctl_rf.\c2_rf.$verific$chllp_reg$dma_chrf.v:621$15536 ($adff) from module dma_top (D = $flatten\ctl_rf.\c2_rf.$verific$n1211$15300, Q = \ctl_rf.c2_rf.chllp [15:8]).
Adding EN signal on $flatten\ctl_rf.\c2_rf.$verific$chllp_reg$dma_chrf.v:621$15536 ($adff) from module dma_top (D = $flatten\ctl_rf.\c2_rf.$verific$n1209$15298, Q = \ctl_rf.c2_rf.chllp [23:16]).
Adding EN signal on $flatten\ctl_rf.\c2_rf.$verific$chllp_reg$dma_chrf.v:621$15536 ($adff) from module dma_top (D = $flatten\ctl_rf.\c2_rf.$verific$n1207$15296, Q = \ctl_rf.c2_rf.chllp [31:24]).
Adding EN signal on $flatten\ctl_rf.\c2_rf.$verific$chllp_on_reg$dma_chrf.v:267$15343 ($adff) from module dma_top (D = $flatten\ctl_rf.\c2_rf.$verific$n45$15143, Q = \ctl_rf.c2_rf.chllp_on).
Adding EN signal on $flatten\ctl_rf.\c2_rf.$verific$chllp_cnt_reg$dma_chrf.v:279$15358 ($adff) from module dma_top (D = $flatten\ctl_rf.\c2_rf.$verific$n86$15244, Q = \ctl_rf.c2_rf.chllp_cnt).
Adding EN signal on $flatten\ctl_rf.\c2_rf.$verific$chdad_reg$dma_chrf.v:580$15513 ($adff) from module dma_top (D = $flatten\ctl_rf.\c2_rf.$verific$n1204$15294, Q = \ctl_rf.c2_rf.chdad [7:0]).
Adding EN signal on $flatten\ctl_rf.\c2_rf.$verific$chdad_reg$dma_chrf.v:580$15513 ($adff) from module dma_top (D = $flatten\ctl_rf.\c2_rf.$verific$n1202$15292, Q = \ctl_rf.c2_rf.chdad [15:8]).
Adding EN signal on $flatten\ctl_rf.\c2_rf.$verific$chdad_reg$dma_chrf.v:580$15513 ($adff) from module dma_top (D = $flatten\ctl_rf.\c2_rf.$verific$n1200$15290, Q = \ctl_rf.c2_rf.chdad [23:16]).
Adding EN signal on $flatten\ctl_rf.\c2_rf.$verific$chdad_reg$dma_chrf.v:580$15513 ($adff) from module dma_top (D = $flatten\ctl_rf.\c2_rf.$verific$n1198$15288, Q = \ctl_rf.c2_rf.chdad [31:24]).
Adding EN signal on $flatten\ctl_rf.\c2_rf.$verific$chabt_reg$dma_chrf.v:390$15408 ($adff) from module dma_top (D = $flatten\ctl_rf.\c2_rf.$verific$n198$15180, Q = \ctl_rf.c2_rf.chabt).
Adding EN signal on $flatten\ctl_rf.\c2_rf.$verific$ch_en_reg$dma_chrf.v:480$15465 ($adff) from module dma_top (D = $flatten\ctl_rf.\c2_rf.$verific$n334$15216, Q = \ctl_rf.c2_rf.ch_en).
Adding EN signal on $flatten\ctl_rf.\c2_rf.$verific$autold_reg$dma_chrf.v:400$15412 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb1 [6], Q = \ctl_rf.c2_rf.autold).
Adding EN signal on $flatten\ctl_rf.\c1_rf.$verific$swidth_reg$dma_chrf.v:411$14967 ($adff) from module dma_top (D = $flatten\ctl_rf.\c1_rf.$verific$n231$14804, Q = \ctl_rf.c1_rf.swidth).
Adding EN signal on $flatten\ctl_rf.\c1_rf.$verific$src_sz_reg$dma_chrf.v:352$14944 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb2 [2:0], Q = \ctl_rf.c1_rf.src_sz).
Adding EN signal on $flatten\ctl_rf.\c1_rf.$verific$src_sel_reg$dma_chrf.v:463$15004 ($adff) from module dma_top (D = $flatten\ctl_rf.\c1_rf.$verific$n308$14758, Q = \ctl_rf.c1_rf.src_sel).
Adding EN signal on $flatten\ctl_rf.\c1_rf.$verific$sad_ctl1_reg$dma_chrf.v:463$15000 ($adff) from module dma_top (D = $flatten\ctl_rf.\c1_rf.$verific$n304$14754, Q = \ctl_rf.c1_rf.sad_ctl1).
Adding EN signal on $flatten\ctl_rf.\c1_rf.$verific$sad_ctl0_reg$dma_chrf.v:463$15001 ($adff) from module dma_top (D = $flatten\ctl_rf.\c1_rf.$verific$n305$14755, Q = \ctl_rf.c1_rf.sad_ctl0).
Adding EN signal on $flatten\ctl_rf.\c1_rf.$verific$prot3_reg$dma_chrf.v:343$14938 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb2 [5], Q = \ctl_rf.c1_rf.prot3).
Adding EN signal on $flatten\ctl_rf.\c1_rf.$verific$prot2_reg$dma_chrf.v:343$14939 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb2 [4], Q = \ctl_rf.c1_rf.prot2).
Adding EN signal on $flatten\ctl_rf.\c1_rf.$verific$prot1_reg$dma_chrf.v:343$14940 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb2 [3], Q = \ctl_rf.c1_rf.prot1).
Adding EN signal on $flatten\ctl_rf.\c1_rf.$verific$mode_reg$dma_chrf.v:431$14975 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb0 [7], Q = \ctl_rf.c1_rf.mode).
Adding EN signal on $flatten\ctl_rf.\c1_rf.$verific$int_tc_msk_reg$dma_chrf.v:306$14923 ($adff) from module dma_top (D = $flatten\ctl_rf.\c1_rf.$verific$n114$14710, Q = \ctl_rf.c1_rf.int_tc_msk).
Adding EN signal on $flatten\ctl_rf.\c1_rf.$verific$int_tc1_msk_reg$dma_chrf.v:500$15022 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb0 [0], Q = \ctl_rf.c1_rf.int_tc1_msk).
Adding EN signal on $flatten\ctl_rf.\c1_rf.$verific$int_err_msk_reg$dma_chrf.v:500$15021 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb0 [1], Q = \ctl_rf.c1_rf.int_err_msk).
Adding EN signal on $flatten\ctl_rf.\c1_rf.$verific$int_abt_msk_reg$dma_chrf.v:500$15020 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb0 [2], Q = \ctl_rf.c1_rf.int_abt_msk).
Adding EN signal on $flatten\ctl_rf.\c1_rf.$verific$dwidth_reg$dma_chrf.v:422$14972 ($adff) from module dma_top (D = $flatten\ctl_rf.\c1_rf.$verific$n261$14808, Q = \ctl_rf.c1_rf.dwidth).
Adding EN signal on $flatten\ctl_rf.\c1_rf.$verific$dst_sel_reg$dma_chrf.v:463$15005 ($adff) from module dma_top (D = $flatten\ctl_rf.\c1_rf.$verific$n309$14759, Q = \ctl_rf.c1_rf.dst_sel).
Adding EN signal on $flatten\ctl_rf.\c1_rf.$verific$dreqmode_reg$dma_chrf.v:326$14931 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb3 [0], Q = \ctl_rf.c1_rf.dreqmode).
Adding EN signal on $flatten\ctl_rf.\c1_rf.$verific$dad_ctl1_reg$dma_chrf.v:463$15002 ($adff) from module dma_top (D = $flatten\ctl_rf.\c1_rf.$verific$n306$14756, Q = \ctl_rf.c1_rf.dad_ctl1).
Adding EN signal on $flatten\ctl_rf.\c1_rf.$verific$dad_ctl0_reg$dma_chrf.v:463$15003 ($adff) from module dma_top (D = $flatten\ctl_rf.\c1_rf.$verific$n307$14757, Q = \ctl_rf.c1_rf.dad_ctl0).
Adding EN signal on $flatten\ctl_rf.\c1_rf.$verific$chtsz_reg$dma_chrf.v:644$15104 ($adff) from module dma_top (D = $flatten\ctl_rf.\c1_rf.$verific$n1218$14855, Q = \ctl_rf.c1_rf.chtsz [7:0]).
Adding EN signal on $flatten\ctl_rf.\c1_rf.$verific$chtsz_reg$dma_chrf.v:644$15104 ($adff) from module dma_top (D = $flatten\ctl_rf.\c1_rf.$verific$n1216$14853, Q = \ctl_rf.c1_rf.chtsz [11:8]).
Adding EN signal on $flatten\ctl_rf.\c1_rf.$verific$chsad_reg$dma_chrf.v:540$15036 ($adff) from module dma_top (D = $flatten\ctl_rf.\c1_rf.$verific$n1195$14835, Q = \ctl_rf.c1_rf.chsad [7:0]).
Adding EN signal on $flatten\ctl_rf.\c1_rf.$verific$chsad_reg$dma_chrf.v:540$15036 ($adff) from module dma_top (D = $flatten\ctl_rf.\c1_rf.$verific$n1193$14833, Q = \ctl_rf.c1_rf.chsad [15:8]).
Adding EN signal on $flatten\ctl_rf.\c1_rf.$verific$chsad_reg$dma_chrf.v:540$15036 ($adff) from module dma_top (D = $flatten\ctl_rf.\c1_rf.$verific$n1191$14831, Q = \ctl_rf.c1_rf.chsad [23:16]).
Adding EN signal on $flatten\ctl_rf.\c1_rf.$verific$chsad_reg$dma_chrf.v:540$15036 ($adff) from module dma_top (D = $flatten\ctl_rf.\c1_rf.$verific$n1189$14829, Q = \ctl_rf.c1_rf.chsad [31:24]).
Adding EN signal on $flatten\ctl_rf.\c1_rf.$verific$chpri_reg$dma_chrf.v:316$14928 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb2 [7:6], Q = \ctl_rf.c1_rf.chpri).
Adding EN signal on $flatten\ctl_rf.\c1_rf.$verific$chllpen_reg$dma_chrf.v:239$14880 ($adff) from module dma_top (D = $flatten\ctl_rf.\c1_rf.$verific$n28$14683, Q = \ctl_rf.c1_rf.chllpen).
Adding EN signal on $flatten\ctl_rf.\c1_rf.$verific$chllp_reg$dma_chrf.v:621$15085 ($adff) from module dma_top (D = $flatten\ctl_rf.\c1_rf.$verific$n1213$14851, Q = \ctl_rf.c1_rf.chllp [7:0]).
Adding EN signal on $flatten\ctl_rf.\c1_rf.$verific$chllp_reg$dma_chrf.v:621$15085 ($adff) from module dma_top (D = $flatten\ctl_rf.\c1_rf.$verific$n1211$14849, Q = \ctl_rf.c1_rf.chllp [15:8]).
Adding EN signal on $flatten\ctl_rf.\c1_rf.$verific$chllp_reg$dma_chrf.v:621$15085 ($adff) from module dma_top (D = $flatten\ctl_rf.\c1_rf.$verific$n1209$14847, Q = \ctl_rf.c1_rf.chllp [23:16]).
Adding EN signal on $flatten\ctl_rf.\c1_rf.$verific$chllp_reg$dma_chrf.v:621$15085 ($adff) from module dma_top (D = $flatten\ctl_rf.\c1_rf.$verific$n1207$14845, Q = \ctl_rf.c1_rf.chllp [31:24]).
Adding EN signal on $flatten\ctl_rf.\c1_rf.$verific$chllp_on_reg$dma_chrf.v:267$14892 ($adff) from module dma_top (D = $flatten\ctl_rf.\c1_rf.$verific$n45$14692, Q = \ctl_rf.c1_rf.chllp_on).
Adding EN signal on $flatten\ctl_rf.\c1_rf.$verific$chllp_cnt_reg$dma_chrf.v:279$14907 ($adff) from module dma_top (D = $flatten\ctl_rf.\c1_rf.$verific$n86$14793, Q = \ctl_rf.c1_rf.chllp_cnt).
Adding EN signal on $flatten\ctl_rf.\c1_rf.$verific$chdad_reg$dma_chrf.v:580$15062 ($adff) from module dma_top (D = $flatten\ctl_rf.\c1_rf.$verific$n1204$14843, Q = \ctl_rf.c1_rf.chdad [7:0]).
Adding EN signal on $flatten\ctl_rf.\c1_rf.$verific$chdad_reg$dma_chrf.v:580$15062 ($adff) from module dma_top (D = $flatten\ctl_rf.\c1_rf.$verific$n1202$14841, Q = \ctl_rf.c1_rf.chdad [15:8]).
Adding EN signal on $flatten\ctl_rf.\c1_rf.$verific$chdad_reg$dma_chrf.v:580$15062 ($adff) from module dma_top (D = $flatten\ctl_rf.\c1_rf.$verific$n1200$14839, Q = \ctl_rf.c1_rf.chdad [23:16]).
Adding EN signal on $flatten\ctl_rf.\c1_rf.$verific$chdad_reg$dma_chrf.v:580$15062 ($adff) from module dma_top (D = $flatten\ctl_rf.\c1_rf.$verific$n1198$14837, Q = \ctl_rf.c1_rf.chdad [31:24]).
Adding EN signal on $flatten\ctl_rf.\c1_rf.$verific$chabt_reg$dma_chrf.v:390$14957 ($adff) from module dma_top (D = $flatten\ctl_rf.\c1_rf.$verific$n198$14729, Q = \ctl_rf.c1_rf.chabt).
Adding EN signal on $flatten\ctl_rf.\c1_rf.$verific$ch_en_reg$dma_chrf.v:480$15014 ($adff) from module dma_top (D = $flatten\ctl_rf.\c1_rf.$verific$n334$14765, Q = \ctl_rf.c1_rf.ch_en).
Adding EN signal on $flatten\ctl_rf.\c1_rf.$verific$autold_reg$dma_chrf.v:400$14961 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb1 [6], Q = \ctl_rf.c1_rf.autold).
Adding EN signal on $flatten\ctl_rf.\c0_rf.$verific$swidth_reg$dma_chrf.v:411$14516 ($adff) from module dma_top (D = $flatten\ctl_rf.\c0_rf.$verific$n231$14353, Q = \ctl_rf.c0_rf.swidth).
Adding EN signal on $flatten\ctl_rf.\c0_rf.$verific$src_sz_reg$dma_chrf.v:352$14493 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb2 [2:0], Q = \ctl_rf.c0_rf.src_sz).
Adding EN signal on $flatten\ctl_rf.\c0_rf.$verific$src_sel_reg$dma_chrf.v:463$14553 ($adff) from module dma_top (D = $flatten\ctl_rf.\c0_rf.$verific$n308$14307, Q = \ctl_rf.c0_rf.src_sel).
Adding EN signal on $flatten\ctl_rf.\c0_rf.$verific$sad_ctl1_reg$dma_chrf.v:463$14549 ($adff) from module dma_top (D = $flatten\ctl_rf.\c0_rf.$verific$n304$14303, Q = \ctl_rf.c0_rf.sad_ctl1).
Adding EN signal on $flatten\ctl_rf.\c0_rf.$verific$sad_ctl0_reg$dma_chrf.v:463$14550 ($adff) from module dma_top (D = $flatten\ctl_rf.\c0_rf.$verific$n305$14304, Q = \ctl_rf.c0_rf.sad_ctl0).
Adding EN signal on $flatten\ctl_rf.\c0_rf.$verific$prot3_reg$dma_chrf.v:343$14487 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb2 [5], Q = \ctl_rf.c0_rf.prot3).
Adding EN signal on $flatten\ctl_rf.\c0_rf.$verific$prot2_reg$dma_chrf.v:343$14488 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb2 [4], Q = \ctl_rf.c0_rf.prot2).
Adding EN signal on $flatten\ctl_rf.\c0_rf.$verific$prot1_reg$dma_chrf.v:343$14489 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb2 [3], Q = \ctl_rf.c0_rf.prot1).
Adding EN signal on $flatten\ctl_rf.\c0_rf.$verific$mode_reg$dma_chrf.v:431$14524 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb0 [7], Q = \ctl_rf.c0_rf.mode).
Adding EN signal on $flatten\ctl_rf.\c0_rf.$verific$int_tc_msk_reg$dma_chrf.v:306$14472 ($adff) from module dma_top (D = $flatten\ctl_rf.\c0_rf.$verific$n114$14259, Q = \ctl_rf.c0_rf.int_tc_msk).
Adding EN signal on $flatten\ctl_rf.\c0_rf.$verific$int_tc1_msk_reg$dma_chrf.v:500$14571 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb0 [0], Q = \ctl_rf.c0_rf.int_tc1_msk).
Adding EN signal on $flatten\ctl_rf.\c0_rf.$verific$int_err_msk_reg$dma_chrf.v:500$14570 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb0 [1], Q = \ctl_rf.c0_rf.int_err_msk).
Adding EN signal on $flatten\ctl_rf.\c0_rf.$verific$int_abt_msk_reg$dma_chrf.v:500$14569 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb0 [2], Q = \ctl_rf.c0_rf.int_abt_msk).
Adding EN signal on $flatten\ctl_rf.\c0_rf.$verific$dwidth_reg$dma_chrf.v:422$14521 ($adff) from module dma_top (D = $flatten\ctl_rf.\c0_rf.$verific$n261$14357, Q = \ctl_rf.c0_rf.dwidth).
Adding EN signal on $flatten\ctl_rf.\c0_rf.$verific$dst_sel_reg$dma_chrf.v:463$14554 ($adff) from module dma_top (D = $flatten\ctl_rf.\c0_rf.$verific$n309$14308, Q = \ctl_rf.c0_rf.dst_sel).
Adding EN signal on $flatten\ctl_rf.\c0_rf.$verific$dreqmode_reg$dma_chrf.v:326$14480 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb3 [0], Q = \ctl_rf.c0_rf.dreqmode).
Adding EN signal on $flatten\ctl_rf.\c0_rf.$verific$dad_ctl1_reg$dma_chrf.v:463$14551 ($adff) from module dma_top (D = $flatten\ctl_rf.\c0_rf.$verific$n306$14305, Q = \ctl_rf.c0_rf.dad_ctl1).
Adding EN signal on $flatten\ctl_rf.\c0_rf.$verific$dad_ctl0_reg$dma_chrf.v:463$14552 ($adff) from module dma_top (D = $flatten\ctl_rf.\c0_rf.$verific$n307$14306, Q = \ctl_rf.c0_rf.dad_ctl0).
Adding EN signal on $flatten\ctl_rf.\c0_rf.$verific$chtsz_reg$dma_chrf.v:644$14653 ($adff) from module dma_top (D = $flatten\ctl_rf.\c0_rf.$verific$n1218$14404, Q = \ctl_rf.c0_rf.chtsz [7:0]).
Adding EN signal on $flatten\ctl_rf.\c0_rf.$verific$chtsz_reg$dma_chrf.v:644$14653 ($adff) from module dma_top (D = $flatten\ctl_rf.\c0_rf.$verific$n1216$14402, Q = \ctl_rf.c0_rf.chtsz [11:8]).
Adding EN signal on $flatten\ctl_rf.\c0_rf.$verific$chsad_reg$dma_chrf.v:540$14585 ($adff) from module dma_top (D = $flatten\ctl_rf.\c0_rf.$verific$n1195$14384, Q = \ctl_rf.c0_rf.chsad [7:0]).
Adding EN signal on $flatten\ctl_rf.\c0_rf.$verific$chsad_reg$dma_chrf.v:540$14585 ($adff) from module dma_top (D = $flatten\ctl_rf.\c0_rf.$verific$n1193$14382, Q = \ctl_rf.c0_rf.chsad [15:8]).
Adding EN signal on $flatten\ctl_rf.\c0_rf.$verific$chsad_reg$dma_chrf.v:540$14585 ($adff) from module dma_top (D = $flatten\ctl_rf.\c0_rf.$verific$n1191$14380, Q = \ctl_rf.c0_rf.chsad [23:16]).
Adding EN signal on $flatten\ctl_rf.\c0_rf.$verific$chsad_reg$dma_chrf.v:540$14585 ($adff) from module dma_top (D = $flatten\ctl_rf.\c0_rf.$verific$n1189$14378, Q = \ctl_rf.c0_rf.chsad [31:24]).
Adding EN signal on $flatten\ctl_rf.\c0_rf.$verific$chpri_reg$dma_chrf.v:316$14477 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb2 [7:6], Q = \ctl_rf.c0_rf.chpri).
Adding EN signal on $flatten\ctl_rf.\c0_rf.$verific$chllpen_reg$dma_chrf.v:239$14429 ($adff) from module dma_top (D = $flatten\ctl_rf.\c0_rf.$verific$n28$14232, Q = \ctl_rf.c0_rf.chllpen).
Adding EN signal on $flatten\ctl_rf.\c0_rf.$verific$chllp_reg$dma_chrf.v:621$14634 ($adff) from module dma_top (D = $flatten\ctl_rf.\c0_rf.$verific$n1213$14400, Q = \ctl_rf.c0_rf.chllp [7:0]).
Adding EN signal on $flatten\ctl_rf.\c0_rf.$verific$chllp_reg$dma_chrf.v:621$14634 ($adff) from module dma_top (D = $flatten\ctl_rf.\c0_rf.$verific$n1211$14398, Q = \ctl_rf.c0_rf.chllp [15:8]).
Adding EN signal on $flatten\ctl_rf.\c0_rf.$verific$chllp_reg$dma_chrf.v:621$14634 ($adff) from module dma_top (D = $flatten\ctl_rf.\c0_rf.$verific$n1209$14396, Q = \ctl_rf.c0_rf.chllp [23:16]).
Adding EN signal on $flatten\ctl_rf.\c0_rf.$verific$chllp_reg$dma_chrf.v:621$14634 ($adff) from module dma_top (D = $flatten\ctl_rf.\c0_rf.$verific$n1207$14394, Q = \ctl_rf.c0_rf.chllp [31:24]).
Adding EN signal on $flatten\ctl_rf.\c0_rf.$verific$chllp_on_reg$dma_chrf.v:267$14441 ($adff) from module dma_top (D = $flatten\ctl_rf.\c0_rf.$verific$n45$14241, Q = \ctl_rf.c0_rf.chllp_on).
Adding EN signal on $flatten\ctl_rf.\c0_rf.$verific$chllp_cnt_reg$dma_chrf.v:279$14456 ($adff) from module dma_top (D = $flatten\ctl_rf.\c0_rf.$verific$n86$14342, Q = \ctl_rf.c0_rf.chllp_cnt).
Adding EN signal on $flatten\ctl_rf.\c0_rf.$verific$chdad_reg$dma_chrf.v:580$14611 ($adff) from module dma_top (D = $flatten\ctl_rf.\c0_rf.$verific$n1204$14392, Q = \ctl_rf.c0_rf.chdad [7:0]).
Adding EN signal on $flatten\ctl_rf.\c0_rf.$verific$chdad_reg$dma_chrf.v:580$14611 ($adff) from module dma_top (D = $flatten\ctl_rf.\c0_rf.$verific$n1202$14390, Q = \ctl_rf.c0_rf.chdad [15:8]).
Adding EN signal on $flatten\ctl_rf.\c0_rf.$verific$chdad_reg$dma_chrf.v:580$14611 ($adff) from module dma_top (D = $flatten\ctl_rf.\c0_rf.$verific$n1200$14388, Q = \ctl_rf.c0_rf.chdad [23:16]).
Adding EN signal on $flatten\ctl_rf.\c0_rf.$verific$chdad_reg$dma_chrf.v:580$14611 ($adff) from module dma_top (D = $flatten\ctl_rf.\c0_rf.$verific$n1198$14386, Q = \ctl_rf.c0_rf.chdad [31:24]).
Adding EN signal on $flatten\ctl_rf.\c0_rf.$verific$chabt_reg$dma_chrf.v:390$14506 ($adff) from module dma_top (D = $flatten\ctl_rf.\c0_rf.$verific$n198$14278, Q = \ctl_rf.c0_rf.chabt).
Adding EN signal on $flatten\ctl_rf.\c0_rf.$verific$ch_en_reg$dma_chrf.v:480$14563 ($adff) from module dma_top (D = $flatten\ctl_rf.\c0_rf.$verific$n334$14314, Q = \ctl_rf.c0_rf.ch_en).
Adding EN signal on $flatten\ctl_rf.\c0_rf.$verific$autold_reg$dma_chrf.v:400$14510 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb1 [6], Q = \ctl_rf.c0_rf.autold).
Adding EN signal on $flatten\ctl_rf.$verific$tc_reg$dma_ctlrf.v:1902$9273 ($adff) from module dma_top (D = $flatten\ctl_rf.$verific$n3755$8509, Q = \ctl_rf.tc [0]).
Adding EN signal on $flatten\ctl_rf.$verific$tc_reg$dma_ctlrf.v:1902$9273 ($adff) from module dma_top (D = $flatten\ctl_rf.$verific$n3764$8511, Q = \ctl_rf.tc [1]).
Adding EN signal on $flatten\ctl_rf.$verific$tc_reg$dma_ctlrf.v:1902$9273 ($adff) from module dma_top (D = $flatten\ctl_rf.$verific$n3773$8513, Q = \ctl_rf.tc [2]).
Adding EN signal on $flatten\ctl_rf.$verific$tc_reg$dma_ctlrf.v:1902$9273 ($adff) from module dma_top (D = $flatten\ctl_rf.$verific$n3782$8515, Q = \ctl_rf.tc [3]).
Adding EN signal on $flatten\ctl_rf.$verific$tc_reg$dma_ctlrf.v:1902$9273 ($adff) from module dma_top (D = $flatten\ctl_rf.$verific$n3791$8517, Q = \ctl_rf.tc [4]).
Adding EN signal on $flatten\ctl_rf.$verific$tc_reg$dma_ctlrf.v:1902$9273 ($adff) from module dma_top (D = $flatten\ctl_rf.$verific$n3800$8519, Q = \ctl_rf.tc [5]).
Adding EN signal on $flatten\ctl_rf.$verific$tc_reg$dma_ctlrf.v:1902$9273 ($adff) from module dma_top (D = $flatten\ctl_rf.$verific$n3809$8521, Q = \ctl_rf.tc [6]).
Adding EN signal on $flatten\ctl_rf.$verific$tc_reg$dma_ctlrf.v:1902$9273 ($adff) from module dma_top (D = $flatten\ctl_rf.$verific$n3818$8523, Q = \ctl_rf.tc [7]).
Adding EN signal on $flatten\ctl_rf.$verific$sync_reg$dma_ctlrf.v:2281$9293 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb0, Q = \ctl_rf.sync).
Adding EN signal on $flatten\ctl_rf.$verific$m1end_reg$dma_ctlrf.v:2257$9280 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb0 [2], Q = \ctl_rf.m1end).
Adding EN signal on $flatten\ctl_rf.$verific$m0end_reg$dma_ctlrf.v:2263$9283 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb0 [1], Q = \ctl_rf.m0end).
Adding EN signal on $flatten\ctl_rf.$verific$err_reg$dma_ctlrf.v:2224$8813 ($adff) from module dma_top (D = $flatten\ctl_rf.$verific$n3923$8533, Q = \ctl_rf.err [0]).
Adding EN signal on $flatten\ctl_rf.$verific$err_reg$dma_ctlrf.v:2224$8813 ($adff) from module dma_top (D = $flatten\ctl_rf.$verific$n3941$8537, Q = \ctl_rf.err [1]).
Adding EN signal on $flatten\ctl_rf.$verific$err_reg$dma_ctlrf.v:2224$8813 ($adff) from module dma_top (D = $flatten\ctl_rf.$verific$n3959$8541, Q = \ctl_rf.err [2]).
Adding EN signal on $flatten\ctl_rf.$verific$err_reg$dma_ctlrf.v:2224$8813 ($adff) from module dma_top (D = $flatten\ctl_rf.$verific$n3977$8545, Q = \ctl_rf.err [3]).
Adding EN signal on $flatten\ctl_rf.$verific$err_reg$dma_ctlrf.v:2224$8813 ($adff) from module dma_top (D = $flatten\ctl_rf.$verific$n3995$8549, Q = \ctl_rf.err [4]).
Adding EN signal on $flatten\ctl_rf.$verific$err_reg$dma_ctlrf.v:2224$8813 ($adff) from module dma_top (D = $flatten\ctl_rf.$verific$n4013$8553, Q = \ctl_rf.err [5]).
Adding EN signal on $flatten\ctl_rf.$verific$err_reg$dma_ctlrf.v:2224$8813 ($adff) from module dma_top (D = $flatten\ctl_rf.$verific$n4031$8557, Q = \ctl_rf.err [6]).
Adding EN signal on $flatten\ctl_rf.$verific$err_reg$dma_ctlrf.v:2224$8813 ($adff) from module dma_top (D = $flatten\ctl_rf.$verific$n4049$8561, Q = \ctl_rf.err [7]).
Adding EN signal on $flatten\ctl_rf.$verific$dmacen_reg$dma_ctlrf.v:2269$9286 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb0 [0], Q = \ctl_rf.dmacen).
Adding EN signal on $flatten\ctl_rf.$verific$c7dmabs_reg$dma_ctlrf.v:2420$9349 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb3, Q = \ctl_rf.c7dmabs [15:8]).
Adding EN signal on $flatten\ctl_rf.$verific$c7dmabs_reg$dma_ctlrf.v:2420$9349 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb2, Q = \ctl_rf.c7dmabs [7:0]).
Adding EN signal on $flatten\ctl_rf.$verific$c7brbs_reg$dma_ctlrf.v:2557$9405 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb3, Q = \ctl_rf.c7brbs [15:8]).
Adding EN signal on $flatten\ctl_rf.$verific$c7brbs_reg$dma_ctlrf.v:2557$9405 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb2, Q = \ctl_rf.c7brbs [7:0]).
Adding EN signal on $flatten\ctl_rf.$verific$c6dmabs_reg$dma_ctlrf.v:2403$9342 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb3, Q = \ctl_rf.c6dmabs [15:8]).
Adding EN signal on $flatten\ctl_rf.$verific$c6dmabs_reg$dma_ctlrf.v:2403$9342 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb2, Q = \ctl_rf.c6dmabs [7:0]).
Adding EN signal on $flatten\ctl_rf.$verific$c6brbs_reg$dma_ctlrf.v:2540$9398 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb3, Q = \ctl_rf.c6brbs [15:8]).
Adding EN signal on $flatten\ctl_rf.$verific$c6brbs_reg$dma_ctlrf.v:2540$9398 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb2, Q = \ctl_rf.c6brbs [7:0]).
Adding EN signal on $flatten\ctl_rf.$verific$c5dmabs_reg$dma_ctlrf.v:2386$9335 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb3, Q = \ctl_rf.c5dmabs [15:8]).
Adding EN signal on $flatten\ctl_rf.$verific$c5dmabs_reg$dma_ctlrf.v:2386$9335 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb2, Q = \ctl_rf.c5dmabs [7:0]).
Adding EN signal on $flatten\ctl_rf.$verific$c5brbs_reg$dma_ctlrf.v:2523$9391 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb3, Q = \ctl_rf.c5brbs [15:8]).
Adding EN signal on $flatten\ctl_rf.$verific$c5brbs_reg$dma_ctlrf.v:2523$9391 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb2, Q = \ctl_rf.c5brbs [7:0]).
Adding EN signal on $flatten\ctl_rf.$verific$c4dmabs_reg$dma_ctlrf.v:2369$9328 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb3, Q = \ctl_rf.c4dmabs [15:8]).
Adding EN signal on $flatten\ctl_rf.$verific$c4dmabs_reg$dma_ctlrf.v:2369$9328 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb2, Q = \ctl_rf.c4dmabs [7:0]).
Adding EN signal on $flatten\ctl_rf.$verific$c4brbs_reg$dma_ctlrf.v:2506$9384 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb3, Q = \ctl_rf.c4brbs [15:8]).
Adding EN signal on $flatten\ctl_rf.$verific$c4brbs_reg$dma_ctlrf.v:2506$9384 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb2, Q = \ctl_rf.c4brbs [7:0]).
Adding EN signal on $flatten\ctl_rf.$verific$c3dmabs_reg$dma_ctlrf.v:2352$9321 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb3, Q = \ctl_rf.c3dmabs [15:8]).
Adding EN signal on $flatten\ctl_rf.$verific$c3dmabs_reg$dma_ctlrf.v:2352$9321 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb2, Q = \ctl_rf.c3dmabs [7:0]).
Adding EN signal on $flatten\ctl_rf.$verific$c3brbs_reg$dma_ctlrf.v:2489$9377 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb3, Q = \ctl_rf.c3brbs [15:8]).
Adding EN signal on $flatten\ctl_rf.$verific$c3brbs_reg$dma_ctlrf.v:2489$9377 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb2, Q = \ctl_rf.c3brbs [7:0]).
Adding EN signal on $flatten\ctl_rf.$verific$c2dmabs_reg$dma_ctlrf.v:2335$9314 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb3, Q = \ctl_rf.c2dmabs [15:8]).
Adding EN signal on $flatten\ctl_rf.$verific$c2dmabs_reg$dma_ctlrf.v:2335$9314 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb2, Q = \ctl_rf.c2dmabs [7:0]).
Adding EN signal on $flatten\ctl_rf.$verific$c2brbs_reg$dma_ctlrf.v:2472$9370 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb3, Q = \ctl_rf.c2brbs [15:8]).
Adding EN signal on $flatten\ctl_rf.$verific$c2brbs_reg$dma_ctlrf.v:2472$9370 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb2, Q = \ctl_rf.c2brbs [7:0]).
Adding EN signal on $flatten\ctl_rf.$verific$c1dmabs_reg$dma_ctlrf.v:2318$9307 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb3, Q = \ctl_rf.c1dmabs [15:8]).
Adding EN signal on $flatten\ctl_rf.$verific$c1dmabs_reg$dma_ctlrf.v:2318$9307 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb2, Q = \ctl_rf.c1dmabs [7:0]).
Adding EN signal on $flatten\ctl_rf.$verific$c1brbs_reg$dma_ctlrf.v:2455$9363 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb3, Q = \ctl_rf.c1brbs [15:8]).
Adding EN signal on $flatten\ctl_rf.$verific$c1brbs_reg$dma_ctlrf.v:2455$9363 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb2, Q = \ctl_rf.c1brbs [7:0]).
Adding EN signal on $flatten\ctl_rf.$verific$c0dmabs_reg$dma_ctlrf.v:2302$9299 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb3, Q = \ctl_rf.c0dmabs [15:8]).
Adding EN signal on $flatten\ctl_rf.$verific$c0dmabs_reg$dma_ctlrf.v:2302$9299 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb2, Q = \ctl_rf.c0dmabs [7:0]).
Adding EN signal on $flatten\ctl_rf.$verific$c0brbs_reg$dma_ctlrf.v:2439$9356 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb3, Q = \ctl_rf.c0brbs [15:8]).
Adding EN signal on $flatten\ctl_rf.$verific$c0brbs_reg$dma_ctlrf.v:2439$9356 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb2, Q = \ctl_rf.c0brbs [7:0]).
Adding EN signal on $flatten\ctl_rf.$verific$abt_reg$dma_ctlrf.v:2233$9270 ($adff) from module dma_top (D = $flatten\ctl_rf.$verific$n3932$8535, Q = \ctl_rf.abt [0]).
Adding EN signal on $flatten\ctl_rf.$verific$abt_reg$dma_ctlrf.v:2233$9270 ($adff) from module dma_top (D = $flatten\ctl_rf.$verific$n3950$8539, Q = \ctl_rf.abt [1]).
Adding EN signal on $flatten\ctl_rf.$verific$abt_reg$dma_ctlrf.v:2233$9270 ($adff) from module dma_top (D = $flatten\ctl_rf.$verific$n3968$8543, Q = \ctl_rf.abt [2]).
Adding EN signal on $flatten\ctl_rf.$verific$abt_reg$dma_ctlrf.v:2233$9270 ($adff) from module dma_top (D = $flatten\ctl_rf.$verific$n3986$8547, Q = \ctl_rf.abt [3]).
Adding EN signal on $flatten\ctl_rf.$verific$abt_reg$dma_ctlrf.v:2233$9270 ($adff) from module dma_top (D = $flatten\ctl_rf.$verific$n4004$8551, Q = \ctl_rf.abt [4]).
Adding EN signal on $flatten\ctl_rf.$verific$abt_reg$dma_ctlrf.v:2233$9270 ($adff) from module dma_top (D = $flatten\ctl_rf.$verific$n4022$8555, Q = \ctl_rf.abt [5]).
Adding EN signal on $flatten\ctl_rf.$verific$abt_reg$dma_ctlrf.v:2233$9270 ($adff) from module dma_top (D = $flatten\ctl_rf.$verific$n4040$8559, Q = \ctl_rf.abt [6]).
Adding EN signal on $flatten\ctl_rf.$verific$abt_reg$dma_ctlrf.v:2233$9270 ($adff) from module dma_top (D = $flatten\ctl_rf.$verific$n4058$8563, Q = \ctl_rf.abt [7]).
Adding EN signal on $flatten\ch_sel.$verific$fix_pri_sel_reg$dma_chsel.v:848$13965 ($adff) from module dma_top (D = { 1'0 \ch_sel.fix_pri_sx }, Q = \ch_sel.fix_pri_sel).
Adding EN signal on $flatten\ch_sel.$verific$arb_req_reg$dma_chsel.v:890$13999 ($adff) from module dma_top (D = $flatten\ch_sel.$verific$n500$13622, Q = \ch_sel.arb_req).
Adding EN signal on $flatten\ahb_slv.$verific$slv_wr_d1o_reg$dma_ahbslv.v:274$18114 ($adff) from module dma_top (D = \hwrite, Q = \ahb_slv.slv_wr_d1o).
Adding EN signal on $flatten\ahb_slv.$verific$slv_sz_d1o_reg$dma_ahbslv.v:268$18109 ($adff) from module dma_top (D = \hsize, Q = \ahb_slv.slv_sz_d1o).
Adding EN signal on $flatten\ahb_slv.$verific$slv_pt_d1o_reg$dma_ahbslv.v:268$18110 ($adff) from module dma_top (D = \hprot, Q = \ahb_slv.slv_pt_d1o).
Adding EN signal on $flatten\ahb_slv.$verific$slv_br_req_reg$dma_ahbslv.v:366$18179 ($adff) from module dma_top (D = $flatten\ahb_slv.$verific$n661$17998, Q = \ahb_slv.slv_br_req).
Adding EN signal on $flatten\ahb_slv.$verific$slv_ad_d1o_reg$dma_ahbslv.v:268$18108 ($adff) from module dma_top (D = \haddr, Q = \ahb_slv.slv_ad_d1o).
Adding EN signal on $flatten\ahb_slv.$verific$hresp_br_reg$dma_ahbslv.v:448$18229 ($adff) from module dma_top (D = $flatten\ahb_slv.$verific$n758$18065, Q = \ahb_slv.hresp_br).
Adding EN signal on $flatten\ahb_slv.$verific$hreadyout_br_reg$dma_ahbslv.v:435$18222 ($adff) from module dma_top (D = $flatten\ahb_slv.$verific$n735$18024, Q = \ahb_slv.hreadyout_br).
Adding EN signal on $flatten\ahb_slv.$verific$hrdata_reg_reg$dma_ahbslv.v:346$18169 ($adff) from module dma_top (D = { \ahb_slv.hrdtgb3 \ahb_slv.hrdtgb2 \ahb_slv.hrdtgb1 \ahb_slv.hrdtgb0 }, Q = \ahb_slv.hrdata_reg).
Adding EN signal on $flatten\ahb_slv.$verific$hrdata_br_reg$dma_ahbslv.v:492$18264 ($adff) from module dma_top (D = { \ahb_slv.h1rdtib3 \ahb_slv.h1rdtib2 \ahb_slv.h1rdtib1 \ahb_slv.h1rdtib0 }, Q = \ahb_slv.hrdata_br).
Adding EN signal on $flatten\ahb_mst1.$verific$mx_dtp_reg$dma_ahbmst.v:596$12867 ($adff) from module dma_top (D = \ahb_mst1.mx_cmd_st [1], Q = \ahb_mst1.mx_dtp).
Adding EN signal on $flatten\ahb_mst1.$verific$mx_dma_had_a_rty_reg$dma_ahbmst.v:1209$13141 ($adff) from module dma_top (D = $flatten\ahb_mst1.$verific$n4101$12607, Q = \ahb_mst1.mx_dma_had_a_rty).
Adding EN signal on $flatten\ahb_mst1.$verific$mx_ad1t0x_reg$dma_ahbmst.v:1111$13086 ($adff) from module dma_top (D = \ahb_mst1.haddro [1:0], Q = \ahb_mst1.mx_ad1t0x).
Adding EN signal on $flatten\ahb_mst1.$verific$m0_m1_diff_tx_reg$dma_ahbmst.v:926$12978 ($adff) from module dma_top (D = $flatten\ahb_mst1.$verific$n3100$12487, Q = \ahb_mst1.m0_m1_diff_tx).
Adding SRST signal on $flatten\ahb_mst1.$verific$inc_selx_reg$dma_ahbmst.v:1045$13063 ($dff) from module dma_top (D = \ahb_mst1.inc_sel, Q = \ahb_mst1.inc_selx, rval = 3'011).
Adding EN signal on $flatten\ahb_mst1.$verific$hwriteo_reg$dma_ahbmst.v:671$12905 ($adff) from module dma_top (D = $flatten\ahb_mst1.$verific$n2380$12464, Q = \ahb_mst1.hwriteo).
Adding EN signal on $flatten\ahb_mst1.$verific$hwdatao_reg$dma_ahbmst.v:893$12964 ($adff) from module dma_top (D = \ahb_mst1.mux_wdt, Q = \ahb_mst1.hwdatao).
Adding EN signal on $flatten\ahb_mst1.$verific$hsizeo_reg$dma_ahbmst.v:726$12924 ($adff) from module dma_top (D = \ahb_mst1.hsizeq [1:0], Q = \ahb_mst1.hsizeo [1:0]).
Adding EN signal on $flatten\ahb_mst1.$verific$hsizeo_reg$dma_ahbmst.v:726$12924 ($adff) from module dma_top (D = \ahb_mst1.hsizeq [2], Q = \ahb_mst1.hsizeo [2]).
Adding EN signal on $flatten\ahb_mst1.$verific$hproto_reg$dma_ahbmst.v:783$12930 ($adff) from module dma_top (D = \ahb_mst1.mux_prot, Q = \ahb_mst1.hproto).
Adding EN signal on $flatten\ahb_mst1.$verific$hbursto_reg$dma_ahbmst.v:811$12942 ($adff) from module dma_top (D = { 2'00 \ahb_mst1.mux_bst [0] }, Q = \ahb_mst1.hbursto).
Adding EN signal on $flatten\ahb_mst1.$verific$haddro_reg$dma_ahbmst.v:987$13015 ($adff) from module dma_top (D = \ahb_mst1.mux_ad [15:0], Q = \ahb_mst1.haddro [15:0]).
Adding EN signal on $flatten\ahb_mst1.$verific$haddro_reg$dma_ahbmst.v:987$13015 ($adff) from module dma_top (D = \ahb_mst1.mux_ad [31:16], Q = \ahb_mst1.haddro [31:16]).
Adding EN signal on $flatten\ahb_mst1.$verific$adin_is_neg_reg$dma_ahbmst.v:1094$13074 ($adff) from module dma_top (D = \ahb_mst1.ad_addin2 [16], Q = \ahb_mst1.adin_is_neg).
Adding EN signal on $flatten\ahb_mst0.$verific$mx_dtp_reg$dma_ahbmst.v:596$7861 ($adff) from module dma_top (D = \ahb_mst0.mx_cmd_st [1], Q = \ahb_mst0.mx_dtp).
Adding EN signal on $flatten\ahb_mst0.$verific$mx_dma_had_a_rty_reg$dma_ahbmst.v:1209$8117 ($adff) from module dma_top (D = $flatten\ahb_mst0.$verific$n3659$7623, Q = \ahb_mst0.mx_dma_had_a_rty).
Adding EN signal on $flatten\ahb_mst0.$verific$mx_ad1t0x_reg$dma_ahbmst.v:1111$8065 ($adff) from module dma_top (D = \ahb_mst0.haddro [1:0], Q = \ahb_mst0.mx_ad1t0x).
Adding EN signal on $flatten\ahb_mst0.$verific$m0_m1_diff_tx_reg$dma_ahbmst.v:926$7957 ($adff) from module dma_top (D = $flatten\ahb_mst0.$verific$n2662$7505, Q = \ahb_mst0.m0_m1_diff_tx).
Adding SRST signal on $flatten\ahb_mst0.$verific$inc_selx_reg$dma_ahbmst.v:1045$8042 ($dff) from module dma_top (D = \ahb_mst0.inc_sel, Q = \ahb_mst0.inc_selx, rval = 3'011).
Adding EN signal on $flatten\ahb_mst0.$verific$hwriteo_reg$dma_ahbmst.v:671$7885 ($adff) from module dma_top (D = $flatten\ahb_mst0.$verific$n1980$7482, Q = \ahb_mst0.hwriteo).
Adding EN signal on $flatten\ahb_mst0.$verific$hwdatao_reg$dma_ahbmst.v:893$7943 ($adff) from module dma_top (D = \ahb_mst0.mux_wdt, Q = \ahb_mst0.hwdatao).
Adding EN signal on $flatten\ahb_mst0.$verific$hsizeo_reg$dma_ahbmst.v:726$7904 ($adff) from module dma_top (D = \ahb_mst0.hsizep [1:0], Q = \ahb_mst0.hsizeo [1:0]).
Adding EN signal on $flatten\ahb_mst0.$verific$hsizeo_reg$dma_ahbmst.v:726$7904 ($adff) from module dma_top (D = \ahb_mst0.hsizep [2], Q = \ahb_mst0.hsizeo [2]).
Adding EN signal on $flatten\ahb_mst0.$verific$hreqo_reg$dma_ahbmst.v:1174$8105 ($adff) from module dma_top (D = $flatten\ahb_mst0.$verific$n3638$7615, Q = \ahb_mst0.hreqo).
Adding EN signal on $flatten\ahb_mst0.$verific$hproto_reg$dma_ahbmst.v:783$7909 ($adff) from module dma_top (D = { \ch_sel.arb_chcsr_reg [20:18] 1'0 }, Q = \ahb_mst0.hproto).
Adding EN signal on $flatten\ahb_mst0.$verific$hbursto_reg$dma_ahbmst.v:811$7921 ($adff) from module dma_top (D = { 2'00 \ahb_mst0.mux_bst [0] }, Q = \ahb_mst0.hbursto).
Adding EN signal on $flatten\ahb_mst0.$verific$haddro_reg$dma_ahbmst.v:987$7994 ($adff) from module dma_top (D = \ahb_mst0.mux_ad [31:16], Q = \ahb_mst0.haddro [31:16]).
Adding EN signal on $flatten\ahb_mst0.$verific$haddro_reg$dma_ahbmst.v:987$7994 ($adff) from module dma_top (D = \ahb_mst0.mux_ad [15:0], Q = \ahb_mst0.haddro [15:0]).
Adding EN signal on $flatten\ahb_mst0.$verific$adin_is_neg_reg$dma_ahbmst.v:1094$8053 ($adff) from module dma_top (D = \ahb_mst0.ad_addin2 [16], Q = \ahb_mst0.adin_is_neg).
Setting constant 0-bit at position 1 on $auto$ff.cc:262:slice$19827 ($adffe) from module dma_top.
Setting constant 0-bit at position 2 on $auto$ff.cc:262:slice$19827 ($adffe) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$19826 ($adffe) from module dma_top.
Setting constant 0-bit at position 0 on $flatten\ahb_mst0.$verific$mx_dt_st_reg$dma_ahbmst.v:607$7870 ($adff) from module dma_top.
Setting constant 0-bit at position 1 on $auto$ff.cc:262:slice$19790 ($adffe) from module dma_top.
Setting constant 0-bit at position 2 on $auto$ff.cc:262:slice$19790 ($adffe) from module dma_top.
Setting constant 0-bit at position 0 on $flatten\ahb_mst1.$verific$mx_dt_st_reg$dma_ahbmst.v:607$12876 ($adff) from module dma_top.
Setting constant 0-bit at position 2 on $auto$ff.cc:262:slice$19751 ($adffe) from module dma_top.
Setting constant 0-bit at position 1 on $auto$ff.cc:262:slice$18829 ($adffe) from module dma_top.

yosys> opt_clean

3.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dma_top..
Removed 166 unused cells and 166 unused wires.
<suppressed ~173 debug messages>

yosys> opt_expr

3.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module dma_top.
<suppressed ~829 debug messages>

3.13.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.13.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dma_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux $flatten\ahb_mst0.$verific$mux_429$dma_ahbmst.v:1099$8059.
    dead port 2/2 on $mux $flatten\ahb_mst0.$verific$mux_429$dma_ahbmst.v:1099$8059.
    dead port 1/2 on $mux $flatten\ahb_mst0.$verific$mux_430$dma_ahbmst.v:1100$8060.
    dead port 2/2 on $mux $flatten\ahb_mst0.$verific$mux_430$dma_ahbmst.v:1100$8060.
    dead port 1/2 on $mux $flatten\ahb_mst1.$verific$mux_447$dma_ahbmst.v:1099$13080.
    dead port 2/2 on $mux $flatten\ahb_mst1.$verific$mux_447$dma_ahbmst.v:1099$13080.
    dead port 1/2 on $mux $flatten\ahb_mst1.$verific$mux_448$dma_ahbmst.v:1100$13081.
    dead port 2/2 on $mux $flatten\ahb_mst1.$verific$mux_448$dma_ahbmst.v:1100$13081.
    dead port 1/2 on $mux $flatten\de.$verific$mux_27$dma_engine.v:645$6901.
    dead port 2/2 on $mux $flatten\de.$verific$mux_27$dma_engine.v:645$6901.
    dead port 1/2 on $mux $flatten\de.$verific$mux_461$dma_engine.v:1375$7248.
    dead port 2/2 on $mux $flatten\de.$verific$mux_461$dma_engine.v:1375$7248.
    dead port 1/2 on $mux $flatten\de.$verific$mux_463$dma_engine.v:1376$7250.
    dead port 2/2 on $mux $flatten\de.$verific$mux_463$dma_engine.v:1376$7250.
    dead port 1/2 on $mux $flatten\de.$verific$mux_467$dma_engine.v:1382$7255.
    dead port 2/2 on $mux $flatten\de.$verific$mux_467$dma_engine.v:1382$7255.
    dead port 1/2 on $mux $flatten\de.$verific$mux_470$dma_engine.v:1393$7258.
    dead port 2/2 on $mux $flatten\de.$verific$mux_470$dma_engine.v:1393$7258.
    dead port 1/2 on $mux $flatten\de.$verific$mux_472$dma_engine.v:1398$7260.
    dead port 2/2 on $mux $flatten\de.$verific$mux_472$dma_engine.v:1398$7260.
    dead port 1/2 on $mux $flatten\de.$verific$mux_475$dma_engine.v:1408$7263.
    dead port 2/2 on $mux $flatten\de.$verific$mux_475$dma_engine.v:1408$7263.
Removed 22 multiplexer ports.
<suppressed ~378 debug messages>

yosys> opt_reduce

3.13.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dma_top.
Performed a total of 0 changes.

yosys> opt_merge

3.13.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dma_top'.
<suppressed ~33 debug messages>
Removed a total of 11 cells.

yosys> opt_dff -sat

3.13.13. Executing OPT_DFF pass (perform DFF optimizations).
Handling never-active EN on $auto$ff.cc:262:slice$18847 ($adffe) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$18846 ($adffe) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$18849 ($adffe) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$18848 ($adffe) from module dma_top (removing D path).
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$18848 ($dlatch) from module dma_top.
Setting constant 0-bit at position 1 on $auto$ff.cc:262:slice$18848 ($dlatch) from module dma_top.
Setting constant 0-bit at position 2 on $auto$ff.cc:262:slice$18848 ($dlatch) from module dma_top.
Setting constant 0-bit at position 3 on $auto$ff.cc:262:slice$18848 ($dlatch) from module dma_top.
Setting constant 0-bit at position 4 on $auto$ff.cc:262:slice$18848 ($dlatch) from module dma_top.
Setting constant 0-bit at position 5 on $auto$ff.cc:262:slice$18848 ($dlatch) from module dma_top.
Setting constant 0-bit at position 6 on $auto$ff.cc:262:slice$18848 ($dlatch) from module dma_top.
Setting constant 0-bit at position 7 on $auto$ff.cc:262:slice$18848 ($dlatch) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$19771 ($adffe) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$19805 ($adffe) from module dma_top.
Setting constant 0-bit at position 3 on $flatten\de.$verific$de_st_reg$dma_engine.v:911$7042 ($adff) from module dma_top.
Setting constant 0-bit at position 4 on $flatten\de.$verific$de_st_reg$dma_engine.v:911$7042 ($adff) from module dma_top.
Setting constant 0-bit at position 7 on $flatten\de.$verific$de_st_reg$dma_engine.v:911$7042 ($adff) from module dma_top.
Setting constant 0-bit at position 8 on $flatten\de.$verific$de_st_reg$dma_engine.v:911$7042 ($adff) from module dma_top.
Setting constant 0-bit at position 9 on $flatten\de.$verific$de_st_reg$dma_engine.v:911$7042 ($adff) from module dma_top.
Setting constant 0-bit at position 10 on $flatten\de.$verific$de_st_reg$dma_engine.v:911$7042 ($adff) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$18840 ($adffe) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$18849 ($dlatch) from module dma_top.
Setting constant 0-bit at position 1 on $auto$ff.cc:262:slice$18849 ($dlatch) from module dma_top.
Setting constant 0-bit at position 2 on $auto$ff.cc:262:slice$18849 ($dlatch) from module dma_top.
Setting constant 0-bit at position 3 on $auto$ff.cc:262:slice$18849 ($dlatch) from module dma_top.
Setting constant 0-bit at position 4 on $auto$ff.cc:262:slice$18849 ($dlatch) from module dma_top.
Setting constant 0-bit at position 5 on $auto$ff.cc:262:slice$18849 ($dlatch) from module dma_top.
Setting constant 0-bit at position 6 on $auto$ff.cc:262:slice$18849 ($dlatch) from module dma_top.
Setting constant 0-bit at position 7 on $auto$ff.cc:262:slice$18849 ($dlatch) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$18846 ($dlatch) from module dma_top.
Setting constant 0-bit at position 1 on $auto$ff.cc:262:slice$18846 ($dlatch) from module dma_top.
Setting constant 0-bit at position 2 on $auto$ff.cc:262:slice$18846 ($dlatch) from module dma_top.
Setting constant 0-bit at position 3 on $auto$ff.cc:262:slice$18846 ($dlatch) from module dma_top.
Setting constant 0-bit at position 4 on $auto$ff.cc:262:slice$18846 ($dlatch) from module dma_top.
Setting constant 0-bit at position 5 on $auto$ff.cc:262:slice$18846 ($dlatch) from module dma_top.
Setting constant 0-bit at position 6 on $auto$ff.cc:262:slice$18846 ($dlatch) from module dma_top.
Setting constant 0-bit at position 7 on $auto$ff.cc:262:slice$18846 ($dlatch) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$18847 ($dlatch) from module dma_top.
Setting constant 0-bit at position 1 on $auto$ff.cc:262:slice$18847 ($dlatch) from module dma_top.
Setting constant 0-bit at position 2 on $auto$ff.cc:262:slice$18847 ($dlatch) from module dma_top.
Setting constant 0-bit at position 3 on $auto$ff.cc:262:slice$18847 ($dlatch) from module dma_top.
Setting constant 0-bit at position 4 on $auto$ff.cc:262:slice$18847 ($dlatch) from module dma_top.
Setting constant 0-bit at position 5 on $auto$ff.cc:262:slice$18847 ($dlatch) from module dma_top.
Setting constant 0-bit at position 6 on $auto$ff.cc:262:slice$18847 ($dlatch) from module dma_top.
Setting constant 0-bit at position 7 on $auto$ff.cc:262:slice$18847 ($dlatch) from module dma_top.
Setting constant 0-bit at position 1 on $auto$ff.cc:262:slice$18880 ($adffe) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$18831 ($adffe) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$18837 ($adffe) from module dma_top.
Setting constant 0-bit at position 1 on $auto$ff.cc:262:slice$18837 ($adffe) from module dma_top.
Setting constant 0-bit at position 2 on $auto$ff.cc:262:slice$18837 ($adffe) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$18877 ($adffe) from module dma_top.
Setting constant 1-bit at position 0 on $flatten\de.$verific$st_ed1s_reg$dma_engine.v:858$7010 ($adff) from module dma_top.
Setting constant 0-bit at position 0 on $flatten\dma_fifo.$verific$ram_wr_reg$dma_fifo.v:322$13391 ($adff) from module dma_top.

yosys> opt_clean

3.13.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dma_top..
Removed 112 unused cells and 690 unused wires.
<suppressed ~240 debug messages>

yosys> opt_expr

3.13.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module dma_top.
<suppressed ~67 debug messages>

3.13.16. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.13.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dma_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux $flatten\de.$verific$mux_200$dma_engine.v:972$7053.
    dead port 2/2 on $mux $flatten\de.$verific$mux_200$dma_engine.v:972$7053.
    dead port 2/12 on $pmux $flatten\de.$verific$select_221$dma_engine.v:1010$7069.
    dead port 3/12 on $pmux $flatten\de.$verific$select_221$dma_engine.v:1010$7069.
    dead port 4/12 on $pmux $flatten\de.$verific$select_221$dma_engine.v:1010$7069.
    dead port 5/12 on $pmux $flatten\de.$verific$select_221$dma_engine.v:1010$7069.
    dead port 7/12 on $pmux $flatten\de.$verific$select_221$dma_engine.v:1010$7069.
    dead port 8/12 on $pmux $flatten\de.$verific$select_221$dma_engine.v:1010$7069.
Removed 8 multiplexer ports.
<suppressed ~359 debug messages>

yosys> opt_reduce

3.13.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dma_top.
    New input vector for $reduce_or cell $flatten\de.$verific$reduce_nor_220$dma_engine.v:1010$7067: { $flatten\de.$verific$n621$6610 $flatten\de.$verific$n622$6611 $flatten\de.$verific$n623$6612 $flatten\de.$verific$n626$6615 $flatten\de.$verific$n627$6616 }
  Optimizing cells in module \dma_top.
Performed a total of 1 changes.

yosys> opt_merge

3.13.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dma_top'.
<suppressed ~9 debug messages>
Removed a total of 3 cells.

yosys> opt_dff -sat

3.13.20. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$19670 ($adffe) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$19673 ($adffe) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$19676 ($adffe) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$19679 ($adffe) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$19682 ($adffe) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$19685 ($adffe) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$19688 ($adffe) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$19691 ($adffe) from module dma_top.
Setting constant 0-bit at position 0 on $flatten\dma_fifo.$verific$ram_wrq_reg$dma_fifo.v:356$13403 ($adff) from module dma_top.

yosys> opt_clean

3.13.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dma_top..
Removed 37 unused cells and 98 unused wires.
<suppressed ~47 debug messages>

yosys> opt_expr

3.13.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module dma_top.
<suppressed ~9 debug messages>

3.13.23. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.13.24. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dma_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~350 debug messages>

yosys> opt_reduce

3.13.25. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dma_top.
Performed a total of 0 changes.

yosys> opt_merge

3.13.26. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dma_top'.
<suppressed ~24 debug messages>
Removed a total of 8 cells.

yosys> opt_dff -sat

3.13.27. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.13.28. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dma_top..
Removed 4 unused cells and 18 unused wires.
<suppressed ~6 debug messages>

yosys> opt_expr

3.13.29. Executing OPT_EXPR pass (perform const folding).
Optimizing module dma_top.

3.13.30. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.13.31. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dma_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~350 debug messages>

yosys> opt_reduce

3.13.32. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dma_top.
Performed a total of 0 changes.

yosys> opt_merge

3.13.33. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dma_top'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.13.34. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$18834 ($adffe) from module dma_top.
Setting constant 0-bit at position 1 on $auto$ff.cc:262:slice$18834 ($adffe) from module dma_top.
Setting constant 0-bit at position 2 on $auto$ff.cc:262:slice$18834 ($adffe) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$18843 ($adffe) from module dma_top.
Setting constant 0-bit at position 1 on $auto$ff.cc:262:slice$18843 ($adffe) from module dma_top.
Setting constant 0-bit at position 2 on $auto$ff.cc:262:slice$18843 ($adffe) from module dma_top.
Setting constant 0-bit at position 3 on $auto$ff.cc:262:slice$18843 ($adffe) from module dma_top.
Setting constant 0-bit at position 0 on $flatten\ctl_rf.$verific$dmaint_err_reg$dma_ctlrf.v:1727$9173 ($adff) from module dma_top.

yosys> opt_clean

3.13.35. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dma_top..
Removed 2 unused cells and 2 unused wires.
<suppressed ~3 debug messages>

yosys> opt_expr

3.13.36. Executing OPT_EXPR pass (perform const folding).
Optimizing module dma_top.
<suppressed ~10 debug messages>

3.13.37. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.13.38. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dma_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~347 debug messages>

yosys> opt_reduce

3.13.39. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dma_top.
Performed a total of 0 changes.

yosys> opt_merge

3.13.40. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dma_top'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.13.41. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.13.42. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dma_top..
Removed 8 unused cells and 17 unused wires.
<suppressed ~22 debug messages>

yosys> opt_expr

3.13.43. Executing OPT_EXPR pass (perform const folding).
Optimizing module dma_top.

3.13.44. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.13.45. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dma_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~347 debug messages>

yosys> opt_reduce

3.13.46. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dma_top.
Performed a total of 0 changes.

yosys> opt_merge

3.13.47. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dma_top'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.13.48. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.13.49. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dma_top..

yosys> opt_expr

3.13.50. Executing OPT_EXPR pass (perform const folding).
Optimizing module dma_top.

3.13.51. Finished OPT passes. (There is nothing left to do.)

yosys> wreduce -keepdc

3.14. Executing WREDUCE pass (reducing word size of cells).
Removed top 10 bits (of 12) from port B of cell dma_top.$flatten\de.$verific$equal_692$dma_engine.v:1668$7420 ($eq).
Removed top 11 bits (of 12) from port B of cell dma_top.$flatten\de.$verific$equal_690$dma_engine.v:1667$7418 ($eq).
Removed top 2 bits (of 3) from port B of cell dma_top.$flatten\de.$verific$equal_666$dma_engine.v:1647$7397 ($eq).
Removed top 1 bits (of 3) from port B of cell dma_top.$flatten\de.$verific$equal_664$dma_engine.v:1646$7395 ($eq).
Removed top 2 bits (of 3) from port B of cell dma_top.$flatten\de.$verific$equal_660$dma_engine.v:1644$7391 ($eq).
Removed top 1 bits (of 3) from port B of cell dma_top.$flatten\de.$verific$equal_658$dma_engine.v:1643$7389 ($eq).
Removed top 1 bits (of 3) from port A of cell dma_top.$flatten\de.$verific$sub_643$dma_engine.v:1630$7377 ($sub).
Removed top 2 bits (of 3) from port B of cell dma_top.$flatten\de.$verific$sub_643$dma_engine.v:1630$7377 ($sub).
Removed top 1 bits (of 3) from port Y of cell dma_top.$flatten\de.$verific$sub_643$dma_engine.v:1630$7377 ($sub).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\de.$verific$equal_631$dma_engine.v:1599$7368 ($eq).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\de.$verific$equal_580$dma_engine.v:1568$7344 ($eq).
Removed top 7 bits (of 8) from port B of cell dma_top.$flatten\de.$verific$equal_696$dma_engine.v:1670$7424 ($eq).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\de.$verific$equal_400$dma_engine.v:1224$7200 ($eq).
Removed top 4 bits (of 11) from mux cell dma_top.$flatten\de.$verific$select_221$dma_engine.v:1010$7069 ($pmux).
Removed top 1 bits (of 5) from port B of cell dma_top.$flatten\de.$verific$equal_214$dma_engine.v:973$7060 ($eq).
Removed top 2 bits (of 5) from port B of cell dma_top.$flatten\de.$verific$equal_211$dma_engine.v:952$7057 ($eq).
Removed top 3 bits (of 5) from port B of cell dma_top.$flatten\de.$verific$equal_210$dma_engine.v:941$7056 ($eq).
Removed top 4 bits (of 5) from port B of cell dma_top.$flatten\de.$verific$equal_209$dma_engine.v:924$7055 ($eq).
Removed top 1 bits (of 17) from port A of cell dma_top.$flatten\ahb_mst0.$verific$add_407$dma_ahbmst.v:1078$8044 ($add).
Removed top 1 bits (of 17) from port Y of cell dma_top.$flatten\ahb_mst0.$verific$add_407$dma_ahbmst.v:1078$8044 ($add).
Removed top 1 bits (of 17) from port B of cell dma_top.$flatten\ahb_mst0.$verific$add_407$dma_ahbmst.v:1078$8044 ($add).
Removed top 6 bits (of 7) from port B of cell dma_top.$flatten\ahb_mst0.$verific$equal_398$dma_ahbmst.v:1031$8034 ($eq).
Removed top 5 bits (of 7) from port B of cell dma_top.$flatten\ahb_mst0.$verific$equal_397$dma_ahbmst.v:1030$8033 ($eq).
Removed top 4 bits (of 7) from port B of cell dma_top.$flatten\ahb_mst0.$verific$equal_396$dma_ahbmst.v:1029$8032 ($eq).
Removed top 3 bits (of 7) from port B of cell dma_top.$flatten\ahb_mst0.$verific$equal_395$dma_ahbmst.v:1028$8031 ($eq).
Removed top 2 bits (of 7) from port B of cell dma_top.$flatten\ahb_mst0.$verific$equal_394$dma_ahbmst.v:1027$8030 ($eq).
Removed top 1 bits (of 7) from port B of cell dma_top.$flatten\ahb_mst0.$verific$equal_393$dma_ahbmst.v:1026$8029 ($eq).
Removed top 3 bits (of 4) from port B of cell dma_top.$flatten\ahb_mst0.$verific$equal_340$dma_ahbmst.v:976$7986 ($eq).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst0.$verific$and_580$dma_ahbmst.v:794$7912 ($and).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst0.$verific$and_580$dma_ahbmst.v:794$7912 ($and).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst0.$verific$and_580$dma_ahbmst.v:794$7912 ($and).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst0.$verific$and_579$dma_ahbmst.v:793$7910 ($and).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst0.$verific$and_579$dma_ahbmst.v:793$7910 ($and).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst0.$verific$and_579$dma_ahbmst.v:793$7910 ($and).
Removed top 1 bits (of 3) from port B of cell dma_top.$flatten\ahb_mst0.$verific$equal_180$dma_ahbmst.v:711$7893 ($eq).
Removed top 2 bits (of 3) from port B of cell dma_top.$flatten\ahb_mst0.$verific$equal_179$dma_ahbmst.v:710$7892 ($eq).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst0.$verific$and_572$dma_ahbmst.v:626$7871 ($and).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst0.$verific$and_572$dma_ahbmst.v:626$7871 ($and).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst0.$verific$and_572$dma_ahbmst.v:626$7871 ($and).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst0.$verific$inv_571$dma_ahbmst.v:626$7850 ($not).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst0.$verific$inv_571$dma_ahbmst.v:626$7850 ($not).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst0.$verific$or_565$dma_ahbmst.v:539$7838 ($or).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst0.$verific$or_565$dma_ahbmst.v:539$7838 ($or).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst0.$verific$or_565$dma_ahbmst.v:539$7838 ($or).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst0.$verific$or_563$dma_ahbmst.v:526$7836 ($or).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst0.$verific$or_563$dma_ahbmst.v:526$7836 ($or).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst0.$verific$or_563$dma_ahbmst.v:526$7836 ($or).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst0.$verific$and_562$dma_ahbmst.v:526$7835 ($and).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst0.$verific$and_562$dma_ahbmst.v:526$7835 ($and).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst0.$verific$and_562$dma_ahbmst.v:526$7835 ($and).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst0.$verific$or_561$dma_ahbmst.v:526$7834 ($or).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst0.$verific$or_561$dma_ahbmst.v:526$7834 ($or).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst0.$verific$or_561$dma_ahbmst.v:526$7834 ($or).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst0.$verific$and_560$dma_ahbmst.v:526$7833 ($and).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst0.$verific$and_560$dma_ahbmst.v:526$7833 ($and).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst0.$verific$and_560$dma_ahbmst.v:526$7833 ($and).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst0.$verific$or_559$dma_ahbmst.v:526$7832 ($or).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst0.$verific$or_559$dma_ahbmst.v:526$7832 ($or).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst0.$verific$or_559$dma_ahbmst.v:526$7832 ($or).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst0.$verific$or_558$dma_ahbmst.v:523$7831 ($or).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst0.$verific$inv_556$dma_ahbmst.v:523$7829 ($not).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst0.$verific$and_553$dma_ahbmst.v:520$7828 ($and).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst0.$verific$and_553$dma_ahbmst.v:520$7828 ($and).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst0.$verific$and_553$dma_ahbmst.v:520$7828 ($and).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst0.$verific$and_551$dma_ahbmst.v:520$7826 ($and).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst0.$verific$and_551$dma_ahbmst.v:520$7826 ($and).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst0.$verific$and_551$dma_ahbmst.v:520$7826 ($and).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst0.$verific$inv_549$dma_ahbmst.v:520$7824 ($not).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst0.$verific$or_544$dma_ahbmst.v:476$7811 ($or).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst0.$verific$or_544$dma_ahbmst.v:476$7811 ($or).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst0.$verific$or_544$dma_ahbmst.v:476$7811 ($or).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst0.$verific$and_543$dma_ahbmst.v:476$7810 ($and).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst0.$verific$and_543$dma_ahbmst.v:476$7810 ($and).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst0.$verific$and_543$dma_ahbmst.v:476$7810 ($and).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst0.$verific$or_542$dma_ahbmst.v:467$7809 ($or).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst0.$verific$or_542$dma_ahbmst.v:467$7809 ($or).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst0.$verific$or_542$dma_ahbmst.v:467$7809 ($or).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst0.$verific$and_541$dma_ahbmst.v:467$7808 ($and).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst0.$verific$and_541$dma_ahbmst.v:467$7808 ($and).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst0.$verific$and_541$dma_ahbmst.v:467$7808 ($and).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst0.$verific$or_540$dma_ahbmst.v:467$7807 ($or).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst0.$verific$or_540$dma_ahbmst.v:467$7807 ($or).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst0.$verific$or_540$dma_ahbmst.v:467$7807 ($or).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst0.$verific$and_537$dma_ahbmst.v:466$7804 ($and).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst0.$verific$and_537$dma_ahbmst.v:466$7804 ($and).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst0.$verific$and_537$dma_ahbmst.v:466$7804 ($and).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst0.$verific$and_536$dma_ahbmst.v:465$7803 ($and).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst0.$verific$and_536$dma_ahbmst.v:465$7803 ($and).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst0.$verific$and_536$dma_ahbmst.v:465$7803 ($and).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst0.$verific$or_535$dma_ahbmst.v:465$7802 ($or).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst0.$verific$and_533$dma_ahbmst.v:464$7788 ($and).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst0.$verific$and_533$dma_ahbmst.v:464$7788 ($and).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst0.$verific$and_533$dma_ahbmst.v:464$7788 ($and).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst0.$verific$and_530$dma_ahbmst.v:420$7784 ($and).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst0.$verific$and_530$dma_ahbmst.v:420$7784 ($and).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst0.$verific$and_530$dma_ahbmst.v:420$7784 ($and).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst0.$verific$or_529$dma_ahbmst.v:416$7782 ($or).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst0.$verific$or_529$dma_ahbmst.v:416$7782 ($or).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst0.$verific$or_529$dma_ahbmst.v:416$7782 ($or).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst0.$verific$and_528$dma_ahbmst.v:416$7781 ($and).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst0.$verific$and_528$dma_ahbmst.v:416$7781 ($and).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst0.$verific$and_528$dma_ahbmst.v:416$7781 ($and).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst0.$verific$and_526$dma_ahbmst.v:416$7779 ($and).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst0.$verific$and_526$dma_ahbmst.v:416$7779 ($and).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst0.$verific$and_526$dma_ahbmst.v:416$7779 ($and).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst0.$verific$inv_525$dma_ahbmst.v:416$7778 ($not).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst0.$verific$and_524$dma_ahbmst.v:416$7777 ($and).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst0.$verific$and_524$dma_ahbmst.v:416$7777 ($and).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst0.$verific$and_524$dma_ahbmst.v:416$7777 ($and).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst0.$verific$inv_523$dma_ahbmst.v:416$7776 ($not).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst0.$verific$and_522$dma_ahbmst.v:415$7775 ($and).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst0.$verific$and_522$dma_ahbmst.v:415$7775 ($and).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst0.$verific$and_522$dma_ahbmst.v:415$7775 ($and).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst0.$verific$equal_21$dma_ahbmst.v:378$7755 ($eq).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst1.$verific$and_543$dma_ahbmst.v:414$13131 ($and).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst1.$verific$and_543$dma_ahbmst.v:414$13131 ($and).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst1.$verific$and_543$dma_ahbmst.v:414$13131 ($and).
Removed top 1 bits (of 17) from port A of cell dma_top.$flatten\ahb_mst1.$verific$add_425$dma_ahbmst.v:1078$13065 ($add).
Removed top 1 bits (of 17) from port Y of cell dma_top.$flatten\ahb_mst1.$verific$add_425$dma_ahbmst.v:1078$13065 ($add).
Removed top 1 bits (of 17) from port B of cell dma_top.$flatten\ahb_mst1.$verific$add_425$dma_ahbmst.v:1078$13065 ($add).
Removed top 6 bits (of 7) from port B of cell dma_top.$flatten\ahb_mst1.$verific$equal_416$dma_ahbmst.v:1031$13055 ($eq).
Removed top 5 bits (of 7) from port B of cell dma_top.$flatten\ahb_mst1.$verific$equal_415$dma_ahbmst.v:1030$13054 ($eq).
Removed top 4 bits (of 7) from port B of cell dma_top.$flatten\ahb_mst1.$verific$equal_414$dma_ahbmst.v:1029$13053 ($eq).
Removed top 3 bits (of 7) from port B of cell dma_top.$flatten\ahb_mst1.$verific$equal_413$dma_ahbmst.v:1028$13052 ($eq).
Removed top 2 bits (of 7) from port B of cell dma_top.$flatten\ahb_mst1.$verific$equal_412$dma_ahbmst.v:1027$13051 ($eq).
Removed top 1 bits (of 7) from port B of cell dma_top.$flatten\ahb_mst1.$verific$equal_411$dma_ahbmst.v:1026$13050 ($eq).
Removed top 4 bits (of 5) from port B of cell dma_top.$flatten\ahb_mst1.$verific$equal_358$dma_ahbmst.v:976$13007 ($eq).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst1.$verific$or_616$dma_ahbmst.v:794$12933 ($or).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst1.$verific$or_616$dma_ahbmst.v:794$12933 ($or).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst1.$verific$or_616$dma_ahbmst.v:794$12933 ($or).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst1.$verific$and_615$dma_ahbmst.v:794$12932 ($and).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst1.$verific$and_615$dma_ahbmst.v:794$12932 ($and).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst1.$verific$and_615$dma_ahbmst.v:794$12932 ($and).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst1.$verific$and_614$dma_ahbmst.v:793$12931 ($and).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst1.$verific$and_614$dma_ahbmst.v:793$12931 ($and).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst1.$verific$and_614$dma_ahbmst.v:793$12931 ($and).
Removed top 1 bits (of 3) from port B of cell dma_top.$flatten\ahb_mst1.$verific$equal_196$dma_ahbmst.v:711$12913 ($eq).
Removed top 2 bits (of 3) from port B of cell dma_top.$flatten\ahb_mst1.$verific$equal_195$dma_ahbmst.v:710$12912 ($eq).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst1.$verific$inv_613$dma_ahbmst.v:793$12897 ($not).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst1.$verific$inv_613$dma_ahbmst.v:793$12897 ($not).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst1.$verific$inv_610$dma_ahbmst.v:660$12893 ($not).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst1.$verific$inv_610$dma_ahbmst.v:660$12893 ($not).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst1.$verific$and_608$dma_ahbmst.v:652$12890 ($and).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst1.$verific$and_608$dma_ahbmst.v:652$12890 ($and).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst1.$verific$and_608$dma_ahbmst.v:652$12890 ($and).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst1.$verific$and_607$dma_ahbmst.v:651$12889 ($and).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst1.$verific$and_607$dma_ahbmst.v:651$12889 ($and).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst1.$verific$and_607$dma_ahbmst.v:651$12889 ($and).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst1.$verific$and_606$dma_ahbmst.v:645$12887 ($and).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst1.$verific$and_606$dma_ahbmst.v:645$12887 ($and).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst1.$verific$and_606$dma_ahbmst.v:645$12887 ($and).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst1.$verific$and_605$dma_ahbmst.v:644$12885 ($and).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst1.$verific$and_605$dma_ahbmst.v:644$12885 ($and).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst1.$verific$and_605$dma_ahbmst.v:644$12885 ($and).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst1.$verific$and_600$dma_ahbmst.v:626$12879 ($and).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst1.$verific$and_600$dma_ahbmst.v:626$12879 ($and).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst1.$verific$and_600$dma_ahbmst.v:626$12879 ($and).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst1.$verific$inv_599$dma_ahbmst.v:626$12878 ($not).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst1.$verific$inv_599$dma_ahbmst.v:626$12878 ($not).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst1.$verific$and_598$dma_ahbmst.v:625$12855 ($and).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst1.$verific$and_598$dma_ahbmst.v:625$12855 ($and).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst1.$verific$and_598$dma_ahbmst.v:625$12855 ($and).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst1.$verific$or_592$dma_ahbmst.v:539$12843 ($or).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst1.$verific$or_592$dma_ahbmst.v:539$12843 ($or).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst1.$verific$or_592$dma_ahbmst.v:539$12843 ($or).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst1.$verific$or_590$dma_ahbmst.v:534$12841 ($or).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst1.$verific$or_590$dma_ahbmst.v:534$12841 ($or).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst1.$verific$or_590$dma_ahbmst.v:534$12841 ($or).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst1.$verific$or_589$dma_ahbmst.v:526$12840 ($or).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst1.$verific$or_589$dma_ahbmst.v:526$12840 ($or).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst1.$verific$or_589$dma_ahbmst.v:526$12840 ($or).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst1.$verific$and_588$dma_ahbmst.v:526$12839 ($and).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst1.$verific$and_588$dma_ahbmst.v:526$12839 ($and).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst1.$verific$and_588$dma_ahbmst.v:526$12839 ($and).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst1.$verific$or_587$dma_ahbmst.v:526$12838 ($or).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst1.$verific$or_587$dma_ahbmst.v:526$12838 ($or).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst1.$verific$or_587$dma_ahbmst.v:526$12838 ($or).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst1.$verific$and_586$dma_ahbmst.v:526$12837 ($and).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst1.$verific$and_586$dma_ahbmst.v:526$12837 ($and).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst1.$verific$and_586$dma_ahbmst.v:526$12837 ($and).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst1.$verific$or_585$dma_ahbmst.v:526$12836 ($or).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst1.$verific$or_585$dma_ahbmst.v:526$12836 ($or).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst1.$verific$or_585$dma_ahbmst.v:526$12836 ($or).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst1.$verific$and_583$dma_ahbmst.v:523$12834 ($and).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst1.$verific$and_579$dma_ahbmst.v:520$12832 ($and).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst1.$verific$and_579$dma_ahbmst.v:520$12832 ($and).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst1.$verific$and_579$dma_ahbmst.v:520$12832 ($and).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst1.$verific$and_576$dma_ahbmst.v:520$12829 ($and).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst1.$verific$or_570$dma_ahbmst.v:476$12815 ($or).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst1.$verific$or_570$dma_ahbmst.v:476$12815 ($or).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst1.$verific$or_570$dma_ahbmst.v:476$12815 ($or).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst1.$verific$and_569$dma_ahbmst.v:476$12814 ($and).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst1.$verific$and_569$dma_ahbmst.v:476$12814 ($and).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst1.$verific$and_569$dma_ahbmst.v:476$12814 ($and).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst1.$verific$or_568$dma_ahbmst.v:471$12813 ($or).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst1.$verific$or_568$dma_ahbmst.v:471$12813 ($or).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst1.$verific$or_568$dma_ahbmst.v:471$12813 ($or).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst1.$verific$or_567$dma_ahbmst.v:467$12812 ($or).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst1.$verific$or_567$dma_ahbmst.v:467$12812 ($or).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst1.$verific$or_567$dma_ahbmst.v:467$12812 ($or).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst1.$verific$and_566$dma_ahbmst.v:467$12811 ($and).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst1.$verific$and_566$dma_ahbmst.v:467$12811 ($and).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst1.$verific$and_566$dma_ahbmst.v:467$12811 ($and).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst1.$verific$and_562$dma_ahbmst.v:466$12807 ($and).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst1.$verific$and_562$dma_ahbmst.v:466$12807 ($and).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst1.$verific$and_562$dma_ahbmst.v:466$12807 ($and).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst1.$verific$and_561$dma_ahbmst.v:465$12806 ($and).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst1.$verific$and_561$dma_ahbmst.v:465$12806 ($and).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst1.$verific$and_561$dma_ahbmst.v:465$12806 ($and).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst1.$verific$and_559$dma_ahbmst.v:465$12804 ($and).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst1.$verific$and_559$dma_ahbmst.v:465$12804 ($and).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst1.$verific$and_559$dma_ahbmst.v:465$12804 ($and).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst1.$verific$and_558$dma_ahbmst.v:464$12791 ($and).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst1.$verific$and_558$dma_ahbmst.v:464$12791 ($and).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst1.$verific$and_558$dma_ahbmst.v:464$12791 ($and).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst1.$verific$or_554$dma_ahbmst.v:422$12786 ($or).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst1.$verific$or_554$dma_ahbmst.v:422$12786 ($or).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst1.$verific$or_554$dma_ahbmst.v:422$12786 ($or).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst1.$verific$and_553$dma_ahbmst.v:420$12785 ($and).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst1.$verific$and_553$dma_ahbmst.v:420$12785 ($and).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst1.$verific$and_553$dma_ahbmst.v:420$12785 ($and).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst1.$verific$or_552$dma_ahbmst.v:416$12784 ($or).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst1.$verific$or_552$dma_ahbmst.v:416$12784 ($or).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst1.$verific$or_552$dma_ahbmst.v:416$12784 ($or).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst1.$verific$and_551$dma_ahbmst.v:416$12783 ($and).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst1.$verific$and_551$dma_ahbmst.v:416$12783 ($and).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst1.$verific$and_551$dma_ahbmst.v:416$12783 ($and).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst1.$verific$and_549$dma_ahbmst.v:416$12781 ($and).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst1.$verific$and_549$dma_ahbmst.v:416$12781 ($and).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst1.$verific$and_549$dma_ahbmst.v:416$12781 ($and).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst1.$verific$and_547$dma_ahbmst.v:416$12779 ($and).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst1.$verific$and_547$dma_ahbmst.v:416$12779 ($and).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst1.$verific$and_547$dma_ahbmst.v:416$12779 ($and).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst1.$verific$and_545$dma_ahbmst.v:415$12777 ($and).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst1.$verific$and_545$dma_ahbmst.v:415$12777 ($and).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst1.$verific$and_545$dma_ahbmst.v:415$12777 ($and).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst1.$verific$equal_21$dma_ahbmst.v:378$12755 ($eq).
Removed top 1 bits (of 3) from port B of cell dma_top.$flatten\dma_fifo.$verific$equal_71$dma_fifo.v:252$13317 ($eq).
Removed top 2 bits (of 3) from port B of cell dma_top.$flatten\dma_fifo.$verific$equal_70$dma_fifo.v:251$13316 ($eq).
Removed top 3 bits (of 4) from port B of cell dma_top.$flatten\ctl_rf.\c7_rf.$verific$add_61$dma_chrf.v:279$17609 ($add).
Removed top 3 bits (of 4) from port B of cell dma_top.$flatten\ctl_rf.\c6_rf.$verific$add_61$dma_chrf.v:279$17158 ($add).
Removed top 3 bits (of 4) from port B of cell dma_top.$flatten\ctl_rf.\c5_rf.$verific$add_61$dma_chrf.v:279$16707 ($add).
Removed top 3 bits (of 4) from port B of cell dma_top.$flatten\ctl_rf.\c4_rf.$verific$add_61$dma_chrf.v:279$16256 ($add).
Removed top 3 bits (of 4) from port B of cell dma_top.$flatten\ctl_rf.\c3_rf.$verific$add_61$dma_chrf.v:279$15805 ($add).
Removed top 3 bits (of 4) from port B of cell dma_top.$flatten\ctl_rf.\c2_rf.$verific$add_61$dma_chrf.v:279$15354 ($add).
Removed top 3 bits (of 4) from port B of cell dma_top.$flatten\ctl_rf.\c1_rf.$verific$add_61$dma_chrf.v:279$14903 ($add).
Removed top 3 bits (of 4) from port B of cell dma_top.$flatten\ctl_rf.\c0_rf.$verific$add_61$dma_chrf.v:279$14452 ($add).
Removed top 1 bits (of 3) from port B of cell dma_top.$flatten\ctl_rf.$verific$not_equal_998$dma_ctlrf.v:2009$9228 ($ne).
Removed top 1 bits (of 3) from port B of cell dma_top.$flatten\ctl_rf.$verific$not_equal_986$dma_ctlrf.v:1992$9227 ($ne).
Removed top 2 bits (of 3) from port B of cell dma_top.$flatten\ctl_rf.$verific$not_equal_974$dma_ctlrf.v:1975$9226 ($ne).
Removed top 7 bits (of 8) from port B of cell dma_top.$flatten\ctl_rf.$verific$and_1982$dma_ctlrf.v:1786$9191 ($and).
Removed top 1 bits (of 7) from port B of cell dma_top.$flatten\ctl_rf.$verific$equal_476$dma_ctlrf.v:1534$8906 ($eq).
Removed top 2 bits (of 7) from port B of cell dma_top.$flatten\ctl_rf.$verific$equal_473$dma_ctlrf.v:1533$8903 ($eq).
Removed top 1 bits (of 7) from port B of cell dma_top.$flatten\ctl_rf.$verific$equal_466$dma_ctlrf.v:1527$8896 ($eq).
Removed top 2 bits (of 7) from port B of cell dma_top.$flatten\ctl_rf.$verific$equal_463$dma_ctlrf.v:1526$8893 ($eq).
Removed top 1 bits (of 7) from port B of cell dma_top.$flatten\ctl_rf.$verific$equal_456$dma_ctlrf.v:1520$8886 ($eq).
Removed top 2 bits (of 7) from port B of cell dma_top.$flatten\ctl_rf.$verific$equal_453$dma_ctlrf.v:1519$8883 ($eq).
Removed top 1 bits (of 7) from port B of cell dma_top.$flatten\ctl_rf.$verific$equal_446$dma_ctlrf.v:1513$8876 ($eq).
Removed top 2 bits (of 7) from port B of cell dma_top.$flatten\ctl_rf.$verific$equal_443$dma_ctlrf.v:1512$8873 ($eq).
Removed top 1 bits (of 7) from port B of cell dma_top.$flatten\ctl_rf.$verific$equal_436$dma_ctlrf.v:1506$8866 ($eq).
Removed top 2 bits (of 7) from port B of cell dma_top.$flatten\ctl_rf.$verific$equal_433$dma_ctlrf.v:1505$8863 ($eq).
Removed top 1 bits (of 7) from port B of cell dma_top.$flatten\ctl_rf.$verific$equal_426$dma_ctlrf.v:1499$8856 ($eq).
Removed top 2 bits (of 7) from port B of cell dma_top.$flatten\ctl_rf.$verific$equal_423$dma_ctlrf.v:1498$8853 ($eq).
Removed top 1 bits (of 7) from port B of cell dma_top.$flatten\ctl_rf.$verific$equal_416$dma_ctlrf.v:1492$8846 ($eq).
Removed top 2 bits (of 7) from port B of cell dma_top.$flatten\ctl_rf.$verific$equal_413$dma_ctlrf.v:1491$8843 ($eq).
Removed top 1 bits (of 7) from port B of cell dma_top.$flatten\ctl_rf.$verific$equal_406$dma_ctlrf.v:1486$8836 ($eq).
Removed top 2 bits (of 7) from port B of cell dma_top.$flatten\ctl_rf.$verific$equal_403$dma_ctlrf.v:1485$8833 ($eq).
Removed top 3 bits (of 7) from port B of cell dma_top.$flatten\ctl_rf.$verific$equal_400$dma_ctlrf.v:1480$8830 ($eq).
Removed top 3 bits (of 7) from port B of cell dma_top.$flatten\ctl_rf.$verific$equal_397$dma_ctlrf.v:1479$8827 ($eq).
Removed top 4 bits (of 7) from port B of cell dma_top.$flatten\ctl_rf.$verific$equal_394$dma_ctlrf.v:1478$8824 ($eq).
Removed top 5 bits (of 7) from port B of cell dma_top.$flatten\ctl_rf.$verific$equal_391$dma_ctlrf.v:1477$8821 ($eq).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ctl_rf.$verific$equal_225$dma_ctlrf.v:1292$8782 ($eq).
Removed top 1 bits (of 3) from port B of cell dma_top.$flatten\ctl_rf.$verific$equal_12$dma_ctlrf.v:984$8748 ($eq).
Removed top 4 bits (of 25) from FF cell dma_top.$flatten\ch_sel.$verific$arb_chcsr_reg_reg$dma_chsel.v:1310$14104 ($adff).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ch_sel.$verific$equal_262$dma_chsel.v:855$13974 ($eq).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ch_sel.$verific$equal_232$dma_chsel.v:796$13942 ($eq).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ch_sel.$verific$equal_224$dma_chsel.v:776$13932 ($eq).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ch_sel.$verific$equal_216$dma_chsel.v:756$13922 ($eq).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ch_sel.$verific$equal_208$dma_chsel.v:736$13912 ($eq).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ch_sel.$verific$equal_200$dma_chsel.v:716$13902 ($eq).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ch_sel.$verific$equal_192$dma_chsel.v:696$13892 ($eq).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ch_sel.$verific$equal_184$dma_chsel.v:675$13882 ($eq).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ch_sel.$verific$equal_176$dma_chsel.v:657$13872 ($eq).
Removed top 1 bits (of 3) from port B of cell dma_top.$flatten\ch_sel.$verific$equal_78$dma_chsel.v:525$13852 ($eq).
Removed top 1 bits (of 3) from port B of cell dma_top.$flatten\ch_sel.$verific$equal_71$dma_chsel.v:522$13851 ($eq).
Removed top 2 bits (of 3) from port B of cell dma_top.$flatten\ch_sel.$verific$equal_64$dma_chsel.v:519$13850 ($eq).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_slv.$verific$equal_148$dma_ahbslv.v:417$18207 ($eq).
Removed top 1 bits (of 3) from port B of cell dma_top.$flatten\ahb_slv.$verific$equal_132$dma_ahbslv.v:396$18192 ($eq).
Removed top 2 bits (of 3) from port B of cell dma_top.$flatten\ahb_slv.$verific$equal_131$dma_ahbslv.v:394$18191 ($eq).
Removed top 2 bits (of 3) from port B of cell dma_top.$flatten\ahb_slv.$verific$equal_74$dma_ahbslv.v:324$18147 ($eq).
Removed top 2 bits (of 3) from port B of cell dma_top.$flatten\ahb_slv.$verific$equal_37$dma_ahbslv.v:279$18115 ($eq).
Removed top 2 bits (of 4) from port B of cell dma_top.$flatten\m1_decoder.$verific$equal_96$dma_ahbdec.v:366$18540 ($eq).
Removed top 2 bits (of 4) from port B of cell dma_top.$flatten\m1_decoder.$verific$equal_95$dma_ahbdec.v:365$18539 ($eq).
Removed top 3 bits (of 4) from port B of cell dma_top.$flatten\m1_decoder.$verific$equal_94$dma_ahbdec.v:364$18538 ($eq).
Removed top 2 bits (of 4) from port B of cell dma_top.$flatten\m1_decoder.$verific$equal_90$dma_ahbdec.v:355$18532 ($eq).
Removed top 2 bits (of 4) from port B of cell dma_top.$flatten\m1_decoder.$verific$equal_89$dma_ahbdec.v:354$18531 ($eq).
Removed top 3 bits (of 4) from port B of cell dma_top.$flatten\m1_decoder.$verific$equal_88$dma_ahbdec.v:353$18530 ($eq).
Removed top 2 bits (of 4) from port B of cell dma_top.$flatten\m1_decoder.$verific$equal_84$dma_ahbdec.v:344$18524 ($eq).
Removed top 2 bits (of 4) from port B of cell dma_top.$flatten\m1_decoder.$verific$equal_83$dma_ahbdec.v:343$18523 ($eq).
Removed top 3 bits (of 4) from port B of cell dma_top.$flatten\m1_decoder.$verific$equal_82$dma_ahbdec.v:342$18522 ($eq).
Removed top 2 bits (of 4) from port B of cell dma_top.$flatten\m1_decoder.$verific$equal_78$dma_ahbdec.v:333$18516 ($eq).
Removed top 2 bits (of 4) from port B of cell dma_top.$flatten\m1_decoder.$verific$equal_77$dma_ahbdec.v:332$18515 ($eq).
Removed top 3 bits (of 4) from port B of cell dma_top.$flatten\m1_decoder.$verific$equal_76$dma_ahbdec.v:331$18514 ($eq).
Removed top 2 bits (of 4) from port B of cell dma_top.$flatten\m1_decoder.$verific$equal_72$dma_ahbdec.v:322$18508 ($eq).
Removed top 2 bits (of 4) from port B of cell dma_top.$flatten\m1_decoder.$verific$equal_71$dma_ahbdec.v:321$18507 ($eq).
Removed top 3 bits (of 4) from port B of cell dma_top.$flatten\m1_decoder.$verific$equal_70$dma_ahbdec.v:320$18506 ($eq).
Removed top 2 bits (of 4) from port B of cell dma_top.$flatten\m1_decoder.$verific$equal_66$dma_ahbdec.v:311$18500 ($eq).
Removed top 2 bits (of 4) from port B of cell dma_top.$flatten\m1_decoder.$verific$equal_65$dma_ahbdec.v:310$18499 ($eq).
Removed top 3 bits (of 4) from port B of cell dma_top.$flatten\m1_decoder.$verific$equal_64$dma_ahbdec.v:309$18498 ($eq).
Removed top 2 bits (of 4) from port B of cell dma_top.$flatten\m1_decoder.$verific$equal_60$dma_ahbdec.v:300$18492 ($eq).
Removed top 2 bits (of 4) from port B of cell dma_top.$flatten\m1_decoder.$verific$equal_59$dma_ahbdec.v:299$18491 ($eq).
Removed top 3 bits (of 4) from port B of cell dma_top.$flatten\m1_decoder.$verific$equal_58$dma_ahbdec.v:298$18490 ($eq).
Removed top 2 bits (of 4) from port B of cell dma_top.$flatten\m1_decoder.$verific$equal_54$dma_ahbdec.v:290$18484 ($eq).
Removed top 2 bits (of 4) from port B of cell dma_top.$flatten\m1_decoder.$verific$equal_53$dma_ahbdec.v:289$18483 ($eq).
Removed top 3 bits (of 4) from port B of cell dma_top.$flatten\m1_decoder.$verific$equal_52$dma_ahbdec.v:288$18482 ($eq).
Removed top 2 bits (of 4) from port B of cell dma_top.$flatten\m1_decoder.$verific$equal_48$dma_ahbdec.v:279$18476 ($eq).
Removed top 2 bits (of 4) from port B of cell dma_top.$flatten\m1_decoder.$verific$equal_47$dma_ahbdec.v:278$18475 ($eq).
Removed top 3 bits (of 4) from port B of cell dma_top.$flatten\m1_decoder.$verific$equal_46$dma_ahbdec.v:277$18474 ($eq).
Removed top 2 bits (of 4) from port B of cell dma_top.$flatten\m1_decoder.$verific$equal_42$dma_ahbdec.v:268$18468 ($eq).
Removed top 2 bits (of 4) from port B of cell dma_top.$flatten\m1_decoder.$verific$equal_41$dma_ahbdec.v:267$18467 ($eq).
Removed top 3 bits (of 4) from port B of cell dma_top.$flatten\m1_decoder.$verific$equal_40$dma_ahbdec.v:266$18466 ($eq).
Removed top 2 bits (of 4) from port B of cell dma_top.$flatten\m1_decoder.$verific$equal_36$dma_ahbdec.v:257$18460 ($eq).
Removed top 2 bits (of 4) from port B of cell dma_top.$flatten\m1_decoder.$verific$equal_35$dma_ahbdec.v:256$18459 ($eq).
Removed top 3 bits (of 4) from port B of cell dma_top.$flatten\m1_decoder.$verific$equal_34$dma_ahbdec.v:255$18458 ($eq).
Removed top 2 bits (of 4) from port B of cell dma_top.$flatten\m1_decoder.$verific$equal_30$dma_ahbdec.v:246$18452 ($eq).
Removed top 2 bits (of 4) from port B of cell dma_top.$flatten\m1_decoder.$verific$equal_29$dma_ahbdec.v:245$18451 ($eq).
Removed top 3 bits (of 4) from port B of cell dma_top.$flatten\m1_decoder.$verific$equal_28$dma_ahbdec.v:244$18450 ($eq).
Removed top 2 bits (of 4) from port B of cell dma_top.$flatten\m1_decoder.$verific$equal_24$dma_ahbdec.v:235$18444 ($eq).
Removed top 2 bits (of 4) from port B of cell dma_top.$flatten\m1_decoder.$verific$equal_23$dma_ahbdec.v:234$18443 ($eq).
Removed top 3 bits (of 4) from port B of cell dma_top.$flatten\m1_decoder.$verific$equal_22$dma_ahbdec.v:233$18442 ($eq).
Removed top 2 bits (of 4) from port B of cell dma_top.$flatten\m1_decoder.$verific$equal_18$dma_ahbdec.v:224$18436 ($eq).
Removed top 2 bits (of 4) from port B of cell dma_top.$flatten\m1_decoder.$verific$equal_17$dma_ahbdec.v:223$18435 ($eq).
Removed top 3 bits (of 4) from port B of cell dma_top.$flatten\m1_decoder.$verific$equal_16$dma_ahbdec.v:222$18434 ($eq).
Removed top 2 bits (of 4) from port B of cell dma_top.$flatten\m1_decoder.$verific$equal_12$dma_ahbdec.v:213$18428 ($eq).
Removed top 2 bits (of 4) from port B of cell dma_top.$flatten\m1_decoder.$verific$equal_11$dma_ahbdec.v:212$18427 ($eq).
Removed top 3 bits (of 4) from port B of cell dma_top.$flatten\m1_decoder.$verific$equal_10$dma_ahbdec.v:211$18426 ($eq).
Removed top 2 bits (of 4) from port B of cell dma_top.$flatten\m1_decoder.$verific$equal_6$dma_ahbdec.v:203$18420 ($eq).
Removed top 2 bits (of 4) from port B of cell dma_top.$flatten\m1_decoder.$verific$equal_5$dma_ahbdec.v:202$18419 ($eq).
Removed top 3 bits (of 4) from port B of cell dma_top.$flatten\m1_decoder.$verific$equal_4$dma_ahbdec.v:201$18418 ($eq).
Removed top 1 bits (of 8) from port B of cell dma_top.$flatten\m1_mux.$verific$equal_21$dma_ahbmux.v:303$18760 ($eq).
Removed top 2 bits (of 8) from port B of cell dma_top.$flatten\m1_mux.$verific$equal_20$dma_ahbmux.v:300$18759 ($eq).
Removed top 3 bits (of 8) from port B of cell dma_top.$flatten\m1_mux.$verific$equal_19$dma_ahbmux.v:297$18758 ($eq).
Removed top 4 bits (of 8) from port B of cell dma_top.$flatten\m1_mux.$verific$equal_18$dma_ahbmux.v:294$18757 ($eq).
Removed top 5 bits (of 8) from port B of cell dma_top.$flatten\m1_mux.$verific$equal_17$dma_ahbmux.v:291$18756 ($eq).
Removed top 6 bits (of 8) from port B of cell dma_top.$flatten\m1_mux.$verific$equal_16$dma_ahbmux.v:288$18755 ($eq).
Removed top 1 bits (of 8) from port B of cell dma_top.$flatten\m1_mux.$verific$equal_11$dma_ahbmux.v:276$18748 ($eq).
Removed top 2 bits (of 8) from port B of cell dma_top.$flatten\m1_mux.$verific$equal_10$dma_ahbmux.v:273$18747 ($eq).
Removed top 3 bits (of 8) from port B of cell dma_top.$flatten\m1_mux.$verific$equal_9$dma_ahbmux.v:270$18746 ($eq).
Removed top 4 bits (of 8) from port B of cell dma_top.$flatten\m1_mux.$verific$equal_8$dma_ahbmux.v:267$18745 ($eq).
Removed top 5 bits (of 8) from port B of cell dma_top.$flatten\m1_mux.$verific$equal_7$dma_ahbmux.v:264$18744 ($eq).
Removed top 6 bits (of 8) from port B of cell dma_top.$flatten\m1_mux.$verific$equal_6$dma_ahbmux.v:261$18743 ($eq).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst0.$verific$or_558$dma_ahbmst.v:523$7831 ($or).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst0.$verific$or_558$dma_ahbmst.v:523$7831 ($or).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst0.$verific$or_552$dma_ahbmst.v:520$7827 ($or).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst0.$verific$or_552$dma_ahbmst.v:520$7827 ($or).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst0.$verific$or_552$dma_ahbmst.v:520$7827 ($or).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst0.$verific$or_535$dma_ahbmst.v:465$7802 ($or).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst0.$verific$or_535$dma_ahbmst.v:465$7802 ($or).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst0.$verific$inv_525$dma_ahbmst.v:416$7778 ($not).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst0.$verific$inv_523$dma_ahbmst.v:416$7776 ($not).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst1.$verific$and_583$dma_ahbmst.v:523$12834 ($and).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst1.$verific$and_583$dma_ahbmst.v:523$12834 ($and).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst1.$verific$and_576$dma_ahbmst.v:520$12829 ($and).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst1.$verific$and_576$dma_ahbmst.v:520$12829 ($and).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst0.$verific$inv_556$dma_ahbmst.v:523$7829 ($not).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst0.$verific$inv_549$dma_ahbmst.v:520$7824 ($not).
Removed top 31 bits (of 32) from wire dma_top.$flatten\ahb_mst0.$verific$n1020$7657.
Removed top 31 bits (of 32) from wire dma_top.$flatten\ahb_mst0.$verific$n1086$7659.
Removed top 31 bits (of 32) from wire dma_top.$flatten\ahb_mst0.$verific$n109$7631.
Removed top 31 bits (of 32) from wire dma_top.$flatten\ahb_mst0.$verific$n142$7632.
Removed top 31 bits (of 32) from wire dma_top.$flatten\ahb_mst0.$verific$n208$7634.
Removed top 31 bits (of 32) from wire dma_top.$flatten\ahb_mst0.$verific$n451$7641.
Removed top 31 bits (of 32) from wire dma_top.$flatten\ahb_mst0.$verific$n484$7642.
Removed top 31 bits (of 32) from wire dma_top.$flatten\ahb_mst0.$verific$n517$7643.
Removed top 31 bits (of 32) from wire dma_top.$flatten\ahb_mst0.$verific$n682$7648.
Removed top 31 bits (of 32) from wire dma_top.$flatten\ahb_mst0.$verific$n715$7649.
Removed top 31 bits (of 32) from wire dma_top.$flatten\ahb_mst0.$verific$n748$7650.
Removed top 31 bits (of 32) from wire dma_top.$flatten\ahb_mst0.$verific$n76$7630.
Removed top 31 bits (of 32) from wire dma_top.$flatten\ahb_mst0.$verific$n814$7652.
Removed top 31 bits (of 32) from wire dma_top.$flatten\ahb_mst0.$verific$n847$7653.
Removed top 31 bits (of 32) from wire dma_top.$flatten\ahb_mst0.$verific$n987$7656.
Removed top 31 bits (of 32) from wire dma_top.$flatten\ahb_mst1.$verific$n110$12615.
Removed top 31 bits (of 32) from wire dma_top.$flatten\ahb_mst1.$verific$n1252$12648.
Removed top 31 bits (of 32) from wire dma_top.$flatten\ahb_mst1.$verific$n1450$12652.
Removed top 31 bits (of 32) from wire dma_top.$flatten\ahb_mst1.$verific$n1483$12653.
Removed top 31 bits (of 32) from wire dma_top.$flatten\ahb_mst1.$verific$n1516$12654.
Removed top 31 bits (of 32) from wire dma_top.$flatten\ahb_mst1.$verific$n1549$12655.
Removed top 31 bits (of 32) from wire dma_top.$flatten\ahb_mst1.$verific$n1582$12656.
Removed top 31 bits (of 32) from wire dma_top.$flatten\ahb_mst1.$verific$n1648$12658.
Removed top 31 bits (of 32) from wire dma_top.$flatten\ahb_mst1.$verific$n1872$12667.
Removed top 31 bits (of 32) from wire dma_top.$flatten\ahb_mst1.$verific$n1905$12668.
Removed top 31 bits (of 32) from wire dma_top.$flatten\ahb_mst1.$verific$n1938$12669.
Removed top 31 bits (of 32) from wire dma_top.$flatten\ahb_mst1.$verific$n2004$12671.
Removed top 31 bits (of 32) from wire dma_top.$flatten\ahb_mst1.$verific$n2037$12672.
Removed top 31 bits (of 32) from wire dma_top.$flatten\ahb_mst1.$verific$n2138$12675.
Removed top 31 bits (of 32) from wire dma_top.$flatten\ahb_mst1.$verific$n2205$12677.
Removed top 31 bits (of 32) from wire dma_top.$flatten\ahb_mst1.$verific$n2238$12678.
Removed top 31 bits (of 32) from wire dma_top.$flatten\ahb_mst1.$verific$n2271$12679.
Removed top 31 bits (of 32) from wire dma_top.$flatten\ahb_mst1.$verific$n2304$12680.
Removed top 31 bits (of 32) from wire dma_top.$flatten\ahb_mst1.$verific$n2467$12693.
Removed top 31 bits (of 32) from wire dma_top.$flatten\ahb_mst1.$verific$n2500$12694.
Removed top 31 bits (of 32) from wire dma_top.$flatten\ahb_mst1.$verific$n2566$12696.
Removed top 31 bits (of 32) from wire dma_top.$flatten\ahb_mst1.$verific$n44$12613.
Removed top 31 bits (of 32) from wire dma_top.$flatten\ahb_mst1.$verific$n440$12625.
Removed top 31 bits (of 32) from wire dma_top.$flatten\ahb_mst1.$verific$n473$12626.
Removed top 31 bits (of 32) from wire dma_top.$flatten\ahb_mst1.$verific$n551$12628.
Removed top 31 bits (of 32) from wire dma_top.$flatten\ahb_mst1.$verific$n650$12631.
Removed top 31 bits (of 32) from wire dma_top.$flatten\ahb_mst1.$verific$n683$12632.
Removed top 31 bits (of 32) from wire dma_top.$flatten\ahb_mst1.$verific$n815$12636.
Removed top 31 bits (of 32) from wire dma_top.$flatten\ahb_mst1.$verific$n848$12637.
Removed top 31 bits (of 32) from wire dma_top.$flatten\ahb_mst1.$verific$n881$12638.
Removed top 1 bits (of 2) from wire dma_top.$flatten\ahb_slv.$verific$n674$18055.
Removed top 1 bits (of 3) from wire dma_top.$flatten\ahb_slv.$verific$n677$18056.
Removed top 1 bits (of 3) from wire dma_top.$flatten\de.$verific$n1754$6860.
Removed top 6 bits (of 7) from wire dma_top.$flatten\de.$verific$n464$6814.
Removed top 1 bits (of 3) from wire dma_top.$flatten\de.$verific$n488$6817.
Removed top 10 bits (of 32) from wire dma_top.arb_chcsr.
Removed top 12 bits (of 32) from wire dma_top.c0cfg.
Removed top 12 bits (of 32) from wire dma_top.c1cfg.
Removed top 12 bits (of 32) from wire dma_top.c2cfg.
Removed top 12 bits (of 32) from wire dma_top.c3cfg.
Removed top 12 bits (of 32) from wire dma_top.c4cfg.
Removed top 12 bits (of 32) from wire dma_top.c5cfg.
Removed top 12 bits (of 32) from wire dma_top.c6cfg.
Removed top 12 bits (of 32) from wire dma_top.c7cfg.
Removed top 5 bits (of 8) from wire dma_top.csr.
Removed top 4 bits (of 11) from wire dma_top.de_st.
Removed top 16 bits (of 32) from wire dma_top.m0_updad.
Removed top 16 bits (of 32) from wire dma_top.m1_updad.

yosys> peepopt

3.15. Executing PEEPOPT pass (run peephole optimizers).

yosys> pmuxtree

3.16. Executing PMUXTREE pass.

yosys> opt_clean

3.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dma_top..
Removed 90 unused cells and 218 unused wires.
<suppressed ~93 debug messages>

yosys> alumacc

3.18. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module dma_top:
  creating $macc model for $flatten\ahb_mst0.$verific$add_407$dma_ahbmst.v:1078$8044 ($add).
  creating $macc model for $flatten\ahb_mst1.$verific$add_425$dma_ahbmst.v:1078$13065 ($add).
  creating $macc model for $flatten\ctl_rf.\c0_rf.$verific$add_61$dma_chrf.v:279$14452 ($add).
  creating $macc model for $flatten\ctl_rf.\c1_rf.$verific$add_61$dma_chrf.v:279$14903 ($add).
  creating $macc model for $flatten\ctl_rf.\c2_rf.$verific$add_61$dma_chrf.v:279$15354 ($add).
  creating $macc model for $flatten\ctl_rf.\c3_rf.$verific$add_61$dma_chrf.v:279$15805 ($add).
  creating $macc model for $flatten\ctl_rf.\c4_rf.$verific$add_61$dma_chrf.v:279$16256 ($add).
  creating $macc model for $flatten\ctl_rf.\c5_rf.$verific$add_61$dma_chrf.v:279$16707 ($add).
  creating $macc model for $flatten\ctl_rf.\c6_rf.$verific$add_61$dma_chrf.v:279$17158 ($add).
  creating $macc model for $flatten\ctl_rf.\c7_rf.$verific$add_61$dma_chrf.v:279$17609 ($add).
  creating $macc model for $flatten\de.$verific$sub_643$dma_engine.v:1630$7377 ($sub).
  creating $alu model for $macc $flatten\de.$verific$sub_643$dma_engine.v:1630$7377.
  creating $alu model for $macc $flatten\ctl_rf.\c7_rf.$verific$add_61$dma_chrf.v:279$17609.
  creating $alu model for $macc $flatten\ctl_rf.\c6_rf.$verific$add_61$dma_chrf.v:279$17158.
  creating $alu model for $macc $flatten\ctl_rf.\c5_rf.$verific$add_61$dma_chrf.v:279$16707.
  creating $alu model for $macc $flatten\ctl_rf.\c4_rf.$verific$add_61$dma_chrf.v:279$16256.
  creating $alu model for $macc $flatten\ctl_rf.\c3_rf.$verific$add_61$dma_chrf.v:279$15805.
  creating $alu model for $macc $flatten\ctl_rf.\c2_rf.$verific$add_61$dma_chrf.v:279$15354.
  creating $alu model for $macc $flatten\ctl_rf.\c1_rf.$verific$add_61$dma_chrf.v:279$14903.
  creating $alu model for $macc $flatten\ctl_rf.\c0_rf.$verific$add_61$dma_chrf.v:279$14452.
  creating $alu model for $macc $flatten\ahb_mst1.$verific$add_425$dma_ahbmst.v:1078$13065.
  creating $alu model for $macc $flatten\ahb_mst0.$verific$add_407$dma_ahbmst.v:1078$8044.
  creating $alu cell for $flatten\ahb_mst0.$verific$add_407$dma_ahbmst.v:1078$8044: $auto$alumacc.cc:485:replace_alu$20563
  creating $alu cell for $flatten\ahb_mst1.$verific$add_425$dma_ahbmst.v:1078$13065: $auto$alumacc.cc:485:replace_alu$20566
  creating $alu cell for $flatten\ctl_rf.\c0_rf.$verific$add_61$dma_chrf.v:279$14452: $auto$alumacc.cc:485:replace_alu$20569
  creating $alu cell for $flatten\ctl_rf.\c1_rf.$verific$add_61$dma_chrf.v:279$14903: $auto$alumacc.cc:485:replace_alu$20572
  creating $alu cell for $flatten\ctl_rf.\c2_rf.$verific$add_61$dma_chrf.v:279$15354: $auto$alumacc.cc:485:replace_alu$20575
  creating $alu cell for $flatten\ctl_rf.\c3_rf.$verific$add_61$dma_chrf.v:279$15805: $auto$alumacc.cc:485:replace_alu$20578
  creating $alu cell for $flatten\ctl_rf.\c4_rf.$verific$add_61$dma_chrf.v:279$16256: $auto$alumacc.cc:485:replace_alu$20581
  creating $alu cell for $flatten\ctl_rf.\c5_rf.$verific$add_61$dma_chrf.v:279$16707: $auto$alumacc.cc:485:replace_alu$20584
  creating $alu cell for $flatten\ctl_rf.\c6_rf.$verific$add_61$dma_chrf.v:279$17158: $auto$alumacc.cc:485:replace_alu$20587
  creating $alu cell for $flatten\ctl_rf.\c7_rf.$verific$add_61$dma_chrf.v:279$17609: $auto$alumacc.cc:485:replace_alu$20590
  creating $alu cell for $flatten\de.$verific$sub_643$dma_engine.v:1630$7377: $auto$alumacc.cc:485:replace_alu$20593
  created 11 $alu and 0 $macc cells.

yosys> opt

3.19. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dma_top.
<suppressed ~70 debug messages>

yosys> opt_merge -nomux

3.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dma_top'.
<suppressed ~45 debug messages>
Removed a total of 15 cells.

yosys> opt_muxtree

3.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dma_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~347 debug messages>

yosys> opt_reduce

3.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dma_top.
    New input vector for $reduce_or cell $auto$pmuxtree.cc:37:or_generator$20265: { $flatten\de.$verific$n623$6612 $flatten\de.$verific$n626$6615 $flatten\de.$verific$n627$6616 $flatten\de.$verific$n632$6621 }
  Optimizing cells in module \dma_top.
Performed a total of 1 changes.

yosys> opt_merge

3.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dma_top'.
Removed a total of 0 cells.

yosys> opt_dff

3.19.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.19.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dma_top..
Removed 39 unused cells and 99 unused wires.
<suppressed ~68 debug messages>

yosys> opt_expr

3.19.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module dma_top.

3.19.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.19.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dma_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~345 debug messages>

yosys> opt_reduce

3.19.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dma_top.
Performed a total of 0 changes.

yosys> opt_merge

3.19.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dma_top'.
Removed a total of 0 cells.

yosys> opt_dff

3.19.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.19.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dma_top..

yosys> opt_expr

3.19.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module dma_top.

3.19.16. Finished OPT passes. (There is nothing left to do.)

yosys> memory -nomap

3.20. Executing MEMORY pass.

yosys> opt_mem

3.20.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

yosys> opt_mem_priority

3.20.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

yosys> opt_mem_feedback

3.20.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

yosys> memory_dff

3.20.4. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

yosys> opt_clean

3.20.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dma_top..

yosys> memory_share

3.20.6. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

yosys> opt_mem_widen

3.20.7. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

yosys> opt_clean

3.20.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dma_top..

yosys> memory_collect

3.20.9. Executing MEMORY_COLLECT pass (generating $mem cells).

yosys> opt_clean

3.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dma_top..

yosys> techmap

3.22. Executing TECHMAP pass (map to technology primitives).

3.22.1. Executing Verilog-2005 frontend: /home/users/meri/Documents/workspace/clean/for_push/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/meri/Documents/workspace/clean/for_push/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.22.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $adffe.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $bmux.
Using extmapper simplemap for cells of type $adff.
Using extmapper simplemap for cells of type $xor.
Using template $paramod$6df0329addda9228fcc2546de2aaf14ad26c98e1\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $sdff.
Using extmapper simplemap for cells of type $reduce_and.
Using template $paramod$32a7b7b86c07519b7537abc18e96f0331f97914d\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $ne.
Using template $paramod$ba698a254f9a5947e85cbe7beae6b161eefc5386\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $dlatch.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000100 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000010 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010000 for cells of type $lcu.
No more expansions possible.
<suppressed ~3839 debug messages>

yosys> opt

3.23. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.23.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dma_top.
<suppressed ~2823 debug messages>

yosys> opt_merge -nomux

3.23.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dma_top'.
<suppressed ~4245 debug messages>
Removed a total of 1415 cells.

yosys> opt_muxtree

3.23.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dma_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.23.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dma_top.
Performed a total of 0 changes.

yosys> opt_merge

3.23.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dma_top'.
Removed a total of 0 cells.

yosys> opt_dff

3.23.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.23.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dma_top..
Removed 237 unused cells and 1678 unused wires.
<suppressed ~267 debug messages>

yosys> opt_expr

3.23.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module dma_top.

3.23.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.23.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dma_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.23.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dma_top.
Performed a total of 0 changes.

yosys> opt_merge

3.23.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dma_top'.
Removed a total of 0 cells.

yosys> opt_dff

3.23.13. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $auto$ff.cc:262:slice$32359 ($_DFF_PN0_) from module dma_top (D = \ch_sel.dma_rrarb3.next_state [2], Q = \ch_sel.dma_rrarb3.state [2]).
Adding EN signal on $auto$ff.cc:262:slice$32358 ($_DFF_PN0_) from module dma_top (D = \ch_sel.dma_rrarb3.next_state [1], Q = \ch_sel.dma_rrarb3.state [1]).
Adding EN signal on $auto$ff.cc:262:slice$32357 ($_DFF_PN0_) from module dma_top (D = \ch_sel.dma_rrarb3.next_state [0], Q = \ch_sel.dma_rrarb3.state [0]).
Adding EN signal on $auto$ff.cc:262:slice$32140 ($_DFF_PN0_) from module dma_top (D = \ch_sel.dma_rrarb2.next_state [2], Q = \ch_sel.dma_rrarb2.state [2]).
Adding EN signal on $auto$ff.cc:262:slice$32139 ($_DFF_PN0_) from module dma_top (D = \ch_sel.dma_rrarb2.next_state [1], Q = \ch_sel.dma_rrarb2.state [1]).
Adding EN signal on $auto$ff.cc:262:slice$32138 ($_DFF_PN0_) from module dma_top (D = \ch_sel.dma_rrarb2.next_state [0], Q = \ch_sel.dma_rrarb2.state [0]).
Adding EN signal on $auto$ff.cc:262:slice$31921 ($_DFF_PN0_) from module dma_top (D = \ch_sel.dma_rrarb1.next_state [2], Q = \ch_sel.dma_rrarb1.state [2]).
Adding EN signal on $auto$ff.cc:262:slice$31920 ($_DFF_PN0_) from module dma_top (D = \ch_sel.dma_rrarb1.next_state [1], Q = \ch_sel.dma_rrarb1.state [1]).
Adding EN signal on $auto$ff.cc:262:slice$31919 ($_DFF_PN0_) from module dma_top (D = \ch_sel.dma_rrarb1.next_state [0], Q = \ch_sel.dma_rrarb1.state [0]).
Adding EN signal on $auto$ff.cc:262:slice$31702 ($_DFF_PN0_) from module dma_top (D = \ch_sel.dma_rrarb0.next_state [2], Q = \ch_sel.dma_rrarb0.state [2]).
Adding EN signal on $auto$ff.cc:262:slice$31701 ($_DFF_PN0_) from module dma_top (D = \ch_sel.dma_rrarb0.next_state [1], Q = \ch_sel.dma_rrarb0.state [1]).
Adding EN signal on $auto$ff.cc:262:slice$31700 ($_DFF_PN0_) from module dma_top (D = \ch_sel.dma_rrarb0.next_state [0], Q = \ch_sel.dma_rrarb0.state [0]).
Adding EN signal on $auto$ff.cc:262:slice$23344 ($_DFF_PN0_) from module dma_top (D = \ahb_mst1.mx_cmd_ns [1], Q = \ahb_mst1.mx_cmd_st [1]).
Adding EN signal on $auto$ff.cc:262:slice$23343 ($_DFF_PN0_) from module dma_top (D = \ahb_mst1.mx_cmd_ns [0], Q = \ahb_mst1.mx_cmd_st [0]).
Adding EN signal on $auto$ff.cc:262:slice$22527 ($_DFF_PN0_) from module dma_top (D = \ahb_mst0.mx_cmd_ns [1], Q = \ahb_mst0.mx_cmd_st [1]).
Adding EN signal on $auto$ff.cc:262:slice$22526 ($_DFF_PN0_) from module dma_top (D = \ahb_mst0.mx_cmd_ns [0], Q = \ahb_mst0.mx_cmd_st [0]).
Adding EN signal on $auto$ff.cc:262:slice$21421 ($_DFF_PN0_) from module dma_top (D = $auto$simplemap.cc:309:simplemap_bmux$21399 [0], Q = \de.m1_arb_st [0]).

yosys> opt_clean

3.23.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dma_top..
Removed 1 unused cells and 208 unused wires.
<suppressed ~2 debug messages>

yosys> opt_expr

3.23.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module dma_top.
<suppressed ~1448 debug messages>

3.23.16. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.23.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dma_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.23.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dma_top.
Performed a total of 0 changes.

yosys> opt_merge

3.23.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dma_top'.
<suppressed ~4725 debug messages>
Removed a total of 1575 cells.

yosys> opt_dff

3.23.20. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.23.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dma_top..
Removed 0 unused cells and 1007 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.23.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module dma_top.

3.23.23. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.23.24. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dma_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.23.25. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dma_top.
Performed a total of 0 changes.

yosys> opt_merge

3.23.26. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dma_top'.
Removed a total of 0 cells.

yosys> opt_dff

3.23.27. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.23.28. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dma_top..

yosys> opt_expr

3.23.29. Executing OPT_EXPR pass (perform const folding).
Optimizing module dma_top.

3.23.30. Finished OPT passes. (There is nothing left to do.)

yosys> opt -fast -full

3.24. Executing OPT pass (performing simple optimizations).

yosys> opt_expr -full

3.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dma_top.
<suppressed ~2151 debug messages>

yosys> opt_merge

3.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dma_top'.
<suppressed ~483 debug messages>
Removed a total of 161 cells.

yosys> opt_dff

3.24.3. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dma_top..
Removed 0 unused cells and 362 unused wires.
<suppressed ~1 debug messages>

3.24.5. Finished fast OPT passes.

yosys> memory_map

3.25. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

yosys> opt -full

3.26. Executing OPT pass (performing simple optimizations).

yosys> opt_expr -full

3.26.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dma_top.
<suppressed ~70 debug messages>

yosys> opt_merge -nomux

3.26.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dma_top'.
<suppressed ~24 debug messages>
Removed a total of 8 cells.

yosys> opt_muxtree

3.26.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dma_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce -full

3.26.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dma_top.
Performed a total of 0 changes.

yosys> opt_merge

3.26.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dma_top'.
Removed a total of 0 cells.

yosys> opt_share

3.26.6. Executing OPT_SHARE pass.
    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$23539 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$22232
        $auto$simplemap.cc:86:simplemap_bitop$22234

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$23540 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$22233
        $auto$simplemap.cc:86:simplemap_bitop$22237

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$24168 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$23116
        $auto$simplemap.cc:86:simplemap_bitop$23118

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$24169 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$23117
        $auto$simplemap.cc:86:simplemap_bitop$23121

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$30895 in front of them:
        $auto$simplemap.cc:312:simplemap_bmux$30798
        $auto$simplemap.cc:312:simplemap_bmux$30766

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$30896 in front of them:
        $auto$simplemap.cc:312:simplemap_bmux$30799
        $auto$simplemap.cc:312:simplemap_bmux$30767

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$30897 in front of them:
        $auto$simplemap.cc:312:simplemap_bmux$30800
        $auto$simplemap.cc:312:simplemap_bmux$30768

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$30898 in front of them:
        $auto$simplemap.cc:312:simplemap_bmux$30801
        $auto$simplemap.cc:312:simplemap_bmux$30769

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$30899 in front of them:
        $auto$simplemap.cc:312:simplemap_bmux$30802
        $auto$simplemap.cc:312:simplemap_bmux$30770

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$30900 in front of them:
        $auto$simplemap.cc:312:simplemap_bmux$30803
        $auto$simplemap.cc:312:simplemap_bmux$30771

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$30901 in front of them:
        $auto$simplemap.cc:312:simplemap_bmux$30804
        $auto$simplemap.cc:312:simplemap_bmux$30772

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$30902 in front of them:
        $auto$simplemap.cc:312:simplemap_bmux$30805
        $auto$simplemap.cc:312:simplemap_bmux$30773


yosys> opt_dff

3.26.7. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.26.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dma_top..
Removed 0 unused cells and 8 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr -full

3.26.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module dma_top.
<suppressed ~19 debug messages>

3.26.10. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.26.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dma_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~12 debug messages>

yosys> opt_reduce -full

3.26.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dma_top.
Performed a total of 0 changes.

yosys> opt_merge

3.26.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dma_top'.
Removed a total of 0 cells.

yosys> opt_share

3.26.14. Executing OPT_SHARE pass.

yosys> opt_dff

3.26.15. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.26.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dma_top..

yosys> opt_expr -full

3.26.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module dma_top.

3.26.18. Finished OPT passes. (There is nothing left to do.)

yosys> abc -script abc_tmp.scr

3.27. Executing ABC pass (technology mapping using ABC).

3.27.1. Extracting gate netlist of module `\dma_top' to `<abc-temp-dir>/input.blif'..
Extracted 8638 gates and 10945 wires to a netlist network with 2305 inputs and 789 outputs.

3.27.1.1. Executing ABC.
Running ABC command: /home/users/meri/Documents/workspace/clean/for_push/yosys_verific_rs/logic_synthesis-rs/abc-rs/abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + source /home/users/meri/Documents/workspace/clean/for_push/yosys_verific_rs/result_23-03-2022T14-57-36/All_lut_synth_rs_ade.json/dma/abc_tmp.scr 
ABC:   #Luts =  2682  Max Lvl =  10  Avg Lvl =   3.39  [   0.98 sec. at Pass 0]
ABC:   #Luts =  2451  Max Lvl =  11  Avg Lvl =   3.54  [  50.92 sec. at Pass 1]
ABC:   #Luts =  2428  Max Lvl =  11  Avg Lvl =   3.62  [  13.35 sec. at Pass 2]
ABC:   #Luts =  2414  Max Lvl =  11  Avg Lvl =   3.56  [  16.58 sec. at Pass 3]
ABC:   #Luts =  2411  Max Lvl =  12  Avg Lvl =   3.56  [  10.98 sec. at Pass 4]
ABC:   #Luts =  2410  Max Lvl =  10  Avg Lvl =   3.53  [  13.08 sec. at Pass 5]
ABC:   #Luts =  2398  Max Lvl =  10  Avg Lvl =   3.54  [  13.22 sec. at Pass 6]
ABC:   #Luts =  2393  Max Lvl =  11  Avg Lvl =   3.50  [  16.88 sec. at Pass 7]
ABC:   #Luts =  2382  Max Lvl =  11  Avg Lvl =   3.53  [  12.51 sec. at Pass 8]
ABC:   #Luts =  2382  Max Lvl =  11  Avg Lvl =   3.53  [  20.20 sec. at Pass 9]
ABC:   #Luts =  2382  Max Lvl =  10  Avg Lvl =   3.54  [  11.78 sec. at Pass 10]
ABC:   #Luts =  2380  Max Lvl =  11  Avg Lvl =   3.57  [  20.76 sec. at Pass 11]
ABC:   #Luts =  2379  Max Lvl =  11  Avg Lvl =   3.56  [  15.83 sec. at Pass 12]
ABC:   #Luts =  2372  Max Lvl =  10  Avg Lvl =   3.49  [  24.65 sec. at Pass 13]
ABC:   #Luts =  2371  Max Lvl =  11  Avg Lvl =   3.37  [  18.95 sec. at Pass 14]
ABC:   #Luts =  2371  Max Lvl =  11  Avg Lvl =   3.37  [  23.30 sec. at Pass 15]
ABC: + write_blif <abc-temp-dir>/output.blif 

3.27.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:     2373
ABC RESULTS:        internal signals:     7851
ABC RESULTS:           input signals:     2305
ABC RESULTS:          output signals:      789
Removing temp directory.

yosys> opt

3.28. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.28.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dma_top.

yosys> opt_merge -nomux

3.28.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dma_top'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.28.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dma_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~12 debug messages>

yosys> opt_reduce

3.28.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dma_top.
Performed a total of 0 changes.

yosys> opt_merge

3.28.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dma_top'.
Removed a total of 0 cells.

yosys> opt_dff

3.28.6. Executing OPT_DFF pass (perform DFF optimizations).
Handling never-active EN on $auto$ff.cc:262:slice$24278 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$24277 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$24276 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$24275 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$24274 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$24273 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$24272 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$24271 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$24270 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$24269 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$24268 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$24267 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$24266 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$24265 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$24264 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$24263 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$24245 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$24244 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$24243 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$24242 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$24241 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$24240 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$24239 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$24238 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$24237 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$24236 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$24235 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$24234 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$24233 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$24232 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$24231 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$24230 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$23224 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$23223 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$23222 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$23221 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$23220 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$23219 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$23218 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$23217 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$23216 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$23215 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$23214 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$23213 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$23212 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$23211 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$23210 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$23209 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$22415 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$22414 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$22413 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$22412 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$22411 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$22410 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$22409 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$22408 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$22407 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$22406 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$22405 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$22404 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$22403 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$22402 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$22401 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$22400 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling always-active async load on $auto$ff.cc:262:slice$33914 ($_DLATCH_P_) from module dma_top (changing to combinatorial circuit).
Handling always-active async load on $auto$ff.cc:262:slice$33913 ($_DLATCH_P_) from module dma_top (changing to combinatorial circuit).
Handling always-active async load on $auto$ff.cc:262:slice$33912 ($_DLATCH_P_) from module dma_top (changing to combinatorial circuit).
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$22400 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$22401 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$22402 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$22403 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$22404 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$22405 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$22406 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$22407 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$22408 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$22409 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$22410 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$22411 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$22412 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$22413 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$22414 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$22415 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$23209 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$23210 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$23211 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$23212 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$23213 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$23214 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$23215 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$23216 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$23217 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$23218 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$23219 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$23220 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$23221 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$23222 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$23223 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$23224 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$24230 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$24231 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$24232 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$24233 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$24234 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$24235 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$24236 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$24237 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$24238 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$24239 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$24240 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$24241 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$24242 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$24243 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$24244 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$24245 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$24263 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$24264 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$24265 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$24266 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$24267 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$24268 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$24269 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$24270 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$24271 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$24272 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$24273 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$24274 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$24275 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$24276 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$24277 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$24278 ($_DLATCH_N_) from module dma_top.

yosys> opt_clean

3.28.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dma_top..
Removed 437 unused cells and 6217 unused wires.
<suppressed ~1084 debug messages>

yosys> opt_expr

3.28.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module dma_top.

3.28.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.28.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dma_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~8 debug messages>

yosys> opt_reduce

3.28.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dma_top.
Performed a total of 0 changes.

yosys> opt_merge

3.28.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dma_top'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

yosys> opt_dff

3.28.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.28.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dma_top..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.28.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module dma_top.

3.28.16. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.28.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dma_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~8 debug messages>

yosys> opt_reduce

3.28.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dma_top.
Performed a total of 0 changes.

yosys> opt_merge

3.28.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dma_top'.
Removed a total of 0 cells.

yosys> opt_dff

3.28.20. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.28.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dma_top..

yosys> opt_expr

3.28.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module dma_top.

3.28.23. Finished OPT passes. (There is nothing left to do.)

yosys> stat

3.29. Printing statistics.

=== dma_top ===

   Number of wires:               3065
   Number of wire bits:          13130
   Number of public wires:        1588
   Number of public wire bits:   11653
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               3723
     $_DFFE_PN0N_                    1
     $_DFFE_PN0P_                 1597
     $_DFFE_PN1P_                   47
     $_DFF_PN0_                     46
     $_DFF_PN1_                      4
     $_DFF_P_                       20
     $lut                         2000
     $mux                            8


yosys> shregmap -minlen 8 -maxlen 20

3.30. Executing SHREGMAP pass (map shift registers).
Converted 0 dff cells into 0 shift registers.

yosys> dfflegalize -cell $_DFF_?_ 0 -cell $_DFF_???_ 0 -cell $_DFFE_????_ 0 -cell $_DFFSR_???_ 0 -cell $_DFFSRE_????_ 0 -cell $_DLATCHSR_PPP_ 0

3.31. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

yosys> stat

3.32. Printing statistics.

=== dma_top ===

   Number of wires:               3065
   Number of wire bits:          13130
   Number of public wires:        1588
   Number of public wire bits:   11653
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               3723
     $_DFFE_PN0N_                    1
     $_DFFE_PN0P_                 1597
     $_DFFE_PN1P_                   47
     $_DFF_PN0_                     46
     $_DFF_PN1_                      4
     $_DFF_P_                       20
     $lut                         2000
     $mux                            8


yosys> techmap -map +/techmap.v -map +/rapidsilicon/genesis/ffs_map.v

3.33. Executing TECHMAP pass (map to technology primitives).

3.33.1. Executing Verilog-2005 frontend: /home/users/meri/Documents/workspace/clean/for_push/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/meri/Documents/workspace/clean/for_push/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.33.2. Executing Verilog-2005 frontend: /home/users/meri/Documents/workspace/clean/for_push/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/ffs_map.v
Parsing Verilog input from `/home/users/meri/Documents/workspace/clean/for_push/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/ffs_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP0N_'.
Generating RTLIL representation for module `\$_DFFE_PN0P_'.
Generating RTLIL representation for module `\$_DFFE_PN0N_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP1N_'.
Generating RTLIL representation for module `\$_DFFE_PN1P_'.
Generating RTLIL representation for module `\$_DFFE_PN1N_'.
Generating RTLIL representation for module `\$_DFFSR_PPP_'.
Generating RTLIL representation for module `\$_DFFSR_PNP_'.
Generating RTLIL representation for module `\$_DFFSR_PNN_'.
Generating RTLIL representation for module `\$_DFFSR_PPN_'.
Generating RTLIL representation for module `\$_DFFSR_NPP_'.
Generating RTLIL representation for module `\$_DFFSR_NNP_'.
Generating RTLIL representation for module `\$_DFFSR_NNN_'.
Generating RTLIL representation for module `\$_DFFSR_NPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PNPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPNP_'.
Generating RTLIL representation for module `\$_DFFSRE_PNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PNPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PPNN_'.
Generating RTLIL representation for module `\$_DFFSRE_PNNN_'.
Generating RTLIL representation for module `\$_DLATCHSR_PPP_'.
Generating RTLIL representation for module `\$_DLATCHSR_NPP_'.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP0N_'.
Generating RTLIL representation for module `\$_DFFE_NN0P_'.
Generating RTLIL representation for module `\$_DFFE_NN0N_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_NP1N_'.
Generating RTLIL representation for module `\$_DFFE_NN1P_'.
Generating RTLIL representation for module `\$_DFFE_NN1N_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNPP_'.
Generating RTLIL representation for module `\$_DFFSRE_NPNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPN_'.
Generating RTLIL representation for module `\$_DFFSRE_NNPN_'.
Generating RTLIL representation for module `\$_DFFSRE_NPNN_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNN_'.
Generating RTLIL representation for module `\$__SHREG_DFF_P_'.
Successfully finished Verilog frontend.

3.33.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $lut.
Using template \$_DFFE_PN0P_ for cells of type $_DFFE_PN0P_.
Using extmapper simplemap for cells of type $mux.
Using template \$_DFF_PN0_ for cells of type $_DFF_PN0_.
Using template \$_DFF_P_ for cells of type $_DFF_P_.
Using template \$_DFFE_PN1P_ for cells of type $_DFFE_PN1P_.
Using template \$_DFF_PN1_ for cells of type $_DFF_PN1_.
Using template \$_DFFE_PN0N_ for cells of type $_DFFE_PN0N_.
Using extmapper simplemap for cells of type $logic_not.
No more expansions possible.
<suppressed ~3852 debug messages>

yosys> opt_expr -mux_undef

3.34. Executing OPT_EXPR pass (perform const folding).
Optimizing module dma_top.
<suppressed ~72033 debug messages>

yosys> simplemap

3.35. Executing SIMPLEMAP pass (map simple cells to gate primitives).

yosys> opt_expr

3.36. Executing OPT_EXPR pass (perform const folding).
Optimizing module dma_top.

yosys> opt_merge

3.37. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dma_top'.
<suppressed ~11196 debug messages>
Removed a total of 3732 cells.

yosys> opt_dff -nodffe -nosdff

3.38. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.39. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dma_top..
Removed 143 unused cells and 14750 unused wires.
<suppressed ~144 debug messages>

yosys> opt -nodffe -nosdff

3.40. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.40.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dma_top.
<suppressed ~1062 debug messages>

yosys> opt_merge -nomux

3.40.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dma_top'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

yosys> opt_muxtree

3.40.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dma_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.40.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dma_top.
Performed a total of 0 changes.

yosys> opt_merge

3.40.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dma_top'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.40.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.40.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dma_top..
Removed 0 unused cells and 147 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.40.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module dma_top.

3.40.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.40.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dma_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.40.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dma_top.
Performed a total of 0 changes.

yosys> opt_merge

3.40.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dma_top'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.40.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.40.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dma_top..

yosys> opt_expr

3.40.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module dma_top.

3.40.16. Finished OPT passes. (There is nothing left to do.)

yosys> abc -script abc_tmp.scr

3.41. Executing ABC pass (technology mapping using ABC).

3.41.1. Extracting gate netlist of module `\dma_top' to `<abc-temp-dir>/input.blif'..
Extracted 6733 gates and 8920 wires to a netlist network with 2185 inputs and 659 outputs.

3.41.1.1. Executing ABC.
Running ABC command: /home/users/meri/Documents/workspace/clean/for_push/yosys_verific_rs/logic_synthesis-rs/abc-rs/abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + source /home/users/meri/Documents/workspace/clean/for_push/yosys_verific_rs/result_23-03-2022T14-57-36/All_lut_synth_rs_ade.json/dma/abc_tmp.scr 
ABC:   #Luts =  1939  Max Lvl =  12  Avg Lvl =   3.64  [   0.98 sec. at Pass 0]
ABC:   #Luts =  1865  Max Lvl =  12  Avg Lvl =   3.84  [  41.75 sec. at Pass 1]
ABC:   #Luts =  1841  Max Lvl =  10  Avg Lvl =   3.48  [   6.60 sec. at Pass 2]
ABC:   #Luts =  1836  Max Lvl =  11  Avg Lvl =   3.71  [  17.19 sec. at Pass 3]
ABC:   #Luts =  1834  Max Lvl =  11  Avg Lvl =   3.52  [   9.66 sec. at Pass 4]
ABC:   #Luts =  1828  Max Lvl =  11  Avg Lvl =   3.76  [  15.08 sec. at Pass 5]
ABC:   #Luts =  1825  Max Lvl =  11  Avg Lvl =   3.73  [  11.95 sec. at Pass 6]
ABC:   #Luts =  1824  Max Lvl =  11  Avg Lvl =   3.70  [  21.10 sec. at Pass 7]
ABC:   #Luts =  1823  Max Lvl =  11  Avg Lvl =   3.68  [  12.75 sec. at Pass 8]
ABC:   #Luts =  1819  Max Lvl =  11  Avg Lvl =   3.77  [  18.41 sec. at Pass 9]
ABC:   #Luts =  1819  Max Lvl =  11  Avg Lvl =   3.77  [  10.72 sec. at Pass 10]
ABC:   #Luts =  1819  Max Lvl =  11  Avg Lvl =   3.77  [  18.49 sec. at Pass 11]
ABC: + write_blif <abc-temp-dir>/output.blif 

3.41.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:     1822
ABC RESULTS:        internal signals:     6076
ABC RESULTS:           input signals:     2185
ABC RESULTS:          output signals:      659
Removing temp directory.

yosys> opt

3.42. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.42.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dma_top.

yosys> opt_merge -nomux

3.42.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dma_top'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.42.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dma_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.42.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dma_top.
Performed a total of 0 changes.

yosys> opt_merge

3.42.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dma_top'.
Removed a total of 0 cells.

yosys> opt_dff

3.42.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.42.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dma_top..
Removed 0 unused cells and 7751 unused wires.
<suppressed ~3 debug messages>

yosys> opt_expr

3.42.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module dma_top.

3.42.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.42.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dma_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.42.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dma_top.
Performed a total of 0 changes.

yosys> opt_merge

3.42.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dma_top'.
Removed a total of 0 cells.

yosys> opt_dff

3.42.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.42.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dma_top..

yosys> opt_expr

3.42.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module dma_top.

3.42.16. Finished OPT passes. (There is nothing left to do.)

yosys> hierarchy -check

3.43. Executing HIERARCHY pass (managing design hierarchy).

3.43.1. Analyzing design hierarchy..
Top module:  \dma_top

3.43.2. Analyzing design hierarchy..
Top module:  \dma_top
Removed 0 unused modules.

yosys> stat

3.44. Printing statistics.

=== dma_top ===

   Number of wires:               2919
   Number of wire bits:          12977
   Number of public wires:        1586
   Number of public wire bits:   11644
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               3537
     $lut                         1822
     dff                            20
     dffsre                       1695


yosys> opt_clean -purge

3.45. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dma_top..
Removed 0 unused cells and 976 unused wires.
<suppressed ~976 debug messages>

yosys> write_verilog -noattr -nohex dma_top.verilog

3.46. Executing Verilog backend.

yosys> bmuxmap

3.46.1. Executing BMUXMAP pass.

yosys> demuxmap

3.46.2. Executing DEMUXMAP pass.

yosys> clean_zerowidth
Dumping module `\dma_top'.

Warnings: 17 unique messages, 32 total
End of script. Logfile hash: 8323d78871, CPU: user 97.78s system 0.72s, MEM: 204.05 MB peak
Yosys 0.14+36 (git sha1 4cd3e3b51, gcc 7.1.0 -fPIC -Os)
Time spent: 96% 2x abc (2491 sec), 1% 29x opt_dff (42 sec), ...
real 682.66
user 2407.61
sys 181.29
