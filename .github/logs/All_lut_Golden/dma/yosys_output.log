
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.14+36 (git sha1 15a4e900b, gcc 7.1.0 -fPIC -Os)


-- Executing script file `yosys.ys' --
echo on

yosys> plugin -i synth-rs

yosys> read -verific

yosys> read -incdir .

yosys> verific -vlog-incdir .

1. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Jan22_SW_Release, released at Sat Jan 29 02:42:49 2022.

yosys> verilog_defaults -add -I.

yosys> read -vlog2k DMA_DEFINE.vh DMA_FIX_DEFINE.vh dma_ahbdec.v dma_ahbmst.v dma_ahbmux.v dma_ahbslv.v dma_chrf.v dma_chsel.v dma_ctlrf.v dma_engine.v dma_fifo.v dma_rrarb.v dma_top.v

yosys> verific -vlog2k DMA_DEFINE.vh DMA_FIX_DEFINE.vh dma_ahbdec.v dma_ahbmst.v dma_ahbmux.v dma_ahbslv.v dma_chrf.v dma_chsel.v dma_ctlrf.v dma_engine.v dma_fifo.v dma_rrarb.v dma_top.v

2. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Jan22_SW_Release, released at Sat Jan 29 02:42:49 2022.
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'DMA_DEFINE.vh'
VERIFIC-INFO [VERI-1328] DMA_DEFINE.vh:90: analyzing included file 'DMA_FIX_DEFINE.vh'
VERIFIC-INFO [VERI-2320] DMA_DEFINE.vh:90: back to file 'DMA_DEFINE.vh'
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'DMA_FIX_DEFINE.vh'
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'dma_ahbdec.v'
VERIFIC-INFO [VERI-1328] dma_ahbdec.v:38: analyzing included file 'DMA_DEFINE.vh'
VERIFIC-INFO [VERI-1328] DMA_DEFINE.vh:90: analyzing included file 'DMA_FIX_DEFINE.vh'
VERIFIC-INFO [VERI-2320] DMA_DEFINE.vh:90: back to file 'DMA_DEFINE.vh'
VERIFIC-INFO [VERI-2320] dma_ahbdec.v:38: back to file 'dma_ahbdec.v'
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'dma_ahbmst.v'
VERIFIC-INFO [VERI-1328] dma_ahbmst.v:39: analyzing included file 'DMA_DEFINE.vh'
VERIFIC-INFO [VERI-1328] DMA_DEFINE.vh:90: analyzing included file 'DMA_FIX_DEFINE.vh'
VERIFIC-INFO [VERI-2320] DMA_DEFINE.vh:90: back to file 'DMA_DEFINE.vh'
VERIFIC-INFO [VERI-2320] dma_ahbmst.v:39: back to file 'dma_ahbmst.v'
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'dma_ahbmux.v'
VERIFIC-INFO [VERI-1328] dma_ahbmux.v:39: analyzing included file 'DMA_DEFINE.vh'
VERIFIC-INFO [VERI-1328] DMA_DEFINE.vh:90: analyzing included file 'DMA_FIX_DEFINE.vh'
VERIFIC-INFO [VERI-2320] DMA_DEFINE.vh:90: back to file 'DMA_DEFINE.vh'
VERIFIC-INFO [VERI-2320] dma_ahbmux.v:39: back to file 'dma_ahbmux.v'
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'dma_ahbslv.v'
VERIFIC-INFO [VERI-1328] dma_ahbslv.v:40: analyzing included file 'DMA_DEFINE.vh'
VERIFIC-INFO [VERI-1328] DMA_DEFINE.vh:90: analyzing included file 'DMA_FIX_DEFINE.vh'
VERIFIC-INFO [VERI-2320] DMA_DEFINE.vh:90: back to file 'DMA_DEFINE.vh'
VERIFIC-INFO [VERI-2320] dma_ahbslv.v:40: back to file 'dma_ahbslv.v'
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'dma_chrf.v'
VERIFIC-INFO [VERI-1328] dma_chrf.v:39: analyzing included file 'DMA_DEFINE.vh'
VERIFIC-INFO [VERI-1328] DMA_DEFINE.vh:90: analyzing included file 'DMA_FIX_DEFINE.vh'
VERIFIC-INFO [VERI-2320] DMA_DEFINE.vh:90: back to file 'DMA_DEFINE.vh'
VERIFIC-INFO [VERI-2320] dma_chrf.v:39: back to file 'dma_chrf.v'
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'dma_chsel.v'
VERIFIC-INFO [VERI-1328] dma_chsel.v:41: analyzing included file 'DMA_DEFINE.vh'
VERIFIC-INFO [VERI-1328] DMA_DEFINE.vh:90: analyzing included file 'DMA_FIX_DEFINE.vh'
VERIFIC-INFO [VERI-2320] DMA_DEFINE.vh:90: back to file 'DMA_DEFINE.vh'
VERIFIC-INFO [VERI-2320] dma_chsel.v:41: back to file 'dma_chsel.v'
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'dma_ctlrf.v'
VERIFIC-INFO [VERI-1328] dma_ctlrf.v:41: analyzing included file 'DMA_DEFINE.vh'
VERIFIC-INFO [VERI-1328] DMA_DEFINE.vh:90: analyzing included file 'DMA_FIX_DEFINE.vh'
VERIFIC-INFO [VERI-2320] DMA_DEFINE.vh:90: back to file 'DMA_DEFINE.vh'
VERIFIC-INFO [VERI-2320] dma_ctlrf.v:41: back to file 'dma_ctlrf.v'
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'dma_engine.v'
VERIFIC-INFO [VERI-1328] dma_engine.v:39: analyzing included file 'DMA_DEFINE.vh'
VERIFIC-INFO [VERI-1328] DMA_DEFINE.vh:90: analyzing included file 'DMA_FIX_DEFINE.vh'
VERIFIC-INFO [VERI-2320] DMA_DEFINE.vh:90: back to file 'DMA_DEFINE.vh'
VERIFIC-INFO [VERI-2320] dma_engine.v:39: back to file 'dma_engine.v'
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'dma_fifo.v'
VERIFIC-INFO [VERI-1328] dma_fifo.v:44: analyzing included file 'DMA_DEFINE.vh'
VERIFIC-INFO [VERI-1328] DMA_DEFINE.vh:90: analyzing included file 'DMA_FIX_DEFINE.vh'
VERIFIC-INFO [VERI-2320] DMA_DEFINE.vh:90: back to file 'DMA_DEFINE.vh'
VERIFIC-INFO [VERI-2320] dma_fifo.v:44: back to file 'dma_fifo.v'
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'dma_rrarb.v'
VERIFIC-INFO [VERI-1328] dma_rrarb.v:40: analyzing included file 'DMA_DEFINE.vh'
VERIFIC-INFO [VERI-1328] DMA_DEFINE.vh:90: analyzing included file 'DMA_FIX_DEFINE.vh'
VERIFIC-INFO [VERI-2320] DMA_DEFINE.vh:90: back to file 'DMA_DEFINE.vh'
VERIFIC-INFO [VERI-2320] dma_rrarb.v:40: back to file 'dma_rrarb.v'
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'dma_top.v'
VERIFIC-INFO [VERI-1328] dma_top.v:38: analyzing included file 'DMA_DEFINE.vh'
VERIFIC-INFO [VERI-1328] DMA_DEFINE.vh:90: analyzing included file 'DMA_FIX_DEFINE.vh'
VERIFIC-INFO [VERI-2320] DMA_DEFINE.vh:90: back to file 'DMA_DEFINE.vh'
VERIFIC-INFO [VERI-2320] dma_top.v:38: back to file 'dma_top.v'
VERIFIC-INFO [VERI-2561] dma_top.v:689: undeclared symbol 'de_err_notify', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:691: undeclared symbol 'st_llp0t3', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:693: undeclared symbol 'dst_m', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:694: undeclared symbol 'src_m', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:695: undeclared symbol 'dst_a', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:696: undeclared symbol 'src_a', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:697: undeclared symbol 'dst_e', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:698: undeclared symbol 'src_e', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:699: undeclared symbol 'dst_wid_wd', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:700: undeclared symbol 'src_wid_wd', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:701: undeclared symbol 'dst_wid_hw', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:702: undeclared symbol 'src_wid_hw', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:703: undeclared symbol 'dst_wid_bt', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:704: undeclared symbol 'src_wid_bt', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:706: undeclared symbol 'bst_eq0', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:707: undeclared symbol 'bst_eq1', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:708: undeclared symbol 'bst_eq2', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:709: undeclared symbol 'tsz_eq0', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:710: undeclared symbol 'tsz_eq1', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:711: undeclared symbol 'tsz_eq2', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:712: undeclared symbol 'cv8t32', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:713: undeclared symbol 'cv8t16', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:714: undeclared symbol 'cv16t32', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:715: undeclared symbol 'cvtp2', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:716: undeclared symbol 'pack_en', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:717: undeclared symbol 'pack_end', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:718: undeclared symbol 'unpack_en', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:719: undeclared symbol 'upk_cnteq0', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:720: undeclared symbol 'upk_cnteq1', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:732: undeclared symbol 'm0_cp', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:733: undeclared symbol 'm0_tr_sq', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:734: undeclared symbol 'm0_rp_err', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:736: undeclared symbol 'm0_rp_rty', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:740: undeclared symbol 'm0_dma_err_ok', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:743: undeclared symbol 'm0_is_dst', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:744: undeclared symbol 'm0_is_src', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:746: undeclared symbol 'm0_is_llp', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:748: undeclared symbol 'm0_arb_src', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:749: undeclared symbol 'm0_arb_dst', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:762: undeclared symbol 'm1_cp', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:763: undeclared symbol 'm1_tr_sq', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:764: undeclared symbol 'm1_rp_err', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:765: undeclared symbol 'm1_rp_rty', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:768: undeclared symbol 'm1_dtp', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:769: undeclared symbol 'm1_dma_had_a_rty', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:771: undeclared symbol 'm1_dma_err_ok', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:774: undeclared symbol 'm1_is_dst', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:775: undeclared symbol 'm1_is_src', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:777: undeclared symbol 'm1_is_llp', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:779: undeclared symbol 'm1_arb_src', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:780: undeclared symbol 'm1_arb_dst', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:783: undeclared symbol 'm1_src2br', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:785: undeclared symbol 'm0_m1_same', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:794: undeclared symbol 'm1_arb_br', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:798: undeclared symbol 'slv_br_req', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:801: undeclared symbol 'slv_brst_cmd', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:802: undeclared symbol 'slv_brst_mscd', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:805: undeclared symbol 'br_req_qf', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:811: undeclared symbol 'ff_eq1', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:812: undeclared symbol 'ff_eq2', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:813: undeclared symbol 'ff_2ltfl', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:814: undeclared symbol 'ff_1ltfl', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:815: undeclared symbol 'ff_part_wd', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:819: undeclared symbol 'ff_wr', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:822: undeclared symbol 'de_ff_push', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:823: undeclared symbol 'de_ff_pop', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:824: undeclared symbol 'de_ff_ahead', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:825: undeclared symbol 'de_ff_flush', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:826: undeclared symbol 'de_ff_clear', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:827: undeclared symbol 'de_ff_ini', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:833: undeclared symbol 'arb_req', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:840: undeclared symbol 'arb_chllpen', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:844: undeclared symbol 'de_ack', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:845: undeclared symbol 'de_tc_st', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:849: undeclared symbol 'rf_cherr', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:850: undeclared symbol 'arb_chabt', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:852: undeclared symbol 'arb_abt_any', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:863: undeclared symbol 'de_llpen', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:865: undeclared symbol 'de_busy', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:866: undeclared symbol 'de_sad_we', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:867: undeclared symbol 'de_dad_we', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:868: undeclared symbol 'de_tsz_we', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:870: undeclared symbol 'de_llp_we', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:871: undeclared symbol 'de_csr_we', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:872: undeclared symbol 'de_llpen_we', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:874: undeclared symbol 'de_en_clr', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:876: undeclared symbol 'de_abt_on_idle', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:877: undeclared symbol 'de_err_st', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:903: undeclared symbol 'slv_wr_d1', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:936: undeclared symbol 'ff_geth', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:938: undeclared symbol 'ff_q_full', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:939: undeclared symbol 'ff_empty', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:1152: undeclared symbol 'h1req', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:1223: undeclared symbol 'slv_rf_req', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:1288: undeclared symbol 'c0llpen', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:1290: undeclared symbol 'c0abt', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:1310: undeclared symbol 'c1llpen', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:1312: undeclared symbol 'c1abt', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:1333: undeclared symbol 'c2llpen', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:1336: undeclared symbol 'c2abt', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:1358: undeclared symbol 'c3llpen', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:1361: undeclared symbol 'c3abt', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:1383: undeclared symbol 'c4llpen', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:1386: undeclared symbol 'c4abt', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:1408: undeclared symbol 'c5llpen', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:1411: undeclared symbol 'c5abt', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:1433: undeclared symbol 'c6llpen', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:1436: undeclared symbol 'c6abt', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:1458: undeclared symbol 'c7llpen', assumed default net type 'wire'
VERIFIC-INFO [VERI-2561] dma_top.v:1461: undeclared symbol 'c7abt', assumed default net type 'wire'

yosys> synth_rs -top dma_top -tech generic -goal area -no_dsp -no_bram -verilog dma_top.verilog

3. Executing synth_rs pass.

yosys> hierarchy -check -top dma_top

3.1. Executing HIERARCHY pass (managing design hierarchy).
VERIFIC-INFO [VERI-1018] dma_top.v:40: compiling module 'dma_top'
VERIFIC-INFO [VERI-1018] dma_engine.v:41: compiling module 'dma_engine'
VERIFIC-WARNING [VERI-1209] dma_engine.v:1379: expression size 32 truncated to fit in target size 12
VERIFIC-WARNING [VERI-1209] dma_engine.v:1522: expression size 32 truncated to fit in target size 9
VERIFIC-WARNING [VERI-1209] dma_engine.v:1630: expression size 32 truncated to fit in target size 2
VERIFIC-INFO [VERI-1018] dma_ahbmst.v:41: compiling module 'dma_ahbmst(THIS_IS_M1=0)'
VERIFIC-WARNING [VERI-1209] dma_ahbmst.v:414: expression size 32 truncated to fit in target size 1
VERIFIC-WARNING [VERI-1209] dma_ahbmst.v:464: expression size 32 truncated to fit in target size 1
VERIFIC-WARNING [VERI-1209] dma_ahbmst.v:519: expression size 32 truncated to fit in target size 1
VERIFIC-WARNING [VERI-1209] dma_ahbmst.v:635: expression size 32 truncated to fit in target size 1
VERIFIC-WARNING [VERI-1209] dma_ahbmst.v:660: expression size 32 truncated to fit in target size 1
VERIFIC-WARNING [VERI-1209] dma_ahbmst.v:799: expression size 32 truncated to fit in target size 1
VERIFIC-WARNING [VERI-1209] dma_ahbmst.v:1096: expression size 17 truncated to fit in target size 16
VERIFIC-WARNING [VERI-1209] dma_ahbmst.v:1097: expression size 32 truncated to fit in target size 16
VERIFIC-INFO [VERI-1018] dma_ahbmst.v:41: compiling module 'dma_ahbmst'
VERIFIC-WARNING [VERI-1209] dma_ahbmst.v:414: expression size 32 truncated to fit in target size 1
VERIFIC-WARNING [VERI-1209] dma_ahbmst.v:464: expression size 32 truncated to fit in target size 1
VERIFIC-WARNING [VERI-1209] dma_ahbmst.v:519: expression size 32 truncated to fit in target size 1
VERIFIC-WARNING [VERI-1209] dma_ahbmst.v:635: expression size 32 truncated to fit in target size 1
VERIFIC-WARNING [VERI-1209] dma_ahbmst.v:660: expression size 32 truncated to fit in target size 1
VERIFIC-WARNING [VERI-1209] dma_ahbmst.v:799: expression size 32 truncated to fit in target size 1
VERIFIC-WARNING [VERI-1209] dma_ahbmst.v:1096: expression size 17 truncated to fit in target size 16
VERIFIC-WARNING [VERI-1209] dma_ahbmst.v:1097: expression size 32 truncated to fit in target size 16
VERIFIC-INFO [VERI-1018] dma_fifo.v:48: compiling module 'dma_fifo'
VERIFIC-WARNING [VERI-1209] dma_fifo.v:419: expression size 4 truncated to fit in target size 3
VERIFIC-WARNING [VERI-1209] dma_fifo.v:427: expression size 4 truncated to fit in target size 3
VERIFIC-WARNING [VERI-1209] dma_fifo.v:438: expression size 5 truncated to fit in target size 4
VERIFIC-WARNING [VERI-1209] dma_fifo.v:440: expression size 32 truncated to fit in target size 4
VERIFIC-INFO [VERI-1018] dma_fifo.v:458: compiling module 'ff_ram'
VERIFIC-INFO [VERI-2571] dma_fifo.v:479: extracting RAM for identifier 'ram_dt'
VERIFIC-INFO [VERI-1018] dma_ctlrf.v:43: compiling module 'dma_ctlrf'
VERIFIC-INFO [VERI-1018] dma_chrf.v:41: compiling module 'dma_chrf'
VERIFIC-WARNING [VERI-1209] dma_chrf.v:279: expression size 5 truncated to fit in target size 4
VERIFIC-INFO [VERI-1018] dma_chrf.v:41: compiling module 'dma_chrf(CH_NO=1)'
VERIFIC-WARNING [VERI-1209] dma_chrf.v:279: expression size 5 truncated to fit in target size 4
VERIFIC-INFO [VERI-1018] dma_chrf.v:41: compiling module 'dma_chrf(CH_NO=2)'
VERIFIC-WARNING [VERI-1209] dma_chrf.v:279: expression size 5 truncated to fit in target size 4
VERIFIC-INFO [VERI-1018] dma_chrf.v:41: compiling module 'dma_chrf(CH_NO=3)'
VERIFIC-WARNING [VERI-1209] dma_chrf.v:279: expression size 5 truncated to fit in target size 4
VERIFIC-INFO [VERI-1018] dma_chrf.v:41: compiling module 'dma_chrf(CH_NO=4)'
VERIFIC-WARNING [VERI-1209] dma_chrf.v:279: expression size 5 truncated to fit in target size 4
VERIFIC-INFO [VERI-1018] dma_chrf.v:41: compiling module 'dma_chrf(CH_NO=5)'
VERIFIC-WARNING [VERI-1209] dma_chrf.v:279: expression size 5 truncated to fit in target size 4
VERIFIC-INFO [VERI-1018] dma_chrf.v:41: compiling module 'dma_chrf(CH_NO=6)'
VERIFIC-WARNING [VERI-1209] dma_chrf.v:279: expression size 5 truncated to fit in target size 4
VERIFIC-INFO [VERI-1018] dma_chrf.v:41: compiling module 'dma_chrf(CH_NO=7)'
VERIFIC-WARNING [VERI-1209] dma_chrf.v:279: expression size 5 truncated to fit in target size 4
VERIFIC-INFO [VERI-1018] dma_chsel.v:43: compiling module 'dma_chsel'
VERIFIC-WARNING [VERI-2580] dma_chsel.v:858: latch inferred for net 'arb_ch_sel[2]'
VERIFIC-INFO [VERI-1018] dma_rrarb.v:42: compiling module 'dma_rrarb'
VERIFIC-INFO [VERI-1018] dma_ahbslv.v:42: compiling module 'dma_ahbslv'
VERIFIC-INFO [VERI-1018] dma_ahbdec.v:43: compiling module 'dma_ahbdec'
VERIFIC-INFO [VERI-1018] dma_ahbmux.v:44: compiling module 'dma_ahbmux'
Importing module dma_top.
Importing module dma_engine.
Importing module dma_ahbmst(THIS_IS_M1=0).
Importing module dma_ahbmst.
Importing module dma_fifo.
Importing module ff_ram.
Importing module dma_ctlrf.
Importing module dma_chsel.
Importing module dma_chrf.
Importing module dma_chrf(CH_NO=1).
Importing module dma_chrf(CH_NO=2).
Importing module dma_chrf(CH_NO=3).
Importing module dma_chrf(CH_NO=4).
Importing module dma_chrf(CH_NO=5).
Importing module dma_chrf(CH_NO=6).
Importing module dma_chrf(CH_NO=7).
Importing module dma_rrarb.
Importing module dma_ahbslv.
Importing module dma_ahbmux.
Importing module dma_ahbdec.

3.1.1. Analyzing design hierarchy..
Top module:  \dma_top
Used module:     \dma_ahbmux
Used module:     \dma_ahbdec
Used module:     \dma_ahbslv
Used module:     \dma_chsel
Used module:         \dma_rrarb
Used module:     \dma_ctlrf
Used module:         \dma_chrf(CH_NO=7)
Used module:         \dma_chrf(CH_NO=6)
Used module:         \dma_chrf(CH_NO=5)
Used module:         \dma_chrf(CH_NO=4)
Used module:         \dma_chrf(CH_NO=3)
Used module:         \dma_chrf(CH_NO=2)
Used module:         \dma_chrf(CH_NO=1)
Used module:         \dma_chrf
Used module:     \dma_fifo
Used module:         \ff_ram
Used module:     \dma_ahbmst
Used module:     \dma_ahbmst(THIS_IS_M1=0)
Used module:     \dma_engine

3.1.2. Analyzing design hierarchy..
Top module:  \dma_top
Used module:     \dma_ahbmux
Used module:     \dma_ahbdec
Used module:     \dma_ahbslv
Used module:     \dma_chsel
Used module:         \dma_rrarb
Used module:     \dma_ctlrf
Used module:         \dma_chrf(CH_NO=7)
Used module:         \dma_chrf(CH_NO=6)
Used module:         \dma_chrf(CH_NO=5)
Used module:         \dma_chrf(CH_NO=4)
Used module:         \dma_chrf(CH_NO=3)
Used module:         \dma_chrf(CH_NO=2)
Used module:         \dma_chrf(CH_NO=1)
Used module:         \dma_chrf
Used module:     \dma_fifo
Used module:         \ff_ram
Used module:     \dma_ahbmst
Used module:     \dma_ahbmst(THIS_IS_M1=0)
Used module:     \dma_engine
Removed 0 unused modules.

yosys> proc

3.2. Executing PROC pass (convert processes to netlists).

yosys> proc_clean

3.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> proc_rmdead

3.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

yosys> proc_prune

3.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

yosys> proc_init

3.2.4. Executing PROC_INIT pass (extract init attributes).

yosys> proc_arst

3.2.5. Executing PROC_ARST pass (detect async resets in processes).

yosys> proc_mux

3.2.6. Executing PROC_MUX pass (convert decision trees to multiplexers).

yosys> proc_dlatch

3.2.7. Executing PROC_DLATCH pass (convert process syncs to latches).

yosys> proc_dff

3.2.8. Executing PROC_DFF pass (convert process syncs to FFs).

yosys> proc_memwr

3.2.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

yosys> proc_clean

3.2.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> opt_expr -keepdc

3.2.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module dma_ahbdec.
<suppressed ~16 debug messages>
Optimizing module dma_ahbmux.
<suppressed ~7 debug messages>
Optimizing module dma_ahbslv.
<suppressed ~20 debug messages>
Optimizing module dma_rrarb.
<suppressed ~2 debug messages>
Optimizing module dma_chrf(CH_NO=7).
<suppressed ~34 debug messages>
Optimizing module dma_chrf(CH_NO=6).
<suppressed ~34 debug messages>
Optimizing module dma_chrf(CH_NO=5).
<suppressed ~34 debug messages>
Optimizing module dma_chrf(CH_NO=4).
<suppressed ~34 debug messages>
Optimizing module dma_chrf(CH_NO=3).
<suppressed ~34 debug messages>
Optimizing module dma_chrf(CH_NO=2).
<suppressed ~34 debug messages>
Optimizing module dma_chrf(CH_NO=1).
<suppressed ~34 debug messages>
Optimizing module dma_chrf.
<suppressed ~35 debug messages>
Optimizing module dma_chsel.
<suppressed ~30 debug messages>
Optimizing module dma_ctlrf.
<suppressed ~32 debug messages>
Optimizing module ff_ram.
Optimizing module dma_fifo.
<suppressed ~16 debug messages>
Optimizing module dma_ahbmst.
<suppressed ~23 debug messages>
Optimizing module dma_ahbmst(THIS_IS_M1=0).
<suppressed ~23 debug messages>
Optimizing module dma_engine.
<suppressed ~27 debug messages>
Optimizing module dma_top.

yosys> flatten

3.3. Executing FLATTEN pass (flatten design).
Deleting now unused module dma_ahbdec.
Deleting now unused module dma_ahbmux.
Deleting now unused module dma_ahbslv.
Deleting now unused module dma_rrarb.
Deleting now unused module dma_chrf(CH_NO=7).
Deleting now unused module dma_chrf(CH_NO=6).
Deleting now unused module dma_chrf(CH_NO=5).
Deleting now unused module dma_chrf(CH_NO=4).
Deleting now unused module dma_chrf(CH_NO=3).
Deleting now unused module dma_chrf(CH_NO=2).
Deleting now unused module dma_chrf(CH_NO=1).
Deleting now unused module dma_chrf.
Deleting now unused module dma_chsel.
Deleting now unused module dma_ctlrf.
Deleting now unused module ff_ram.
Deleting now unused module dma_fifo.
Deleting now unused module dma_ahbmst.
Deleting now unused module dma_ahbmst(THIS_IS_M1=0).
Deleting now unused module dma_engine.
<suppressed ~22 debug messages>

yosys> tribuf -logic

3.4. Executing TRIBUF pass.

yosys> opt_expr

3.5. Executing OPT_EXPR pass (perform const folding).
Optimizing module dma_top.
<suppressed ~4 debug messages>

yosys> opt_clean

3.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dma_top..
Removed 67 unused cells and 11627 unused wires.
<suppressed ~1666 debug messages>

yosys> check

3.7. Executing CHECK pass (checking for obvious problems).
Checking module dma_top...
Found and reported 0 problems.

yosys> deminout

3.8. Executing DEMINOUT pass (demote inout ports to input or output).

yosys> opt -nodffe -nosdff

3.9. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.9.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dma_top.
<suppressed ~17 debug messages>

yosys> opt_merge -nomux

3.9.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dma_top'.
<suppressed ~282 debug messages>
Removed a total of 94 cells.

yosys> opt_muxtree

3.9.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dma_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port B of cell $flatten\de.$verific$i150$dma_engine.v:858$7008: \de.st_ed1s -> 1'1
      Replacing known input bits on port B of cell $flatten\m1_mux.$verific$i65$dma_ahbmux.v:359$18413: \m1_mux.hrdy_df -> 1'1
  Analyzing evaluation results.
    dead port 5/7 on $pmux $flatten\ahb_mst0.$verific$select_342$dma_ahbmst.v:978$7990.
Removed 1 multiplexer ports.
<suppressed ~522 debug messages>

yosys> opt_reduce

3.9.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dma_top.
    New input vector for $reduce_or cell $flatten\ahb_mst0.$verific$reduce_nor_341$dma_ahbmst.v:978$7988: { $flatten\ahb_mst0.$verific$n2949$7551 $flatten\ahb_mst0.$verific$n2951$7553 $flatten\ahb_mst0.$verific$n2952$7554 \ahb_mst0.mx_cmd_st [1] }
    New input vector for $reduce_or cell $flatten\ahb_mst0.$verific$reduce_nor_339$dma_ahbmst.v:975$7984: { \ahb_mst0.ad_sel_llp $flatten\ahb_mst0.$verific$n2950$7552 \ahb_mst0.mx_cmd_st [1] }
    New input vector for $reduce_or cell $flatten\ahb_mst0.$verific$reduce_nor_337$dma_ahbmst.v:972$7980: { $flatten\ahb_mst0.$verific$n2948$7550 \ahb_mst0.mx_cmd_st [1] }
    New ctrl vector for $pmux cell $flatten\ahb_mst0.$verific$select_400$dma_ahbmst.v:1033$8038: { $flatten\ahb_mst0.$verific$n3165$7584 $flatten\ahb_mst0.$verific$n3166$7585 $flatten\ahb_mst0.$verific$n3167$7586 $flatten\ahb_mst0.$verific$n3168$7587 $flatten\ahb_mst0.$verific$n3169$7588 $flatten\ahb_mst0.$verific$n3170$7589 }
    New ctrl vector for $pmux cell $flatten\ahb_mst1.$verific$select_418$dma_ahbmst.v:1033$8776: { $flatten\ahb_mst1.$verific$n3603$8283 $flatten\ahb_mst1.$verific$n3604$8284 $flatten\ahb_mst1.$verific$n3605$8285 $flatten\ahb_mst1.$verific$n3606$8286 $flatten\ahb_mst1.$verific$n3607$8287 $flatten\ahb_mst1.$verific$n3608$8288 }
    New ctrl vector for $pmux cell $flatten\ch_sel.$verific$Select_268$dma_chsel.v:858$13981: $auto$opt_reduce.cc:134:opt_pmux$18825
    New ctrl vector for $pmux cell $flatten\de.$verific$select_221$dma_engine.v:1010$7069: { $flatten\de.$verific$n621$6610 $flatten\de.$verific$n622$6611 $flatten\de.$verific$n623$6612 $flatten\de.$verific$n624$6613 $flatten\de.$verific$n625$6614 $flatten\de.$verific$n627$6616 $flatten\de.$verific$n628$6617 $flatten\de.$verific$n629$6618 $flatten\de.$verific$n630$6619 $flatten\de.$verific$n631$6620 $auto$opt_reduce.cc:134:opt_pmux$18827 }
    New ctrl vector for $pmux cell $flatten\de.$verific$select_634$dma_engine.v:1602$7373: { $flatten\de.$verific$n1730$6783 $flatten\de.$verific$n1731$6784 }
    New ctrl vector for $pmux cell $flatten\m1_decoder.$verific$select_14$dma_ahbdec.v:215$18611: { $flatten\m1_decoder.$verific$n15$18454 $flatten\m1_decoder.$verific$n16$18455 $flatten\m1_decoder.$verific$n17$18456 $flatten\m1_decoder.$verific$n18$18457 }
    New ctrl vector for $pmux cell $flatten\m1_decoder.$verific$select_20$dma_ahbdec.v:226$18619: { $flatten\m1_decoder.$verific$n25$18459 $flatten\m1_decoder.$verific$n26$18460 $flatten\m1_decoder.$verific$n27$18461 $flatten\m1_decoder.$verific$n28$18462 }
    New ctrl vector for $pmux cell $flatten\m1_decoder.$verific$select_26$dma_ahbdec.v:237$18627: { $flatten\m1_decoder.$verific$n35$18464 $flatten\m1_decoder.$verific$n36$18465 $flatten\m1_decoder.$verific$n37$18466 $flatten\m1_decoder.$verific$n38$18467 }
    New ctrl vector for $pmux cell $flatten\m1_decoder.$verific$select_32$dma_ahbdec.v:248$18635: { $flatten\m1_decoder.$verific$n45$18469 $flatten\m1_decoder.$verific$n46$18470 $flatten\m1_decoder.$verific$n47$18471 $flatten\m1_decoder.$verific$n48$18472 }
    New ctrl vector for $pmux cell $flatten\m1_decoder.$verific$select_38$dma_ahbdec.v:259$18643: { $flatten\m1_decoder.$verific$n55$18474 $flatten\m1_decoder.$verific$n56$18475 $flatten\m1_decoder.$verific$n57$18476 $flatten\m1_decoder.$verific$n58$18477 }
    New ctrl vector for $pmux cell $flatten\m1_decoder.$verific$select_44$dma_ahbdec.v:270$18651: { $flatten\m1_decoder.$verific$n65$18479 $flatten\m1_decoder.$verific$n66$18480 $flatten\m1_decoder.$verific$n67$18481 $flatten\m1_decoder.$verific$n68$18482 }
    New ctrl vector for $pmux cell $flatten\m1_decoder.$verific$select_50$dma_ahbdec.v:281$18659: { $flatten\m1_decoder.$verific$n75$18484 $flatten\m1_decoder.$verific$n76$18485 $flatten\m1_decoder.$verific$n77$18486 $flatten\m1_decoder.$verific$n78$18487 }
    New ctrl vector for $pmux cell $flatten\m1_decoder.$verific$select_56$dma_ahbdec.v:292$18667: { $flatten\m1_decoder.$verific$n85$18489 $flatten\m1_decoder.$verific$n86$18490 $flatten\m1_decoder.$verific$n87$18491 $flatten\m1_decoder.$verific$n88$18492 }
    New ctrl vector for $pmux cell $flatten\m1_decoder.$verific$select_62$dma_ahbdec.v:302$18675: { $flatten\m1_decoder.$verific$n95$18494 $flatten\m1_decoder.$verific$n96$18495 $flatten\m1_decoder.$verific$n97$18496 $flatten\m1_decoder.$verific$n98$18497 }
    New ctrl vector for $pmux cell $flatten\m1_decoder.$verific$select_68$dma_ahbdec.v:313$18683: { $flatten\m1_decoder.$verific$n105$18499 $flatten\m1_decoder.$verific$n106$18500 $flatten\m1_decoder.$verific$n107$18501 $flatten\m1_decoder.$verific$n108$18502 }
    New ctrl vector for $pmux cell $flatten\m1_decoder.$verific$select_74$dma_ahbdec.v:324$18691: { $flatten\m1_decoder.$verific$n115$18504 $flatten\m1_decoder.$verific$n116$18505 $flatten\m1_decoder.$verific$n117$18506 $flatten\m1_decoder.$verific$n118$18507 }
    New ctrl vector for $pmux cell $flatten\m1_decoder.$verific$select_8$dma_ahbdec.v:205$18603: { $flatten\m1_decoder.$verific$n5$18449 $flatten\m1_decoder.$verific$n6$18450 $flatten\m1_decoder.$verific$n7$18451 $flatten\m1_decoder.$verific$n8$18452 }
    New ctrl vector for $pmux cell $flatten\m1_decoder.$verific$select_80$dma_ahbdec.v:335$18699: { $flatten\m1_decoder.$verific$n125$18509 $flatten\m1_decoder.$verific$n126$18510 $flatten\m1_decoder.$verific$n127$18511 $flatten\m1_decoder.$verific$n128$18512 }
    New ctrl vector for $pmux cell $flatten\m1_decoder.$verific$select_86$dma_ahbdec.v:346$18707: { $flatten\m1_decoder.$verific$n135$18514 $flatten\m1_decoder.$verific$n136$18515 $flatten\m1_decoder.$verific$n137$18516 $flatten\m1_decoder.$verific$n138$18517 }
    New ctrl vector for $pmux cell $flatten\m1_decoder.$verific$select_92$dma_ahbdec.v:357$18715: { $flatten\m1_decoder.$verific$n145$18519 $flatten\m1_decoder.$verific$n146$18520 $flatten\m1_decoder.$verific$n147$18521 $flatten\m1_decoder.$verific$n148$18522 }
    New ctrl vector for $pmux cell $flatten\m1_decoder.$verific$select_98$dma_ahbdec.v:368$18723: { $flatten\m1_decoder.$verific$n155$18524 $flatten\m1_decoder.$verific$n156$18525 $flatten\m1_decoder.$verific$n157$18526 $flatten\m1_decoder.$verific$n158$18527 }
    New ctrl vector for $pmux cell $flatten\m1_mux.$verific$select_14$dma_ahbmux.v:282$18375: { $flatten\m1_mux.$verific$n7$18271 $flatten\m1_mux.$verific$n8$18272 $flatten\m1_mux.$verific$n9$18273 $flatten\m1_mux.$verific$n10$18274 $flatten\m1_mux.$verific$n11$18275 $flatten\m1_mux.$verific$n12$18276 $flatten\m1_mux.$verific$n13$18277 }
    New ctrl vector for $pmux cell $flatten\m1_mux.$verific$select_24$dma_ahbmux.v:309$18387: { $flatten\m1_mux.$verific$n20$18280 $flatten\m1_mux.$verific$n21$18281 $flatten\m1_mux.$verific$n22$18282 $flatten\m1_mux.$verific$n23$18283 $flatten\m1_mux.$verific$n24$18284 $flatten\m1_mux.$verific$n25$18285 $flatten\m1_mux.$verific$n26$18286 }
  Optimizing cells in module \dma_top.
Performed a total of 28 changes.

yosys> opt_merge

3.9.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dma_top'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

yosys> opt_dff -nodffe -nosdff

3.9.6. Executing OPT_DFF pass (perform DFF optimizations).
Changing const-value async load to async reset on $flatten\m1_mux.$verific$mux_no_reg$dma_ahbmux.v:325$18399 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\m1_mux.$verific$hrp_df_reg$dma_ahbmux.v:369$18419 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\m1_mux.$verific$hrmxnof_reg$dma_ahbmux.v:341$18407 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\m1_mux.$verific$hrdy_df_reg$dma_ahbmux.v:359$18415 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\dma_fifo.$verific$ram_wrq_reg$dma_fifo.v:356$9120 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\dma_fifo.$verific$ram_wr_reg$dma_fifo.v:322$9108 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\dma_fifo.$verific$part_wd_reg$dma_fifo.v:387$9139 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\dma_fifo.$verific$ff_fram_wado_reg$dma_fifo.v:419$9149 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\dma_fifo.$verific$ff_fram_radx_reg$dma_fifo.v:427$9154 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\dma_fifo.$verific$ff_cnv_q_vld_reg$dma_fifo.v:313$9103 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\dma_fifo.$verific$ff_cnt_reg$dma_fifo.v:440$9168 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\dma_fifo.$verific$cnv_bt3_reg$dma_fifo.v:302$9093 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\dma_fifo.$verific$cnv_bt2_reg$dma_fifo.v:296$9090 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\dma_fifo.$verific$cnv_bt1_reg$dma_fifo.v:290$9087 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\dma_fifo.$verific$cnv_bt0_reg$dma_fifo.v:284$9084 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\dma_fifo.$verific$cbe_reg$dma_fifo.v:271$9071 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\de.$verific$upk_cnt1_reg$dma_engine.v:1638$7388 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\de.$verific$upk_cnt0_reg$dma_engine.v:1630$7383 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\de.$verific$tsz_cnt_reg$dma_engine.v:1537$7332 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\de.$verific$st_rd_msk_reg$dma_engine.v:1500$7315 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\de.$verific$st_ed1s_reg$dma_engine.v:858$7010 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\de.$verific$m1_is_llp_reg$dma_engine.v:1096$7146 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\de.$verific$m1_arb_st_reg$dma_engine.v:1269$7209 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\de.$verific$m0_is_llp_reg$dma_engine.v:1081$7142 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\de.$verific$m0_arb_st_reg$dma_engine.v:1122$7163 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\de.$verific$de_st_reg$dma_engine.v:911$7042 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\de.$verific$de_mllp_reg$dma_engine.v:653$6909 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\de.$verific$de_ff_flush_d1_reg$dma_engine.v:1364$7241 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\de.$verific$de_err_notify_reg$dma_engine.v:1473$7301 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\de.$verific$bst_cnt_reg$dma_engine.v:1522$7325 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c7_rf.$verific$swidth_reg$dma_chrf.v:411$17673 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c7_rf.$verific$src_sz_reg$dma_chrf.v:352$17650 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c7_rf.$verific$src_sel_reg$dma_chrf.v:463$17710 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c7_rf.$verific$sad_ctl1_reg$dma_chrf.v:463$17706 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c7_rf.$verific$sad_ctl0_reg$dma_chrf.v:463$17707 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c7_rf.$verific$prot3_reg$dma_chrf.v:343$17644 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c7_rf.$verific$prot2_reg$dma_chrf.v:343$17645 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c7_rf.$verific$prot1_reg$dma_chrf.v:343$17646 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c7_rf.$verific$mode_reg$dma_chrf.v:431$17681 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c7_rf.$verific$int_tc_msk_reg$dma_chrf.v:306$17629 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c7_rf.$verific$int_tc1_msk_reg$dma_chrf.v:500$17728 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c7_rf.$verific$int_err_msk_reg$dma_chrf.v:500$17727 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c7_rf.$verific$int_abt_msk_reg$dma_chrf.v:500$17726 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c7_rf.$verific$dwidth_reg$dma_chrf.v:422$17678 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c7_rf.$verific$dst_sel_reg$dma_chrf.v:463$17711 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c7_rf.$verific$dreqmode_reg$dma_chrf.v:326$17637 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c7_rf.$verific$dad_ctl1_reg$dma_chrf.v:463$17708 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c7_rf.$verific$dad_ctl0_reg$dma_chrf.v:463$17709 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c7_rf.$verific$chtsz_reg$dma_chrf.v:644$17810 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c7_rf.$verific$chsad_reg$dma_chrf.v:540$17742 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c7_rf.$verific$chpri_reg$dma_chrf.v:316$17634 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c7_rf.$verific$chllpen_reg$dma_chrf.v:239$17586 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c7_rf.$verific$chllp_reg$dma_chrf.v:621$17791 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c7_rf.$verific$chllp_on_reg$dma_chrf.v:267$17598 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c7_rf.$verific$chllp_cnt_reg$dma_chrf.v:279$17613 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c7_rf.$verific$chdad_reg$dma_chrf.v:580$17768 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c7_rf.$verific$chabt_reg$dma_chrf.v:390$17663 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c7_rf.$verific$ch_en_reg$dma_chrf.v:480$17720 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c7_rf.$verific$autold_reg$dma_chrf.v:400$17667 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c6_rf.$verific$swidth_reg$dma_chrf.v:411$17222 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c6_rf.$verific$src_sz_reg$dma_chrf.v:352$17199 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c6_rf.$verific$src_sel_reg$dma_chrf.v:463$17259 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c6_rf.$verific$sad_ctl1_reg$dma_chrf.v:463$17255 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c6_rf.$verific$sad_ctl0_reg$dma_chrf.v:463$17256 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c6_rf.$verific$prot3_reg$dma_chrf.v:343$17193 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c6_rf.$verific$prot2_reg$dma_chrf.v:343$17194 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c6_rf.$verific$prot1_reg$dma_chrf.v:343$17195 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c6_rf.$verific$mode_reg$dma_chrf.v:431$17230 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c6_rf.$verific$int_tc_msk_reg$dma_chrf.v:306$17178 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c6_rf.$verific$int_tc1_msk_reg$dma_chrf.v:500$17277 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c6_rf.$verific$int_err_msk_reg$dma_chrf.v:500$17276 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c6_rf.$verific$int_abt_msk_reg$dma_chrf.v:500$17275 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c6_rf.$verific$dwidth_reg$dma_chrf.v:422$17227 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c6_rf.$verific$dst_sel_reg$dma_chrf.v:463$17260 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c6_rf.$verific$dreqmode_reg$dma_chrf.v:326$17186 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c6_rf.$verific$dad_ctl1_reg$dma_chrf.v:463$17257 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c6_rf.$verific$dad_ctl0_reg$dma_chrf.v:463$17258 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c6_rf.$verific$chtsz_reg$dma_chrf.v:644$17359 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c6_rf.$verific$chsad_reg$dma_chrf.v:540$17291 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c6_rf.$verific$chpri_reg$dma_chrf.v:316$17183 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c6_rf.$verific$chllpen_reg$dma_chrf.v:239$17135 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c6_rf.$verific$chllp_reg$dma_chrf.v:621$17340 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c6_rf.$verific$chllp_on_reg$dma_chrf.v:267$17147 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c6_rf.$verific$chllp_cnt_reg$dma_chrf.v:279$17162 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c6_rf.$verific$chdad_reg$dma_chrf.v:580$17317 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c6_rf.$verific$chabt_reg$dma_chrf.v:390$17212 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c6_rf.$verific$ch_en_reg$dma_chrf.v:480$17269 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c6_rf.$verific$autold_reg$dma_chrf.v:400$17216 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c5_rf.$verific$swidth_reg$dma_chrf.v:411$16771 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c5_rf.$verific$src_sz_reg$dma_chrf.v:352$16748 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c5_rf.$verific$src_sel_reg$dma_chrf.v:463$16808 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c5_rf.$verific$sad_ctl1_reg$dma_chrf.v:463$16804 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c5_rf.$verific$sad_ctl0_reg$dma_chrf.v:463$16805 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c5_rf.$verific$prot3_reg$dma_chrf.v:343$16742 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c5_rf.$verific$prot2_reg$dma_chrf.v:343$16743 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c5_rf.$verific$prot1_reg$dma_chrf.v:343$16744 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c5_rf.$verific$mode_reg$dma_chrf.v:431$16779 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c5_rf.$verific$int_tc_msk_reg$dma_chrf.v:306$16727 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c5_rf.$verific$int_tc1_msk_reg$dma_chrf.v:500$16826 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c5_rf.$verific$int_err_msk_reg$dma_chrf.v:500$16825 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c5_rf.$verific$int_abt_msk_reg$dma_chrf.v:500$16824 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c5_rf.$verific$dwidth_reg$dma_chrf.v:422$16776 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c5_rf.$verific$dst_sel_reg$dma_chrf.v:463$16809 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c5_rf.$verific$dreqmode_reg$dma_chrf.v:326$16735 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c5_rf.$verific$dad_ctl1_reg$dma_chrf.v:463$16806 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c5_rf.$verific$dad_ctl0_reg$dma_chrf.v:463$16807 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c5_rf.$verific$chtsz_reg$dma_chrf.v:644$16908 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c5_rf.$verific$chsad_reg$dma_chrf.v:540$16840 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c5_rf.$verific$chpri_reg$dma_chrf.v:316$16732 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c5_rf.$verific$chllpen_reg$dma_chrf.v:239$16684 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c5_rf.$verific$chllp_reg$dma_chrf.v:621$16889 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c5_rf.$verific$chllp_on_reg$dma_chrf.v:267$16696 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c5_rf.$verific$chllp_cnt_reg$dma_chrf.v:279$16711 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c5_rf.$verific$chdad_reg$dma_chrf.v:580$16866 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c5_rf.$verific$chabt_reg$dma_chrf.v:390$16761 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c5_rf.$verific$ch_en_reg$dma_chrf.v:480$16818 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c5_rf.$verific$autold_reg$dma_chrf.v:400$16765 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c4_rf.$verific$swidth_reg$dma_chrf.v:411$16320 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c4_rf.$verific$src_sz_reg$dma_chrf.v:352$16297 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c4_rf.$verific$src_sel_reg$dma_chrf.v:463$16357 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c4_rf.$verific$sad_ctl1_reg$dma_chrf.v:463$16353 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c4_rf.$verific$sad_ctl0_reg$dma_chrf.v:463$16354 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c4_rf.$verific$prot3_reg$dma_chrf.v:343$16291 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c4_rf.$verific$prot2_reg$dma_chrf.v:343$16292 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c4_rf.$verific$prot1_reg$dma_chrf.v:343$16293 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c4_rf.$verific$mode_reg$dma_chrf.v:431$16328 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c4_rf.$verific$int_tc_msk_reg$dma_chrf.v:306$16276 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c4_rf.$verific$int_tc1_msk_reg$dma_chrf.v:500$16375 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c4_rf.$verific$int_err_msk_reg$dma_chrf.v:500$16374 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c4_rf.$verific$int_abt_msk_reg$dma_chrf.v:500$16373 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c4_rf.$verific$dwidth_reg$dma_chrf.v:422$16325 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c4_rf.$verific$dst_sel_reg$dma_chrf.v:463$16358 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c4_rf.$verific$dreqmode_reg$dma_chrf.v:326$16284 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c4_rf.$verific$dad_ctl1_reg$dma_chrf.v:463$16355 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c4_rf.$verific$dad_ctl0_reg$dma_chrf.v:463$16356 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c4_rf.$verific$chtsz_reg$dma_chrf.v:644$16457 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c4_rf.$verific$chsad_reg$dma_chrf.v:540$16389 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c4_rf.$verific$chpri_reg$dma_chrf.v:316$16281 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c4_rf.$verific$chllpen_reg$dma_chrf.v:239$16233 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c4_rf.$verific$chllp_reg$dma_chrf.v:621$16438 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c4_rf.$verific$chllp_on_reg$dma_chrf.v:267$16245 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c4_rf.$verific$chllp_cnt_reg$dma_chrf.v:279$16260 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c4_rf.$verific$chdad_reg$dma_chrf.v:580$16415 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c4_rf.$verific$chabt_reg$dma_chrf.v:390$16310 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c4_rf.$verific$ch_en_reg$dma_chrf.v:480$16367 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c4_rf.$verific$autold_reg$dma_chrf.v:400$16314 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c3_rf.$verific$swidth_reg$dma_chrf.v:411$15869 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c3_rf.$verific$src_sz_reg$dma_chrf.v:352$15846 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c3_rf.$verific$src_sel_reg$dma_chrf.v:463$15906 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c3_rf.$verific$sad_ctl1_reg$dma_chrf.v:463$15902 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c3_rf.$verific$sad_ctl0_reg$dma_chrf.v:463$15903 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c3_rf.$verific$prot3_reg$dma_chrf.v:343$15840 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c3_rf.$verific$prot2_reg$dma_chrf.v:343$15841 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c3_rf.$verific$prot1_reg$dma_chrf.v:343$15842 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c3_rf.$verific$mode_reg$dma_chrf.v:431$15877 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c3_rf.$verific$int_tc_msk_reg$dma_chrf.v:306$15825 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c3_rf.$verific$int_tc1_msk_reg$dma_chrf.v:500$15924 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c3_rf.$verific$int_err_msk_reg$dma_chrf.v:500$15923 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c3_rf.$verific$int_abt_msk_reg$dma_chrf.v:500$15922 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c3_rf.$verific$dwidth_reg$dma_chrf.v:422$15874 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c3_rf.$verific$dst_sel_reg$dma_chrf.v:463$15907 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c3_rf.$verific$dreqmode_reg$dma_chrf.v:326$15833 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c3_rf.$verific$dad_ctl1_reg$dma_chrf.v:463$15904 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c3_rf.$verific$dad_ctl0_reg$dma_chrf.v:463$15905 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c3_rf.$verific$chtsz_reg$dma_chrf.v:644$16006 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c3_rf.$verific$chsad_reg$dma_chrf.v:540$15938 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c3_rf.$verific$chpri_reg$dma_chrf.v:316$15830 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c3_rf.$verific$chllpen_reg$dma_chrf.v:239$15782 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c3_rf.$verific$chllp_reg$dma_chrf.v:621$15987 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c3_rf.$verific$chllp_on_reg$dma_chrf.v:267$15794 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c3_rf.$verific$chllp_cnt_reg$dma_chrf.v:279$15809 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c3_rf.$verific$chdad_reg$dma_chrf.v:580$15964 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c3_rf.$verific$chabt_reg$dma_chrf.v:390$15859 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c3_rf.$verific$ch_en_reg$dma_chrf.v:480$15916 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c3_rf.$verific$autold_reg$dma_chrf.v:400$15863 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c2_rf.$verific$swidth_reg$dma_chrf.v:411$15418 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c2_rf.$verific$src_sz_reg$dma_chrf.v:352$15395 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c2_rf.$verific$src_sel_reg$dma_chrf.v:463$15455 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c2_rf.$verific$sad_ctl1_reg$dma_chrf.v:463$15451 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c2_rf.$verific$sad_ctl0_reg$dma_chrf.v:463$15452 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c2_rf.$verific$prot3_reg$dma_chrf.v:343$15389 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c2_rf.$verific$prot2_reg$dma_chrf.v:343$15390 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c2_rf.$verific$prot1_reg$dma_chrf.v:343$15391 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c2_rf.$verific$mode_reg$dma_chrf.v:431$15426 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c2_rf.$verific$int_tc_msk_reg$dma_chrf.v:306$15374 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c2_rf.$verific$int_tc1_msk_reg$dma_chrf.v:500$15473 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c2_rf.$verific$int_err_msk_reg$dma_chrf.v:500$15472 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c2_rf.$verific$int_abt_msk_reg$dma_chrf.v:500$15471 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c2_rf.$verific$dwidth_reg$dma_chrf.v:422$15423 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c2_rf.$verific$dst_sel_reg$dma_chrf.v:463$15456 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c2_rf.$verific$dreqmode_reg$dma_chrf.v:326$15382 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c2_rf.$verific$dad_ctl1_reg$dma_chrf.v:463$15453 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c2_rf.$verific$dad_ctl0_reg$dma_chrf.v:463$15454 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c2_rf.$verific$chtsz_reg$dma_chrf.v:644$15555 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c2_rf.$verific$chsad_reg$dma_chrf.v:540$15487 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c2_rf.$verific$chpri_reg$dma_chrf.v:316$15379 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c2_rf.$verific$chllpen_reg$dma_chrf.v:239$15331 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c2_rf.$verific$chllp_reg$dma_chrf.v:621$15536 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c2_rf.$verific$chllp_on_reg$dma_chrf.v:267$15343 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c2_rf.$verific$chllp_cnt_reg$dma_chrf.v:279$15358 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c2_rf.$verific$chdad_reg$dma_chrf.v:580$15513 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c2_rf.$verific$chabt_reg$dma_chrf.v:390$15408 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c2_rf.$verific$ch_en_reg$dma_chrf.v:480$15465 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c2_rf.$verific$autold_reg$dma_chrf.v:400$15412 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c1_rf.$verific$swidth_reg$dma_chrf.v:411$14967 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c1_rf.$verific$src_sz_reg$dma_chrf.v:352$14944 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c1_rf.$verific$src_sel_reg$dma_chrf.v:463$15004 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c1_rf.$verific$sad_ctl1_reg$dma_chrf.v:463$15000 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c1_rf.$verific$sad_ctl0_reg$dma_chrf.v:463$15001 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c1_rf.$verific$prot3_reg$dma_chrf.v:343$14938 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c1_rf.$verific$prot2_reg$dma_chrf.v:343$14939 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c1_rf.$verific$prot1_reg$dma_chrf.v:343$14940 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c1_rf.$verific$mode_reg$dma_chrf.v:431$14975 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c1_rf.$verific$int_tc_msk_reg$dma_chrf.v:306$14923 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c1_rf.$verific$int_tc1_msk_reg$dma_chrf.v:500$15022 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c1_rf.$verific$int_err_msk_reg$dma_chrf.v:500$15021 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c1_rf.$verific$int_abt_msk_reg$dma_chrf.v:500$15020 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c1_rf.$verific$dwidth_reg$dma_chrf.v:422$14972 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c1_rf.$verific$dst_sel_reg$dma_chrf.v:463$15005 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c1_rf.$verific$dreqmode_reg$dma_chrf.v:326$14931 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c1_rf.$verific$dad_ctl1_reg$dma_chrf.v:463$15002 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c1_rf.$verific$dad_ctl0_reg$dma_chrf.v:463$15003 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c1_rf.$verific$chtsz_reg$dma_chrf.v:644$15104 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c1_rf.$verific$chsad_reg$dma_chrf.v:540$15036 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c1_rf.$verific$chpri_reg$dma_chrf.v:316$14928 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c1_rf.$verific$chllpen_reg$dma_chrf.v:239$14880 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c1_rf.$verific$chllp_reg$dma_chrf.v:621$15085 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c1_rf.$verific$chllp_on_reg$dma_chrf.v:267$14892 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c1_rf.$verific$chllp_cnt_reg$dma_chrf.v:279$14907 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c1_rf.$verific$chdad_reg$dma_chrf.v:580$15062 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c1_rf.$verific$chabt_reg$dma_chrf.v:390$14957 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c1_rf.$verific$ch_en_reg$dma_chrf.v:480$15014 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c1_rf.$verific$autold_reg$dma_chrf.v:400$14961 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c0_rf.$verific$swidth_reg$dma_chrf.v:411$14516 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c0_rf.$verific$src_sz_reg$dma_chrf.v:352$14493 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c0_rf.$verific$src_sel_reg$dma_chrf.v:463$14553 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c0_rf.$verific$sad_ctl1_reg$dma_chrf.v:463$14549 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c0_rf.$verific$sad_ctl0_reg$dma_chrf.v:463$14550 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c0_rf.$verific$prot3_reg$dma_chrf.v:343$14487 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c0_rf.$verific$prot2_reg$dma_chrf.v:343$14488 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c0_rf.$verific$prot1_reg$dma_chrf.v:343$14489 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c0_rf.$verific$mode_reg$dma_chrf.v:431$14524 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c0_rf.$verific$int_tc_msk_reg$dma_chrf.v:306$14472 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c0_rf.$verific$int_tc1_msk_reg$dma_chrf.v:500$14571 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c0_rf.$verific$int_err_msk_reg$dma_chrf.v:500$14570 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c0_rf.$verific$int_abt_msk_reg$dma_chrf.v:500$14569 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c0_rf.$verific$dwidth_reg$dma_chrf.v:422$14521 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c0_rf.$verific$dst_sel_reg$dma_chrf.v:463$14554 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c0_rf.$verific$dreqmode_reg$dma_chrf.v:326$14480 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c0_rf.$verific$dad_ctl1_reg$dma_chrf.v:463$14551 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c0_rf.$verific$dad_ctl0_reg$dma_chrf.v:463$14552 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c0_rf.$verific$chtsz_reg$dma_chrf.v:644$14653 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c0_rf.$verific$chsad_reg$dma_chrf.v:540$14585 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c0_rf.$verific$chpri_reg$dma_chrf.v:316$14477 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c0_rf.$verific$chllpen_reg$dma_chrf.v:239$14429 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c0_rf.$verific$chllp_reg$dma_chrf.v:621$14634 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c0_rf.$verific$chllp_on_reg$dma_chrf.v:267$14441 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c0_rf.$verific$chllp_cnt_reg$dma_chrf.v:279$14456 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c0_rf.$verific$chdad_reg$dma_chrf.v:580$14611 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c0_rf.$verific$chabt_reg$dma_chrf.v:390$14506 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c0_rf.$verific$ch_en_reg$dma_chrf.v:480$14563 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.\c0_rf.$verific$autold_reg$dma_chrf.v:400$14510 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.$verific$tc_reg$dma_ctlrf.v:1902$10408 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.$verific$sync_reg$dma_ctlrf.v:2281$10428 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.$verific$rf_sel_d1_reg$dma_ctlrf.v:1475$9955 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.$verific$m1end_reg$dma_ctlrf.v:2257$10415 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.$verific$m0end_reg$dma_ctlrf.v:2263$10418 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.$verific$err_reg$dma_ctlrf.v:2224$9948 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ahb_mst0.$verific$hwriteo_reg$dma_ahbmst.v:671$7885 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ahb_mst0.$verific$hwdatao_reg$dma_ahbmst.v:893$7943 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ahb_mst0.$verific$hsizeo_reg$dma_ahbmst.v:726$7904 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ahb_mst0.$verific$hreqo_reg$dma_ahbmst.v:1174$8105 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ahb_mst0.$verific$hproto_reg$dma_ahbmst.v:783$7909 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ahb_mst0.$verific$hbursto_reg$dma_ahbmst.v:811$7921 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ahb_mst0.$verific$haddro_reg$dma_ahbmst.v:987$7994 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.$verific$dmaint_tc_reg$dma_ctlrf.v:1721$10306 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.$verific$dmaint_reg$dma_ctlrf.v:1715$10304 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.$verific$dmaint_err_reg$dma_ctlrf.v:1727$10308 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.$verific$dmacen_reg$dma_ctlrf.v:2269$10421 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.$verific$c7dmabs_reg$dma_ctlrf.v:2420$10484 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.$verific$c7brbs_reg$dma_ctlrf.v:2557$10540 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.$verific$c6dmabs_reg$dma_ctlrf.v:2403$10477 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.$verific$c6brbs_reg$dma_ctlrf.v:2540$10533 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.$verific$c5dmabs_reg$dma_ctlrf.v:2386$10470 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.$verific$c5brbs_reg$dma_ctlrf.v:2523$10526 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.$verific$c4dmabs_reg$dma_ctlrf.v:2369$10463 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.$verific$c4brbs_reg$dma_ctlrf.v:2506$10519 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.$verific$c3dmabs_reg$dma_ctlrf.v:2352$10456 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.$verific$c3brbs_reg$dma_ctlrf.v:2489$10512 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.$verific$c2dmabs_reg$dma_ctlrf.v:2335$10449 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.$verific$c2brbs_reg$dma_ctlrf.v:2472$10505 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.$verific$c1dmabs_reg$dma_ctlrf.v:2318$10442 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.$verific$c1brbs_reg$dma_ctlrf.v:2455$10498 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.$verific$c0dmabs_reg$dma_ctlrf.v:2302$10434 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.$verific$c0brbs_reg$dma_ctlrf.v:2439$10491 ($aldff) from module dma_top.
Removing never-active async load on $flatten\ctl_rf.$verific$be_d1_reg$dma_ctlrf.v:1469$9951 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ctl_rf.$verific$abt_reg$dma_ctlrf.v:2233$10405 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ch_sel.\dma_rrarb3.$verific$state_reg$dma_rrarb.v:74$17905 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ch_sel.\dma_rrarb2.$verific$state_reg$dma_rrarb.v:74$17905 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ch_sel.\dma_rrarb1.$verific$state_reg$dma_rrarb.v:74$17905 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ch_sel.\dma_rrarb0.$verific$state_reg$dma_rrarb.v:74$17905 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ch_sel.$verific$vld_req_any_d1_reg$dma_chsel.v:868$13986 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ch_sel.$verific$fix_pri_sel_reg$dma_chsel.v:848$13965 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ch_sel.$verific$dma_tc_reg$dma_chsel.v:1243$14098 ($aldff) from module dma_top.
Removing never-active async load on $flatten\ch_sel.$verific$dma_reqd2_reg$dma_chsel.v:485$13839 ($aldff) from module dma_top.
Removing never-active async load on $flatten\ch_sel.$verific$dma_reqd1_reg$dma_chsel.v:459$13836 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ch_sel.$verific$dma_ack_reg$dma_chsel.v:1085$14051 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ch_sel.$verific$de_stup_d1_reg$dma_chsel.v:905$14001 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ch_sel.$verific$arb_req_reg$dma_chsel.v:890$13999 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ch_sel.$verific$arb_chcsr_reg_reg$dma_chsel.v:1310$14104 ($aldff) from module dma_top.
Removing never-active CLR on $flatten\ch_sel.$verific$arb_ch_sel_reg$dma_chsel.v:858$13966 ($dlatchsr) from module dma_top.
Removing never-active ARST on $flatten\ch_sel.$verific$arb_ch_sel_reg$dma_chsel.v:858$13966 ($dlatchsr) from module dma_top.
Changing const-value async load to async reset on $flatten\ahb_slv.$verific$slv_wr_d1o_reg$dma_ahbslv.v:274$18114 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ahb_slv.$verific$slv_sz_d1o_reg$dma_ahbslv.v:268$18109 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ahb_slv.$verific$slv_pt_d1o_reg$dma_ahbslv.v:268$18110 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ahb_slv.$verific$slv_br_req_reg$dma_ahbslv.v:366$18179 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ahb_slv.$verific$slv_ad_d1o_reg$dma_ahbslv.v:268$18108 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ahb_slv.$verific$hresp_br_reg$dma_ahbslv.v:448$18229 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ahb_slv.$verific$hreadyout_reg_reg$dma_ahbslv.v:315$18143 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ahb_slv.$verific$hreadyout_br_reg$dma_ahbslv.v:435$18222 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ahb_slv.$verific$hrdata_reg_reg$dma_ahbslv.v:346$18169 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ahb_slv.$verific$hrdata_br_reg$dma_ahbslv.v:492$18264 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ahb_slv.$verific$br_st_reg$dma_ahbslv.v:407$18200 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ahb_mst1.$verific$mx_dtp_reg$dma_ahbmst.v:596$8584 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ahb_mst1.$verific$mx_dt_st_reg$dma_ahbmst.v:607$8593 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ahb_mst1.$verific$mx_dma_had_a_rty_reg$dma_ahbmst.v:1209$8858 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ahb_mst1.$verific$mx_cmd_st_reg$dma_ahbmst.v:586$8579 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ahb_mst1.$verific$mx_ad1t0x_reg$dma_ahbmst.v:1111$8803 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ahb_mst1.$verific$m0_m1_diff_tx_reg$dma_ahbmst.v:926$8695 ($aldff) from module dma_top.
Removing never-active async load on $flatten\ahb_mst1.$verific$inc_selx_reg$dma_ahbmst.v:1045$8780 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ahb_mst1.$verific$hwriteo_reg$dma_ahbmst.v:671$8622 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ahb_mst1.$verific$hwdatao_reg$dma_ahbmst.v:893$8681 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ahb_mst1.$verific$hsizeo_reg$dma_ahbmst.v:726$8641 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ahb_mst1.$verific$hproto_reg$dma_ahbmst.v:783$8647 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ahb_mst1.$verific$hbursto_reg$dma_ahbmst.v:811$8659 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ahb_mst1.$verific$haddro_reg$dma_ahbmst.v:987$8732 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ahb_mst1.$verific$adin_is_neg_reg$dma_ahbmst.v:1094$8791 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ahb_mst1.$verific$add_cfx_reg$dma_ahbmst.v:1088$8788 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ahb_mst0.$verific$mx_dtp_reg$dma_ahbmst.v:596$7861 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ahb_mst0.$verific$mx_dt_st_reg$dma_ahbmst.v:607$7870 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ahb_mst0.$verific$mx_dma_had_a_rty_reg$dma_ahbmst.v:1209$8117 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ahb_mst0.$verific$mx_cmd_st_reg$dma_ahbmst.v:586$7856 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ahb_mst0.$verific$mx_ad1t0x_reg$dma_ahbmst.v:1111$8065 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ahb_mst0.$verific$m0_m1_diff_tx_reg$dma_ahbmst.v:926$7957 ($aldff) from module dma_top.
Removing never-active async load on $flatten\ahb_mst0.$verific$inc_selx_reg$dma_ahbmst.v:1045$8042 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ahb_mst0.$verific$add_cfx_reg$dma_ahbmst.v:1088$8050 ($aldff) from module dma_top.
Changing const-value async load to async reset on $flatten\ahb_mst0.$verific$adin_is_neg_reg$dma_ahbmst.v:1094$8053 ($aldff) from module dma_top.

yosys> opt_clean

3.9.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dma_top..
Removed 14 unused cells and 106 unused wires.
<suppressed ~15 debug messages>

yosys> opt_expr

3.9.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module dma_top.

3.9.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.9.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dma_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~522 debug messages>

yosys> opt_reduce

3.9.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dma_top.
Performed a total of 0 changes.

yosys> opt_merge

3.9.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dma_top'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.9.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.9.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dma_top..

yosys> opt_expr

3.9.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module dma_top.

3.9.16. Finished OPT passes. (There is nothing left to do.)

yosys> fsm

3.10. Executing FSM pass (extract and optimize FSM).

yosys> fsm_detect

3.10.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking dma_top.ahb_mst0.inc_selx as FSM state register:
    Users of register don't seem to benefit from recoding.
Not marking dma_top.ahb_mst1.inc_selx as FSM state register:
    Users of register don't seem to benefit from recoding.
Not marking dma_top.m1_mux.mux_no as FSM state register:
    Users of register don't seem to benefit from recoding.

yosys> fsm_extract

3.10.2. Executing FSM_EXTRACT pass (extracting FSM from design).

yosys> fsm_opt

3.10.3. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> opt_clean

3.10.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dma_top..

yosys> fsm_opt

3.10.5. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> fsm_recode

3.10.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

yosys> fsm_info

3.10.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

yosys> fsm_map

3.10.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

yosys> opt -sat

3.11. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dma_top.

yosys> opt_merge -nomux

3.11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dma_top'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.11.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dma_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~522 debug messages>

yosys> opt_reduce

3.11.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dma_top.
Performed a total of 0 changes.

yosys> opt_merge

3.11.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dma_top'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.11.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $flatten\m1_mux.$verific$mux_no_reg$dma_ahbmux.v:325$18399 ($adff) from module dma_top (D = \m1_mux.mux_noi, Q = \m1_mux.mux_no).
Adding EN signal on $flatten\m1_mux.$verific$hrp_df_reg$dma_ahbmux.v:369$18419 ($adff) from module dma_top (D = { 1'0 \m1_mux.df_cmd }, Q = \m1_mux.hrp_df).
Adding EN signal on $flatten\m1_mux.$verific$hrmxnof_reg$dma_ahbmux.v:341$18407 ($adff) from module dma_top (D = \m1_mux.hsel_df, Q = \m1_mux.hrmxnof).
Adding EN signal on $flatten\dma_fifo.$verific$part_wd_reg$dma_fifo.v:387$9139 ($adff) from module dma_top (D = $flatten\dma_fifo.$verific$n539$8950, Q = \dma_fifo.part_wd).
Adding EN signal on $flatten\dma_fifo.$verific$ff_fram_wado_reg$dma_fifo.v:419$9149 ($adff) from module dma_top (D = $flatten\dma_fifo.$verific$n601$8976, Q = \dma_fifo.ff_fram_wado).
Adding EN signal on $flatten\dma_fifo.$verific$ff_fram_radx_reg$dma_fifo.v:427$9154 ($adff) from module dma_top (D = $flatten\dma_fifo.$verific$n633$8980, Q = \dma_fifo.ff_fram_radx).
Adding EN signal on $flatten\dma_fifo.$verific$ff_cnv_q_vld_reg$dma_fifo.v:313$9103 ($adff) from module dma_top (D = $flatten\dma_fifo.$verific$n483$8925, Q = \dma_fifo.ff_cnv_q_vld).
Adding EN signal on $flatten\dma_fifo.$verific$ff_cnt_reg$dma_fifo.v:440$9168 ($adff) from module dma_top (D = $flatten\dma_fifo.$verific$n699$8988, Q = \dma_fifo.ff_cnt).
Adding EN signal on $flatten\dma_fifo.$verific$cnv_bt3_reg$dma_fifo.v:302$9093 ($adff) from module dma_top (D = \dma_fifo.cb3i, Q = \dma_fifo.cnv_bt3).
Adding EN signal on $flatten\dma_fifo.$verific$cnv_bt2_reg$dma_fifo.v:296$9090 ($adff) from module dma_top (D = \dma_fifo.cb2i, Q = \dma_fifo.cnv_bt2).
Adding EN signal on $flatten\dma_fifo.$verific$cnv_bt1_reg$dma_fifo.v:290$9087 ($adff) from module dma_top (D = \dma_fifo.cb1i, Q = \dma_fifo.cnv_bt1).
Adding EN signal on $flatten\dma_fifo.$verific$cnv_bt0_reg$dma_fifo.v:284$9084 ($adff) from module dma_top (D = \dma_fifo.cb0i, Q = \dma_fifo.cnv_bt0).
Adding EN signal on $flatten\dma_fifo.$verific$cbe_reg$dma_fifo.v:271$9071 ($adff) from module dma_top (D = $flatten\dma_fifo.$verific$n291$8962, Q = \dma_fifo.cbe).
Adding EN signal on $flatten\de.$verific$upk_cnt1_reg$dma_engine.v:1638$7388 ($adff) from module dma_top (D = $flatten\de.$verific$n1788$6867, Q = \de.upk_cnt1).
Adding EN signal on $flatten\de.$verific$upk_cnt0_reg$dma_engine.v:1630$7383 ($adff) from module dma_top (D = $flatten\de.$verific$n1767$6864, Q = \de.upk_cnt0).
Adding EN signal on $flatten\de.$verific$tsz_cnt_reg$dma_engine.v:1537$7332 ($adff) from module dma_top (D = $flatten\de.$verific$n1632$6857, Q = \de.tsz_cnt).
Adding EN signal on $flatten\de.$verific$st_rd_msk_reg$dma_engine.v:1500$7315 ($adff) from module dma_top (D = $flatten\de.$verific$n1488$6764, Q = \de.st_rd_msk).
Adding EN signal on $flatten\de.$verific$m1_is_llp_reg$dma_engine.v:1096$7146 ($adff) from module dma_top (D = $flatten\de.$verific$n760$6673, Q = \de.m1_is_llp).
Adding EN signal on $flatten\de.$verific$m0_is_llp_reg$dma_engine.v:1081$7142 ($adff) from module dma_top (D = $flatten\de.$verific$n750$6670, Q = \de.m0_is_llp).
Adding EN signal on $flatten\de.$verific$m0_arb_st_reg$dma_engine.v:1122$7163 ($adff) from module dma_top (D = $flatten\de.$verific$n783$6685, Q = \de.m0_arb_st).
Adding EN signal on $flatten\de.$verific$de_mllp_reg$dma_engine.v:653$6909 ($adff) from module dma_top (D = $flatten\de.$verific$n217$6811, Q = \de.de_mllp).
Adding EN signal on $flatten\de.$verific$de_err_notify_reg$dma_engine.v:1473$7301 ($adff) from module dma_top (D = $flatten\de.$verific$n1468$6753, Q = \de.de_err_notify).
Adding EN signal on $flatten\de.$verific$bst_cnt_reg$dma_engine.v:1522$7325 ($adff) from module dma_top (D = $flatten\de.$verific$n1556$6852, Q = \de.bst_cnt).
Adding EN signal on $flatten\ctl_rf.\c7_rf.$verific$swidth_reg$dma_chrf.v:411$17673 ($adff) from module dma_top (D = $flatten\ctl_rf.\c7_rf.$verific$n231$17510, Q = \ctl_rf.c7_rf.swidth).
Adding EN signal on $flatten\ctl_rf.\c7_rf.$verific$src_sz_reg$dma_chrf.v:352$17650 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb2 [2:0], Q = \ctl_rf.c7_rf.src_sz).
Adding EN signal on $flatten\ctl_rf.\c7_rf.$verific$src_sel_reg$dma_chrf.v:463$17710 ($adff) from module dma_top (D = $flatten\ctl_rf.\c7_rf.$verific$n308$17464, Q = \ctl_rf.c7_rf.src_sel).
Adding EN signal on $flatten\ctl_rf.\c7_rf.$verific$sad_ctl1_reg$dma_chrf.v:463$17706 ($adff) from module dma_top (D = $flatten\ctl_rf.\c7_rf.$verific$n304$17460, Q = \ctl_rf.c7_rf.sad_ctl1).
Adding EN signal on $flatten\ctl_rf.\c7_rf.$verific$sad_ctl0_reg$dma_chrf.v:463$17707 ($adff) from module dma_top (D = $flatten\ctl_rf.\c7_rf.$verific$n305$17461, Q = \ctl_rf.c7_rf.sad_ctl0).
Adding EN signal on $flatten\ctl_rf.\c7_rf.$verific$prot3_reg$dma_chrf.v:343$17644 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb2 [5], Q = \ctl_rf.c7_rf.prot3).
Adding EN signal on $flatten\ctl_rf.\c7_rf.$verific$prot2_reg$dma_chrf.v:343$17645 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb2 [4], Q = \ctl_rf.c7_rf.prot2).
Adding EN signal on $flatten\ctl_rf.\c7_rf.$verific$prot1_reg$dma_chrf.v:343$17646 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb2 [3], Q = \ctl_rf.c7_rf.prot1).
Adding EN signal on $flatten\ctl_rf.\c7_rf.$verific$mode_reg$dma_chrf.v:431$17681 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb0 [7], Q = \ctl_rf.c7_rf.mode).
Adding EN signal on $flatten\ctl_rf.\c7_rf.$verific$int_tc_msk_reg$dma_chrf.v:306$17629 ($adff) from module dma_top (D = $flatten\ctl_rf.\c7_rf.$verific$n114$17416, Q = \ctl_rf.c7_rf.int_tc_msk).
Adding EN signal on $flatten\ctl_rf.\c7_rf.$verific$int_tc1_msk_reg$dma_chrf.v:500$17728 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb0 [0], Q = \ctl_rf.c7_rf.int_tc1_msk).
Adding EN signal on $flatten\ctl_rf.\c7_rf.$verific$int_err_msk_reg$dma_chrf.v:500$17727 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb0 [1], Q = \ctl_rf.c7_rf.int_err_msk).
Adding EN signal on $flatten\ctl_rf.\c7_rf.$verific$int_abt_msk_reg$dma_chrf.v:500$17726 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb0 [2], Q = \ctl_rf.c7_rf.int_abt_msk).
Adding EN signal on $flatten\ctl_rf.\c7_rf.$verific$dwidth_reg$dma_chrf.v:422$17678 ($adff) from module dma_top (D = $flatten\ctl_rf.\c7_rf.$verific$n261$17514, Q = \ctl_rf.c7_rf.dwidth).
Adding EN signal on $flatten\ctl_rf.\c7_rf.$verific$dst_sel_reg$dma_chrf.v:463$17711 ($adff) from module dma_top (D = $flatten\ctl_rf.\c7_rf.$verific$n309$17465, Q = \ctl_rf.c7_rf.dst_sel).
Adding EN signal on $flatten\ctl_rf.\c7_rf.$verific$dreqmode_reg$dma_chrf.v:326$17637 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb3 [0], Q = \ctl_rf.c7_rf.dreqmode).
Adding EN signal on $flatten\ctl_rf.\c7_rf.$verific$dad_ctl1_reg$dma_chrf.v:463$17708 ($adff) from module dma_top (D = $flatten\ctl_rf.\c7_rf.$verific$n306$17462, Q = \ctl_rf.c7_rf.dad_ctl1).
Adding EN signal on $flatten\ctl_rf.\c7_rf.$verific$dad_ctl0_reg$dma_chrf.v:463$17709 ($adff) from module dma_top (D = $flatten\ctl_rf.\c7_rf.$verific$n307$17463, Q = \ctl_rf.c7_rf.dad_ctl0).
Adding EN signal on $flatten\ctl_rf.\c7_rf.$verific$chtsz_reg$dma_chrf.v:644$17810 ($adff) from module dma_top (D = $flatten\ctl_rf.\c7_rf.$verific$n1218$17561, Q = \ctl_rf.c7_rf.chtsz [7:0]).
Adding EN signal on $flatten\ctl_rf.\c7_rf.$verific$chtsz_reg$dma_chrf.v:644$17810 ($adff) from module dma_top (D = $flatten\ctl_rf.\c7_rf.$verific$n1216$17559, Q = \ctl_rf.c7_rf.chtsz [11:8]).
Adding EN signal on $flatten\ctl_rf.\c7_rf.$verific$chsad_reg$dma_chrf.v:540$17742 ($adff) from module dma_top (D = $flatten\ctl_rf.\c7_rf.$verific$n1195$17541, Q = \ctl_rf.c7_rf.chsad [7:0]).
Adding EN signal on $flatten\ctl_rf.\c7_rf.$verific$chsad_reg$dma_chrf.v:540$17742 ($adff) from module dma_top (D = $flatten\ctl_rf.\c7_rf.$verific$n1193$17539, Q = \ctl_rf.c7_rf.chsad [15:8]).
Adding EN signal on $flatten\ctl_rf.\c7_rf.$verific$chsad_reg$dma_chrf.v:540$17742 ($adff) from module dma_top (D = $flatten\ctl_rf.\c7_rf.$verific$n1191$17537, Q = \ctl_rf.c7_rf.chsad [23:16]).
Adding EN signal on $flatten\ctl_rf.\c7_rf.$verific$chsad_reg$dma_chrf.v:540$17742 ($adff) from module dma_top (D = $flatten\ctl_rf.\c7_rf.$verific$n1189$17535, Q = \ctl_rf.c7_rf.chsad [31:24]).
Adding EN signal on $flatten\ctl_rf.\c7_rf.$verific$chpri_reg$dma_chrf.v:316$17634 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb2 [7:6], Q = \ctl_rf.c7_rf.chpri).
Adding EN signal on $flatten\ctl_rf.\c7_rf.$verific$chllpen_reg$dma_chrf.v:239$17586 ($adff) from module dma_top (D = $flatten\ctl_rf.\c7_rf.$verific$n28$17389, Q = \ctl_rf.c7_rf.chllpen).
Adding EN signal on $flatten\ctl_rf.\c7_rf.$verific$chllp_reg$dma_chrf.v:621$17791 ($adff) from module dma_top (D = $flatten\ctl_rf.\c7_rf.$verific$n1213$17557, Q = \ctl_rf.c7_rf.chllp [7:0]).
Adding EN signal on $flatten\ctl_rf.\c7_rf.$verific$chllp_reg$dma_chrf.v:621$17791 ($adff) from module dma_top (D = $flatten\ctl_rf.\c7_rf.$verific$n1211$17555, Q = \ctl_rf.c7_rf.chllp [15:8]).
Adding EN signal on $flatten\ctl_rf.\c7_rf.$verific$chllp_reg$dma_chrf.v:621$17791 ($adff) from module dma_top (D = $flatten\ctl_rf.\c7_rf.$verific$n1209$17553, Q = \ctl_rf.c7_rf.chllp [23:16]).
Adding EN signal on $flatten\ctl_rf.\c7_rf.$verific$chllp_reg$dma_chrf.v:621$17791 ($adff) from module dma_top (D = $flatten\ctl_rf.\c7_rf.$verific$n1207$17551, Q = \ctl_rf.c7_rf.chllp [31:24]).
Adding EN signal on $flatten\ctl_rf.\c7_rf.$verific$chllp_on_reg$dma_chrf.v:267$17598 ($adff) from module dma_top (D = $flatten\ctl_rf.\c7_rf.$verific$n45$17398, Q = \ctl_rf.c7_rf.chllp_on).
Adding EN signal on $flatten\ctl_rf.\c7_rf.$verific$chllp_cnt_reg$dma_chrf.v:279$17613 ($adff) from module dma_top (D = $flatten\ctl_rf.\c7_rf.$verific$n86$17499, Q = \ctl_rf.c7_rf.chllp_cnt).
Adding EN signal on $flatten\ctl_rf.\c7_rf.$verific$chdad_reg$dma_chrf.v:580$17768 ($adff) from module dma_top (D = $flatten\ctl_rf.\c7_rf.$verific$n1204$17549, Q = \ctl_rf.c7_rf.chdad [7:0]).
Adding EN signal on $flatten\ctl_rf.\c7_rf.$verific$chdad_reg$dma_chrf.v:580$17768 ($adff) from module dma_top (D = $flatten\ctl_rf.\c7_rf.$verific$n1202$17547, Q = \ctl_rf.c7_rf.chdad [15:8]).
Adding EN signal on $flatten\ctl_rf.\c7_rf.$verific$chdad_reg$dma_chrf.v:580$17768 ($adff) from module dma_top (D = $flatten\ctl_rf.\c7_rf.$verific$n1200$17545, Q = \ctl_rf.c7_rf.chdad [23:16]).
Adding EN signal on $flatten\ctl_rf.\c7_rf.$verific$chdad_reg$dma_chrf.v:580$17768 ($adff) from module dma_top (D = $flatten\ctl_rf.\c7_rf.$verific$n1198$17543, Q = \ctl_rf.c7_rf.chdad [31:24]).
Adding EN signal on $flatten\ctl_rf.\c7_rf.$verific$chabt_reg$dma_chrf.v:390$17663 ($adff) from module dma_top (D = $flatten\ctl_rf.\c7_rf.$verific$n198$17435, Q = \ctl_rf.c7_rf.chabt).
Adding EN signal on $flatten\ctl_rf.\c7_rf.$verific$ch_en_reg$dma_chrf.v:480$17720 ($adff) from module dma_top (D = $flatten\ctl_rf.\c7_rf.$verific$n334$17471, Q = \ctl_rf.c7_rf.ch_en).
Adding EN signal on $flatten\ctl_rf.\c7_rf.$verific$autold_reg$dma_chrf.v:400$17667 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb1 [6], Q = \ctl_rf.c7_rf.autold).
Adding EN signal on $flatten\ctl_rf.\c6_rf.$verific$swidth_reg$dma_chrf.v:411$17222 ($adff) from module dma_top (D = $flatten\ctl_rf.\c6_rf.$verific$n231$17059, Q = \ctl_rf.c6_rf.swidth).
Adding EN signal on $flatten\ctl_rf.\c6_rf.$verific$src_sz_reg$dma_chrf.v:352$17199 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb2 [2:0], Q = \ctl_rf.c6_rf.src_sz).
Adding EN signal on $flatten\ctl_rf.\c6_rf.$verific$src_sel_reg$dma_chrf.v:463$17259 ($adff) from module dma_top (D = $flatten\ctl_rf.\c6_rf.$verific$n308$17013, Q = \ctl_rf.c6_rf.src_sel).
Adding EN signal on $flatten\ctl_rf.\c6_rf.$verific$sad_ctl1_reg$dma_chrf.v:463$17255 ($adff) from module dma_top (D = $flatten\ctl_rf.\c6_rf.$verific$n304$17009, Q = \ctl_rf.c6_rf.sad_ctl1).
Adding EN signal on $flatten\ctl_rf.\c6_rf.$verific$sad_ctl0_reg$dma_chrf.v:463$17256 ($adff) from module dma_top (D = $flatten\ctl_rf.\c6_rf.$verific$n305$17010, Q = \ctl_rf.c6_rf.sad_ctl0).
Adding EN signal on $flatten\ctl_rf.\c6_rf.$verific$prot3_reg$dma_chrf.v:343$17193 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb2 [5], Q = \ctl_rf.c6_rf.prot3).
Adding EN signal on $flatten\ctl_rf.\c6_rf.$verific$prot2_reg$dma_chrf.v:343$17194 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb2 [4], Q = \ctl_rf.c6_rf.prot2).
Adding EN signal on $flatten\ctl_rf.\c6_rf.$verific$prot1_reg$dma_chrf.v:343$17195 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb2 [3], Q = \ctl_rf.c6_rf.prot1).
Adding EN signal on $flatten\ctl_rf.\c6_rf.$verific$mode_reg$dma_chrf.v:431$17230 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb0 [7], Q = \ctl_rf.c6_rf.mode).
Adding EN signal on $flatten\ctl_rf.\c6_rf.$verific$int_tc_msk_reg$dma_chrf.v:306$17178 ($adff) from module dma_top (D = $flatten\ctl_rf.\c6_rf.$verific$n114$16965, Q = \ctl_rf.c6_rf.int_tc_msk).
Adding EN signal on $flatten\ctl_rf.\c6_rf.$verific$int_tc1_msk_reg$dma_chrf.v:500$17277 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb0 [0], Q = \ctl_rf.c6_rf.int_tc1_msk).
Adding EN signal on $flatten\ctl_rf.\c6_rf.$verific$int_err_msk_reg$dma_chrf.v:500$17276 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb0 [1], Q = \ctl_rf.c6_rf.int_err_msk).
Adding EN signal on $flatten\ctl_rf.\c6_rf.$verific$int_abt_msk_reg$dma_chrf.v:500$17275 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb0 [2], Q = \ctl_rf.c6_rf.int_abt_msk).
Adding EN signal on $flatten\ctl_rf.\c6_rf.$verific$dwidth_reg$dma_chrf.v:422$17227 ($adff) from module dma_top (D = $flatten\ctl_rf.\c6_rf.$verific$n261$17063, Q = \ctl_rf.c6_rf.dwidth).
Adding EN signal on $flatten\ctl_rf.\c6_rf.$verific$dst_sel_reg$dma_chrf.v:463$17260 ($adff) from module dma_top (D = $flatten\ctl_rf.\c6_rf.$verific$n309$17014, Q = \ctl_rf.c6_rf.dst_sel).
Adding EN signal on $flatten\ctl_rf.\c6_rf.$verific$dreqmode_reg$dma_chrf.v:326$17186 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb3 [0], Q = \ctl_rf.c6_rf.dreqmode).
Adding EN signal on $flatten\ctl_rf.\c6_rf.$verific$dad_ctl1_reg$dma_chrf.v:463$17257 ($adff) from module dma_top (D = $flatten\ctl_rf.\c6_rf.$verific$n306$17011, Q = \ctl_rf.c6_rf.dad_ctl1).
Adding EN signal on $flatten\ctl_rf.\c6_rf.$verific$dad_ctl0_reg$dma_chrf.v:463$17258 ($adff) from module dma_top (D = $flatten\ctl_rf.\c6_rf.$verific$n307$17012, Q = \ctl_rf.c6_rf.dad_ctl0).
Adding EN signal on $flatten\ctl_rf.\c6_rf.$verific$chtsz_reg$dma_chrf.v:644$17359 ($adff) from module dma_top (D = $flatten\ctl_rf.\c6_rf.$verific$n1218$17110, Q = \ctl_rf.c6_rf.chtsz [7:0]).
Adding EN signal on $flatten\ctl_rf.\c6_rf.$verific$chtsz_reg$dma_chrf.v:644$17359 ($adff) from module dma_top (D = $flatten\ctl_rf.\c6_rf.$verific$n1216$17108, Q = \ctl_rf.c6_rf.chtsz [11:8]).
Adding EN signal on $flatten\ctl_rf.\c6_rf.$verific$chsad_reg$dma_chrf.v:540$17291 ($adff) from module dma_top (D = $flatten\ctl_rf.\c6_rf.$verific$n1195$17090, Q = \ctl_rf.c6_rf.chsad [7:0]).
Adding EN signal on $flatten\ctl_rf.\c6_rf.$verific$chsad_reg$dma_chrf.v:540$17291 ($adff) from module dma_top (D = $flatten\ctl_rf.\c6_rf.$verific$n1193$17088, Q = \ctl_rf.c6_rf.chsad [15:8]).
Adding EN signal on $flatten\ctl_rf.\c6_rf.$verific$chsad_reg$dma_chrf.v:540$17291 ($adff) from module dma_top (D = $flatten\ctl_rf.\c6_rf.$verific$n1191$17086, Q = \ctl_rf.c6_rf.chsad [23:16]).
Adding EN signal on $flatten\ctl_rf.\c6_rf.$verific$chsad_reg$dma_chrf.v:540$17291 ($adff) from module dma_top (D = $flatten\ctl_rf.\c6_rf.$verific$n1189$17084, Q = \ctl_rf.c6_rf.chsad [31:24]).
Adding EN signal on $flatten\ctl_rf.\c6_rf.$verific$chpri_reg$dma_chrf.v:316$17183 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb2 [7:6], Q = \ctl_rf.c6_rf.chpri).
Adding EN signal on $flatten\ctl_rf.\c6_rf.$verific$chllpen_reg$dma_chrf.v:239$17135 ($adff) from module dma_top (D = $flatten\ctl_rf.\c6_rf.$verific$n28$16938, Q = \ctl_rf.c6_rf.chllpen).
Adding EN signal on $flatten\ctl_rf.\c6_rf.$verific$chllp_reg$dma_chrf.v:621$17340 ($adff) from module dma_top (D = $flatten\ctl_rf.\c6_rf.$verific$n1213$17106, Q = \ctl_rf.c6_rf.chllp [7:0]).
Adding EN signal on $flatten\ctl_rf.\c6_rf.$verific$chllp_reg$dma_chrf.v:621$17340 ($adff) from module dma_top (D = $flatten\ctl_rf.\c6_rf.$verific$n1211$17104, Q = \ctl_rf.c6_rf.chllp [15:8]).
Adding EN signal on $flatten\ctl_rf.\c6_rf.$verific$chllp_reg$dma_chrf.v:621$17340 ($adff) from module dma_top (D = $flatten\ctl_rf.\c6_rf.$verific$n1209$17102, Q = \ctl_rf.c6_rf.chllp [23:16]).
Adding EN signal on $flatten\ctl_rf.\c6_rf.$verific$chllp_reg$dma_chrf.v:621$17340 ($adff) from module dma_top (D = $flatten\ctl_rf.\c6_rf.$verific$n1207$17100, Q = \ctl_rf.c6_rf.chllp [31:24]).
Adding EN signal on $flatten\ctl_rf.\c6_rf.$verific$chllp_on_reg$dma_chrf.v:267$17147 ($adff) from module dma_top (D = $flatten\ctl_rf.\c6_rf.$verific$n45$16947, Q = \ctl_rf.c6_rf.chllp_on).
Adding EN signal on $flatten\ctl_rf.\c6_rf.$verific$chllp_cnt_reg$dma_chrf.v:279$17162 ($adff) from module dma_top (D = $flatten\ctl_rf.\c6_rf.$verific$n86$17048, Q = \ctl_rf.c6_rf.chllp_cnt).
Adding EN signal on $flatten\ctl_rf.\c6_rf.$verific$chdad_reg$dma_chrf.v:580$17317 ($adff) from module dma_top (D = $flatten\ctl_rf.\c6_rf.$verific$n1204$17098, Q = \ctl_rf.c6_rf.chdad [7:0]).
Adding EN signal on $flatten\ctl_rf.\c6_rf.$verific$chdad_reg$dma_chrf.v:580$17317 ($adff) from module dma_top (D = $flatten\ctl_rf.\c6_rf.$verific$n1202$17096, Q = \ctl_rf.c6_rf.chdad [15:8]).
Adding EN signal on $flatten\ctl_rf.\c6_rf.$verific$chdad_reg$dma_chrf.v:580$17317 ($adff) from module dma_top (D = $flatten\ctl_rf.\c6_rf.$verific$n1200$17094, Q = \ctl_rf.c6_rf.chdad [23:16]).
Adding EN signal on $flatten\ctl_rf.\c6_rf.$verific$chdad_reg$dma_chrf.v:580$17317 ($adff) from module dma_top (D = $flatten\ctl_rf.\c6_rf.$verific$n1198$17092, Q = \ctl_rf.c6_rf.chdad [31:24]).
Adding EN signal on $flatten\ctl_rf.\c6_rf.$verific$chabt_reg$dma_chrf.v:390$17212 ($adff) from module dma_top (D = $flatten\ctl_rf.\c6_rf.$verific$n198$16984, Q = \ctl_rf.c6_rf.chabt).
Adding EN signal on $flatten\ctl_rf.\c6_rf.$verific$ch_en_reg$dma_chrf.v:480$17269 ($adff) from module dma_top (D = $flatten\ctl_rf.\c6_rf.$verific$n334$17020, Q = \ctl_rf.c6_rf.ch_en).
Adding EN signal on $flatten\ctl_rf.\c6_rf.$verific$autold_reg$dma_chrf.v:400$17216 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb1 [6], Q = \ctl_rf.c6_rf.autold).
Adding EN signal on $flatten\ctl_rf.\c5_rf.$verific$swidth_reg$dma_chrf.v:411$16771 ($adff) from module dma_top (D = $flatten\ctl_rf.\c5_rf.$verific$n231$16608, Q = \ctl_rf.c5_rf.swidth).
Adding EN signal on $flatten\ctl_rf.\c5_rf.$verific$src_sz_reg$dma_chrf.v:352$16748 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb2 [2:0], Q = \ctl_rf.c5_rf.src_sz).
Adding EN signal on $flatten\ctl_rf.\c5_rf.$verific$src_sel_reg$dma_chrf.v:463$16808 ($adff) from module dma_top (D = $flatten\ctl_rf.\c5_rf.$verific$n308$16562, Q = \ctl_rf.c5_rf.src_sel).
Adding EN signal on $flatten\ctl_rf.\c5_rf.$verific$sad_ctl1_reg$dma_chrf.v:463$16804 ($adff) from module dma_top (D = $flatten\ctl_rf.\c5_rf.$verific$n304$16558, Q = \ctl_rf.c5_rf.sad_ctl1).
Adding EN signal on $flatten\ctl_rf.\c5_rf.$verific$sad_ctl0_reg$dma_chrf.v:463$16805 ($adff) from module dma_top (D = $flatten\ctl_rf.\c5_rf.$verific$n305$16559, Q = \ctl_rf.c5_rf.sad_ctl0).
Adding EN signal on $flatten\ctl_rf.\c5_rf.$verific$prot3_reg$dma_chrf.v:343$16742 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb2 [5], Q = \ctl_rf.c5_rf.prot3).
Adding EN signal on $flatten\ctl_rf.\c5_rf.$verific$prot2_reg$dma_chrf.v:343$16743 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb2 [4], Q = \ctl_rf.c5_rf.prot2).
Adding EN signal on $flatten\ctl_rf.\c5_rf.$verific$prot1_reg$dma_chrf.v:343$16744 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb2 [3], Q = \ctl_rf.c5_rf.prot1).
Adding EN signal on $flatten\ctl_rf.\c5_rf.$verific$mode_reg$dma_chrf.v:431$16779 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb0 [7], Q = \ctl_rf.c5_rf.mode).
Adding EN signal on $flatten\ctl_rf.\c5_rf.$verific$int_tc_msk_reg$dma_chrf.v:306$16727 ($adff) from module dma_top (D = $flatten\ctl_rf.\c5_rf.$verific$n114$16514, Q = \ctl_rf.c5_rf.int_tc_msk).
Adding EN signal on $flatten\ctl_rf.\c5_rf.$verific$int_tc1_msk_reg$dma_chrf.v:500$16826 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb0 [0], Q = \ctl_rf.c5_rf.int_tc1_msk).
Adding EN signal on $flatten\ctl_rf.\c5_rf.$verific$int_err_msk_reg$dma_chrf.v:500$16825 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb0 [1], Q = \ctl_rf.c5_rf.int_err_msk).
Adding EN signal on $flatten\ctl_rf.\c5_rf.$verific$int_abt_msk_reg$dma_chrf.v:500$16824 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb0 [2], Q = \ctl_rf.c5_rf.int_abt_msk).
Adding EN signal on $flatten\ctl_rf.\c5_rf.$verific$dwidth_reg$dma_chrf.v:422$16776 ($adff) from module dma_top (D = $flatten\ctl_rf.\c5_rf.$verific$n261$16612, Q = \ctl_rf.c5_rf.dwidth).
Adding EN signal on $flatten\ctl_rf.\c5_rf.$verific$dst_sel_reg$dma_chrf.v:463$16809 ($adff) from module dma_top (D = $flatten\ctl_rf.\c5_rf.$verific$n309$16563, Q = \ctl_rf.c5_rf.dst_sel).
Adding EN signal on $flatten\ctl_rf.\c5_rf.$verific$dreqmode_reg$dma_chrf.v:326$16735 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb3 [0], Q = \ctl_rf.c5_rf.dreqmode).
Adding EN signal on $flatten\ctl_rf.\c5_rf.$verific$dad_ctl1_reg$dma_chrf.v:463$16806 ($adff) from module dma_top (D = $flatten\ctl_rf.\c5_rf.$verific$n306$16560, Q = \ctl_rf.c5_rf.dad_ctl1).
Adding EN signal on $flatten\ctl_rf.\c5_rf.$verific$dad_ctl0_reg$dma_chrf.v:463$16807 ($adff) from module dma_top (D = $flatten\ctl_rf.\c5_rf.$verific$n307$16561, Q = \ctl_rf.c5_rf.dad_ctl0).
Adding EN signal on $flatten\ctl_rf.\c5_rf.$verific$chtsz_reg$dma_chrf.v:644$16908 ($adff) from module dma_top (D = $flatten\ctl_rf.\c5_rf.$verific$n1218$16659, Q = \ctl_rf.c5_rf.chtsz [7:0]).
Adding EN signal on $flatten\ctl_rf.\c5_rf.$verific$chtsz_reg$dma_chrf.v:644$16908 ($adff) from module dma_top (D = $flatten\ctl_rf.\c5_rf.$verific$n1216$16657, Q = \ctl_rf.c5_rf.chtsz [11:8]).
Adding EN signal on $flatten\ctl_rf.\c5_rf.$verific$chsad_reg$dma_chrf.v:540$16840 ($adff) from module dma_top (D = $flatten\ctl_rf.\c5_rf.$verific$n1195$16639, Q = \ctl_rf.c5_rf.chsad [7:0]).
Adding EN signal on $flatten\ctl_rf.\c5_rf.$verific$chsad_reg$dma_chrf.v:540$16840 ($adff) from module dma_top (D = $flatten\ctl_rf.\c5_rf.$verific$n1193$16637, Q = \ctl_rf.c5_rf.chsad [15:8]).
Adding EN signal on $flatten\ctl_rf.\c5_rf.$verific$chsad_reg$dma_chrf.v:540$16840 ($adff) from module dma_top (D = $flatten\ctl_rf.\c5_rf.$verific$n1191$16635, Q = \ctl_rf.c5_rf.chsad [23:16]).
Adding EN signal on $flatten\ctl_rf.\c5_rf.$verific$chsad_reg$dma_chrf.v:540$16840 ($adff) from module dma_top (D = $flatten\ctl_rf.\c5_rf.$verific$n1189$16633, Q = \ctl_rf.c5_rf.chsad [31:24]).
Adding EN signal on $flatten\ctl_rf.\c5_rf.$verific$chpri_reg$dma_chrf.v:316$16732 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb2 [7:6], Q = \ctl_rf.c5_rf.chpri).
Adding EN signal on $flatten\ctl_rf.\c5_rf.$verific$chllpen_reg$dma_chrf.v:239$16684 ($adff) from module dma_top (D = $flatten\ctl_rf.\c5_rf.$verific$n28$16487, Q = \ctl_rf.c5_rf.chllpen).
Adding EN signal on $flatten\ctl_rf.\c5_rf.$verific$chllp_reg$dma_chrf.v:621$16889 ($adff) from module dma_top (D = $flatten\ctl_rf.\c5_rf.$verific$n1213$16655, Q = \ctl_rf.c5_rf.chllp [7:0]).
Adding EN signal on $flatten\ctl_rf.\c5_rf.$verific$chllp_reg$dma_chrf.v:621$16889 ($adff) from module dma_top (D = $flatten\ctl_rf.\c5_rf.$verific$n1211$16653, Q = \ctl_rf.c5_rf.chllp [15:8]).
Adding EN signal on $flatten\ctl_rf.\c5_rf.$verific$chllp_reg$dma_chrf.v:621$16889 ($adff) from module dma_top (D = $flatten\ctl_rf.\c5_rf.$verific$n1209$16651, Q = \ctl_rf.c5_rf.chllp [23:16]).
Adding EN signal on $flatten\ctl_rf.\c5_rf.$verific$chllp_reg$dma_chrf.v:621$16889 ($adff) from module dma_top (D = $flatten\ctl_rf.\c5_rf.$verific$n1207$16649, Q = \ctl_rf.c5_rf.chllp [31:24]).
Adding EN signal on $flatten\ctl_rf.\c5_rf.$verific$chllp_on_reg$dma_chrf.v:267$16696 ($adff) from module dma_top (D = $flatten\ctl_rf.\c5_rf.$verific$n45$16496, Q = \ctl_rf.c5_rf.chllp_on).
Adding EN signal on $flatten\ctl_rf.\c5_rf.$verific$chllp_cnt_reg$dma_chrf.v:279$16711 ($adff) from module dma_top (D = $flatten\ctl_rf.\c5_rf.$verific$n86$16597, Q = \ctl_rf.c5_rf.chllp_cnt).
Adding EN signal on $flatten\ctl_rf.\c5_rf.$verific$chdad_reg$dma_chrf.v:580$16866 ($adff) from module dma_top (D = $flatten\ctl_rf.\c5_rf.$verific$n1204$16647, Q = \ctl_rf.c5_rf.chdad [7:0]).
Adding EN signal on $flatten\ctl_rf.\c5_rf.$verific$chdad_reg$dma_chrf.v:580$16866 ($adff) from module dma_top (D = $flatten\ctl_rf.\c5_rf.$verific$n1202$16645, Q = \ctl_rf.c5_rf.chdad [15:8]).
Adding EN signal on $flatten\ctl_rf.\c5_rf.$verific$chdad_reg$dma_chrf.v:580$16866 ($adff) from module dma_top (D = $flatten\ctl_rf.\c5_rf.$verific$n1200$16643, Q = \ctl_rf.c5_rf.chdad [23:16]).
Adding EN signal on $flatten\ctl_rf.\c5_rf.$verific$chdad_reg$dma_chrf.v:580$16866 ($adff) from module dma_top (D = $flatten\ctl_rf.\c5_rf.$verific$n1198$16641, Q = \ctl_rf.c5_rf.chdad [31:24]).
Adding EN signal on $flatten\ctl_rf.\c5_rf.$verific$chabt_reg$dma_chrf.v:390$16761 ($adff) from module dma_top (D = $flatten\ctl_rf.\c5_rf.$verific$n198$16533, Q = \ctl_rf.c5_rf.chabt).
Adding EN signal on $flatten\ctl_rf.\c5_rf.$verific$ch_en_reg$dma_chrf.v:480$16818 ($adff) from module dma_top (D = $flatten\ctl_rf.\c5_rf.$verific$n334$16569, Q = \ctl_rf.c5_rf.ch_en).
Adding EN signal on $flatten\ctl_rf.\c5_rf.$verific$autold_reg$dma_chrf.v:400$16765 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb1 [6], Q = \ctl_rf.c5_rf.autold).
Adding EN signal on $flatten\ctl_rf.\c4_rf.$verific$swidth_reg$dma_chrf.v:411$16320 ($adff) from module dma_top (D = $flatten\ctl_rf.\c4_rf.$verific$n231$16157, Q = \ctl_rf.c4_rf.swidth).
Adding EN signal on $flatten\ctl_rf.\c4_rf.$verific$src_sz_reg$dma_chrf.v:352$16297 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb2 [2:0], Q = \ctl_rf.c4_rf.src_sz).
Adding EN signal on $flatten\ctl_rf.\c4_rf.$verific$src_sel_reg$dma_chrf.v:463$16357 ($adff) from module dma_top (D = $flatten\ctl_rf.\c4_rf.$verific$n308$16111, Q = \ctl_rf.c4_rf.src_sel).
Adding EN signal on $flatten\ctl_rf.\c4_rf.$verific$sad_ctl1_reg$dma_chrf.v:463$16353 ($adff) from module dma_top (D = $flatten\ctl_rf.\c4_rf.$verific$n304$16107, Q = \ctl_rf.c4_rf.sad_ctl1).
Adding EN signal on $flatten\ctl_rf.\c4_rf.$verific$sad_ctl0_reg$dma_chrf.v:463$16354 ($adff) from module dma_top (D = $flatten\ctl_rf.\c4_rf.$verific$n305$16108, Q = \ctl_rf.c4_rf.sad_ctl0).
Adding EN signal on $flatten\ctl_rf.\c4_rf.$verific$prot3_reg$dma_chrf.v:343$16291 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb2 [5], Q = \ctl_rf.c4_rf.prot3).
Adding EN signal on $flatten\ctl_rf.\c4_rf.$verific$prot2_reg$dma_chrf.v:343$16292 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb2 [4], Q = \ctl_rf.c4_rf.prot2).
Adding EN signal on $flatten\ctl_rf.\c4_rf.$verific$prot1_reg$dma_chrf.v:343$16293 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb2 [3], Q = \ctl_rf.c4_rf.prot1).
Adding EN signal on $flatten\ctl_rf.\c4_rf.$verific$mode_reg$dma_chrf.v:431$16328 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb0 [7], Q = \ctl_rf.c4_rf.mode).
Adding EN signal on $flatten\ctl_rf.\c4_rf.$verific$int_tc_msk_reg$dma_chrf.v:306$16276 ($adff) from module dma_top (D = $flatten\ctl_rf.\c4_rf.$verific$n114$16063, Q = \ctl_rf.c4_rf.int_tc_msk).
Adding EN signal on $flatten\ctl_rf.\c4_rf.$verific$int_tc1_msk_reg$dma_chrf.v:500$16375 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb0 [0], Q = \ctl_rf.c4_rf.int_tc1_msk).
Adding EN signal on $flatten\ctl_rf.\c4_rf.$verific$int_err_msk_reg$dma_chrf.v:500$16374 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb0 [1], Q = \ctl_rf.c4_rf.int_err_msk).
Adding EN signal on $flatten\ctl_rf.\c4_rf.$verific$int_abt_msk_reg$dma_chrf.v:500$16373 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb0 [2], Q = \ctl_rf.c4_rf.int_abt_msk).
Adding EN signal on $flatten\ctl_rf.\c4_rf.$verific$dwidth_reg$dma_chrf.v:422$16325 ($adff) from module dma_top (D = $flatten\ctl_rf.\c4_rf.$verific$n261$16161, Q = \ctl_rf.c4_rf.dwidth).
Adding EN signal on $flatten\ctl_rf.\c4_rf.$verific$dst_sel_reg$dma_chrf.v:463$16358 ($adff) from module dma_top (D = $flatten\ctl_rf.\c4_rf.$verific$n309$16112, Q = \ctl_rf.c4_rf.dst_sel).
Adding EN signal on $flatten\ctl_rf.\c4_rf.$verific$dreqmode_reg$dma_chrf.v:326$16284 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb3 [0], Q = \ctl_rf.c4_rf.dreqmode).
Adding EN signal on $flatten\ctl_rf.\c4_rf.$verific$dad_ctl1_reg$dma_chrf.v:463$16355 ($adff) from module dma_top (D = $flatten\ctl_rf.\c4_rf.$verific$n306$16109, Q = \ctl_rf.c4_rf.dad_ctl1).
Adding EN signal on $flatten\ctl_rf.\c4_rf.$verific$dad_ctl0_reg$dma_chrf.v:463$16356 ($adff) from module dma_top (D = $flatten\ctl_rf.\c4_rf.$verific$n307$16110, Q = \ctl_rf.c4_rf.dad_ctl0).
Adding EN signal on $flatten\ctl_rf.\c4_rf.$verific$chtsz_reg$dma_chrf.v:644$16457 ($adff) from module dma_top (D = $flatten\ctl_rf.\c4_rf.$verific$n1218$16208, Q = \ctl_rf.c4_rf.chtsz [7:0]).
Adding EN signal on $flatten\ctl_rf.\c4_rf.$verific$chtsz_reg$dma_chrf.v:644$16457 ($adff) from module dma_top (D = $flatten\ctl_rf.\c4_rf.$verific$n1216$16206, Q = \ctl_rf.c4_rf.chtsz [11:8]).
Adding EN signal on $flatten\ctl_rf.\c4_rf.$verific$chsad_reg$dma_chrf.v:540$16389 ($adff) from module dma_top (D = $flatten\ctl_rf.\c4_rf.$verific$n1195$16188, Q = \ctl_rf.c4_rf.chsad [7:0]).
Adding EN signal on $flatten\ctl_rf.\c4_rf.$verific$chsad_reg$dma_chrf.v:540$16389 ($adff) from module dma_top (D = $flatten\ctl_rf.\c4_rf.$verific$n1193$16186, Q = \ctl_rf.c4_rf.chsad [15:8]).
Adding EN signal on $flatten\ctl_rf.\c4_rf.$verific$chsad_reg$dma_chrf.v:540$16389 ($adff) from module dma_top (D = $flatten\ctl_rf.\c4_rf.$verific$n1191$16184, Q = \ctl_rf.c4_rf.chsad [23:16]).
Adding EN signal on $flatten\ctl_rf.\c4_rf.$verific$chsad_reg$dma_chrf.v:540$16389 ($adff) from module dma_top (D = $flatten\ctl_rf.\c4_rf.$verific$n1189$16182, Q = \ctl_rf.c4_rf.chsad [31:24]).
Adding EN signal on $flatten\ctl_rf.\c4_rf.$verific$chpri_reg$dma_chrf.v:316$16281 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb2 [7:6], Q = \ctl_rf.c4_rf.chpri).
Adding EN signal on $flatten\ctl_rf.\c4_rf.$verific$chllpen_reg$dma_chrf.v:239$16233 ($adff) from module dma_top (D = $flatten\ctl_rf.\c4_rf.$verific$n28$16036, Q = \ctl_rf.c4_rf.chllpen).
Adding EN signal on $flatten\ctl_rf.\c4_rf.$verific$chllp_reg$dma_chrf.v:621$16438 ($adff) from module dma_top (D = $flatten\ctl_rf.\c4_rf.$verific$n1213$16204, Q = \ctl_rf.c4_rf.chllp [7:0]).
Adding EN signal on $flatten\ctl_rf.\c4_rf.$verific$chllp_reg$dma_chrf.v:621$16438 ($adff) from module dma_top (D = $flatten\ctl_rf.\c4_rf.$verific$n1211$16202, Q = \ctl_rf.c4_rf.chllp [15:8]).
Adding EN signal on $flatten\ctl_rf.\c4_rf.$verific$chllp_reg$dma_chrf.v:621$16438 ($adff) from module dma_top (D = $flatten\ctl_rf.\c4_rf.$verific$n1209$16200, Q = \ctl_rf.c4_rf.chllp [23:16]).
Adding EN signal on $flatten\ctl_rf.\c4_rf.$verific$chllp_reg$dma_chrf.v:621$16438 ($adff) from module dma_top (D = $flatten\ctl_rf.\c4_rf.$verific$n1207$16198, Q = \ctl_rf.c4_rf.chllp [31:24]).
Adding EN signal on $flatten\ctl_rf.\c4_rf.$verific$chllp_on_reg$dma_chrf.v:267$16245 ($adff) from module dma_top (D = $flatten\ctl_rf.\c4_rf.$verific$n45$16045, Q = \ctl_rf.c4_rf.chllp_on).
Adding EN signal on $flatten\ctl_rf.\c4_rf.$verific$chllp_cnt_reg$dma_chrf.v:279$16260 ($adff) from module dma_top (D = $flatten\ctl_rf.\c4_rf.$verific$n86$16146, Q = \ctl_rf.c4_rf.chllp_cnt).
Adding EN signal on $flatten\ctl_rf.\c4_rf.$verific$chdad_reg$dma_chrf.v:580$16415 ($adff) from module dma_top (D = $flatten\ctl_rf.\c4_rf.$verific$n1204$16196, Q = \ctl_rf.c4_rf.chdad [7:0]).
Adding EN signal on $flatten\ctl_rf.\c4_rf.$verific$chdad_reg$dma_chrf.v:580$16415 ($adff) from module dma_top (D = $flatten\ctl_rf.\c4_rf.$verific$n1202$16194, Q = \ctl_rf.c4_rf.chdad [15:8]).
Adding EN signal on $flatten\ctl_rf.\c4_rf.$verific$chdad_reg$dma_chrf.v:580$16415 ($adff) from module dma_top (D = $flatten\ctl_rf.\c4_rf.$verific$n1200$16192, Q = \ctl_rf.c4_rf.chdad [23:16]).
Adding EN signal on $flatten\ctl_rf.\c4_rf.$verific$chdad_reg$dma_chrf.v:580$16415 ($adff) from module dma_top (D = $flatten\ctl_rf.\c4_rf.$verific$n1198$16190, Q = \ctl_rf.c4_rf.chdad [31:24]).
Adding EN signal on $flatten\ctl_rf.\c4_rf.$verific$chabt_reg$dma_chrf.v:390$16310 ($adff) from module dma_top (D = $flatten\ctl_rf.\c4_rf.$verific$n198$16082, Q = \ctl_rf.c4_rf.chabt).
Adding EN signal on $flatten\ctl_rf.\c4_rf.$verific$ch_en_reg$dma_chrf.v:480$16367 ($adff) from module dma_top (D = $flatten\ctl_rf.\c4_rf.$verific$n334$16118, Q = \ctl_rf.c4_rf.ch_en).
Adding EN signal on $flatten\ctl_rf.\c4_rf.$verific$autold_reg$dma_chrf.v:400$16314 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb1 [6], Q = \ctl_rf.c4_rf.autold).
Adding EN signal on $flatten\ctl_rf.\c3_rf.$verific$swidth_reg$dma_chrf.v:411$15869 ($adff) from module dma_top (D = $flatten\ctl_rf.\c3_rf.$verific$n231$15706, Q = \ctl_rf.c3_rf.swidth).
Adding EN signal on $flatten\ctl_rf.\c3_rf.$verific$src_sz_reg$dma_chrf.v:352$15846 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb2 [2:0], Q = \ctl_rf.c3_rf.src_sz).
Adding EN signal on $flatten\ctl_rf.\c3_rf.$verific$src_sel_reg$dma_chrf.v:463$15906 ($adff) from module dma_top (D = $flatten\ctl_rf.\c3_rf.$verific$n308$15660, Q = \ctl_rf.c3_rf.src_sel).
Adding EN signal on $flatten\ctl_rf.\c3_rf.$verific$sad_ctl1_reg$dma_chrf.v:463$15902 ($adff) from module dma_top (D = $flatten\ctl_rf.\c3_rf.$verific$n304$15656, Q = \ctl_rf.c3_rf.sad_ctl1).
Adding EN signal on $flatten\ctl_rf.\c3_rf.$verific$sad_ctl0_reg$dma_chrf.v:463$15903 ($adff) from module dma_top (D = $flatten\ctl_rf.\c3_rf.$verific$n305$15657, Q = \ctl_rf.c3_rf.sad_ctl0).
Adding EN signal on $flatten\ctl_rf.\c3_rf.$verific$prot3_reg$dma_chrf.v:343$15840 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb2 [5], Q = \ctl_rf.c3_rf.prot3).
Adding EN signal on $flatten\ctl_rf.\c3_rf.$verific$prot2_reg$dma_chrf.v:343$15841 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb2 [4], Q = \ctl_rf.c3_rf.prot2).
Adding EN signal on $flatten\ctl_rf.\c3_rf.$verific$prot1_reg$dma_chrf.v:343$15842 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb2 [3], Q = \ctl_rf.c3_rf.prot1).
Adding EN signal on $flatten\ctl_rf.\c3_rf.$verific$mode_reg$dma_chrf.v:431$15877 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb0 [7], Q = \ctl_rf.c3_rf.mode).
Adding EN signal on $flatten\ctl_rf.\c3_rf.$verific$int_tc_msk_reg$dma_chrf.v:306$15825 ($adff) from module dma_top (D = $flatten\ctl_rf.\c3_rf.$verific$n114$15612, Q = \ctl_rf.c3_rf.int_tc_msk).
Adding EN signal on $flatten\ctl_rf.\c3_rf.$verific$int_tc1_msk_reg$dma_chrf.v:500$15924 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb0 [0], Q = \ctl_rf.c3_rf.int_tc1_msk).
Adding EN signal on $flatten\ctl_rf.\c3_rf.$verific$int_err_msk_reg$dma_chrf.v:500$15923 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb0 [1], Q = \ctl_rf.c3_rf.int_err_msk).
Adding EN signal on $flatten\ctl_rf.\c3_rf.$verific$int_abt_msk_reg$dma_chrf.v:500$15922 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb0 [2], Q = \ctl_rf.c3_rf.int_abt_msk).
Adding EN signal on $flatten\ctl_rf.\c3_rf.$verific$dwidth_reg$dma_chrf.v:422$15874 ($adff) from module dma_top (D = $flatten\ctl_rf.\c3_rf.$verific$n261$15710, Q = \ctl_rf.c3_rf.dwidth).
Adding EN signal on $flatten\ctl_rf.\c3_rf.$verific$dst_sel_reg$dma_chrf.v:463$15907 ($adff) from module dma_top (D = $flatten\ctl_rf.\c3_rf.$verific$n309$15661, Q = \ctl_rf.c3_rf.dst_sel).
Adding EN signal on $flatten\ctl_rf.\c3_rf.$verific$dreqmode_reg$dma_chrf.v:326$15833 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb3 [0], Q = \ctl_rf.c3_rf.dreqmode).
Adding EN signal on $flatten\ctl_rf.\c3_rf.$verific$dad_ctl1_reg$dma_chrf.v:463$15904 ($adff) from module dma_top (D = $flatten\ctl_rf.\c3_rf.$verific$n306$15658, Q = \ctl_rf.c3_rf.dad_ctl1).
Adding EN signal on $flatten\ctl_rf.\c3_rf.$verific$dad_ctl0_reg$dma_chrf.v:463$15905 ($adff) from module dma_top (D = $flatten\ctl_rf.\c3_rf.$verific$n307$15659, Q = \ctl_rf.c3_rf.dad_ctl0).
Adding EN signal on $flatten\ctl_rf.\c3_rf.$verific$chtsz_reg$dma_chrf.v:644$16006 ($adff) from module dma_top (D = $flatten\ctl_rf.\c3_rf.$verific$n1218$15757, Q = \ctl_rf.c3_rf.chtsz [7:0]).
Adding EN signal on $flatten\ctl_rf.\c3_rf.$verific$chtsz_reg$dma_chrf.v:644$16006 ($adff) from module dma_top (D = $flatten\ctl_rf.\c3_rf.$verific$n1216$15755, Q = \ctl_rf.c3_rf.chtsz [11:8]).
Adding EN signal on $flatten\ctl_rf.\c3_rf.$verific$chsad_reg$dma_chrf.v:540$15938 ($adff) from module dma_top (D = $flatten\ctl_rf.\c3_rf.$verific$n1195$15737, Q = \ctl_rf.c3_rf.chsad [7:0]).
Adding EN signal on $flatten\ctl_rf.\c3_rf.$verific$chsad_reg$dma_chrf.v:540$15938 ($adff) from module dma_top (D = $flatten\ctl_rf.\c3_rf.$verific$n1193$15735, Q = \ctl_rf.c3_rf.chsad [15:8]).
Adding EN signal on $flatten\ctl_rf.\c3_rf.$verific$chsad_reg$dma_chrf.v:540$15938 ($adff) from module dma_top (D = $flatten\ctl_rf.\c3_rf.$verific$n1191$15733, Q = \ctl_rf.c3_rf.chsad [23:16]).
Adding EN signal on $flatten\ctl_rf.\c3_rf.$verific$chsad_reg$dma_chrf.v:540$15938 ($adff) from module dma_top (D = $flatten\ctl_rf.\c3_rf.$verific$n1189$15731, Q = \ctl_rf.c3_rf.chsad [31:24]).
Adding EN signal on $flatten\ctl_rf.\c3_rf.$verific$chpri_reg$dma_chrf.v:316$15830 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb2 [7:6], Q = \ctl_rf.c3_rf.chpri).
Adding EN signal on $flatten\ctl_rf.\c3_rf.$verific$chllpen_reg$dma_chrf.v:239$15782 ($adff) from module dma_top (D = $flatten\ctl_rf.\c3_rf.$verific$n28$15585, Q = \ctl_rf.c3_rf.chllpen).
Adding EN signal on $flatten\ctl_rf.\c3_rf.$verific$chllp_reg$dma_chrf.v:621$15987 ($adff) from module dma_top (D = $flatten\ctl_rf.\c3_rf.$verific$n1213$15753, Q = \ctl_rf.c3_rf.chllp [7:0]).
Adding EN signal on $flatten\ctl_rf.\c3_rf.$verific$chllp_reg$dma_chrf.v:621$15987 ($adff) from module dma_top (D = $flatten\ctl_rf.\c3_rf.$verific$n1211$15751, Q = \ctl_rf.c3_rf.chllp [15:8]).
Adding EN signal on $flatten\ctl_rf.\c3_rf.$verific$chllp_reg$dma_chrf.v:621$15987 ($adff) from module dma_top (D = $flatten\ctl_rf.\c3_rf.$verific$n1209$15749, Q = \ctl_rf.c3_rf.chllp [23:16]).
Adding EN signal on $flatten\ctl_rf.\c3_rf.$verific$chllp_reg$dma_chrf.v:621$15987 ($adff) from module dma_top (D = $flatten\ctl_rf.\c3_rf.$verific$n1207$15747, Q = \ctl_rf.c3_rf.chllp [31:24]).
Adding EN signal on $flatten\ctl_rf.\c3_rf.$verific$chllp_on_reg$dma_chrf.v:267$15794 ($adff) from module dma_top (D = $flatten\ctl_rf.\c3_rf.$verific$n45$15594, Q = \ctl_rf.c3_rf.chllp_on).
Adding EN signal on $flatten\ctl_rf.\c3_rf.$verific$chllp_cnt_reg$dma_chrf.v:279$15809 ($adff) from module dma_top (D = $flatten\ctl_rf.\c3_rf.$verific$n86$15695, Q = \ctl_rf.c3_rf.chllp_cnt).
Adding EN signal on $flatten\ctl_rf.\c3_rf.$verific$chdad_reg$dma_chrf.v:580$15964 ($adff) from module dma_top (D = $flatten\ctl_rf.\c3_rf.$verific$n1204$15745, Q = \ctl_rf.c3_rf.chdad [7:0]).
Adding EN signal on $flatten\ctl_rf.\c3_rf.$verific$chdad_reg$dma_chrf.v:580$15964 ($adff) from module dma_top (D = $flatten\ctl_rf.\c3_rf.$verific$n1202$15743, Q = \ctl_rf.c3_rf.chdad [15:8]).
Adding EN signal on $flatten\ctl_rf.\c3_rf.$verific$chdad_reg$dma_chrf.v:580$15964 ($adff) from module dma_top (D = $flatten\ctl_rf.\c3_rf.$verific$n1200$15741, Q = \ctl_rf.c3_rf.chdad [23:16]).
Adding EN signal on $flatten\ctl_rf.\c3_rf.$verific$chdad_reg$dma_chrf.v:580$15964 ($adff) from module dma_top (D = $flatten\ctl_rf.\c3_rf.$verific$n1198$15739, Q = \ctl_rf.c3_rf.chdad [31:24]).
Adding EN signal on $flatten\ctl_rf.\c3_rf.$verific$chabt_reg$dma_chrf.v:390$15859 ($adff) from module dma_top (D = $flatten\ctl_rf.\c3_rf.$verific$n198$15631, Q = \ctl_rf.c3_rf.chabt).
Adding EN signal on $flatten\ctl_rf.\c3_rf.$verific$ch_en_reg$dma_chrf.v:480$15916 ($adff) from module dma_top (D = $flatten\ctl_rf.\c3_rf.$verific$n334$15667, Q = \ctl_rf.c3_rf.ch_en).
Adding EN signal on $flatten\ctl_rf.\c3_rf.$verific$autold_reg$dma_chrf.v:400$15863 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb1 [6], Q = \ctl_rf.c3_rf.autold).
Adding EN signal on $flatten\ctl_rf.\c2_rf.$verific$swidth_reg$dma_chrf.v:411$15418 ($adff) from module dma_top (D = $flatten\ctl_rf.\c2_rf.$verific$n231$15255, Q = \ctl_rf.c2_rf.swidth).
Adding EN signal on $flatten\ctl_rf.\c2_rf.$verific$src_sz_reg$dma_chrf.v:352$15395 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb2 [2:0], Q = \ctl_rf.c2_rf.src_sz).
Adding EN signal on $flatten\ctl_rf.\c2_rf.$verific$src_sel_reg$dma_chrf.v:463$15455 ($adff) from module dma_top (D = $flatten\ctl_rf.\c2_rf.$verific$n308$15209, Q = \ctl_rf.c2_rf.src_sel).
Adding EN signal on $flatten\ctl_rf.\c2_rf.$verific$sad_ctl1_reg$dma_chrf.v:463$15451 ($adff) from module dma_top (D = $flatten\ctl_rf.\c2_rf.$verific$n304$15205, Q = \ctl_rf.c2_rf.sad_ctl1).
Adding EN signal on $flatten\ctl_rf.\c2_rf.$verific$sad_ctl0_reg$dma_chrf.v:463$15452 ($adff) from module dma_top (D = $flatten\ctl_rf.\c2_rf.$verific$n305$15206, Q = \ctl_rf.c2_rf.sad_ctl0).
Adding EN signal on $flatten\ctl_rf.\c2_rf.$verific$prot3_reg$dma_chrf.v:343$15389 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb2 [5], Q = \ctl_rf.c2_rf.prot3).
Adding EN signal on $flatten\ctl_rf.\c2_rf.$verific$prot2_reg$dma_chrf.v:343$15390 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb2 [4], Q = \ctl_rf.c2_rf.prot2).
Adding EN signal on $flatten\ctl_rf.\c2_rf.$verific$prot1_reg$dma_chrf.v:343$15391 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb2 [3], Q = \ctl_rf.c2_rf.prot1).
Adding EN signal on $flatten\ctl_rf.\c2_rf.$verific$mode_reg$dma_chrf.v:431$15426 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb0 [7], Q = \ctl_rf.c2_rf.mode).
Adding EN signal on $flatten\ctl_rf.\c2_rf.$verific$int_tc_msk_reg$dma_chrf.v:306$15374 ($adff) from module dma_top (D = $flatten\ctl_rf.\c2_rf.$verific$n114$15161, Q = \ctl_rf.c2_rf.int_tc_msk).
Adding EN signal on $flatten\ctl_rf.\c2_rf.$verific$int_tc1_msk_reg$dma_chrf.v:500$15473 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb0 [0], Q = \ctl_rf.c2_rf.int_tc1_msk).
Adding EN signal on $flatten\ctl_rf.\c2_rf.$verific$int_err_msk_reg$dma_chrf.v:500$15472 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb0 [1], Q = \ctl_rf.c2_rf.int_err_msk).
Adding EN signal on $flatten\ctl_rf.\c2_rf.$verific$int_abt_msk_reg$dma_chrf.v:500$15471 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb0 [2], Q = \ctl_rf.c2_rf.int_abt_msk).
Adding EN signal on $flatten\ctl_rf.\c2_rf.$verific$dwidth_reg$dma_chrf.v:422$15423 ($adff) from module dma_top (D = $flatten\ctl_rf.\c2_rf.$verific$n261$15259, Q = \ctl_rf.c2_rf.dwidth).
Adding EN signal on $flatten\ctl_rf.\c2_rf.$verific$dst_sel_reg$dma_chrf.v:463$15456 ($adff) from module dma_top (D = $flatten\ctl_rf.\c2_rf.$verific$n309$15210, Q = \ctl_rf.c2_rf.dst_sel).
Adding EN signal on $flatten\ctl_rf.\c2_rf.$verific$dreqmode_reg$dma_chrf.v:326$15382 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb3 [0], Q = \ctl_rf.c2_rf.dreqmode).
Adding EN signal on $flatten\ctl_rf.\c2_rf.$verific$dad_ctl1_reg$dma_chrf.v:463$15453 ($adff) from module dma_top (D = $flatten\ctl_rf.\c2_rf.$verific$n306$15207, Q = \ctl_rf.c2_rf.dad_ctl1).
Adding EN signal on $flatten\ctl_rf.\c2_rf.$verific$dad_ctl0_reg$dma_chrf.v:463$15454 ($adff) from module dma_top (D = $flatten\ctl_rf.\c2_rf.$verific$n307$15208, Q = \ctl_rf.c2_rf.dad_ctl0).
Adding EN signal on $flatten\ctl_rf.\c2_rf.$verific$chtsz_reg$dma_chrf.v:644$15555 ($adff) from module dma_top (D = $flatten\ctl_rf.\c2_rf.$verific$n1218$15306, Q = \ctl_rf.c2_rf.chtsz [7:0]).
Adding EN signal on $flatten\ctl_rf.\c2_rf.$verific$chtsz_reg$dma_chrf.v:644$15555 ($adff) from module dma_top (D = $flatten\ctl_rf.\c2_rf.$verific$n1216$15304, Q = \ctl_rf.c2_rf.chtsz [11:8]).
Adding EN signal on $flatten\ctl_rf.\c2_rf.$verific$chsad_reg$dma_chrf.v:540$15487 ($adff) from module dma_top (D = $flatten\ctl_rf.\c2_rf.$verific$n1195$15286, Q = \ctl_rf.c2_rf.chsad [7:0]).
Adding EN signal on $flatten\ctl_rf.\c2_rf.$verific$chsad_reg$dma_chrf.v:540$15487 ($adff) from module dma_top (D = $flatten\ctl_rf.\c2_rf.$verific$n1193$15284, Q = \ctl_rf.c2_rf.chsad [15:8]).
Adding EN signal on $flatten\ctl_rf.\c2_rf.$verific$chsad_reg$dma_chrf.v:540$15487 ($adff) from module dma_top (D = $flatten\ctl_rf.\c2_rf.$verific$n1191$15282, Q = \ctl_rf.c2_rf.chsad [23:16]).
Adding EN signal on $flatten\ctl_rf.\c2_rf.$verific$chsad_reg$dma_chrf.v:540$15487 ($adff) from module dma_top (D = $flatten\ctl_rf.\c2_rf.$verific$n1189$15280, Q = \ctl_rf.c2_rf.chsad [31:24]).
Adding EN signal on $flatten\ctl_rf.\c2_rf.$verific$chpri_reg$dma_chrf.v:316$15379 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb2 [7:6], Q = \ctl_rf.c2_rf.chpri).
Adding EN signal on $flatten\ctl_rf.\c2_rf.$verific$chllpen_reg$dma_chrf.v:239$15331 ($adff) from module dma_top (D = $flatten\ctl_rf.\c2_rf.$verific$n28$15134, Q = \ctl_rf.c2_rf.chllpen).
Adding EN signal on $flatten\ctl_rf.\c2_rf.$verific$chllp_reg$dma_chrf.v:621$15536 ($adff) from module dma_top (D = $flatten\ctl_rf.\c2_rf.$verific$n1213$15302, Q = \ctl_rf.c2_rf.chllp [7:0]).
Adding EN signal on $flatten\ctl_rf.\c2_rf.$verific$chllp_reg$dma_chrf.v:621$15536 ($adff) from module dma_top (D = $flatten\ctl_rf.\c2_rf.$verific$n1211$15300, Q = \ctl_rf.c2_rf.chllp [15:8]).
Adding EN signal on $flatten\ctl_rf.\c2_rf.$verific$chllp_reg$dma_chrf.v:621$15536 ($adff) from module dma_top (D = $flatten\ctl_rf.\c2_rf.$verific$n1209$15298, Q = \ctl_rf.c2_rf.chllp [23:16]).
Adding EN signal on $flatten\ctl_rf.\c2_rf.$verific$chllp_reg$dma_chrf.v:621$15536 ($adff) from module dma_top (D = $flatten\ctl_rf.\c2_rf.$verific$n1207$15296, Q = \ctl_rf.c2_rf.chllp [31:24]).
Adding EN signal on $flatten\ctl_rf.\c2_rf.$verific$chllp_on_reg$dma_chrf.v:267$15343 ($adff) from module dma_top (D = $flatten\ctl_rf.\c2_rf.$verific$n45$15143, Q = \ctl_rf.c2_rf.chllp_on).
Adding EN signal on $flatten\ctl_rf.\c2_rf.$verific$chllp_cnt_reg$dma_chrf.v:279$15358 ($adff) from module dma_top (D = $flatten\ctl_rf.\c2_rf.$verific$n86$15244, Q = \ctl_rf.c2_rf.chllp_cnt).
Adding EN signal on $flatten\ctl_rf.\c2_rf.$verific$chdad_reg$dma_chrf.v:580$15513 ($adff) from module dma_top (D = $flatten\ctl_rf.\c2_rf.$verific$n1204$15294, Q = \ctl_rf.c2_rf.chdad [7:0]).
Adding EN signal on $flatten\ctl_rf.\c2_rf.$verific$chdad_reg$dma_chrf.v:580$15513 ($adff) from module dma_top (D = $flatten\ctl_rf.\c2_rf.$verific$n1202$15292, Q = \ctl_rf.c2_rf.chdad [15:8]).
Adding EN signal on $flatten\ctl_rf.\c2_rf.$verific$chdad_reg$dma_chrf.v:580$15513 ($adff) from module dma_top (D = $flatten\ctl_rf.\c2_rf.$verific$n1200$15290, Q = \ctl_rf.c2_rf.chdad [23:16]).
Adding EN signal on $flatten\ctl_rf.\c2_rf.$verific$chdad_reg$dma_chrf.v:580$15513 ($adff) from module dma_top (D = $flatten\ctl_rf.\c2_rf.$verific$n1198$15288, Q = \ctl_rf.c2_rf.chdad [31:24]).
Adding EN signal on $flatten\ctl_rf.\c2_rf.$verific$chabt_reg$dma_chrf.v:390$15408 ($adff) from module dma_top (D = $flatten\ctl_rf.\c2_rf.$verific$n198$15180, Q = \ctl_rf.c2_rf.chabt).
Adding EN signal on $flatten\ctl_rf.\c2_rf.$verific$ch_en_reg$dma_chrf.v:480$15465 ($adff) from module dma_top (D = $flatten\ctl_rf.\c2_rf.$verific$n334$15216, Q = \ctl_rf.c2_rf.ch_en).
Adding EN signal on $flatten\ctl_rf.\c2_rf.$verific$autold_reg$dma_chrf.v:400$15412 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb1 [6], Q = \ctl_rf.c2_rf.autold).
Adding EN signal on $flatten\ctl_rf.\c1_rf.$verific$swidth_reg$dma_chrf.v:411$14967 ($adff) from module dma_top (D = $flatten\ctl_rf.\c1_rf.$verific$n231$14804, Q = \ctl_rf.c1_rf.swidth).
Adding EN signal on $flatten\ctl_rf.\c1_rf.$verific$src_sz_reg$dma_chrf.v:352$14944 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb2 [2:0], Q = \ctl_rf.c1_rf.src_sz).
Adding EN signal on $flatten\ctl_rf.\c1_rf.$verific$src_sel_reg$dma_chrf.v:463$15004 ($adff) from module dma_top (D = $flatten\ctl_rf.\c1_rf.$verific$n308$14758, Q = \ctl_rf.c1_rf.src_sel).
Adding EN signal on $flatten\ctl_rf.\c1_rf.$verific$sad_ctl1_reg$dma_chrf.v:463$15000 ($adff) from module dma_top (D = $flatten\ctl_rf.\c1_rf.$verific$n304$14754, Q = \ctl_rf.c1_rf.sad_ctl1).
Adding EN signal on $flatten\ctl_rf.\c1_rf.$verific$sad_ctl0_reg$dma_chrf.v:463$15001 ($adff) from module dma_top (D = $flatten\ctl_rf.\c1_rf.$verific$n305$14755, Q = \ctl_rf.c1_rf.sad_ctl0).
Adding EN signal on $flatten\ctl_rf.\c1_rf.$verific$prot3_reg$dma_chrf.v:343$14938 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb2 [5], Q = \ctl_rf.c1_rf.prot3).
Adding EN signal on $flatten\ctl_rf.\c1_rf.$verific$prot2_reg$dma_chrf.v:343$14939 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb2 [4], Q = \ctl_rf.c1_rf.prot2).
Adding EN signal on $flatten\ctl_rf.\c1_rf.$verific$prot1_reg$dma_chrf.v:343$14940 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb2 [3], Q = \ctl_rf.c1_rf.prot1).
Adding EN signal on $flatten\ctl_rf.\c1_rf.$verific$mode_reg$dma_chrf.v:431$14975 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb0 [7], Q = \ctl_rf.c1_rf.mode).
Adding EN signal on $flatten\ctl_rf.\c1_rf.$verific$int_tc_msk_reg$dma_chrf.v:306$14923 ($adff) from module dma_top (D = $flatten\ctl_rf.\c1_rf.$verific$n114$14710, Q = \ctl_rf.c1_rf.int_tc_msk).
Adding EN signal on $flatten\ctl_rf.\c1_rf.$verific$int_tc1_msk_reg$dma_chrf.v:500$15022 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb0 [0], Q = \ctl_rf.c1_rf.int_tc1_msk).
Adding EN signal on $flatten\ctl_rf.\c1_rf.$verific$int_err_msk_reg$dma_chrf.v:500$15021 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb0 [1], Q = \ctl_rf.c1_rf.int_err_msk).
Adding EN signal on $flatten\ctl_rf.\c1_rf.$verific$int_abt_msk_reg$dma_chrf.v:500$15020 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb0 [2], Q = \ctl_rf.c1_rf.int_abt_msk).
Adding EN signal on $flatten\ctl_rf.\c1_rf.$verific$dwidth_reg$dma_chrf.v:422$14972 ($adff) from module dma_top (D = $flatten\ctl_rf.\c1_rf.$verific$n261$14808, Q = \ctl_rf.c1_rf.dwidth).
Adding EN signal on $flatten\ctl_rf.\c1_rf.$verific$dst_sel_reg$dma_chrf.v:463$15005 ($adff) from module dma_top (D = $flatten\ctl_rf.\c1_rf.$verific$n309$14759, Q = \ctl_rf.c1_rf.dst_sel).
Adding EN signal on $flatten\ctl_rf.\c1_rf.$verific$dreqmode_reg$dma_chrf.v:326$14931 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb3 [0], Q = \ctl_rf.c1_rf.dreqmode).
Adding EN signal on $flatten\ctl_rf.\c1_rf.$verific$dad_ctl1_reg$dma_chrf.v:463$15002 ($adff) from module dma_top (D = $flatten\ctl_rf.\c1_rf.$verific$n306$14756, Q = \ctl_rf.c1_rf.dad_ctl1).
Adding EN signal on $flatten\ctl_rf.\c1_rf.$verific$dad_ctl0_reg$dma_chrf.v:463$15003 ($adff) from module dma_top (D = $flatten\ctl_rf.\c1_rf.$verific$n307$14757, Q = \ctl_rf.c1_rf.dad_ctl0).
Adding EN signal on $flatten\ctl_rf.\c1_rf.$verific$chtsz_reg$dma_chrf.v:644$15104 ($adff) from module dma_top (D = $flatten\ctl_rf.\c1_rf.$verific$n1218$14855, Q = \ctl_rf.c1_rf.chtsz [7:0]).
Adding EN signal on $flatten\ctl_rf.\c1_rf.$verific$chtsz_reg$dma_chrf.v:644$15104 ($adff) from module dma_top (D = $flatten\ctl_rf.\c1_rf.$verific$n1216$14853, Q = \ctl_rf.c1_rf.chtsz [11:8]).
Adding EN signal on $flatten\ctl_rf.\c1_rf.$verific$chsad_reg$dma_chrf.v:540$15036 ($adff) from module dma_top (D = $flatten\ctl_rf.\c1_rf.$verific$n1195$14835, Q = \ctl_rf.c1_rf.chsad [7:0]).
Adding EN signal on $flatten\ctl_rf.\c1_rf.$verific$chsad_reg$dma_chrf.v:540$15036 ($adff) from module dma_top (D = $flatten\ctl_rf.\c1_rf.$verific$n1193$14833, Q = \ctl_rf.c1_rf.chsad [15:8]).
Adding EN signal on $flatten\ctl_rf.\c1_rf.$verific$chsad_reg$dma_chrf.v:540$15036 ($adff) from module dma_top (D = $flatten\ctl_rf.\c1_rf.$verific$n1191$14831, Q = \ctl_rf.c1_rf.chsad [23:16]).
Adding EN signal on $flatten\ctl_rf.\c1_rf.$verific$chsad_reg$dma_chrf.v:540$15036 ($adff) from module dma_top (D = $flatten\ctl_rf.\c1_rf.$verific$n1189$14829, Q = \ctl_rf.c1_rf.chsad [31:24]).
Adding EN signal on $flatten\ctl_rf.\c1_rf.$verific$chpri_reg$dma_chrf.v:316$14928 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb2 [7:6], Q = \ctl_rf.c1_rf.chpri).
Adding EN signal on $flatten\ctl_rf.\c1_rf.$verific$chllpen_reg$dma_chrf.v:239$14880 ($adff) from module dma_top (D = $flatten\ctl_rf.\c1_rf.$verific$n28$14683, Q = \ctl_rf.c1_rf.chllpen).
Adding EN signal on $flatten\ctl_rf.\c1_rf.$verific$chllp_reg$dma_chrf.v:621$15085 ($adff) from module dma_top (D = $flatten\ctl_rf.\c1_rf.$verific$n1213$14851, Q = \ctl_rf.c1_rf.chllp [7:0]).
Adding EN signal on $flatten\ctl_rf.\c1_rf.$verific$chllp_reg$dma_chrf.v:621$15085 ($adff) from module dma_top (D = $flatten\ctl_rf.\c1_rf.$verific$n1211$14849, Q = \ctl_rf.c1_rf.chllp [15:8]).
Adding EN signal on $flatten\ctl_rf.\c1_rf.$verific$chllp_reg$dma_chrf.v:621$15085 ($adff) from module dma_top (D = $flatten\ctl_rf.\c1_rf.$verific$n1209$14847, Q = \ctl_rf.c1_rf.chllp [23:16]).
Adding EN signal on $flatten\ctl_rf.\c1_rf.$verific$chllp_reg$dma_chrf.v:621$15085 ($adff) from module dma_top (D = $flatten\ctl_rf.\c1_rf.$verific$n1207$14845, Q = \ctl_rf.c1_rf.chllp [31:24]).
Adding EN signal on $flatten\ctl_rf.\c1_rf.$verific$chllp_on_reg$dma_chrf.v:267$14892 ($adff) from module dma_top (D = $flatten\ctl_rf.\c1_rf.$verific$n45$14692, Q = \ctl_rf.c1_rf.chllp_on).
Adding EN signal on $flatten\ctl_rf.\c1_rf.$verific$chllp_cnt_reg$dma_chrf.v:279$14907 ($adff) from module dma_top (D = $flatten\ctl_rf.\c1_rf.$verific$n86$14793, Q = \ctl_rf.c1_rf.chllp_cnt).
Adding EN signal on $flatten\ctl_rf.\c1_rf.$verific$chdad_reg$dma_chrf.v:580$15062 ($adff) from module dma_top (D = $flatten\ctl_rf.\c1_rf.$verific$n1204$14843, Q = \ctl_rf.c1_rf.chdad [7:0]).
Adding EN signal on $flatten\ctl_rf.\c1_rf.$verific$chdad_reg$dma_chrf.v:580$15062 ($adff) from module dma_top (D = $flatten\ctl_rf.\c1_rf.$verific$n1202$14841, Q = \ctl_rf.c1_rf.chdad [15:8]).
Adding EN signal on $flatten\ctl_rf.\c1_rf.$verific$chdad_reg$dma_chrf.v:580$15062 ($adff) from module dma_top (D = $flatten\ctl_rf.\c1_rf.$verific$n1200$14839, Q = \ctl_rf.c1_rf.chdad [23:16]).
Adding EN signal on $flatten\ctl_rf.\c1_rf.$verific$chdad_reg$dma_chrf.v:580$15062 ($adff) from module dma_top (D = $flatten\ctl_rf.\c1_rf.$verific$n1198$14837, Q = \ctl_rf.c1_rf.chdad [31:24]).
Adding EN signal on $flatten\ctl_rf.\c1_rf.$verific$chabt_reg$dma_chrf.v:390$14957 ($adff) from module dma_top (D = $flatten\ctl_rf.\c1_rf.$verific$n198$14729, Q = \ctl_rf.c1_rf.chabt).
Adding EN signal on $flatten\ctl_rf.\c1_rf.$verific$ch_en_reg$dma_chrf.v:480$15014 ($adff) from module dma_top (D = $flatten\ctl_rf.\c1_rf.$verific$n334$14765, Q = \ctl_rf.c1_rf.ch_en).
Adding EN signal on $flatten\ctl_rf.\c1_rf.$verific$autold_reg$dma_chrf.v:400$14961 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb1 [6], Q = \ctl_rf.c1_rf.autold).
Adding EN signal on $flatten\ctl_rf.\c0_rf.$verific$swidth_reg$dma_chrf.v:411$14516 ($adff) from module dma_top (D = $flatten\ctl_rf.\c0_rf.$verific$n231$14353, Q = \ctl_rf.c0_rf.swidth).
Adding EN signal on $flatten\ctl_rf.\c0_rf.$verific$src_sz_reg$dma_chrf.v:352$14493 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb2 [2:0], Q = \ctl_rf.c0_rf.src_sz).
Adding EN signal on $flatten\ctl_rf.\c0_rf.$verific$src_sel_reg$dma_chrf.v:463$14553 ($adff) from module dma_top (D = $flatten\ctl_rf.\c0_rf.$verific$n308$14307, Q = \ctl_rf.c0_rf.src_sel).
Adding EN signal on $flatten\ctl_rf.\c0_rf.$verific$sad_ctl1_reg$dma_chrf.v:463$14549 ($adff) from module dma_top (D = $flatten\ctl_rf.\c0_rf.$verific$n304$14303, Q = \ctl_rf.c0_rf.sad_ctl1).
Adding EN signal on $flatten\ctl_rf.\c0_rf.$verific$sad_ctl0_reg$dma_chrf.v:463$14550 ($adff) from module dma_top (D = $flatten\ctl_rf.\c0_rf.$verific$n305$14304, Q = \ctl_rf.c0_rf.sad_ctl0).
Adding EN signal on $flatten\ctl_rf.\c0_rf.$verific$prot3_reg$dma_chrf.v:343$14487 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb2 [5], Q = \ctl_rf.c0_rf.prot3).
Adding EN signal on $flatten\ctl_rf.\c0_rf.$verific$prot2_reg$dma_chrf.v:343$14488 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb2 [4], Q = \ctl_rf.c0_rf.prot2).
Adding EN signal on $flatten\ctl_rf.\c0_rf.$verific$prot1_reg$dma_chrf.v:343$14489 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb2 [3], Q = \ctl_rf.c0_rf.prot1).
Adding EN signal on $flatten\ctl_rf.\c0_rf.$verific$mode_reg$dma_chrf.v:431$14524 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb0 [7], Q = \ctl_rf.c0_rf.mode).
Adding EN signal on $flatten\ctl_rf.\c0_rf.$verific$int_tc_msk_reg$dma_chrf.v:306$14472 ($adff) from module dma_top (D = $flatten\ctl_rf.\c0_rf.$verific$n114$14259, Q = \ctl_rf.c0_rf.int_tc_msk).
Adding EN signal on $flatten\ctl_rf.\c0_rf.$verific$int_tc1_msk_reg$dma_chrf.v:500$14571 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb0 [0], Q = \ctl_rf.c0_rf.int_tc1_msk).
Adding EN signal on $flatten\ctl_rf.\c0_rf.$verific$int_err_msk_reg$dma_chrf.v:500$14570 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb0 [1], Q = \ctl_rf.c0_rf.int_err_msk).
Adding EN signal on $flatten\ctl_rf.\c0_rf.$verific$int_abt_msk_reg$dma_chrf.v:500$14569 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb0 [2], Q = \ctl_rf.c0_rf.int_abt_msk).
Adding EN signal on $flatten\ctl_rf.\c0_rf.$verific$dwidth_reg$dma_chrf.v:422$14521 ($adff) from module dma_top (D = $flatten\ctl_rf.\c0_rf.$verific$n261$14357, Q = \ctl_rf.c0_rf.dwidth).
Adding EN signal on $flatten\ctl_rf.\c0_rf.$verific$dst_sel_reg$dma_chrf.v:463$14554 ($adff) from module dma_top (D = $flatten\ctl_rf.\c0_rf.$verific$n309$14308, Q = \ctl_rf.c0_rf.dst_sel).
Adding EN signal on $flatten\ctl_rf.\c0_rf.$verific$dreqmode_reg$dma_chrf.v:326$14480 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb3 [0], Q = \ctl_rf.c0_rf.dreqmode).
Adding EN signal on $flatten\ctl_rf.\c0_rf.$verific$dad_ctl1_reg$dma_chrf.v:463$14551 ($adff) from module dma_top (D = $flatten\ctl_rf.\c0_rf.$verific$n306$14305, Q = \ctl_rf.c0_rf.dad_ctl1).
Adding EN signal on $flatten\ctl_rf.\c0_rf.$verific$dad_ctl0_reg$dma_chrf.v:463$14552 ($adff) from module dma_top (D = $flatten\ctl_rf.\c0_rf.$verific$n307$14306, Q = \ctl_rf.c0_rf.dad_ctl0).
Adding EN signal on $flatten\ctl_rf.\c0_rf.$verific$chtsz_reg$dma_chrf.v:644$14653 ($adff) from module dma_top (D = $flatten\ctl_rf.\c0_rf.$verific$n1218$14404, Q = \ctl_rf.c0_rf.chtsz [7:0]).
Adding EN signal on $flatten\ctl_rf.\c0_rf.$verific$chtsz_reg$dma_chrf.v:644$14653 ($adff) from module dma_top (D = $flatten\ctl_rf.\c0_rf.$verific$n1216$14402, Q = \ctl_rf.c0_rf.chtsz [11:8]).
Adding EN signal on $flatten\ctl_rf.\c0_rf.$verific$chsad_reg$dma_chrf.v:540$14585 ($adff) from module dma_top (D = $flatten\ctl_rf.\c0_rf.$verific$n1195$14384, Q = \ctl_rf.c0_rf.chsad [7:0]).
Adding EN signal on $flatten\ctl_rf.\c0_rf.$verific$chsad_reg$dma_chrf.v:540$14585 ($adff) from module dma_top (D = $flatten\ctl_rf.\c0_rf.$verific$n1193$14382, Q = \ctl_rf.c0_rf.chsad [15:8]).
Adding EN signal on $flatten\ctl_rf.\c0_rf.$verific$chsad_reg$dma_chrf.v:540$14585 ($adff) from module dma_top (D = $flatten\ctl_rf.\c0_rf.$verific$n1191$14380, Q = \ctl_rf.c0_rf.chsad [23:16]).
Adding EN signal on $flatten\ctl_rf.\c0_rf.$verific$chsad_reg$dma_chrf.v:540$14585 ($adff) from module dma_top (D = $flatten\ctl_rf.\c0_rf.$verific$n1189$14378, Q = \ctl_rf.c0_rf.chsad [31:24]).
Adding EN signal on $flatten\ctl_rf.\c0_rf.$verific$chpri_reg$dma_chrf.v:316$14477 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb2 [7:6], Q = \ctl_rf.c0_rf.chpri).
Adding EN signal on $flatten\ctl_rf.\c0_rf.$verific$chllpen_reg$dma_chrf.v:239$14429 ($adff) from module dma_top (D = $flatten\ctl_rf.\c0_rf.$verific$n28$14232, Q = \ctl_rf.c0_rf.chllpen).
Adding EN signal on $flatten\ctl_rf.\c0_rf.$verific$chllp_reg$dma_chrf.v:621$14634 ($adff) from module dma_top (D = $flatten\ctl_rf.\c0_rf.$verific$n1213$14400, Q = \ctl_rf.c0_rf.chllp [7:0]).
Adding EN signal on $flatten\ctl_rf.\c0_rf.$verific$chllp_reg$dma_chrf.v:621$14634 ($adff) from module dma_top (D = $flatten\ctl_rf.\c0_rf.$verific$n1211$14398, Q = \ctl_rf.c0_rf.chllp [15:8]).
Adding EN signal on $flatten\ctl_rf.\c0_rf.$verific$chllp_reg$dma_chrf.v:621$14634 ($adff) from module dma_top (D = $flatten\ctl_rf.\c0_rf.$verific$n1209$14396, Q = \ctl_rf.c0_rf.chllp [23:16]).
Adding EN signal on $flatten\ctl_rf.\c0_rf.$verific$chllp_reg$dma_chrf.v:621$14634 ($adff) from module dma_top (D = $flatten\ctl_rf.\c0_rf.$verific$n1207$14394, Q = \ctl_rf.c0_rf.chllp [31:24]).
Adding EN signal on $flatten\ctl_rf.\c0_rf.$verific$chllp_on_reg$dma_chrf.v:267$14441 ($adff) from module dma_top (D = $flatten\ctl_rf.\c0_rf.$verific$n45$14241, Q = \ctl_rf.c0_rf.chllp_on).
Adding EN signal on $flatten\ctl_rf.\c0_rf.$verific$chllp_cnt_reg$dma_chrf.v:279$14456 ($adff) from module dma_top (D = $flatten\ctl_rf.\c0_rf.$verific$n86$14342, Q = \ctl_rf.c0_rf.chllp_cnt).
Adding EN signal on $flatten\ctl_rf.\c0_rf.$verific$chdad_reg$dma_chrf.v:580$14611 ($adff) from module dma_top (D = $flatten\ctl_rf.\c0_rf.$verific$n1204$14392, Q = \ctl_rf.c0_rf.chdad [7:0]).
Adding EN signal on $flatten\ctl_rf.\c0_rf.$verific$chdad_reg$dma_chrf.v:580$14611 ($adff) from module dma_top (D = $flatten\ctl_rf.\c0_rf.$verific$n1202$14390, Q = \ctl_rf.c0_rf.chdad [15:8]).
Adding EN signal on $flatten\ctl_rf.\c0_rf.$verific$chdad_reg$dma_chrf.v:580$14611 ($adff) from module dma_top (D = $flatten\ctl_rf.\c0_rf.$verific$n1200$14388, Q = \ctl_rf.c0_rf.chdad [23:16]).
Adding EN signal on $flatten\ctl_rf.\c0_rf.$verific$chdad_reg$dma_chrf.v:580$14611 ($adff) from module dma_top (D = $flatten\ctl_rf.\c0_rf.$verific$n1198$14386, Q = \ctl_rf.c0_rf.chdad [31:24]).
Adding EN signal on $flatten\ctl_rf.\c0_rf.$verific$chabt_reg$dma_chrf.v:390$14506 ($adff) from module dma_top (D = $flatten\ctl_rf.\c0_rf.$verific$n198$14278, Q = \ctl_rf.c0_rf.chabt).
Adding EN signal on $flatten\ctl_rf.\c0_rf.$verific$ch_en_reg$dma_chrf.v:480$14563 ($adff) from module dma_top (D = $flatten\ctl_rf.\c0_rf.$verific$n334$14314, Q = \ctl_rf.c0_rf.ch_en).
Adding EN signal on $flatten\ctl_rf.\c0_rf.$verific$autold_reg$dma_chrf.v:400$14510 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb1 [6], Q = \ctl_rf.c0_rf.autold).
Adding EN signal on $flatten\ctl_rf.$verific$tc_reg$dma_ctlrf.v:1902$10408 ($adff) from module dma_top (D = $flatten\ctl_rf.$verific$n3755$9644, Q = \ctl_rf.tc [0]).
Adding EN signal on $flatten\ctl_rf.$verific$tc_reg$dma_ctlrf.v:1902$10408 ($adff) from module dma_top (D = $flatten\ctl_rf.$verific$n3764$9646, Q = \ctl_rf.tc [1]).
Adding EN signal on $flatten\ctl_rf.$verific$tc_reg$dma_ctlrf.v:1902$10408 ($adff) from module dma_top (D = $flatten\ctl_rf.$verific$n3773$9648, Q = \ctl_rf.tc [2]).
Adding EN signal on $flatten\ctl_rf.$verific$tc_reg$dma_ctlrf.v:1902$10408 ($adff) from module dma_top (D = $flatten\ctl_rf.$verific$n3782$9650, Q = \ctl_rf.tc [3]).
Adding EN signal on $flatten\ctl_rf.$verific$tc_reg$dma_ctlrf.v:1902$10408 ($adff) from module dma_top (D = $flatten\ctl_rf.$verific$n3791$9652, Q = \ctl_rf.tc [4]).
Adding EN signal on $flatten\ctl_rf.$verific$tc_reg$dma_ctlrf.v:1902$10408 ($adff) from module dma_top (D = $flatten\ctl_rf.$verific$n3800$9654, Q = \ctl_rf.tc [5]).
Adding EN signal on $flatten\ctl_rf.$verific$tc_reg$dma_ctlrf.v:1902$10408 ($adff) from module dma_top (D = $flatten\ctl_rf.$verific$n3809$9656, Q = \ctl_rf.tc [6]).
Adding EN signal on $flatten\ctl_rf.$verific$tc_reg$dma_ctlrf.v:1902$10408 ($adff) from module dma_top (D = $flatten\ctl_rf.$verific$n3818$9658, Q = \ctl_rf.tc [7]).
Adding EN signal on $flatten\ctl_rf.$verific$sync_reg$dma_ctlrf.v:2281$10428 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb0, Q = \ctl_rf.sync).
Adding EN signal on $flatten\ctl_rf.$verific$m1end_reg$dma_ctlrf.v:2257$10415 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb0 [2], Q = \ctl_rf.m1end).
Adding EN signal on $flatten\ctl_rf.$verific$m0end_reg$dma_ctlrf.v:2263$10418 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb0 [1], Q = \ctl_rf.m0end).
Adding EN signal on $flatten\ctl_rf.$verific$err_reg$dma_ctlrf.v:2224$9948 ($adff) from module dma_top (D = $flatten\ctl_rf.$verific$n3923$9668, Q = \ctl_rf.err [0]).
Adding EN signal on $flatten\ctl_rf.$verific$err_reg$dma_ctlrf.v:2224$9948 ($adff) from module dma_top (D = $flatten\ctl_rf.$verific$n3941$9672, Q = \ctl_rf.err [1]).
Adding EN signal on $flatten\ctl_rf.$verific$err_reg$dma_ctlrf.v:2224$9948 ($adff) from module dma_top (D = $flatten\ctl_rf.$verific$n3959$9676, Q = \ctl_rf.err [2]).
Adding EN signal on $flatten\ctl_rf.$verific$err_reg$dma_ctlrf.v:2224$9948 ($adff) from module dma_top (D = $flatten\ctl_rf.$verific$n3977$9680, Q = \ctl_rf.err [3]).
Adding EN signal on $flatten\ctl_rf.$verific$err_reg$dma_ctlrf.v:2224$9948 ($adff) from module dma_top (D = $flatten\ctl_rf.$verific$n3995$9684, Q = \ctl_rf.err [4]).
Adding EN signal on $flatten\ctl_rf.$verific$err_reg$dma_ctlrf.v:2224$9948 ($adff) from module dma_top (D = $flatten\ctl_rf.$verific$n4013$9688, Q = \ctl_rf.err [5]).
Adding EN signal on $flatten\ctl_rf.$verific$err_reg$dma_ctlrf.v:2224$9948 ($adff) from module dma_top (D = $flatten\ctl_rf.$verific$n4031$9692, Q = \ctl_rf.err [6]).
Adding EN signal on $flatten\ctl_rf.$verific$err_reg$dma_ctlrf.v:2224$9948 ($adff) from module dma_top (D = $flatten\ctl_rf.$verific$n4049$9696, Q = \ctl_rf.err [7]).
Adding EN signal on $flatten\ctl_rf.$verific$dmacen_reg$dma_ctlrf.v:2269$10421 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb0 [0], Q = \ctl_rf.dmacen).
Adding EN signal on $flatten\ctl_rf.$verific$c7dmabs_reg$dma_ctlrf.v:2420$10484 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb3, Q = \ctl_rf.c7dmabs [15:8]).
Adding EN signal on $flatten\ctl_rf.$verific$c7dmabs_reg$dma_ctlrf.v:2420$10484 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb2, Q = \ctl_rf.c7dmabs [7:0]).
Adding EN signal on $flatten\ctl_rf.$verific$c7brbs_reg$dma_ctlrf.v:2557$10540 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb3, Q = \ctl_rf.c7brbs [15:8]).
Adding EN signal on $flatten\ctl_rf.$verific$c7brbs_reg$dma_ctlrf.v:2557$10540 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb2, Q = \ctl_rf.c7brbs [7:0]).
Adding EN signal on $flatten\ctl_rf.$verific$c6dmabs_reg$dma_ctlrf.v:2403$10477 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb3, Q = \ctl_rf.c6dmabs [15:8]).
Adding EN signal on $flatten\ctl_rf.$verific$c6dmabs_reg$dma_ctlrf.v:2403$10477 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb2, Q = \ctl_rf.c6dmabs [7:0]).
Adding EN signal on $flatten\ctl_rf.$verific$c6brbs_reg$dma_ctlrf.v:2540$10533 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb3, Q = \ctl_rf.c6brbs [15:8]).
Adding EN signal on $flatten\ctl_rf.$verific$c6brbs_reg$dma_ctlrf.v:2540$10533 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb2, Q = \ctl_rf.c6brbs [7:0]).
Adding EN signal on $flatten\ctl_rf.$verific$c5dmabs_reg$dma_ctlrf.v:2386$10470 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb3, Q = \ctl_rf.c5dmabs [15:8]).
Adding EN signal on $flatten\ctl_rf.$verific$c5dmabs_reg$dma_ctlrf.v:2386$10470 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb2, Q = \ctl_rf.c5dmabs [7:0]).
Adding EN signal on $flatten\ctl_rf.$verific$c5brbs_reg$dma_ctlrf.v:2523$10526 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb3, Q = \ctl_rf.c5brbs [15:8]).
Adding EN signal on $flatten\ctl_rf.$verific$c5brbs_reg$dma_ctlrf.v:2523$10526 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb2, Q = \ctl_rf.c5brbs [7:0]).
Adding EN signal on $flatten\ctl_rf.$verific$c4dmabs_reg$dma_ctlrf.v:2369$10463 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb3, Q = \ctl_rf.c4dmabs [15:8]).
Adding EN signal on $flatten\ctl_rf.$verific$c4dmabs_reg$dma_ctlrf.v:2369$10463 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb2, Q = \ctl_rf.c4dmabs [7:0]).
Adding EN signal on $flatten\ctl_rf.$verific$c4brbs_reg$dma_ctlrf.v:2506$10519 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb3, Q = \ctl_rf.c4brbs [15:8]).
Adding EN signal on $flatten\ctl_rf.$verific$c4brbs_reg$dma_ctlrf.v:2506$10519 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb2, Q = \ctl_rf.c4brbs [7:0]).
Adding EN signal on $flatten\ctl_rf.$verific$c3dmabs_reg$dma_ctlrf.v:2352$10456 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb3, Q = \ctl_rf.c3dmabs [15:8]).
Adding EN signal on $flatten\ctl_rf.$verific$c3dmabs_reg$dma_ctlrf.v:2352$10456 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb2, Q = \ctl_rf.c3dmabs [7:0]).
Adding EN signal on $flatten\ctl_rf.$verific$c3brbs_reg$dma_ctlrf.v:2489$10512 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb3, Q = \ctl_rf.c3brbs [15:8]).
Adding EN signal on $flatten\ctl_rf.$verific$c3brbs_reg$dma_ctlrf.v:2489$10512 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb2, Q = \ctl_rf.c3brbs [7:0]).
Adding EN signal on $flatten\ctl_rf.$verific$c2dmabs_reg$dma_ctlrf.v:2335$10449 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb3, Q = \ctl_rf.c2dmabs [15:8]).
Adding EN signal on $flatten\ctl_rf.$verific$c2dmabs_reg$dma_ctlrf.v:2335$10449 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb2, Q = \ctl_rf.c2dmabs [7:0]).
Adding EN signal on $flatten\ctl_rf.$verific$c2brbs_reg$dma_ctlrf.v:2472$10505 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb3, Q = \ctl_rf.c2brbs [15:8]).
Adding EN signal on $flatten\ctl_rf.$verific$c2brbs_reg$dma_ctlrf.v:2472$10505 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb2, Q = \ctl_rf.c2brbs [7:0]).
Adding EN signal on $flatten\ctl_rf.$verific$c1dmabs_reg$dma_ctlrf.v:2318$10442 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb3, Q = \ctl_rf.c1dmabs [15:8]).
Adding EN signal on $flatten\ctl_rf.$verific$c1dmabs_reg$dma_ctlrf.v:2318$10442 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb2, Q = \ctl_rf.c1dmabs [7:0]).
Adding EN signal on $flatten\ctl_rf.$verific$c1brbs_reg$dma_ctlrf.v:2455$10498 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb3, Q = \ctl_rf.c1brbs [15:8]).
Adding EN signal on $flatten\ctl_rf.$verific$c1brbs_reg$dma_ctlrf.v:2455$10498 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb2, Q = \ctl_rf.c1brbs [7:0]).
Adding EN signal on $flatten\ctl_rf.$verific$c0dmabs_reg$dma_ctlrf.v:2302$10434 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb3, Q = \ctl_rf.c0dmabs [15:8]).
Adding EN signal on $flatten\ctl_rf.$verific$c0dmabs_reg$dma_ctlrf.v:2302$10434 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb2, Q = \ctl_rf.c0dmabs [7:0]).
Adding EN signal on $flatten\ctl_rf.$verific$c0brbs_reg$dma_ctlrf.v:2439$10491 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb3, Q = \ctl_rf.c0brbs [15:8]).
Adding EN signal on $flatten\ctl_rf.$verific$c0brbs_reg$dma_ctlrf.v:2439$10491 ($adff) from module dma_top (D = \ahb_slv.s_rgdtb2, Q = \ctl_rf.c0brbs [7:0]).
Adding EN signal on $flatten\ctl_rf.$verific$abt_reg$dma_ctlrf.v:2233$10405 ($adff) from module dma_top (D = $flatten\ctl_rf.$verific$n3932$9670, Q = \ctl_rf.abt [0]).
Adding EN signal on $flatten\ctl_rf.$verific$abt_reg$dma_ctlrf.v:2233$10405 ($adff) from module dma_top (D = $flatten\ctl_rf.$verific$n3950$9674, Q = \ctl_rf.abt [1]).
Adding EN signal on $flatten\ctl_rf.$verific$abt_reg$dma_ctlrf.v:2233$10405 ($adff) from module dma_top (D = $flatten\ctl_rf.$verific$n3968$9678, Q = \ctl_rf.abt [2]).
Adding EN signal on $flatten\ctl_rf.$verific$abt_reg$dma_ctlrf.v:2233$10405 ($adff) from module dma_top (D = $flatten\ctl_rf.$verific$n3986$9682, Q = \ctl_rf.abt [3]).
Adding EN signal on $flatten\ctl_rf.$verific$abt_reg$dma_ctlrf.v:2233$10405 ($adff) from module dma_top (D = $flatten\ctl_rf.$verific$n4004$9686, Q = \ctl_rf.abt [4]).
Adding EN signal on $flatten\ctl_rf.$verific$abt_reg$dma_ctlrf.v:2233$10405 ($adff) from module dma_top (D = $flatten\ctl_rf.$verific$n4022$9690, Q = \ctl_rf.abt [5]).
Adding EN signal on $flatten\ctl_rf.$verific$abt_reg$dma_ctlrf.v:2233$10405 ($adff) from module dma_top (D = $flatten\ctl_rf.$verific$n4040$9694, Q = \ctl_rf.abt [6]).
Adding EN signal on $flatten\ctl_rf.$verific$abt_reg$dma_ctlrf.v:2233$10405 ($adff) from module dma_top (D = $flatten\ctl_rf.$verific$n4058$9698, Q = \ctl_rf.abt [7]).
Adding EN signal on $flatten\ch_sel.$verific$fix_pri_sel_reg$dma_chsel.v:848$13965 ($adff) from module dma_top (D = { 1'0 \ch_sel.fix_pri_sx }, Q = \ch_sel.fix_pri_sel).
Adding EN signal on $flatten\ch_sel.$verific$arb_req_reg$dma_chsel.v:890$13999 ($adff) from module dma_top (D = $flatten\ch_sel.$verific$n500$13622, Q = \ch_sel.arb_req).
Adding EN signal on $flatten\ahb_slv.$verific$slv_wr_d1o_reg$dma_ahbslv.v:274$18114 ($adff) from module dma_top (D = \hwrite, Q = \ahb_slv.slv_wr_d1o).
Adding EN signal on $flatten\ahb_slv.$verific$slv_sz_d1o_reg$dma_ahbslv.v:268$18109 ($adff) from module dma_top (D = \hsize, Q = \ahb_slv.slv_sz_d1o).
Adding EN signal on $flatten\ahb_slv.$verific$slv_pt_d1o_reg$dma_ahbslv.v:268$18110 ($adff) from module dma_top (D = \hprot, Q = \ahb_slv.slv_pt_d1o).
Adding EN signal on $flatten\ahb_slv.$verific$slv_br_req_reg$dma_ahbslv.v:366$18179 ($adff) from module dma_top (D = $flatten\ahb_slv.$verific$n661$17998, Q = \ahb_slv.slv_br_req).
Adding EN signal on $flatten\ahb_slv.$verific$slv_ad_d1o_reg$dma_ahbslv.v:268$18108 ($adff) from module dma_top (D = \haddr, Q = \ahb_slv.slv_ad_d1o).
Adding EN signal on $flatten\ahb_slv.$verific$hresp_br_reg$dma_ahbslv.v:448$18229 ($adff) from module dma_top (D = $flatten\ahb_slv.$verific$n758$18065, Q = \ahb_slv.hresp_br).
Adding EN signal on $flatten\ahb_slv.$verific$hreadyout_br_reg$dma_ahbslv.v:435$18222 ($adff) from module dma_top (D = $flatten\ahb_slv.$verific$n735$18024, Q = \ahb_slv.hreadyout_br).
Adding EN signal on $flatten\ahb_slv.$verific$hrdata_reg_reg$dma_ahbslv.v:346$18169 ($adff) from module dma_top (D = { \ahb_slv.hrdtgb3 \ahb_slv.hrdtgb2 \ahb_slv.hrdtgb1 \ahb_slv.hrdtgb0 }, Q = \ahb_slv.hrdata_reg).
Adding EN signal on $flatten\ahb_slv.$verific$hrdata_br_reg$dma_ahbslv.v:492$18264 ($adff) from module dma_top (D = { \ahb_slv.h1rdtib3 \ahb_slv.h1rdtib2 \ahb_slv.h1rdtib1 \ahb_slv.h1rdtib0 }, Q = \ahb_slv.hrdata_br).
Adding EN signal on $flatten\ahb_mst1.$verific$mx_dtp_reg$dma_ahbmst.v:596$8584 ($adff) from module dma_top (D = \ahb_mst1.mx_cmd_st [1], Q = \ahb_mst1.mx_dtp).
Adding EN signal on $flatten\ahb_mst1.$verific$mx_dma_had_a_rty_reg$dma_ahbmst.v:1209$8858 ($adff) from module dma_top (D = $flatten\ahb_mst1.$verific$n4101$8324, Q = \ahb_mst1.mx_dma_had_a_rty).
Adding EN signal on $flatten\ahb_mst1.$verific$mx_ad1t0x_reg$dma_ahbmst.v:1111$8803 ($adff) from module dma_top (D = \ahb_mst1.haddro [1:0], Q = \ahb_mst1.mx_ad1t0x).
Adding EN signal on $flatten\ahb_mst1.$verific$m0_m1_diff_tx_reg$dma_ahbmst.v:926$8695 ($adff) from module dma_top (D = $flatten\ahb_mst1.$verific$n3100$8204, Q = \ahb_mst1.m0_m1_diff_tx).
Adding SRST signal on $flatten\ahb_mst1.$verific$inc_selx_reg$dma_ahbmst.v:1045$8780 ($dff) from module dma_top (D = \ahb_mst1.inc_sel, Q = \ahb_mst1.inc_selx, rval = 3'011).
Adding EN signal on $flatten\ahb_mst1.$verific$hwriteo_reg$dma_ahbmst.v:671$8622 ($adff) from module dma_top (D = $flatten\ahb_mst1.$verific$n2380$8181, Q = \ahb_mst1.hwriteo).
Adding EN signal on $flatten\ahb_mst1.$verific$hwdatao_reg$dma_ahbmst.v:893$8681 ($adff) from module dma_top (D = \ahb_mst1.mux_wdt, Q = \ahb_mst1.hwdatao).
Adding EN signal on $flatten\ahb_mst1.$verific$hsizeo_reg$dma_ahbmst.v:726$8641 ($adff) from module dma_top (D = \ahb_mst1.hsizeq [1:0], Q = \ahb_mst1.hsizeo [1:0]).
Adding EN signal on $flatten\ahb_mst1.$verific$hsizeo_reg$dma_ahbmst.v:726$8641 ($adff) from module dma_top (D = \ahb_mst1.hsizeq [2], Q = \ahb_mst1.hsizeo [2]).
Adding EN signal on $flatten\ahb_mst1.$verific$hproto_reg$dma_ahbmst.v:783$8647 ($adff) from module dma_top (D = \ahb_mst1.mux_prot, Q = \ahb_mst1.hproto).
Adding EN signal on $flatten\ahb_mst1.$verific$hbursto_reg$dma_ahbmst.v:811$8659 ($adff) from module dma_top (D = { 2'00 \ahb_mst1.mux_bst [0] }, Q = \ahb_mst1.hbursto).
Adding EN signal on $flatten\ahb_mst1.$verific$haddro_reg$dma_ahbmst.v:987$8732 ($adff) from module dma_top (D = \ahb_mst1.mux_ad [15:0], Q = \ahb_mst1.haddro [15:0]).
Adding EN signal on $flatten\ahb_mst1.$verific$haddro_reg$dma_ahbmst.v:987$8732 ($adff) from module dma_top (D = \ahb_mst1.mux_ad [31:16], Q = \ahb_mst1.haddro [31:16]).
Adding EN signal on $flatten\ahb_mst1.$verific$adin_is_neg_reg$dma_ahbmst.v:1094$8791 ($adff) from module dma_top (D = \ahb_mst1.ad_addin2 [16], Q = \ahb_mst1.adin_is_neg).
Adding EN signal on $flatten\ahb_mst0.$verific$mx_dtp_reg$dma_ahbmst.v:596$7861 ($adff) from module dma_top (D = \ahb_mst0.mx_cmd_st [1], Q = \ahb_mst0.mx_dtp).
Adding EN signal on $flatten\ahb_mst0.$verific$mx_dma_had_a_rty_reg$dma_ahbmst.v:1209$8117 ($adff) from module dma_top (D = $flatten\ahb_mst0.$verific$n3659$7623, Q = \ahb_mst0.mx_dma_had_a_rty).
Adding EN signal on $flatten\ahb_mst0.$verific$mx_ad1t0x_reg$dma_ahbmst.v:1111$8065 ($adff) from module dma_top (D = \ahb_mst0.haddro [1:0], Q = \ahb_mst0.mx_ad1t0x).
Adding EN signal on $flatten\ahb_mst0.$verific$m0_m1_diff_tx_reg$dma_ahbmst.v:926$7957 ($adff) from module dma_top (D = $flatten\ahb_mst0.$verific$n2662$7505, Q = \ahb_mst0.m0_m1_diff_tx).
Adding SRST signal on $flatten\ahb_mst0.$verific$inc_selx_reg$dma_ahbmst.v:1045$8042 ($dff) from module dma_top (D = \ahb_mst0.inc_sel, Q = \ahb_mst0.inc_selx, rval = 3'011).
Adding EN signal on $flatten\ahb_mst0.$verific$hwriteo_reg$dma_ahbmst.v:671$7885 ($adff) from module dma_top (D = $flatten\ahb_mst0.$verific$n1980$7482, Q = \ahb_mst0.hwriteo).
Adding EN signal on $flatten\ahb_mst0.$verific$hwdatao_reg$dma_ahbmst.v:893$7943 ($adff) from module dma_top (D = \ahb_mst0.mux_wdt, Q = \ahb_mst0.hwdatao).
Adding EN signal on $flatten\ahb_mst0.$verific$hsizeo_reg$dma_ahbmst.v:726$7904 ($adff) from module dma_top (D = \ahb_mst0.hsizep [1:0], Q = \ahb_mst0.hsizeo [1:0]).
Adding EN signal on $flatten\ahb_mst0.$verific$hsizeo_reg$dma_ahbmst.v:726$7904 ($adff) from module dma_top (D = \ahb_mst0.hsizep [2], Q = \ahb_mst0.hsizeo [2]).
Adding EN signal on $flatten\ahb_mst0.$verific$hreqo_reg$dma_ahbmst.v:1174$8105 ($adff) from module dma_top (D = $flatten\ahb_mst0.$verific$n3638$7615, Q = \ahb_mst0.hreqo).
Adding EN signal on $flatten\ahb_mst0.$verific$hproto_reg$dma_ahbmst.v:783$7909 ($adff) from module dma_top (D = { \ch_sel.arb_chcsr_reg [20:18] 1'0 }, Q = \ahb_mst0.hproto).
Adding EN signal on $flatten\ahb_mst0.$verific$hbursto_reg$dma_ahbmst.v:811$7921 ($adff) from module dma_top (D = { 2'00 \ahb_mst0.mux_bst [0] }, Q = \ahb_mst0.hbursto).
Adding EN signal on $flatten\ahb_mst0.$verific$haddro_reg$dma_ahbmst.v:987$7994 ($adff) from module dma_top (D = \ahb_mst0.mux_ad [31:16], Q = \ahb_mst0.haddro [31:16]).
Adding EN signal on $flatten\ahb_mst0.$verific$haddro_reg$dma_ahbmst.v:987$7994 ($adff) from module dma_top (D = \ahb_mst0.mux_ad [15:0], Q = \ahb_mst0.haddro [15:0]).
Adding EN signal on $flatten\ahb_mst0.$verific$adin_is_neg_reg$dma_ahbmst.v:1094$8053 ($adff) from module dma_top (D = \ahb_mst0.ad_addin2 [16], Q = \ahb_mst0.adin_is_neg).
Setting constant 0-bit at position 1 on $auto$ff.cc:262:slice$19827 ($adffe) from module dma_top.
Setting constant 0-bit at position 2 on $auto$ff.cc:262:slice$19827 ($adffe) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$19826 ($adffe) from module dma_top.
Setting constant 0-bit at position 0 on $flatten\ahb_mst0.$verific$mx_dt_st_reg$dma_ahbmst.v:607$7870 ($adff) from module dma_top.
Setting constant 0-bit at position 1 on $auto$ff.cc:262:slice$19790 ($adffe) from module dma_top.
Setting constant 0-bit at position 2 on $auto$ff.cc:262:slice$19790 ($adffe) from module dma_top.
Setting constant 0-bit at position 0 on $flatten\ahb_mst1.$verific$mx_dt_st_reg$dma_ahbmst.v:607$8593 ($adff) from module dma_top.
Setting constant 0-bit at position 2 on $auto$ff.cc:262:slice$19751 ($adffe) from module dma_top.
Setting constant 0-bit at position 1 on $auto$ff.cc:262:slice$18829 ($adffe) from module dma_top.

yosys> opt_clean

3.11.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dma_top..
Removed 166 unused cells and 166 unused wires.
<suppressed ~173 debug messages>

yosys> opt_expr

3.11.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module dma_top.
<suppressed ~829 debug messages>

3.11.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.11.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dma_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux $flatten\ahb_mst0.$verific$mux_429$dma_ahbmst.v:1099$8059.
    dead port 2/2 on $mux $flatten\ahb_mst0.$verific$mux_429$dma_ahbmst.v:1099$8059.
    dead port 1/2 on $mux $flatten\ahb_mst0.$verific$mux_430$dma_ahbmst.v:1100$8060.
    dead port 2/2 on $mux $flatten\ahb_mst0.$verific$mux_430$dma_ahbmst.v:1100$8060.
    dead port 1/2 on $mux $flatten\ahb_mst1.$verific$mux_447$dma_ahbmst.v:1099$8797.
    dead port 2/2 on $mux $flatten\ahb_mst1.$verific$mux_447$dma_ahbmst.v:1099$8797.
    dead port 1/2 on $mux $flatten\ahb_mst1.$verific$mux_448$dma_ahbmst.v:1100$8798.
    dead port 2/2 on $mux $flatten\ahb_mst1.$verific$mux_448$dma_ahbmst.v:1100$8798.
    dead port 1/2 on $mux $flatten\de.$verific$mux_27$dma_engine.v:645$6901.
    dead port 2/2 on $mux $flatten\de.$verific$mux_27$dma_engine.v:645$6901.
    dead port 1/2 on $mux $flatten\de.$verific$mux_461$dma_engine.v:1375$7248.
    dead port 2/2 on $mux $flatten\de.$verific$mux_461$dma_engine.v:1375$7248.
    dead port 1/2 on $mux $flatten\de.$verific$mux_463$dma_engine.v:1376$7250.
    dead port 2/2 on $mux $flatten\de.$verific$mux_463$dma_engine.v:1376$7250.
    dead port 1/2 on $mux $flatten\de.$verific$mux_467$dma_engine.v:1382$7255.
    dead port 2/2 on $mux $flatten\de.$verific$mux_467$dma_engine.v:1382$7255.
    dead port 1/2 on $mux $flatten\de.$verific$mux_470$dma_engine.v:1393$7258.
    dead port 2/2 on $mux $flatten\de.$verific$mux_470$dma_engine.v:1393$7258.
    dead port 1/2 on $mux $flatten\de.$verific$mux_472$dma_engine.v:1398$7260.
    dead port 2/2 on $mux $flatten\de.$verific$mux_472$dma_engine.v:1398$7260.
    dead port 1/2 on $mux $flatten\de.$verific$mux_475$dma_engine.v:1408$7263.
    dead port 2/2 on $mux $flatten\de.$verific$mux_475$dma_engine.v:1408$7263.
Removed 22 multiplexer ports.
<suppressed ~378 debug messages>

yosys> opt_reduce

3.11.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dma_top.
Performed a total of 0 changes.

yosys> opt_merge

3.11.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dma_top'.
<suppressed ~33 debug messages>
Removed a total of 11 cells.

yosys> opt_dff -sat

3.11.13. Executing OPT_DFF pass (perform DFF optimizations).
Handling never-active EN on $auto$ff.cc:262:slice$18847 ($adffe) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$18846 ($adffe) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$18849 ($adffe) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$18848 ($adffe) from module dma_top (removing D path).
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$18848 ($dlatch) from module dma_top.
Setting constant 0-bit at position 1 on $auto$ff.cc:262:slice$18848 ($dlatch) from module dma_top.
Setting constant 0-bit at position 2 on $auto$ff.cc:262:slice$18848 ($dlatch) from module dma_top.
Setting constant 0-bit at position 3 on $auto$ff.cc:262:slice$18848 ($dlatch) from module dma_top.
Setting constant 0-bit at position 4 on $auto$ff.cc:262:slice$18848 ($dlatch) from module dma_top.
Setting constant 0-bit at position 5 on $auto$ff.cc:262:slice$18848 ($dlatch) from module dma_top.
Setting constant 0-bit at position 6 on $auto$ff.cc:262:slice$18848 ($dlatch) from module dma_top.
Setting constant 0-bit at position 7 on $auto$ff.cc:262:slice$18848 ($dlatch) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$19771 ($adffe) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$19805 ($adffe) from module dma_top.
Setting constant 0-bit at position 3 on $flatten\de.$verific$de_st_reg$dma_engine.v:911$7042 ($adff) from module dma_top.
Setting constant 0-bit at position 4 on $flatten\de.$verific$de_st_reg$dma_engine.v:911$7042 ($adff) from module dma_top.
Setting constant 0-bit at position 7 on $flatten\de.$verific$de_st_reg$dma_engine.v:911$7042 ($adff) from module dma_top.
Setting constant 0-bit at position 8 on $flatten\de.$verific$de_st_reg$dma_engine.v:911$7042 ($adff) from module dma_top.
Setting constant 0-bit at position 9 on $flatten\de.$verific$de_st_reg$dma_engine.v:911$7042 ($adff) from module dma_top.
Setting constant 0-bit at position 10 on $flatten\de.$verific$de_st_reg$dma_engine.v:911$7042 ($adff) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$18840 ($adffe) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$18849 ($dlatch) from module dma_top.
Setting constant 0-bit at position 1 on $auto$ff.cc:262:slice$18849 ($dlatch) from module dma_top.
Setting constant 0-bit at position 2 on $auto$ff.cc:262:slice$18849 ($dlatch) from module dma_top.
Setting constant 0-bit at position 3 on $auto$ff.cc:262:slice$18849 ($dlatch) from module dma_top.
Setting constant 0-bit at position 4 on $auto$ff.cc:262:slice$18849 ($dlatch) from module dma_top.
Setting constant 0-bit at position 5 on $auto$ff.cc:262:slice$18849 ($dlatch) from module dma_top.
Setting constant 0-bit at position 6 on $auto$ff.cc:262:slice$18849 ($dlatch) from module dma_top.
Setting constant 0-bit at position 7 on $auto$ff.cc:262:slice$18849 ($dlatch) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$18846 ($dlatch) from module dma_top.
Setting constant 0-bit at position 1 on $auto$ff.cc:262:slice$18846 ($dlatch) from module dma_top.
Setting constant 0-bit at position 2 on $auto$ff.cc:262:slice$18846 ($dlatch) from module dma_top.
Setting constant 0-bit at position 3 on $auto$ff.cc:262:slice$18846 ($dlatch) from module dma_top.
Setting constant 0-bit at position 4 on $auto$ff.cc:262:slice$18846 ($dlatch) from module dma_top.
Setting constant 0-bit at position 5 on $auto$ff.cc:262:slice$18846 ($dlatch) from module dma_top.
Setting constant 0-bit at position 6 on $auto$ff.cc:262:slice$18846 ($dlatch) from module dma_top.
Setting constant 0-bit at position 7 on $auto$ff.cc:262:slice$18846 ($dlatch) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$18847 ($dlatch) from module dma_top.
Setting constant 0-bit at position 1 on $auto$ff.cc:262:slice$18847 ($dlatch) from module dma_top.
Setting constant 0-bit at position 2 on $auto$ff.cc:262:slice$18847 ($dlatch) from module dma_top.
Setting constant 0-bit at position 3 on $auto$ff.cc:262:slice$18847 ($dlatch) from module dma_top.
Setting constant 0-bit at position 4 on $auto$ff.cc:262:slice$18847 ($dlatch) from module dma_top.
Setting constant 0-bit at position 5 on $auto$ff.cc:262:slice$18847 ($dlatch) from module dma_top.
Setting constant 0-bit at position 6 on $auto$ff.cc:262:slice$18847 ($dlatch) from module dma_top.
Setting constant 0-bit at position 7 on $auto$ff.cc:262:slice$18847 ($dlatch) from module dma_top.
Setting constant 0-bit at position 1 on $auto$ff.cc:262:slice$18880 ($adffe) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$18831 ($adffe) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$18837 ($adffe) from module dma_top.
Setting constant 0-bit at position 1 on $auto$ff.cc:262:slice$18837 ($adffe) from module dma_top.
Setting constant 0-bit at position 2 on $auto$ff.cc:262:slice$18837 ($adffe) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$18877 ($adffe) from module dma_top.
Setting constant 1-bit at position 0 on $flatten\de.$verific$st_ed1s_reg$dma_engine.v:858$7010 ($adff) from module dma_top.
Setting constant 0-bit at position 0 on $flatten\dma_fifo.$verific$ram_wr_reg$dma_fifo.v:322$9108 ($adff) from module dma_top.

yosys> opt_clean

3.11.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dma_top..
Removed 112 unused cells and 690 unused wires.
<suppressed ~240 debug messages>

yosys> opt_expr

3.11.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module dma_top.
<suppressed ~67 debug messages>

3.11.16. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.11.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dma_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux $flatten\de.$verific$mux_200$dma_engine.v:972$7053.
    dead port 2/2 on $mux $flatten\de.$verific$mux_200$dma_engine.v:972$7053.
    dead port 2/12 on $pmux $flatten\de.$verific$select_221$dma_engine.v:1010$7069.
    dead port 3/12 on $pmux $flatten\de.$verific$select_221$dma_engine.v:1010$7069.
    dead port 4/12 on $pmux $flatten\de.$verific$select_221$dma_engine.v:1010$7069.
    dead port 5/12 on $pmux $flatten\de.$verific$select_221$dma_engine.v:1010$7069.
    dead port 7/12 on $pmux $flatten\de.$verific$select_221$dma_engine.v:1010$7069.
    dead port 8/12 on $pmux $flatten\de.$verific$select_221$dma_engine.v:1010$7069.
Removed 8 multiplexer ports.
<suppressed ~359 debug messages>

yosys> opt_reduce

3.11.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dma_top.
    New input vector for $reduce_or cell $flatten\de.$verific$reduce_nor_220$dma_engine.v:1010$7067: { $flatten\de.$verific$n621$6610 $flatten\de.$verific$n622$6611 $flatten\de.$verific$n623$6612 $flatten\de.$verific$n626$6615 $flatten\de.$verific$n627$6616 }
  Optimizing cells in module \dma_top.
Performed a total of 1 changes.

yosys> opt_merge

3.11.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dma_top'.
<suppressed ~9 debug messages>
Removed a total of 3 cells.

yosys> opt_dff -sat

3.11.20. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$19670 ($adffe) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$19673 ($adffe) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$19676 ($adffe) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$19679 ($adffe) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$19682 ($adffe) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$19685 ($adffe) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$19688 ($adffe) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$19691 ($adffe) from module dma_top.
Setting constant 0-bit at position 0 on $flatten\dma_fifo.$verific$ram_wrq_reg$dma_fifo.v:356$9120 ($adff) from module dma_top.

yosys> opt_clean

3.11.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dma_top..
Removed 37 unused cells and 98 unused wires.
<suppressed ~47 debug messages>

yosys> opt_expr

3.11.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module dma_top.
<suppressed ~9 debug messages>

3.11.23. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.11.24. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dma_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~350 debug messages>

yosys> opt_reduce

3.11.25. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dma_top.
Performed a total of 0 changes.

yosys> opt_merge

3.11.26. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dma_top'.
<suppressed ~24 debug messages>
Removed a total of 8 cells.

yosys> opt_dff -sat

3.11.27. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$18843 ($adffe) from module dma_top.
Setting constant 0-bit at position 1 on $auto$ff.cc:262:slice$18843 ($adffe) from module dma_top.
Setting constant 0-bit at position 2 on $auto$ff.cc:262:slice$18843 ($adffe) from module dma_top.
Setting constant 0-bit at position 3 on $auto$ff.cc:262:slice$18843 ($adffe) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$18834 ($adffe) from module dma_top.
Setting constant 0-bit at position 1 on $auto$ff.cc:262:slice$18834 ($adffe) from module dma_top.
Setting constant 0-bit at position 2 on $auto$ff.cc:262:slice$18834 ($adffe) from module dma_top.
Setting constant 0-bit at position 0 on $flatten\ctl_rf.$verific$dmaint_err_reg$dma_ctlrf.v:1727$10308 ($adff) from module dma_top.

yosys> opt_clean

3.11.28. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dma_top..
Removed 6 unused cells and 20 unused wires.
<suppressed ~8 debug messages>

yosys> opt_expr

3.11.29. Executing OPT_EXPR pass (perform const folding).
Optimizing module dma_top.
<suppressed ~10 debug messages>

3.11.30. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.11.31. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dma_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~347 debug messages>

yosys> opt_reduce

3.11.32. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dma_top.
Performed a total of 0 changes.

yosys> opt_merge

3.11.33. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dma_top'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.11.34. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.11.35. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dma_top..
Removed 8 unused cells and 17 unused wires.
<suppressed ~22 debug messages>

yosys> opt_expr

3.11.36. Executing OPT_EXPR pass (perform const folding).
Optimizing module dma_top.

3.11.37. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.11.38. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dma_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~347 debug messages>

yosys> opt_reduce

3.11.39. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dma_top.
Performed a total of 0 changes.

yosys> opt_merge

3.11.40. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dma_top'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.11.41. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.11.42. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dma_top..

yosys> opt_expr

3.11.43. Executing OPT_EXPR pass (perform const folding).
Optimizing module dma_top.

3.11.44. Finished OPT passes. (There is nothing left to do.)

yosys> wreduce -keepdc

3.12. Executing WREDUCE pass (reducing word size of cells).
Removed top 10 bits (of 12) from port B of cell dma_top.$flatten\de.$verific$equal_692$dma_engine.v:1668$7420 ($eq).
Removed top 11 bits (of 12) from port B of cell dma_top.$flatten\de.$verific$equal_690$dma_engine.v:1667$7418 ($eq).
Removed top 2 bits (of 3) from port B of cell dma_top.$flatten\de.$verific$equal_666$dma_engine.v:1647$7397 ($eq).
Removed top 1 bits (of 3) from port B of cell dma_top.$flatten\de.$verific$equal_664$dma_engine.v:1646$7395 ($eq).
Removed top 2 bits (of 3) from port B of cell dma_top.$flatten\de.$verific$equal_660$dma_engine.v:1644$7391 ($eq).
Removed top 1 bits (of 3) from port B of cell dma_top.$flatten\de.$verific$equal_658$dma_engine.v:1643$7389 ($eq).
Removed top 1 bits (of 3) from port A of cell dma_top.$flatten\de.$verific$sub_643$dma_engine.v:1630$7377 ($sub).
Removed top 2 bits (of 3) from port B of cell dma_top.$flatten\de.$verific$sub_643$dma_engine.v:1630$7377 ($sub).
Removed top 1 bits (of 3) from port Y of cell dma_top.$flatten\de.$verific$sub_643$dma_engine.v:1630$7377 ($sub).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\de.$verific$equal_631$dma_engine.v:1599$7368 ($eq).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\de.$verific$equal_580$dma_engine.v:1568$7344 ($eq).
Removed top 7 bits (of 8) from port B of cell dma_top.$flatten\de.$verific$equal_696$dma_engine.v:1670$7424 ($eq).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\de.$verific$equal_400$dma_engine.v:1224$7200 ($eq).
Removed top 4 bits (of 11) from mux cell dma_top.$flatten\de.$verific$select_221$dma_engine.v:1010$7069 ($pmux).
Removed top 1 bits (of 5) from port B of cell dma_top.$flatten\de.$verific$equal_214$dma_engine.v:973$7060 ($eq).
Removed top 2 bits (of 5) from port B of cell dma_top.$flatten\de.$verific$equal_211$dma_engine.v:952$7057 ($eq).
Removed top 3 bits (of 5) from port B of cell dma_top.$flatten\de.$verific$equal_210$dma_engine.v:941$7056 ($eq).
Removed top 4 bits (of 5) from port B of cell dma_top.$flatten\de.$verific$equal_209$dma_engine.v:924$7055 ($eq).
Removed top 1 bits (of 17) from port A of cell dma_top.$flatten\ahb_mst0.$verific$add_407$dma_ahbmst.v:1078$8044 ($add).
Removed top 1 bits (of 17) from port Y of cell dma_top.$flatten\ahb_mst0.$verific$add_407$dma_ahbmst.v:1078$8044 ($add).
Removed top 1 bits (of 17) from port B of cell dma_top.$flatten\ahb_mst0.$verific$add_407$dma_ahbmst.v:1078$8044 ($add).
Removed top 6 bits (of 7) from port B of cell dma_top.$flatten\ahb_mst0.$verific$equal_398$dma_ahbmst.v:1031$8034 ($eq).
Removed top 5 bits (of 7) from port B of cell dma_top.$flatten\ahb_mst0.$verific$equal_397$dma_ahbmst.v:1030$8033 ($eq).
Removed top 4 bits (of 7) from port B of cell dma_top.$flatten\ahb_mst0.$verific$equal_396$dma_ahbmst.v:1029$8032 ($eq).
Removed top 3 bits (of 7) from port B of cell dma_top.$flatten\ahb_mst0.$verific$equal_395$dma_ahbmst.v:1028$8031 ($eq).
Removed top 2 bits (of 7) from port B of cell dma_top.$flatten\ahb_mst0.$verific$equal_394$dma_ahbmst.v:1027$8030 ($eq).
Removed top 1 bits (of 7) from port B of cell dma_top.$flatten\ahb_mst0.$verific$equal_393$dma_ahbmst.v:1026$8029 ($eq).
Removed top 3 bits (of 4) from port B of cell dma_top.$flatten\ahb_mst0.$verific$equal_340$dma_ahbmst.v:976$7986 ($eq).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst0.$verific$and_580$dma_ahbmst.v:794$7912 ($and).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst0.$verific$and_580$dma_ahbmst.v:794$7912 ($and).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst0.$verific$and_580$dma_ahbmst.v:794$7912 ($and).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst0.$verific$and_579$dma_ahbmst.v:793$7910 ($and).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst0.$verific$and_579$dma_ahbmst.v:793$7910 ($and).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst0.$verific$and_579$dma_ahbmst.v:793$7910 ($and).
Removed top 1 bits (of 3) from port B of cell dma_top.$flatten\ahb_mst0.$verific$equal_180$dma_ahbmst.v:711$7893 ($eq).
Removed top 2 bits (of 3) from port B of cell dma_top.$flatten\ahb_mst0.$verific$equal_179$dma_ahbmst.v:710$7892 ($eq).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst0.$verific$and_572$dma_ahbmst.v:626$7871 ($and).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst0.$verific$and_572$dma_ahbmst.v:626$7871 ($and).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst0.$verific$and_572$dma_ahbmst.v:626$7871 ($and).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst0.$verific$inv_571$dma_ahbmst.v:626$7850 ($not).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst0.$verific$inv_571$dma_ahbmst.v:626$7850 ($not).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst0.$verific$or_565$dma_ahbmst.v:539$7838 ($or).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst0.$verific$or_565$dma_ahbmst.v:539$7838 ($or).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst0.$verific$or_565$dma_ahbmst.v:539$7838 ($or).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst0.$verific$or_563$dma_ahbmst.v:526$7836 ($or).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst0.$verific$or_563$dma_ahbmst.v:526$7836 ($or).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst0.$verific$or_563$dma_ahbmst.v:526$7836 ($or).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst0.$verific$and_562$dma_ahbmst.v:526$7835 ($and).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst0.$verific$and_562$dma_ahbmst.v:526$7835 ($and).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst0.$verific$and_562$dma_ahbmst.v:526$7835 ($and).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst0.$verific$or_561$dma_ahbmst.v:526$7834 ($or).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst0.$verific$or_561$dma_ahbmst.v:526$7834 ($or).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst0.$verific$or_561$dma_ahbmst.v:526$7834 ($or).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst0.$verific$and_560$dma_ahbmst.v:526$7833 ($and).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst0.$verific$and_560$dma_ahbmst.v:526$7833 ($and).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst0.$verific$and_560$dma_ahbmst.v:526$7833 ($and).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst0.$verific$or_559$dma_ahbmst.v:526$7832 ($or).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst0.$verific$or_559$dma_ahbmst.v:526$7832 ($or).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst0.$verific$or_559$dma_ahbmst.v:526$7832 ($or).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst0.$verific$or_558$dma_ahbmst.v:523$7831 ($or).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst0.$verific$inv_556$dma_ahbmst.v:523$7829 ($not).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst0.$verific$and_553$dma_ahbmst.v:520$7828 ($and).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst0.$verific$and_553$dma_ahbmst.v:520$7828 ($and).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst0.$verific$and_553$dma_ahbmst.v:520$7828 ($and).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst0.$verific$and_551$dma_ahbmst.v:520$7826 ($and).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst0.$verific$and_551$dma_ahbmst.v:520$7826 ($and).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst0.$verific$and_551$dma_ahbmst.v:520$7826 ($and).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst0.$verific$inv_549$dma_ahbmst.v:520$7824 ($not).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst0.$verific$or_544$dma_ahbmst.v:476$7811 ($or).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst0.$verific$or_544$dma_ahbmst.v:476$7811 ($or).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst0.$verific$or_544$dma_ahbmst.v:476$7811 ($or).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst0.$verific$and_543$dma_ahbmst.v:476$7810 ($and).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst0.$verific$and_543$dma_ahbmst.v:476$7810 ($and).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst0.$verific$and_543$dma_ahbmst.v:476$7810 ($and).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst0.$verific$or_542$dma_ahbmst.v:467$7809 ($or).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst0.$verific$or_542$dma_ahbmst.v:467$7809 ($or).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst0.$verific$or_542$dma_ahbmst.v:467$7809 ($or).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst0.$verific$and_541$dma_ahbmst.v:467$7808 ($and).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst0.$verific$and_541$dma_ahbmst.v:467$7808 ($and).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst0.$verific$and_541$dma_ahbmst.v:467$7808 ($and).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst0.$verific$or_540$dma_ahbmst.v:467$7807 ($or).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst0.$verific$or_540$dma_ahbmst.v:467$7807 ($or).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst0.$verific$or_540$dma_ahbmst.v:467$7807 ($or).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst0.$verific$and_537$dma_ahbmst.v:466$7804 ($and).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst0.$verific$and_537$dma_ahbmst.v:466$7804 ($and).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst0.$verific$and_537$dma_ahbmst.v:466$7804 ($and).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst0.$verific$and_536$dma_ahbmst.v:465$7803 ($and).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst0.$verific$and_536$dma_ahbmst.v:465$7803 ($and).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst0.$verific$and_536$dma_ahbmst.v:465$7803 ($and).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst0.$verific$or_535$dma_ahbmst.v:465$7802 ($or).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst0.$verific$and_533$dma_ahbmst.v:464$7788 ($and).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst0.$verific$and_533$dma_ahbmst.v:464$7788 ($and).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst0.$verific$and_533$dma_ahbmst.v:464$7788 ($and).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst0.$verific$and_530$dma_ahbmst.v:420$7784 ($and).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst0.$verific$and_530$dma_ahbmst.v:420$7784 ($and).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst0.$verific$and_530$dma_ahbmst.v:420$7784 ($and).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst0.$verific$or_529$dma_ahbmst.v:416$7782 ($or).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst0.$verific$or_529$dma_ahbmst.v:416$7782 ($or).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst0.$verific$or_529$dma_ahbmst.v:416$7782 ($or).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst0.$verific$and_528$dma_ahbmst.v:416$7781 ($and).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst0.$verific$and_528$dma_ahbmst.v:416$7781 ($and).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst0.$verific$and_528$dma_ahbmst.v:416$7781 ($and).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst0.$verific$and_526$dma_ahbmst.v:416$7779 ($and).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst0.$verific$and_526$dma_ahbmst.v:416$7779 ($and).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst0.$verific$and_526$dma_ahbmst.v:416$7779 ($and).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst0.$verific$inv_525$dma_ahbmst.v:416$7778 ($not).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst0.$verific$and_524$dma_ahbmst.v:416$7777 ($and).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst0.$verific$and_524$dma_ahbmst.v:416$7777 ($and).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst0.$verific$and_524$dma_ahbmst.v:416$7777 ($and).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst0.$verific$inv_523$dma_ahbmst.v:416$7776 ($not).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst0.$verific$and_522$dma_ahbmst.v:415$7775 ($and).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst0.$verific$and_522$dma_ahbmst.v:415$7775 ($and).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst0.$verific$and_522$dma_ahbmst.v:415$7775 ($and).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst0.$verific$equal_21$dma_ahbmst.v:378$7755 ($eq).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst1.$verific$and_543$dma_ahbmst.v:414$8848 ($and).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst1.$verific$and_543$dma_ahbmst.v:414$8848 ($and).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst1.$verific$and_543$dma_ahbmst.v:414$8848 ($and).
Removed top 1 bits (of 17) from port A of cell dma_top.$flatten\ahb_mst1.$verific$add_425$dma_ahbmst.v:1078$8782 ($add).
Removed top 1 bits (of 17) from port Y of cell dma_top.$flatten\ahb_mst1.$verific$add_425$dma_ahbmst.v:1078$8782 ($add).
Removed top 1 bits (of 17) from port B of cell dma_top.$flatten\ahb_mst1.$verific$add_425$dma_ahbmst.v:1078$8782 ($add).
Removed top 6 bits (of 7) from port B of cell dma_top.$flatten\ahb_mst1.$verific$equal_416$dma_ahbmst.v:1031$8772 ($eq).
Removed top 5 bits (of 7) from port B of cell dma_top.$flatten\ahb_mst1.$verific$equal_415$dma_ahbmst.v:1030$8771 ($eq).
Removed top 4 bits (of 7) from port B of cell dma_top.$flatten\ahb_mst1.$verific$equal_414$dma_ahbmst.v:1029$8770 ($eq).
Removed top 3 bits (of 7) from port B of cell dma_top.$flatten\ahb_mst1.$verific$equal_413$dma_ahbmst.v:1028$8769 ($eq).
Removed top 2 bits (of 7) from port B of cell dma_top.$flatten\ahb_mst1.$verific$equal_412$dma_ahbmst.v:1027$8768 ($eq).
Removed top 1 bits (of 7) from port B of cell dma_top.$flatten\ahb_mst1.$verific$equal_411$dma_ahbmst.v:1026$8767 ($eq).
Removed top 4 bits (of 5) from port B of cell dma_top.$flatten\ahb_mst1.$verific$equal_358$dma_ahbmst.v:976$8724 ($eq).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst1.$verific$or_616$dma_ahbmst.v:794$8650 ($or).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst1.$verific$or_616$dma_ahbmst.v:794$8650 ($or).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst1.$verific$or_616$dma_ahbmst.v:794$8650 ($or).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst1.$verific$and_615$dma_ahbmst.v:794$8649 ($and).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst1.$verific$and_615$dma_ahbmst.v:794$8649 ($and).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst1.$verific$and_615$dma_ahbmst.v:794$8649 ($and).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst1.$verific$and_614$dma_ahbmst.v:793$8648 ($and).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst1.$verific$and_614$dma_ahbmst.v:793$8648 ($and).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst1.$verific$and_614$dma_ahbmst.v:793$8648 ($and).
Removed top 1 bits (of 3) from port B of cell dma_top.$flatten\ahb_mst1.$verific$equal_196$dma_ahbmst.v:711$8630 ($eq).
Removed top 2 bits (of 3) from port B of cell dma_top.$flatten\ahb_mst1.$verific$equal_195$dma_ahbmst.v:710$8629 ($eq).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst1.$verific$inv_613$dma_ahbmst.v:793$8614 ($not).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst1.$verific$inv_613$dma_ahbmst.v:793$8614 ($not).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst1.$verific$inv_610$dma_ahbmst.v:660$8610 ($not).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst1.$verific$inv_610$dma_ahbmst.v:660$8610 ($not).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst1.$verific$and_608$dma_ahbmst.v:652$8607 ($and).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst1.$verific$and_608$dma_ahbmst.v:652$8607 ($and).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst1.$verific$and_608$dma_ahbmst.v:652$8607 ($and).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst1.$verific$and_607$dma_ahbmst.v:651$8606 ($and).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst1.$verific$and_607$dma_ahbmst.v:651$8606 ($and).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst1.$verific$and_607$dma_ahbmst.v:651$8606 ($and).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst1.$verific$and_606$dma_ahbmst.v:645$8604 ($and).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst1.$verific$and_606$dma_ahbmst.v:645$8604 ($and).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst1.$verific$and_606$dma_ahbmst.v:645$8604 ($and).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst1.$verific$and_605$dma_ahbmst.v:644$8602 ($and).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst1.$verific$and_605$dma_ahbmst.v:644$8602 ($and).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst1.$verific$and_605$dma_ahbmst.v:644$8602 ($and).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst1.$verific$and_600$dma_ahbmst.v:626$8596 ($and).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst1.$verific$and_600$dma_ahbmst.v:626$8596 ($and).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst1.$verific$and_600$dma_ahbmst.v:626$8596 ($and).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst1.$verific$inv_599$dma_ahbmst.v:626$8595 ($not).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst1.$verific$inv_599$dma_ahbmst.v:626$8595 ($not).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst1.$verific$and_598$dma_ahbmst.v:625$8572 ($and).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst1.$verific$and_598$dma_ahbmst.v:625$8572 ($and).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst1.$verific$and_598$dma_ahbmst.v:625$8572 ($and).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst1.$verific$or_592$dma_ahbmst.v:539$8560 ($or).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst1.$verific$or_592$dma_ahbmst.v:539$8560 ($or).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst1.$verific$or_592$dma_ahbmst.v:539$8560 ($or).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst1.$verific$or_590$dma_ahbmst.v:534$8558 ($or).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst1.$verific$or_590$dma_ahbmst.v:534$8558 ($or).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst1.$verific$or_590$dma_ahbmst.v:534$8558 ($or).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst1.$verific$or_589$dma_ahbmst.v:526$8557 ($or).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst1.$verific$or_589$dma_ahbmst.v:526$8557 ($or).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst1.$verific$or_589$dma_ahbmst.v:526$8557 ($or).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst1.$verific$and_588$dma_ahbmst.v:526$8556 ($and).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst1.$verific$and_588$dma_ahbmst.v:526$8556 ($and).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst1.$verific$and_588$dma_ahbmst.v:526$8556 ($and).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst1.$verific$or_587$dma_ahbmst.v:526$8555 ($or).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst1.$verific$or_587$dma_ahbmst.v:526$8555 ($or).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst1.$verific$or_587$dma_ahbmst.v:526$8555 ($or).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst1.$verific$and_586$dma_ahbmst.v:526$8554 ($and).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst1.$verific$and_586$dma_ahbmst.v:526$8554 ($and).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst1.$verific$and_586$dma_ahbmst.v:526$8554 ($and).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst1.$verific$or_585$dma_ahbmst.v:526$8553 ($or).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst1.$verific$or_585$dma_ahbmst.v:526$8553 ($or).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst1.$verific$or_585$dma_ahbmst.v:526$8553 ($or).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst1.$verific$and_583$dma_ahbmst.v:523$8551 ($and).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst1.$verific$and_579$dma_ahbmst.v:520$8549 ($and).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst1.$verific$and_579$dma_ahbmst.v:520$8549 ($and).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst1.$verific$and_579$dma_ahbmst.v:520$8549 ($and).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst1.$verific$and_576$dma_ahbmst.v:520$8546 ($and).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst1.$verific$or_570$dma_ahbmst.v:476$8532 ($or).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst1.$verific$or_570$dma_ahbmst.v:476$8532 ($or).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst1.$verific$or_570$dma_ahbmst.v:476$8532 ($or).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst1.$verific$and_569$dma_ahbmst.v:476$8531 ($and).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst1.$verific$and_569$dma_ahbmst.v:476$8531 ($and).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst1.$verific$and_569$dma_ahbmst.v:476$8531 ($and).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst1.$verific$or_568$dma_ahbmst.v:471$8530 ($or).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst1.$verific$or_568$dma_ahbmst.v:471$8530 ($or).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst1.$verific$or_568$dma_ahbmst.v:471$8530 ($or).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst1.$verific$or_567$dma_ahbmst.v:467$8529 ($or).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst1.$verific$or_567$dma_ahbmst.v:467$8529 ($or).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst1.$verific$or_567$dma_ahbmst.v:467$8529 ($or).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst1.$verific$and_566$dma_ahbmst.v:467$8528 ($and).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst1.$verific$and_566$dma_ahbmst.v:467$8528 ($and).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst1.$verific$and_566$dma_ahbmst.v:467$8528 ($and).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst1.$verific$and_562$dma_ahbmst.v:466$8524 ($and).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst1.$verific$and_562$dma_ahbmst.v:466$8524 ($and).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst1.$verific$and_562$dma_ahbmst.v:466$8524 ($and).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst1.$verific$and_561$dma_ahbmst.v:465$8523 ($and).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst1.$verific$and_561$dma_ahbmst.v:465$8523 ($and).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst1.$verific$and_561$dma_ahbmst.v:465$8523 ($and).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst1.$verific$and_559$dma_ahbmst.v:465$8521 ($and).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst1.$verific$and_559$dma_ahbmst.v:465$8521 ($and).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst1.$verific$and_559$dma_ahbmst.v:465$8521 ($and).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst1.$verific$and_558$dma_ahbmst.v:464$8508 ($and).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst1.$verific$and_558$dma_ahbmst.v:464$8508 ($and).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst1.$verific$and_558$dma_ahbmst.v:464$8508 ($and).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst1.$verific$or_554$dma_ahbmst.v:422$8503 ($or).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst1.$verific$or_554$dma_ahbmst.v:422$8503 ($or).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst1.$verific$or_554$dma_ahbmst.v:422$8503 ($or).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst1.$verific$and_553$dma_ahbmst.v:420$8502 ($and).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst1.$verific$and_553$dma_ahbmst.v:420$8502 ($and).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst1.$verific$and_553$dma_ahbmst.v:420$8502 ($and).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst1.$verific$or_552$dma_ahbmst.v:416$8501 ($or).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst1.$verific$or_552$dma_ahbmst.v:416$8501 ($or).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst1.$verific$or_552$dma_ahbmst.v:416$8501 ($or).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst1.$verific$and_551$dma_ahbmst.v:416$8500 ($and).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst1.$verific$and_551$dma_ahbmst.v:416$8500 ($and).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst1.$verific$and_551$dma_ahbmst.v:416$8500 ($and).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst1.$verific$and_549$dma_ahbmst.v:416$8498 ($and).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst1.$verific$and_549$dma_ahbmst.v:416$8498 ($and).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst1.$verific$and_549$dma_ahbmst.v:416$8498 ($and).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst1.$verific$and_547$dma_ahbmst.v:416$8496 ($and).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst1.$verific$and_547$dma_ahbmst.v:416$8496 ($and).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst1.$verific$and_547$dma_ahbmst.v:416$8496 ($and).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst1.$verific$and_545$dma_ahbmst.v:415$8494 ($and).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst1.$verific$and_545$dma_ahbmst.v:415$8494 ($and).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst1.$verific$and_545$dma_ahbmst.v:415$8494 ($and).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst1.$verific$equal_21$dma_ahbmst.v:378$8472 ($eq).
Removed top 1 bits (of 3) from port B of cell dma_top.$flatten\dma_fifo.$verific$equal_71$dma_fifo.v:252$9034 ($eq).
Removed top 2 bits (of 3) from port B of cell dma_top.$flatten\dma_fifo.$verific$equal_70$dma_fifo.v:251$9033 ($eq).
Removed top 3 bits (of 4) from port B of cell dma_top.$flatten\ctl_rf.\c7_rf.$verific$add_61$dma_chrf.v:279$17609 ($add).
Removed top 3 bits (of 4) from port B of cell dma_top.$flatten\ctl_rf.\c6_rf.$verific$add_61$dma_chrf.v:279$17158 ($add).
Removed top 3 bits (of 4) from port B of cell dma_top.$flatten\ctl_rf.\c5_rf.$verific$add_61$dma_chrf.v:279$16707 ($add).
Removed top 3 bits (of 4) from port B of cell dma_top.$flatten\ctl_rf.\c4_rf.$verific$add_61$dma_chrf.v:279$16256 ($add).
Removed top 3 bits (of 4) from port B of cell dma_top.$flatten\ctl_rf.\c3_rf.$verific$add_61$dma_chrf.v:279$15805 ($add).
Removed top 3 bits (of 4) from port B of cell dma_top.$flatten\ctl_rf.\c2_rf.$verific$add_61$dma_chrf.v:279$15354 ($add).
Removed top 3 bits (of 4) from port B of cell dma_top.$flatten\ctl_rf.\c1_rf.$verific$add_61$dma_chrf.v:279$14903 ($add).
Removed top 3 bits (of 4) from port B of cell dma_top.$flatten\ctl_rf.\c0_rf.$verific$add_61$dma_chrf.v:279$14452 ($add).
Removed top 1 bits (of 3) from port B of cell dma_top.$flatten\ctl_rf.$verific$not_equal_998$dma_ctlrf.v:2009$10363 ($ne).
Removed top 1 bits (of 3) from port B of cell dma_top.$flatten\ctl_rf.$verific$not_equal_986$dma_ctlrf.v:1992$10362 ($ne).
Removed top 2 bits (of 3) from port B of cell dma_top.$flatten\ctl_rf.$verific$not_equal_974$dma_ctlrf.v:1975$10361 ($ne).
Removed top 7 bits (of 8) from port B of cell dma_top.$flatten\ctl_rf.$verific$and_1982$dma_ctlrf.v:1786$10326 ($and).
Removed top 1 bits (of 7) from port B of cell dma_top.$flatten\ctl_rf.$verific$equal_476$dma_ctlrf.v:1534$10041 ($eq).
Removed top 2 bits (of 7) from port B of cell dma_top.$flatten\ctl_rf.$verific$equal_473$dma_ctlrf.v:1533$10038 ($eq).
Removed top 1 bits (of 7) from port B of cell dma_top.$flatten\ctl_rf.$verific$equal_466$dma_ctlrf.v:1527$10031 ($eq).
Removed top 2 bits (of 7) from port B of cell dma_top.$flatten\ctl_rf.$verific$equal_463$dma_ctlrf.v:1526$10028 ($eq).
Removed top 1 bits (of 7) from port B of cell dma_top.$flatten\ctl_rf.$verific$equal_456$dma_ctlrf.v:1520$10021 ($eq).
Removed top 2 bits (of 7) from port B of cell dma_top.$flatten\ctl_rf.$verific$equal_453$dma_ctlrf.v:1519$10018 ($eq).
Removed top 1 bits (of 7) from port B of cell dma_top.$flatten\ctl_rf.$verific$equal_446$dma_ctlrf.v:1513$10011 ($eq).
Removed top 2 bits (of 7) from port B of cell dma_top.$flatten\ctl_rf.$verific$equal_443$dma_ctlrf.v:1512$10008 ($eq).
Removed top 1 bits (of 7) from port B of cell dma_top.$flatten\ctl_rf.$verific$equal_436$dma_ctlrf.v:1506$10001 ($eq).
Removed top 2 bits (of 7) from port B of cell dma_top.$flatten\ctl_rf.$verific$equal_433$dma_ctlrf.v:1505$9998 ($eq).
Removed top 1 bits (of 7) from port B of cell dma_top.$flatten\ctl_rf.$verific$equal_426$dma_ctlrf.v:1499$9991 ($eq).
Removed top 2 bits (of 7) from port B of cell dma_top.$flatten\ctl_rf.$verific$equal_423$dma_ctlrf.v:1498$9988 ($eq).
Removed top 1 bits (of 7) from port B of cell dma_top.$flatten\ctl_rf.$verific$equal_416$dma_ctlrf.v:1492$9981 ($eq).
Removed top 2 bits (of 7) from port B of cell dma_top.$flatten\ctl_rf.$verific$equal_413$dma_ctlrf.v:1491$9978 ($eq).
Removed top 1 bits (of 7) from port B of cell dma_top.$flatten\ctl_rf.$verific$equal_406$dma_ctlrf.v:1486$9971 ($eq).
Removed top 2 bits (of 7) from port B of cell dma_top.$flatten\ctl_rf.$verific$equal_403$dma_ctlrf.v:1485$9968 ($eq).
Removed top 3 bits (of 7) from port B of cell dma_top.$flatten\ctl_rf.$verific$equal_400$dma_ctlrf.v:1480$9965 ($eq).
Removed top 3 bits (of 7) from port B of cell dma_top.$flatten\ctl_rf.$verific$equal_397$dma_ctlrf.v:1479$9962 ($eq).
Removed top 4 bits (of 7) from port B of cell dma_top.$flatten\ctl_rf.$verific$equal_394$dma_ctlrf.v:1478$9959 ($eq).
Removed top 5 bits (of 7) from port B of cell dma_top.$flatten\ctl_rf.$verific$equal_391$dma_ctlrf.v:1477$9956 ($eq).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ctl_rf.$verific$equal_225$dma_ctlrf.v:1292$9917 ($eq).
Removed top 1 bits (of 3) from port B of cell dma_top.$flatten\ctl_rf.$verific$equal_12$dma_ctlrf.v:984$9883 ($eq).
Removed top 4 bits (of 25) from FF cell dma_top.$flatten\ch_sel.$verific$arb_chcsr_reg_reg$dma_chsel.v:1310$14104 ($adff).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ch_sel.$verific$equal_262$dma_chsel.v:855$13974 ($eq).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ch_sel.$verific$equal_232$dma_chsel.v:796$13942 ($eq).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ch_sel.$verific$equal_224$dma_chsel.v:776$13932 ($eq).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ch_sel.$verific$equal_216$dma_chsel.v:756$13922 ($eq).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ch_sel.$verific$equal_208$dma_chsel.v:736$13912 ($eq).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ch_sel.$verific$equal_200$dma_chsel.v:716$13902 ($eq).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ch_sel.$verific$equal_192$dma_chsel.v:696$13892 ($eq).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ch_sel.$verific$equal_184$dma_chsel.v:675$13882 ($eq).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ch_sel.$verific$equal_176$dma_chsel.v:657$13872 ($eq).
Removed top 1 bits (of 3) from port B of cell dma_top.$flatten\ch_sel.$verific$equal_78$dma_chsel.v:525$13852 ($eq).
Removed top 1 bits (of 3) from port B of cell dma_top.$flatten\ch_sel.$verific$equal_71$dma_chsel.v:522$13851 ($eq).
Removed top 2 bits (of 3) from port B of cell dma_top.$flatten\ch_sel.$verific$equal_64$dma_chsel.v:519$13850 ($eq).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_slv.$verific$equal_148$dma_ahbslv.v:417$18207 ($eq).
Removed top 1 bits (of 3) from port B of cell dma_top.$flatten\ahb_slv.$verific$equal_132$dma_ahbslv.v:396$18192 ($eq).
Removed top 2 bits (of 3) from port B of cell dma_top.$flatten\ahb_slv.$verific$equal_131$dma_ahbslv.v:394$18191 ($eq).
Removed top 2 bits (of 3) from port B of cell dma_top.$flatten\ahb_slv.$verific$equal_74$dma_ahbslv.v:324$18147 ($eq).
Removed top 2 bits (of 3) from port B of cell dma_top.$flatten\ahb_slv.$verific$equal_37$dma_ahbslv.v:279$18115 ($eq).
Removed top 2 bits (of 4) from port B of cell dma_top.$flatten\m1_decoder.$verific$equal_96$dma_ahbdec.v:366$18719 ($eq).
Removed top 2 bits (of 4) from port B of cell dma_top.$flatten\m1_decoder.$verific$equal_95$dma_ahbdec.v:365$18718 ($eq).
Removed top 3 bits (of 4) from port B of cell dma_top.$flatten\m1_decoder.$verific$equal_94$dma_ahbdec.v:364$18717 ($eq).
Removed top 2 bits (of 4) from port B of cell dma_top.$flatten\m1_decoder.$verific$equal_90$dma_ahbdec.v:355$18711 ($eq).
Removed top 2 bits (of 4) from port B of cell dma_top.$flatten\m1_decoder.$verific$equal_89$dma_ahbdec.v:354$18710 ($eq).
Removed top 3 bits (of 4) from port B of cell dma_top.$flatten\m1_decoder.$verific$equal_88$dma_ahbdec.v:353$18709 ($eq).
Removed top 2 bits (of 4) from port B of cell dma_top.$flatten\m1_decoder.$verific$equal_84$dma_ahbdec.v:344$18703 ($eq).
Removed top 2 bits (of 4) from port B of cell dma_top.$flatten\m1_decoder.$verific$equal_83$dma_ahbdec.v:343$18702 ($eq).
Removed top 3 bits (of 4) from port B of cell dma_top.$flatten\m1_decoder.$verific$equal_82$dma_ahbdec.v:342$18701 ($eq).
Removed top 2 bits (of 4) from port B of cell dma_top.$flatten\m1_decoder.$verific$equal_78$dma_ahbdec.v:333$18695 ($eq).
Removed top 2 bits (of 4) from port B of cell dma_top.$flatten\m1_decoder.$verific$equal_77$dma_ahbdec.v:332$18694 ($eq).
Removed top 3 bits (of 4) from port B of cell dma_top.$flatten\m1_decoder.$verific$equal_76$dma_ahbdec.v:331$18693 ($eq).
Removed top 2 bits (of 4) from port B of cell dma_top.$flatten\m1_decoder.$verific$equal_72$dma_ahbdec.v:322$18687 ($eq).
Removed top 2 bits (of 4) from port B of cell dma_top.$flatten\m1_decoder.$verific$equal_71$dma_ahbdec.v:321$18686 ($eq).
Removed top 3 bits (of 4) from port B of cell dma_top.$flatten\m1_decoder.$verific$equal_70$dma_ahbdec.v:320$18685 ($eq).
Removed top 2 bits (of 4) from port B of cell dma_top.$flatten\m1_decoder.$verific$equal_66$dma_ahbdec.v:311$18679 ($eq).
Removed top 2 bits (of 4) from port B of cell dma_top.$flatten\m1_decoder.$verific$equal_65$dma_ahbdec.v:310$18678 ($eq).
Removed top 3 bits (of 4) from port B of cell dma_top.$flatten\m1_decoder.$verific$equal_64$dma_ahbdec.v:309$18677 ($eq).
Removed top 2 bits (of 4) from port B of cell dma_top.$flatten\m1_decoder.$verific$equal_60$dma_ahbdec.v:300$18671 ($eq).
Removed top 2 bits (of 4) from port B of cell dma_top.$flatten\m1_decoder.$verific$equal_59$dma_ahbdec.v:299$18670 ($eq).
Removed top 3 bits (of 4) from port B of cell dma_top.$flatten\m1_decoder.$verific$equal_58$dma_ahbdec.v:298$18669 ($eq).
Removed top 2 bits (of 4) from port B of cell dma_top.$flatten\m1_decoder.$verific$equal_54$dma_ahbdec.v:290$18663 ($eq).
Removed top 2 bits (of 4) from port B of cell dma_top.$flatten\m1_decoder.$verific$equal_53$dma_ahbdec.v:289$18662 ($eq).
Removed top 3 bits (of 4) from port B of cell dma_top.$flatten\m1_decoder.$verific$equal_52$dma_ahbdec.v:288$18661 ($eq).
Removed top 2 bits (of 4) from port B of cell dma_top.$flatten\m1_decoder.$verific$equal_48$dma_ahbdec.v:279$18655 ($eq).
Removed top 2 bits (of 4) from port B of cell dma_top.$flatten\m1_decoder.$verific$equal_47$dma_ahbdec.v:278$18654 ($eq).
Removed top 3 bits (of 4) from port B of cell dma_top.$flatten\m1_decoder.$verific$equal_46$dma_ahbdec.v:277$18653 ($eq).
Removed top 2 bits (of 4) from port B of cell dma_top.$flatten\m1_decoder.$verific$equal_42$dma_ahbdec.v:268$18647 ($eq).
Removed top 2 bits (of 4) from port B of cell dma_top.$flatten\m1_decoder.$verific$equal_41$dma_ahbdec.v:267$18646 ($eq).
Removed top 3 bits (of 4) from port B of cell dma_top.$flatten\m1_decoder.$verific$equal_40$dma_ahbdec.v:266$18645 ($eq).
Removed top 2 bits (of 4) from port B of cell dma_top.$flatten\m1_decoder.$verific$equal_36$dma_ahbdec.v:257$18639 ($eq).
Removed top 2 bits (of 4) from port B of cell dma_top.$flatten\m1_decoder.$verific$equal_35$dma_ahbdec.v:256$18638 ($eq).
Removed top 3 bits (of 4) from port B of cell dma_top.$flatten\m1_decoder.$verific$equal_34$dma_ahbdec.v:255$18637 ($eq).
Removed top 2 bits (of 4) from port B of cell dma_top.$flatten\m1_decoder.$verific$equal_30$dma_ahbdec.v:246$18631 ($eq).
Removed top 2 bits (of 4) from port B of cell dma_top.$flatten\m1_decoder.$verific$equal_29$dma_ahbdec.v:245$18630 ($eq).
Removed top 3 bits (of 4) from port B of cell dma_top.$flatten\m1_decoder.$verific$equal_28$dma_ahbdec.v:244$18629 ($eq).
Removed top 2 bits (of 4) from port B of cell dma_top.$flatten\m1_decoder.$verific$equal_24$dma_ahbdec.v:235$18623 ($eq).
Removed top 2 bits (of 4) from port B of cell dma_top.$flatten\m1_decoder.$verific$equal_23$dma_ahbdec.v:234$18622 ($eq).
Removed top 3 bits (of 4) from port B of cell dma_top.$flatten\m1_decoder.$verific$equal_22$dma_ahbdec.v:233$18621 ($eq).
Removed top 2 bits (of 4) from port B of cell dma_top.$flatten\m1_decoder.$verific$equal_18$dma_ahbdec.v:224$18615 ($eq).
Removed top 2 bits (of 4) from port B of cell dma_top.$flatten\m1_decoder.$verific$equal_17$dma_ahbdec.v:223$18614 ($eq).
Removed top 3 bits (of 4) from port B of cell dma_top.$flatten\m1_decoder.$verific$equal_16$dma_ahbdec.v:222$18613 ($eq).
Removed top 2 bits (of 4) from port B of cell dma_top.$flatten\m1_decoder.$verific$equal_12$dma_ahbdec.v:213$18607 ($eq).
Removed top 2 bits (of 4) from port B of cell dma_top.$flatten\m1_decoder.$verific$equal_11$dma_ahbdec.v:212$18606 ($eq).
Removed top 3 bits (of 4) from port B of cell dma_top.$flatten\m1_decoder.$verific$equal_10$dma_ahbdec.v:211$18605 ($eq).
Removed top 2 bits (of 4) from port B of cell dma_top.$flatten\m1_decoder.$verific$equal_6$dma_ahbdec.v:203$18599 ($eq).
Removed top 2 bits (of 4) from port B of cell dma_top.$flatten\m1_decoder.$verific$equal_5$dma_ahbdec.v:202$18598 ($eq).
Removed top 3 bits (of 4) from port B of cell dma_top.$flatten\m1_decoder.$verific$equal_4$dma_ahbdec.v:201$18597 ($eq).
Removed top 1 bits (of 8) from port B of cell dma_top.$flatten\m1_mux.$verific$equal_21$dma_ahbmux.v:303$18382 ($eq).
Removed top 2 bits (of 8) from port B of cell dma_top.$flatten\m1_mux.$verific$equal_20$dma_ahbmux.v:300$18381 ($eq).
Removed top 3 bits (of 8) from port B of cell dma_top.$flatten\m1_mux.$verific$equal_19$dma_ahbmux.v:297$18380 ($eq).
Removed top 4 bits (of 8) from port B of cell dma_top.$flatten\m1_mux.$verific$equal_18$dma_ahbmux.v:294$18379 ($eq).
Removed top 5 bits (of 8) from port B of cell dma_top.$flatten\m1_mux.$verific$equal_17$dma_ahbmux.v:291$18378 ($eq).
Removed top 6 bits (of 8) from port B of cell dma_top.$flatten\m1_mux.$verific$equal_16$dma_ahbmux.v:288$18377 ($eq).
Removed top 1 bits (of 8) from port B of cell dma_top.$flatten\m1_mux.$verific$equal_11$dma_ahbmux.v:276$18370 ($eq).
Removed top 2 bits (of 8) from port B of cell dma_top.$flatten\m1_mux.$verific$equal_10$dma_ahbmux.v:273$18369 ($eq).
Removed top 3 bits (of 8) from port B of cell dma_top.$flatten\m1_mux.$verific$equal_9$dma_ahbmux.v:270$18368 ($eq).
Removed top 4 bits (of 8) from port B of cell dma_top.$flatten\m1_mux.$verific$equal_8$dma_ahbmux.v:267$18367 ($eq).
Removed top 5 bits (of 8) from port B of cell dma_top.$flatten\m1_mux.$verific$equal_7$dma_ahbmux.v:264$18366 ($eq).
Removed top 6 bits (of 8) from port B of cell dma_top.$flatten\m1_mux.$verific$equal_6$dma_ahbmux.v:261$18365 ($eq).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst0.$verific$or_558$dma_ahbmst.v:523$7831 ($or).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst0.$verific$or_558$dma_ahbmst.v:523$7831 ($or).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst0.$verific$or_552$dma_ahbmst.v:520$7827 ($or).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst0.$verific$or_552$dma_ahbmst.v:520$7827 ($or).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst0.$verific$or_552$dma_ahbmst.v:520$7827 ($or).
Removed top 1 bits (of 2) from port A of cell dma_top.$flatten\ahb_mst0.$verific$or_535$dma_ahbmst.v:465$7802 ($or).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst0.$verific$or_535$dma_ahbmst.v:465$7802 ($or).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst0.$verific$inv_525$dma_ahbmst.v:416$7778 ($not).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst0.$verific$inv_523$dma_ahbmst.v:416$7776 ($not).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst1.$verific$and_583$dma_ahbmst.v:523$8551 ($and).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst1.$verific$and_583$dma_ahbmst.v:523$8551 ($and).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst1.$verific$and_576$dma_ahbmst.v:520$8546 ($and).
Removed top 1 bits (of 2) from port B of cell dma_top.$flatten\ahb_mst1.$verific$and_576$dma_ahbmst.v:520$8546 ($and).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst0.$verific$inv_556$dma_ahbmst.v:523$7829 ($not).
Removed top 1 bits (of 2) from port Y of cell dma_top.$flatten\ahb_mst0.$verific$inv_549$dma_ahbmst.v:520$7824 ($not).
Removed top 31 bits (of 32) from wire dma_top.$flatten\ahb_mst0.$verific$n1020$7657.
Removed top 31 bits (of 32) from wire dma_top.$flatten\ahb_mst0.$verific$n1086$7659.
Removed top 31 bits (of 32) from wire dma_top.$flatten\ahb_mst0.$verific$n109$7631.
Removed top 31 bits (of 32) from wire dma_top.$flatten\ahb_mst0.$verific$n142$7632.
Removed top 31 bits (of 32) from wire dma_top.$flatten\ahb_mst0.$verific$n208$7634.
Removed top 31 bits (of 32) from wire dma_top.$flatten\ahb_mst0.$verific$n451$7641.
Removed top 31 bits (of 32) from wire dma_top.$flatten\ahb_mst0.$verific$n484$7642.
Removed top 31 bits (of 32) from wire dma_top.$flatten\ahb_mst0.$verific$n517$7643.
Removed top 31 bits (of 32) from wire dma_top.$flatten\ahb_mst0.$verific$n682$7648.
Removed top 31 bits (of 32) from wire dma_top.$flatten\ahb_mst0.$verific$n715$7649.
Removed top 31 bits (of 32) from wire dma_top.$flatten\ahb_mst0.$verific$n748$7650.
Removed top 31 bits (of 32) from wire dma_top.$flatten\ahb_mst0.$verific$n76$7630.
Removed top 31 bits (of 32) from wire dma_top.$flatten\ahb_mst0.$verific$n814$7652.
Removed top 31 bits (of 32) from wire dma_top.$flatten\ahb_mst0.$verific$n847$7653.
Removed top 31 bits (of 32) from wire dma_top.$flatten\ahb_mst0.$verific$n987$7656.
Removed top 31 bits (of 32) from wire dma_top.$flatten\ahb_mst1.$verific$n110$8332.
Removed top 31 bits (of 32) from wire dma_top.$flatten\ahb_mst1.$verific$n1252$8365.
Removed top 31 bits (of 32) from wire dma_top.$flatten\ahb_mst1.$verific$n1450$8369.
Removed top 31 bits (of 32) from wire dma_top.$flatten\ahb_mst1.$verific$n1483$8370.
Removed top 31 bits (of 32) from wire dma_top.$flatten\ahb_mst1.$verific$n1516$8371.
Removed top 31 bits (of 32) from wire dma_top.$flatten\ahb_mst1.$verific$n1549$8372.
Removed top 31 bits (of 32) from wire dma_top.$flatten\ahb_mst1.$verific$n1582$8373.
Removed top 31 bits (of 32) from wire dma_top.$flatten\ahb_mst1.$verific$n1648$8375.
Removed top 31 bits (of 32) from wire dma_top.$flatten\ahb_mst1.$verific$n1872$8384.
Removed top 31 bits (of 32) from wire dma_top.$flatten\ahb_mst1.$verific$n1905$8385.
Removed top 31 bits (of 32) from wire dma_top.$flatten\ahb_mst1.$verific$n1938$8386.
Removed top 31 bits (of 32) from wire dma_top.$flatten\ahb_mst1.$verific$n2004$8388.
Removed top 31 bits (of 32) from wire dma_top.$flatten\ahb_mst1.$verific$n2037$8389.
Removed top 31 bits (of 32) from wire dma_top.$flatten\ahb_mst1.$verific$n2138$8392.
Removed top 31 bits (of 32) from wire dma_top.$flatten\ahb_mst1.$verific$n2205$8394.
Removed top 31 bits (of 32) from wire dma_top.$flatten\ahb_mst1.$verific$n2238$8395.
Removed top 31 bits (of 32) from wire dma_top.$flatten\ahb_mst1.$verific$n2271$8396.
Removed top 31 bits (of 32) from wire dma_top.$flatten\ahb_mst1.$verific$n2304$8397.
Removed top 31 bits (of 32) from wire dma_top.$flatten\ahb_mst1.$verific$n2467$8410.
Removed top 31 bits (of 32) from wire dma_top.$flatten\ahb_mst1.$verific$n2500$8411.
Removed top 31 bits (of 32) from wire dma_top.$flatten\ahb_mst1.$verific$n2566$8413.
Removed top 31 bits (of 32) from wire dma_top.$flatten\ahb_mst1.$verific$n44$8330.
Removed top 31 bits (of 32) from wire dma_top.$flatten\ahb_mst1.$verific$n440$8342.
Removed top 31 bits (of 32) from wire dma_top.$flatten\ahb_mst1.$verific$n473$8343.
Removed top 31 bits (of 32) from wire dma_top.$flatten\ahb_mst1.$verific$n551$8345.
Removed top 31 bits (of 32) from wire dma_top.$flatten\ahb_mst1.$verific$n650$8348.
Removed top 31 bits (of 32) from wire dma_top.$flatten\ahb_mst1.$verific$n683$8349.
Removed top 31 bits (of 32) from wire dma_top.$flatten\ahb_mst1.$verific$n815$8353.
Removed top 31 bits (of 32) from wire dma_top.$flatten\ahb_mst1.$verific$n848$8354.
Removed top 31 bits (of 32) from wire dma_top.$flatten\ahb_mst1.$verific$n881$8355.
Removed top 31 bits (of 32) from wire dma_top.$flatten\ahb_mst1.$verific$n947$8357.
Removed top 1 bits (of 2) from wire dma_top.$flatten\ahb_slv.$verific$n674$18055.
Removed top 1 bits (of 3) from wire dma_top.$flatten\ahb_slv.$verific$n677$18056.
Removed top 1 bits (of 3) from wire dma_top.$flatten\de.$verific$n1754$6860.
Removed top 6 bits (of 7) from wire dma_top.$flatten\de.$verific$n464$6814.
Removed top 1 bits (of 3) from wire dma_top.$flatten\de.$verific$n488$6817.
Removed top 10 bits (of 32) from wire dma_top.arb_chcsr.
Removed top 12 bits (of 32) from wire dma_top.c0cfg.
Removed top 12 bits (of 32) from wire dma_top.c1cfg.
Removed top 12 bits (of 32) from wire dma_top.c2cfg.
Removed top 12 bits (of 32) from wire dma_top.c3cfg.
Removed top 12 bits (of 32) from wire dma_top.c4cfg.
Removed top 12 bits (of 32) from wire dma_top.c5cfg.
Removed top 12 bits (of 32) from wire dma_top.c6cfg.
Removed top 12 bits (of 32) from wire dma_top.c7cfg.
Removed top 5 bits (of 8) from wire dma_top.csr.
Removed top 4 bits (of 11) from wire dma_top.de_st.
Removed top 16 bits (of 32) from wire dma_top.m0_updad.
Removed top 16 bits (of 32) from wire dma_top.m1_updad.

yosys> peepopt

3.13. Executing PEEPOPT pass (run peephole optimizers).

yosys> pmuxtree

3.14. Executing PMUXTREE pass.

yosys> opt_clean

3.15. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dma_top..
Removed 90 unused cells and 219 unused wires.
<suppressed ~93 debug messages>

yosys> techmap

3.16. Executing TECHMAP pass (map to technology primitives).

3.16.1. Executing Verilog-2005 frontend: /home/users/aram/Workspace/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/aram/Workspace/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.16.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $adffe.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $not.
Running "alumacc" on wrapper $extern:wrap:$sub:A_SIGNED=0:A_WIDTH=2:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=2:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:A_SIGNED=0:A_WIDTH=2:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=2:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:A_SIGNED=0:A_WIDTH=2:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=2:394426c56d1a028ba8fdd5469b163e04011def47.
Using extmapper simplemap for cells of type $bmux.
Using extmapper simplemap for cells of type $adff.
Using extmapper simplemap for cells of type $xor.
Running "alumacc" on wrapper $extern:wrap:$add:A_SIGNED=0:A_WIDTH=16:B_SIGNED=0:B_WIDTH=16:Y_WIDTH=16:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$add:A_SIGNED=0:A_WIDTH=16:B_SIGNED=0:B_WIDTH=16:Y_WIDTH=16:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$add:A_SIGNED=0:A_WIDTH=16:B_SIGNED=0:B_WIDTH=16:Y_WIDTH=16:394426c56d1a028ba8fdd5469b163e04011def47.
Using extmapper simplemap for cells of type $sdff.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $ne.
Running "alumacc" on wrapper $extern:wrap:$add:A_SIGNED=0:A_WIDTH=4:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=4:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$add:A_SIGNED=0:A_WIDTH=4:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=4:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$add:A_SIGNED=0:A_WIDTH=4:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=4:394426c56d1a028ba8fdd5469b163e04011def47.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $dlatch.
Using template $paramod$ba698a254f9a5947e85cbe7beae6b161eefc5386\_90_alu for cells of type $alu.
Using template $paramod$6df0329addda9228fcc2546de2aaf14ad26c98e1\_90_alu for cells of type $alu.
Using template $paramod$32a7b7b86c07519b7537abc18e96f0331f97914d\_90_alu for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000010 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010000 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000100 for cells of type $lcu.
No more expansions possible.
<suppressed ~3987 debug messages>

yosys> alumacc

3.17. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module dma_top:
  created 0 $alu and 0 $macc cells.

yosys> opt

3.18. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dma_top.
<suppressed ~3376 debug messages>

yosys> opt_merge -nomux

3.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dma_top'.
<suppressed ~4347 debug messages>
Removed a total of 1449 cells.

yosys> opt_muxtree

3.18.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dma_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.18.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dma_top.
Performed a total of 0 changes.

yosys> opt_merge

3.18.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dma_top'.
Removed a total of 0 cells.

yosys> opt_dff

3.18.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.18.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dma_top..
Removed 283 unused cells and 1833 unused wires.
<suppressed ~341 debug messages>

yosys> opt_expr

3.18.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module dma_top.

3.18.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.18.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dma_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.18.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dma_top.
Performed a total of 0 changes.

yosys> opt_merge

3.18.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dma_top'.
Removed a total of 0 cells.

yosys> opt_dff

3.18.13. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $auto$ff.cc:262:slice$32468 ($_DFF_PN0_) from module dma_top (D = \ch_sel.dma_rrarb3.next_state [2], Q = \ch_sel.dma_rrarb3.state [2]).
Adding EN signal on $auto$ff.cc:262:slice$32467 ($_DFF_PN0_) from module dma_top (D = \ch_sel.dma_rrarb3.next_state [1], Q = \ch_sel.dma_rrarb3.state [1]).
Adding EN signal on $auto$ff.cc:262:slice$32466 ($_DFF_PN0_) from module dma_top (D = \ch_sel.dma_rrarb3.next_state [0], Q = \ch_sel.dma_rrarb3.state [0]).
Adding EN signal on $auto$ff.cc:262:slice$32249 ($_DFF_PN0_) from module dma_top (D = \ch_sel.dma_rrarb2.next_state [2], Q = \ch_sel.dma_rrarb2.state [2]).
Adding EN signal on $auto$ff.cc:262:slice$32248 ($_DFF_PN0_) from module dma_top (D = \ch_sel.dma_rrarb2.next_state [1], Q = \ch_sel.dma_rrarb2.state [1]).
Adding EN signal on $auto$ff.cc:262:slice$32247 ($_DFF_PN0_) from module dma_top (D = \ch_sel.dma_rrarb2.next_state [0], Q = \ch_sel.dma_rrarb2.state [0]).
Adding EN signal on $auto$ff.cc:262:slice$32030 ($_DFF_PN0_) from module dma_top (D = \ch_sel.dma_rrarb1.next_state [2], Q = \ch_sel.dma_rrarb1.state [2]).
Adding EN signal on $auto$ff.cc:262:slice$32029 ($_DFF_PN0_) from module dma_top (D = \ch_sel.dma_rrarb1.next_state [1], Q = \ch_sel.dma_rrarb1.state [1]).
Adding EN signal on $auto$ff.cc:262:slice$32028 ($_DFF_PN0_) from module dma_top (D = \ch_sel.dma_rrarb1.next_state [0], Q = \ch_sel.dma_rrarb1.state [0]).
Adding EN signal on $auto$ff.cc:262:slice$31811 ($_DFF_PN0_) from module dma_top (D = \ch_sel.dma_rrarb0.next_state [2], Q = \ch_sel.dma_rrarb0.state [2]).
Adding EN signal on $auto$ff.cc:262:slice$31810 ($_DFF_PN0_) from module dma_top (D = \ch_sel.dma_rrarb0.next_state [1], Q = \ch_sel.dma_rrarb0.state [1]).
Adding EN signal on $auto$ff.cc:262:slice$31809 ($_DFF_PN0_) from module dma_top (D = \ch_sel.dma_rrarb0.next_state [0], Q = \ch_sel.dma_rrarb0.state [0]).
Adding EN signal on $auto$ff.cc:262:slice$23396 ($_DFF_PN0_) from module dma_top (D = \ahb_mst1.mx_cmd_ns [1], Q = \ahb_mst1.mx_cmd_st [1]).
Adding EN signal on $auto$ff.cc:262:slice$23395 ($_DFF_PN0_) from module dma_top (D = \ahb_mst1.mx_cmd_ns [0], Q = \ahb_mst1.mx_cmd_st [0]).
Adding EN signal on $auto$ff.cc:262:slice$22565 ($_DFF_PN0_) from module dma_top (D = \ahb_mst0.mx_cmd_ns [1], Q = \ahb_mst0.mx_cmd_st [1]).
Adding EN signal on $auto$ff.cc:262:slice$22564 ($_DFF_PN0_) from module dma_top (D = \ahb_mst0.mx_cmd_ns [0], Q = \ahb_mst0.mx_cmd_st [0]).
Adding EN signal on $auto$ff.cc:262:slice$21485 ($_DFF_PN0_) from module dma_top (D = $auto$simplemap.cc:309:simplemap_bmux$21463 [0], Q = \de.m1_arb_st [0]).

yosys> opt_clean

3.18.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dma_top..
Removed 1 unused cells and 208 unused wires.
<suppressed ~2 debug messages>

yosys> opt_expr

3.18.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module dma_top.
<suppressed ~1448 debug messages>

3.18.16. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.18.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dma_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.18.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dma_top.
Performed a total of 0 changes.

yosys> opt_merge

3.18.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dma_top'.
<suppressed ~4725 debug messages>
Removed a total of 1575 cells.

yosys> opt_dff

3.18.20. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.18.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dma_top..
Removed 0 unused cells and 1007 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.18.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module dma_top.

3.18.23. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.18.24. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dma_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.18.25. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dma_top.
Performed a total of 0 changes.

yosys> opt_merge

3.18.26. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dma_top'.
Removed a total of 0 cells.

yosys> opt_dff

3.18.27. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.18.28. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dma_top..

yosys> opt_expr

3.18.29. Executing OPT_EXPR pass (perform const folding).
Optimizing module dma_top.

3.18.30. Finished OPT passes. (There is nothing left to do.)

yosys> memory -nomap

3.19. Executing MEMORY pass.

yosys> opt_mem

3.19.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

yosys> opt_mem_priority

3.19.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

yosys> opt_mem_feedback

3.19.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

yosys> memory_dff

3.19.4. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

yosys> opt_clean

3.19.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dma_top..

yosys> memory_share

3.19.6. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

yosys> opt_mem_widen

3.19.7. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

yosys> opt_clean

3.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dma_top..

yosys> memory_collect

3.19.9. Executing MEMORY_COLLECT pass (generating $mem cells).

yosys> opt_clean

3.20. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dma_top..

yosys> opt_expr -mux_undef

3.21. Executing OPT_EXPR pass (perform const folding).
Optimizing module dma_top.
<suppressed ~1608 debug messages>

yosys> simplemap

3.22. Executing SIMPLEMAP pass (map simple cells to gate primitives).

yosys> opt_expr

3.23. Executing OPT_EXPR pass (perform const folding).
Optimizing module dma_top.

yosys> opt_merge

3.24. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dma_top'.
<suppressed ~459 debug messages>
Removed a total of 153 cells.

yosys> opt_dff -nodffe -nosdff

3.25. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.26. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dma_top..
Removed 0 unused cells and 362 unused wires.
<suppressed ~1 debug messages>

yosys> opt -nodffe -nosdff

3.27. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.27.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dma_top.

yosys> opt_merge -nomux

3.27.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dma_top'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.27.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dma_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.27.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dma_top.
Performed a total of 0 changes.

yosys> opt_merge

3.27.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dma_top'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.27.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.27.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dma_top..

yosys> opt_expr

3.27.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module dma_top.

3.27.9. Finished OPT passes. (There is nothing left to do.)

yosys> opt -fast -full

3.28. Executing OPT pass (performing simple optimizations).

yosys> opt_expr -full

3.28.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dma_top.
<suppressed ~551 debug messages>

yosys> opt_merge

3.28.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dma_top'.
<suppressed ~48 debug messages>
Removed a total of 16 cells.

yosys> opt_dff

3.28.3. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.28.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dma_top..
Removed 0 unused cells and 8 unused wires.
<suppressed ~1 debug messages>

3.28.5. Finished fast OPT passes.

yosys> memory_map

3.29. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

yosys> opt -full

3.30. Executing OPT pass (performing simple optimizations).

yosys> opt_expr -full

3.30.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dma_top.

yosys> opt_merge -nomux

3.30.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dma_top'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.30.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dma_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce -full

3.30.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dma_top.
Performed a total of 0 changes.

yosys> opt_merge

3.30.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dma_top'.
Removed a total of 0 cells.

yosys> opt_share

3.30.6. Executing OPT_SHARE pass.
    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$23645 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$22263
        $auto$simplemap.cc:86:simplemap_bitop$22265

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$23646 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$22264
        $auto$simplemap.cc:86:simplemap_bitop$22268

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$24290 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$23167
        $auto$simplemap.cc:86:simplemap_bitop$23169

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$24291 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$23168
        $auto$simplemap.cc:86:simplemap_bitop$23172

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$31005 in front of them:
        $auto$simplemap.cc:312:simplemap_bmux$30908
        $auto$simplemap.cc:312:simplemap_bmux$30876

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$31006 in front of them:
        $auto$simplemap.cc:312:simplemap_bmux$30909
        $auto$simplemap.cc:312:simplemap_bmux$30877

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$31007 in front of them:
        $auto$simplemap.cc:312:simplemap_bmux$30910
        $auto$simplemap.cc:312:simplemap_bmux$30878

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$31008 in front of them:
        $auto$simplemap.cc:312:simplemap_bmux$30911
        $auto$simplemap.cc:312:simplemap_bmux$30879

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$31009 in front of them:
        $auto$simplemap.cc:312:simplemap_bmux$30912
        $auto$simplemap.cc:312:simplemap_bmux$30880

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$31010 in front of them:
        $auto$simplemap.cc:312:simplemap_bmux$30913
        $auto$simplemap.cc:312:simplemap_bmux$30881

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$31011 in front of them:
        $auto$simplemap.cc:312:simplemap_bmux$30914
        $auto$simplemap.cc:312:simplemap_bmux$30882

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$31012 in front of them:
        $auto$simplemap.cc:312:simplemap_bmux$30915
        $auto$simplemap.cc:312:simplemap_bmux$30883


yosys> opt_dff

3.30.7. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.30.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dma_top..

yosys> opt_expr -full

3.30.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module dma_top.
<suppressed ~19 debug messages>

3.30.10. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.30.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dma_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~12 debug messages>

yosys> opt_reduce -full

3.30.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dma_top.
Performed a total of 0 changes.

yosys> opt_merge

3.30.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dma_top'.
Removed a total of 0 cells.

yosys> opt_share

3.30.14. Executing OPT_SHARE pass.

yosys> opt_dff

3.30.15. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.30.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dma_top..

yosys> opt_expr -full

3.30.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module dma_top.

3.30.18. Finished OPT passes. (There is nothing left to do.)

yosys> techmap

3.31. Executing TECHMAP pass (map to technology primitives).

3.31.1. Executing Verilog-2005 frontend: /home/users/aram/Workspace/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/aram/Workspace/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.31.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $mux.
No more expansions possible.
<suppressed ~83 debug messages>

yosys> opt

3.32. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.32.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dma_top.

yosys> opt_merge -nomux

3.32.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dma_top'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.32.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dma_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.32.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dma_top.
Performed a total of 0 changes.

yosys> opt_merge

3.32.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dma_top'.
Removed a total of 0 cells.

yosys> opt_dff

3.32.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.32.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dma_top..

yosys> opt_expr

3.32.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module dma_top.

3.32.9. Finished OPT passes. (There is nothing left to do.)

yosys> abc -script abc_tmp.scr

3.33. Executing ABC pass (technology mapping using ABC).

3.33.1. Extracting gate netlist of module `\dma_top' to `<abc-temp-dir>/input.blif'..
Extracted 8647 gates and 10942 wires to a netlist network with 2293 inputs and 767 outputs.

3.33.1.1. Executing ABC.
Running ABC command: /home/users/aram/Workspace/yosys_verific_rs/logic_synthesis-rs/abc-rs/abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + source /home/users/aram/Workspace/yosys_verific_rs/result_09-03-2022T20-36-44/All_lut_synth_rs_area.json/dma/abc_tmp.scr 
ABC: netlist  : i/o =   2293/    767  and =   14819  lev =   30 (9.69)  mem = 0.25 MB
ABC: Mapping (K=6)  :  lut =   2499  edge =   12070  lev =   10 (3.83)  mem = 0.13 MB
ABC: netlist  : i/o =   2293/    767  and =   15031  lev =   26 (9.68)  mem = 0.25 MB
ABC: Mapping (K=6)  :  lut =   2489  edge =   12187  lev =    9 (3.49)  mem = 0.13 MB
ABC: netlist  : i/o =   2293/    767  and =   14901  lev =   30 (8.94)  mem = 0.25 MB
ABC: Mapping (K=6)  :  lut =   2467  edge =   12013  lev =   10 (3.58)  mem = 0.13 MB
ABC: netlist  : i/o =   2293/    767  and =   14903  lev =   23 (8.38)  mem = 0.25 MB
ABC: Mapping (K=6)  :  lut =   2454  edge =   11987  lev =   10 (3.62)  mem = 0.13 MB
ABC: netlist  : i/o =   2293/    767  and =   14737  lev =   24 (9.15)  mem = 0.25 MB
ABC: Mapping (K=6)  :  lut =   2487  edge =   11959  lev =   11 (3.78)  mem = 0.13 MB
ABC: netlist  : i/o =   2293/    767  and =   14751  lev =   29 (9.19)  mem = 0.32 MB
ABC: Mapping (K=6)  :  lut =   2438  edge =   11906  lev =    9 (3.69)  mem = 0.13 MB
ABC: netlist  : i/o =   2293/    767  and =   14717  lev =   25 (9.07)  mem = 0.31 MB
ABC: Mapping (K=6)  :  lut =   2441  edge =   11842  lev =    9 (3.65)  mem = 0.13 MB
ABC: netlist  : i/o =   2293/    767  and =   14721  lev =   25 (9.07)  mem = 0.31 MB
ABC: Mapping (K=6)  :  lut =   2435  edge =   11849  lev =    9 (3.61)  mem = 0.13 MB
ABC: netlist  : i/o =   2293/    767  and =   14589  lev =   26 (8.36)  mem = 0.31 MB
ABC: Mapping (K=6)  :  lut =   2434  edge =   11715  lev =   10 (3.59)  mem = 0.13 MB
ABC: netlist  : i/o =   2293/    767  and =   14621  lev =   27 (8.90)  mem = 0.31 MB
ABC: Mapping (K=6)  :  lut =   2418  edge =   11713  lev =   10 (3.70)  mem = 0.13 MB
ABC: netlist  : i/o =   2293/    767  and =   14676  lev =   28 (8.91)  mem = 0.31 MB
ABC: Mapping (K=6)  :  lut =   2406  edge =   11770  lev =   10 (3.61)  mem = 0.13 MB
ABC: netlist  : i/o =   2293/    767  and =   14673  lev =   28 (8.92)  mem = 0.31 MB
ABC: Mapping (K=6)  :  lut =   2399  edge =   11731  lev =   10 (3.60)  mem = 0.13 MB
ABC: netlist  : i/o =   2293/    767  and =   14681  lev =   28 (8.94)  mem = 0.31 MB
ABC: Mapping (K=6)  :  lut =   2399  edge =   11725  lev =   10 (3.60)  mem = 0.13 MB
ABC: netlist  : i/o =   2293/    767  and =   14673  lev =   28 (8.92)  mem = 0.25 MB
ABC: Mapping (K=6)  :  lut =   2399  edge =   11731  lev =   10 (3.60)  mem = 0.13 MB
ABC: netlist  : i/o =   2293/    767  and =   14673  lev =   28 (8.92)  mem = 0.31 MB
ABC: Mapping (K=6)  :  lut =   2398  edge =   11734  lev =   10 (3.60)  mem = 0.13 MB
ABC: netlist  : i/o =   2293/    767  and =   14697  lev =   29 (9.00)  mem = 0.25 MB
ABC: Mapping (K=6)  :  lut =   2398  edge =   11734  lev =   10 (3.60)  mem = 0.13 MB
ABC: + write_blif <abc-temp-dir>/output.blif 

3.33.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:     2400
ABC RESULTS:        internal signals:     7882
ABC RESULTS:           input signals:     2293
ABC RESULTS:          output signals:      767
Removing temp directory.

yosys> opt

3.34. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.34.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dma_top.

yosys> opt_merge -nomux

3.34.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dma_top'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.34.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dma_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.34.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dma_top.
Performed a total of 0 changes.

yosys> opt_merge

3.34.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dma_top'.
Removed a total of 0 cells.

yosys> opt_dff

3.34.6. Executing OPT_DFF pass (perform DFF optimizations).
Handling never-active EN on $auto$ff.cc:262:slice$24396 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$24395 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$24394 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$24393 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$24392 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$24391 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$24390 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$24389 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$24388 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$24387 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$24386 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$24385 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$24384 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$24383 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$24382 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$24381 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$24363 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$24362 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$24361 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$24360 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$24359 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$24358 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$24357 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$24356 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$24355 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$24354 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$24353 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$24352 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$24351 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$24350 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$24349 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$24348 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$23276 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$23275 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$23274 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$23273 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$23272 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$23271 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$23270 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$23269 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$23268 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$23267 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$23266 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$23265 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$23264 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$23263 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$23262 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$23261 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$22450 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$22449 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$22448 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$22447 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$22446 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$22445 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$22444 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$22443 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$22442 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$22441 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$22440 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$22439 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$22438 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$22437 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$22436 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling never-active EN on $auto$ff.cc:262:slice$22435 ($_DFFE_PN0P_) from module dma_top (removing D path).
Handling always-active async load on $auto$ff.cc:262:slice$34027 ($_DLATCH_P_) from module dma_top (changing to combinatorial circuit).
Handling always-active async load on $auto$ff.cc:262:slice$34026 ($_DLATCH_P_) from module dma_top (changing to combinatorial circuit).
Handling always-active async load on $auto$ff.cc:262:slice$34025 ($_DLATCH_P_) from module dma_top (changing to combinatorial circuit).
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$22435 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$22436 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$22437 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$22438 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$22439 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$22440 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$22441 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$22442 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$22443 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$22444 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$22445 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$22446 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$22447 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$22448 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$22449 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$22450 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$23261 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$23262 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$23263 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$23264 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$23265 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$23266 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$23267 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$23268 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$23269 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$23270 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$23271 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$23272 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$23273 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$23274 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$23275 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$23276 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$24348 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$24349 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$24350 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$24351 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$24352 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$24353 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$24354 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$24355 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$24356 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$24357 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$24358 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$24359 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$24360 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$24361 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$24362 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$24363 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$24381 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$24382 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$24383 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$24384 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$24385 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$24386 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$24387 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$24388 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$24389 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$24390 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$24391 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$24392 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$24393 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$24394 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$24395 ($_DLATCH_N_) from module dma_top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$24396 ($_DLATCH_N_) from module dma_top.

yosys> opt_clean

3.34.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dma_top..
Removed 433 unused cells and 6205 unused wires.
<suppressed ~1081 debug messages>

yosys> opt_expr

3.34.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module dma_top.

3.34.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.34.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dma_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.34.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dma_top.
Performed a total of 0 changes.

yosys> opt_merge

3.34.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dma_top'.
Removed a total of 0 cells.

yosys> opt_dff

3.34.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.34.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dma_top..

yosys> opt_expr

3.34.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module dma_top.

3.34.16. Finished OPT passes. (There is nothing left to do.)

yosys> hierarchy -check

3.35. Executing HIERARCHY pass (managing design hierarchy).

3.35.1. Analyzing design hierarchy..
Top module:  \dma_top

3.35.2. Analyzing design hierarchy..
Top module:  \dma_top
Removed 0 unused modules.

yosys> stat

3.36. Printing statistics.

=== dma_top ===

   Number of wires:               3092
   Number of wire bits:          13150
   Number of public wires:        1587
   Number of public wire bits:   11645
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               3743
     $_DFFE_PN0N_                    1
     $_DFFE_PN0P_                 1597
     $_DFFE_PN1P_                   47
     $_DFF_PN0_                     46
     $_DFF_PN1_                      4
     $_DFF_P_                       20
     $lut                         2028


yosys> opt_clean -purge

3.37. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dma_top..
Removed 0 unused cells and 974 unused wires.
<suppressed ~974 debug messages>

yosys> write_verilog -noattr -nohex dma_top.verilog

3.38. Executing Verilog backend.

yosys> bmuxmap

3.38.1. Executing BMUXMAP pass.

yosys> demuxmap

3.38.2. Executing DEMUXMAP pass.

yosys> clean_zerowidth
Dumping module `\dma_top'.

Warnings: 17 unique messages, 32 total
End of script. Logfile hash: c39d1c9346, CPU: user 56.98s system 0.21s, MEM: 99.18 MB peak
Yosys 0.14+36 (git sha1 15a4e900b, gcc 7.1.0 -fPIC -Os)
Time spent: 39% 1x abc (37 sec), 32% 23x opt_dff (30 sec), ...
