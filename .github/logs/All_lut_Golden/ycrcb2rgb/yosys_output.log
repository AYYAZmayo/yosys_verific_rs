
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.14+36 (git sha1 15a4e900b, gcc 7.1.0 -fPIC -Os)


-- Executing script file `yosys.ys' --
echo on

yosys> plugin -i synth-rs

yosys> read -verific

yosys> read -incdir .

yosys> verific -vlog-incdir .

1. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Jan22_SW_Release, released at Sat Jan 29 02:42:49 2022.

yosys> verilog_defaults -add -I.

yosys> read -vlog2k ycrcb2rgb.v

yosys> verific -vlog2k ycrcb2rgb.v

2. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Jan22_SW_Release, released at Sat Jan 29 02:42:49 2022.
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'ycrcb2rgb.v'

yosys> synth_rs -top top -tech generic -goal area -no_dsp -no_bram -verilog top.verilog

3. Executing synth_rs pass.

yosys> hierarchy -check -top top

3.1. Executing HIERARCHY pass (managing design hierarchy).
VERIFIC-INFO [VERI-1018] ycrcb2rgb.v:57: compiling module 'top'
VERIFIC-WARNING [VERI-2371] ycrcb2rgb.v:98: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] ycrcb2rgb.v:99: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] ycrcb2rgb.v:100: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] ycrcb2rgb.v:109: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] ycrcb2rgb.v:111: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] ycrcb2rgb.v:120: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] ycrcb2rgb.v:121: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] ycrcb2rgb.v:123: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] ycrcb2rgb.v:132: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] ycrcb2rgb.v:134: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] ycrcb2rgb.v:144: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] ycrcb2rgb.v:147: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] ycrcb2rgb.v:150: delay control is not supported for synthesis
Importing module top.

3.1.1. Analyzing design hierarchy..
Top module:  \top

3.1.2. Analyzing design hierarchy..
Top module:  \top
Removed 0 unused modules.

yosys> proc

3.2. Executing PROC pass (convert processes to netlists).

yosys> proc_clean

3.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> proc_rmdead

3.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

yosys> proc_prune

3.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

yosys> proc_init

3.2.4. Executing PROC_INIT pass (extract init attributes).

yosys> proc_arst

3.2.5. Executing PROC_ARST pass (detect async resets in processes).

yosys> proc_mux

3.2.6. Executing PROC_MUX pass (convert decision trees to multiplexers).

yosys> proc_dlatch

3.2.7. Executing PROC_DLATCH pass (convert process syncs to latches).

yosys> proc_dff

3.2.8. Executing PROC_DFF pass (convert process syncs to FFs).

yosys> proc_memwr

3.2.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

yosys> proc_clean

3.2.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> opt_expr -keepdc

3.2.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

yosys> flatten

3.3. Executing FLATTEN pass (flatten design).

yosys> tribuf -logic

3.4. Executing TRIBUF pass.

yosys> opt_expr

3.5. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~3 debug messages>

yosys> opt_clean

3.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 16 unused wires.
<suppressed ~14 debug messages>

yosys> check

3.7. Executing CHECK pass (checking for obvious problems).
Checking module top...
Found and reported 0 problems.

yosys> deminout

3.8. Executing DEMINOUT pass (demote inout ports to input or output).

yosys> opt -nodffe -nosdff

3.9. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.9.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

yosys> opt_merge -nomux

3.9.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.9.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~13 debug messages>

yosys> opt_reduce

3.9.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.9.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.9.6. Executing OPT_DFF pass (perform DFF optimizations).
Removing never-active async load on $verific$rm_reg$ycrcb2rgb.v:112$79 ($aldff) from module top.
Removing never-active async load on $verific$r_reg$ycrcb2rgb.v:151$120 ($aldff) from module top.
Removing never-active async load on $verific$ir_reg$ycrcb2rgb.v:112$80 ($aldff) from module top.
Removing never-active async load on $verific$ig_reg$ycrcb2rgb.v:124$93 ($aldff) from module top.
Removing never-active async load on $verific$ib_reg$ycrcb2rgb.v:135$102 ($aldff) from module top.
Removing never-active async load on $verific$gm2_reg$ycrcb2rgb.v:124$92 ($aldff) from module top.
Removing never-active async load on $verific$gm1_reg$ycrcb2rgb.v:124$91 ($aldff) from module top.
Removing never-active async load on $verific$g_reg$ycrcb2rgb.v:151$121 ($aldff) from module top.
Removing never-active async load on $verific$dy_reg$ycrcb2rgb.v:101$69 ($aldff) from module top.
Removing never-active async load on $verific$dcr_reg$ycrcb2rgb.v:101$70 ($aldff) from module top.
Removing never-active async load on $verific$dcb_reg$ycrcb2rgb.v:101$71 ($aldff) from module top.
Removing never-active async load on $verific$bm_reg$ycrcb2rgb.v:135$101 ($aldff) from module top.
Removing never-active async load on $verific$b_reg$ycrcb2rgb.v:151$122 ($aldff) from module top.

yosys> opt_clean

3.9.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

yosys> opt_expr

3.9.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.9.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.9.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~13 debug messages>

yosys> opt_reduce

3.9.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.9.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.9.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.9.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

yosys> opt_expr

3.9.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.9.16. Finished OPT passes. (There is nothing left to do.)

yosys> fsm

3.10. Executing FSM pass (extract and optimize FSM).

yosys> fsm_detect

3.10.1. Executing FSM_DETECT pass (finding FSMs in design).

yosys> fsm_extract

3.10.2. Executing FSM_EXTRACT pass (extracting FSM from design).

yosys> fsm_opt

3.10.3. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> opt_clean

3.10.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

yosys> fsm_opt

3.10.5. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> fsm_recode

3.10.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

yosys> fsm_info

3.10.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

yosys> fsm_map

3.10.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

yosys> opt -sat

3.11. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

yosys> opt_merge -nomux

3.11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.11.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~13 debug messages>

yosys> opt_reduce

3.11.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.11.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.11.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $verific$rm_reg$ycrcb2rgb.v:112$79 ($dff) from module top (D = { 1'0 $verific$n105$24 [18:2] 2'00 }, Q = \rm).
Adding EN signal on $verific$r_reg$ycrcb2rgb.v:151$120 ($dff) from module top (D = $verific$n768$49, Q = \r).
Adding EN signal on $verific$ir_reg$ycrcb2rgb.v:112$80 ($dff) from module top (D = { 1'0 $verific$n158$5 $verific$n159$27 \rm [9:0] }, Q = \ir).
Adding EN signal on $verific$ig_reg$ycrcb2rgb.v:124$93 ($dff) from module top (D = { $verific$n391$36 [21] $verific$n391$36 }, Q = \ig).
Adding EN signal on $verific$ib_reg$ycrcb2rgb.v:135$102 ($dff) from module top (D = { 1'0 $verific$n625$8 $verific$n626$44 \bm [9:0] }, Q = \ib).
Adding EN signal on $verific$gm2_reg$ycrcb2rgb.v:124$92 ($dff) from module top (D = $verific$n327$33, Q = \gm2).
Adding EN signal on $verific$gm1_reg$ycrcb2rgb.v:124$91 ($dff) from module top (D = { 1'0 $verific$n286$31 [18:5] 5'00000 }, Q = \gm1).
Adding EN signal on $verific$g_reg$ycrcb2rgb.v:151$121 ($dff) from module top (D = $verific$n805$52, Q = \g).
Adding EN signal on $verific$dy_reg$ycrcb2rgb.v:101$69 ($dff) from module top (D = \y, Q = \dy).
Adding EN signal on $verific$dcr_reg$ycrcb2rgb.v:101$70 ($dff) from module top (D = \cr, Q = \dcr).
Adding EN signal on $verific$dcb_reg$ycrcb2rgb.v:101$71 ($dff) from module top (D = \cb, Q = \dcb).
Adding EN signal on $verific$bm_reg$ycrcb2rgb.v:135$101 ($dff) from module top (D = { $verific$n571$41 [19:2] 2'00 }, Q = \bm).
Adding EN signal on $verific$b_reg$ycrcb2rgb.v:151$122 ($dff) from module top (D = $verific$n842$55, Q = \b).
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$135 ($dffe) from module top.
Setting constant 0-bit at position 1 on $auto$ff.cc:262:slice$135 ($dffe) from module top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$130 ($dffe) from module top.
Setting constant 0-bit at position 1 on $auto$ff.cc:262:slice$130 ($dffe) from module top.
Setting constant 0-bit at position 2 on $auto$ff.cc:262:slice$130 ($dffe) from module top.
Setting constant 0-bit at position 3 on $auto$ff.cc:262:slice$130 ($dffe) from module top.
Setting constant 0-bit at position 4 on $auto$ff.cc:262:slice$130 ($dffe) from module top.
Setting constant 0-bit at position 19 on $auto$ff.cc:262:slice$130 ($dffe) from module top.
Setting constant 0-bit at position 22 on $auto$ff.cc:262:slice$128 ($dffe) from module top.
Setting constant 0-bit at position 22 on $auto$ff.cc:262:slice$126 ($dffe) from module top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$124 ($dffe) from module top.
Setting constant 0-bit at position 1 on $auto$ff.cc:262:slice$124 ($dffe) from module top.
Setting constant 0-bit at position 19 on $auto$ff.cc:262:slice$124 ($dffe) from module top.

yosys> opt_clean

3.11.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 13 unused cells and 13 unused wires.
<suppressed ~14 debug messages>

yosys> opt_expr

3.11.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~2 debug messages>

3.11.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.11.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.11.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.11.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.11.13. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$139 ($dffe) from module top.
Setting constant 0-bit at position 1 on $auto$ff.cc:262:slice$139 ($dffe) from module top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$140 ($dffe) from module top.
Setting constant 0-bit at position 1 on $auto$ff.cc:262:slice$140 ($dffe) from module top.

yosys> opt_clean

3.11.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.11.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.11.16. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.11.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.11.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.11.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.11.20. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.11.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

yosys> opt_expr

3.11.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.11.23. Finished OPT passes. (There is nothing left to do.)

yosys> wreduce -keepdc

3.12. Executing WREDUCE pass (reducing word size of cells).
Removed top 2 bits (of 11) from port B of cell top.$verific$add_17$ycrcb2rgb.v:111$75 ($add).
Removed top 1 bits (of 23) from FF cell top.$auto$ff.cc:262:slice$127 ($dffe).
Removed top 1 bits (of 20) from port A of cell top.$verific$add_28$ycrcb2rgb.v:123$85 ($add).
Removed top 2 bits (of 22) from port A of cell top.$verific$sub_29$ycrcb2rgb.v:123$86 ($sub).
Removed top 1 bits (of 22) from port B of cell top.$verific$sub_29$ycrcb2rgb.v:123$86 ($sub).
Removed top 1 bits (of 11) from port B of cell top.$verific$add_41$ycrcb2rgb.v:134$97 ($add).
Removed top 1 bits (of 20) from wire top.gm1.
Removed top 1 bits (of 23) from wire top.ib.
Removed top 7 bits (of 23) from wire top.ig.
Removed top 1 bits (of 23) from wire top.ir.
Removed top 1 bits (of 20) from wire top.rm.

yosys> peepopt

3.13. Executing PEEPOPT pass (run peephole optimizers).

yosys> pmuxtree

3.14. Executing PMUXTREE pass.

yosys> opt_clean

3.15. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 4 unused wires.
<suppressed ~1 debug messages>

yosys> techmap

3.16. Executing TECHMAP pass (map to technology primitives).

3.16.1. Executing Verilog-2005 frontend: /home/users/aram/Workspace/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/aram/Workspace/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.16.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $dffe.
Running "alumacc" on wrapper $extern:wrap:$mul:A_SIGNED=0:A_WIDTH=7:B_SIGNED=0:B_WIDTH=10:Y_WIDTH=17:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$mul:A_SIGNED=0:A_WIDTH=7:B_SIGNED=0:B_WIDTH=10:Y_WIDTH=17:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$mul:A_SIGNED=0:A_WIDTH=7:B_SIGNED=0:B_WIDTH=10:Y_WIDTH=17:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$add:A_SIGNED=0:A_WIDTH=10:B_SIGNED=0:B_WIDTH=10:Y_WIDTH=11:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$add:A_SIGNED=0:A_WIDTH=10:B_SIGNED=0:B_WIDTH=10:Y_WIDTH=11:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$add:A_SIGNED=0:A_WIDTH=10:B_SIGNED=0:B_WIDTH=10:Y_WIDTH=11:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$add:A_SIGNED=0:A_WIDTH=11:B_SIGNED=0:B_WIDTH=9:Y_WIDTH=12:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$add:A_SIGNED=0:A_WIDTH=11:B_SIGNED=0:B_WIDTH=9:Y_WIDTH=12:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$add:A_SIGNED=0:A_WIDTH=11:B_SIGNED=0:B_WIDTH=9:Y_WIDTH=12:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$mul:A_SIGNED=0:A_WIDTH=4:B_SIGNED=0:B_WIDTH=10:Y_WIDTH=14:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$mul:A_SIGNED=0:A_WIDTH=4:B_SIGNED=0:B_WIDTH=10:Y_WIDTH=14:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$mul:A_SIGNED=0:A_WIDTH=4:B_SIGNED=0:B_WIDTH=10:Y_WIDTH=14:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$mul:A_SIGNED=0:A_WIDTH=10:B_SIGNED=0:B_WIDTH=10:Y_WIDTH=20:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$mul:A_SIGNED=0:A_WIDTH=10:B_SIGNED=0:B_WIDTH=10:Y_WIDTH=20:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$mul:A_SIGNED=0:A_WIDTH=10:B_SIGNED=0:B_WIDTH=10:Y_WIDTH=20:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$add:A_SIGNED=0:A_WIDTH=19:B_SIGNED=0:B_WIDTH=20:Y_WIDTH=21:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$add:A_SIGNED=0:A_WIDTH=19:B_SIGNED=0:B_WIDTH=20:Y_WIDTH=21:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$add:A_SIGNED=0:A_WIDTH=19:B_SIGNED=0:B_WIDTH=20:Y_WIDTH=21:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:A_SIGNED=0:A_WIDTH=20:B_SIGNED=0:B_WIDTH=21:Y_WIDTH=22:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:A_SIGNED=0:A_WIDTH=20:B_SIGNED=0:B_WIDTH=21:Y_WIDTH=22:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:A_SIGNED=0:A_WIDTH=20:B_SIGNED=0:B_WIDTH=21:Y_WIDTH=22:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$mul:A_SIGNED=0:A_WIDTH=8:B_SIGNED=0:B_WIDTH=10:Y_WIDTH=18:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$mul:A_SIGNED=0:A_WIDTH=8:B_SIGNED=0:B_WIDTH=10:Y_WIDTH=18:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$mul:A_SIGNED=0:A_WIDTH=8:B_SIGNED=0:B_WIDTH=10:Y_WIDTH=18:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$add:A_SIGNED=0:A_WIDTH=11:B_SIGNED=0:B_WIDTH=10:Y_WIDTH=12:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$add:A_SIGNED=0:A_WIDTH=11:B_SIGNED=0:B_WIDTH=10:Y_WIDTH=12:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$add:A_SIGNED=0:A_WIDTH=11:B_SIGNED=0:B_WIDTH=10:Y_WIDTH=12:394426c56d1a028ba8fdd5469b163e04011def47.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $not.
Using extmapper maccmap for cells of type $macc.
  add \cr * 7'1100111 (10x7 bits, unsigned)
Using template $paramod$5de5fbe7c1e0726c07e3a4cebe563a6a1315b736\_90_alu for cells of type $alu.
Using template $paramod$dfaa04bffe3e017751f4fbfae888aaf8cc1fde7a\_90_alu for cells of type $alu.
  add \cb * 4'1011 (10x4 bits, unsigned)
  add 10'1011011011 * \cr (10x10 bits, unsigned)
Using template $paramod$7625443a2b29a69e83f7ff807e2eb352e3267312\_90_alu for cells of type $alu.
Using template $paramod$ccaf1e8495b05dbae511173ea10e2fb71fc040a1\_90_alu for cells of type $alu.
  add \cb * 8'11000101 (10x8 bits, unsigned)
Using template $paramod$9503ccbdaa0d43eea34db1a74a4be1091d99b327\_90_alu for cells of type $alu.
Using template $paramod\_90_fa\WIDTH=32'00000000000000000000000000010001 for cells of type $fa.
Using template $paramod$3bb72ad0665cdca279bbc49ed6a39f403f16497f\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001011 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $mux.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001100 for cells of type $lcu.
Using template $paramod\_90_fa\WIDTH=32'00000000000000000000000000001110 for cells of type $fa.
Using template $paramod$091610cd349a68bd5539cffd7126f0d76e9bca00\_90_alu for cells of type $alu.
Using template $paramod\_90_fa\WIDTH=32'00000000000000000000000000010100 for cells of type $fa.
Using template $paramod$6fc37af1c109ae54e8aed83fcd995c12d378ce93\_90_alu for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010101 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010110 for cells of type $lcu.
Using template $paramod\_90_fa\WIDTH=32'00000000000000000000000000010010 for cells of type $fa.
Using template $paramod$12350b8c8422a70d10b7db4eaae1202a7148b784\_90_alu for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010001 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001110 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010100 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010010 for cells of type $lcu.
No more expansions possible.
<suppressed ~2687 debug messages>

yosys> alumacc

3.17. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module top:
  created 0 $alu and 0 $macc cells.

yosys> opt

3.18. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~2331 debug messages>

yosys> opt_merge -nomux

3.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~432 debug messages>
Removed a total of 144 cells.

yosys> opt_muxtree

3.18.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.18.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.18.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_dff

3.18.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.18.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 195 unused cells and 703 unused wires.
<suppressed ~196 debug messages>

yosys> opt_expr

3.18.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.18.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.18.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.18.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.18.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_dff

3.18.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.18.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

yosys> opt_expr

3.18.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.18.16. Finished OPT passes. (There is nothing left to do.)

yosys> memory -nomap

3.19. Executing MEMORY pass.

yosys> opt_mem

3.19.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

yosys> opt_mem_priority

3.19.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

yosys> opt_mem_feedback

3.19.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

yosys> memory_dff

3.19.4. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

yosys> opt_clean

3.19.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

yosys> memory_share

3.19.6. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

yosys> opt_mem_widen

3.19.7. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

yosys> opt_clean

3.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

yosys> memory_collect

3.19.9. Executing MEMORY_COLLECT pass (generating $mem cells).

yosys> opt_clean

3.20. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

yosys> opt_expr -mux_undef

3.21. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

yosys> simplemap

3.22. Executing SIMPLEMAP pass (map simple cells to gate primitives).

yosys> opt_expr

3.23. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

yosys> opt_merge

3.24. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.25. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.26. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

yosys> opt -nodffe -nosdff

3.27. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.27.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

yosys> opt_merge -nomux

3.27.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.27.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.27.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.27.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.27.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.27.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

yosys> opt_expr

3.27.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.27.9. Finished OPT passes. (There is nothing left to do.)

yosys> opt -fast -full

3.28. Executing OPT pass (performing simple optimizations).

yosys> opt_expr -full

3.28.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~36 debug messages>

yosys> opt_merge

3.28.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_dff

3.28.3. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.28.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

3.28.5. Finished fast OPT passes.

yosys> memory_map

3.29. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

yosys> opt -full

3.30. Executing OPT pass (performing simple optimizations).

yosys> opt_expr -full

3.30.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

yosys> opt_merge -nomux

3.30.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.30.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce -full

3.30.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.30.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_share

3.30.6. Executing OPT_SHARE pass.

yosys> opt_dff

3.30.7. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.30.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

yosys> opt_expr -full

3.30.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.30.10. Finished OPT passes. (There is nothing left to do.)

yosys> techmap

3.31. Executing TECHMAP pass (map to technology primitives).

3.31.1. Executing Verilog-2005 frontend: /home/users/aram/Workspace/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/aram/Workspace/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.31.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~71 debug messages>

yosys> opt

3.32. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.32.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

yosys> opt_merge -nomux

3.32.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.32.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.32.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.32.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_dff

3.32.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.32.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

yosys> opt_expr

3.32.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.32.9. Finished OPT passes. (There is nothing left to do.)

yosys> abc -script abc_tmp.scr

3.33. Executing ABC pass (technology mapping using ABC).

3.33.1. Extracting gate netlist of module `\top' to `<abc-temp-dir>/input.blif'..
Extracted 1277 gates and 1414 wires to a netlist network with 137 inputs and 117 outputs.

3.33.1.1. Executing ABC.
Running ABC command: /home/users/aram/Workspace/yosys_verific_rs/logic_synthesis-rs/abc-rs/abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + source /home/users/aram/Workspace/yosys_verific_rs/result_09-03-2022T20-36-44/All_lut_synth_rs_area.json/ycrcb2rgb/abc_tmp.scr 
ABC: netlist  : i/o =    137/    117  and =    3745  lev =   41 (17.41)  mem = 0.05 MB
ABC: Mapping (K=6)  :  lut =    337  edge =    1380  lev =   12 (5.03)  mem = 0.02 MB
ABC: netlist  : i/o =    137/    117  and =    3826  lev =   46 (18.27)  mem = 0.05 MB
ABC: Mapping (K=6)  :  lut =    302  edge =    1293  lev =   13 (5.04)  mem = 0.02 MB
ABC: netlist  : i/o =    137/    117  and =    3758  lev =   47 (18.02)  mem = 0.05 MB
ABC: Mapping (K=6)  :  lut =    296  edge =    1260  lev =   13 (5.01)  mem = 0.02 MB
ABC: netlist  : i/o =    137/    117  and =    2847  lev =   40 (16.28)  mem = 0.04 MB
ABC: Mapping (K=6)  :  lut =    290  edge =    1254  lev =   13 (4.93)  mem = 0.02 MB
ABC: netlist  : i/o =    137/    117  and =    3714  lev =   45 (18.34)  mem = 0.05 MB
ABC: Mapping (K=6)  :  lut =    300  edge =    1268  lev =   13 (5.13)  mem = 0.02 MB
ABC: netlist  : i/o =    137/    117  and =    3736  lev =   46 (17.97)  mem = 0.07 MB
ABC: Mapping (K=6)  :  lut =    285  edge =    1262  lev =   13 (4.74)  mem = 0.02 MB
ABC: netlist  : i/o =    137/    117  and =    3788  lev =   44 (17.64)  mem = 0.07 MB
ABC: Mapping (K=6)  :  lut =    283  edge =    1249  lev =   13 (4.69)  mem = 0.02 MB
ABC: netlist  : i/o =    137/    117  and =    3777  lev =   44 (17.46)  mem = 0.07 MB
ABC: Mapping (K=6)  :  lut =    280  edge =    1243  lev =   13 (4.62)  mem = 0.02 MB
ABC: netlist  : i/o =    137/    117  and =    2981  lev =   42 (15.68)  mem = 0.05 MB
ABC: Mapping (K=6)  :  lut =    279  edge =    1241  lev =   13 (4.65)  mem = 0.02 MB
ABC: netlist  : i/o =    137/    117  and =    4158  lev =   42 (17.67)  mem = 0.07 MB
ABC: Mapping (K=6)  :  lut =    276  edge =    1227  lev =   13 (4.57)  mem = 0.02 MB
ABC: netlist  : i/o =    137/    117  and =    3811  lev =   44 (18.10)  mem = 0.07 MB
ABC: Mapping (K=6)  :  lut =    275  edge =    1219  lev =   13 (4.61)  mem = 0.02 MB
ABC: netlist  : i/o =    137/    117  and =    3795  lev =   44 (18.09)  mem = 0.07 MB
ABC: Mapping (K=6)  :  lut =    275  edge =    1211  lev =   13 (4.68)  mem = 0.02 MB
ABC: netlist  : i/o =    137/    117  and =    3816  lev =   44 (18.03)  mem = 0.07 MB
ABC: Mapping (K=6)  :  lut =    274  edge =    1215  lev =   13 (4.61)  mem = 0.02 MB
ABC: netlist  : i/o =    137/    117  and =    3816  lev =   44 (18.03)  mem = 0.05 MB
ABC: Mapping (K=6)  :  lut =    274  edge =    1215  lev =   13 (4.61)  mem = 0.02 MB
ABC: netlist  : i/o =    137/    117  and =    3816  lev =   44 (18.03)  mem = 0.07 MB
ABC: Mapping (K=6)  :  lut =    274  edge =    1215  lev =   13 (4.61)  mem = 0.02 MB
ABC: netlist  : i/o =    137/    117  and =    3781  lev =   45 (18.18)  mem = 0.05 MB
ABC: Mapping (K=6)  :  lut =    274  edge =    1215  lev =   13 (4.61)  mem = 0.02 MB
ABC: + write_blif <abc-temp-dir>/output.blif 

3.33.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:      274
ABC RESULTS:        internal signals:     1160
ABC RESULTS:           input signals:      137
ABC RESULTS:          output signals:      117
Removing temp directory.

yosys> opt

3.34. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.34.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

yosys> opt_merge -nomux

3.34.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.34.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.34.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.34.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_dff

3.34.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.34.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 625 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.34.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.34.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.34.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.34.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.34.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_dff

3.34.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.34.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

yosys> opt_expr

3.34.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.34.16. Finished OPT passes. (There is nothing left to do.)

yosys> hierarchy -check

3.35. Executing HIERARCHY pass (managing design hierarchy).

3.35.1. Analyzing design hierarchy..
Top module:  \top

3.35.2. Analyzing design hierarchy..
Top module:  \top
Removed 0 unused modules.

yosys> stat

3.36. Printing statistics.

=== top ===

   Number of wires:                232
   Number of wire bits:            762
   Number of public wires:          18
   Number of public wire bits:     230
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                421
     $_DFFE_PP_                    147
     $lut                          274


yosys> opt_clean -purge

3.37. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

yosys> write_verilog -noattr -nohex top.verilog

3.38. Executing Verilog backend.

yosys> bmuxmap

3.38.1. Executing BMUXMAP pass.

yosys> demuxmap

3.38.2. Executing DEMUXMAP pass.

yosys> clean_zerowidth
Dumping module `\top'.

Warnings: 13 unique messages, 13 total
End of script. Logfile hash: 3f9f78171f, CPU: user 2.27s system 0.04s, MEM: 33.32 MB peak
Yosys 0.14+36 (git sha1 15a4e900b, gcc 7.1.0 -fPIC -Os)
Time spent: 78% 1x abc (8 sec), 8% 40x opt_expr (0 sec), ...
