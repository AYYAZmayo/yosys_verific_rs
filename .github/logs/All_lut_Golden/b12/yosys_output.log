
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.14+36 (git sha1 4cd3e3b51, gcc 7.1.0 -fPIC -Os)


-- Executing script file `yosys.ys' --
echo on

yosys> plugin -i synth-rs

yosys> read -verific

yosys> read -incdir .

yosys> verific -vlog-incdir .

1. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Jan22_SW_Release, released at Sat Jan 29 02:42:49 2022.

yosys> verilog_defaults -add -I.

yosys> read -vhdl b12.vhd

yosys> verific -vhdl b12.vhd

2. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Jan22_SW_Release, released at Sat Jan 29 02:42:49 2022.
VERIFIC-INFO [VHDL-1504] default VHDL library search path is now "/home/users/meri/Documents/workspace/clean/for_push/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008"
VERIFIC-COMMENT [VHDL-1481] Analyzing VHDL file 'b12.vhd'
VERIFIC-COMMENT [VHDL-1493] Restoring VHDL unit 'std.standard' from file '/home/users/meri/Documents/workspace/clean/for_push/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008/std/standard.vdb'
VERIFIC-INFO [VHDL-1012] b12.vhd:1: analyzing entity 'b12'
VERIFIC-INFO [VHDL-1010] b12.vhd:12: analyzing architecture 'behav'

yosys> synth_rs -top b12 -tech genesis -goal area -de -no_dsp -no_bram -verilog b12.verilog

3. Executing synth_rs pass.

yosys> read_verilog -lib -specify -nomem2reg +/rapidsilicon/common/cells_sim.v +/rapidsilicon/genesis/cells_sim.v

3.1. Executing Verilog-2005 frontend: /home/users/meri/Documents/workspace/clean/for_push/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v
Parsing Verilog input from `/home/users/meri/Documents/workspace/clean/for_push/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\inv'.
Generating RTLIL representation for module `\buff'.
Generating RTLIL representation for module `\logic_0'.
Generating RTLIL representation for module `\logic_1'.
Generating RTLIL representation for module `\gclkbuff'.
Successfully finished Verilog frontend.

3.2. Executing Verilog-2005 frontend: /home/users/meri/Documents/workspace/clean/for_push/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/cells_sim.v
Parsing Verilog input from `/home/users/meri/Documents/workspace/clean/for_push/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\dff'.
Generating RTLIL representation for module `\dffn'.
Generating RTLIL representation for module `\dffsre'.
Generating RTLIL representation for module `\dffnsre'.
Generating RTLIL representation for module `\latchsre'.
Generating RTLIL representation for module `\latchnsre'.
Generating RTLIL representation for module `\io_scff'.
Generating RTLIL representation for module `\scff'.
Generating RTLIL representation for module `\sh_dff'.
Successfully finished Verilog frontend.

yosys> hierarchy -check -top b12

3.3. Executing HIERARCHY pass (managing design hierarchy).
VERIFIC-INFO [VHDL-1067] b12.vhd:1: processing 'b12(BEHAV)'
Importing module standard.
Importing module b12.

3.3.1. Analyzing design hierarchy..
Top module:  \b12

3.3.2. Analyzing design hierarchy..
Top module:  \b12
Removing unused module `\standard'.
Removed 1 unused modules.

yosys> proc

3.4. Executing PROC pass (convert processes to netlists).

yosys> proc_clean

3.4.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> proc_rmdead

3.4.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

yosys> proc_prune

3.4.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

yosys> proc_init

3.4.4. Executing PROC_INIT pass (extract init attributes).

yosys> proc_arst

3.4.5. Executing PROC_ARST pass (detect async resets in processes).

yosys> proc_mux

3.4.6. Executing PROC_MUX pass (convert decision trees to multiplexers).

yosys> proc_dlatch

3.4.7. Executing PROC_DLATCH pass (convert process syncs to latches).

yosys> proc_dff

3.4.8. Executing PROC_DFF pass (convert process syncs to FFs).

yosys> proc_memwr

3.4.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

yosys> proc_clean

3.4.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> opt_expr -keepdc

3.4.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.
<suppressed ~9 debug messages>

yosys> flatten

3.5. Executing FLATTEN pass (flatten design).

yosys> tribuf -logic

3.6. Executing TRIBUF pass.

yosys> deminout

3.7. Executing DEMINOUT pass (demote inout ports to input or output).

yosys> opt_expr

3.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.

yosys> opt_clean

3.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..
Removed 0 unused cells and 46 unused wires.
<suppressed ~19 debug messages>

yosys> check

3.10. Executing CHECK pass (checking for obvious problems).
Checking module b12...
Found and reported 0 problems.

yosys> opt -nodffe -nosdff

3.11. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.

yosys> opt_merge -nomux

3.11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

yosys> opt_muxtree

3.11.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~76 debug messages>

yosys> opt_reduce

3.11.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

yosys> opt_merge

3.11.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.11.6. Executing OPT_DFF pass (perform DFF optimizations).
Changing const-value async load to async reset on $verific$wr_reg$b12.vhd:564$550 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$timebase_reg$b12.vhd:564$554 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$speaker_reg$b12.vhd:144$312 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$sound_reg$b12.vhd:564$556 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$scan_reg$b12.vhd:564$551 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$s_reg$b12.vhd:144$311 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$play_reg$b12.vhd:564$549 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$nloss_reg$b12.vhd:564$547 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$nl_reg$b12.vhd:564$548 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_9$b12.vhd:184$399 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_8$b12.vhd:184$398 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_7$b12.vhd:184$397 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_6$b12.vhd:184$396 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_5$b12.vhd:184$395 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_4$b12.vhd:184$394 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_32$b12.vhd:184$422 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_31$b12.vhd:184$421 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_30$b12.vhd:184$420 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_3$b12.vhd:184$393 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_29$b12.vhd:184$419 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_28$b12.vhd:184$418 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_27$b12.vhd:184$417 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_26$b12.vhd:184$416 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_25$b12.vhd:184$415 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_24$b12.vhd:184$414 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_23$b12.vhd:184$413 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_22$b12.vhd:184$412 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_21$b12.vhd:184$411 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_20$b12.vhd:184$410 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_2$b12.vhd:184$392 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_19$b12.vhd:184$409 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_18$b12.vhd:184$408 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_17$b12.vhd:184$407 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_16$b12.vhd:184$406 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_15$b12.vhd:184$405 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_14$b12.vhd:184$404 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_13$b12.vhd:184$403 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_12$b12.vhd:184$402 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_11$b12.vhd:184$401 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_10$b12.vhd:184$400 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg$b12.vhd:184$423 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$max_reg$b12.vhd:564$552 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$ind_reg$b12.vhd:564$553 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$gamma_reg$b12.vhd:564$559 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$data_out_reg$b12.vhd:184$391 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$data_in_reg$b12.vhd:564$558 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$counter_reg$b12.vhd:144$313 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$count_reg_2$b12.vhd:164$319 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$count_reg$b12.vhd:564$555 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$address_reg$b12.vhd:564$557 ($aldff) from module b12.

yosys> opt_clean

3.11.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..

yosys> opt_expr

3.11.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.

3.11.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.11.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~76 debug messages>

yosys> opt_reduce

3.11.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

yosys> opt_merge

3.11.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.11.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.11.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..

yosys> opt_expr

3.11.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.

3.11.16. Finished OPT passes. (There is nothing left to do.)

yosys> fsm

3.12. Executing FSM pass (extract and optimize FSM).

yosys> fsm_detect

3.12.1. Executing FSM_DETECT pass (finding FSMs in design).

yosys> fsm_extract

3.12.2. Executing FSM_EXTRACT pass (extracting FSM from design).

yosys> fsm_opt

3.12.3. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> opt_clean

3.12.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..

yosys> fsm_opt

3.12.5. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> fsm_recode

3.12.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

yosys> fsm_info

3.12.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

yosys> fsm_map

3.12.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

yosys> opt -sat

3.13. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.

yosys> opt_merge -nomux

3.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~76 debug messages>

yosys> opt_reduce

3.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

yosys> opt_merge

3.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.13.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $verific$s_reg$b12.vhd:144$311 ($adff) from module b12 (D = $verific$n125$35, Q = \s).
Adding EN signal on $verific$memory_reg_9$b12.vhd:184$399 ($adff) from module b12 (D = \data_in, Q = \memory[24]).
Adding EN signal on $verific$memory_reg_8$b12.vhd:184$398 ($adff) from module b12 (D = \data_in, Q = \memory[25]).
Adding EN signal on $verific$memory_reg_7$b12.vhd:184$397 ($adff) from module b12 (D = \data_in, Q = \memory[26]).
Adding EN signal on $verific$memory_reg_6$b12.vhd:184$396 ($adff) from module b12 (D = \data_in, Q = \memory[27]).
Adding EN signal on $verific$memory_reg_5$b12.vhd:184$395 ($adff) from module b12 (D = \data_in, Q = \memory[28]).
Adding EN signal on $verific$memory_reg_4$b12.vhd:184$394 ($adff) from module b12 (D = \data_in, Q = \memory[29]).
Adding EN signal on $verific$memory_reg_32$b12.vhd:184$422 ($adff) from module b12 (D = \data_in, Q = \memory[1]).
Adding EN signal on $verific$memory_reg_31$b12.vhd:184$421 ($adff) from module b12 (D = \data_in, Q = \memory[2]).
Adding EN signal on $verific$memory_reg_30$b12.vhd:184$420 ($adff) from module b12 (D = \data_in, Q = \memory[3]).
Adding EN signal on $verific$memory_reg_3$b12.vhd:184$393 ($adff) from module b12 (D = \data_in, Q = \memory[30]).
Adding EN signal on $verific$memory_reg_29$b12.vhd:184$419 ($adff) from module b12 (D = \data_in, Q = \memory[4]).
Adding EN signal on $verific$memory_reg_28$b12.vhd:184$418 ($adff) from module b12 (D = \data_in, Q = \memory[5]).
Adding EN signal on $verific$memory_reg_27$b12.vhd:184$417 ($adff) from module b12 (D = \data_in, Q = \memory[6]).
Adding EN signal on $verific$memory_reg_26$b12.vhd:184$416 ($adff) from module b12 (D = \data_in, Q = \memory[7]).
Adding EN signal on $verific$memory_reg_25$b12.vhd:184$415 ($adff) from module b12 (D = \data_in, Q = \memory[8]).
Adding EN signal on $verific$memory_reg_24$b12.vhd:184$414 ($adff) from module b12 (D = \data_in, Q = \memory[9]).
Adding EN signal on $verific$memory_reg_23$b12.vhd:184$413 ($adff) from module b12 (D = \data_in, Q = \memory[10]).
Adding EN signal on $verific$memory_reg_22$b12.vhd:184$412 ($adff) from module b12 (D = \data_in, Q = \memory[11]).
Adding EN signal on $verific$memory_reg_21$b12.vhd:184$411 ($adff) from module b12 (D = \data_in, Q = \memory[12]).
Adding EN signal on $verific$memory_reg_20$b12.vhd:184$410 ($adff) from module b12 (D = \data_in, Q = \memory[13]).
Adding EN signal on $verific$memory_reg_2$b12.vhd:184$392 ($adff) from module b12 (D = \data_in, Q = \memory[31]).
Adding EN signal on $verific$memory_reg_19$b12.vhd:184$409 ($adff) from module b12 (D = \data_in, Q = \memory[14]).
Adding EN signal on $verific$memory_reg_18$b12.vhd:184$408 ($adff) from module b12 (D = \data_in, Q = \memory[15]).
Adding EN signal on $verific$memory_reg_17$b12.vhd:184$407 ($adff) from module b12 (D = \data_in, Q = \memory[16]).
Adding EN signal on $verific$memory_reg_16$b12.vhd:184$406 ($adff) from module b12 (D = \data_in, Q = \memory[17]).
Adding EN signal on $verific$memory_reg_15$b12.vhd:184$405 ($adff) from module b12 (D = \data_in, Q = \memory[18]).
Adding EN signal on $verific$memory_reg_14$b12.vhd:184$404 ($adff) from module b12 (D = \data_in, Q = \memory[19]).
Adding EN signal on $verific$memory_reg_13$b12.vhd:184$403 ($adff) from module b12 (D = \data_in, Q = \memory[20]).
Adding EN signal on $verific$memory_reg_12$b12.vhd:184$402 ($adff) from module b12 (D = \data_in, Q = \memory[21]).
Adding EN signal on $verific$memory_reg_11$b12.vhd:184$401 ($adff) from module b12 (D = \data_in, Q = \memory[22]).
Adding EN signal on $verific$memory_reg_10$b12.vhd:184$400 ($adff) from module b12 (D = \data_in, Q = \memory[23]).
Adding EN signal on $verific$memory_reg$b12.vhd:184$423 ($adff) from module b12 (D = \data_in, Q = \memory[0]).

yosys> opt_clean

3.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..
Removed 65 unused cells and 65 unused wires.
<suppressed ~66 debug messages>

yosys> opt_expr

3.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.

3.13.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.13.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~43 debug messages>

yosys> opt_reduce

3.13.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

yosys> opt_merge

3.13.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.13.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.13.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..

yosys> opt_expr

3.13.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.

3.13.16. Finished OPT passes. (There is nothing left to do.)

yosys> wreduce -keepdc

3.14. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 3) from port A of cell b12.$verific$LessThan_4$b12.vhd:80$275 ($lt).
Removed top 2 bits (of 3) from port B of cell b12.$verific$add_8$b12.vhd:85$279 ($add).
Removed top 1 bits (of 4) from port Y of cell b12.$verific$add_8$b12.vhd:85$279 ($add).
Removed top 1 bits (of 3) from port A of cell b12.$verific$LessThan_13$b12.vhd:88$285 ($lt).
Removed top 2 bits (of 3) from port A of cell b12.$verific$LessThan_49$b12.vhd:125$301 ($lt).
Removed top 1 bits (of 2) from port B of cell b12.$verific$add_69$b12.vhd:159$316 ($add).
Removed top 31 bits (of 32) from port A of cell b12.$verific$Decoder_79$b12.vhd:182$326 ($shl).
Removed top 3 bits (of 4) from port A of cell b12.$verific$Decoder_195$b12.vhd:284$428 ($shl).
Removed top 1 bits (of 7) from port A of cell b12.$verific$sub_207$b12.vhd:298$435 ($sub).
Removed top 6 bits (of 7) from port B of cell b12.$verific$sub_207$b12.vhd:298$435 ($sub).
Removed top 1 bits (of 7) from port Y of cell b12.$verific$sub_207$b12.vhd:298$435 ($sub).
Removed top 4 bits (of 5) from port B of cell b12.$verific$add_215$b12.vhd:306$440 ($add).
Removed top 1 bits (of 6) from port Y of cell b12.$verific$add_215$b12.vhd:306$440 ($add).
Removed top 1 bits (of 2) from port A of cell b12.$verific$equal_239$b12.vhd:358$450 ($eq).
Removed top 1 bits (of 4) from mux cell b12.$verific$mux_273$b12.vhd:394$479 ($mux).
Removed top 1 bits (of 4) from mux cell b12.$verific$mux_274$b12.vhd:394$480 ($mux).
Removed top 1 bits (of 4) from mux cell b12.$verific$mux_275$b12.vhd:394$481 ($mux).
Removed top 1 bits (of 4) from mux cell b12.$verific$mux_276$b12.vhd:394$482 ($mux).
Removed top 3 bits (of 4) from port A of cell b12.$verific$Decoder_289$b12.vhd:400$490 ($shl).
Removed top 4 bits (of 5) from port B of cell b12.$verific$add_309$b12.vhd:423$496 ($add).
Removed top 1 bits (of 6) from port Y of cell b12.$verific$add_309$b12.vhd:423$496 ($add).
Removed top 1 bits (of 7) from port A of cell b12.$verific$sub_311$b12.vhd:424$499 ($sub).
Removed top 6 bits (of 7) from port B of cell b12.$verific$sub_311$b12.vhd:424$499 ($sub).
Removed top 1 bits (of 7) from port Y of cell b12.$verific$sub_311$b12.vhd:424$499 ($sub).
Removed top 2 bits (of 19) from mux cell b12.$verific$mux_503$b12.vhd:510$502 ($mux).
Removed top 1 bits (of 4) from wire b12.$verific$n1024$192.
Removed top 1 bits (of 4) from wire b12.$verific$n1073$194.
Removed top 1 bits (of 4) from wire b12.$verific$n1139$207.
Removed top 1 bits (of 4) from wire b12.$verific$n1144$208.
Removed top 1 bits (of 4) from wire b12.$verific$n1149$209.
Removed top 1 bits (of 4) from wire b12.$verific$n1154$210.
Removed top 1 bits (of 7) from wire b12.$verific$n1280$219.
Removed top 1 bits (of 5) from wire b12.$verific$n1336$223.
Removed top 3 bits (of 5) from wire b12.$verific$n1688$245.
Removed top 2 bits (of 5) from wire b12.$verific$n1733$250.
Removed top 4 bits (of 5) from wire b12.$verific$n1997$260.
Removed top 1 bits (of 7) from wire b12.$verific$n765$175.
Removed top 1 bits (of 4) from wire b12.$verific$n926$188.
Removed top 1 bits (of 4) from wire b12.$verific$n975$190.

yosys> peepopt

3.15. Executing PEEPOPT pass (run peephole optimizers).

yosys> pmuxtree

3.16. Executing PMUXTREE pass.

yosys> opt_clean

3.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..
Removed 0 unused cells and 19 unused wires.
<suppressed ~1 debug messages>

yosys> alumacc

3.18. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module b12:
  creating $macc model for $verific$add_215$b12.vhd:306$440 ($add).
  creating $macc model for $verific$add_309$b12.vhd:423$496 ($add).
  creating $macc model for $verific$add_69$b12.vhd:159$316 ($add).
  creating $macc model for $verific$add_8$b12.vhd:85$279 ($add).
  creating $macc model for $verific$sub_207$b12.vhd:298$435 ($sub).
  creating $macc model for $verific$sub_311$b12.vhd:424$499 ($sub).
  creating $alu model for $macc $verific$sub_311$b12.vhd:424$499.
  creating $alu model for $macc $verific$sub_207$b12.vhd:298$435.
  creating $alu model for $macc $verific$add_8$b12.vhd:85$279.
  creating $alu model for $macc $verific$add_69$b12.vhd:159$316.
  creating $alu model for $macc $verific$add_309$b12.vhd:423$496.
  creating $alu model for $macc $verific$add_215$b12.vhd:306$440.
  creating $alu model for $verific$LessThan_13$b12.vhd:88$285 ($lt): new $alu
  creating $alu model for $verific$LessThan_22$b12.vhd:98$289 ($lt): new $alu
  creating $alu model for $verific$LessThan_31$b12.vhd:107$293 ($lt): new $alu
  creating $alu model for $verific$LessThan_4$b12.vhd:80$275 ($lt): new $alu
  creating $alu model for $verific$LessThan_40$b12.vhd:116$297 ($lt): new $alu
  creating $alu model for $verific$LessThan_49$b12.vhd:125$301 ($lt): new $alu
  creating $alu cell for $verific$LessThan_40$b12.vhd:116$297: $auto$alumacc.cc:485:replace_alu$678
  creating $alu cell for $verific$LessThan_4$b12.vhd:80$275: $auto$alumacc.cc:485:replace_alu$683
  creating $alu cell for $verific$LessThan_31$b12.vhd:107$293: $auto$alumacc.cc:485:replace_alu$688
  creating $alu cell for $verific$LessThan_22$b12.vhd:98$289: $auto$alumacc.cc:485:replace_alu$693
  creating $alu cell for $verific$LessThan_13$b12.vhd:88$285: $auto$alumacc.cc:485:replace_alu$698
  creating $alu cell for $verific$add_215$b12.vhd:306$440: $auto$alumacc.cc:485:replace_alu$703
  creating $alu cell for $verific$add_309$b12.vhd:423$496: $auto$alumacc.cc:485:replace_alu$706
  creating $alu cell for $verific$add_69$b12.vhd:159$316: $auto$alumacc.cc:485:replace_alu$709
  creating $alu cell for $verific$LessThan_49$b12.vhd:125$301: $auto$alumacc.cc:485:replace_alu$712
  creating $alu cell for $verific$add_8$b12.vhd:85$279: $auto$alumacc.cc:485:replace_alu$717
  creating $alu cell for $verific$sub_207$b12.vhd:298$435: $auto$alumacc.cc:485:replace_alu$720
  creating $alu cell for $verific$sub_311$b12.vhd:424$499: $auto$alumacc.cc:485:replace_alu$723
  created 12 $alu and 0 $macc cells.

yosys> opt

3.19. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.
<suppressed ~18 debug messages>

yosys> opt_merge -nomux

3.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~43 debug messages>

yosys> opt_reduce

3.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

yosys> opt_merge

3.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_dff

3.19.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.19.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..
Removed 6 unused cells and 12 unused wires.
<suppressed ~7 debug messages>

yosys> opt_expr

3.19.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.

3.19.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.19.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~43 debug messages>

yosys> opt_reduce

3.19.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

yosys> opt_merge

3.19.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_dff

3.19.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.19.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..

yosys> opt_expr

3.19.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.

3.19.16. Finished OPT passes. (There is nothing left to do.)

yosys> memory -nomap

3.20. Executing MEMORY pass.

yosys> opt_mem

3.20.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

yosys> opt_mem_priority

3.20.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

yosys> opt_mem_feedback

3.20.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

yosys> memory_dff

3.20.4. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

yosys> opt_clean

3.20.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..

yosys> memory_share

3.20.6. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

yosys> opt_mem_widen

3.20.7. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

yosys> opt_clean

3.20.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..

yosys> memory_collect

3.20.9. Executing MEMORY_COLLECT pass (generating $mem cells).

yosys> opt_clean

3.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..

yosys> techmap

3.22. Executing TECHMAP pass (map to technology primitives).

3.22.1. Executing Verilog-2005 frontend: /home/users/meri/Documents/workspace/clean/for_push/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/meri/Documents/workspace/clean/for_push/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.22.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $reduce_and.
Using template $paramod$78e969f2586efcf3a5b0b0440bcca0db83d5cca2\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $not.
Using template $paramod$a04dd9d4d8b430140c4ff94b50470fb380fda2a0\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $mux.
Using template $paramod$672a140277c71df8314410f22acc08d55222c3c7\_90_alu for cells of type $alu.
Using template $paramod$79fc7abbb3333dbd5736999d565fd903198fb1eb\_90_alu for cells of type $alu.
Using template $paramod$3ef7d3dd227da7627a99c5e5a6a4deb817573e39\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $bmux.
Using extmapper simplemap for cells of type $adffe.
Using extmapper simplemap for cells of type $adff.
Using template $paramod$constmap:dbcddb7b4524c1c5fa25e15435f3b9049e3d7d7a$paramod$3bf4391c2edcd7fdc564361d03ba2cf3a33c67d4\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using template $paramod$constmap:66d421c313e4e958be776b99540ac2de3b59fdbc$paramod$77562a466236eb4a6d905351a0995599b75075cb\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $eq.
Using template $paramod$175e67c02b86e96b1288b9dc100122520d7240d8\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $and.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000011 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000110 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000101 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000010 for cells of type $lcu.
Using extmapper simplemap for cells of type $or.
No more expansions possible.
<suppressed ~1841 debug messages>

yosys> opt

3.23. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.23.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.
<suppressed ~1084 debug messages>

yosys> opt_merge -nomux

3.23.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
<suppressed ~303 debug messages>
Removed a total of 101 cells.

yosys> opt_muxtree

3.23.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.23.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

yosys> opt_merge

3.23.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_dff

3.23.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $auto$ff.cc:262:slice$955 ($_DFF_PP0_) from module b12 (D = $verific$n133$38, Q = \speaker).

yosys> opt_clean

3.23.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..
Removed 26 unused cells and 491 unused wires.
<suppressed ~27 debug messages>

yosys> opt_expr

3.23.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.
<suppressed ~34 debug messages>

3.23.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.23.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.23.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

yosys> opt_merge

3.23.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
<suppressed ~57 debug messages>
Removed a total of 19 cells.

yosys> opt_dff

3.23.13. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $auto$ff.cc:262:slice$963 ($_DFFE_PP0P_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$913, Q = \s).
Adding EN signal on $auto$ff.cc:262:slice$3406 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$3007 [1], Q = \data_in [1]).
Adding EN signal on $auto$ff.cc:262:slice$3405 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$3007 [0], Q = \data_in [0]).
Adding EN signal on $auto$ff.cc:262:slice$3404 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$2937 [4], Q = \address [4]).
Adding EN signal on $auto$ff.cc:262:slice$3403 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$2937 [3], Q = \address [3]).
Adding EN signal on $auto$ff.cc:262:slice$3402 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$2937 [2], Q = \address [2]).
Adding EN signal on $auto$ff.cc:262:slice$3401 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$2937 [1], Q = \address [1]).
Adding EN signal on $auto$ff.cc:262:slice$3400 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$2937 [0], Q = \address [0]).
Adding EN signal on $auto$ff.cc:262:slice$3399 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$3295 [2], Q = \sound [2]).
Adding EN signal on $auto$ff.cc:262:slice$3398 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$3295 [1], Q = \sound [1]).
Adding EN signal on $auto$ff.cc:262:slice$3397 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$3295 [0], Q = \sound [0]).
Adding EN signal on $auto$ff.cc:262:slice$3396 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$3194 [5], Q = \count [5]).
Adding EN signal on $auto$ff.cc:262:slice$3395 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$3194 [4], Q = \count [4]).
Adding EN signal on $auto$ff.cc:262:slice$3394 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$3194 [3], Q = \count [3]).
Adding EN signal on $auto$ff.cc:262:slice$3393 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$3194 [2], Q = \count [2]).
Adding EN signal on $auto$ff.cc:262:slice$3392 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$3194 [1], Q = \count [1]).
Adding EN signal on $auto$ff.cc:262:slice$3391 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$3194 [0], Q = \count [0]).
Adding EN signal on $auto$ff.cc:262:slice$3390 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$2616 [5], Q = \timebase [5]).
Adding EN signal on $auto$ff.cc:262:slice$3389 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$2616 [4], Q = \timebase [4]).
Adding EN signal on $auto$ff.cc:262:slice$3388 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$2616 [3], Q = \timebase [3]).
Adding EN signal on $auto$ff.cc:262:slice$3387 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$2616 [2], Q = \timebase [2]).
Adding EN signal on $auto$ff.cc:262:slice$3386 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$2616 [1], Q = \timebase [1]).
Adding EN signal on $auto$ff.cc:262:slice$3385 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$2616 [0], Q = \timebase [0]).
Adding EN signal on $auto$ff.cc:262:slice$3384 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$3363 [1], Q = \ind [1]).
Adding EN signal on $auto$ff.cc:262:slice$3383 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$3363 [0], Q = \ind [0]).
Adding EN signal on $auto$ff.cc:262:slice$3382 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$2426 [4], Q = \max [4]).
Adding EN signal on $auto$ff.cc:262:slice$3381 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$2426 [3], Q = \max [3]).
Adding EN signal on $auto$ff.cc:262:slice$3380 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$2426 [2], Q = \max [2]).
Adding EN signal on $auto$ff.cc:262:slice$3379 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$2426 [1], Q = \max [1]).
Adding EN signal on $auto$ff.cc:262:slice$3378 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$2426 [0], Q = \max [0]).
Adding EN signal on $auto$ff.cc:262:slice$3377 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$2777 [4], Q = \scan [4]).
Adding EN signal on $auto$ff.cc:262:slice$3376 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$2777 [3], Q = \scan [3]).
Adding EN signal on $auto$ff.cc:262:slice$3375 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$2777 [2], Q = \scan [2]).
Adding EN signal on $auto$ff.cc:262:slice$3374 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$2777 [1], Q = \scan [1]).
Adding EN signal on $auto$ff.cc:262:slice$3373 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$2777 [0], Q = \scan [0]).
Adding EN signal on $auto$ff.cc:262:slice$3372 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$2270, Q = \wr).
Adding EN signal on $auto$ff.cc:262:slice$3371 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$2234, Q = \play).
Adding EN signal on $auto$ff.cc:262:slice$3370 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$2195 [3], Q = \nl [3]).
Adding EN signal on $auto$ff.cc:262:slice$3369 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$2195 [2], Q = \nl [2]).
Adding EN signal on $auto$ff.cc:262:slice$3368 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$2195 [1], Q = \nl [1]).
Adding EN signal on $auto$ff.cc:262:slice$3367 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$2195 [0], Q = \nl [0]).
Adding EN signal on $auto$ff.cc:262:slice$3366 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$2069, Q = \nloss).

yosys> opt_clean

3.23.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..
Removed 0 unused cells and 515 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.23.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.
<suppressed ~2289 debug messages>

3.23.16. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.23.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.23.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

yosys> opt_merge

3.23.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
<suppressed ~9105 debug messages>
Removed a total of 3035 cells.

yosys> opt_dff

3.23.20. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.23.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..
Removed 0 unused cells and 2591 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.23.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.

3.23.23. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.23.24. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.23.25. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

yosys> opt_merge

3.23.26. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_dff

3.23.27. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.23.28. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..

yosys> opt_expr

3.23.29. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.

3.23.30. Finished OPT passes. (There is nothing left to do.)

yosys> opt -fast -full

3.24. Executing OPT pass (performing simple optimizations).

yosys> opt_expr -full

3.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.
<suppressed ~497 debug messages>

yosys> opt_merge

3.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
<suppressed ~81 debug messages>
Removed a total of 27 cells.

yosys> opt_dff

3.24.3. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..
Removed 0 unused cells and 94 unused wires.
<suppressed ~1 debug messages>

3.24.5. Finished fast OPT passes.

yosys> memory_map

3.25. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

yosys> opt -full

3.26. Executing OPT pass (performing simple optimizations).

yosys> opt_expr -full

3.26.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.
<suppressed ~37 debug messages>

yosys> opt_merge -nomux

3.26.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
<suppressed ~18 debug messages>
Removed a total of 6 cells.

yosys> opt_muxtree

3.26.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce -full

3.26.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

yosys> opt_merge

3.26.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_share

3.26.6. Executing OPT_SHARE pass.
    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$1976 in front of them:
        $auto$simplemap.cc:312:simplemap_bmux$1915
        $auto$simplemap.cc:312:simplemap_bmux$1910

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$929 in front of them:
        $auto$simplemap.cc:278:simplemap_mux$887
        $auto$simplemap.cc:278:simplemap_mux$882

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$930 in front of them:
        $auto$simplemap.cc:278:simplemap_mux$888
        $auto$simplemap.cc:278:simplemap_mux$883

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$931 in front of them:
        $auto$simplemap.cc:278:simplemap_mux$889
        $auto$simplemap.cc:278:simplemap_mux$884

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$932 in front of them:
        $auto$simplemap.cc:278:simplemap_mux$902
        $auto$simplemap.cc:278:simplemap_mux$892

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$933 in front of them:
        $auto$simplemap.cc:278:simplemap_mux$903
        $auto$simplemap.cc:278:simplemap_mux$893

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$934 in front of them:
        $auto$simplemap.cc:278:simplemap_mux$904
        $auto$simplemap.cc:278:simplemap_mux$894


yosys> opt_dff

3.26.7. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.26.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..
Removed 0 unused cells and 6 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr -full

3.26.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.
<suppressed ~7 debug messages>

3.26.10. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.26.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~7 debug messages>

yosys> opt_reduce -full

3.26.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

yosys> opt_merge

3.26.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
<suppressed ~12 debug messages>
Removed a total of 4 cells.

yosys> opt_share

3.26.14. Executing OPT_SHARE pass.

yosys> opt_dff

3.26.15. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.26.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..
Removed 0 unused cells and 4 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr -full

3.26.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.

3.26.18. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.26.19. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

yosys> opt_reduce -full

3.26.20. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

yosys> opt_merge

3.26.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_share

3.26.22. Executing OPT_SHARE pass.

yosys> opt_dff

3.26.23. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.26.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..

yosys> opt_expr -full

3.26.25. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.

3.26.26. Finished OPT passes. (There is nothing left to do.)

yosys> abc -script abc_tmp.scr

3.27. Executing ABC pass (technology mapping using ABC).

3.27.1. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Extracted 958 gates and 1083 wires to a netlist network with 123 inputs and 107 outputs.

3.27.1.1. Executing ABC.
Running ABC command: /home/users/meri/Documents/workspace/clean/for_push/yosys_verific_rs/logic_synthesis-rs/abc-rs/abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + source /home/users/meri/Documents/workspace/clean/for_push/yosys_verific_rs/result_23-03-2022T14-57-36/All_lut_synth_rs_ade.json/b12/abc_tmp.scr 
ABC:   #Luts =   291  Max Lvl =   8  Avg Lvl =   2.51  [   0.62 sec. at Pass 0]
ABC:   #Luts =   237  Max Lvl =   6  Avg Lvl =   2.54  [   5.42 sec. at Pass 1]
ABC:   #Luts =   233  Max Lvl =   7  Avg Lvl =   2.54  [   1.45 sec. at Pass 2]
ABC:   #Luts =   227  Max Lvl =   7  Avg Lvl =   2.78  [   1.58 sec. at Pass 3]
ABC:   #Luts =   227  Max Lvl =   7  Avg Lvl =   2.78  [   1.51 sec. at Pass 4]
ABC:   #Luts =   227  Max Lvl =   7  Avg Lvl =   2.78  [   1.47 sec. at Pass 5]
ABC: + write_blif <abc-temp-dir>/output.blif 

3.27.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:      229
ABC RESULTS:        internal signals:      853
ABC RESULTS:           input signals:      123
ABC RESULTS:          output signals:      107
Removing temp directory.

yosys> opt

3.28. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.28.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.

yosys> opt_merge -nomux

3.28.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.28.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

yosys> opt_reduce

3.28.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

yosys> opt_merge

3.28.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_dff

3.28.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.28.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..
Removed 0 unused cells and 500 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.28.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.

3.28.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.28.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

yosys> opt_reduce

3.28.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

yosys> opt_merge

3.28.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_dff

3.28.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.28.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..

yosys> opt_expr

3.28.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.

3.28.16. Finished OPT passes. (There is nothing left to do.)

yosys> stat

3.29. Printing statistics.

=== b12 ===

   Number of wires:                288
   Number of wire bits:            375
   Number of public wires:          56
   Number of public wire bits:     133
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                351
     $_DFFE_PP0P_                  107
     $_DFF_PP0_                     12
     $lut                          229
     $mux                            3


yosys> shregmap -minlen 8 -maxlen 20

3.30. Executing SHREGMAP pass (map shift registers).
Converted 0 dff cells into 0 shift registers.

yosys> dfflegalize -cell $_DFF_?_ 0 -cell $_DFF_???_ 0 -cell $_DFFE_????_ 0 -cell $_DFFSR_???_ 0 -cell $_DFFSRE_????_ 0 -cell $_DLATCHSR_PPP_ 0

3.31. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

yosys> stat

3.32. Printing statistics.

=== b12 ===

   Number of wires:                288
   Number of wire bits:            375
   Number of public wires:          56
   Number of public wire bits:     133
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                351
     $_DFFE_PP0P_                  107
     $_DFF_PP0_                     12
     $lut                          229
     $mux                            3


yosys> techmap -map +/techmap.v -map +/rapidsilicon/genesis/ffs_map.v

3.33. Executing TECHMAP pass (map to technology primitives).

3.33.1. Executing Verilog-2005 frontend: /home/users/meri/Documents/workspace/clean/for_push/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/meri/Documents/workspace/clean/for_push/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.33.2. Executing Verilog-2005 frontend: /home/users/meri/Documents/workspace/clean/for_push/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/ffs_map.v
Parsing Verilog input from `/home/users/meri/Documents/workspace/clean/for_push/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/ffs_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP0N_'.
Generating RTLIL representation for module `\$_DFFE_PN0P_'.
Generating RTLIL representation for module `\$_DFFE_PN0N_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP1N_'.
Generating RTLIL representation for module `\$_DFFE_PN1P_'.
Generating RTLIL representation for module `\$_DFFE_PN1N_'.
Generating RTLIL representation for module `\$_DFFSR_PPP_'.
Generating RTLIL representation for module `\$_DFFSR_PNP_'.
Generating RTLIL representation for module `\$_DFFSR_PNN_'.
Generating RTLIL representation for module `\$_DFFSR_PPN_'.
Generating RTLIL representation for module `\$_DFFSR_NPP_'.
Generating RTLIL representation for module `\$_DFFSR_NNP_'.
Generating RTLIL representation for module `\$_DFFSR_NNN_'.
Generating RTLIL representation for module `\$_DFFSR_NPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PNPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPNP_'.
Generating RTLIL representation for module `\$_DFFSRE_PNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PNPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PPNN_'.
Generating RTLIL representation for module `\$_DFFSRE_PNNN_'.
Generating RTLIL representation for module `\$_DLATCHSR_PPP_'.
Generating RTLIL representation for module `\$_DLATCHSR_NPP_'.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP0N_'.
Generating RTLIL representation for module `\$_DFFE_NN0P_'.
Generating RTLIL representation for module `\$_DFFE_NN0N_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_NP1N_'.
Generating RTLIL representation for module `\$_DFFE_NN1P_'.
Generating RTLIL representation for module `\$_DFFE_NN1N_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNPP_'.
Generating RTLIL representation for module `\$_DFFSRE_NPNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPN_'.
Generating RTLIL representation for module `\$_DFFSRE_NNPN_'.
Generating RTLIL representation for module `\$_DFFSRE_NPNN_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNN_'.
Generating RTLIL representation for module `\$__SHREG_DFF_P_'.
Successfully finished Verilog frontend.

3.33.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $lut.
Using template \$_DFF_PP0_ for cells of type $_DFF_PP0_.
Using template \$_DFFE_PP0P_ for cells of type $_DFFE_PP0P_.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $logic_not.
No more expansions possible.
<suppressed ~598 debug messages>

yosys> opt_expr -mux_undef

3.34. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.
<suppressed ~7546 debug messages>

yosys> simplemap

3.35. Executing SIMPLEMAP pass (map simple cells to gate primitives).

yosys> opt_expr

3.36. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.

yosys> opt_merge

3.37. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
<suppressed ~1890 debug messages>
Removed a total of 630 cells.

yosys> opt_dff -nodffe -nosdff

3.38. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.39. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..
Removed 0 unused cells and 1224 unused wires.
<suppressed ~1 debug messages>

yosys> opt -nodffe -nosdff

3.40. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.40.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.
<suppressed ~100 debug messages>

yosys> opt_merge -nomux

3.40.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
<suppressed ~12 debug messages>
Removed a total of 4 cells.

yosys> opt_muxtree

3.40.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.40.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

yosys> opt_merge

3.40.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.40.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.40.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..
Removed 0 unused cells and 15 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.40.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.

3.40.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.40.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.40.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

yosys> opt_merge

3.40.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.40.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.40.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..

yosys> opt_expr

3.40.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.

3.40.16. Finished OPT passes. (There is nothing left to do.)

yosys> abc -script abc_tmp.scr

3.41. Executing ABC pass (technology mapping using ABC).

3.41.1. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Extracted 1073 gates and 1196 wires to a netlist network with 121 inputs and 101 outputs.

3.41.1.1. Executing ABC.
Running ABC command: /home/users/meri/Documents/workspace/clean/for_push/yosys_verific_rs/logic_synthesis-rs/abc-rs/abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + source /home/users/meri/Documents/workspace/clean/for_push/yosys_verific_rs/result_23-03-2022T14-57-36/All_lut_synth_rs_ade.json/b12/abc_tmp.scr 
ABC:   #Luts =   225  Max Lvl =   7  Avg Lvl =   2.83  [   0.43 sec. at Pass 0]
ABC:   #Luts =   225  Max Lvl =   7  Avg Lvl =   2.83  [   4.23 sec. at Pass 1]
ABC:   #Luts =   220  Max Lvl =   7  Avg Lvl =   2.77  [   0.92 sec. at Pass 2]
ABC:   #Luts =   220  Max Lvl =   7  Avg Lvl =   2.77  [   1.35 sec. at Pass 3]
ABC:   #Luts =   220  Max Lvl =   7  Avg Lvl =   2.77  [   1.02 sec. at Pass 4]
ABC:   #Luts =   217  Max Lvl =   7  Avg Lvl =   2.82  [   1.41 sec. at Pass 5]
ABC:   #Luts =   216  Max Lvl =   7  Avg Lvl =   2.73  [   1.34 sec. at Pass 6]
ABC:   #Luts =   215  Max Lvl =   7  Avg Lvl =   2.76  [   1.19 sec. at Pass 7]
ABC:   #Luts =   214  Max Lvl =   7  Avg Lvl =   2.78  [   1.18 sec. at Pass 8]
ABC:   #Luts =   214  Max Lvl =   6  Avg Lvl =   2.50  [   1.57 sec. at Pass 9]
ABC:   #Luts =   214  Max Lvl =   6  Avg Lvl =   2.50  [   1.03 sec. at Pass 10]
ABC:   #Luts =   211  Max Lvl =   6  Avg Lvl =   2.50  [   1.74 sec. at Pass 11]
ABC:   #Luts =   211  Max Lvl =   6  Avg Lvl =   2.50  [   1.15 sec. at Pass 12]
ABC:   #Luts =   211  Max Lvl =   6  Avg Lvl =   2.50  [   2.85 sec. at Pass 13]
ABC: + write_blif <abc-temp-dir>/output.blif 

3.41.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:      214
ABC RESULTS:        internal signals:      974
ABC RESULTS:           input signals:      121
ABC RESULTS:          output signals:      101
Removing temp directory.

yosys> opt

3.42. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.42.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.

yosys> opt_merge -nomux

3.42.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.42.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.42.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

yosys> opt_merge

3.42.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_dff

3.42.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.42.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..
Removed 0 unused cells and 927 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.42.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.

3.42.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.42.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.42.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

yosys> opt_merge

3.42.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_dff

3.42.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.42.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..

yosys> opt_expr

3.42.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.

3.42.16. Finished OPT passes. (There is nothing left to do.)

yosys> hierarchy -check

3.43. Executing HIERARCHY pass (managing design hierarchy).

3.43.1. Analyzing design hierarchy..
Top module:  \b12

3.43.2. Analyzing design hierarchy..
Top module:  \b12
Removed 0 unused modules.

yosys> stat

3.44. Printing statistics.

=== b12 ===

   Number of wires:                270
   Number of wire bits:            349
   Number of public wires:          56
   Number of public wire bits:     133
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                333
     $lut                          214
     dffsre                        119


yosys> opt_clean -purge

3.45. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..
Removed 0 unused cells and 2 unused wires.
<suppressed ~2 debug messages>

yosys> write_verilog -noattr -nohex b12.verilog

3.46. Executing Verilog backend.

yosys> bmuxmap

3.46.1. Executing BMUXMAP pass.

yosys> demuxmap

3.46.2. Executing DEMUXMAP pass.

yosys> clean_zerowidth
Dumping module `\b12'.

End of script. Logfile hash: b0e8d6322f, CPU: user 7.19s system 0.05s, MEM: 33.95 MB peak
Yosys 0.14+36 (git sha1 4cd3e3b51, gcc 7.1.0 -fPIC -Os)
Time spent: 95% 2x abc (151 sec), 1% 44x opt_expr (2 sec), ...
real 57.63
user 139.81
sys 18.76
