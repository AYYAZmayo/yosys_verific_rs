
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.14+36 (git sha1 4cd3e3b51, gcc 7.1.0 -fPIC -Os)


-- Executing script file `yosys.ys' --
echo on

yosys> plugin -i synth-rs

yosys> read -verific

yosys> read -incdir .

yosys> verific -vlog-incdir .

1. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Jan22_SW_Release, released at Sat Jan 29 02:42:49 2022.

yosys> verilog_defaults -add -I.

yosys> read -vlog2k adder_max.v

yosys> verific -vlog2k adder_max.v

2. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Jan22_SW_Release, released at Sat Jan 29 02:42:49 2022.
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'adder_max.v'

yosys> synth_rs -top adder_max -tech genesis -goal area -no_dsp -no_bram -verilog adder_max.verilog

3. Executing synth_rs pass.

yosys> read_verilog -lib -specify -nomem2reg +/rapidsilicon/common/cells_sim.v +/rapidsilicon/genesis/cells_sim.v

3.1. Executing Verilog-2005 frontend: /home/users/meri/Documents/workspace/clean/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v
Parsing Verilog input from `/home/users/meri/Documents/workspace/clean/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\inv'.
Generating RTLIL representation for module `\buff'.
Generating RTLIL representation for module `\logic_0'.
Generating RTLIL representation for module `\logic_1'.
Generating RTLIL representation for module `\gclkbuff'.
Successfully finished Verilog frontend.

3.2. Executing Verilog-2005 frontend: /home/users/meri/Documents/workspace/clean/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/cells_sim.v
Parsing Verilog input from `/home/users/meri/Documents/workspace/clean/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\dff'.
Generating RTLIL representation for module `\dffn'.
Generating RTLIL representation for module `\dffsre'.
Generating RTLIL representation for module `\dffnsre'.
Generating RTLIL representation for module `\latchsre'.
Generating RTLIL representation for module `\latchnsre'.
Generating RTLIL representation for module `\io_scff'.
Generating RTLIL representation for module `\scff'.
Generating RTLIL representation for module `\sh_dff'.
Successfully finished Verilog frontend.

yosys> hierarchy -check -top adder_max

3.3. Executing HIERARCHY pass (managing design hierarchy).
VERIFIC-INFO [VERI-1018] adder_max.v:3: compiling module 'adder_max'
Importing module adder_max.

3.3.1. Analyzing design hierarchy..
Top module:  \adder_max

3.3.2. Analyzing design hierarchy..
Top module:  \adder_max
Removed 0 unused modules.

yosys> proc

3.4. Executing PROC pass (convert processes to netlists).

yosys> proc_clean

3.4.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> proc_rmdead

3.4.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

yosys> proc_prune

3.4.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

yosys> proc_init

3.4.4. Executing PROC_INIT pass (extract init attributes).

yosys> proc_arst

3.4.5. Executing PROC_ARST pass (detect async resets in processes).

yosys> proc_mux

3.4.6. Executing PROC_MUX pass (convert decision trees to multiplexers).

yosys> proc_dlatch

3.4.7. Executing PROC_DLATCH pass (convert process syncs to latches).

yosys> proc_dff

3.4.8. Executing PROC_DFF pass (convert process syncs to FFs).

yosys> proc_memwr

3.4.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

yosys> proc_clean

3.4.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> opt_expr -keepdc

3.4.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder_max.

yosys> flatten

3.5. Executing FLATTEN pass (flatten design).

yosys> tribuf -logic

3.6. Executing TRIBUF pass.

yosys> deminout

3.7. Executing DEMINOUT pass (demote inout ports to input or output).

yosys> opt_expr

3.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder_max.

yosys> opt_clean

3.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder_max..
Removed 0 unused cells and 2 unused wires.
<suppressed ~2 debug messages>

yosys> check

3.10. Executing CHECK pass (checking for obvious problems).
Checking module adder_max...
Found and reported 0 problems.

yosys> opt -nodffe -nosdff

3.11. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder_max.

yosys> opt_merge -nomux

3.11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder_max'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.11.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \adder_max..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.11.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \adder_max.
Performed a total of 0 changes.

yosys> opt_merge

3.11.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder_max'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.11.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.11.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder_max..

yosys> opt_expr

3.11.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder_max.

3.11.9. Finished OPT passes. (There is nothing left to do.)

yosys> fsm

3.12. Executing FSM pass (extract and optimize FSM).

yosys> fsm_detect

3.12.1. Executing FSM_DETECT pass (finding FSMs in design).

yosys> fsm_extract

3.12.2. Executing FSM_EXTRACT pass (extracting FSM from design).

yosys> fsm_opt

3.12.3. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> opt_clean

3.12.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder_max..

yosys> fsm_opt

3.12.5. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> fsm_recode

3.12.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

yosys> fsm_info

3.12.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

yosys> fsm_map

3.12.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

yosys> opt -sat

3.13. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder_max.

yosys> opt_merge -nomux

3.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder_max'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \adder_max..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \adder_max.
Performed a total of 0 changes.

yosys> opt_merge

3.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder_max'.
Removed a total of 0 cells.

yosys> opt_dff -sat

3.13.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder_max..

yosys> opt_expr

3.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder_max.

3.13.9. Finished OPT passes. (There is nothing left to do.)

yosys> wreduce -keepdc

3.14. Executing WREDUCE pass (reducing word size of cells).
Removed top 190 bits (of 191) from port B of cell adder_max.$verific$add_4$adder_max.v:10$7 ($add).

yosys> peepopt

3.15. Executing PEEPOPT pass (run peephole optimizers).

yosys> pmuxtree

3.16. Executing PMUXTREE pass.

yosys> opt_clean

3.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder_max..

yosys> techmap

3.18. Executing TECHMAP pass (map to technology primitives).

3.18.1. Executing Verilog-2005 frontend: /home/users/meri/Documents/workspace/clean/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/meri/Documents/workspace/clean/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.18.2. Continuing TECHMAP pass.
Running "alumacc" on wrapper $extern:wrap:$add:A_SIGNED=0:A_WIDTH=190:B_SIGNED=0:B_WIDTH=190:Y_WIDTH=191:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$add:A_SIGNED=0:A_WIDTH=190:B_SIGNED=0:B_WIDTH=190:Y_WIDTH=191:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$add:A_SIGNED=0:A_WIDTH=190:B_SIGNED=0:B_WIDTH=190:Y_WIDTH=191:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$add:A_SIGNED=0:A_WIDTH=191:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=191:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$add:A_SIGNED=0:A_WIDTH=191:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=191:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$add:A_SIGNED=0:A_WIDTH=191:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=191:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $paramod$8c9c842abb68e68546a5b075140e03bc80554d9b\_90_alu for cells of type $alu.
Using template $paramod$a0f8221959570d61118db5c0db8b8e3d5dff3689\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $and.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000010111111 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $or.
No more expansions possible.
<suppressed ~2335 debug messages>

yosys> alumacc

3.19. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module adder_max:
  created 0 $alu and 0 $macc cells.

yosys> opt

3.20. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder_max.
<suppressed ~1320 debug messages>

yosys> opt_merge -nomux

3.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder_max'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \adder_max..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \adder_max.
Performed a total of 0 changes.

yosys> opt_merge

3.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder_max'.
Removed a total of 0 cells.

yosys> opt_dff

3.20.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.20.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder_max..
Removed 382 unused cells and 604 unused wires.
<suppressed ~383 debug messages>

yosys> opt_expr

3.20.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder_max.

3.20.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.20.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \adder_max..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.20.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \adder_max.
Performed a total of 0 changes.

yosys> opt_merge

3.20.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder_max'.
Removed a total of 0 cells.

yosys> opt_dff

3.20.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.20.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder_max..

yosys> opt_expr

3.20.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder_max.

3.20.16. Finished OPT passes. (There is nothing left to do.)

yosys> memory -nomap

3.21. Executing MEMORY pass.

yosys> opt_mem

3.21.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

yosys> opt_mem_priority

3.21.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

yosys> opt_mem_feedback

3.21.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

yosys> memory_dff

3.21.4. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

yosys> opt_clean

3.21.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder_max..

yosys> memory_share

3.21.6. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

yosys> opt_mem_widen

3.21.7. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

yosys> opt_clean

3.21.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder_max..

yosys> memory_collect

3.21.9. Executing MEMORY_COLLECT pass (generating $mem cells).

yosys> opt_clean

3.22. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder_max..

yosys> stat

3.23. Printing statistics.

=== adder_max ===

   Number of wires:                907
   Number of wire bits:           2424
   Number of public wires:           5
   Number of public wire bits:     572
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               2036
     $_AND_                       1100
     $_OR_                         366
     $_XOR_                        570


yosys> shregmap -minlen 8 -maxlen 20

3.24. Executing SHREGMAP pass (map shift registers).
Converted 0 dff cells into 0 shift registers.

yosys> dfflegalize -cell $_DFF_?_ 0 -cell $_DFF_???_ 0 -cell $_DFFE_????_ 0 -cell $_DFFSR_???_ 0 -cell $_DFFSRE_????_ 0 -cell $_DLATCHSR_PPP_ 0

3.25. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

yosys> stat

3.26. Printing statistics.

=== adder_max ===

   Number of wires:                907
   Number of wire bits:           2424
   Number of public wires:           5
   Number of public wire bits:     572
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               2036
     $_AND_                       1100
     $_OR_                         366
     $_XOR_                        570


yosys> techmap -map +/techmap.v -map +/rapidsilicon/genesis/ffs_map.v

3.27. Executing TECHMAP pass (map to technology primitives).

3.27.1. Executing Verilog-2005 frontend: /home/users/meri/Documents/workspace/clean/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/meri/Documents/workspace/clean/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.27.2. Executing Verilog-2005 frontend: /home/users/meri/Documents/workspace/clean/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/ffs_map.v
Parsing Verilog input from `/home/users/meri/Documents/workspace/clean/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/ffs_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP0N_'.
Generating RTLIL representation for module `\$_DFFE_PN0P_'.
Generating RTLIL representation for module `\$_DFFE_PN0N_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP1N_'.
Generating RTLIL representation for module `\$_DFFE_PN1P_'.
Generating RTLIL representation for module `\$_DFFE_PN1N_'.
Generating RTLIL representation for module `\$_DFFSR_PPP_'.
Generating RTLIL representation for module `\$_DFFSR_PNP_'.
Generating RTLIL representation for module `\$_DFFSR_PNN_'.
Generating RTLIL representation for module `\$_DFFSR_PPN_'.
Generating RTLIL representation for module `\$_DFFSR_NPP_'.
Generating RTLIL representation for module `\$_DFFSR_NNP_'.
Generating RTLIL representation for module `\$_DFFSR_NNN_'.
Generating RTLIL representation for module `\$_DFFSR_NPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PNPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPNP_'.
Generating RTLIL representation for module `\$_DFFSRE_PNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PNPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PPNN_'.
Generating RTLIL representation for module `\$_DFFSRE_PNNN_'.
Generating RTLIL representation for module `\$_DLATCHSR_PPP_'.
Generating RTLIL representation for module `\$_DLATCHSR_NPP_'.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP0N_'.
Generating RTLIL representation for module `\$_DFFE_NN0P_'.
Generating RTLIL representation for module `\$_DFFE_NN0N_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_NP1N_'.
Generating RTLIL representation for module `\$_DFFE_NN1P_'.
Generating RTLIL representation for module `\$_DFFE_NN1N_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNPP_'.
Generating RTLIL representation for module `\$_DFFSRE_NPNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPN_'.
Generating RTLIL representation for module `\$_DFFSRE_NNPN_'.
Generating RTLIL representation for module `\$_DFFSRE_NPNN_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNN_'.
Generating RTLIL representation for module `\$__SHREG_DFF_P_'.
Successfully finished Verilog frontend.

3.27.3. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~128 debug messages>

yosys> opt_expr -mux_undef

3.28. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder_max.

yosys> simplemap

3.29. Executing SIMPLEMAP pass (map simple cells to gate primitives).

yosys> opt_expr

3.30. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder_max.

yosys> opt_merge

3.31. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder_max'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.32. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.33. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder_max..

yosys> opt -nodffe -nosdff

3.34. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.34.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder_max.

yosys> opt_merge -nomux

3.34.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder_max'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.34.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \adder_max..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.34.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \adder_max.
Performed a total of 0 changes.

yosys> opt_merge

3.34.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder_max'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

3.34.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.34.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder_max..

yosys> opt_expr

3.34.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder_max.

3.34.9. Finished OPT passes. (There is nothing left to do.)

yosys> opt -fast -full

3.35. Executing OPT pass (performing simple optimizations).

yosys> opt_expr -full

3.35.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder_max.

yosys> opt_merge

3.35.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder_max'.
Removed a total of 0 cells.

yosys> opt_dff

3.35.3. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.35.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder_max..

3.35.5. Finished fast OPT passes.

yosys> memory_map

3.36. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

yosys> opt -full

3.37. Executing OPT pass (performing simple optimizations).

yosys> opt_expr -full

3.37.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder_max.

yosys> opt_merge -nomux

3.37.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder_max'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.37.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \adder_max..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce -full

3.37.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \adder_max.
Performed a total of 0 changes.

yosys> opt_merge

3.37.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder_max'.
Removed a total of 0 cells.

yosys> opt_share

3.37.6. Executing OPT_SHARE pass.

yosys> opt_dff

3.37.7. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.37.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder_max..

yosys> opt_expr -full

3.37.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder_max.

3.37.10. Finished OPT passes. (There is nothing left to do.)

yosys> techmap

3.38. Executing TECHMAP pass (map to technology primitives).

3.38.1. Executing Verilog-2005 frontend: /home/users/meri/Documents/workspace/clean/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/meri/Documents/workspace/clean/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.38.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~71 debug messages>

yosys> opt

3.39. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.39.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder_max.

yosys> opt_merge -nomux

3.39.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder_max'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.39.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \adder_max..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.39.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \adder_max.
Performed a total of 0 changes.

yosys> opt_merge

3.39.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder_max'.
Removed a total of 0 cells.

yosys> opt_dff

3.39.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.39.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder_max..

yosys> opt_expr

3.39.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder_max.

3.39.9. Finished OPT passes. (There is nothing left to do.)

yosys> abc -script abc_tmp.scr

3.40. Executing ABC pass (technology mapping using ABC).

3.40.1. Extracting gate netlist of module `\adder_max' to `<abc-temp-dir>/input.blif'..
Extracted 2036 gates and 2417 wires to a netlist network with 381 inputs and 191 outputs.

3.40.1.1. Executing ABC.
Running ABC command: /home/users/meri/Documents/workspace/clean/yosys_verific_rs/logic_synthesis-rs/abc-rs/abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + source /home/users/meri/Documents/workspace/clean/yosys_verific_rs/result_18-03-2022T17-26-14/All_lut_synth_rs_area.json/adder_max/abc_tmp.scr 
ABC: netlist  : i/o =    381/    191  and =    5560  lev =   88 (62.71)  mem = 0.08 MB
ABC: Mapping (K=6)  :  lut =    797  edge =    3111  lev =   25 (18.02)  mem = 0.04 MB
ABC: netlist  : i/o =    381/    191  and =    6238  lev =  138 (71.65)  mem = 0.09 MB
ABC: Mapping (K=6)  :  lut =    704  edge =    2940  lev =   43 (24.55)  mem = 0.04 MB
ABC: netlist  : i/o =    381/    191  and =    5896  lev =  187 (93.50)  mem = 0.08 MB
ABC: Mapping (K=6)  :  lut =    650  edge =    2767  lev =   55 (30.16)  mem = 0.04 MB
ABC: netlist  : i/o =    381/    191  and =    5780  lev =  252 (125.20)  mem = 0.08 MB
ABC: Mapping (K=6)  :  lut =    569  edge =    2493  lev =   80 (42.36)  mem = 0.04 MB
ABC: netlist  : i/o =    381/    191  and =    5326  lev =  268 (133.48)  mem = 0.08 MB
ABC: Mapping (K=6)  :  lut =    612  edge =    2585  lev =   85 (44.75)  mem = 0.04 MB
ABC: netlist  : i/o =    381/    191  and =    5041  lev =  286 (141.94)  mem = 0.09 MB
ABC: Mapping (K=6)  :  lut =    529  edge =    2439  lev =   82 (41.72)  mem = 0.03 MB
ABC: netlist  : i/o =    381/    191  and =    4862  lev =  295 (146.83)  mem = 0.09 MB
ABC: Mapping (K=6)  :  lut =    518  edge =    2349  lev =   82 (42.12)  mem = 0.03 MB
ABC: netlist  : i/o =    381/    191  and =    4769  lev =  307 (152.55)  mem = 0.09 MB
ABC: Mapping (K=6)  :  lut =    503  edge =    2290  lev =   86 (43.88)  mem = 0.03 MB
ABC: netlist  : i/o =    381/    191  and =    4446  lev =  309 (152.21)  mem = 0.08 MB
ABC: Mapping (K=6)  :  lut =    478  edge =    2189  lev =   87 (44.19)  mem = 0.03 MB
ABC: netlist  : i/o =    381/    191  and =    4370  lev =  313 (153.98)  mem = 0.08 MB
ABC: Mapping (K=6)  :  lut =    470  edge =    2130  lev =   88 (44.42)  mem = 0.03 MB
ABC: netlist  : i/o =    381/    191  and =    4078  lev =  318 (155.65)  mem = 0.08 MB
ABC: Mapping (K=6)  :  lut =    450  edge =    2056  lev =   88 (44.18)  mem = 0.03 MB
ABC: netlist  : i/o =    381/    191  and =    4392  lev =  317 (156.91)  mem = 0.08 MB
ABC: Mapping (K=6)  :  lut =    458  edge =    2044  lev =   86 (42.88)  mem = 0.03 MB
ABC: netlist  : i/o =    381/    191  and =    4230  lev =  319 (156.46)  mem = 0.08 MB
ABC: Mapping (K=6)  :  lut =    457  edge =    2045  lev =   86 (42.70)  mem = 0.03 MB
ABC: netlist  : i/o =    381/    191  and =    4078  lev =  318 (155.65)  mem = 0.06 MB
ABC: Mapping (K=6)  :  lut =    450  edge =    2056  lev =   88 (44.18)  mem = 0.03 MB
ABC: netlist  : i/o =    381/    191  and =    4078  lev =  318 (155.65)  mem = 0.08 MB
ABC: Mapping (K=6)  :  lut =    450  edge =    2056  lev =   88 (44.18)  mem = 0.03 MB
ABC: netlist  : i/o =    381/    191  and =    4321  lev =  327 (161.10)  mem = 0.06 MB
ABC: Mapping (K=6)  :  lut =    450  edge =    2056  lev =   88 (44.18)  mem = 0.03 MB
ABC: + write_blif <abc-temp-dir>/output.blif 

3.40.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:      450
ABC RESULTS:        internal signals:     1845
ABC RESULTS:           input signals:      381
ABC RESULTS:          output signals:      191
Removing temp directory.

yosys> opt

3.41. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

3.41.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder_max.

yosys> opt_merge -nomux

3.41.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder_max'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.41.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \adder_max..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.41.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \adder_max.
Performed a total of 0 changes.

yosys> opt_merge

3.41.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder_max'.
Removed a total of 0 cells.

yosys> opt_dff

3.41.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.41.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder_max..
Removed 0 unused cells and 1474 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.41.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder_max.

3.41.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

3.41.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \adder_max..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.41.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \adder_max.
Performed a total of 0 changes.

yosys> opt_merge

3.41.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder_max'.
Removed a total of 0 cells.

yosys> opt_dff

3.41.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.41.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder_max..

yosys> opt_expr

3.41.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder_max.

3.41.16. Finished OPT passes. (There is nothing left to do.)

yosys> hierarchy -check

3.42. Executing HIERARCHY pass (managing design hierarchy).

3.42.1. Analyzing design hierarchy..
Top module:  \adder_max

3.42.2. Analyzing design hierarchy..
Top module:  \adder_max
Removed 0 unused modules.

yosys> stat

3.43. Printing statistics.

=== adder_max ===

   Number of wires:                264
   Number of wire bits:            831
   Number of public wires:           5
   Number of public wire bits:     572
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                450
     $lut                          450


yosys> opt_clean -purge

3.44. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder_max..

yosys> write_verilog -noattr -nohex adder_max.verilog

3.45. Executing Verilog backend.

yosys> bmuxmap

3.45.1. Executing BMUXMAP pass.

yosys> demuxmap

3.45.2. Executing DEMUXMAP pass.

yosys> clean_zerowidth
Dumping module `\adder_max'.

End of script. Logfile hash: ee05e9dde4, CPU: user 2.68s system 0.03s, MEM: 36.30 MB peak
Yosys 0.14+36 (git sha1 4cd3e3b51, gcc 7.1.0 -fPIC -Os)
Time spent: 85% 1x abc (16 sec), 5% 23x opt_expr (0 sec), ...
real 18.83
user 18.10
sys 0.72
