
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.14+36 (git sha1 15a4e900b, gcc 7.1.0 -fPIC -Os)


-- Executing script file `yosys.ys' --

1. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Jan22_SW_Release, released at Sat Jan 29 02:42:49 2022.

2. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Jan22_SW_Release, released at Sat Jan 29 02:42:49 2022.
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'ycrcb2rgb.v'

3. Executing HIERARCHY pass (managing design hierarchy).
VERIFIC-INFO [VERI-1018] ycrcb2rgb.v:57: compiling module 'top'
VERIFIC-WARNING [VERI-2371] ycrcb2rgb.v:98: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] ycrcb2rgb.v:99: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] ycrcb2rgb.v:100: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] ycrcb2rgb.v:109: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] ycrcb2rgb.v:111: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] ycrcb2rgb.v:120: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] ycrcb2rgb.v:121: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] ycrcb2rgb.v:123: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] ycrcb2rgb.v:132: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] ycrcb2rgb.v:134: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] ycrcb2rgb.v:144: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] ycrcb2rgb.v:147: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] ycrcb2rgb.v:150: delay control is not supported for synthesis
Importing module top.

3.1. Analyzing design hierarchy..
Top module:  \top

3.2. Analyzing design hierarchy..
Top module:  \top
Removed 0 unused modules.

4. Executing PROC pass (convert processes to netlists).

4.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

4.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

4.4. Executing PROC_INIT pass (extract init attributes).

4.5. Executing PROC_ARST pass (detect async resets in processes).

4.6. Executing PROC_MUX pass (convert decision trees to multiplexers).

4.7. Executing PROC_DLATCH pass (convert process syncs to latches).

4.8. Executing PROC_DFF pass (convert process syncs to FFs).

4.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

4.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

5. Executing FLATTEN pass (flatten design).

6. Executing TRIBUF pass.

7. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~3 debug messages>

8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 16 unused wires.
<suppressed ~14 debug messages>

9. Executing CHECK pass (checking for obvious problems).
Checking module top...
Found and reported 0 problems.

10. Executing DEMINOUT pass (demote inout ports to input or output).

11. Executing OPT pass (performing simple optimizations).

11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

11.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~13 debug messages>

11.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

11.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

11.6. Executing OPT_DFF pass (perform DFF optimizations).
Removing never-active async load on $verific$rm_reg$ycrcb2rgb.v:112$79 ($aldff) from module top.
Removing never-active async load on $verific$r_reg$ycrcb2rgb.v:151$120 ($aldff) from module top.
Removing never-active async load on $verific$ir_reg$ycrcb2rgb.v:112$80 ($aldff) from module top.
Removing never-active async load on $verific$ig_reg$ycrcb2rgb.v:124$93 ($aldff) from module top.
Removing never-active async load on $verific$ib_reg$ycrcb2rgb.v:135$102 ($aldff) from module top.
Removing never-active async load on $verific$gm2_reg$ycrcb2rgb.v:124$92 ($aldff) from module top.
Removing never-active async load on $verific$gm1_reg$ycrcb2rgb.v:124$91 ($aldff) from module top.
Removing never-active async load on $verific$g_reg$ycrcb2rgb.v:151$121 ($aldff) from module top.
Removing never-active async load on $verific$dy_reg$ycrcb2rgb.v:101$69 ($aldff) from module top.
Removing never-active async load on $verific$dcr_reg$ycrcb2rgb.v:101$70 ($aldff) from module top.
Removing never-active async load on $verific$dcb_reg$ycrcb2rgb.v:101$71 ($aldff) from module top.
Removing never-active async load on $verific$bm_reg$ycrcb2rgb.v:135$101 ($aldff) from module top.
Removing never-active async load on $verific$b_reg$ycrcb2rgb.v:151$122 ($aldff) from module top.

11.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

11.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

11.9. Rerunning OPT passes. (Maybe there is more to do..)

11.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~13 debug messages>

11.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

11.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

11.13. Executing OPT_DFF pass (perform DFF optimizations).

11.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

11.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

11.16. Finished OPT passes. (There is nothing left to do.)

12. Executing FSM pass (extract and optimize FSM).

12.1. Executing FSM_DETECT pass (finding FSMs in design).

12.2. Executing FSM_EXTRACT pass (extracting FSM from design).

12.3. Executing FSM_OPT pass (simple optimizations of FSMs).

12.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

12.5. Executing FSM_OPT pass (simple optimizations of FSMs).

12.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

12.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

12.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

13. Executing OPT pass (performing simple optimizations).

13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~13 debug messages>

13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

13.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $verific$rm_reg$ycrcb2rgb.v:112$79 ($dff) from module top (D = { 1'0 $verific$n105$24 [18:2] 2'00 }, Q = \rm).
Adding EN signal on $verific$r_reg$ycrcb2rgb.v:151$120 ($dff) from module top (D = $verific$n768$49, Q = \r).
Adding EN signal on $verific$ir_reg$ycrcb2rgb.v:112$80 ($dff) from module top (D = { 1'0 $verific$n158$5 $verific$n159$27 \rm [9:0] }, Q = \ir).
Adding EN signal on $verific$ig_reg$ycrcb2rgb.v:124$93 ($dff) from module top (D = { $verific$n391$36 [21] $verific$n391$36 }, Q = \ig).
Adding EN signal on $verific$ib_reg$ycrcb2rgb.v:135$102 ($dff) from module top (D = { 1'0 $verific$n625$8 $verific$n626$44 \bm [9:0] }, Q = \ib).
Adding EN signal on $verific$gm2_reg$ycrcb2rgb.v:124$92 ($dff) from module top (D = $verific$n327$33, Q = \gm2).
Adding EN signal on $verific$gm1_reg$ycrcb2rgb.v:124$91 ($dff) from module top (D = { 1'0 $verific$n286$31 [18:5] 5'00000 }, Q = \gm1).
Adding EN signal on $verific$g_reg$ycrcb2rgb.v:151$121 ($dff) from module top (D = $verific$n805$52, Q = \g).
Adding EN signal on $verific$dy_reg$ycrcb2rgb.v:101$69 ($dff) from module top (D = \y, Q = \dy).
Adding EN signal on $verific$dcr_reg$ycrcb2rgb.v:101$70 ($dff) from module top (D = \cr, Q = \dcr).
Adding EN signal on $verific$dcb_reg$ycrcb2rgb.v:101$71 ($dff) from module top (D = \cb, Q = \dcb).
Adding EN signal on $verific$bm_reg$ycrcb2rgb.v:135$101 ($dff) from module top (D = { $verific$n571$41 [19:2] 2'00 }, Q = \bm).
Adding EN signal on $verific$b_reg$ycrcb2rgb.v:151$122 ($dff) from module top (D = $verific$n842$55, Q = \b).
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$135 ($dffe) from module top.
Setting constant 0-bit at position 1 on $auto$ff.cc:262:slice$135 ($dffe) from module top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$130 ($dffe) from module top.
Setting constant 0-bit at position 1 on $auto$ff.cc:262:slice$130 ($dffe) from module top.
Setting constant 0-bit at position 2 on $auto$ff.cc:262:slice$130 ($dffe) from module top.
Setting constant 0-bit at position 3 on $auto$ff.cc:262:slice$130 ($dffe) from module top.
Setting constant 0-bit at position 4 on $auto$ff.cc:262:slice$130 ($dffe) from module top.
Setting constant 0-bit at position 19 on $auto$ff.cc:262:slice$130 ($dffe) from module top.
Setting constant 0-bit at position 22 on $auto$ff.cc:262:slice$128 ($dffe) from module top.
Setting constant 0-bit at position 22 on $auto$ff.cc:262:slice$126 ($dffe) from module top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$124 ($dffe) from module top.
Setting constant 0-bit at position 1 on $auto$ff.cc:262:slice$124 ($dffe) from module top.
Setting constant 0-bit at position 19 on $auto$ff.cc:262:slice$124 ($dffe) from module top.

13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 13 unused cells and 13 unused wires.
<suppressed ~14 debug messages>

13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~2 debug messages>

13.9. Rerunning OPT passes. (Maybe there is more to do..)

13.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

13.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

13.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

13.13. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$139 ($dffe) from module top.
Setting constant 0-bit at position 1 on $auto$ff.cc:262:slice$139 ($dffe) from module top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$140 ($dffe) from module top.
Setting constant 0-bit at position 1 on $auto$ff.cc:262:slice$140 ($dffe) from module top.

13.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

13.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

13.16. Rerunning OPT passes. (Maybe there is more to do..)

13.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

13.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

13.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

13.20. Executing OPT_DFF pass (perform DFF optimizations).

13.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

13.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

13.23. Finished OPT passes. (There is nothing left to do.)

14. Executing WREDUCE pass (reducing word size of cells).
Removed top 2 bits (of 11) from port B of cell top.$verific$add_17$ycrcb2rgb.v:111$75 ($add).
Removed top 1 bits (of 23) from FF cell top.$auto$ff.cc:262:slice$127 ($dffe).
Removed top 1 bits (of 20) from port A of cell top.$verific$add_28$ycrcb2rgb.v:123$85 ($add).
Removed top 2 bits (of 22) from port A of cell top.$verific$sub_29$ycrcb2rgb.v:123$86 ($sub).
Removed top 1 bits (of 22) from port B of cell top.$verific$sub_29$ycrcb2rgb.v:123$86 ($sub).
Removed top 1 bits (of 11) from port B of cell top.$verific$add_41$ycrcb2rgb.v:134$97 ($add).
Removed top 1 bits (of 20) from wire top.gm1.
Removed top 1 bits (of 23) from wire top.ib.
Removed top 7 bits (of 23) from wire top.ig.
Removed top 1 bits (of 23) from wire top.ir.
Removed top 1 bits (of 20) from wire top.rm.

15. Executing PEEPOPT pass (run peephole optimizers).

16. Executing PMUXTREE pass.

17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 4 unused wires.
<suppressed ~1 debug messages>

18. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module top:
  creating $macc model for $verific$add_16$ycrcb2rgb.v:111$74 ($add).
  creating $macc model for $verific$add_17$ycrcb2rgb.v:111$75 ($add).
  creating $macc model for $verific$add_28$ycrcb2rgb.v:123$85 ($add).
  creating $macc model for $verific$add_40$ycrcb2rgb.v:134$96 ($add).
  creating $macc model for $verific$add_41$ycrcb2rgb.v:134$97 ($add).
  creating $macc model for $verific$mult_14$ycrcb2rgb.v:109$72 ($mul).
  creating $macc model for $verific$mult_24$ycrcb2rgb.v:120$81 ($mul).
  creating $macc model for $verific$mult_26$ycrcb2rgb.v:121$83 ($mul).
  creating $macc model for $verific$mult_38$ycrcb2rgb.v:132$94 ($mul).
  creating $macc model for $verific$sub_29$ycrcb2rgb.v:123$86 ($sub).
  merging $macc model for $verific$add_28$ycrcb2rgb.v:123$85 into $verific$sub_29$ycrcb2rgb.v:123$86.
  merging $macc model for $verific$add_40$ycrcb2rgb.v:134$96 into $verific$add_41$ycrcb2rgb.v:134$97.
  merging $macc model for $verific$add_16$ycrcb2rgb.v:111$74 into $verific$add_17$ycrcb2rgb.v:111$75.
  creating $macc cell for $verific$mult_24$ycrcb2rgb.v:120$81: $auto$alumacc.cc:365:replace_macc$149
  creating $macc cell for $verific$mult_14$ycrcb2rgb.v:109$72: $auto$alumacc.cc:365:replace_macc$150
  creating $macc cell for $verific$add_41$ycrcb2rgb.v:134$97: $auto$alumacc.cc:365:replace_macc$151
  creating $macc cell for $verific$mult_38$ycrcb2rgb.v:132$94: $auto$alumacc.cc:365:replace_macc$152
  creating $macc cell for $verific$mult_26$ycrcb2rgb.v:121$83: $auto$alumacc.cc:365:replace_macc$153
  creating $macc cell for $verific$add_17$ycrcb2rgb.v:111$75: $auto$alumacc.cc:365:replace_macc$154
  creating $macc cell for $verific$sub_29$ycrcb2rgb.v:123$86: $auto$alumacc.cc:365:replace_macc$155
  created 0 $alu and 7 $macc cells.

19. Executing OPT pass (performing simple optimizations).

19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

19.6. Executing OPT_DFF pass (perform DFF optimizations).

19.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 3 unused cells and 6 unused wires.
<suppressed ~4 debug messages>

19.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

19.9. Rerunning OPT passes. (Maybe there is more to do..)

19.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

19.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

19.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

19.13. Executing OPT_DFF pass (perform DFF optimizations).

19.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

19.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

19.16. Finished OPT passes. (There is nothing left to do.)

20. Executing MEMORY pass.

20.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

20.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

20.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

20.4. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

20.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

20.6. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

20.7. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

20.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

20.9. Executing MEMORY_COLLECT pass (generating $mem cells).

21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

22. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

23. Executing SIMPLEMAP pass (map simple cells to gate primitives).
Mapping top.$auto$ff.cc:262:slice$125 ($dffe).
Mapping top.$auto$ff.cc:262:slice$127 ($dffe).
Mapping top.$auto$ff.cc:262:slice$129 ($dffe).
Mapping top.$auto$ff.cc:262:slice$131 ($dffe).
Mapping top.$auto$ff.cc:262:slice$132 ($dffe).
Mapping top.$auto$ff.cc:262:slice$133 ($dffe).
Mapping top.$auto$ff.cc:262:slice$134 ($dffe).
Mapping top.$auto$ff.cc:262:slice$136 ($dffe).
Mapping top.$auto$ff.cc:262:slice$137 ($dffe).
Mapping top.$auto$ff.cc:262:slice$138 ($dffe).
Mapping top.$auto$ff.cc:262:slice$141 ($dffe).
Mapping top.$auto$ff.cc:262:slice$142 ($dffe).
Mapping top.$auto$ff.cc:262:slice$143 ($dffe).
Mapping top.$verific$and_75$ycrcb2rgb.v:144$123 ($and).
Mapping top.$verific$and_76$ycrcb2rgb.v:147$104 ($and).
Mapping top.$verific$and_77$ycrcb2rgb.v:150$109 ($and).
Mapping top.$verific$i52$ycrcb2rgb.v:144$105 ($or).
Mapping top.$verific$i56$ycrcb2rgb.v:147$108 ($not).
Mapping top.$verific$i59$ycrcb2rgb.v:147$110 ($or).
Mapping top.$verific$i66$ycrcb2rgb.v:150$114 ($or).
Mapping top.$verific$or_53$ycrcb2rgb.v:144$106 ($or).
Mapping top.$verific$or_60$ycrcb2rgb.v:147$111 ($or).
Mapping top.$verific$or_67$ycrcb2rgb.v:150$115 ($or).

24. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~22 debug messages>

25. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

26. Executing OPT_DFF pass (perform DFF optimizations).

27. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 42 unused cells and 4 unused wires.
<suppressed ~43 debug messages>

28. Executing OPT pass (performing simple optimizations).

28.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

28.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

28.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

28.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

28.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

28.6. Executing OPT_DFF pass (perform DFF optimizations).

28.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

28.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

28.9. Finished OPT passes. (There is nothing left to do.)

29. Executing OPT pass (performing simple optimizations).

29.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~21 debug messages>

29.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

29.3. Executing OPT_DFF pass (perform DFF optimizations).

29.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

29.5. Finished fast OPT passes.

30. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

31. Executing OPT pass (performing simple optimizations).

31.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

31.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

31.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

31.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

31.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

31.6. Executing OPT_SHARE pass.

31.7. Executing OPT_DFF pass (perform DFF optimizations).

31.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

31.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

31.10. Finished OPT passes. (There is nothing left to do.)

32. Executing TECHMAP pass (map to technology primitives).

32.1. Executing Verilog-2005 frontend: /home/users/aram/Workspace/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/aram/Workspace/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

32.2. Continuing TECHMAP pass.
Using extmapper maccmap for cells of type $macc.
  add \cb * 4'1011 (10x4 bits, unsigned)
  add \dy (10 bits, unsigned)
  add \bm [19:10] (10 bits, unsigned)
  add \dcb (10 bits, unsigned)
  add { \dy 10'0000000000 } (20 bits, unsigned)
  sub { \gm1 [18:5] 5'00000 } (19 bits, unsigned)
  sub \gm2 (20 bits, unsigned)
  add \cr * 7'1100111 (10x7 bits, unsigned)
  add \dy (10 bits, unsigned)
  add \rm [18:10] (9 bits, unsigned)
  add \dcr (10 bits, unsigned)
  add 10'1011011011 * \cr (10x10 bits, unsigned)
  add \cb * 8'11000101 (10x8 bits, unsigned)
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $and.
Using template $paramod\_90_fa\WIDTH=32'00000000000000000000000000001110 for cells of type $fa.
Using template $paramod$091610cd349a68bd5539cffd7126f0d76e9bca00\_90_alu for cells of type $alu.
Using template $paramod\_90_fa\WIDTH=32'00000000000000000000000000001010 for cells of type $fa.
Using template $paramod$ee3d784672cdb1cb32d9a801a3af776716f16b74\_90_alu for cells of type $alu.
Using template $paramod\_90_fa\WIDTH=32'00000000000000000000000000010110 for cells of type $fa.
Using template $paramod$e161c1674351796cd6dd381e70ff05458bfe7755\_90_alu for cells of type $alu.
Using template $paramod\_90_fa\WIDTH=32'00000000000000000000000000010001 for cells of type $fa.
Using template $paramod$3bb72ad0665cdca279bbc49ed6a39f403f16497f\_90_alu for cells of type $alu.
Using template $paramod\_90_fa\WIDTH=32'00000000000000000000000000010100 for cells of type $fa.
Using template $paramod$6fc37af1c109ae54e8aed83fcd995c12d378ce93\_90_alu for cells of type $alu.
Using template $paramod\_90_fa\WIDTH=32'00000000000000000000000000010010 for cells of type $fa.
Using template $paramod$12350b8c8422a70d10b7db4eaae1202a7148b784\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001110 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $mux.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001100 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010110 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010001 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010100 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010010 for cells of type $lcu.
No more expansions possible.
<suppressed ~1651 debug messages>

33. Executing OPT pass (performing simple optimizations).

33.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~2250 debug messages>

33.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~372 debug messages>
Removed a total of 124 cells.

33.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

33.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

33.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

33.6. Executing OPT_DFF pass (perform DFF optimizations).

33.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 137 unused cells and 598 unused wires.
<suppressed ~138 debug messages>

33.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

33.9. Rerunning OPT passes. (Maybe there is more to do..)

33.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

33.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

33.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

33.13. Executing OPT_DFF pass (perform DFF optimizations).

33.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

33.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

33.16. Finished OPT passes. (There is nothing left to do.)

34. Executing ABC pass (technology mapping using ABC).

34.1. Extracting gate netlist of module `\top' to `<abc-temp-dir>/input.blif'..
Extracted 1255 gates and 1392 wires to a netlist network with 137 inputs and 117 outputs.

34.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + source /home/users/aram/Workspace/yosys_verific_rs/scripts/synth/abc/abc_base6.a21.scr 
ABC: netlist  : i/o =    137/    117  and =    3850  lev =   47 (18.21)  mem = 0.05 MB
ABC: Mapping (K=6)  :  lut =    330  edge =    1364  lev =   14 (5.01)  mem = 0.02 MB
ABC: netlist  : i/o =    137/    117  and =    3943  lev =   48 (18.53)  mem = 0.05 MB
ABC: Mapping (K=6)  :  lut =    294  edge =    1280  lev =   13 (4.86)  mem = 0.02 MB
ABC: netlist  : i/o =    137/    117  and =    3964  lev =   45 (17.97)  mem = 0.05 MB
ABC: Mapping (K=6)  :  lut =    290  edge =    1258  lev =   14 (4.57)  mem = 0.02 MB
ABC: netlist  : i/o =    137/    117  and =    4532  lev =   42 (17.76)  mem = 0.06 MB
ABC: Mapping (K=6)  :  lut =    279  edge =    1235  lev =   14 (4.44)  mem = 0.03 MB
ABC: netlist  : i/o =    137/    117  and =    3954  lev =   43 (17.82)  mem = 0.05 MB
ABC: Mapping (K=6)  :  lut =    272  edge =    1214  lev =   12 (4.40)  mem = 0.02 MB
ABC: netlist  : i/o =    137/    117  and =    4026  lev =   42 (18.08)  mem = 0.07 MB
ABC: Mapping (K=6)  :  lut =    266  edge =    1220  lev =   11 (4.21)  mem = 0.02 MB
ABC: netlist  : i/o =    137/    117  and =    4035  lev =   42 (17.90)  mem = 0.07 MB
ABC: Mapping (K=6)  :  lut =    264  edge =    1216  lev =   11 (4.22)  mem = 0.02 MB
ABC: netlist  : i/o =    137/    117  and =    4035  lev =   42 (17.95)  mem = 0.07 MB
ABC: Mapping (K=6)  :  lut =    267  edge =    1214  lev =   11 (4.17)  mem = 0.02 MB
ABC: netlist  : i/o =    137/    117  and =    3284  lev =   38 (16.03)  mem = 0.06 MB
ABC: Mapping (K=6)  :  lut =    264  edge =    1211  lev =   12 (4.18)  mem = 0.02 MB
ABC: netlist  : i/o =    137/    117  and =    4550  lev =   44 (17.76)  mem = 0.08 MB
ABC: Mapping (K=6)  :  lut =    264  edge =    1211  lev =   11 (4.01)  mem = 0.02 MB
ABC: netlist  : i/o =    137/    117  and =    4104  lev =   42 (17.68)  mem = 0.07 MB
ABC: Mapping (K=6)  :  lut =    260  edge =    1203  lev =   11 (4.04)  mem = 0.02 MB
ABC: netlist  : i/o =    137/    117  and =    4102  lev =   41 (17.60)  mem = 0.07 MB
ABC: Mapping (K=6)  :  lut =    260  edge =    1204  lev =   12 (4.13)  mem = 0.02 MB
ABC: netlist  : i/o =    137/    117  and =    4081  lev =   41 (17.56)  mem = 0.07 MB
ABC: Mapping (K=6)  :  lut =    261  edge =    1202  lev =   11 (4.04)  mem = 0.02 MB
ABC: netlist  : i/o =    137/    117  and =    4104  lev =   42 (17.68)  mem = 0.05 MB
ABC: Mapping (K=6)  :  lut =    260  edge =    1203  lev =   11 (4.04)  mem = 0.02 MB
ABC: netlist  : i/o =    137/    117  and =    4104  lev =   42 (17.68)  mem = 0.07 MB
ABC: Mapping (K=6)  :  lut =    260  edge =    1203  lev =   11 (4.04)  mem = 0.02 MB
ABC: netlist  : i/o =    137/    117  and =    4039  lev =   45 (18.26)  mem = 0.05 MB
ABC: Mapping (K=6)  :  lut =    260  edge =    1203  lev =   11 (4.04)  mem = 0.02 MB
ABC: + write_blif <abc-temp-dir>/output.blif 

34.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:      260
ABC RESULTS:        internal signals:     1138
ABC RESULTS:           input signals:      137
ABC RESULTS:          output signals:      117
Removing temp directory.

35. Executing OPT pass (performing simple optimizations).

35.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

35.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

35.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

35.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

35.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

35.6. Executing OPT_DFF pass (perform DFF optimizations).

35.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 546 unused wires.
<suppressed ~1 debug messages>

35.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

35.9. Rerunning OPT passes. (Maybe there is more to do..)

35.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

35.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

35.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

35.13. Executing OPT_DFF pass (perform DFF optimizations).

35.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

35.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

35.16. Finished OPT passes. (There is nothing left to do.)

36. Executing HIERARCHY pass (managing design hierarchy).

36.1. Analyzing design hierarchy..
Top module:  \top

36.2. Analyzing design hierarchy..
Top module:  \top
Removed 0 unused modules.

37. Printing statistics.

=== top ===

   Number of wires:                221
   Number of wire bits:            782
   Number of public wires:          18
   Number of public wire bits:     230
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                407
     $_DFFE_PP_                    147
     $lut                          260

38. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

39. Executing BLIF backend.

Warnings: 13 unique messages, 13 total
End of script. Logfile hash: 327cb10d8c, CPU: user 1.34s system 0.02s, MEM: 31.15 MB peak
Yosys 0.14+36 (git sha1 15a4e900b, gcc 7.1.0 -fPIC -Os)
Time spent: 86% 1x abc (8 sec), 4% 37x opt_expr (0 sec), ...
