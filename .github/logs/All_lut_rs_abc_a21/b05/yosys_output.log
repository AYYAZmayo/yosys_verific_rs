
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.14+36 (git sha1 15a4e900b, gcc 7.1.0 -fPIC -Os)


-- Executing script file `yosys.ys' --

1. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Jan22_SW_Release, released at Sat Jan 29 02:42:49 2022.

2. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Jan22_SW_Release, released at Sat Jan 29 02:42:49 2022.
VERIFIC-INFO [VHDL-1504] default VHDL library search path is now "/home/users/aram/Workspace/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008"
VERIFIC-COMMENT [VHDL-1481] Analyzing VHDL file 'b05.vhd'
VERIFIC-COMMENT [VHDL-1493] Restoring VHDL unit 'std.standard' from file '/home/users/aram/Workspace/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008/std/standard.vdb'
VERIFIC-INFO [VHDL-1012] b05.vhd:1: analyzing entity 'b05'
VERIFIC-INFO [VHDL-1010] b05.vhd:12: analyzing architecture 'behav'

3. Executing HIERARCHY pass (managing design hierarchy).
VERIFIC-INFO [VHDL-1067] b05.vhd:1: processing 'b05(BEHAV)'
VERIFIC-WARNING [VHDL-1840] b05.vhd:242: latch inferred for net 'TN[8]'
Importing module standard.
Importing module b05.

3.1. Analyzing design hierarchy..
Top module:  \b05

3.2. Analyzing design hierarchy..
Top module:  \b05
Removing unused module `\standard'.
Removed 1 unused modules.

4. Executing PROC pass (convert processes to netlists).

4.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

4.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

4.4. Executing PROC_INIT pass (extract init attributes).

4.5. Executing PROC_ARST pass (detect async resets in processes).

4.6. Executing PROC_MUX pass (convert decision trees to multiplexers).

4.7. Executing PROC_DLATCH pass (convert process syncs to latches).

4.8. Executing PROC_DFF pass (convert process syncs to FFs).

4.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

4.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module b05.
<suppressed ~26 debug messages>

5. Executing FLATTEN pass (flatten design).

6. Executing TRIBUF pass.

7. Executing OPT_EXPR pass (perform const folding).
Optimizing module b05.

8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b05..
Removed 5 unused cells and 54 unused wires.
<suppressed ~28 debug messages>

9. Executing CHECK pass (checking for obvious problems).
Checking module b05...
Found and reported 0 problems.

10. Executing DEMINOUT pass (demote inout ports to input or output).

11. Executing OPT pass (performing simple optimizations).

11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b05.

11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b05'.
Removed a total of 0 cells.

11.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b05..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port A of cell $verific$i361$b05.vhd:284$348: \FLAG -> 1'0
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~24 debug messages>

11.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b05.
  Optimizing cells in module \b05.
Performed a total of 1 changes.

11.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b05'.
Removed a total of 0 cells.

11.6. Executing OPT_DFF pass (perform DFF optimizations).
Changing const-value async load to async reset on $verific$EN_DISP_reg$b05.vhd:308$374 ($aldff) from module b05.
Changing const-value async load to async reset on $verific$TEMP_reg$b05.vhd:308$377 ($aldff) from module b05.
Changing const-value async load to async reset on $verific$STATO_reg$b05.vhd:308$372 ($aldff) from module b05.
Changing const-value async load to async reset on $verific$RES_DISP_reg$b05.vhd:308$373 ($aldff) from module b05.
Changing const-value async load to async reset on $verific$NUM_reg$b05.vhd:308$375 ($aldff) from module b05.
Changing const-value async load to async reset on $verific$MAX_reg$b05.vhd:308$378 ($aldff) from module b05.
Changing const-value async load to async reset on $verific$MAR_reg$b05.vhd:308$376 ($aldff) from module b05.
Changing const-value async load to async reset on $verific$FLAG_reg$b05.vhd:308$379 ($aldff) from module b05.

11.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b05..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

11.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module b05.

11.9. Rerunning OPT passes. (Maybe there is more to do..)

11.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b05..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~24 debug messages>

11.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b05.
Performed a total of 0 changes.

11.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b05'.
Removed a total of 0 cells.

11.13. Executing OPT_DFF pass (perform DFF optimizations).

11.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b05..

11.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module b05.

11.16. Finished OPT passes. (There is nothing left to do.)

12. Executing FSM pass (extract and optimize FSM).

12.1. Executing FSM_DETECT pass (finding FSMs in design).

12.2. Executing FSM_EXTRACT pass (extracting FSM from design).

12.3. Executing FSM_OPT pass (simple optimizations of FSMs).

12.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b05..

12.5. Executing FSM_OPT pass (simple optimizations of FSMs).

12.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

12.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

12.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

13. Executing OPT pass (performing simple optimizations).

13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b05.

13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b05'.
Removed a total of 0 cells.

13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b05..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~24 debug messages>

13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b05.
Performed a total of 0 changes.

13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b05'.
Removed a total of 0 cells.

13.6. Executing OPT_DFF pass (perform DFF optimizations).

13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b05..

13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module b05.

13.9. Finished OPT passes. (There is nothing left to do.)

14. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 10) from port Y of cell b05.$verific$sub_4$b05.vhd:60$183 ($sub).
Removed top 1 bits (of 10) from port A of cell b05.$verific$sub_4$b05.vhd:60$183 ($sub).
Removed top 1 bits (of 10) from port B of cell b05.$verific$sub_4$b05.vhd:60$183 ($sub).
Removed top 1 bits (of 9) from port A of cell b05.$verific$LessThan_6$b05.vhd:61$186 ($lt).
Removed top 1 bits (of 10) from port Y of cell b05.$verific$sub_19$b05.vhd:73$194 ($sub).
Removed top 1 bits (of 10) from port A of cell b05.$verific$sub_19$b05.vhd:73$194 ($sub).
Removed top 1 bits (of 10) from port B of cell b05.$verific$sub_19$b05.vhd:73$194 ($sub).
Removed top 1 bits (of 9) from port A of cell b05.$verific$LessThan_21$b05.vhd:74$197 ($lt).
Removed top 1 bits (of 9) from port A of cell b05.$verific$LessThan_39$b05.vhd:101$209 ($lt).
Removed top 1 bits (of 6) from port A of cell b05.$verific$unary_minus_41$b05.vhd:103$210 ($neg).
Removed top 1 bits (of 8) from port B of cell b05.$verific$LessThan_47$b05.vhd:108$220 ($lt).
Removed top 1 bits (of 8) from port B of cell b05.$verific$sub_49$b05.vhd:110$221 ($sub).
Removed top 1 bits (of 7) from mux cell b05.$verific$mux_52$b05.vhd:113$224 ($mux).
Removed top 1 bits (of 8) from port B of cell b05.$verific$LessThan_54$b05.vhd:114$226 ($lt).
Removed top 2 bits (of 9) from port B of cell b05.$verific$sub_56$b05.vhd:116$228 ($sub).
Removed top 1 bits (of 8) from port B of cell b05.$verific$LessThan_58$b05.vhd:118$230 ($lt).
Removed top 2 bits (of 9) from port B of cell b05.$verific$sub_60$b05.vhd:120$232 ($sub).
Removed top 1 bits (of 8) from port B of cell b05.$verific$LessThan_62$b05.vhd:122$234 ($lt).
Removed top 2 bits (of 9) from port B of cell b05.$verific$sub_64$b05.vhd:124$236 ($sub).
Removed top 1 bits (of 8) from port B of cell b05.$verific$LessThan_66$b05.vhd:126$238 ($lt).
Removed top 3 bits (of 9) from port B of cell b05.$verific$sub_68$b05.vhd:128$240 ($sub).
Removed top 1 bits (of 8) from port B of cell b05.$verific$LessThan_70$b05.vhd:130$242 ($lt).
Removed top 3 bits (of 9) from port B of cell b05.$verific$sub_72$b05.vhd:132$244 ($sub).
Removed top 1 bits (of 8) from port B of cell b05.$verific$LessThan_74$b05.vhd:134$246 ($lt).
Removed top 3 bits (of 9) from port B of cell b05.$verific$sub_76$b05.vhd:136$248 ($sub).
Removed top 1 bits (of 8) from port B of cell b05.$verific$LessThan_78$b05.vhd:138$250 ($lt).
Removed top 4 bits (of 9) from port B of cell b05.$verific$sub_80$b05.vhd:140$252 ($sub).
Removed top 1 bits (of 8) from port B of cell b05.$verific$LessThan_82$b05.vhd:142$254 ($lt).
Removed top 4 bits (of 9) from port B of cell b05.$verific$sub_84$b05.vhd:144$256 ($sub).
Removed top 1 bits (of 8) from port B of cell b05.$verific$LessThan_86$b05.vhd:146$258 ($lt).
Removed top 5 bits (of 9) from port B of cell b05.$verific$sub_88$b05.vhd:148$259 ($sub).
Removed top 1 bits (of 7) from mux cell b05.$verific$mux_91$b05.vhd:151$261 ($mux).
Removed top 1 bits (of 9) from port B of cell b05.$verific$LessThan_109$b05.vhd:160$279 ($lt).
Removed top 1 bits (of 9) from port B of cell b05.$verific$LessThan_111$b05.vhd:163$280 ($lt).
Removed top 1 bits (of 9) from port B of cell b05.$verific$LessThan_113$b05.vhd:166$281 ($lt).
Removed top 1 bits (of 9) from port B of cell b05.$verific$LessThan_115$b05.vhd:169$282 ($lt).
Removed top 1 bits (of 9) from port B of cell b05.$verific$LessThan_117$b05.vhd:172$283 ($lt).
Removed top 1 bits (of 9) from port B of cell b05.$verific$LessThan_119$b05.vhd:175$284 ($lt).
Removed top 1 bits (of 9) from port B of cell b05.$verific$LessThan_121$b05.vhd:178$285 ($lt).
Removed top 1 bits (of 9) from port B of cell b05.$verific$LessThan_123$b05.vhd:181$286 ($lt).
Removed top 1 bits (of 9) from port B of cell b05.$verific$LessThan_125$b05.vhd:184$287 ($lt).
Removed top 1 bits (of 7) from mux cell b05.$verific$mux_128$b05.vhd:188$288 ($mux).
Removed top 1 bits (of 5) from port A of cell b05.$verific$LessThan_137$b05.vhd:197$297 ($lt).
Removed top 1 bits (of 6) from port A of cell b05.$verific$sub_139$b05.vhd:199$298 ($sub).
Removed top 2 bits (of 6) from port B of cell b05.$verific$sub_139$b05.vhd:199$298 ($sub).
Removed top 1 bits (of 7) from mux cell b05.$verific$mux_142$b05.vhd:202$299 ($mux).
Removed top 1 bits (of 6) from port B of cell b05.$verific$LessThan_144$b05.vhd:203$301 ($lt).
Removed top 1 bits (of 6) from port B of cell b05.$verific$LessThan_146$b05.vhd:206$302 ($lt).
Removed top 1 bits (of 6) from port B of cell b05.$verific$LessThan_148$b05.vhd:209$303 ($lt).
Removed top 1 bits (of 6) from port B of cell b05.$verific$LessThan_150$b05.vhd:212$304 ($lt).
Removed top 1 bits (of 6) from port B of cell b05.$verific$LessThan_152$b05.vhd:215$305 ($lt).
Removed top 1 bits (of 6) from port B of cell b05.$verific$LessThan_154$b05.vhd:218$306 ($lt).
Removed top 1 bits (of 6) from port B of cell b05.$verific$LessThan_156$b05.vhd:221$307 ($lt).
Removed top 1 bits (of 6) from port B of cell b05.$verific$LessThan_158$b05.vhd:224$308 ($lt).
Removed top 1 bits (of 6) from port B of cell b05.$verific$LessThan_160$b05.vhd:227$309 ($lt).
Removed top 1 bits (of 7) from mux cell b05.$verific$mux_163$b05.vhd:231$311 ($mux).
Removed top 4 bits (of 5) from port B of cell b05.$verific$add_358$b05.vhd:283$345 ($add).
Removed top 1 bits (of 6) from port Y of cell b05.$verific$add_358$b05.vhd:283$345 ($add).
Removed top 4 bits (of 5) from port B of cell b05.$verific$add_376$b05.vhd:304$358 ($add).
Removed top 1 bits (of 6) from port Y of cell b05.$verific$add_376$b05.vhd:304$358 ($add).
Removed top 1 bits (of 2) from wire b05.$verific$n1549$157.
Removed top 1 bits (of 7) from wire b05.$verific$n239$78.
Removed top 1 bits (of 7) from wire b05.$verific$n525$108.
Removed top 1 bits (of 7) from wire b05.$verific$n776$126.
Removed top 1 bits (of 7) from wire b05.$verific$n879$137.
Removed top 1 bits (of 7) from wire b05.$verific$n983$139.

15. Executing PEEPOPT pass (run peephole optimizers).

16. Executing PMUXTREE pass.

17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b05..
Removed 0 unused cells and 10 unused wires.
<suppressed ~1 debug messages>

18. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module b05:
  creating $macc model for $verific$add_358$b05.vhd:283$345 ($add).
  creating $macc model for $verific$add_376$b05.vhd:304$358 ($add).
  creating $macc model for $verific$sub_139$b05.vhd:199$298 ($sub).
  creating $macc model for $verific$sub_19$b05.vhd:73$194 ($sub).
  creating $macc model for $verific$sub_4$b05.vhd:60$183 ($sub).
  creating $macc model for $verific$sub_49$b05.vhd:110$221 ($sub).
  creating $macc model for $verific$sub_56$b05.vhd:116$228 ($sub).
  creating $macc model for $verific$sub_60$b05.vhd:120$232 ($sub).
  creating $macc model for $verific$sub_64$b05.vhd:124$236 ($sub).
  creating $macc model for $verific$sub_68$b05.vhd:128$240 ($sub).
  creating $macc model for $verific$sub_72$b05.vhd:132$244 ($sub).
  creating $macc model for $verific$sub_76$b05.vhd:136$248 ($sub).
  creating $macc model for $verific$sub_80$b05.vhd:140$252 ($sub).
  creating $macc model for $verific$sub_84$b05.vhd:144$256 ($sub).
  creating $macc model for $verific$sub_88$b05.vhd:148$259 ($sub).
  creating $macc model for $verific$unary_minus_41$b05.vhd:103$210 ($neg).
  creating $alu model for $macc $verific$unary_minus_41$b05.vhd:103$210.
  creating $alu model for $macc $verific$sub_88$b05.vhd:148$259.
  creating $alu model for $macc $verific$sub_84$b05.vhd:144$256.
  creating $alu model for $macc $verific$sub_80$b05.vhd:140$252.
  creating $alu model for $macc $verific$sub_76$b05.vhd:136$248.
  creating $alu model for $macc $verific$sub_72$b05.vhd:132$244.
  creating $alu model for $macc $verific$sub_68$b05.vhd:128$240.
  creating $alu model for $macc $verific$sub_64$b05.vhd:124$236.
  creating $alu model for $macc $verific$sub_60$b05.vhd:120$232.
  creating $alu model for $macc $verific$sub_56$b05.vhd:116$228.
  creating $alu model for $macc $verific$sub_49$b05.vhd:110$221.
  creating $alu model for $macc $verific$sub_4$b05.vhd:60$183.
  creating $alu model for $macc $verific$sub_19$b05.vhd:73$194.
  creating $alu model for $macc $verific$sub_139$b05.vhd:199$298.
  creating $alu model for $macc $verific$add_376$b05.vhd:304$358.
  creating $alu model for $macc $verific$add_358$b05.vhd:283$345.
  creating $alu model for $verific$LessThan_109$b05.vhd:160$279 ($lt): new $alu
  creating $alu model for $verific$LessThan_111$b05.vhd:163$280 ($lt): new $alu
  creating $alu model for $verific$LessThan_113$b05.vhd:166$281 ($lt): new $alu
  creating $alu model for $verific$LessThan_115$b05.vhd:169$282 ($lt): new $alu
  creating $alu model for $verific$LessThan_117$b05.vhd:172$283 ($lt): new $alu
  creating $alu model for $verific$LessThan_119$b05.vhd:175$284 ($lt): new $alu
  creating $alu model for $verific$LessThan_121$b05.vhd:178$285 ($lt): new $alu
  creating $alu model for $verific$LessThan_123$b05.vhd:181$286 ($lt): new $alu
  creating $alu model for $verific$LessThan_125$b05.vhd:184$287 ($lt): new $alu
  creating $alu model for $verific$LessThan_137$b05.vhd:197$297 ($lt): new $alu
  creating $alu model for $verific$LessThan_144$b05.vhd:203$301 ($lt): new $alu
  creating $alu model for $verific$LessThan_146$b05.vhd:206$302 ($lt): new $alu
  creating $alu model for $verific$LessThan_148$b05.vhd:209$303 ($lt): new $alu
  creating $alu model for $verific$LessThan_150$b05.vhd:212$304 ($lt): new $alu
  creating $alu model for $verific$LessThan_152$b05.vhd:215$305 ($lt): new $alu
  creating $alu model for $verific$LessThan_154$b05.vhd:218$306 ($lt): new $alu
  creating $alu model for $verific$LessThan_156$b05.vhd:221$307 ($lt): new $alu
  creating $alu model for $verific$LessThan_158$b05.vhd:224$308 ($lt): new $alu
  creating $alu model for $verific$LessThan_160$b05.vhd:227$309 ($lt): new $alu
  creating $alu model for $verific$LessThan_21$b05.vhd:74$197 ($lt): new $alu
  creating $alu model for $verific$LessThan_39$b05.vhd:101$209 ($lt): new $alu
  creating $alu model for $verific$LessThan_47$b05.vhd:108$220 ($lt): new $alu
  creating $alu model for $verific$LessThan_54$b05.vhd:114$226 ($lt): new $alu
  creating $alu model for $verific$LessThan_58$b05.vhd:118$230 ($lt): new $alu
  creating $alu model for $verific$LessThan_6$b05.vhd:61$186 ($lt): new $alu
  creating $alu model for $verific$LessThan_62$b05.vhd:122$234 ($lt): new $alu
  creating $alu model for $verific$LessThan_66$b05.vhd:126$238 ($lt): new $alu
  creating $alu model for $verific$LessThan_70$b05.vhd:130$242 ($lt): new $alu
  creating $alu model for $verific$LessThan_74$b05.vhd:134$246 ($lt): new $alu
  creating $alu model for $verific$LessThan_78$b05.vhd:138$250 ($lt): new $alu
  creating $alu model for $verific$LessThan_82$b05.vhd:142$254 ($lt): new $alu
  creating $alu model for $verific$LessThan_86$b05.vhd:146$258 ($lt): new $alu
  creating $alu cell for $verific$LessThan_86$b05.vhd:146$258: $auto$alumacc.cc:485:replace_alu$418
  creating $alu cell for $verific$LessThan_82$b05.vhd:142$254: $auto$alumacc.cc:485:replace_alu$429
  creating $alu cell for $verific$LessThan_78$b05.vhd:138$250: $auto$alumacc.cc:485:replace_alu$440
  creating $alu cell for $verific$LessThan_74$b05.vhd:134$246: $auto$alumacc.cc:485:replace_alu$451
  creating $alu cell for $verific$LessThan_70$b05.vhd:130$242: $auto$alumacc.cc:485:replace_alu$462
  creating $alu cell for $verific$LessThan_66$b05.vhd:126$238: $auto$alumacc.cc:485:replace_alu$473
  creating $alu cell for $verific$LessThan_62$b05.vhd:122$234: $auto$alumacc.cc:485:replace_alu$484
  creating $alu cell for $verific$LessThan_6$b05.vhd:61$186: $auto$alumacc.cc:485:replace_alu$495
  creating $alu cell for $verific$LessThan_58$b05.vhd:118$230: $auto$alumacc.cc:485:replace_alu$500
  creating $alu cell for $verific$LessThan_54$b05.vhd:114$226: $auto$alumacc.cc:485:replace_alu$511
  creating $alu cell for $verific$LessThan_47$b05.vhd:108$220: $auto$alumacc.cc:485:replace_alu$522
  creating $alu cell for $verific$LessThan_39$b05.vhd:101$209: $auto$alumacc.cc:485:replace_alu$533
  creating $alu cell for $verific$LessThan_21$b05.vhd:74$197: $auto$alumacc.cc:485:replace_alu$538
  creating $alu cell for $verific$LessThan_160$b05.vhd:227$309: $auto$alumacc.cc:485:replace_alu$543
  creating $alu cell for $verific$LessThan_158$b05.vhd:224$308: $auto$alumacc.cc:485:replace_alu$554
  creating $alu cell for $verific$LessThan_156$b05.vhd:221$307: $auto$alumacc.cc:485:replace_alu$565
  creating $alu cell for $verific$LessThan_154$b05.vhd:218$306: $auto$alumacc.cc:485:replace_alu$576
  creating $alu cell for $verific$LessThan_152$b05.vhd:215$305: $auto$alumacc.cc:485:replace_alu$587
  creating $alu cell for $verific$LessThan_150$b05.vhd:212$304: $auto$alumacc.cc:485:replace_alu$598
  creating $alu cell for $verific$LessThan_148$b05.vhd:209$303: $auto$alumacc.cc:485:replace_alu$609
  creating $alu cell for $verific$LessThan_146$b05.vhd:206$302: $auto$alumacc.cc:485:replace_alu$620
  creating $alu cell for $verific$LessThan_144$b05.vhd:203$301: $auto$alumacc.cc:485:replace_alu$631
  creating $alu cell for $verific$LessThan_137$b05.vhd:197$297: $auto$alumacc.cc:485:replace_alu$642
  creating $alu cell for $verific$LessThan_125$b05.vhd:184$287: $auto$alumacc.cc:485:replace_alu$647
  creating $alu cell for $verific$LessThan_123$b05.vhd:181$286: $auto$alumacc.cc:485:replace_alu$658
  creating $alu cell for $verific$LessThan_121$b05.vhd:178$285: $auto$alumacc.cc:485:replace_alu$669
  creating $alu cell for $verific$LessThan_119$b05.vhd:175$284: $auto$alumacc.cc:485:replace_alu$680
  creating $alu cell for $verific$LessThan_117$b05.vhd:172$283: $auto$alumacc.cc:485:replace_alu$691
  creating $alu cell for $verific$LessThan_115$b05.vhd:169$282: $auto$alumacc.cc:485:replace_alu$702
  creating $alu cell for $verific$LessThan_113$b05.vhd:166$281: $auto$alumacc.cc:485:replace_alu$713
  creating $alu cell for $verific$LessThan_111$b05.vhd:163$280: $auto$alumacc.cc:485:replace_alu$724
  creating $alu cell for $verific$LessThan_109$b05.vhd:160$279: $auto$alumacc.cc:485:replace_alu$735
  creating $alu cell for $verific$add_358$b05.vhd:283$345: $auto$alumacc.cc:485:replace_alu$746
  creating $alu cell for $verific$add_376$b05.vhd:304$358: $auto$alumacc.cc:485:replace_alu$749
  creating $alu cell for $verific$sub_139$b05.vhd:199$298: $auto$alumacc.cc:485:replace_alu$752
  creating $alu cell for $verific$sub_19$b05.vhd:73$194: $auto$alumacc.cc:485:replace_alu$755
  creating $alu cell for $verific$sub_4$b05.vhd:60$183: $auto$alumacc.cc:485:replace_alu$758
  creating $alu cell for $verific$sub_49$b05.vhd:110$221: $auto$alumacc.cc:485:replace_alu$761
  creating $alu cell for $verific$sub_56$b05.vhd:116$228: $auto$alumacc.cc:485:replace_alu$764
  creating $alu cell for $verific$sub_60$b05.vhd:120$232: $auto$alumacc.cc:485:replace_alu$767
  creating $alu cell for $verific$sub_64$b05.vhd:124$236: $auto$alumacc.cc:485:replace_alu$770
  creating $alu cell for $verific$sub_68$b05.vhd:128$240: $auto$alumacc.cc:485:replace_alu$773
  creating $alu cell for $verific$sub_72$b05.vhd:132$244: $auto$alumacc.cc:485:replace_alu$776
  creating $alu cell for $verific$sub_76$b05.vhd:136$248: $auto$alumacc.cc:485:replace_alu$779
  creating $alu cell for $verific$sub_80$b05.vhd:140$252: $auto$alumacc.cc:485:replace_alu$782
  creating $alu cell for $verific$sub_84$b05.vhd:144$256: $auto$alumacc.cc:485:replace_alu$785
  creating $alu cell for $verific$sub_88$b05.vhd:148$259: $auto$alumacc.cc:485:replace_alu$788
  creating $alu cell for $verific$unary_minus_41$b05.vhd:103$210: $auto$alumacc.cc:485:replace_alu$791
  created 48 $alu and 0 $macc cells.

19. Executing OPT pass (performing simple optimizations).

19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b05.
<suppressed ~49 debug messages>

19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b05'.
Removed a total of 0 cells.

19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b05..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux $verific$i17$b05.vhd:72$192.
    dead port 2/2 on $mux $verific$i17$b05.vhd:72$192.
    dead port 1/2 on $mux $verific$i25$b05.vhd:78$198.
    dead port 2/2 on $mux $verific$i25$b05.vhd:78$198.
Removed 4 multiplexer ports.
<suppressed ~22 debug messages>

19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b05.
Performed a total of 0 changes.

19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b05'.
Removed a total of 0 cells.

19.6. Executing OPT_DFF pass (perform DFF optimizations).

19.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b05..
Removed 32 unused cells and 66 unused wires.
<suppressed ~35 debug messages>

19.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module b05.

19.9. Rerunning OPT passes. (Maybe there is more to do..)

19.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b05..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~22 debug messages>

19.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b05.
Performed a total of 0 changes.

19.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b05'.
Removed a total of 0 cells.

19.13. Executing OPT_DFF pass (perform DFF optimizations).

19.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b05..

19.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module b05.

19.16. Finished OPT passes. (There is nothing left to do.)

20. Executing MEMORY pass.

20.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

20.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

20.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

20.4. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

20.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b05..

20.6. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

20.7. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

20.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b05..

20.9. Executing MEMORY_COLLECT pass (generating $mem cells).

21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b05..

22. Executing OPT_EXPR pass (perform const folding).
Optimizing module b05.

23. Executing SIMPLEMAP pass (map simple cells to gate primitives).
Mapping b05.$auto$alumacc.cc:67:get_gt$425 ($or).
Mapping b05.$auto$alumacc.cc:67:get_gt$436 ($or).
Mapping b05.$auto$alumacc.cc:67:get_gt$447 ($or).
Mapping b05.$auto$alumacc.cc:67:get_gt$458 ($or).
Mapping b05.$auto$alumacc.cc:67:get_gt$469 ($or).
Mapping b05.$auto$alumacc.cc:67:get_gt$480 ($or).
Mapping b05.$auto$alumacc.cc:67:get_gt$491 ($or).
Mapping b05.$auto$alumacc.cc:67:get_gt$507 ($or).
Mapping b05.$auto$alumacc.cc:67:get_gt$518 ($or).
Mapping b05.$auto$alumacc.cc:67:get_gt$529 ($or).
Mapping b05.$auto$alumacc.cc:67:get_gt$550 ($or).
Mapping b05.$auto$alumacc.cc:67:get_gt$561 ($or).
Mapping b05.$auto$alumacc.cc:67:get_gt$572 ($or).
Mapping b05.$auto$alumacc.cc:67:get_gt$583 ($or).
Mapping b05.$auto$alumacc.cc:67:get_gt$594 ($or).
Mapping b05.$auto$alumacc.cc:67:get_gt$605 ($or).
Mapping b05.$auto$alumacc.cc:67:get_gt$616 ($or).
Mapping b05.$auto$alumacc.cc:67:get_gt$627 ($or).
Mapping b05.$auto$alumacc.cc:67:get_gt$638 ($or).
Mapping b05.$auto$alumacc.cc:67:get_gt$654 ($or).
Mapping b05.$auto$alumacc.cc:67:get_gt$665 ($or).
Mapping b05.$auto$alumacc.cc:67:get_gt$676 ($or).
Mapping b05.$auto$alumacc.cc:67:get_gt$687 ($or).
Mapping b05.$auto$alumacc.cc:67:get_gt$698 ($or).
Mapping b05.$auto$alumacc.cc:67:get_gt$709 ($or).
Mapping b05.$auto$alumacc.cc:67:get_gt$720 ($or).
Mapping b05.$auto$alumacc.cc:67:get_gt$731 ($or).
Mapping b05.$auto$alumacc.cc:67:get_gt$742 ($or).
Mapping b05.$auto$alumacc.cc:75:get_eq$423 ($reduce_and).
Mapping b05.$auto$alumacc.cc:75:get_eq$434 ($reduce_and).
Mapping b05.$auto$alumacc.cc:75:get_eq$445 ($reduce_and).
Mapping b05.$auto$alumacc.cc:75:get_eq$456 ($reduce_and).
Mapping b05.$auto$alumacc.cc:75:get_eq$467 ($reduce_and).
Mapping b05.$auto$alumacc.cc:75:get_eq$478 ($reduce_and).
Mapping b05.$auto$alumacc.cc:75:get_eq$489 ($reduce_and).
Mapping b05.$auto$alumacc.cc:75:get_eq$505 ($reduce_and).
Mapping b05.$auto$alumacc.cc:75:get_eq$516 ($reduce_and).
Mapping b05.$auto$alumacc.cc:75:get_eq$527 ($reduce_and).
Mapping b05.$auto$alumacc.cc:75:get_eq$548 ($reduce_and).
Mapping b05.$auto$alumacc.cc:75:get_eq$559 ($reduce_and).
Mapping b05.$auto$alumacc.cc:75:get_eq$570 ($reduce_and).
Mapping b05.$auto$alumacc.cc:75:get_eq$581 ($reduce_and).
Mapping b05.$auto$alumacc.cc:75:get_eq$592 ($reduce_and).
Mapping b05.$auto$alumacc.cc:75:get_eq$603 ($reduce_and).
Mapping b05.$auto$alumacc.cc:75:get_eq$614 ($reduce_and).
Mapping b05.$auto$alumacc.cc:75:get_eq$625 ($reduce_and).
Mapping b05.$auto$alumacc.cc:75:get_eq$636 ($reduce_and).
Mapping b05.$auto$alumacc.cc:75:get_eq$652 ($reduce_and).
Mapping b05.$auto$alumacc.cc:75:get_eq$663 ($reduce_and).
Mapping b05.$auto$alumacc.cc:75:get_eq$674 ($reduce_and).
Mapping b05.$auto$alumacc.cc:75:get_eq$685 ($reduce_and).
Mapping b05.$auto$alumacc.cc:75:get_eq$696 ($reduce_and).
Mapping b05.$auto$alumacc.cc:75:get_eq$707 ($reduce_and).
Mapping b05.$auto$alumacc.cc:75:get_eq$718 ($reduce_and).
Mapping b05.$auto$alumacc.cc:75:get_eq$729 ($reduce_and).
Mapping b05.$auto$alumacc.cc:75:get_eq$740 ($reduce_and).
Mapping b05.$auto$alumacc.cc:89:get_cf$421 ($not).
Mapping b05.$auto$alumacc.cc:89:get_cf$432 ($not).
Mapping b05.$auto$alumacc.cc:89:get_cf$443 ($not).
Mapping b05.$auto$alumacc.cc:89:get_cf$454 ($not).
Mapping b05.$auto$alumacc.cc:89:get_cf$465 ($not).
Mapping b05.$auto$alumacc.cc:89:get_cf$476 ($not).
Mapping b05.$auto$alumacc.cc:89:get_cf$487 ($not).
Mapping b05.$auto$alumacc.cc:89:get_cf$503 ($not).
Mapping b05.$auto$alumacc.cc:89:get_cf$514 ($not).
Mapping b05.$auto$alumacc.cc:89:get_cf$525 ($not).
Mapping b05.$auto$alumacc.cc:89:get_cf$546 ($not).
Mapping b05.$auto$alumacc.cc:89:get_cf$557 ($not).
Mapping b05.$auto$alumacc.cc:89:get_cf$568 ($not).
Mapping b05.$auto$alumacc.cc:89:get_cf$579 ($not).
Mapping b05.$auto$alumacc.cc:89:get_cf$590 ($not).
Mapping b05.$auto$alumacc.cc:89:get_cf$601 ($not).
Mapping b05.$auto$alumacc.cc:89:get_cf$612 ($not).
Mapping b05.$auto$alumacc.cc:89:get_cf$623 ($not).
Mapping b05.$auto$alumacc.cc:89:get_cf$634 ($not).
Mapping b05.$auto$alumacc.cc:89:get_cf$650 ($not).
Mapping b05.$auto$alumacc.cc:89:get_cf$661 ($not).
Mapping b05.$auto$alumacc.cc:89:get_cf$672 ($not).
Mapping b05.$auto$alumacc.cc:89:get_cf$683 ($not).
Mapping b05.$auto$alumacc.cc:89:get_cf$694 ($not).
Mapping b05.$auto$alumacc.cc:89:get_cf$705 ($not).
Mapping b05.$auto$alumacc.cc:89:get_cf$716 ($not).
Mapping b05.$auto$alumacc.cc:89:get_cf$727 ($not).
Mapping b05.$auto$alumacc.cc:89:get_cf$738 ($not).
Mapping b05.$verific$EN_DISP_reg$b05.vhd:308$374 ($adff).
Mapping b05.$verific$FLAG_reg$b05.vhd:308$379 ($adff).
Mapping b05.$verific$MAR_reg$b05.vhd:308$376 ($adff).
Mapping b05.$verific$MAX_reg$b05.vhd:308$378 ($adff).
Mapping b05.$verific$Mux_381$b05.vhd:307$364 ($bmux).
Mapping b05.$verific$Mux_382$b05.vhd:307$365 ($bmux).
Mapping b05.$verific$Mux_386$b05.vhd:307$369 ($bmux).
Mapping b05.$verific$NUM_reg$b05.vhd:308$375 ($adff).
Mapping b05.$verific$RES_DISP_reg$b05.vhd:308$373 ($adff).
Mapping b05.$verific$STATO_reg$b05.vhd:308$372 ($adff).
Mapping b05.$verific$TEMP_reg$b05.vhd:308$377 ($adff).
Mapping b05.$verific$equal_373$b05.vhd:296$357 ($eq).
Mapping b05.$verific$equal_9$b05.vhd:65$189 ($logic_not).
Mapping b05.$verific$i16$b05.vhd:71$191 ($mux).
Mapping b05.$verific$i178$b05.vhd:240$325 ($mux).
Mapping b05.$verific$i18$b05.vhd:72$193 ($mux).
Mapping b05.$verific$i186$b05.vhd:241$331 ($mux).
Mapping b05.$verific$i350$b05.vhd:274$341 ($mux).
Mapping b05.$verific$i351$b05.vhd:274$342 ($mux).
Mapping b05.$verific$i352$b05.vhd:274$343 ($mux).
Mapping b05.$verific$i368$b05.vhd:291$352 ($mux).
Mapping b05.$verific$i369$b05.vhd:292$353 ($mux).
Mapping b05.$verific$i380$b05.vhd:306$362 ($mux).
Mapping b05.$verific$i405$b05.vhd:274$335 ($not).
Mapping b05.$verific$i46$b05.vhd:107$218 ($mux).
Mapping b05.$verific$mux_100$b05.vhd:155$270 ($mux).
Mapping b05.$verific$mux_101$b05.vhd:156$271 ($mux).
Mapping b05.$verific$mux_102$b05.vhd:156$272 ($mux).
Mapping b05.$verific$mux_103$b05.vhd:157$273 ($mux).
Mapping b05.$verific$mux_104$b05.vhd:157$274 ($mux).
Mapping b05.$verific$mux_105$b05.vhd:158$275 ($mux).
Mapping b05.$verific$mux_106$b05.vhd:158$276 ($mux).
Mapping b05.$verific$mux_107$b05.vhd:159$277 ($mux).
Mapping b05.$verific$mux_108$b05.vhd:159$278 ($mux).
Mapping b05.$verific$mux_128$b05.vhd:188$288 ($mux).
Mapping b05.$verific$mux_129$b05.vhd:189$289 ($mux).
Mapping b05.$verific$mux_130$b05.vhd:190$290 ($mux).
Mapping b05.$verific$mux_131$b05.vhd:191$291 ($mux).
Mapping b05.$verific$mux_132$b05.vhd:192$292 ($mux).
Mapping b05.$verific$mux_133$b05.vhd:193$293 ($mux).
Mapping b05.$verific$mux_134$b05.vhd:194$294 ($mux).
Mapping b05.$verific$mux_135$b05.vhd:195$295 ($mux).
Mapping b05.$verific$mux_136$b05.vhd:196$296 ($mux).
Mapping b05.$verific$mux_142$b05.vhd:202$299 ($mux).
Mapping b05.$verific$mux_143$b05.vhd:202$300 ($mux).
Mapping b05.$verific$mux_163$b05.vhd:231$311 ($mux).
Mapping b05.$verific$mux_164$b05.vhd:232$312 ($mux).
Mapping b05.$verific$mux_165$b05.vhd:233$313 ($mux).
Mapping b05.$verific$mux_166$b05.vhd:234$314 ($mux).
Mapping b05.$verific$mux_167$b05.vhd:235$315 ($mux).
Mapping b05.$verific$mux_168$b05.vhd:236$316 ($mux).
Mapping b05.$verific$mux_169$b05.vhd:237$317 ($mux).
Mapping b05.$verific$mux_170$b05.vhd:238$318 ($mux).
Mapping b05.$verific$mux_171$b05.vhd:239$319 ($mux).
Mapping b05.$verific$mux_172$b05.vhd:240$320 ($mux).
Mapping b05.$verific$mux_173$b05.vhd:240$321 ($mux).
Mapping b05.$verific$mux_174$b05.vhd:240$322 ($mux).
Mapping b05.$verific$mux_175$b05.vhd:240$323 ($mux).
Mapping b05.$verific$mux_176$b05.vhd:240$324 ($mux).
Mapping b05.$verific$mux_180$b05.vhd:241$326 ($mux).
Mapping b05.$verific$mux_181$b05.vhd:241$327 ($mux).
Mapping b05.$verific$mux_182$b05.vhd:241$328 ($mux).
Mapping b05.$verific$mux_183$b05.vhd:241$329 ($mux).
Mapping b05.$verific$mux_184$b05.vhd:241$330 ($mux).
Mapping b05.$verific$mux_3$b05.vhd:60$182 ($bmux).
Mapping b05.$verific$mux_347$b05.vhd:274$339 ($mux).
Mapping b05.$verific$mux_348$b05.vhd:274$340 ($mux).
Mapping b05.$verific$mux_361$b05.vhd:284$349 ($mux).
Mapping b05.$verific$mux_364$b05.vhd:289$350 ($mux).
Mapping b05.$verific$mux_366$b05.vhd:291$351 ($mux).
Mapping b05.$verific$mux_369$b05.vhd:292$354 ($mux).
Mapping b05.$verific$mux_370$b05.vhd:292$355 ($mux).
Mapping b05.$verific$mux_378$b05.vhd:306$361 ($mux).
Mapping b05.$verific$mux_380$b05.vhd:306$363 ($mux).
Mapping b05.$verific$mux_383$b05.vhd:307$366 ($bmux).
Mapping b05.$verific$mux_384$b05.vhd:307$367 ($bmux).
Mapping b05.$verific$mux_385$b05.vhd:307$368 ($bmux).
Mapping b05.$verific$mux_387$b05.vhd:307$370 ($bmux).
Mapping b05.$verific$mux_388$b05.vhd:307$371 ($bmux).
Mapping b05.$verific$mux_403$b05.vhd:293$356 ($bmux).
Mapping b05.$verific$mux_46$b05.vhd:107$219 ($mux).
Mapping b05.$verific$mux_52$b05.vhd:113$224 ($mux).
Mapping b05.$verific$mux_53$b05.vhd:113$225 ($mux).
Mapping b05.$verific$mux_91$b05.vhd:151$261 ($mux).
Mapping b05.$verific$mux_92$b05.vhd:151$262 ($mux).
Mapping b05.$verific$mux_93$b05.vhd:152$263 ($mux).
Mapping b05.$verific$mux_94$b05.vhd:152$264 ($mux).
Mapping b05.$verific$mux_95$b05.vhd:153$265 ($mux).
Mapping b05.$verific$mux_96$b05.vhd:153$266 ($mux).
Mapping b05.$verific$mux_97$b05.vhd:154$267 ($mux).
Mapping b05.$verific$mux_98$b05.vhd:154$268 ($mux).
Mapping b05.$verific$mux_99$b05.vhd:155$269 ($mux).

24. Executing OPT_EXPR pass (perform const folding).
Optimizing module b05.
<suppressed ~543 debug messages>

25. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b05'.
<suppressed ~1134 debug messages>
Removed a total of 378 cells.

26. Executing OPT_DFF pass (perform DFF optimizations).

27. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b05..
Removed 2 unused cells and 55 unused wires.
<suppressed ~3 debug messages>

28. Executing OPT pass (performing simple optimizations).

28.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b05.
<suppressed ~13 debug messages>

28.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b05'.
Removed a total of 0 cells.

28.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b05..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

28.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b05.
Performed a total of 0 changes.

28.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b05'.
Removed a total of 0 cells.

28.6. Executing OPT_DFF pass (perform DFF optimizations).

28.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b05..

28.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module b05.

28.9. Finished OPT passes. (There is nothing left to do.)

29. Executing OPT pass (performing simple optimizations).

29.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b05.
<suppressed ~179 debug messages>

29.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b05'.
<suppressed ~105 debug messages>
Removed a total of 35 cells.

29.3. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $auto$ff.cc:262:slice$1188 ($_DFF_PP0_) from module b05 (D = $auto$simplemap.cc:309:simplemap_bmux$2072 [8], Q = \TEMP [8]).
Adding EN signal on $auto$ff.cc:262:slice$1187 ($_DFF_PP0_) from module b05 (D = $auto$simplemap.cc:309:simplemap_bmux$2072 [7], Q = \TEMP [7]).
Adding EN signal on $auto$ff.cc:262:slice$1186 ($_DFF_PP0_) from module b05 (D = $auto$simplemap.cc:309:simplemap_bmux$2072 [6], Q = \TEMP [6]).
Adding EN signal on $auto$ff.cc:262:slice$1185 ($_DFF_PP0_) from module b05 (D = $auto$simplemap.cc:309:simplemap_bmux$2072 [5], Q = \TEMP [5]).
Adding EN signal on $auto$ff.cc:262:slice$1184 ($_DFF_PP0_) from module b05 (D = $auto$simplemap.cc:309:simplemap_bmux$2072 [4], Q = \TEMP [4]).
Adding EN signal on $auto$ff.cc:262:slice$1183 ($_DFF_PP0_) from module b05 (D = $auto$simplemap.cc:309:simplemap_bmux$2072 [3], Q = \TEMP [3]).
Adding EN signal on $auto$ff.cc:262:slice$1182 ($_DFF_PP0_) from module b05 (D = $auto$simplemap.cc:309:simplemap_bmux$2072 [2], Q = \TEMP [2]).
Adding EN signal on $auto$ff.cc:262:slice$1181 ($_DFF_PP0_) from module b05 (D = $auto$simplemap.cc:309:simplemap_bmux$2072 [1], Q = \TEMP [1]).
Adding EN signal on $auto$ff.cc:262:slice$1180 ($_DFF_PP0_) from module b05 (D = $auto$simplemap.cc:309:simplemap_bmux$2072 [0], Q = \TEMP [0]).
Adding EN signal on $auto$ff.cc:262:slice$1176 ($_DFF_PP0_) from module b05 (D = $auto$simplemap.cc:309:simplemap_bmux$1154, Q = \RES_DISP).
Adding EN signal on $auto$ff.cc:262:slice$1175 ($_DFF_PP0_) from module b05 (D = $auto$simplemap.cc:309:simplemap_bmux$1906 [4], Q = \NUM [4]).
Adding EN signal on $auto$ff.cc:262:slice$1174 ($_DFF_PP0_) from module b05 (D = $auto$simplemap.cc:309:simplemap_bmux$1906 [3], Q = \NUM [3]).
Adding EN signal on $auto$ff.cc:262:slice$1173 ($_DFF_PP0_) from module b05 (D = $auto$simplemap.cc:309:simplemap_bmux$1906 [2], Q = \NUM [2]).
Adding EN signal on $auto$ff.cc:262:slice$1172 ($_DFF_PP0_) from module b05 (D = $auto$simplemap.cc:309:simplemap_bmux$1906 [1], Q = \NUM [1]).
Adding EN signal on $auto$ff.cc:262:slice$1171 ($_DFF_PP0_) from module b05 (D = $auto$simplemap.cc:309:simplemap_bmux$1906 [0], Q = \NUM [0]).
Adding EN signal on $auto$ff.cc:262:slice$1145 ($_DFF_PP0_) from module b05 (D = $auto$simplemap.cc:309:simplemap_bmux$2006 [8], Q = \MAX [8]).
Adding EN signal on $auto$ff.cc:262:slice$1144 ($_DFF_PP0_) from module b05 (D = $auto$simplemap.cc:309:simplemap_bmux$2006 [7], Q = \MAX [7]).
Adding EN signal on $auto$ff.cc:262:slice$1143 ($_DFF_PP0_) from module b05 (D = $auto$simplemap.cc:309:simplemap_bmux$2006 [6], Q = \MAX [6]).
Adding EN signal on $auto$ff.cc:262:slice$1142 ($_DFF_PP0_) from module b05 (D = $auto$simplemap.cc:309:simplemap_bmux$2006 [5], Q = \MAX [5]).
Adding EN signal on $auto$ff.cc:262:slice$1141 ($_DFF_PP0_) from module b05 (D = $auto$simplemap.cc:309:simplemap_bmux$2006 [4], Q = \MAX [4]).
Adding EN signal on $auto$ff.cc:262:slice$1140 ($_DFF_PP0_) from module b05 (D = $auto$simplemap.cc:309:simplemap_bmux$2006 [3], Q = \MAX [3]).
Adding EN signal on $auto$ff.cc:262:slice$1139 ($_DFF_PP0_) from module b05 (D = $auto$simplemap.cc:309:simplemap_bmux$2006 [2], Q = \MAX [2]).
Adding EN signal on $auto$ff.cc:262:slice$1138 ($_DFF_PP0_) from module b05 (D = $auto$simplemap.cc:309:simplemap_bmux$2006 [1], Q = \MAX [1]).
Adding EN signal on $auto$ff.cc:262:slice$1137 ($_DFF_PP0_) from module b05 (D = $auto$simplemap.cc:309:simplemap_bmux$2006 [0], Q = \MAX [0]).
Adding EN signal on $auto$ff.cc:262:slice$1136 ($_DFF_PP0_) from module b05 (D = $auto$simplemap.cc:309:simplemap_bmux$1944 [4], Q = \MAR [4]).
Adding EN signal on $auto$ff.cc:262:slice$1135 ($_DFF_PP0_) from module b05 (D = $auto$simplemap.cc:309:simplemap_bmux$1944 [3], Q = \MAR [3]).
Adding EN signal on $auto$ff.cc:262:slice$1134 ($_DFF_PP0_) from module b05 (D = $auto$simplemap.cc:309:simplemap_bmux$1944 [2], Q = \MAR [2]).
Adding EN signal on $auto$ff.cc:262:slice$1133 ($_DFF_PP0_) from module b05 (D = $auto$simplemap.cc:309:simplemap_bmux$1944 [1], Q = \MAR [1]).
Adding EN signal on $auto$ff.cc:262:slice$1132 ($_DFF_PP0_) from module b05 (D = $auto$simplemap.cc:309:simplemap_bmux$1944 [0], Q = \MAR [0]).
Adding EN signal on $auto$ff.cc:262:slice$1131 ($_DFF_PP0_) from module b05 (D = $auto$simplemap.cc:309:simplemap_bmux$1169, Q = \FLAG).
Adding EN signal on $auto$ff.cc:262:slice$1130 ($_DFF_PP0_) from module b05 (D = $auto$simplemap.cc:309:simplemap_bmux$1164, Q = \EN_DISP).

29.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b05..
Removed 27 unused cells and 224 unused wires.
<suppressed ~28 debug messages>

29.5. Rerunning OPT passes. (Removed registers in this run.)

29.6. Executing OPT_EXPR pass (perform const folding).
Optimizing module b05.
<suppressed ~484 debug messages>

29.7. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b05'.
<suppressed ~1344 debug messages>
Removed a total of 448 cells.

29.8. Executing OPT_DFF pass (perform DFF optimizations).

29.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b05..
Removed 0 unused cells and 512 unused wires.
<suppressed ~1 debug messages>

29.10. Finished fast OPT passes.

30. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

31. Executing OPT pass (performing simple optimizations).

31.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b05.
<suppressed ~11 debug messages>

31.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b05'.
Removed a total of 0 cells.

31.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b05..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

31.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b05.
Performed a total of 0 changes.

31.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b05'.
Removed a total of 0 cells.

31.6. Executing OPT_SHARE pass.

31.7. Executing OPT_DFF pass (perform DFF optimizations).

31.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b05..

31.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module b05.

31.10. Finished OPT passes. (There is nothing left to do.)

32. Executing TECHMAP pass (map to technology primitives).

32.1. Executing Verilog-2005 frontend: /home/users/aram/Workspace/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/aram/Workspace/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

32.2. Continuing TECHMAP pass.
Using template $paramod$dfca81329cbbac01700318224209a5f2318c7128\_90_alu for cells of type $alu.
Using template $paramod$a40b3a69ab2154dca9743e30e1e84efb03b892b4\_90_alu for cells of type $alu.
Using template $paramod$d2fa05d38998afabc6d4f34471305d0af4b8b2df\_90_alu for cells of type $alu.
Using template $paramod$adbaf76fa5a3091a329503792521395f8ff4d1a4\_90_alu for cells of type $alu.
Using template $paramod$2ab0ff81670440372478bad90d3da37d43208ad1\_90_alu for cells of type $alu.
Using template $paramod$8b1a36ab2238111d2a0f4cb4ef2e14f2a55fc1f9\_90_alu for cells of type $alu.
Using template $paramod$15a3b70ea5534c0cc298fa6d405a538b5f71cb9e\_90_alu for cells of type $alu.
Using template $paramod$5d2e07eca6b9fbd538aff231e6f05d9604b7a77e\_90_alu for cells of type $alu.
Using template $paramod$68eb2ee261b49d479fb9d9ec0659e1d20891082b\_90_alu for cells of type $alu.
Using template $paramod$50421b562f8eb1318d93ca56f0d931d9bef85d75\_90_alu for cells of type $alu.
Using template $paramod$df9553132937e7736c5a38f2f1f29abeed1637af\_90_alu for cells of type $alu.
Using template $paramod$4504179771182265d0fe43701f70377fc04ca361\_90_alu for cells of type $alu.
Using template $paramod$9f3f81d189a6b1d5c738a580270bbb92e45c5c71\_90_alu for cells of type $alu.
Using template $paramod$672a140277c71df8314410f22acc08d55222c3c7\_90_alu for cells of type $alu.
Using template $paramod$e04283ca12514baf3d204c6994bec8f178dd89f8\_90_alu for cells of type $alu.
Using template $paramod$78464f9f65d57061f7490f3fe5dd257e4a61e2b7\_90_alu for cells of type $alu.
Using template $paramod$c4905825bb8ecc38b98eb4167e8b007447af7884\_90_alu for cells of type $alu.
Using template $paramod$1a3a0c35c4a4896fbfd612699525c057298e72d2\_90_alu for cells of type $alu.
Using template $paramod$79fc7abbb3333dbd5736999d565fd903198fb1eb\_90_alu for cells of type $alu.
Using template $paramod$83dd457849c736323edf2edb15923eb27f99c683\_90_alu for cells of type $alu.
Using template $paramod$d4760b7db19732bc184e1f25461b32f5548a347a\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001000 for cells of type $lcu.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000011 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000111 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000001 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000101 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001001 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000110 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000100 for cells of type $lcu.
Using extmapper simplemap for cells of type $or.
No more expansions possible.
<suppressed ~2734 debug messages>

33. Executing OPT pass (performing simple optimizations).

33.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b05.
<suppressed ~1658 debug messages>

33.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b05'.
<suppressed ~1677 debug messages>
Removed a total of 559 cells.

33.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b05..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

33.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b05.
Performed a total of 0 changes.

33.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b05'.
Removed a total of 0 cells.

33.6. Executing OPT_DFF pass (perform DFF optimizations).

33.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b05..
Removed 343 unused cells and 2059 unused wires.
<suppressed ~344 debug messages>

33.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module b05.
<suppressed ~4 debug messages>

33.9. Rerunning OPT passes. (Maybe there is more to do..)

33.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b05..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

33.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b05.
Performed a total of 0 changes.

33.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b05'.
<suppressed ~39 debug messages>
Removed a total of 13 cells.

33.13. Executing OPT_DFF pass (perform DFF optimizations).

33.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b05..
Removed 0 unused cells and 7 unused wires.
<suppressed ~1 debug messages>

33.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module b05.

33.16. Rerunning OPT passes. (Maybe there is more to do..)

33.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b05..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

33.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b05.
Performed a total of 0 changes.

33.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b05'.
Removed a total of 0 cells.

33.20. Executing OPT_DFF pass (perform DFF optimizations).

33.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b05..

33.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module b05.

33.23. Finished OPT passes. (There is nothing left to do.)

34. Executing ABC pass (technology mapping using ABC).

34.1. Extracting gate netlist of module `\b05' to `<abc-temp-dir>/input.blif'..
Extracted 866 gates and 903 wires to a netlist network with 35 inputs and 57 outputs.

34.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + source /home/users/aram/Workspace/yosys_verific_rs/scripts/synth/abc/abc_base6.a21.scr 
ABC: netlist  : i/o =     35/     57  and =     618  lev =   31 (6.93)  mem = 0.01 MB
ABC: Mapping (K=6)  :  lut =     85  edge =     359  lev =    8 (1.88)  mem = 0.00 MB
ABC: netlist  : i/o =     35/     57  and =     652  lev =   30 (6.61)  mem = 0.01 MB
ABC: Mapping (K=6)  :  lut =     76  edge =     347  lev =    7 (1.74)  mem = 0.00 MB
ABC: netlist  : i/o =     35/     57  and =     652  lev =   29 (6.61)  mem = 0.01 MB
ABC: Mapping (K=6)  :  lut =     76  edge =     347  lev =    7 (1.74)  mem = 0.00 MB
ABC: netlist  : i/o =     35/     57  and =     618  lev =   30 (6.33)  mem = 0.01 MB
ABC: Mapping (K=6)  :  lut =     75  edge =     346  lev =    6 (1.72)  mem = 0.00 MB
ABC: netlist  : i/o =     35/     57  and =     638  lev =   29 (6.60)  mem = 0.01 MB
ABC: Mapping (K=6)  :  lut =     75  edge =     343  lev =    6 (1.79)  mem = 0.00 MB
ABC: netlist  : i/o =     35/     57  and =     640  lev =   29 (6.61)  mem = 0.01 MB
ABC: Mapping (K=6)  :  lut =     75  edge =     343  lev =    6 (1.77)  mem = 0.00 MB
ABC: netlist  : i/o =     35/     57  and =     640  lev =   29 (6.61)  mem = 0.01 MB
ABC: Mapping (K=6)  :  lut =     75  edge =     343  lev =    6 (1.77)  mem = 0.00 MB
ABC: netlist  : i/o =     35/     57  and =     640  lev =   29 (6.61)  mem = 0.01 MB
ABC: Mapping (K=6)  :  lut =     75  edge =     343  lev =    6 (1.77)  mem = 0.00 MB
ABC: netlist  : i/o =     35/     57  and =     602  lev =   25 (5.82)  mem = 0.01 MB
ABC: Mapping (K=6)  :  lut =     76  edge =     344  lev =    7 (1.84)  mem = 0.00 MB
ABC: netlist  : i/o =     35/     57  and =     640  lev =   29 (6.60)  mem = 0.01 MB
ABC: Mapping (K=6)  :  lut =     75  edge =     343  lev =    6 (1.77)  mem = 0.00 MB
ABC: netlist  : i/o =     35/     57  and =     640  lev =   29 (6.61)  mem = 0.01 MB
ABC: Mapping (K=6)  :  lut =     75  edge =     343  lev =    6 (1.77)  mem = 0.00 MB
ABC: netlist  : i/o =     35/     57  and =     636  lev =   29 (6.61)  mem = 0.01 MB
ABC: Mapping (K=6)  :  lut =     75  edge =     344  lev =    6 (1.77)  mem = 0.00 MB
ABC: netlist  : i/o =     35/     57  and =     638  lev =   29 (6.61)  mem = 0.01 MB
ABC: Mapping (K=6)  :  lut =     75  edge =     344  lev =    7 (1.79)  mem = 0.00 MB
ABC: netlist  : i/o =     35/     57  and =     618  lev =   30 (6.33)  mem = 0.01 MB
ABC: Mapping (K=6)  :  lut =     75  edge =     346  lev =    6 (1.72)  mem = 0.00 MB
ABC: netlist  : i/o =     35/     57  and =     618  lev =   30 (6.33)  mem = 0.01 MB
ABC: Mapping (K=6)  :  lut =     75  edge =     346  lev =    6 (1.72)  mem = 0.00 MB
ABC: netlist  : i/o =     35/     57  and =     652  lev =   29 (6.61)  mem = 0.01 MB
ABC: Mapping (K=6)  :  lut =     75  edge =     346  lev =    6 (1.72)  mem = 0.00 MB
ABC: + write_blif <abc-temp-dir>/output.blif 

34.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:       77
ABC RESULTS:        internal signals:      811
ABC RESULTS:           input signals:       35
ABC RESULTS:          output signals:       57
Removing temp directory.

35. Executing OPT pass (performing simple optimizations).

35.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b05.

35.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b05'.
Removed a total of 0 cells.

35.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b05..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

35.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b05.
Performed a total of 0 changes.

35.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b05'.
Removed a total of 0 cells.

35.6. Executing OPT_DFF pass (perform DFF optimizations).

35.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b05..
Removed 0 unused cells and 468 unused wires.
<suppressed ~4 debug messages>

35.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module b05.

35.9. Rerunning OPT passes. (Maybe there is more to do..)

35.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b05..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

35.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b05.
Performed a total of 0 changes.

35.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b05'.
Removed a total of 0 cells.

35.13. Executing OPT_DFF pass (perform DFF optimizations).

35.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b05..

35.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module b05.

35.16. Finished OPT passes. (There is nothing left to do.)

36. Executing HIERARCHY pass (managing design hierarchy).

36.1. Analyzing design hierarchy..
Top module:  \b05

36.2. Analyzing design hierarchy..
Top module:  \b05
Removed 0 unused modules.

37. Printing statistics.

=== b05 ===

   Number of wires:                 62
   Number of wire bits:            131
   Number of public wires:          18
   Number of public wire bits:      79
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                110
     $_DFFE_PP0P_                   31
     $_DFF_PP0_                      3
     $lut                           76

38. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b05..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

39. Executing BLIF backend.

Warnings: 1 unique messages, 1 total
End of script. Logfile hash: 2a74341c16, CPU: user 2.19s system 0.04s, MEM: 38.66 MB peak
Yosys 0.14+36 (git sha1 15a4e900b, gcc 7.1.0 -fPIC -Os)
Time spent: 38% 1x abc (1 sec), 24% 41x opt_expr (0 sec), ...
