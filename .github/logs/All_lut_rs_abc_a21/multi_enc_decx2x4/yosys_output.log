
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.14+36 (git sha1 15a4e900b, gcc 7.1.0 -fPIC -Os)


-- Executing script file `yosys.ys' --

1. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Jan22_SW_Release, released at Sat Jan 29 02:42:49 2022.

2. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Jan22_SW_Release, released at Sat Jan 29 02:42:49 2022.
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'decoder.v'
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'encoder.v'
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'multi_enc_decx2x4.v'
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'topenc_decx2.v'

3. Executing HIERARCHY pass (managing design hierarchy).
VERIFIC-INFO [VERI-1018] topenc_decx2.v:2: compiling module 'top'
VERIFIC-INFO [VERI-1018] encoder.v:1: compiling module 'encoder128'
VERIFIC-INFO [VERI-1018] decoder.v:1: compiling module 'decoder128'
Importing module top.
Importing module encoder128.
Importing module decoder128.

3.1. Analyzing design hierarchy..
Top module:  \top
Used module:     \decoder128
Used module:     \encoder128

3.2. Analyzing design hierarchy..
Top module:  \top
Used module:     \decoder128
Used module:     \encoder128
Removed 0 unused modules.

4. Executing PROC pass (convert processes to netlists).

4.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

4.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

4.4. Executing PROC_INIT pass (extract init attributes).

4.5. Executing PROC_ARST pass (detect async resets in processes).

4.6. Executing PROC_MUX pass (convert decision trees to multiplexers).

4.7. Executing PROC_DLATCH pass (convert process syncs to latches).

4.8. Executing PROC_DFF pass (convert process syncs to FFs).

4.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

4.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module decoder128.
<suppressed ~1 debug messages>
Optimizing module encoder128.
<suppressed ~1 debug messages>
Optimizing module top.

5. Executing FLATTEN pass (flatten design).
Deleting now unused module decoder128.
Deleting now unused module encoder128.
<suppressed ~4 debug messages>

6. Executing TRIBUF pass.

7. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 1072 unused wires.
<suppressed ~5 debug messages>

9. Executing CHECK pass (checking for obvious problems).
Checking module top...
Found and reported 0 problems.

10. Executing DEMINOUT pass (demote inout ports to input or output).

11. Executing OPT pass (performing simple optimizations).

11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

11.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

11.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
    New ctrl vector for $pmux cell $flatten\U01.$verific$select_261$encoder.v:147$962: { $flatten\U01.$verific$n1037$572 $flatten\U01.$verific$n1038$573 $flatten\U01.$verific$n1039$574 $flatten\U01.$verific$n1040$575 $flatten\U01.$verific$n1041$576 $flatten\U01.$verific$n1042$577 $flatten\U01.$verific$n1043$578 $flatten\U01.$verific$n1045$580 $flatten\U01.$verific$n1046$581 $flatten\U01.$verific$n1047$582 $auto$opt_reduce.cc:134:opt_pmux$1113 $flatten\U01.$verific$n1049$584 $flatten\U01.$verific$n1050$585 $flatten\U01.$verific$n1051$586 $flatten\U01.$verific$n1052$587 $flatten\U01.$verific$n1053$588 $flatten\U01.$verific$n1054$589 $flatten\U01.$verific$n1055$590 $flatten\U01.$verific$n1056$591 $flatten\U01.$verific$n1057$592 $flatten\U01.$verific$n1058$593 $flatten\U01.$verific$n1059$594 $flatten\U01.$verific$n1061$596 $flatten\U01.$verific$n1062$597 $flatten\U01.$verific$n1063$598 $auto$opt_reduce.cc:134:opt_pmux$1111 $flatten\U01.$verific$n1065$600 $flatten\U01.$verific$n1066$601 $flatten\U01.$verific$n1067$602 $flatten\U01.$verific$n1068$603 $flatten\U01.$verific$n1069$604 $flatten\U01.$verific$n1070$605 $flatten\U01.$verific$n1071$606 $flatten\U01.$verific$n1072$607 $flatten\U01.$verific$n1073$608 $flatten\U01.$verific$n1074$609 $flatten\U01.$verific$n1075$610 $flatten\U01.$verific$n1077$612 $flatten\U01.$verific$n1078$613 $flatten\U01.$verific$n1079$614 $auto$opt_reduce.cc:134:opt_pmux$1109 $flatten\U01.$verific$n1081$616 $flatten\U01.$verific$n1082$617 $flatten\U01.$verific$n1083$618 $flatten\U01.$verific$n1084$619 $flatten\U01.$verific$n1085$620 $flatten\U01.$verific$n1086$621 $flatten\U01.$verific$n1087$622 $flatten\U01.$verific$n1088$623 $flatten\U01.$verific$n1089$624 $flatten\U01.$verific$n1090$625 $flatten\U01.$verific$n1091$626 $flatten\U01.$verific$n1093$628 $flatten\U01.$verific$n1094$629 $flatten\U01.$verific$n1095$630 $auto$opt_reduce.cc:134:opt_pmux$1107 $flatten\U01.$verific$n1097$632 $flatten\U01.$verific$n1098$633 $flatten\U01.$verific$n1099$634 $flatten\U01.$verific$n1100$635 $flatten\U01.$verific$n1101$636 $flatten\U01.$verific$n1102$637 $flatten\U01.$verific$n1103$638 $flatten\U01.$verific$n1104$639 $flatten\U01.$verific$n1105$640 $flatten\U01.$verific$n1106$641 $flatten\U01.$verific$n1107$642 $flatten\U01.$verific$n1109$644 $flatten\U01.$verific$n1110$645 $flatten\U01.$verific$n1111$646 $auto$opt_reduce.cc:134:opt_pmux$1105 $flatten\U01.$verific$n1113$648 $flatten\U01.$verific$n1114$649 $flatten\U01.$verific$n1115$650 $flatten\U01.$verific$n1116$651 $flatten\U01.$verific$n1117$652 $flatten\U01.$verific$n1118$653 $flatten\U01.$verific$n1119$654 $flatten\U01.$verific$n1120$655 $flatten\U01.$verific$n1121$656 $flatten\U01.$verific$n1122$657 $flatten\U01.$verific$n1123$658 $flatten\U01.$verific$n1125$660 $flatten\U01.$verific$n1126$661 $flatten\U01.$verific$n1127$662 $auto$opt_reduce.cc:134:opt_pmux$1103 $flatten\U01.$verific$n1129$664 $flatten\U01.$verific$n1130$665 $flatten\U01.$verific$n1131$666 $flatten\U01.$verific$n1132$667 $flatten\U01.$verific$n1133$668 $flatten\U01.$verific$n1134$669 $flatten\U01.$verific$n1135$670 $flatten\U01.$verific$n1136$671 $flatten\U01.$verific$n1137$672 $flatten\U01.$verific$n1138$673 $flatten\U01.$verific$n1139$674 $flatten\U01.$verific$n1141$676 $flatten\U01.$verific$n1142$677 $flatten\U01.$verific$n1143$678 $auto$opt_reduce.cc:134:opt_pmux$1101 $flatten\U01.$verific$n1145$680 $flatten\U01.$verific$n1146$681 $flatten\U01.$verific$n1147$682 $flatten\U01.$verific$n1148$683 $flatten\U01.$verific$n1149$684 $flatten\U01.$verific$n1150$685 $flatten\U01.$verific$n1151$686 $flatten\U01.$verific$n1152$687 $flatten\U01.$verific$n1153$688 $flatten\U01.$verific$n1154$689 $flatten\U01.$verific$n1155$690 $flatten\U01.$verific$n1157$692 $flatten\U01.$verific$n1158$693 $flatten\U01.$verific$n1159$694 $auto$opt_reduce.cc:134:opt_pmux$1099 $flatten\U01.$verific$n1161$696 $flatten\U01.$verific$n1162$697 $flatten\U01.$verific$n1163$698 }
    New ctrl vector for $pmux cell $flatten\U011.$verific$select_261$encoder.v:147$962: { $flatten\U011.$verific$n1037$572 $flatten\U011.$verific$n1038$573 $flatten\U011.$verific$n1039$574 $flatten\U011.$verific$n1040$575 $flatten\U011.$verific$n1041$576 $flatten\U011.$verific$n1042$577 $flatten\U011.$verific$n1043$578 $flatten\U011.$verific$n1045$580 $flatten\U011.$verific$n1046$581 $flatten\U011.$verific$n1047$582 $auto$opt_reduce.cc:134:opt_pmux$1129 $flatten\U011.$verific$n1049$584 $flatten\U011.$verific$n1050$585 $flatten\U011.$verific$n1051$586 $flatten\U011.$verific$n1052$587 $flatten\U011.$verific$n1053$588 $flatten\U011.$verific$n1054$589 $flatten\U011.$verific$n1055$590 $flatten\U011.$verific$n1056$591 $flatten\U011.$verific$n1057$592 $flatten\U011.$verific$n1058$593 $flatten\U011.$verific$n1059$594 $flatten\U011.$verific$n1061$596 $flatten\U011.$verific$n1062$597 $flatten\U011.$verific$n1063$598 $auto$opt_reduce.cc:134:opt_pmux$1127 $flatten\U011.$verific$n1065$600 $flatten\U011.$verific$n1066$601 $flatten\U011.$verific$n1067$602 $flatten\U011.$verific$n1068$603 $flatten\U011.$verific$n1069$604 $flatten\U011.$verific$n1070$605 $flatten\U011.$verific$n1071$606 $flatten\U011.$verific$n1072$607 $flatten\U011.$verific$n1073$608 $flatten\U011.$verific$n1074$609 $flatten\U011.$verific$n1075$610 $flatten\U011.$verific$n1077$612 $flatten\U011.$verific$n1078$613 $flatten\U011.$verific$n1079$614 $auto$opt_reduce.cc:134:opt_pmux$1125 $flatten\U011.$verific$n1081$616 $flatten\U011.$verific$n1082$617 $flatten\U011.$verific$n1083$618 $flatten\U011.$verific$n1084$619 $flatten\U011.$verific$n1085$620 $flatten\U011.$verific$n1086$621 $flatten\U011.$verific$n1087$622 $flatten\U011.$verific$n1088$623 $flatten\U011.$verific$n1089$624 $flatten\U011.$verific$n1090$625 $flatten\U011.$verific$n1091$626 $flatten\U011.$verific$n1093$628 $flatten\U011.$verific$n1094$629 $flatten\U011.$verific$n1095$630 $auto$opt_reduce.cc:134:opt_pmux$1123 $flatten\U011.$verific$n1097$632 $flatten\U011.$verific$n1098$633 $flatten\U011.$verific$n1099$634 $flatten\U011.$verific$n1100$635 $flatten\U011.$verific$n1101$636 $flatten\U011.$verific$n1102$637 $flatten\U011.$verific$n1103$638 $flatten\U011.$verific$n1104$639 $flatten\U011.$verific$n1105$640 $flatten\U011.$verific$n1106$641 $flatten\U011.$verific$n1107$642 $flatten\U011.$verific$n1109$644 $flatten\U011.$verific$n1110$645 $flatten\U011.$verific$n1111$646 $auto$opt_reduce.cc:134:opt_pmux$1121 $flatten\U011.$verific$n1113$648 $flatten\U011.$verific$n1114$649 $flatten\U011.$verific$n1115$650 $flatten\U011.$verific$n1116$651 $flatten\U011.$verific$n1117$652 $flatten\U011.$verific$n1118$653 $flatten\U011.$verific$n1119$654 $flatten\U011.$verific$n1120$655 $flatten\U011.$verific$n1121$656 $flatten\U011.$verific$n1122$657 $flatten\U011.$verific$n1123$658 $flatten\U011.$verific$n1125$660 $flatten\U011.$verific$n1126$661 $flatten\U011.$verific$n1127$662 $auto$opt_reduce.cc:134:opt_pmux$1119 $flatten\U011.$verific$n1129$664 $flatten\U011.$verific$n1130$665 $flatten\U011.$verific$n1131$666 $flatten\U011.$verific$n1132$667 $flatten\U011.$verific$n1133$668 $flatten\U011.$verific$n1134$669 $flatten\U011.$verific$n1135$670 $flatten\U011.$verific$n1136$671 $flatten\U011.$verific$n1137$672 $flatten\U011.$verific$n1138$673 $flatten\U011.$verific$n1139$674 $flatten\U011.$verific$n1141$676 $flatten\U011.$verific$n1142$677 $flatten\U011.$verific$n1143$678 $auto$opt_reduce.cc:134:opt_pmux$1117 $flatten\U011.$verific$n1145$680 $flatten\U011.$verific$n1146$681 $flatten\U011.$verific$n1147$682 $flatten\U011.$verific$n1148$683 $flatten\U011.$verific$n1149$684 $flatten\U011.$verific$n1150$685 $flatten\U011.$verific$n1151$686 $flatten\U011.$verific$n1152$687 $flatten\U011.$verific$n1153$688 $flatten\U011.$verific$n1154$689 $flatten\U011.$verific$n1155$690 $flatten\U011.$verific$n1157$692 $flatten\U011.$verific$n1158$693 $flatten\U011.$verific$n1159$694 $auto$opt_reduce.cc:134:opt_pmux$1115 $flatten\U011.$verific$n1161$696 $flatten\U011.$verific$n1162$697 $flatten\U011.$verific$n1163$698 }
  Optimizing cells in module \top.
Performed a total of 2 changes.

11.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

11.6. Executing OPT_DFF pass (perform DFF optimizations).
Removing never-active async load on $verific$data_encout_reg$topenc_decx2.v:62$562 ($aldff) from module top.
Removing never-active async load on $verific$data_encout1_reg$topenc_decx2.v:95$567 ($aldff) from module top.
Removing never-active async load on $verific$data_encin_reg$topenc_decx2.v:46$559 ($aldff) from module top.
Removing never-active async load on $verific$data_encin1_reg$topenc_decx2.v:79$565 ($aldff) from module top.

11.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 6 unused cells and 6 unused wires.
<suppressed ~7 debug messages>

11.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

11.9. Rerunning OPT passes. (Maybe there is more to do..)

11.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

11.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

11.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

11.13. Executing OPT_DFF pass (perform DFF optimizations).

11.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

11.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

11.16. Finished OPT passes. (There is nothing left to do.)

12. Executing FSM pass (extract and optimize FSM).

12.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking top.data_encout as FSM state register:
    Users of register don't seem to benefit from recoding.
Not marking top.data_encout1 as FSM state register:
    Users of register don't seem to benefit from recoding.

12.2. Executing FSM_EXTRACT pass (extracting FSM from design).

12.3. Executing FSM_OPT pass (simple optimizations of FSMs).

12.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

12.5. Executing FSM_OPT pass (simple optimizations of FSMs).

12.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

12.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

12.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

13. Executing OPT pass (performing simple optimizations).

13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

13.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $verific$data_encout_reg$topenc_decx2.v:62$562 ($dff) from module top (D = \U01.dataout, Q = \data_encout, rval = 7'0000000).
Adding SRST signal on $verific$data_encout1_reg$topenc_decx2.v:95$567 ($dff) from module top (D = \U011.dataout, Q = \data_encout1, rval = 7'0000000).
Adding SRST signal on $verific$data_encin_reg$topenc_decx2.v:46$559 ($dff) from module top (D = \datain, Q = \data_encin, rval = 128'00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000).
Adding SRST signal on $verific$data_encin1_reg$topenc_decx2.v:79$565 ($dff) from module top (D = \datain1, Q = \data_encin1, rval = 128'00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000).

13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 4 unused cells and 4 unused wires.
<suppressed ~5 debug messages>

13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

13.9. Rerunning OPT passes. (Maybe there is more to do..)

13.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

13.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

13.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

13.13. Executing OPT_DFF pass (perform DFF optimizations).

13.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

13.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

13.16. Finished OPT passes. (There is nothing left to do.)

14. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_258$encoder.v:142$957 ($eq).
Removed top 2 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_257$encoder.v:141$956 ($eq).
Removed top 3 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_256$encoder.v:140$955 ($eq).
Removed top 4 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_255$encoder.v:139$954 ($eq).
Removed top 5 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_254$encoder.v:138$953 ($eq).
Removed top 6 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_253$encoder.v:137$952 ($eq).
Removed top 7 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_252$encoder.v:136$951 ($eq).
Removed top 8 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_251$encoder.v:135$950 ($eq).
Removed top 9 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_250$encoder.v:134$949 ($eq).
Removed top 10 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_249$encoder.v:133$948 ($eq).
Removed top 11 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_248$encoder.v:132$947 ($eq).
Removed top 12 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_247$encoder.v:131$946 ($eq).
Removed top 13 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_246$encoder.v:130$945 ($eq).
Removed top 14 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_245$encoder.v:129$944 ($eq).
Removed top 15 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_244$encoder.v:128$943 ($eq).
Removed top 16 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_243$encoder.v:127$942 ($eq).
Removed top 17 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_242$encoder.v:126$941 ($eq).
Removed top 18 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_241$encoder.v:125$940 ($eq).
Removed top 19 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_240$encoder.v:124$939 ($eq).
Removed top 20 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_239$encoder.v:123$938 ($eq).
Removed top 21 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_238$encoder.v:122$937 ($eq).
Removed top 22 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_237$encoder.v:121$936 ($eq).
Removed top 23 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_236$encoder.v:120$935 ($eq).
Removed top 24 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_235$encoder.v:119$934 ($eq).
Removed top 25 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_234$encoder.v:118$933 ($eq).
Removed top 26 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_233$encoder.v:117$932 ($eq).
Removed top 27 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_232$encoder.v:116$931 ($eq).
Removed top 28 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_231$encoder.v:115$930 ($eq).
Removed top 29 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_230$encoder.v:114$929 ($eq).
Removed top 30 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_229$encoder.v:113$928 ($eq).
Removed top 31 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_228$encoder.v:112$927 ($eq).
Removed top 32 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_227$encoder.v:110$926 ($eq).
Removed top 33 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_226$encoder.v:109$925 ($eq).
Removed top 34 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_225$encoder.v:108$924 ($eq).
Removed top 35 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_224$encoder.v:107$923 ($eq).
Removed top 36 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_223$encoder.v:106$922 ($eq).
Removed top 37 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_222$encoder.v:105$921 ($eq).
Removed top 38 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_221$encoder.v:104$920 ($eq).
Removed top 39 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_220$encoder.v:103$919 ($eq).
Removed top 40 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_219$encoder.v:102$918 ($eq).
Removed top 41 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_218$encoder.v:101$917 ($eq).
Removed top 42 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_217$encoder.v:100$916 ($eq).
Removed top 43 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_216$encoder.v:99$915 ($eq).
Removed top 44 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_215$encoder.v:98$914 ($eq).
Removed top 45 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_214$encoder.v:97$913 ($eq).
Removed top 46 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_213$encoder.v:96$912 ($eq).
Removed top 47 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_212$encoder.v:95$911 ($eq).
Removed top 48 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_211$encoder.v:94$910 ($eq).
Removed top 49 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_210$encoder.v:93$909 ($eq).
Removed top 50 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_209$encoder.v:92$908 ($eq).
Removed top 51 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_208$encoder.v:91$907 ($eq).
Removed top 52 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_207$encoder.v:90$906 ($eq).
Removed top 53 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_206$encoder.v:89$905 ($eq).
Removed top 54 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_205$encoder.v:88$904 ($eq).
Removed top 55 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_204$encoder.v:87$903 ($eq).
Removed top 56 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_203$encoder.v:86$902 ($eq).
Removed top 57 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_202$encoder.v:85$901 ($eq).
Removed top 58 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_201$encoder.v:84$900 ($eq).
Removed top 59 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_200$encoder.v:83$899 ($eq).
Removed top 60 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_199$encoder.v:82$898 ($eq).
Removed top 61 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_198$encoder.v:81$897 ($eq).
Removed top 62 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_197$encoder.v:80$896 ($eq).
Removed top 63 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_196$encoder.v:79$895 ($eq).
Removed top 64 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_195$encoder.v:77$894 ($eq).
Removed top 65 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_194$encoder.v:76$893 ($eq).
Removed top 66 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_193$encoder.v:75$892 ($eq).
Removed top 67 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_192$encoder.v:74$891 ($eq).
Removed top 68 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_191$encoder.v:73$890 ($eq).
Removed top 69 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_190$encoder.v:72$889 ($eq).
Removed top 70 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_189$encoder.v:71$888 ($eq).
Removed top 71 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_188$encoder.v:70$887 ($eq).
Removed top 72 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_187$encoder.v:69$886 ($eq).
Removed top 73 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_186$encoder.v:68$885 ($eq).
Removed top 74 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_185$encoder.v:67$884 ($eq).
Removed top 75 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_184$encoder.v:66$883 ($eq).
Removed top 76 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_183$encoder.v:65$882 ($eq).
Removed top 77 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_182$encoder.v:64$881 ($eq).
Removed top 78 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_181$encoder.v:63$880 ($eq).
Removed top 79 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_180$encoder.v:62$879 ($eq).
Removed top 80 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_179$encoder.v:61$878 ($eq).
Removed top 81 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_178$encoder.v:60$877 ($eq).
Removed top 82 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_177$encoder.v:59$876 ($eq).
Removed top 83 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_176$encoder.v:58$875 ($eq).
Removed top 84 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_175$encoder.v:57$874 ($eq).
Removed top 85 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_174$encoder.v:56$873 ($eq).
Removed top 86 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_173$encoder.v:55$872 ($eq).
Removed top 87 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_172$encoder.v:54$871 ($eq).
Removed top 88 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_171$encoder.v:53$870 ($eq).
Removed top 89 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_170$encoder.v:52$869 ($eq).
Removed top 90 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_169$encoder.v:51$868 ($eq).
Removed top 91 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_168$encoder.v:50$867 ($eq).
Removed top 92 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_167$encoder.v:49$866 ($eq).
Removed top 93 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_166$encoder.v:48$865 ($eq).
Removed top 94 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_165$encoder.v:47$864 ($eq).
Removed top 95 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_164$encoder.v:46$863 ($eq).
Removed top 96 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_163$encoder.v:44$862 ($eq).
Removed top 97 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_162$encoder.v:43$861 ($eq).
Removed top 98 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_161$encoder.v:42$860 ($eq).
Removed top 99 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_160$encoder.v:41$859 ($eq).
Removed top 100 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_159$encoder.v:40$858 ($eq).
Removed top 101 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_158$encoder.v:39$857 ($eq).
Removed top 102 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_157$encoder.v:38$856 ($eq).
Removed top 103 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_156$encoder.v:37$855 ($eq).
Removed top 104 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_155$encoder.v:36$854 ($eq).
Removed top 105 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_154$encoder.v:35$853 ($eq).
Removed top 106 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_153$encoder.v:34$852 ($eq).
Removed top 107 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_152$encoder.v:33$851 ($eq).
Removed top 108 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_151$encoder.v:32$850 ($eq).
Removed top 109 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_150$encoder.v:31$849 ($eq).
Removed top 110 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_149$encoder.v:30$848 ($eq).
Removed top 111 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_148$encoder.v:29$847 ($eq).
Removed top 112 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_147$encoder.v:28$846 ($eq).
Removed top 113 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_146$encoder.v:27$845 ($eq).
Removed top 114 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_145$encoder.v:26$844 ($eq).
Removed top 115 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_144$encoder.v:25$843 ($eq).
Removed top 116 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_143$encoder.v:24$842 ($eq).
Removed top 117 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_142$encoder.v:23$841 ($eq).
Removed top 118 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_141$encoder.v:22$840 ($eq).
Removed top 119 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_140$encoder.v:21$839 ($eq).
Removed top 120 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_139$encoder.v:20$838 ($eq).
Removed top 121 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_138$encoder.v:19$837 ($eq).
Removed top 122 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_137$encoder.v:18$836 ($eq).
Removed top 123 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_136$encoder.v:17$835 ($eq).
Removed top 124 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_135$encoder.v:16$834 ($eq).
Removed top 125 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_134$encoder.v:15$833 ($eq).
Removed top 126 bits (of 128) from port B of cell top.$flatten\U01.$verific$equal_133$encoder.v:14$832 ($eq).
Removed top 1 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_258$encoder.v:142$957 ($eq).
Removed top 2 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_257$encoder.v:141$956 ($eq).
Removed top 3 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_256$encoder.v:140$955 ($eq).
Removed top 4 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_255$encoder.v:139$954 ($eq).
Removed top 5 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_254$encoder.v:138$953 ($eq).
Removed top 6 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_253$encoder.v:137$952 ($eq).
Removed top 7 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_252$encoder.v:136$951 ($eq).
Removed top 8 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_251$encoder.v:135$950 ($eq).
Removed top 9 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_250$encoder.v:134$949 ($eq).
Removed top 10 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_249$encoder.v:133$948 ($eq).
Removed top 11 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_248$encoder.v:132$947 ($eq).
Removed top 12 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_247$encoder.v:131$946 ($eq).
Removed top 13 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_246$encoder.v:130$945 ($eq).
Removed top 14 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_245$encoder.v:129$944 ($eq).
Removed top 15 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_244$encoder.v:128$943 ($eq).
Removed top 16 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_243$encoder.v:127$942 ($eq).
Removed top 17 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_242$encoder.v:126$941 ($eq).
Removed top 18 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_241$encoder.v:125$940 ($eq).
Removed top 19 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_240$encoder.v:124$939 ($eq).
Removed top 20 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_239$encoder.v:123$938 ($eq).
Removed top 21 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_238$encoder.v:122$937 ($eq).
Removed top 22 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_237$encoder.v:121$936 ($eq).
Removed top 23 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_236$encoder.v:120$935 ($eq).
Removed top 24 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_235$encoder.v:119$934 ($eq).
Removed top 25 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_234$encoder.v:118$933 ($eq).
Removed top 26 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_233$encoder.v:117$932 ($eq).
Removed top 27 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_232$encoder.v:116$931 ($eq).
Removed top 28 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_231$encoder.v:115$930 ($eq).
Removed top 29 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_230$encoder.v:114$929 ($eq).
Removed top 30 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_229$encoder.v:113$928 ($eq).
Removed top 31 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_228$encoder.v:112$927 ($eq).
Removed top 32 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_227$encoder.v:110$926 ($eq).
Removed top 33 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_226$encoder.v:109$925 ($eq).
Removed top 34 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_225$encoder.v:108$924 ($eq).
Removed top 35 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_224$encoder.v:107$923 ($eq).
Removed top 36 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_223$encoder.v:106$922 ($eq).
Removed top 37 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_222$encoder.v:105$921 ($eq).
Removed top 38 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_221$encoder.v:104$920 ($eq).
Removed top 39 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_220$encoder.v:103$919 ($eq).
Removed top 40 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_219$encoder.v:102$918 ($eq).
Removed top 41 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_218$encoder.v:101$917 ($eq).
Removed top 42 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_217$encoder.v:100$916 ($eq).
Removed top 43 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_216$encoder.v:99$915 ($eq).
Removed top 44 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_215$encoder.v:98$914 ($eq).
Removed top 45 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_214$encoder.v:97$913 ($eq).
Removed top 46 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_213$encoder.v:96$912 ($eq).
Removed top 47 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_212$encoder.v:95$911 ($eq).
Removed top 48 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_211$encoder.v:94$910 ($eq).
Removed top 49 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_210$encoder.v:93$909 ($eq).
Removed top 50 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_209$encoder.v:92$908 ($eq).
Removed top 51 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_208$encoder.v:91$907 ($eq).
Removed top 52 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_207$encoder.v:90$906 ($eq).
Removed top 53 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_206$encoder.v:89$905 ($eq).
Removed top 54 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_205$encoder.v:88$904 ($eq).
Removed top 55 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_204$encoder.v:87$903 ($eq).
Removed top 56 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_203$encoder.v:86$902 ($eq).
Removed top 57 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_202$encoder.v:85$901 ($eq).
Removed top 58 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_201$encoder.v:84$900 ($eq).
Removed top 59 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_200$encoder.v:83$899 ($eq).
Removed top 60 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_199$encoder.v:82$898 ($eq).
Removed top 61 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_198$encoder.v:81$897 ($eq).
Removed top 62 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_197$encoder.v:80$896 ($eq).
Removed top 63 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_196$encoder.v:79$895 ($eq).
Removed top 64 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_195$encoder.v:77$894 ($eq).
Removed top 65 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_194$encoder.v:76$893 ($eq).
Removed top 66 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_193$encoder.v:75$892 ($eq).
Removed top 67 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_192$encoder.v:74$891 ($eq).
Removed top 68 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_191$encoder.v:73$890 ($eq).
Removed top 69 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_190$encoder.v:72$889 ($eq).
Removed top 70 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_189$encoder.v:71$888 ($eq).
Removed top 71 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_188$encoder.v:70$887 ($eq).
Removed top 72 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_187$encoder.v:69$886 ($eq).
Removed top 73 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_186$encoder.v:68$885 ($eq).
Removed top 74 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_185$encoder.v:67$884 ($eq).
Removed top 75 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_184$encoder.v:66$883 ($eq).
Removed top 76 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_183$encoder.v:65$882 ($eq).
Removed top 77 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_182$encoder.v:64$881 ($eq).
Removed top 78 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_181$encoder.v:63$880 ($eq).
Removed top 79 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_180$encoder.v:62$879 ($eq).
Removed top 80 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_179$encoder.v:61$878 ($eq).
Removed top 81 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_178$encoder.v:60$877 ($eq).
Removed top 82 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_177$encoder.v:59$876 ($eq).
Removed top 83 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_176$encoder.v:58$875 ($eq).
Removed top 84 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_175$encoder.v:57$874 ($eq).
Removed top 85 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_174$encoder.v:56$873 ($eq).
Removed top 86 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_173$encoder.v:55$872 ($eq).
Removed top 87 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_172$encoder.v:54$871 ($eq).
Removed top 88 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_171$encoder.v:53$870 ($eq).
Removed top 89 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_170$encoder.v:52$869 ($eq).
Removed top 90 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_169$encoder.v:51$868 ($eq).
Removed top 91 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_168$encoder.v:50$867 ($eq).
Removed top 92 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_167$encoder.v:49$866 ($eq).
Removed top 93 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_166$encoder.v:48$865 ($eq).
Removed top 94 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_165$encoder.v:47$864 ($eq).
Removed top 95 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_164$encoder.v:46$863 ($eq).
Removed top 96 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_163$encoder.v:44$862 ($eq).
Removed top 97 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_162$encoder.v:43$861 ($eq).
Removed top 98 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_161$encoder.v:42$860 ($eq).
Removed top 99 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_160$encoder.v:41$859 ($eq).
Removed top 100 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_159$encoder.v:40$858 ($eq).
Removed top 101 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_158$encoder.v:39$857 ($eq).
Removed top 102 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_157$encoder.v:38$856 ($eq).
Removed top 103 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_156$encoder.v:37$855 ($eq).
Removed top 104 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_155$encoder.v:36$854 ($eq).
Removed top 105 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_154$encoder.v:35$853 ($eq).
Removed top 106 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_153$encoder.v:34$852 ($eq).
Removed top 107 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_152$encoder.v:33$851 ($eq).
Removed top 108 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_151$encoder.v:32$850 ($eq).
Removed top 109 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_150$encoder.v:31$849 ($eq).
Removed top 110 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_149$encoder.v:30$848 ($eq).
Removed top 111 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_148$encoder.v:29$847 ($eq).
Removed top 112 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_147$encoder.v:28$846 ($eq).
Removed top 113 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_146$encoder.v:27$845 ($eq).
Removed top 114 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_145$encoder.v:26$844 ($eq).
Removed top 115 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_144$encoder.v:25$843 ($eq).
Removed top 116 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_143$encoder.v:24$842 ($eq).
Removed top 117 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_142$encoder.v:23$841 ($eq).
Removed top 118 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_141$encoder.v:22$840 ($eq).
Removed top 119 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_140$encoder.v:21$839 ($eq).
Removed top 120 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_139$encoder.v:20$838 ($eq).
Removed top 121 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_138$encoder.v:19$837 ($eq).
Removed top 122 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_137$encoder.v:18$836 ($eq).
Removed top 123 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_136$encoder.v:17$835 ($eq).
Removed top 124 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_135$encoder.v:16$834 ($eq).
Removed top 125 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_134$encoder.v:15$833 ($eq).
Removed top 126 bits (of 128) from port B of cell top.$flatten\U011.$verific$equal_133$encoder.v:14$832 ($eq).

15. Executing PEEPOPT pass (run peephole optimizers).

16. Executing PMUXTREE pass.

17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 4 unused cells and 6 unused wires.
<suppressed ~5 debug messages>

18. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module top:
  created 0 $alu and 0 $macc cells.

19. Executing OPT pass (performing simple optimizations).

19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
    New input vector for $reduce_or cell $auto$pmuxtree.cc:37:or_generator$1526: { $flatten\U011.$verific$n1157$692 $flatten\U011.$verific$n1158$693 $flatten\U011.$verific$n1161$696 $flatten\U011.$verific$n1162$697 $flatten\U011.$verific$n1163$698 $auto$rtlil.cc:2393:Or$1499 }
    New input vector for $reduce_or cell $auto$pmuxtree.cc:37:or_generator$1570: { $flatten\U011.$verific$n1148$683 $flatten\U011.$verific$n1149$684 $flatten\U011.$verific$n1152$687 $flatten\U011.$verific$n1153$688 $flatten\U011.$verific$n1157$692 $flatten\U011.$verific$n1158$693 $flatten\U011.$verific$n1161$696 $flatten\U011.$verific$n1162$697 $flatten\U011.$verific$n1163$698 $auto$rtlil.cc:2393:Or$1499 $auto$rtlil.cc:2393:Or$1519 $auto$rtlil.cc:2393:Or$1511 }
    New input vector for $reduce_or cell $auto$pmuxtree.cc:37:or_generator$1566: { $flatten\U011.$verific$n1141$676 $flatten\U011.$verific$n1142$677 $flatten\U011.$verific$n1145$680 $flatten\U011.$verific$n1146$681 $flatten\U011.$verific$n1147$682 $auto$rtlil.cc:2393:Or$1539 }
    New input vector for $reduce_or cell $auto$pmuxtree.cc:37:or_generator$1658: { $flatten\U011.$verific$n1132$667 $flatten\U011.$verific$n1133$668 $flatten\U011.$verific$n1136$671 $flatten\U011.$verific$n1137$672 $flatten\U011.$verific$n1141$676 $flatten\U011.$verific$n1142$677 $flatten\U011.$verific$n1145$680 $flatten\U011.$verific$n1146$681 $flatten\U011.$verific$n1147$682 $flatten\U011.$verific$n1148$683 $flatten\U011.$verific$n1149$684 $flatten\U011.$verific$n1152$687 $flatten\U011.$verific$n1153$688 $flatten\U011.$verific$n1157$692 $flatten\U011.$verific$n1158$693 $flatten\U011.$verific$n1161$696 $flatten\U011.$verific$n1162$697 $flatten\U011.$verific$n1163$698 $auto$rtlil.cc:2393:Or$1499 $auto$rtlil.cc:2393:Or$1519 $auto$rtlil.cc:2393:Or$1539 $auto$rtlil.cc:2393:Or$1551 $auto$rtlil.cc:2393:Or$1559 $auto$rtlil.cc:2393:Or$1511 }
    New input vector for $reduce_or cell $auto$pmuxtree.cc:37:or_generator$1610: { $flatten\U011.$verific$n1125$660 $flatten\U011.$verific$n1126$661 $flatten\U011.$verific$n1129$664 $flatten\U011.$verific$n1130$665 $flatten\U011.$verific$n1131$666 $auto$rtlil.cc:2393:Or$1583 }
    New input vector for $reduce_or cell $auto$pmuxtree.cc:37:or_generator$1654: { $flatten\U011.$verific$n1116$651 $flatten\U011.$verific$n1117$652 $flatten\U011.$verific$n1120$655 $flatten\U011.$verific$n1121$656 $flatten\U011.$verific$n1125$660 $flatten\U011.$verific$n1126$661 $flatten\U011.$verific$n1129$664 $flatten\U011.$verific$n1130$665 $flatten\U011.$verific$n1131$666 $auto$rtlil.cc:2393:Or$1583 $auto$rtlil.cc:2393:Or$1595 $auto$rtlil.cc:2393:Or$1603 }
    New input vector for $reduce_or cell $auto$pmuxtree.cc:37:or_generator$1650: { $flatten\U011.$verific$n1109$644 $flatten\U011.$verific$n1110$645 $flatten\U011.$verific$n1113$648 $flatten\U011.$verific$n1114$649 $flatten\U011.$verific$n1115$650 $auto$rtlil.cc:2393:Or$1623 }
    New input vector for $reduce_or cell $auto$pmuxtree.cc:37:or_generator$1834: { $flatten\U011.$verific$n1100$635 $flatten\U011.$verific$n1101$636 $flatten\U011.$verific$n1104$639 $flatten\U011.$verific$n1105$640 $flatten\U011.$verific$n1109$644 $flatten\U011.$verific$n1110$645 $flatten\U011.$verific$n1113$648 $flatten\U011.$verific$n1114$649 $flatten\U011.$verific$n1115$650 $flatten\U011.$verific$n1116$651 $flatten\U011.$verific$n1117$652 $flatten\U011.$verific$n1120$655 $flatten\U011.$verific$n1121$656 $flatten\U011.$verific$n1125$660 $flatten\U011.$verific$n1126$661 $flatten\U011.$verific$n1129$664 $flatten\U011.$verific$n1130$665 $flatten\U011.$verific$n1131$666 $flatten\U011.$verific$n1132$667 $flatten\U011.$verific$n1133$668 $flatten\U011.$verific$n1136$671 $flatten\U011.$verific$n1137$672 $flatten\U011.$verific$n1141$676 $flatten\U011.$verific$n1142$677 $flatten\U011.$verific$n1145$680 $flatten\U011.$verific$n1146$681 $flatten\U011.$verific$n1147$682 $flatten\U011.$verific$n1148$683 $flatten\U011.$verific$n1149$684 $flatten\U011.$verific$n1152$687 $flatten\U011.$verific$n1153$688 $flatten\U011.$verific$n1157$692 $flatten\U011.$verific$n1158$693 $flatten\U011.$verific$n1161$696 $flatten\U011.$verific$n1162$697 $flatten\U011.$verific$n1163$698 $auto$rtlil.cc:2393:Or$1499 $auto$rtlil.cc:2393:Or$1519 $auto$rtlil.cc:2393:Or$1539 $auto$rtlil.cc:2393:Or$1551 $auto$rtlil.cc:2393:Or$1559 $auto$rtlil.cc:2393:Or$1583 $auto$rtlil.cc:2393:Or$1595 $auto$rtlil.cc:2393:Or$1603 $auto$rtlil.cc:2393:Or$1623 $auto$rtlil.cc:2393:Or$1635 $auto$rtlil.cc:2393:Or$1643 $auto$rtlil.cc:2393:Or$1511 }
    New input vector for $reduce_or cell $auto$pmuxtree.cc:37:or_generator$1698: { $flatten\U011.$verific$n1093$628 $flatten\U011.$verific$n1094$629 $flatten\U011.$verific$n1097$632 $flatten\U011.$verific$n1098$633 $flatten\U011.$verific$n1099$634 $auto$rtlil.cc:2393:Or$1671 }
    New input vector for $reduce_or cell $auto$pmuxtree.cc:37:or_generator$1742: { $flatten\U011.$verific$n1084$619 $flatten\U011.$verific$n1085$620 $flatten\U011.$verific$n1088$623 $flatten\U011.$verific$n1089$624 $flatten\U011.$verific$n1093$628 $flatten\U011.$verific$n1094$629 $flatten\U011.$verific$n1097$632 $flatten\U011.$verific$n1098$633 $flatten\U011.$verific$n1099$634 $auto$rtlil.cc:2393:Or$1671 $auto$rtlil.cc:2393:Or$1683 $auto$rtlil.cc:2393:Or$1691 }
    New input vector for $reduce_or cell $auto$pmuxtree.cc:37:or_generator$1738: { $flatten\U011.$verific$n1077$612 $flatten\U011.$verific$n1078$613 $flatten\U011.$verific$n1081$616 $flatten\U011.$verific$n1082$617 $flatten\U011.$verific$n1083$618 $auto$rtlil.cc:2393:Or$1711 }
    New input vector for $reduce_or cell $auto$pmuxtree.cc:37:or_generator$1830: { $flatten\U011.$verific$n1068$603 $flatten\U011.$verific$n1069$604 $flatten\U011.$verific$n1072$607 $flatten\U011.$verific$n1073$608 $flatten\U011.$verific$n1077$612 $flatten\U011.$verific$n1078$613 $flatten\U011.$verific$n1081$616 $flatten\U011.$verific$n1082$617 $flatten\U011.$verific$n1083$618 $flatten\U011.$verific$n1084$619 $flatten\U011.$verific$n1085$620 $flatten\U011.$verific$n1088$623 $flatten\U011.$verific$n1089$624 $flatten\U011.$verific$n1093$628 $flatten\U011.$verific$n1094$629 $flatten\U011.$verific$n1097$632 $flatten\U011.$verific$n1098$633 $flatten\U011.$verific$n1099$634 $auto$rtlil.cc:2393:Or$1671 $auto$rtlil.cc:2393:Or$1683 $auto$rtlil.cc:2393:Or$1691 $auto$rtlil.cc:2393:Or$1711 $auto$rtlil.cc:2393:Or$1723 $auto$rtlil.cc:2393:Or$1731 }
    New input vector for $reduce_or cell $auto$pmuxtree.cc:37:or_generator$1782: { $flatten\U011.$verific$n1061$596 $flatten\U011.$verific$n1062$597 $flatten\U011.$verific$n1065$600 $flatten\U011.$verific$n1066$601 $flatten\U011.$verific$n1067$602 $auto$rtlil.cc:2393:Or$1755 }
    New input vector for $reduce_or cell $auto$pmuxtree.cc:37:or_generator$1826: { $flatten\U011.$verific$n1052$587 $flatten\U011.$verific$n1053$588 $flatten\U011.$verific$n1056$591 $flatten\U011.$verific$n1057$592 $flatten\U011.$verific$n1061$596 $flatten\U011.$verific$n1062$597 $flatten\U011.$verific$n1065$600 $flatten\U011.$verific$n1066$601 $flatten\U011.$verific$n1067$602 $auto$rtlil.cc:2393:Or$1755 $auto$rtlil.cc:2393:Or$1767 $auto$rtlil.cc:2393:Or$1775 }
    New input vector for $reduce_or cell $auto$pmuxtree.cc:37:or_generator$1822: { $flatten\U011.$verific$n1045$580 $flatten\U011.$verific$n1046$581 $flatten\U011.$verific$n1049$584 $flatten\U011.$verific$n1050$585 $flatten\U011.$verific$n1051$586 $auto$rtlil.cc:2393:Or$1795 }
    New input vector for $reduce_or cell $auto$pmuxtree.cc:37:or_generator$1174: { $auto$rtlil.cc:2393:Or$1147 $flatten\U01.$verific$n1157$692 $flatten\U01.$verific$n1158$693 $flatten\U01.$verific$n1161$696 $flatten\U01.$verific$n1162$697 $flatten\U01.$verific$n1163$698 }
    New input vector for $reduce_or cell $auto$pmuxtree.cc:37:or_generator$1218: { $auto$rtlil.cc:2393:Or$1159 $auto$rtlil.cc:2393:Or$1167 $auto$rtlil.cc:2393:Or$1147 $flatten\U01.$verific$n1148$683 $flatten\U01.$verific$n1149$684 $flatten\U01.$verific$n1152$687 $flatten\U01.$verific$n1153$688 $flatten\U01.$verific$n1157$692 $flatten\U01.$verific$n1158$693 $flatten\U01.$verific$n1161$696 $flatten\U01.$verific$n1162$697 $flatten\U01.$verific$n1163$698 }
    New input vector for $reduce_or cell $auto$pmuxtree.cc:37:or_generator$1214: { $auto$rtlil.cc:2393:Or$1187 $flatten\U01.$verific$n1141$676 $flatten\U01.$verific$n1142$677 $flatten\U01.$verific$n1145$680 $flatten\U01.$verific$n1146$681 $flatten\U01.$verific$n1147$682 }
    New input vector for $reduce_or cell $auto$pmuxtree.cc:37:or_generator$1306: { $auto$rtlil.cc:2393:Or$1159 $auto$rtlil.cc:2393:Or$1167 $auto$rtlil.cc:2393:Or$1187 $auto$rtlil.cc:2393:Or$1199 $auto$rtlil.cc:2393:Or$1207 $auto$rtlil.cc:2393:Or$1147 $flatten\U01.$verific$n1132$667 $flatten\U01.$verific$n1133$668 $flatten\U01.$verific$n1136$671 $flatten\U01.$verific$n1137$672 $flatten\U01.$verific$n1141$676 $flatten\U01.$verific$n1142$677 $flatten\U01.$verific$n1145$680 $flatten\U01.$verific$n1146$681 $flatten\U01.$verific$n1147$682 $flatten\U01.$verific$n1148$683 $flatten\U01.$verific$n1149$684 $flatten\U01.$verific$n1152$687 $flatten\U01.$verific$n1153$688 $flatten\U01.$verific$n1157$692 $flatten\U01.$verific$n1158$693 $flatten\U01.$verific$n1161$696 $flatten\U01.$verific$n1162$697 $flatten\U01.$verific$n1163$698 }
    New input vector for $reduce_or cell $auto$pmuxtree.cc:37:or_generator$1258: { $auto$rtlil.cc:2393:Or$1231 $flatten\U01.$verific$n1125$660 $flatten\U01.$verific$n1126$661 $flatten\U01.$verific$n1129$664 $flatten\U01.$verific$n1130$665 $flatten\U01.$verific$n1131$666 }
    New input vector for $reduce_or cell $auto$pmuxtree.cc:37:or_generator$1302: { $auto$rtlil.cc:2393:Or$1231 $auto$rtlil.cc:2393:Or$1243 $auto$rtlil.cc:2393:Or$1251 $flatten\U01.$verific$n1116$651 $flatten\U01.$verific$n1117$652 $flatten\U01.$verific$n1120$655 $flatten\U01.$verific$n1121$656 $flatten\U01.$verific$n1125$660 $flatten\U01.$verific$n1126$661 $flatten\U01.$verific$n1129$664 $flatten\U01.$verific$n1130$665 $flatten\U01.$verific$n1131$666 }
    New input vector for $reduce_or cell $auto$pmuxtree.cc:37:or_generator$1298: { $auto$rtlil.cc:2393:Or$1271 $flatten\U01.$verific$n1109$644 $flatten\U01.$verific$n1110$645 $flatten\U01.$verific$n1113$648 $flatten\U01.$verific$n1114$649 $flatten\U01.$verific$n1115$650 }
    New input vector for $reduce_or cell $auto$pmuxtree.cc:37:or_generator$1482: { $auto$rtlil.cc:2393:Or$1159 $auto$rtlil.cc:2393:Or$1167 $auto$rtlil.cc:2393:Or$1187 $auto$rtlil.cc:2393:Or$1199 $auto$rtlil.cc:2393:Or$1207 $auto$rtlil.cc:2393:Or$1231 $auto$rtlil.cc:2393:Or$1243 $auto$rtlil.cc:2393:Or$1251 $auto$rtlil.cc:2393:Or$1147 $auto$rtlil.cc:2393:Or$1271 $auto$rtlil.cc:2393:Or$1283 $auto$rtlil.cc:2393:Or$1291 $flatten\U01.$verific$n1100$635 $flatten\U01.$verific$n1101$636 $flatten\U01.$verific$n1104$639 $flatten\U01.$verific$n1105$640 $flatten\U01.$verific$n1109$644 $flatten\U01.$verific$n1110$645 $flatten\U01.$verific$n1113$648 $flatten\U01.$verific$n1114$649 $flatten\U01.$verific$n1115$650 $flatten\U01.$verific$n1116$651 $flatten\U01.$verific$n1117$652 $flatten\U01.$verific$n1120$655 $flatten\U01.$verific$n1121$656 $flatten\U01.$verific$n1125$660 $flatten\U01.$verific$n1126$661 $flatten\U01.$verific$n1129$664 $flatten\U01.$verific$n1130$665 $flatten\U01.$verific$n1131$666 $flatten\U01.$verific$n1132$667 $flatten\U01.$verific$n1133$668 $flatten\U01.$verific$n1136$671 $flatten\U01.$verific$n1137$672 $flatten\U01.$verific$n1141$676 $flatten\U01.$verific$n1142$677 $flatten\U01.$verific$n1145$680 $flatten\U01.$verific$n1146$681 $flatten\U01.$verific$n1147$682 $flatten\U01.$verific$n1148$683 $flatten\U01.$verific$n1149$684 $flatten\U01.$verific$n1152$687 $flatten\U01.$verific$n1153$688 $flatten\U01.$verific$n1157$692 $flatten\U01.$verific$n1158$693 $flatten\U01.$verific$n1161$696 $flatten\U01.$verific$n1162$697 $flatten\U01.$verific$n1163$698 }
    New input vector for $reduce_or cell $auto$pmuxtree.cc:37:or_generator$1346: { $auto$rtlil.cc:2393:Or$1319 $flatten\U01.$verific$n1093$628 $flatten\U01.$verific$n1094$629 $flatten\U01.$verific$n1097$632 $flatten\U01.$verific$n1098$633 $flatten\U01.$verific$n1099$634 }
    New input vector for $reduce_or cell $auto$pmuxtree.cc:37:or_generator$1390: { $auto$rtlil.cc:2393:Or$1319 $auto$rtlil.cc:2393:Or$1331 $auto$rtlil.cc:2393:Or$1339 $flatten\U01.$verific$n1084$619 $flatten\U01.$verific$n1085$620 $flatten\U01.$verific$n1088$623 $flatten\U01.$verific$n1089$624 $flatten\U01.$verific$n1093$628 $flatten\U01.$verific$n1094$629 $flatten\U01.$verific$n1097$632 $flatten\U01.$verific$n1098$633 $flatten\U01.$verific$n1099$634 }
    New input vector for $reduce_or cell $auto$pmuxtree.cc:37:or_generator$1386: { $auto$rtlil.cc:2393:Or$1359 $flatten\U01.$verific$n1077$612 $flatten\U01.$verific$n1078$613 $flatten\U01.$verific$n1081$616 $flatten\U01.$verific$n1082$617 $flatten\U01.$verific$n1083$618 }
    New input vector for $reduce_or cell $auto$pmuxtree.cc:37:or_generator$1478: { $auto$rtlil.cc:2393:Or$1319 $auto$rtlil.cc:2393:Or$1331 $auto$rtlil.cc:2393:Or$1339 $auto$rtlil.cc:2393:Or$1359 $auto$rtlil.cc:2393:Or$1371 $auto$rtlil.cc:2393:Or$1379 $flatten\U01.$verific$n1068$603 $flatten\U01.$verific$n1069$604 $flatten\U01.$verific$n1072$607 $flatten\U01.$verific$n1073$608 $flatten\U01.$verific$n1077$612 $flatten\U01.$verific$n1078$613 $flatten\U01.$verific$n1081$616 $flatten\U01.$verific$n1082$617 $flatten\U01.$verific$n1083$618 $flatten\U01.$verific$n1084$619 $flatten\U01.$verific$n1085$620 $flatten\U01.$verific$n1088$623 $flatten\U01.$verific$n1089$624 $flatten\U01.$verific$n1093$628 $flatten\U01.$verific$n1094$629 $flatten\U01.$verific$n1097$632 $flatten\U01.$verific$n1098$633 $flatten\U01.$verific$n1099$634 }
    New input vector for $reduce_or cell $auto$pmuxtree.cc:37:or_generator$1430: { $auto$rtlil.cc:2393:Or$1403 $flatten\U01.$verific$n1061$596 $flatten\U01.$verific$n1062$597 $flatten\U01.$verific$n1065$600 $flatten\U01.$verific$n1066$601 $flatten\U01.$verific$n1067$602 }
    New input vector for $reduce_or cell $auto$pmuxtree.cc:37:or_generator$1474: { $auto$rtlil.cc:2393:Or$1403 $auto$rtlil.cc:2393:Or$1415 $auto$rtlil.cc:2393:Or$1423 $flatten\U01.$verific$n1052$587 $flatten\U01.$verific$n1053$588 $flatten\U01.$verific$n1056$591 $flatten\U01.$verific$n1057$592 $flatten\U01.$verific$n1061$596 $flatten\U01.$verific$n1062$597 $flatten\U01.$verific$n1065$600 $flatten\U01.$verific$n1066$601 $flatten\U01.$verific$n1067$602 }
    New input vector for $reduce_or cell $auto$pmuxtree.cc:37:or_generator$1470: { $auto$rtlil.cc:2393:Or$1443 $flatten\U01.$verific$n1045$580 $flatten\U01.$verific$n1046$581 $flatten\U01.$verific$n1049$584 $flatten\U01.$verific$n1050$585 $flatten\U01.$verific$n1051$586 }
  Optimizing cells in module \top.
Performed a total of 30 changes.

19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

19.6. Executing OPT_DFF pass (perform DFF optimizations).

19.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

19.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

19.9. Rerunning OPT passes. (Maybe there is more to do..)

19.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

19.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

19.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

19.13. Executing OPT_DFF pass (perform DFF optimizations).

19.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

19.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

19.16. Finished OPT passes. (There is nothing left to do.)

20. Executing MEMORY pass.

20.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

20.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

20.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

20.4. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

20.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

20.6. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

20.7. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

20.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

20.9. Executing MEMORY_COLLECT pass (generating $mem cells).

21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

22. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

23. Executing SIMPLEMAP pass (map simple cells to gate primitives).
Mapping top.$auto$ff.cc:262:slice$1130 ($sdff).
Mapping top.$auto$ff.cc:262:slice$1131 ($sdff).
Mapping top.$auto$ff.cc:262:slice$1132 ($sdff).
Mapping top.$auto$ff.cc:262:slice$1133 ($sdff).
Mapping top.$auto$opt_reduce.cc:128:opt_pmux$1098 ($reduce_or).
Mapping top.$auto$opt_reduce.cc:128:opt_pmux$1100 ($reduce_or).
Mapping top.$auto$opt_reduce.cc:128:opt_pmux$1102 ($reduce_or).
Mapping top.$auto$opt_reduce.cc:128:opt_pmux$1104 ($reduce_or).
Mapping top.$auto$opt_reduce.cc:128:opt_pmux$1106 ($reduce_or).
Mapping top.$auto$opt_reduce.cc:128:opt_pmux$1108 ($reduce_or).
Mapping top.$auto$opt_reduce.cc:128:opt_pmux$1110 ($reduce_or).
Mapping top.$auto$opt_reduce.cc:128:opt_pmux$1112 ($reduce_or).
Mapping top.$auto$opt_reduce.cc:128:opt_pmux$1114 ($reduce_or).
Mapping top.$auto$opt_reduce.cc:128:opt_pmux$1116 ($reduce_or).
Mapping top.$auto$opt_reduce.cc:128:opt_pmux$1118 ($reduce_or).
Mapping top.$auto$opt_reduce.cc:128:opt_pmux$1120 ($reduce_or).
Mapping top.$auto$opt_reduce.cc:128:opt_pmux$1122 ($reduce_or).
Mapping top.$auto$opt_reduce.cc:128:opt_pmux$1124 ($reduce_or).
Mapping top.$auto$opt_reduce.cc:128:opt_pmux$1126 ($reduce_or).
Mapping top.$auto$opt_reduce.cc:128:opt_pmux$1128 ($reduce_or).
Mapping top.$auto$pmuxtree.cc:35:or_generator$1146 ($or).
Mapping top.$auto$pmuxtree.cc:35:or_generator$1158 ($or).
Mapping top.$auto$pmuxtree.cc:35:or_generator$1166 ($or).
Mapping top.$auto$pmuxtree.cc:35:or_generator$1186 ($or).
Mapping top.$auto$pmuxtree.cc:35:or_generator$1198 ($or).
Mapping top.$auto$pmuxtree.cc:35:or_generator$1206 ($or).
Mapping top.$auto$pmuxtree.cc:35:or_generator$1230 ($or).
Mapping top.$auto$pmuxtree.cc:35:or_generator$1242 ($or).
Mapping top.$auto$pmuxtree.cc:35:or_generator$1250 ($or).
Mapping top.$auto$pmuxtree.cc:35:or_generator$1270 ($or).
Mapping top.$auto$pmuxtree.cc:35:or_generator$1282 ($or).
Mapping top.$auto$pmuxtree.cc:35:or_generator$1290 ($or).
Mapping top.$auto$pmuxtree.cc:35:or_generator$1318 ($or).
Mapping top.$auto$pmuxtree.cc:35:or_generator$1330 ($or).
Mapping top.$auto$pmuxtree.cc:35:or_generator$1338 ($or).
Mapping top.$auto$pmuxtree.cc:35:or_generator$1358 ($or).
Mapping top.$auto$pmuxtree.cc:35:or_generator$1370 ($or).
Mapping top.$auto$pmuxtree.cc:35:or_generator$1378 ($or).
Mapping top.$auto$pmuxtree.cc:35:or_generator$1402 ($or).
Mapping top.$auto$pmuxtree.cc:35:or_generator$1414 ($or).
Mapping top.$auto$pmuxtree.cc:35:or_generator$1422 ($or).
Mapping top.$auto$pmuxtree.cc:35:or_generator$1442 ($or).
Mapping top.$auto$pmuxtree.cc:35:or_generator$1454 ($or).
Mapping top.$auto$pmuxtree.cc:35:or_generator$1462 ($or).
Mapping top.$auto$pmuxtree.cc:35:or_generator$1498 ($or).
Mapping top.$auto$pmuxtree.cc:35:or_generator$1510 ($or).
Mapping top.$auto$pmuxtree.cc:35:or_generator$1518 ($or).
Mapping top.$auto$pmuxtree.cc:35:or_generator$1538 ($or).
Mapping top.$auto$pmuxtree.cc:35:or_generator$1550 ($or).
Mapping top.$auto$pmuxtree.cc:35:or_generator$1558 ($or).
Mapping top.$auto$pmuxtree.cc:35:or_generator$1582 ($or).
Mapping top.$auto$pmuxtree.cc:35:or_generator$1594 ($or).
Mapping top.$auto$pmuxtree.cc:35:or_generator$1602 ($or).
Mapping top.$auto$pmuxtree.cc:35:or_generator$1622 ($or).
Mapping top.$auto$pmuxtree.cc:35:or_generator$1634 ($or).
Mapping top.$auto$pmuxtree.cc:35:or_generator$1642 ($or).
Mapping top.$auto$pmuxtree.cc:35:or_generator$1670 ($or).
Mapping top.$auto$pmuxtree.cc:35:or_generator$1682 ($or).
Mapping top.$auto$pmuxtree.cc:35:or_generator$1690 ($or).
Mapping top.$auto$pmuxtree.cc:35:or_generator$1710 ($or).
Mapping top.$auto$pmuxtree.cc:35:or_generator$1722 ($or).
Mapping top.$auto$pmuxtree.cc:35:or_generator$1730 ($or).
Mapping top.$auto$pmuxtree.cc:35:or_generator$1754 ($or).
Mapping top.$auto$pmuxtree.cc:35:or_generator$1766 ($or).
Mapping top.$auto$pmuxtree.cc:35:or_generator$1774 ($or).
Mapping top.$auto$pmuxtree.cc:35:or_generator$1794 ($or).
Mapping top.$auto$pmuxtree.cc:35:or_generator$1806 ($or).
Mapping top.$auto$pmuxtree.cc:35:or_generator$1814 ($or).
Mapping top.$auto$pmuxtree.cc:37:or_generator$1150 ($reduce_or).
Mapping top.$auto$pmuxtree.cc:37:or_generator$1170 ($reduce_or).
Mapping top.$auto$pmuxtree.cc:37:or_generator$1174 ($reduce_or).
Mapping top.$auto$pmuxtree.cc:37:or_generator$1190 ($reduce_or).
Mapping top.$auto$pmuxtree.cc:37:or_generator$1210 ($reduce_or).
Mapping top.$auto$pmuxtree.cc:37:or_generator$1214 ($reduce_or).
Mapping top.$auto$pmuxtree.cc:37:or_generator$1218 ($reduce_or).
Mapping top.$auto$pmuxtree.cc:37:or_generator$1234 ($reduce_or).
Mapping top.$auto$pmuxtree.cc:37:or_generator$1254 ($reduce_or).
Mapping top.$auto$pmuxtree.cc:37:or_generator$1258 ($reduce_or).
Mapping top.$auto$pmuxtree.cc:37:or_generator$1274 ($reduce_or).
Mapping top.$auto$pmuxtree.cc:37:or_generator$1294 ($reduce_or).
Mapping top.$auto$pmuxtree.cc:37:or_generator$1298 ($reduce_or).
Mapping top.$auto$pmuxtree.cc:37:or_generator$1302 ($reduce_or).
Mapping top.$auto$pmuxtree.cc:37:or_generator$1306 ($reduce_or).
Mapping top.$auto$pmuxtree.cc:37:or_generator$1322 ($reduce_or).
Mapping top.$auto$pmuxtree.cc:37:or_generator$1342 ($reduce_or).
Mapping top.$auto$pmuxtree.cc:37:or_generator$1346 ($reduce_or).
Mapping top.$auto$pmuxtree.cc:37:or_generator$1362 ($reduce_or).
Mapping top.$auto$pmuxtree.cc:37:or_generator$1382 ($reduce_or).
Mapping top.$auto$pmuxtree.cc:37:or_generator$1386 ($reduce_or).
Mapping top.$auto$pmuxtree.cc:37:or_generator$1390 ($reduce_or).
Mapping top.$auto$pmuxtree.cc:37:or_generator$1406 ($reduce_or).
Mapping top.$auto$pmuxtree.cc:37:or_generator$1426 ($reduce_or).
Mapping top.$auto$pmuxtree.cc:37:or_generator$1430 ($reduce_or).
Mapping top.$auto$pmuxtree.cc:37:or_generator$1446 ($reduce_or).
Mapping top.$auto$pmuxtree.cc:37:or_generator$1466 ($reduce_or).
Mapping top.$auto$pmuxtree.cc:37:or_generator$1470 ($reduce_or).
Mapping top.$auto$pmuxtree.cc:37:or_generator$1474 ($reduce_or).
Mapping top.$auto$pmuxtree.cc:37:or_generator$1478 ($reduce_or).
Mapping top.$auto$pmuxtree.cc:37:or_generator$1482 ($reduce_or).
Mapping top.$auto$pmuxtree.cc:37:or_generator$1502 ($reduce_or).
Mapping top.$auto$pmuxtree.cc:37:or_generator$1522 ($reduce_or).
Mapping top.$auto$pmuxtree.cc:37:or_generator$1526 ($reduce_or).
Mapping top.$auto$pmuxtree.cc:37:or_generator$1542 ($reduce_or).
Mapping top.$auto$pmuxtree.cc:37:or_generator$1562 ($reduce_or).
Mapping top.$auto$pmuxtree.cc:37:or_generator$1566 ($reduce_or).
Mapping top.$auto$pmuxtree.cc:37:or_generator$1570 ($reduce_or).
Mapping top.$auto$pmuxtree.cc:37:or_generator$1586 ($reduce_or).
Mapping top.$auto$pmuxtree.cc:37:or_generator$1606 ($reduce_or).
Mapping top.$auto$pmuxtree.cc:37:or_generator$1610 ($reduce_or).
Mapping top.$auto$pmuxtree.cc:37:or_generator$1626 ($reduce_or).
Mapping top.$auto$pmuxtree.cc:37:or_generator$1646 ($reduce_or).
Mapping top.$auto$pmuxtree.cc:37:or_generator$1650 ($reduce_or).
Mapping top.$auto$pmuxtree.cc:37:or_generator$1654 ($reduce_or).
Mapping top.$auto$pmuxtree.cc:37:or_generator$1658 ($reduce_or).
Mapping top.$auto$pmuxtree.cc:37:or_generator$1674 ($reduce_or).
Mapping top.$auto$pmuxtree.cc:37:or_generator$1694 ($reduce_or).
Mapping top.$auto$pmuxtree.cc:37:or_generator$1698 ($reduce_or).
Mapping top.$auto$pmuxtree.cc:37:or_generator$1714 ($reduce_or).
Mapping top.$auto$pmuxtree.cc:37:or_generator$1734 ($reduce_or).
Mapping top.$auto$pmuxtree.cc:37:or_generator$1738 ($reduce_or).
Mapping top.$auto$pmuxtree.cc:37:or_generator$1742 ($reduce_or).
Mapping top.$auto$pmuxtree.cc:37:or_generator$1758 ($reduce_or).
Mapping top.$auto$pmuxtree.cc:37:or_generator$1778 ($reduce_or).
Mapping top.$auto$pmuxtree.cc:37:or_generator$1782 ($reduce_or).
Mapping top.$auto$pmuxtree.cc:37:or_generator$1798 ($reduce_or).
Mapping top.$auto$pmuxtree.cc:37:or_generator$1818 ($reduce_or).
Mapping top.$auto$pmuxtree.cc:37:or_generator$1822 ($reduce_or).
Mapping top.$auto$pmuxtree.cc:37:or_generator$1826 ($reduce_or).
Mapping top.$auto$pmuxtree.cc:37:or_generator$1830 ($reduce_or).
Mapping top.$auto$pmuxtree.cc:37:or_generator$1834 ($reduce_or).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1138 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1140 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1142 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1144 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1148 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1152 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1154 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1156 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1160 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1162 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1164 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1168 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1172 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1176 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1178 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1180 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1182 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1184 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1188 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1192 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1194 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1196 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1200 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1202 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1204 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1208 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1212 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1216 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1220 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1222 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1224 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1226 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1228 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1232 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1236 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1238 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1240 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1244 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1246 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1248 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1252 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1256 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1260 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1262 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1264 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1266 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1268 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1272 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1276 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1278 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1280 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1284 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1286 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1288 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1292 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1296 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1300 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1304 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1308 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1310 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1312 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1314 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1316 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1320 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1324 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1326 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1328 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1332 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1334 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1336 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1340 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1344 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1348 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1350 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1352 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1354 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1356 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1360 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1364 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1366 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1368 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1372 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1374 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1376 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1380 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1384 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1388 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1392 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1394 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1396 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1398 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1400 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1404 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1408 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1410 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1412 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1416 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1418 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1420 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1424 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1428 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1432 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1434 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1436 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1438 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1440 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1444 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1448 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1450 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1452 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1456 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1458 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1460 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1464 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1468 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1472 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1476 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1480 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1484 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1490 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1492 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1494 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1496 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1500 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1504 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1506 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1508 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1512 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1514 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1516 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1520 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1524 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1528 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1530 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1532 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1534 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1536 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1540 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1544 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1546 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1548 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1552 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1554 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1556 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1560 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1564 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1568 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1572 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1574 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1576 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1578 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1580 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1584 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1588 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1590 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1592 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1596 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1598 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1600 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1604 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1608 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1612 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1614 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1616 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1618 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1620 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1624 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1628 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1630 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1632 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1636 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1638 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1640 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1644 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1648 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1652 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1656 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1660 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1662 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1664 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1666 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1668 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1672 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1676 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1678 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1680 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1684 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1686 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1688 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1692 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1696 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1700 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1702 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1704 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1706 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1708 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1712 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1716 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1718 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1720 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1724 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1726 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1728 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1732 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1736 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1740 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1744 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1746 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1748 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1750 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1752 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1756 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1760 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1762 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1764 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1768 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1770 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1772 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1776 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1780 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1784 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1786 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1788 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1790 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1792 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1796 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1800 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1802 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1804 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1808 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1810 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1812 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1816 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1820 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1824 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1828 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1832 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$1836 ($mux).
Mapping top.$flatten\U01.$verific$equal_133$encoder.v:14$832 ($eq).
Mapping top.$flatten\U01.$verific$equal_134$encoder.v:15$833 ($eq).
Mapping top.$flatten\U01.$verific$equal_135$encoder.v:16$834 ($eq).
Mapping top.$flatten\U01.$verific$equal_136$encoder.v:17$835 ($eq).
Mapping top.$flatten\U01.$verific$equal_137$encoder.v:18$836 ($eq).
Mapping top.$flatten\U01.$verific$equal_138$encoder.v:19$837 ($eq).
Mapping top.$flatten\U01.$verific$equal_139$encoder.v:20$838 ($eq).
Mapping top.$flatten\U01.$verific$equal_140$encoder.v:21$839 ($eq).
Mapping top.$flatten\U01.$verific$equal_141$encoder.v:22$840 ($eq).
Mapping top.$flatten\U01.$verific$equal_142$encoder.v:23$841 ($eq).
Mapping top.$flatten\U01.$verific$equal_143$encoder.v:24$842 ($eq).
Mapping top.$flatten\U01.$verific$equal_144$encoder.v:25$843 ($eq).
Mapping top.$flatten\U01.$verific$equal_145$encoder.v:26$844 ($eq).
Mapping top.$flatten\U01.$verific$equal_146$encoder.v:27$845 ($eq).
Mapping top.$flatten\U01.$verific$equal_147$encoder.v:28$846 ($eq).
Mapping top.$flatten\U01.$verific$equal_148$encoder.v:29$847 ($eq).
Mapping top.$flatten\U01.$verific$equal_149$encoder.v:30$848 ($eq).
Mapping top.$flatten\U01.$verific$equal_150$encoder.v:31$849 ($eq).
Mapping top.$flatten\U01.$verific$equal_151$encoder.v:32$850 ($eq).
Mapping top.$flatten\U01.$verific$equal_152$encoder.v:33$851 ($eq).
Mapping top.$flatten\U01.$verific$equal_153$encoder.v:34$852 ($eq).
Mapping top.$flatten\U01.$verific$equal_154$encoder.v:35$853 ($eq).
Mapping top.$flatten\U01.$verific$equal_155$encoder.v:36$854 ($eq).
Mapping top.$flatten\U01.$verific$equal_156$encoder.v:37$855 ($eq).
Mapping top.$flatten\U01.$verific$equal_157$encoder.v:38$856 ($eq).
Mapping top.$flatten\U01.$verific$equal_158$encoder.v:39$857 ($eq).
Mapping top.$flatten\U01.$verific$equal_159$encoder.v:40$858 ($eq).
Mapping top.$flatten\U01.$verific$equal_160$encoder.v:41$859 ($eq).
Mapping top.$flatten\U01.$verific$equal_161$encoder.v:42$860 ($eq).
Mapping top.$flatten\U01.$verific$equal_162$encoder.v:43$861 ($eq).
Mapping top.$flatten\U01.$verific$equal_163$encoder.v:44$862 ($eq).
Mapping top.$flatten\U01.$verific$equal_164$encoder.v:46$863 ($eq).
Mapping top.$flatten\U01.$verific$equal_165$encoder.v:47$864 ($eq).
Mapping top.$flatten\U01.$verific$equal_166$encoder.v:48$865 ($eq).
Mapping top.$flatten\U01.$verific$equal_167$encoder.v:49$866 ($eq).
Mapping top.$flatten\U01.$verific$equal_168$encoder.v:50$867 ($eq).
Mapping top.$flatten\U01.$verific$equal_169$encoder.v:51$868 ($eq).
Mapping top.$flatten\U01.$verific$equal_170$encoder.v:52$869 ($eq).
Mapping top.$flatten\U01.$verific$equal_171$encoder.v:53$870 ($eq).
Mapping top.$flatten\U01.$verific$equal_172$encoder.v:54$871 ($eq).
Mapping top.$flatten\U01.$verific$equal_173$encoder.v:55$872 ($eq).
Mapping top.$flatten\U01.$verific$equal_174$encoder.v:56$873 ($eq).
Mapping top.$flatten\U01.$verific$equal_175$encoder.v:57$874 ($eq).
Mapping top.$flatten\U01.$verific$equal_176$encoder.v:58$875 ($eq).
Mapping top.$flatten\U01.$verific$equal_177$encoder.v:59$876 ($eq).
Mapping top.$flatten\U01.$verific$equal_178$encoder.v:60$877 ($eq).
Mapping top.$flatten\U01.$verific$equal_179$encoder.v:61$878 ($eq).
Mapping top.$flatten\U01.$verific$equal_180$encoder.v:62$879 ($eq).
Mapping top.$flatten\U01.$verific$equal_181$encoder.v:63$880 ($eq).
Mapping top.$flatten\U01.$verific$equal_182$encoder.v:64$881 ($eq).
Mapping top.$flatten\U01.$verific$equal_183$encoder.v:65$882 ($eq).
Mapping top.$flatten\U01.$verific$equal_184$encoder.v:66$883 ($eq).
Mapping top.$flatten\U01.$verific$equal_185$encoder.v:67$884 ($eq).
Mapping top.$flatten\U01.$verific$equal_186$encoder.v:68$885 ($eq).
Mapping top.$flatten\U01.$verific$equal_187$encoder.v:69$886 ($eq).
Mapping top.$flatten\U01.$verific$equal_188$encoder.v:70$887 ($eq).
Mapping top.$flatten\U01.$verific$equal_189$encoder.v:71$888 ($eq).
Mapping top.$flatten\U01.$verific$equal_190$encoder.v:72$889 ($eq).
Mapping top.$flatten\U01.$verific$equal_191$encoder.v:73$890 ($eq).
Mapping top.$flatten\U01.$verific$equal_192$encoder.v:74$891 ($eq).
Mapping top.$flatten\U01.$verific$equal_193$encoder.v:75$892 ($eq).
Mapping top.$flatten\U01.$verific$equal_194$encoder.v:76$893 ($eq).
Mapping top.$flatten\U01.$verific$equal_195$encoder.v:77$894 ($eq).
Mapping top.$flatten\U01.$verific$equal_196$encoder.v:79$895 ($eq).
Mapping top.$flatten\U01.$verific$equal_197$encoder.v:80$896 ($eq).
Mapping top.$flatten\U01.$verific$equal_198$encoder.v:81$897 ($eq).
Mapping top.$flatten\U01.$verific$equal_199$encoder.v:82$898 ($eq).
Mapping top.$flatten\U01.$verific$equal_200$encoder.v:83$899 ($eq).
Mapping top.$flatten\U01.$verific$equal_201$encoder.v:84$900 ($eq).
Mapping top.$flatten\U01.$verific$equal_202$encoder.v:85$901 ($eq).
Mapping top.$flatten\U01.$verific$equal_203$encoder.v:86$902 ($eq).
Mapping top.$flatten\U01.$verific$equal_204$encoder.v:87$903 ($eq).
Mapping top.$flatten\U01.$verific$equal_205$encoder.v:88$904 ($eq).
Mapping top.$flatten\U01.$verific$equal_206$encoder.v:89$905 ($eq).
Mapping top.$flatten\U01.$verific$equal_207$encoder.v:90$906 ($eq).
Mapping top.$flatten\U01.$verific$equal_208$encoder.v:91$907 ($eq).
Mapping top.$flatten\U01.$verific$equal_209$encoder.v:92$908 ($eq).
Mapping top.$flatten\U01.$verific$equal_210$encoder.v:93$909 ($eq).
Mapping top.$flatten\U01.$verific$equal_211$encoder.v:94$910 ($eq).
Mapping top.$flatten\U01.$verific$equal_212$encoder.v:95$911 ($eq).
Mapping top.$flatten\U01.$verific$equal_213$encoder.v:96$912 ($eq).
Mapping top.$flatten\U01.$verific$equal_214$encoder.v:97$913 ($eq).
Mapping top.$flatten\U01.$verific$equal_215$encoder.v:98$914 ($eq).
Mapping top.$flatten\U01.$verific$equal_216$encoder.v:99$915 ($eq).
Mapping top.$flatten\U01.$verific$equal_217$encoder.v:100$916 ($eq).
Mapping top.$flatten\U01.$verific$equal_218$encoder.v:101$917 ($eq).
Mapping top.$flatten\U01.$verific$equal_219$encoder.v:102$918 ($eq).
Mapping top.$flatten\U01.$verific$equal_220$encoder.v:103$919 ($eq).
Mapping top.$flatten\U01.$verific$equal_221$encoder.v:104$920 ($eq).
Mapping top.$flatten\U01.$verific$equal_222$encoder.v:105$921 ($eq).
Mapping top.$flatten\U01.$verific$equal_223$encoder.v:106$922 ($eq).
Mapping top.$flatten\U01.$verific$equal_224$encoder.v:107$923 ($eq).
Mapping top.$flatten\U01.$verific$equal_225$encoder.v:108$924 ($eq).
Mapping top.$flatten\U01.$verific$equal_226$encoder.v:109$925 ($eq).
Mapping top.$flatten\U01.$verific$equal_227$encoder.v:110$926 ($eq).
Mapping top.$flatten\U01.$verific$equal_228$encoder.v:112$927 ($eq).
Mapping top.$flatten\U01.$verific$equal_229$encoder.v:113$928 ($eq).
Mapping top.$flatten\U01.$verific$equal_230$encoder.v:114$929 ($eq).
Mapping top.$flatten\U01.$verific$equal_231$encoder.v:115$930 ($eq).
Mapping top.$flatten\U01.$verific$equal_232$encoder.v:116$931 ($eq).
Mapping top.$flatten\U01.$verific$equal_233$encoder.v:117$932 ($eq).
Mapping top.$flatten\U01.$verific$equal_234$encoder.v:118$933 ($eq).
Mapping top.$flatten\U01.$verific$equal_235$encoder.v:119$934 ($eq).
Mapping top.$flatten\U01.$verific$equal_236$encoder.v:120$935 ($eq).
Mapping top.$flatten\U01.$verific$equal_237$encoder.v:121$936 ($eq).
Mapping top.$flatten\U01.$verific$equal_238$encoder.v:122$937 ($eq).
Mapping top.$flatten\U01.$verific$equal_239$encoder.v:123$938 ($eq).
Mapping top.$flatten\U01.$verific$equal_240$encoder.v:124$939 ($eq).
Mapping top.$flatten\U01.$verific$equal_241$encoder.v:125$940 ($eq).
Mapping top.$flatten\U01.$verific$equal_242$encoder.v:126$941 ($eq).
Mapping top.$flatten\U01.$verific$equal_243$encoder.v:127$942 ($eq).
Mapping top.$flatten\U01.$verific$equal_244$encoder.v:128$943 ($eq).
Mapping top.$flatten\U01.$verific$equal_245$encoder.v:129$944 ($eq).
Mapping top.$flatten\U01.$verific$equal_246$encoder.v:130$945 ($eq).
Mapping top.$flatten\U01.$verific$equal_247$encoder.v:131$946 ($eq).
Mapping top.$flatten\U01.$verific$equal_248$encoder.v:132$947 ($eq).
Mapping top.$flatten\U01.$verific$equal_249$encoder.v:133$948 ($eq).
Mapping top.$flatten\U01.$verific$equal_250$encoder.v:134$949 ($eq).
Mapping top.$flatten\U01.$verific$equal_251$encoder.v:135$950 ($eq).
Mapping top.$flatten\U01.$verific$equal_252$encoder.v:136$951 ($eq).
Mapping top.$flatten\U01.$verific$equal_253$encoder.v:137$952 ($eq).
Mapping top.$flatten\U01.$verific$equal_254$encoder.v:138$953 ($eq).
Mapping top.$flatten\U01.$verific$equal_255$encoder.v:139$954 ($eq).
Mapping top.$flatten\U01.$verific$equal_256$encoder.v:140$955 ($eq).
Mapping top.$flatten\U01.$verific$equal_257$encoder.v:141$956 ($eq).
Mapping top.$flatten\U01.$verific$equal_258$encoder.v:142$957 ($eq).
Mapping top.$flatten\U01.$verific$equal_259$encoder.v:143$958 ($eq).
Mapping top.$flatten\U011.$verific$equal_133$encoder.v:14$832 ($eq).
Mapping top.$flatten\U011.$verific$equal_134$encoder.v:15$833 ($eq).
Mapping top.$flatten\U011.$verific$equal_135$encoder.v:16$834 ($eq).
Mapping top.$flatten\U011.$verific$equal_136$encoder.v:17$835 ($eq).
Mapping top.$flatten\U011.$verific$equal_137$encoder.v:18$836 ($eq).
Mapping top.$flatten\U011.$verific$equal_138$encoder.v:19$837 ($eq).
Mapping top.$flatten\U011.$verific$equal_139$encoder.v:20$838 ($eq).
Mapping top.$flatten\U011.$verific$equal_140$encoder.v:21$839 ($eq).
Mapping top.$flatten\U011.$verific$equal_141$encoder.v:22$840 ($eq).
Mapping top.$flatten\U011.$verific$equal_142$encoder.v:23$841 ($eq).
Mapping top.$flatten\U011.$verific$equal_143$encoder.v:24$842 ($eq).
Mapping top.$flatten\U011.$verific$equal_144$encoder.v:25$843 ($eq).
Mapping top.$flatten\U011.$verific$equal_145$encoder.v:26$844 ($eq).
Mapping top.$flatten\U011.$verific$equal_146$encoder.v:27$845 ($eq).
Mapping top.$flatten\U011.$verific$equal_147$encoder.v:28$846 ($eq).
Mapping top.$flatten\U011.$verific$equal_148$encoder.v:29$847 ($eq).
Mapping top.$flatten\U011.$verific$equal_149$encoder.v:30$848 ($eq).
Mapping top.$flatten\U011.$verific$equal_150$encoder.v:31$849 ($eq).
Mapping top.$flatten\U011.$verific$equal_151$encoder.v:32$850 ($eq).
Mapping top.$flatten\U011.$verific$equal_152$encoder.v:33$851 ($eq).
Mapping top.$flatten\U011.$verific$equal_153$encoder.v:34$852 ($eq).
Mapping top.$flatten\U011.$verific$equal_154$encoder.v:35$853 ($eq).
Mapping top.$flatten\U011.$verific$equal_155$encoder.v:36$854 ($eq).
Mapping top.$flatten\U011.$verific$equal_156$encoder.v:37$855 ($eq).
Mapping top.$flatten\U011.$verific$equal_157$encoder.v:38$856 ($eq).
Mapping top.$flatten\U011.$verific$equal_158$encoder.v:39$857 ($eq).
Mapping top.$flatten\U011.$verific$equal_159$encoder.v:40$858 ($eq).
Mapping top.$flatten\U011.$verific$equal_160$encoder.v:41$859 ($eq).
Mapping top.$flatten\U011.$verific$equal_161$encoder.v:42$860 ($eq).
Mapping top.$flatten\U011.$verific$equal_162$encoder.v:43$861 ($eq).
Mapping top.$flatten\U011.$verific$equal_163$encoder.v:44$862 ($eq).
Mapping top.$flatten\U011.$verific$equal_164$encoder.v:46$863 ($eq).
Mapping top.$flatten\U011.$verific$equal_165$encoder.v:47$864 ($eq).
Mapping top.$flatten\U011.$verific$equal_166$encoder.v:48$865 ($eq).
Mapping top.$flatten\U011.$verific$equal_167$encoder.v:49$866 ($eq).
Mapping top.$flatten\U011.$verific$equal_168$encoder.v:50$867 ($eq).
Mapping top.$flatten\U011.$verific$equal_169$encoder.v:51$868 ($eq).
Mapping top.$flatten\U011.$verific$equal_170$encoder.v:52$869 ($eq).
Mapping top.$flatten\U011.$verific$equal_171$encoder.v:53$870 ($eq).
Mapping top.$flatten\U011.$verific$equal_172$encoder.v:54$871 ($eq).
Mapping top.$flatten\U011.$verific$equal_173$encoder.v:55$872 ($eq).
Mapping top.$flatten\U011.$verific$equal_174$encoder.v:56$873 ($eq).
Mapping top.$flatten\U011.$verific$equal_175$encoder.v:57$874 ($eq).
Mapping top.$flatten\U011.$verific$equal_176$encoder.v:58$875 ($eq).
Mapping top.$flatten\U011.$verific$equal_177$encoder.v:59$876 ($eq).
Mapping top.$flatten\U011.$verific$equal_178$encoder.v:60$877 ($eq).
Mapping top.$flatten\U011.$verific$equal_179$encoder.v:61$878 ($eq).
Mapping top.$flatten\U011.$verific$equal_180$encoder.v:62$879 ($eq).
Mapping top.$flatten\U011.$verific$equal_181$encoder.v:63$880 ($eq).
Mapping top.$flatten\U011.$verific$equal_182$encoder.v:64$881 ($eq).
Mapping top.$flatten\U011.$verific$equal_183$encoder.v:65$882 ($eq).
Mapping top.$flatten\U011.$verific$equal_184$encoder.v:66$883 ($eq).
Mapping top.$flatten\U011.$verific$equal_185$encoder.v:67$884 ($eq).
Mapping top.$flatten\U011.$verific$equal_186$encoder.v:68$885 ($eq).
Mapping top.$flatten\U011.$verific$equal_187$encoder.v:69$886 ($eq).
Mapping top.$flatten\U011.$verific$equal_188$encoder.v:70$887 ($eq).
Mapping top.$flatten\U011.$verific$equal_189$encoder.v:71$888 ($eq).
Mapping top.$flatten\U011.$verific$equal_190$encoder.v:72$889 ($eq).
Mapping top.$flatten\U011.$verific$equal_191$encoder.v:73$890 ($eq).
Mapping top.$flatten\U011.$verific$equal_192$encoder.v:74$891 ($eq).
Mapping top.$flatten\U011.$verific$equal_193$encoder.v:75$892 ($eq).
Mapping top.$flatten\U011.$verific$equal_194$encoder.v:76$893 ($eq).
Mapping top.$flatten\U011.$verific$equal_195$encoder.v:77$894 ($eq).
Mapping top.$flatten\U011.$verific$equal_196$encoder.v:79$895 ($eq).
Mapping top.$flatten\U011.$verific$equal_197$encoder.v:80$896 ($eq).
Mapping top.$flatten\U011.$verific$equal_198$encoder.v:81$897 ($eq).
Mapping top.$flatten\U011.$verific$equal_199$encoder.v:82$898 ($eq).
Mapping top.$flatten\U011.$verific$equal_200$encoder.v:83$899 ($eq).
Mapping top.$flatten\U011.$verific$equal_201$encoder.v:84$900 ($eq).
Mapping top.$flatten\U011.$verific$equal_202$encoder.v:85$901 ($eq).
Mapping top.$flatten\U011.$verific$equal_203$encoder.v:86$902 ($eq).
Mapping top.$flatten\U011.$verific$equal_204$encoder.v:87$903 ($eq).
Mapping top.$flatten\U011.$verific$equal_205$encoder.v:88$904 ($eq).
Mapping top.$flatten\U011.$verific$equal_206$encoder.v:89$905 ($eq).
Mapping top.$flatten\U011.$verific$equal_207$encoder.v:90$906 ($eq).
Mapping top.$flatten\U011.$verific$equal_208$encoder.v:91$907 ($eq).
Mapping top.$flatten\U011.$verific$equal_209$encoder.v:92$908 ($eq).
Mapping top.$flatten\U011.$verific$equal_210$encoder.v:93$909 ($eq).
Mapping top.$flatten\U011.$verific$equal_211$encoder.v:94$910 ($eq).
Mapping top.$flatten\U011.$verific$equal_212$encoder.v:95$911 ($eq).
Mapping top.$flatten\U011.$verific$equal_213$encoder.v:96$912 ($eq).
Mapping top.$flatten\U011.$verific$equal_214$encoder.v:97$913 ($eq).
Mapping top.$flatten\U011.$verific$equal_215$encoder.v:98$914 ($eq).
Mapping top.$flatten\U011.$verific$equal_216$encoder.v:99$915 ($eq).
Mapping top.$flatten\U011.$verific$equal_217$encoder.v:100$916 ($eq).
Mapping top.$flatten\U011.$verific$equal_218$encoder.v:101$917 ($eq).
Mapping top.$flatten\U011.$verific$equal_219$encoder.v:102$918 ($eq).
Mapping top.$flatten\U011.$verific$equal_220$encoder.v:103$919 ($eq).
Mapping top.$flatten\U011.$verific$equal_221$encoder.v:104$920 ($eq).
Mapping top.$flatten\U011.$verific$equal_222$encoder.v:105$921 ($eq).
Mapping top.$flatten\U011.$verific$equal_223$encoder.v:106$922 ($eq).
Mapping top.$flatten\U011.$verific$equal_224$encoder.v:107$923 ($eq).
Mapping top.$flatten\U011.$verific$equal_225$encoder.v:108$924 ($eq).
Mapping top.$flatten\U011.$verific$equal_226$encoder.v:109$925 ($eq).
Mapping top.$flatten\U011.$verific$equal_227$encoder.v:110$926 ($eq).
Mapping top.$flatten\U011.$verific$equal_228$encoder.v:112$927 ($eq).
Mapping top.$flatten\U011.$verific$equal_229$encoder.v:113$928 ($eq).
Mapping top.$flatten\U011.$verific$equal_230$encoder.v:114$929 ($eq).
Mapping top.$flatten\U011.$verific$equal_231$encoder.v:115$930 ($eq).
Mapping top.$flatten\U011.$verific$equal_232$encoder.v:116$931 ($eq).
Mapping top.$flatten\U011.$verific$equal_233$encoder.v:117$932 ($eq).
Mapping top.$flatten\U011.$verific$equal_234$encoder.v:118$933 ($eq).
Mapping top.$flatten\U011.$verific$equal_235$encoder.v:119$934 ($eq).
Mapping top.$flatten\U011.$verific$equal_236$encoder.v:120$935 ($eq).
Mapping top.$flatten\U011.$verific$equal_237$encoder.v:121$936 ($eq).
Mapping top.$flatten\U011.$verific$equal_238$encoder.v:122$937 ($eq).
Mapping top.$flatten\U011.$verific$equal_239$encoder.v:123$938 ($eq).
Mapping top.$flatten\U011.$verific$equal_240$encoder.v:124$939 ($eq).
Mapping top.$flatten\U011.$verific$equal_241$encoder.v:125$940 ($eq).
Mapping top.$flatten\U011.$verific$equal_242$encoder.v:126$941 ($eq).
Mapping top.$flatten\U011.$verific$equal_243$encoder.v:127$942 ($eq).
Mapping top.$flatten\U011.$verific$equal_244$encoder.v:128$943 ($eq).
Mapping top.$flatten\U011.$verific$equal_245$encoder.v:129$944 ($eq).
Mapping top.$flatten\U011.$verific$equal_246$encoder.v:130$945 ($eq).
Mapping top.$flatten\U011.$verific$equal_247$encoder.v:131$946 ($eq).
Mapping top.$flatten\U011.$verific$equal_248$encoder.v:132$947 ($eq).
Mapping top.$flatten\U011.$verific$equal_249$encoder.v:133$948 ($eq).
Mapping top.$flatten\U011.$verific$equal_250$encoder.v:134$949 ($eq).
Mapping top.$flatten\U011.$verific$equal_251$encoder.v:135$950 ($eq).
Mapping top.$flatten\U011.$verific$equal_252$encoder.v:136$951 ($eq).
Mapping top.$flatten\U011.$verific$equal_253$encoder.v:137$952 ($eq).
Mapping top.$flatten\U011.$verific$equal_254$encoder.v:138$953 ($eq).
Mapping top.$flatten\U011.$verific$equal_255$encoder.v:139$954 ($eq).
Mapping top.$flatten\U011.$verific$equal_256$encoder.v:140$955 ($eq).
Mapping top.$flatten\U011.$verific$equal_257$encoder.v:141$956 ($eq).
Mapping top.$flatten\U011.$verific$equal_258$encoder.v:142$957 ($eq).
Mapping top.$flatten\U011.$verific$equal_259$encoder.v:143$958 ($eq).
Mapping top.$flatten\U02.$verific$mux_131$decoder.v:145$1096 ($bmux).
Mapping top.$flatten\U021.$verific$mux_131$decoder.v:145$1096 ($bmux).

24. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~65410 debug messages>

25. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~94779 debug messages>
Removed a total of 31593 cells.

26. Executing OPT_DFF pass (perform DFF optimizations).

27. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 718 unused wires.
<suppressed ~1 debug messages>

28. Executing OPT pass (performing simple optimizations).

28.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

28.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

28.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

28.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

28.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

28.6. Executing OPT_DFF pass (perform DFF optimizations).

28.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

28.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

28.9. Finished OPT passes. (There is nothing left to do.)

29. Executing OPT pass (performing simple optimizations).

29.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~252 debug messages>

29.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

29.3. Executing OPT_DFF pass (perform DFF optimizations).

29.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

29.5. Finished fast OPT passes.

30. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

31. Executing OPT pass (performing simple optimizations).

31.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

31.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

31.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

31.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

31.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

31.6. Executing OPT_SHARE pass.

31.7. Executing OPT_DFF pass (perform DFF optimizations).

31.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

31.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

31.10. Finished OPT passes. (There is nothing left to do.)

32. Executing TECHMAP pass (map to technology primitives).

32.1. Executing Verilog-2005 frontend: /home/users/aram/Workspace/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/aram/Workspace/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

32.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~71 debug messages>

33. Executing OPT pass (performing simple optimizations).

33.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

33.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

33.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

33.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

33.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

33.6. Executing OPT_DFF pass (perform DFF optimizations).

33.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

33.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

33.9. Finished OPT passes. (There is nothing left to do.)

34. Executing ABC pass (technology mapping using ABC).

34.1. Extracting gate netlist of module `\top' to `<abc-temp-dir>/input.blif'..
Extracted 3719 gates and 3991 wires to a netlist network with 270 inputs and 270 outputs.

34.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + source /home/users/aram/Workspace/yosys_verific_rs/scripts/synth/abc/abc_base6.a21.scr 
ABC: netlist  : i/o =    270/    270  and =    3052  lev =   31 (7.01)  mem = 0.05 MB
ABC: Mapping (K=6)  :  lut =    959  edge =    3669  lev =   14 (2.54)  mem = 0.04 MB
ABC: netlist  : i/o =    270/    270  and =    3280  lev =   26 (5.54)  mem = 0.05 MB
ABC: Mapping (K=6)  :  lut =    754  edge =    3387  lev =   13 (2.50)  mem = 0.03 MB
ABC: netlist  : i/o =    270/    270  and =    3325  lev =   26 (5.47)  mem = 0.05 MB
ABC: Mapping (K=6)  :  lut =    711  edge =    3323  lev =   13 (2.52)  mem = 0.03 MB
ABC: netlist  : i/o =    270/    270  and =    3512  lev =   22 (3.91)  mem = 0.06 MB
ABC: Mapping (K=6)  :  lut =    686  edge =    3345  lev =   12 (2.47)  mem = 0.03 MB
ABC: netlist  : i/o =    270/    270  and =    3102  lev =   27 (5.43)  mem = 0.05 MB
ABC: Mapping (K=6)  :  lut =    678  edge =    3056  lev =   14 (2.51)  mem = 0.03 MB
ABC: netlist  : i/o =    270/    270  and =    3117  lev =   27 (5.43)  mem = 0.07 MB
ABC: Mapping (K=6)  :  lut =    647  edge =    3032  lev =   13 (2.44)  mem = 0.03 MB
ABC: netlist  : i/o =    270/    270  and =    3103  lev =   24 (5.36)  mem = 0.06 MB
ABC: Mapping (K=6)  :  lut =    634  edge =    2986  lev =   12 (2.41)  mem = 0.03 MB
ABC: netlist  : i/o =    270/    270  and =    3125  lev =   28 (5.44)  mem = 0.07 MB
ABC: Mapping (K=6)  :  lut =    628  edge =    2965  lev =   12 (2.43)  mem = 0.03 MB
ABC: netlist  : i/o =    270/    270  and =    3270  lev =   28 (4.59)  mem = 0.07 MB
ABC: Mapping (K=6)  :  lut =    614  edge =    3039  lev =   14 (2.45)  mem = 0.03 MB
ABC: netlist  : i/o =    270/    270  and =    3341  lev =   27 (5.55)  mem = 0.07 MB
ABC: Mapping (K=6)  :  lut =    621  edge =    3034  lev =   12 (2.41)  mem = 0.03 MB
ABC: netlist  : i/o =    270/    270  and =    3189  lev =   27 (5.41)  mem = 0.07 MB
ABC: Mapping (K=6)  :  lut =    616  edge =    3008  lev =   13 (2.46)  mem = 0.03 MB
ABC: netlist  : i/o =    270/    270  and =    3199  lev =   27 (5.43)  mem = 0.07 MB
ABC: Mapping (K=6)  :  lut =    615  edge =    3004  lev =   12 (2.44)  mem = 0.03 MB
ABC: netlist  : i/o =    270/    270  and =    3194  lev =   26 (5.41)  mem = 0.07 MB
ABC: Mapping (K=6)  :  lut =    612  edge =    2997  lev =   12 (2.44)  mem = 0.03 MB
ABC: netlist  : i/o =    270/    270  and =    3194  lev =   26 (5.41)  mem = 0.05 MB
ABC: Mapping (K=6)  :  lut =    612  edge =    2997  lev =   12 (2.44)  mem = 0.03 MB
ABC: netlist  : i/o =    270/    270  and =    3194  lev =   26 (5.41)  mem = 0.07 MB
ABC: Mapping (K=6)  :  lut =    612  edge =    2997  lev =   12 (2.44)  mem = 0.03 MB
ABC: netlist  : i/o =    270/    270  and =    3195  lev =   27 (5.44)  mem = 0.05 MB
ABC: Mapping (K=6)  :  lut =    612  edge =    2997  lev =   12 (2.44)  mem = 0.03 MB
ABC: + write_blif <abc-temp-dir>/output.blif 

34.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:      612
ABC RESULTS:        internal signals:     3451
ABC RESULTS:           input signals:      270
ABC RESULTS:          output signals:      270
Removing temp directory.

35. Executing OPT pass (performing simple optimizations).

35.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

35.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

35.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

35.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

35.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

35.6. Executing OPT_DFF pass (perform DFF optimizations).

35.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 3184 unused wires.
<suppressed ~1 debug messages>

35.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

35.9. Rerunning OPT passes. (Maybe there is more to do..)

35.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

35.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

35.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

35.13. Executing OPT_DFF pass (perform DFF optimizations).

35.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

35.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

35.16. Finished OPT passes. (There is nothing left to do.)

36. Executing HIERARCHY pass (managing design hierarchy).

36.1. Analyzing design hierarchy..
Top module:  \top

36.2. Analyzing design hierarchy..
Top module:  \top
Removed 0 unused modules.

37. Printing statistics.

=== top ===

   Number of wires:                362
   Number of wire bits:           1680
   Number of public wires:          20
   Number of public wire bits:    1338
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                882
     $_SDFF_PP0_                   270
     $lut                          612

38. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 8 unused wires.
<suppressed ~8 debug messages>

39. Executing BLIF backend.

End of script. Logfile hash: 8d4c7c4f49, CPU: user 11.66s system 0.19s, MEM: 202.67 MB peak
Yosys 0.14+36 (git sha1 15a4e900b, gcc 7.1.0 -fPIC -Os)
Time spent: 48% 1x abc (10 sec), 25% 23x opt_expr (5 sec), ...
