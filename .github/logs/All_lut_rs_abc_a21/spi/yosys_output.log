
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.14+36 (git sha1 15a4e900b, gcc 7.1.0 -fPIC -Os)


-- Executing script file `yosys.ys' --

1. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Jan22_SW_Release, released at Sat Jan 29 02:42:49 2022.

2. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Jan22_SW_Release, released at Sat Jan 29 02:42:49 2022.
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'spi_clgen.v'
VERIFIC-INFO [VERI-1328] spi_clgen.v:41: analyzing included file 'spi_defines.v'
VERIFIC-INFO [VERI-2320] spi_clgen.v:41: back to file 'spi_clgen.v'
VERIFIC-INFO [VERI-1328] spi_clgen.v:42: analyzing included file 'timescale.v'
VERIFIC-INFO [VERI-2320] spi_clgen.v:42: back to file 'spi_clgen.v'
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'spi_defines.v'
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'spi_shift.v'
VERIFIC-INFO [VERI-1328] spi_shift.v:41: analyzing included file 'spi_defines.v'
VERIFIC-INFO [VERI-2320] spi_shift.v:41: back to file 'spi_shift.v'
VERIFIC-INFO [VERI-1328] spi_shift.v:42: analyzing included file 'timescale.v'
VERIFIC-INFO [VERI-2320] spi_shift.v:42: back to file 'spi_shift.v'
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'spi_top.v'
VERIFIC-INFO [VERI-1328] spi_top.v:42: analyzing included file 'spi_defines.v'
VERIFIC-INFO [VERI-2320] spi_top.v:42: back to file 'spi_top.v'
VERIFIC-INFO [VERI-1328] spi_top.v:43: analyzing included file 'timescale.v'
VERIFIC-INFO [VERI-2320] spi_top.v:43: back to file 'spi_top.v'
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'timescale.v'

3. Executing HIERARCHY pass (managing design hierarchy).
VERIFIC-INFO [VERI-1018] spi_top.v:45: compiling module 'spi_top'
VERIFIC-WARNING [VERI-2371] spi_top.v:145: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] spi_top.v:147: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] spi_top.v:154: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] spi_top.v:156: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] spi_top.v:166: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] spi_top.v:168: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] spi_top.v:170: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] spi_top.v:177: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] spi_top.v:186: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] spi_top.v:188: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] spi_top.v:215: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] spi_top.v:219: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] spi_top.v:221: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] spi_top.v:224: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] spi_top.v:239: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] spi_top.v:244: delay control is not supported for synthesis
VERIFIC-INFO [VERI-1018] spi_clgen.v:44: compiling module 'spi_clgen'
VERIFIC-WARNING [VERI-2371] spi_clgen.v:74: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] spi_clgen.v:78: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] spi_clgen.v:80: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] spi_clgen.v:88: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] spi_clgen.v:90: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] spi_clgen.v:98: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] spi_clgen.v:99: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] spi_clgen.v:103: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] spi_clgen.v:104: delay control is not supported for synthesis
VERIFIC-INFO [VERI-1018] spi_shift.v:44: compiling module 'spi_shift'
VERIFIC-WARNING [VERI-2371] spi_shift.v:95: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] spi_shift.v:99: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] spi_shift.v:101: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] spi_shift.v:109: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] spi_shift.v:111: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] spi_shift.v:113: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] spi_shift.v:120: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] spi_shift.v:122: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] spi_shift.v:129: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] spi_shift.v:134: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] spi_shift.v:136: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] spi_shift.v:138: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] spi_shift.v:140: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] spi_shift.v:145: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] spi_shift.v:147: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] spi_shift.v:149: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] spi_shift.v:151: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] spi_shift.v:156: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] spi_shift.v:158: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] spi_shift.v:160: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] spi_shift.v:162: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] spi_shift.v:167: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] spi_shift.v:169: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] spi_shift.v:171: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] spi_shift.v:173: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] spi_shift.v:234: delay control is not supported for synthesis
Importing module spi_top.
Importing module spi_clgen.
Importing module spi_shift.

3.1. Analyzing design hierarchy..
Top module:  \spi_top
Used module:     \spi_shift
Used module:     \spi_clgen

3.2. Analyzing design hierarchy..
Top module:  \spi_top
Used module:     \spi_shift
Used module:     \spi_clgen
Removed 0 unused modules.

4. Executing PROC pass (convert processes to netlists).

4.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

4.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

4.4. Executing PROC_INIT pass (extract init attributes).

4.5. Executing PROC_ARST pass (detect async resets in processes).

4.6. Executing PROC_MUX pass (convert decision trees to multiplexers).

4.7. Executing PROC_DLATCH pass (convert process syncs to latches).

4.8. Executing PROC_DFF pass (convert process syncs to FFs).

4.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

4.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_shift.
<suppressed ~2 debug messages>
Optimizing module spi_clgen.
<suppressed ~2 debug messages>
Optimizing module spi_top.
<suppressed ~5 debug messages>

5. Executing FLATTEN pass (flatten design).
Deleting now unused module spi_shift.
Deleting now unused module spi_clgen.
<suppressed ~2 debug messages>

6. Executing TRIBUF pass.

7. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_top.

8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_top..
Removed 0 unused cells and 305 unused wires.
<suppressed ~45 debug messages>

9. Executing CHECK pass (checking for obvious problems).
Checking module spi_top...
Found and reported 0 problems.

10. Executing DEMINOUT pass (demote inout ports to input or output).

11. Executing OPT pass (performing simple optimizations).

11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_top.
<suppressed ~2 debug messages>

11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_top'.
<suppressed ~18 debug messages>
Removed a total of 6 cells.

11.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \spi_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~16 debug messages>

11.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \spi_top.
Performed a total of 0 changes.

11.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_top'.
Removed a total of 0 cells.

11.6. Executing OPT_DFF pass (perform DFF optimizations).
Changing const-value async load to async reset on $verific$wb_int_o_reg$spi_top.v:170$139 ($aldff) from module spi_top.
Changing const-value async load to async reset on $verific$wb_dat_o_reg$spi_top.v:147$126 ($aldff) from module spi_top.
Changing const-value async load to async reset on $verific$wb_ack_o_reg$spi_top.v:156$131 ($aldff) from module spi_top.
Changing const-value async load to async reset on $verific$ss_reg$spi_top.v:270$176 ($aldff) from module spi_top.
Changing const-value async load to async reset on $flatten\clgen.$verific$cnt_reg$spi_clgen.v:81$443 ($aldff) from module spi_top.
Changing const-value async load to async reset on $verific$divider_reg$spi_top.v:208$149 ($aldff) from module spi_top.
Changing const-value async load to async reset on $verific$ctrl_reg$spi_top.v:224$162 ($aldff) from module spi_top.
Changing const-value async load to async reset on $flatten\shift.$verific$tip_reg$spi_shift.v:113$711 ($aldff) from module spi_top.
Changing const-value async load to async reset on $flatten\shift.$verific$s_out_reg$spi_shift.v:122$716 ($aldff) from module spi_top.
Changing const-value async load to async reset on $flatten\clgen.$verific$clk_out_reg$spi_clgen.v:90$452 ($aldff) from module spi_top.
Changing const-value async load to async reset on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($aldff) from module spi_top.
Changing const-value async load to async reset on $flatten\shift.$verific$cnt_reg$spi_shift.v:102$702 ($aldff) from module spi_top.
Changing const-value async load to async reset on $flatten\clgen.$verific$pos_edge_reg$spi_clgen.v:105$469 ($aldff) from module spi_top.
Changing const-value async load to async reset on $flatten\clgen.$verific$neg_edge_reg$spi_clgen.v:105$470 ($aldff) from module spi_top.

11.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_top..
Removed 0 unused cells and 8 unused wires.
<suppressed ~1 debug messages>

11.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_top.

11.9. Rerunning OPT passes. (Maybe there is more to do..)

11.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \spi_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~16 debug messages>

11.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \spi_top.
Performed a total of 0 changes.

11.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_top'.
Removed a total of 0 cells.

11.13. Executing OPT_DFF pass (perform DFF optimizations).

11.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_top..

11.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_top.

11.16. Finished OPT passes. (There is nothing left to do.)

12. Executing FSM pass (extract and optimize FSM).

12.1. Executing FSM_DETECT pass (finding FSMs in design).

12.2. Executing FSM_EXTRACT pass (extracting FSM from design).

12.3. Executing FSM_OPT pass (simple optimizations of FSMs).

12.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_top..

12.5. Executing FSM_OPT pass (simple optimizations of FSMs).

12.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

12.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

12.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

13. Executing OPT pass (performing simple optimizations).

13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_top.

13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_top'.
Removed a total of 0 cells.

13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \spi_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~16 debug messages>

13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \spi_top.
Performed a total of 0 changes.

13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_top'.
Removed a total of 0 cells.

13.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $verific$wb_int_o_reg$spi_top.v:170$139 ($adff) from module spi_top (D = $verific$n351$62, Q = \wb_int_o).
Adding EN signal on $verific$ss_reg$spi_top.v:270$176 ($adff) from module spi_top (D = \wb_dat_i [7:0], Q = \ss).
Adding EN signal on $verific$divider_reg$spi_top.v:208$149 ($adff) from module spi_top (D = \wb_dat_i [7:0], Q = \divider [7:0]).
Adding EN signal on $verific$divider_reg$spi_top.v:208$149 ($adff) from module spi_top (D = \wb_dat_i [15:8], Q = \divider [15:8]).
Adding EN signal on $verific$ctrl_reg$spi_top.v:224$162 ($adff) from module spi_top (D = $verific$n461$86, Q = \ctrl [7:0]).
Adding EN signal on $verific$ctrl_reg$spi_top.v:224$162 ($adff) from module spi_top (D = \wb_dat_i [13:9], Q = \ctrl [13:9]).
Adding EN signal on $verific$ctrl_reg$spi_top.v:224$162 ($adff) from module spi_top (D = $verific$n504$89 [8], Q = \ctrl [8]).
Adding EN signal on $flatten\shift.$verific$tip_reg$spi_shift.v:113$711 ($adff) from module spi_top (D = $flatten\shift.$verific$n333$491, Q = \shift.tip).
Adding EN signal on $flatten\shift.$verific$s_out_reg$spi_shift.v:122$716 ($adff) from module spi_top (D = $flatten\shift.$verific$n339$493, Q = \shift.s_out).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1013$651 [96], Q = \shift.data [96]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1013$651 [97], Q = \shift.data [97]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1013$651 [98], Q = \shift.data [98]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1013$651 [99], Q = \shift.data [99]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1013$651 [100], Q = \shift.data [100]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1013$651 [101], Q = \shift.data [101]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1013$651 [102], Q = \shift.data [102]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1013$651 [103], Q = \shift.data [103]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1142$652 [64], Q = \shift.data [64]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1142$652 [65], Q = \shift.data [65]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1142$652 [66], Q = \shift.data [66]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1142$652 [67], Q = \shift.data [67]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1142$652 [68], Q = \shift.data [68]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1142$652 [69], Q = \shift.data [69]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1142$652 [70], Q = \shift.data [70]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1142$652 [71], Q = \shift.data [71]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1271$653 [32], Q = \shift.data [32]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1271$653 [33], Q = \shift.data [33]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1271$653 [34], Q = \shift.data [34]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1271$653 [35], Q = \shift.data [35]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1271$653 [36], Q = \shift.data [36]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1271$653 [37], Q = \shift.data [37]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1271$653 [38], Q = \shift.data [38]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1271$653 [39], Q = \shift.data [39]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1400$654 [0], Q = \shift.data [0]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1400$654 [1], Q = \shift.data [1]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1400$654 [2], Q = \shift.data [2]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1400$654 [3], Q = \shift.data [3]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1400$654 [4], Q = \shift.data [4]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1400$654 [5], Q = \shift.data [5]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1400$654 [6], Q = \shift.data [6]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1400$654 [7], Q = \shift.data [7]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1013$651 [104], Q = \shift.data [104]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1013$651 [105], Q = \shift.data [105]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1013$651 [106], Q = \shift.data [106]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1013$651 [107], Q = \shift.data [107]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1013$651 [108], Q = \shift.data [108]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1013$651 [109], Q = \shift.data [109]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1013$651 [110], Q = \shift.data [110]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1013$651 [111], Q = \shift.data [111]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1142$652 [72], Q = \shift.data [72]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1142$652 [73], Q = \shift.data [73]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1142$652 [74], Q = \shift.data [74]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1142$652 [75], Q = \shift.data [75]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1142$652 [76], Q = \shift.data [76]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1142$652 [77], Q = \shift.data [77]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1142$652 [78], Q = \shift.data [78]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1142$652 [79], Q = \shift.data [79]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1271$653 [40], Q = \shift.data [40]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1271$653 [41], Q = \shift.data [41]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1271$653 [42], Q = \shift.data [42]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1271$653 [43], Q = \shift.data [43]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1271$653 [44], Q = \shift.data [44]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1271$653 [45], Q = \shift.data [45]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1271$653 [46], Q = \shift.data [46]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1271$653 [47], Q = \shift.data [47]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1400$654 [8], Q = \shift.data [8]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1400$654 [9], Q = \shift.data [9]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1400$654 [10], Q = \shift.data [10]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1400$654 [11], Q = \shift.data [11]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1400$654 [12], Q = \shift.data [12]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1400$654 [13], Q = \shift.data [13]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1400$654 [14], Q = \shift.data [14]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1400$654 [15], Q = \shift.data [15]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1013$651 [112], Q = \shift.data [112]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1013$651 [113], Q = \shift.data [113]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1013$651 [114], Q = \shift.data [114]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1013$651 [115], Q = \shift.data [115]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1013$651 [116], Q = \shift.data [116]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1013$651 [117], Q = \shift.data [117]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1013$651 [118], Q = \shift.data [118]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1013$651 [119], Q = \shift.data [119]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1142$652 [80], Q = \shift.data [80]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1142$652 [81], Q = \shift.data [81]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1142$652 [82], Q = \shift.data [82]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1142$652 [83], Q = \shift.data [83]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1142$652 [84], Q = \shift.data [84]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1142$652 [85], Q = \shift.data [85]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1142$652 [86], Q = \shift.data [86]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1142$652 [87], Q = \shift.data [87]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1271$653 [48], Q = \shift.data [48]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1271$653 [49], Q = \shift.data [49]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1271$653 [50], Q = \shift.data [50]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1271$653 [51], Q = \shift.data [51]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1271$653 [52], Q = \shift.data [52]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1271$653 [53], Q = \shift.data [53]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1271$653 [54], Q = \shift.data [54]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1271$653 [55], Q = \shift.data [55]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1400$654 [16], Q = \shift.data [16]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1400$654 [17], Q = \shift.data [17]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1400$654 [18], Q = \shift.data [18]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1400$654 [19], Q = \shift.data [19]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1400$654 [20], Q = \shift.data [20]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1400$654 [21], Q = \shift.data [21]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1400$654 [22], Q = \shift.data [22]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1400$654 [23], Q = \shift.data [23]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1013$651 [120], Q = \shift.data [120]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1013$651 [121], Q = \shift.data [121]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1013$651 [122], Q = \shift.data [122]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1013$651 [123], Q = \shift.data [123]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1013$651 [124], Q = \shift.data [124]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1013$651 [125], Q = \shift.data [125]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1013$651 [126], Q = \shift.data [126]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1013$651 [127], Q = \shift.data [127]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1142$652 [88], Q = \shift.data [88]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1142$652 [89], Q = \shift.data [89]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1142$652 [90], Q = \shift.data [90]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1142$652 [91], Q = \shift.data [91]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1142$652 [92], Q = \shift.data [92]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1142$652 [93], Q = \shift.data [93]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1142$652 [94], Q = \shift.data [94]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1142$652 [95], Q = \shift.data [95]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1271$653 [56], Q = \shift.data [56]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1271$653 [57], Q = \shift.data [57]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1271$653 [58], Q = \shift.data [58]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1271$653 [59], Q = \shift.data [59]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1271$653 [60], Q = \shift.data [60]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1271$653 [61], Q = \shift.data [61]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1271$653 [62], Q = \shift.data [62]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1271$653 [63], Q = \shift.data [63]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1400$654 [24], Q = \shift.data [24]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1400$654 [25], Q = \shift.data [25]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1400$654 [26], Q = \shift.data [26]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1400$654 [27], Q = \shift.data [27]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1400$654 [28], Q = \shift.data [28]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1400$654 [29], Q = \shift.data [29]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1400$654 [30], Q = \shift.data [30]).
Adding EN signal on $flatten\shift.$verific$data_reg$spi_shift.v:234$877 ($adff) from module spi_top (D = $flatten\shift.$verific$n1400$654 [31], Q = \shift.data [31]).
Adding EN signal on $flatten\shift.$verific$cnt_reg$spi_shift.v:102$702 ($adff) from module spi_top (D = $flatten\shift.$verific$n306$644, Q = \shift.cnt).
Adding EN signal on $flatten\clgen.$verific$clk_out_reg$spi_clgen.v:90$452 ($adff) from module spi_top (D = $flatten\clgen.$verific$n119$408, Q = \clgen.clk_out).

13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_top..
Removed 7 unused cells and 7 unused wires.
<suppressed ~8 debug messages>

13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_top.
<suppressed ~131 debug messages>

13.9. Rerunning OPT passes. (Maybe there is more to do..)

13.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \spi_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~15 debug messages>

13.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \spi_top.
Performed a total of 0 changes.

13.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_top'.
<suppressed ~1500 debug messages>
Removed a total of 500 cells.

13.13. Executing OPT_DFF pass (perform DFF optimizations).

13.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_top..
Removed 0 unused cells and 500 unused wires.
<suppressed ~1 debug messages>

13.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_top.

13.16. Rerunning OPT passes. (Maybe there is more to do..)

13.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \spi_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~20 debug messages>

13.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \spi_top.
Performed a total of 0 changes.

13.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_top'.
Removed a total of 0 cells.

13.20. Executing OPT_DFF pass (perform DFF optimizations).

13.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_top..

13.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_top.

13.23. Finished OPT passes. (There is nothing left to do.)

14. Executing WREDUCE pass (reducing word size of cells).
Removed top 2 bits (of 3) from port B of cell spi_top.$verific$equal_16$spi_top.v:107$115 ($eq).
Removed top 1 bits (of 3) from port B of cell spi_top.$verific$equal_20$spi_top.v:108$116 ($eq).
Removed top 1 bits (of 3) from port B of cell spi_top.$verific$equal_24$spi_top.v:109$117 ($eq).
Removed top 7 bits (of 8) from port B of cell spi_top.$verific$or_126$spi_top.v:219$153 ($or).
Removed top 5 bits (of 14) from mux cell spi_top.$verific$mux_147$spi_top.v:224$161 ($mux).
Removed top 3 bits (of 4) from port B of cell spi_top.$auto$opt_dff.cc:195:make_patterns_logic$1226 ($ne).
Removed top 2 bits (of 3) from port B of cell spi_top.$auto$opt_dff.cc:195:make_patterns_logic$1228 ($ne).
Removed top 1 bits (of 2) from port B of cell spi_top.$auto$opt_dff.cc:195:make_patterns_logic$1230 ($ne).
Removed top 1 bits (of 2) from port B of cell spi_top.$auto$opt_dff.cc:195:make_patterns_logic$1124 ($ne).
Removed top 2 bits (of 3) from port B of cell spi_top.$auto$opt_dff.cc:195:make_patterns_logic$1122 ($ne).
Removed top 1 bits (of 2) from port B of cell spi_top.$auto$opt_dff.cc:195:make_patterns_logic$1018 ($ne).
Removed top 96 bits (of 128) from mux cell spi_top.$flatten\shift.$verific$mux_350$spi_shift.v:234$876 ($mux).
Removed top 64 bits (of 128) from mux cell spi_top.$flatten\shift.$verific$mux_349$spi_shift.v:234$875 ($mux).
Removed top 32 bits (of 128) from mux cell spi_top.$flatten\shift.$verific$mux_348$spi_shift.v:234$874 ($mux).
Removed top 127 bits (of 128) from port A of cell spi_top.$flatten\shift.$verific$Decoder_218$spi_shift.v:234$744 ($shl).
Removed top 1 bits (of 8) from mux cell spi_top.$flatten\shift.$verific$mux_17$spi_shift.v:84$684 ($mux).
Removed top 1 bits (of 8) from mux cell spi_top.$flatten\shift.$verific$mux_16$spi_shift.v:84$683 ($mux).
Removed top 1 bits (of 8) from port Y of cell spi_top.$flatten\shift.$verific$sub_14$spi_shift.v:83$682 ($sub).
Removed top 1 bits (of 8) from port A of cell spi_top.$flatten\shift.$verific$sub_14$spi_shift.v:83$682 ($sub).
Removed top 1 bits (of 8) from port B of cell spi_top.$flatten\shift.$verific$sub_14$spi_shift.v:83$682 ($sub).
Removed top 1 bits (of 8) from mux cell spi_top.$flatten\shift.$verific$mux_13$spi_shift.v:83$681 ($mux).
Removed top 7 bits (of 8) from port B of cell spi_top.$flatten\shift.$verific$add_12$spi_shift.v:83$680 ($add).
Removed top 1 bits (of 8) from port Y of cell spi_top.$flatten\shift.$verific$add_12$spi_shift.v:83$680 ($add).
Removed top 1 bits (of 8) from port A of cell spi_top.$flatten\shift.$verific$add_12$spi_shift.v:83$680 ($add).
Removed top 1 bits (of 8) from mux cell spi_top.$flatten\shift.$verific$mux_8$spi_shift.v:82$678 ($mux).
Removed top 7 bits (of 8) from port B of cell spi_top.$flatten\shift.$verific$sub_7$spi_shift.v:82$677 ($sub).
Removed top 1 bits (of 8) from port Y of cell spi_top.$flatten\shift.$verific$sub_6$spi_shift.v:82$676 ($sub).
Removed top 1 bits (of 8) from port A of cell spi_top.$flatten\shift.$verific$sub_6$spi_shift.v:82$676 ($sub).
Removed top 1 bits (of 8) from port B of cell spi_top.$flatten\shift.$verific$sub_6$spi_shift.v:82$676 ($sub).
Removed cell spi_top.$flatten\shift.$verific$i6$spi_shift.v:82$675 ($not).
Removed top 15 bits (of 16) from port B of cell spi_top.$flatten\clgen.$verific$sub_12$spi_clgen.v:80$441 ($sub).
Removed top 15 bits (of 16) from port B of cell spi_top.$flatten\clgen.$verific$equal_5$spi_clgen.v:68$436 ($eq).
Removed top 1 bits (of 2) from port B of cell spi_top.$auto$opt_dff.cc:195:make_patterns_logic$2574 ($ne).
Removed top 5 bits (of 6) from mux cell spi_top.$verific$mux_176$spi_top.v:221$145 ($mux).
Removed top 32 bits (of 128) from wire spi_top.$flatten\shift.$verific$n1142$652.
Removed top 64 bits (of 128) from wire spi_top.$flatten\shift.$verific$n1271$653.
Removed top 1 bits (of 8) from wire spi_top.$flatten\shift.$verific$n135$631.
Removed top 127 bits (of 128) from wire spi_top.$flatten\shift.$verific$n1400$654.
Removed top 4 bits (of 8) from wire spi_top.$flatten\shift.$verific$n144$632.
Removed top 4 bits (of 8) from wire spi_top.$flatten\shift.$verific$n174$634.
Removed top 2 bits (of 8) from wire spi_top.$flatten\shift.$verific$n183$635.
Removed top 2 bits (of 8) from wire spi_top.$flatten\shift.$verific$n192$636.
Removed top 4 bits (of 8) from wire spi_top.$flatten\shift.$verific$n210$637.
Removed top 5 bits (of 14) from wire spi_top.$verific$n504$89.
Removed top 5 bits (of 6) from wire spi_top.$verific$n786$100.

15. Executing PEEPOPT pass (run peephole optimizers).

16. Executing PMUXTREE pass.

17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_top..
Removed 0 unused cells and 12 unused wires.
<suppressed ~1 debug messages>

18. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module spi_top:
  creating $macc model for $flatten\clgen.$verific$sub_12$spi_clgen.v:80$441 ($sub).
  creating $macc model for $flatten\shift.$verific$add_12$spi_shift.v:83$680 ($add).
  creating $macc model for $flatten\shift.$verific$sub_14$spi_shift.v:83$682 ($sub).
  creating $macc model for $flatten\shift.$verific$sub_6$spi_shift.v:82$676 ($sub).
  creating $macc model for $flatten\shift.$verific$sub_7$spi_shift.v:82$677 ($sub).
  creating $alu model for $macc $flatten\shift.$verific$sub_7$spi_shift.v:82$677.
  creating $alu model for $macc $flatten\shift.$verific$sub_6$spi_shift.v:82$676.
  creating $alu model for $macc $flatten\shift.$verific$sub_14$spi_shift.v:83$682.
  creating $alu model for $macc $flatten\shift.$verific$add_12$spi_shift.v:83$680.
  creating $alu model for $macc $flatten\clgen.$verific$sub_12$spi_clgen.v:80$441.
  creating $alu cell for $flatten\clgen.$verific$sub_12$spi_clgen.v:80$441: $auto$alumacc.cc:485:replace_alu$2587
  creating $alu cell for $flatten\shift.$verific$add_12$spi_shift.v:83$680: $auto$alumacc.cc:485:replace_alu$2590
  creating $alu cell for $flatten\shift.$verific$sub_14$spi_shift.v:83$682: $auto$alumacc.cc:485:replace_alu$2593
  creating $alu cell for $flatten\shift.$verific$sub_6$spi_shift.v:82$676: $auto$alumacc.cc:485:replace_alu$2596
  creating $alu cell for $flatten\shift.$verific$sub_7$spi_shift.v:82$677: $auto$alumacc.cc:485:replace_alu$2599
  created 5 $alu and 0 $macc cells.

19. Executing OPT pass (performing simple optimizations).

19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_top.

19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_top'.
Removed a total of 0 cells.

19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \spi_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~20 debug messages>

19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \spi_top.
Performed a total of 0 changes.

19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_top'.
Removed a total of 0 cells.

19.6. Executing OPT_DFF pass (perform DFF optimizations).

19.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_top..

19.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_top.

19.9. Finished OPT passes. (There is nothing left to do.)

20. Executing MEMORY pass.

20.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

20.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

20.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

20.4. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

20.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_top..

20.6. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

20.7. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

20.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_top..

20.9. Executing MEMORY_COLLECT pass (generating $mem cells).

21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_top..

22. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_top.
<suppressed ~136 debug messages>

23. Executing SIMPLEMAP pass (map simple cells to gate primitives).
Mapping spi_top.$auto$ff.cc:262:slice$908 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$921 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$934 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$947 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$960 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$973 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$986 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$999 ($adffe).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$1001 ($ne).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$1003 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$1014 ($ne).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$1016 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$1018 ($ne).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$1029 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$1042 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$1055 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$1068 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$1081 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$1094 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$1107 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$1118 ($ne).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$1120 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$1122 ($ne).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$1124 ($ne).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$1133 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$1146 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$1159 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$1172 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$1185 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$1198 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$1211 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$1222 ($ne).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$1224 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$1226 ($ne).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$1228 ($ne).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$1230 ($ne).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$1237 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$1250 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$1263 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$1276 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$1289 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$1302 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$1315 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$1326 ($ne).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$1328 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$1341 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$1354 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$1367 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$1380 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$1393 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$1406 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$1419 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$1430 ($ne).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$1432 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$1445 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$1458 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$1471 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$1484 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$1497 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$1510 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$1523 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$1534 ($ne).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$1536 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$1549 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$1562 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$1575 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$1588 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$1601 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$1614 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$1627 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$1638 ($ne).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$1640 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$1653 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$1666 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$1679 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$1692 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$1705 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$1718 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$1731 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$1742 ($ne).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$1744 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$1757 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$1770 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$1783 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$1796 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$1809 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$1822 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$1835 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$1846 ($ne).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$1848 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$1861 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$1874 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$1887 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$1900 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$1913 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$1926 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$1939 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$1950 ($ne).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$1952 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$1965 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$1978 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$1991 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$2004 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$2017 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$2030 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$2043 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$2054 ($ne).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$2056 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$2069 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$2082 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$2095 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$2108 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$2121 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$2134 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$2147 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$2158 ($ne).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$2160 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$2173 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$2186 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$2199 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$2212 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$2225 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$2238 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$2251 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$2262 ($ne).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$2264 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$2277 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$2290 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$2303 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$2316 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$2329 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$2342 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$2355 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$2366 ($ne).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$2368 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$2381 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$2394 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$2407 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$2420 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$2433 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$2446 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$2459 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$2470 ($ne).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$2472 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$2485 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$2498 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$2511 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$2524 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$2537 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$2550 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$2563 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$2574 ($ne).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$881 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$899 ($ne).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$901 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$906 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$912 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$925 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$938 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$951 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$964 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$977 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:195:make_patterns_logic$990 ($reduce_bool).
Mapping spi_top.$auto$opt_dff.cc:210:make_patterns_logic$1004 ($not).
Mapping spi_top.$auto$opt_dff.cc:210:make_patterns_logic$1006 ($not).
Mapping spi_top.$auto$opt_dff.cc:210:make_patterns_logic$1008 ($not).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$1011 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$1024 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$1037 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$1050 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$1063 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$1076 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$1089 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$1102 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$1115 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$1128 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$1141 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$1154 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$1167 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$1180 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$1193 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$1206 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$1219 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$1232 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$1245 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$1258 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$1271 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$1284 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$1297 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$1310 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$1323 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$1336 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$1349 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$1362 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$1375 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$1388 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$1401 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$1414 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$1427 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$1440 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$1453 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$1466 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$1479 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$1492 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$1505 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$1518 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$1531 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$1544 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$1557 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$1570 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$1583 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$1596 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$1609 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$1622 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$1635 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$1648 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$1661 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$1674 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$1687 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$1700 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$1713 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$1726 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$1739 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$1752 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$1765 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$1778 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$1791 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$1804 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$1817 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$1830 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$1843 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$1856 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$1869 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$1882 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$1895 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$1908 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$1921 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$1934 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$1947 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$1960 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$1973 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$1986 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$1999 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$2012 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$2025 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$2038 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$2051 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$2064 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$2077 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$2090 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$2103 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$2116 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$2129 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$2142 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$2155 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$2168 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$2181 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$2194 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$2207 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$2220 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$2233 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$2246 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$2259 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$2272 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$2285 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$2298 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$2311 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$2324 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$2337 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$2350 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$2363 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$2376 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$2389 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$2402 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$2415 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$2428 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$2441 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$2454 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$2467 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$2480 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$2493 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$2506 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$2519 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$2532 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$2545 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$2558 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$2571 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$884 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$887 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$890 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$893 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$896 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$903 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$920 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$933 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$946 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$959 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$972 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$985 ($reduce_and).
Mapping spi_top.$auto$opt_dff.cc:220:make_patterns_logic$998 ($reduce_and).
Mapping spi_top.$flatten\clgen.$verific$cnt_reg$spi_clgen.v:81$443 ($adff).
Mapping spi_top.$flatten\clgen.$verific$equal_3$spi_clgen.v:67$434 ($logic_not).
Mapping spi_top.$flatten\clgen.$verific$equal_5$spi_clgen.v:68$436 ($eq).
Mapping spi_top.$flatten\clgen.$verific$i10$spi_clgen.v:77$439 ($not).
Mapping spi_top.$flatten\clgen.$verific$i11$spi_clgen.v:77$440 ($or).
Mapping spi_top.$flatten\clgen.$verific$i19$spi_clgen.v:90$445 ($and).
Mapping spi_top.$flatten\clgen.$verific$i21$spi_clgen.v:90$447 ($or).
Mapping spi_top.$flatten\clgen.$verific$i22$spi_clgen.v:90$448 ($and).
Mapping spi_top.$flatten\clgen.$verific$i23$spi_clgen.v:90$449 ($not).
Mapping spi_top.$flatten\clgen.$verific$i31$spi_clgen.v:103$453 ($and).
Mapping spi_top.$flatten\clgen.$verific$i32$spi_clgen.v:103$454 ($and).
Mapping spi_top.$flatten\clgen.$verific$i34$spi_clgen.v:103$456 ($not).
Mapping spi_top.$flatten\clgen.$verific$i35$spi_clgen.v:103$457 ($and).
Mapping spi_top.$flatten\clgen.$verific$i36$spi_clgen.v:103$458 ($or).
Mapping spi_top.$flatten\clgen.$verific$i39$spi_clgen.v:103$459 ($and).
Mapping spi_top.$flatten\clgen.$verific$i41$spi_clgen.v:103$460 ($and).
Mapping spi_top.$flatten\clgen.$verific$i42$spi_clgen.v:103$461 ($or).
Mapping spi_top.$flatten\clgen.$verific$i44$spi_clgen.v:104$463 ($and).
Mapping spi_top.$flatten\clgen.$verific$i45$spi_clgen.v:104$464 ($and).
Mapping spi_top.$flatten\clgen.$verific$i49$spi_clgen.v:104$465 ($and).
Mapping spi_top.$flatten\clgen.$verific$i50$spi_clgen.v:104$466 ($and).
Mapping spi_top.$flatten\clgen.$verific$i51$spi_clgen.v:104$467 ($or).
Mapping spi_top.$flatten\clgen.$verific$mux_14$spi_clgen.v:80$442 ($mux).
Mapping spi_top.$flatten\clgen.$verific$neg_edge_reg$spi_clgen.v:105$470 ($adff).
Mapping spi_top.$flatten\clgen.$verific$pos_edge_reg$spi_clgen.v:105$469 ($adff).
Mapping spi_top.$flatten\clgen.$verific$reduce_or_32$spi_clgen.v:103$455 ($reduce_or).
Mapping spi_top.$flatten\shift.$verific$Mux_215$spi_shift.v:234$741 ($bmux).
Mapping spi_top.$flatten\shift.$verific$Mux_57$spi_shift.v:122$713 ($bmux).
Mapping spi_top.$flatten\shift.$verific$i103$spi_shift.v:142$726 ($and).
Mapping spi_top.$flatten\shift.$verific$i141$spi_shift.v:153$731 ($and).
Mapping spi_top.$flatten\shift.$verific$i179$spi_shift.v:164$736 ($and).
Mapping spi_top.$flatten\shift.$verific$i21$spi_shift.v:86$687 ($not).
Mapping spi_top.$flatten\shift.$verific$i217$spi_shift.v:234$742 ($mux).
Mapping spi_top.$auto$ff.cc:262:slice$888 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$885 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$882 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$879 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$2575 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$2572 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$2559 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$2546 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$2533 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$2520 ($adffe).
Mapping spi_top.$flatten\shift.$verific$i23$spi_shift.v:88$689 ($mux).
Mapping spi_top.$auto$ff.cc:262:slice$2507 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$2494 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$2481 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$2468 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$2455 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$2442 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$2429 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$2416 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$2403 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$2390 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$2377 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$2364 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$2351 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$2338 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$2325 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$2312 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$2299 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$2286 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$2273 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$2260 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$2247 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$2234 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$2221 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$2208 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$2195 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$2182 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$2169 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$2156 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$2143 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$2130 ($adffe).
Mapping spi_top.$flatten\shift.$verific$i26$spi_shift.v:88$692 ($and).
Mapping spi_top.$auto$ff.cc:262:slice$2117 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$2104 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$2091 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$2078 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$2065 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$2052 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$2039 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$2026 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$2013 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$2000 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$1987 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$1974 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$1961 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$1948 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$1935 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$1922 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$1909 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$1896 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$1883 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$1870 ($adffe).
Mapping spi_top.$flatten\shift.$verific$i28$spi_shift.v:89$694 ($mux).
Mapping spi_top.$auto$ff.cc:262:slice$1857 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$1844 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$1831 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$1818 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$1805 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$1792 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$1779 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$1766 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$1753 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$1740 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$1727 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$1714 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$1701 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$1688 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$1675 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$1662 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$1649 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$1636 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$1623 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$1610 ($adffe).
Mapping spi_top.$flatten\shift.$verific$i30$spi_shift.v:89$695 ($and).
Mapping spi_top.$auto$ff.cc:262:slice$1597 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$1584 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$1571 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$1558 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$1545 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$1532 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$1519 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$1506 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$1493 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$1480 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$1467 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$1454 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$1441 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$1428 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$1415 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$1402 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$1389 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$1376 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$1363 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$1350 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$1337 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$1324 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$1311 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$1298 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$1285 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$1272 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$1259 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$1246 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$1233 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$1220 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$1207 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$1194 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$1181 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$1168 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$1155 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$1142 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$1129 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$1116 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$1103 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$1090 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$1077 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$1064 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$1051 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$1038 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$1025 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$1012 ($adffe).
Mapping spi_top.$flatten\shift.$verific$i46$spi_shift.v:110$705 ($and).
Mapping spi_top.$flatten\shift.$verific$i48$spi_shift.v:112$707 ($and).
Mapping spi_top.$flatten\shift.$verific$i49$spi_shift.v:112$708 ($and).
Mapping spi_top.$flatten\shift.$verific$i52$spi_shift.v:113$710 ($mux).
Mapping spi_top.$flatten\shift.$verific$i57$spi_shift.v:122$712 ($or).
Mapping spi_top.$flatten\shift.$verific$i65$spi_shift.v:131$718 ($and).
Mapping spi_top.$flatten\shift.$verific$mux_13$spi_shift.v:83$681 ($mux).
Mapping spi_top.$flatten\shift.$verific$mux_16$spi_shift.v:84$683 ($mux).
Mapping spi_top.$flatten\shift.$verific$mux_17$spi_shift.v:84$684 ($mux).
Mapping spi_top.$auto$ff.cc:262:slice$907 ($adffe).
Mapping spi_top.$flatten\shift.$verific$mux_347$spi_shift.v:234$873 ($mux).
Mapping spi_top.$flatten\shift.$verific$mux_348$spi_shift.v:234$874 ($mux).
Mapping spi_top.$flatten\shift.$verific$mux_349$spi_shift.v:234$875 ($mux).
Mapping spi_top.$flatten\shift.$verific$mux_350$spi_shift.v:234$876 ($mux).
Mapping spi_top.$auto$ff.cc:262:slice$904 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$897 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$894 ($adffe).
Mapping spi_top.$auto$ff.cc:262:slice$891 ($adffe).
Mapping spi_top.$flatten\shift.$verific$mux_38$spi_shift.v:101$699 ($mux).
Mapping spi_top.$flatten\shift.$verific$mux_40$spi_shift.v:101$701 ($mux).
Mapping spi_top.$flatten\shift.$verific$mux_8$spi_shift.v:82$678 ($mux).
Mapping spi_top.$flatten\shift.$verific$reduce_or_19$spi_shift.v:86$686 ($reduce_or).
Mapping spi_top.$flatten\shift.$verific$reduce_or_4$spi_shift.v:82$674 ($reduce_or).
Mapping spi_top.$verific$and_172$spi_top.v:280$395 ($and).
Mapping spi_top.$verific$and_173$spi_top.v:273$396 ($and).
Mapping spi_top.$verific$and_180$spi_top.v:109$118 ($and).
Mapping spi_top.$verific$and_182$spi_top.v:109$170 ($and).
Mapping spi_top.$verific$equal_12$spi_top.v:106$114 ($logic_not).
Mapping spi_top.$verific$equal_16$spi_top.v:107$115 ($eq).
Mapping spi_top.$verific$equal_20$spi_top.v:108$116 ($eq).
Mapping spi_top.$verific$equal_24$spi_top.v:109$117 ($eq).
Mapping spi_top.$verific$equal_28$spi_top.v:110$119 ($eq).
Mapping spi_top.$verific$equal_4$spi_top.v:104$108 ($eq).
Mapping spi_top.$verific$equal_8$spi_top.v:105$111 ($eq).
Mapping spi_top.$verific$i10$spi_top.v:105$112 ($and).
Mapping spi_top.$verific$i101$spi_top.v:178$143 ($and).
Mapping spi_top.$verific$i124$spi_top.v:216$151 ($and).
Mapping spi_top.$verific$i126$spi_top.v:216$152 ($and).
Mapping spi_top.$verific$i159$spi_top.v:240$172 ($and).
Mapping spi_top.$verific$i161$spi_top.v:240$173 ($and).
Mapping spi_top.$verific$i166$spi_top.v:273$177 ($and).
Mapping spi_top.$verific$i168$spi_top.v:273$179 ($not).
Mapping spi_top.$verific$i30$spi_top.v:110$120 ($and).
Mapping spi_top.$verific$i6$spi_top.v:104$109 ($and).
Mapping spi_top.$verific$i82$spi_top.v:156$128 ($not).
Mapping spi_top.$verific$i83$spi_top.v:156$129 ($and).
Mapping spi_top.$verific$i89$spi_top.v:167$133 ($and).
Mapping spi_top.$verific$i90$spi_top.v:167$134 ($and).
Mapping spi_top.$verific$i91$spi_top.v:167$135 ($and).
Mapping spi_top.$verific$i95$spi_top.v:170$138 ($mux).
Mapping spi_top.$verific$i99$spi_top.v:178$141 ($and).
Mapping spi_top.$verific$inv_170$spi_top.v:273$181 ($not).
Mapping spi_top.$verific$mux_147$spi_top.v:224$161 ($mux).
Mapping spi_top.$verific$mux_177$spi_top.v:219$157 ($mux).
Mapping spi_top.$verific$mux_73$spi_top.v:138$123 ($bmux).
Mapping spi_top.$verific$or_126$spi_top.v:219$153 ($or).
Mapping spi_top.$verific$or_169$spi_top.v:273$180 ($or).
Mapping spi_top.$verific$wb_ack_o_reg$spi_top.v:156$131 ($adff).
Mapping spi_top.$verific$wb_dat_o_reg$spi_top.v:147$126 ($adff).

24. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_top.
<suppressed ~111 debug messages>

25. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_top'.
<suppressed ~1848 debug messages>
Removed a total of 616 cells.

26. Executing OPT_DFF pass (perform DFF optimizations).

27. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_top..
Removed 16 unused cells and 665 unused wires.
<suppressed ~17 debug messages>

28. Executing OPT pass (performing simple optimizations).

28.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_top.

28.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_top'.
Removed a total of 0 cells.

28.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \spi_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

28.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \spi_top.
Performed a total of 0 changes.

28.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_top'.
Removed a total of 0 cells.

28.6. Executing OPT_DFF pass (perform DFF optimizations).

28.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_top..

28.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_top.

28.9. Finished OPT passes. (There is nothing left to do.)

29. Executing OPT pass (performing simple optimizations).

29.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_top.
<suppressed ~23 debug messages>

29.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_top'.
Removed a total of 0 cells.

29.3. Executing OPT_DFF pass (perform DFF optimizations).

29.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_top..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

29.5. Finished fast OPT passes.

30. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

31. Executing OPT pass (performing simple optimizations).

31.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_top.

31.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_top'.
Removed a total of 0 cells.

31.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \spi_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

31.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \spi_top.
Performed a total of 0 changes.

31.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_top'.
Removed a total of 0 cells.

31.6. Executing OPT_SHARE pass.

31.7. Executing OPT_DFF pass (perform DFF optimizations).

31.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_top..

31.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_top.

31.10. Finished OPT passes. (There is nothing left to do.)

32. Executing TECHMAP pass (map to technology primitives).

32.1. Executing Verilog-2005 frontend: /home/users/aram/Workspace/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/aram/Workspace/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

32.2. Continuing TECHMAP pass.
Using template $paramod$a1665ef28c749ebcdbe9aecd466e644647b56463\_90_alu for cells of type $alu.
Using template $paramod$constmap:5090bc8fbcf3ae403956334bfa77f78b3de013ab$paramod$0b7ef1ec7ff4cd51af214180028bea8c50fdcd6a\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using template $paramod$dbcdc7e8aa1a4080cea2deda6fdc8772064f4d90\_90_alu for cells of type $alu.
Using template $paramod$403a3c2fa431a154c52a6a5429d7a6260b5d144f\_90_alu for cells of type $alu.
Using template $paramod$103b4016182df467cceab67bcf3e18e6361ec0fd\_90_alu for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010000 for cells of type $lcu.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $not.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000111 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001000 for cells of type $lcu.
Using extmapper simplemap for cells of type $or.
No more expansions possible.
<suppressed ~2346 debug messages>

33. Executing OPT pass (performing simple optimizations).

33.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_top.
<suppressed ~159 debug messages>

33.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_top'.
<suppressed ~48 debug messages>
Removed a total of 16 cells.

33.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \spi_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

33.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \spi_top.
Performed a total of 0 changes.

33.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_top'.
Removed a total of 0 cells.

33.6. Executing OPT_DFF pass (perform DFF optimizations).

33.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_top..
Removed 26 unused cells and 188 unused wires.
<suppressed ~27 debug messages>

33.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_top.

33.9. Rerunning OPT passes. (Maybe there is more to do..)

33.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \spi_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

33.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \spi_top.
Performed a total of 0 changes.

33.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_top'.
Removed a total of 0 cells.

33.13. Executing OPT_DFF pass (perform DFF optimizations).

33.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_top..

33.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_top.

33.16. Finished OPT passes. (There is nothing left to do.)

34. Executing ABC pass (technology mapping using ABC).

34.1. Extracting gate netlist of module `\spi_top' to `<abc-temp-dir>/input.blif'..
Extracted 1754 gates and 1993 wires to a netlist network with 238 inputs and 340 outputs.

34.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + source /home/users/aram/Workspace/yosys_verific_rs/scripts/synth/abc/abc_base6.a21.scr 
ABC: netlist  : i/o =    238/    340  and =    3326  lev =   31 (23.74)  mem = 0.05 MB
ABC: Mapping (K=6)  :  lut =    595  edge =    2828  lev =    9 (6.74)  mem = 0.03 MB
ABC: netlist  : i/o =    238/    340  and =    2818  lev =   33 (23.88)  mem = 0.05 MB
ABC: Mapping (K=6)  :  lut =    555  edge =    2419  lev =    9 (7.09)  mem = 0.03 MB
ABC: netlist  : i/o =    238/    340  and =    2793  lev =   31 (22.40)  mem = 0.05 MB
ABC: Mapping (K=6)  :  lut =    563  edge =    2398  lev =    8 (6.64)  mem = 0.03 MB
ABC: netlist  : i/o =    238/    340  and =    2701  lev =   28 (21.76)  mem = 0.05 MB
ABC: Mapping (K=6)  :  lut =    554  edge =    2391  lev =    8 (6.20)  mem = 0.03 MB
ABC: netlist  : i/o =    238/    340  and =    2849  lev =   29 (22.40)  mem = 0.05 MB
ABC: Mapping (K=6)  :  lut =    552  edge =    2454  lev =    9 (7.03)  mem = 0.03 MB
ABC: netlist  : i/o =    238/    340  and =    2757  lev =   29 (22.08)  mem = 0.06 MB
ABC: Mapping (K=6)  :  lut =    545  edge =    2358  lev =    8 (6.42)  mem = 0.03 MB
ABC: netlist  : i/o =    238/    340  and =    2784  lev =   29 (22.05)  mem = 0.06 MB
ABC: Mapping (K=6)  :  lut =    547  edge =    2375  lev =    8 (6.37)  mem = 0.03 MB
ABC: netlist  : i/o =    238/    340  and =    2787  lev =   29 (22.06)  mem = 0.06 MB
ABC: Mapping (K=6)  :  lut =    550  edge =    2374  lev =    8 (6.42)  mem = 0.03 MB
ABC: netlist  : i/o =    238/    340  and =    2903  lev =   27 (20.86)  mem = 0.06 MB
ABC: Mapping (K=6)  :  lut =    545  edge =    2396  lev =    8 (6.37)  mem = 0.03 MB
ABC: netlist  : i/o =    238/    340  and =    2921  lev =   30 (22.24)  mem = 0.06 MB
ABC: Mapping (K=6)  :  lut =    538  edge =    2381  lev =    7 (5.81)  mem = 0.03 MB
ABC: netlist  : i/o =    238/    340  and =    2922  lev =   30 (22.62)  mem = 0.06 MB
ABC: Mapping (K=6)  :  lut =    536  edge =    2514  lev =    7 (5.86)  mem = 0.03 MB
ABC: netlist  : i/o =    238/    340  and =    2928  lev =   36 (25.95)  mem = 0.06 MB
ABC: Mapping (K=6)  :  lut =    538  edge =    2380  lev =    8 (6.58)  mem = 0.03 MB
ABC: netlist  : i/o =    238/    340  and =    2928  lev =   36 (26.01)  mem = 0.06 MB
ABC: Mapping (K=6)  :  lut =    538  edge =    2380  lev =    8 (6.58)  mem = 0.03 MB
ABC: netlist  : i/o =    238/    340  and =    2922  lev =   30 (22.62)  mem = 0.05 MB
ABC: Mapping (K=6)  :  lut =    536  edge =    2514  lev =    7 (5.86)  mem = 0.03 MB
ABC: netlist  : i/o =    238/    340  and =    2922  lev =   30 (22.62)  mem = 0.06 MB
ABC: Mapping (K=6)  :  lut =    536  edge =    2514  lev =    7 (5.86)  mem = 0.03 MB
ABC: netlist  : i/o =    238/    340  and =    2935  lev =   30 (22.16)  mem = 0.05 MB
ABC: Mapping (K=6)  :  lut =    536  edge =    2514  lev =    7 (5.86)  mem = 0.03 MB
ABC: + write_blif <abc-temp-dir>/output.blif 

34.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:      537
ABC RESULTS:        internal signals:     1415
ABC RESULTS:           input signals:      238
ABC RESULTS:          output signals:      340
Removing temp directory.

35. Executing OPT pass (performing simple optimizations).

35.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_top.

35.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_top'.
Removed a total of 0 cells.

35.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \spi_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

35.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \spi_top.
Performed a total of 0 changes.

35.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_top'.
Removed a total of 0 cells.

35.6. Executing OPT_DFF pass (perform DFF optimizations).

35.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_top..
Removed 0 unused cells and 1021 unused wires.
<suppressed ~13 debug messages>

35.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_top.

35.9. Rerunning OPT passes. (Maybe there is more to do..)

35.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \spi_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

35.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \spi_top.
Performed a total of 0 changes.

35.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_top'.
Removed a total of 0 cells.

35.13. Executing OPT_DFF pass (perform DFF optimizations).

35.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_top..

35.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_top.

35.16. Finished OPT passes. (There is nothing left to do.)

36. Executing HIERARCHY pass (managing design hierarchy).

36.1. Analyzing design hierarchy..
Top module:  \spi_top

36.2. Analyzing design hierarchy..
Top module:  \spi_top
Removed 0 unused modules.

37. Printing statistics.

=== spi_top ===

   Number of wires:                557
   Number of wire bits:           1177
   Number of public wires:          60
   Number of public wire bits:     680
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                766
     $_DFFE_PP0P_                  178
     $_DFF_PP0_                     35
     $_DFF_PP1_                     16
     $lut                          537

38. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_top..
Removed 0 unused cells and 27 unused wires.
<suppressed ~27 debug messages>

39. Executing BLIF backend.

Warnings: 51 unique messages, 51 total
End of script. Logfile hash: 59bdf1f3cd, CPU: user 3.38s system 0.03s, MEM: 31.26 MB peak
Yosys 0.14+36 (git sha1 15a4e900b, gcc 7.1.0 -fPIC -Os)
Time spent: 75% 1x abc (9 sec), 8% 32x opt_expr (1 sec), ...
