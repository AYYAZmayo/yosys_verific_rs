
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.14+36 (git sha1 15a4e900b, gcc 7.1.0 -fPIC -Os)


-- Executing script file `yosys.ys' --

1. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Jan22_SW_Release, released at Sat Jan 29 02:42:49 2022.

2. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Jan22_SW_Release, released at Sat Jan 29 02:42:49 2022.
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'rgb2ycrcb.v'

3. Executing HIERARCHY pass (managing design hierarchy).
VERIFIC-INFO [VERI-1018] rgb2ycrcb.v:57: compiling module 'top'
VERIFIC-WARNING [VERI-2371] rgb2ycrcb.v:100: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] rgb2ycrcb.v:101: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] rgb2ycrcb.v:102: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] rgb2ycrcb.v:104: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] rgb2ycrcb.v:113: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] rgb2ycrcb.v:114: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] rgb2ycrcb.v:115: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] rgb2ycrcb.v:117: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] rgb2ycrcb.v:126: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] rgb2ycrcb.v:127: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] rgb2ycrcb.v:128: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] rgb2ycrcb.v:130: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] rgb2ycrcb.v:140: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] rgb2ycrcb.v:143: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] rgb2ycrcb.v:146: delay control is not supported for synthesis
Importing module top.

3.1. Analyzing design hierarchy..
Top module:  \top

3.2. Analyzing design hierarchy..
Top module:  \top
Removed 0 unused modules.

4. Executing PROC pass (convert processes to netlists).

4.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

4.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

4.4. Executing PROC_INIT pass (extract init attributes).

4.5. Executing PROC_ARST pass (detect async resets in processes).

4.6. Executing PROC_MUX pass (convert decision trees to multiplexers).

4.7. Executing PROC_DLATCH pass (convert process syncs to latches).

4.8. Executing PROC_DFF pass (convert process syncs to FFs).

4.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

4.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

5. Executing FLATTEN pass (flatten design).

6. Executing TRIBUF pass.

7. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~2 debug messages>

8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 18 unused wires.
<suppressed ~16 debug messages>

9. Executing CHECK pass (checking for obvious problems).
Checking module top...
Found and reported 0 problems.

10. Executing DEMINOUT pass (demote inout ports to input or output).

11. Executing OPT pass (performing simple optimizations).

11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

11.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~15 debug messages>

11.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

11.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

11.6. Executing OPT_DFF pass (perform DFF optimizations).
Removing never-active async load on $verific$yr_reg$rgb2ycrcb.v:105$77 ($aldff) from module top.
Removing never-active async load on $verific$yg_reg$rgb2ycrcb.v:105$78 ($aldff) from module top.
Removing never-active async load on $verific$yb_reg$rgb2ycrcb.v:105$79 ($aldff) from module top.
Removing never-active async load on $verific$y_reg$rgb2ycrcb.v:147$127 ($aldff) from module top.
Removing never-active async load on $verific$y1_reg$rgb2ycrcb.v:105$80 ($aldff) from module top.
Removing never-active async load on $verific$crr_reg$rgb2ycrcb.v:118$93 ($aldff) from module top.
Removing never-active async load on $verific$crg_reg$rgb2ycrcb.v:118$94 ($aldff) from module top.
Removing never-active async load on $verific$crb_reg$rgb2ycrcb.v:118$95 ($aldff) from module top.
Removing never-active async load on $verific$cr_reg$rgb2ycrcb.v:147$128 ($aldff) from module top.
Removing never-active async load on $verific$cr1_reg$rgb2ycrcb.v:118$96 ($aldff) from module top.
Removing never-active async load on $verific$cbr_reg$rgb2ycrcb.v:131$109 ($aldff) from module top.
Removing never-active async load on $verific$cbg_reg$rgb2ycrcb.v:131$110 ($aldff) from module top.
Removing never-active async load on $verific$cbb_reg$rgb2ycrcb.v:131$111 ($aldff) from module top.
Removing never-active async load on $verific$cb_reg$rgb2ycrcb.v:147$129 ($aldff) from module top.
Removing never-active async load on $verific$cb1_reg$rgb2ycrcb.v:131$112 ($aldff) from module top.

11.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

11.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

11.9. Rerunning OPT passes. (Maybe there is more to do..)

11.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~15 debug messages>

11.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

11.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

11.13. Executing OPT_DFF pass (perform DFF optimizations).

11.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

11.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

11.16. Finished OPT passes. (There is nothing left to do.)

12. Executing FSM pass (extract and optimize FSM).

12.1. Executing FSM_DETECT pass (finding FSMs in design).

12.2. Executing FSM_EXTRACT pass (extracting FSM from design).

12.3. Executing FSM_OPT pass (simple optimizations of FSMs).

12.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

12.5. Executing FSM_OPT pass (simple optimizations of FSMs).

12.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

12.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

12.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

13. Executing OPT pass (performing simple optimizations).

13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~15 debug messages>

13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

13.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $verific$yr_reg$rgb2ycrcb.v:105$77 ($dff) from module top (D = { 1'0 $verific$n25$13 [18:1] 1'0 }, Q = \yr).
Adding EN signal on $verific$yg_reg$rgb2ycrcb.v:105$78 ($dff) from module top (D = $verific$n46$14, Q = \yg).
Adding EN signal on $verific$yb_reg$rgb2ycrcb.v:105$79 ($dff) from module top (D = { 3'000 $verific$n106$17 [16:2] 2'00 }, Q = \yb).
Adding EN signal on $verific$y_reg$rgb2ycrcb.v:147$127 ($dff) from module top (D = $verific$n1067$50, Q = \y).
Adding EN signal on $verific$y1_reg$rgb2ycrcb.v:105$80 ($dff) from module top (D = { $verific$n149$5 $verific$n150$19 }, Q = \y1).
Adding EN signal on $verific$crr_reg$rgb2ycrcb.v:118$93 ($dff) from module top (D = { 1'0 \r 9'000000000 }, Q = \crr).
Adding EN signal on $verific$crg_reg$rgb2ycrcb.v:118$94 ($dff) from module top (D = { 1'0 $verific$n389$26 }, Q = \crg).
Adding EN signal on $verific$crb_reg$rgb2ycrcb.v:118$95 ($dff) from module top (D = { 3'000 $verific$n430$28 }, Q = \crb).
Adding EN signal on $verific$cr_reg$rgb2ycrcb.v:147$128 ($dff) from module top (D = $verific$n1103$53, Q = \cr).
Adding EN signal on $verific$cr1_reg$rgb2ycrcb.v:118$96 ($dff) from module top (D = $verific$n491$31, Q = \cr1).
Adding EN signal on $verific$cbr_reg$rgb2ycrcb.v:131$109 ($dff) from module top (D = { 2'00 $verific$n710$37 }, Q = \cbr).
Adding EN signal on $verific$cbg_reg$rgb2ycrcb.v:131$110 ($dff) from module top (D = { 1'0 $verific$n750$39 }, Q = \cbg).
Adding EN signal on $verific$cbb_reg$rgb2ycrcb.v:131$111 ($dff) from module top (D = { 1'0 \b 9'000000000 }, Q = \cbb).
Adding EN signal on $verific$cb_reg$rgb2ycrcb.v:147$129 ($dff) from module top (D = $verific$n1139$56, Q = \cb).
Adding EN signal on $verific$cb1_reg$rgb2ycrcb.v:131$112 ($dff) from module top (D = $verific$n834$43, Q = \cb1).
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$143 ($dffe) from module top.
Setting constant 0-bit at position 1 on $auto$ff.cc:262:slice$143 ($dffe) from module top.
Setting constant 0-bit at position 2 on $auto$ff.cc:262:slice$143 ($dffe) from module top.
Setting constant 0-bit at position 3 on $auto$ff.cc:262:slice$143 ($dffe) from module top.
Setting constant 0-bit at position 4 on $auto$ff.cc:262:slice$143 ($dffe) from module top.
Setting constant 0-bit at position 5 on $auto$ff.cc:262:slice$143 ($dffe) from module top.
Setting constant 0-bit at position 6 on $auto$ff.cc:262:slice$143 ($dffe) from module top.
Setting constant 0-bit at position 7 on $auto$ff.cc:262:slice$143 ($dffe) from module top.
Setting constant 0-bit at position 8 on $auto$ff.cc:262:slice$143 ($dffe) from module top.
Setting constant 0-bit at position 19 on $auto$ff.cc:262:slice$143 ($dffe) from module top.
Setting constant 0-bit at position 19 on $auto$ff.cc:262:slice$142 ($dffe) from module top.
Setting constant 0-bit at position 18 on $auto$ff.cc:262:slice$141 ($dffe) from module top.
Setting constant 0-bit at position 19 on $auto$ff.cc:262:slice$141 ($dffe) from module top.
Setting constant 0-bit at position 17 on $auto$ff.cc:262:slice$138 ($dffe) from module top.
Setting constant 0-bit at position 18 on $auto$ff.cc:262:slice$138 ($dffe) from module top.
Setting constant 0-bit at position 19 on $auto$ff.cc:262:slice$138 ($dffe) from module top.
Setting constant 0-bit at position 19 on $auto$ff.cc:262:slice$137 ($dffe) from module top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$136 ($dffe) from module top.
Setting constant 0-bit at position 1 on $auto$ff.cc:262:slice$136 ($dffe) from module top.
Setting constant 0-bit at position 2 on $auto$ff.cc:262:slice$136 ($dffe) from module top.
Setting constant 0-bit at position 3 on $auto$ff.cc:262:slice$136 ($dffe) from module top.
Setting constant 0-bit at position 4 on $auto$ff.cc:262:slice$136 ($dffe) from module top.
Setting constant 0-bit at position 5 on $auto$ff.cc:262:slice$136 ($dffe) from module top.
Setting constant 0-bit at position 6 on $auto$ff.cc:262:slice$136 ($dffe) from module top.
Setting constant 0-bit at position 7 on $auto$ff.cc:262:slice$136 ($dffe) from module top.
Setting constant 0-bit at position 8 on $auto$ff.cc:262:slice$136 ($dffe) from module top.
Setting constant 0-bit at position 19 on $auto$ff.cc:262:slice$136 ($dffe) from module top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$133 ($dffe) from module top.
Setting constant 0-bit at position 1 on $auto$ff.cc:262:slice$133 ($dffe) from module top.
Setting constant 0-bit at position 17 on $auto$ff.cc:262:slice$133 ($dffe) from module top.
Setting constant 0-bit at position 18 on $auto$ff.cc:262:slice$133 ($dffe) from module top.
Setting constant 0-bit at position 19 on $auto$ff.cc:262:slice$133 ($dffe) from module top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$131 ($dffe) from module top.
Setting constant 0-bit at position 19 on $auto$ff.cc:262:slice$131 ($dffe) from module top.

13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 15 unused cells and 15 unused wires.
<suppressed ~16 debug messages>

13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

13.9. Rerunning OPT passes. (Maybe there is more to do..)

13.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

13.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

13.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

13.13. Executing OPT_DFF pass (perform DFF optimizations).

13.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

13.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

13.16. Finished OPT passes. (There is nothing left to do.)

14. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 20) from port A of cell top.$verific$add_10$rgb2ycrcb.v:104$70 ($add).
Removed top 4 bits (of 21) from port B of cell top.$verific$add_11$rgb2ycrcb.v:104$71 ($add).
Removed top 2 bits (of 21) from port A of cell top.$verific$sub_27$rgb2ycrcb.v:117$86 ($sub).
Removed top 2 bits (of 21) from port B of cell top.$verific$sub_27$rgb2ycrcb.v:117$86 ($sub).
Removed top 1 bits (of 21) from port Y of cell top.$verific$sub_27$rgb2ycrcb.v:117$86 ($sub).
Removed top 5 bits (of 22) from port B of cell top.$verific$sub_28$rgb2ycrcb.v:117$87 ($sub).
Removed top 2 bits (of 21) from port A of cell top.$verific$sub_44$rgb2ycrcb.v:130$102 ($sub).
Removed top 3 bits (of 21) from port B of cell top.$verific$sub_44$rgb2ycrcb.v:130$102 ($sub).
Removed top 1 bits (of 21) from port Y of cell top.$verific$sub_44$rgb2ycrcb.v:130$102 ($sub).
Removed top 3 bits (of 22) from port B of cell top.$verific$sub_45$rgb2ycrcb.v:130$103 ($sub).
Removed top 3 bits (of 20) from wire top.$verific$n106$17.
Removed top 1 bits (of 20) from wire top.$verific$n25$13.
Removed top 1 bits (of 20) from wire top.cbb.
Removed top 1 bits (of 20) from wire top.cbg.
Removed top 2 bits (of 20) from wire top.cbr.
Removed top 3 bits (of 20) from wire top.crb.
Removed top 1 bits (of 20) from wire top.crg.
Removed top 1 bits (of 20) from wire top.crr.
Removed top 3 bits (of 20) from wire top.yb.
Removed top 1 bits (of 20) from wire top.yr.

15. Executing PEEPOPT pass (run peephole optimizers).

16. Executing PMUXTREE pass.

17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 10 unused wires.
<suppressed ~1 debug messages>

18. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module top:
  creating $macc model for $verific$add_10$rgb2ycrcb.v:104$70 ($add).
  creating $macc model for $verific$add_11$rgb2ycrcb.v:104$71 ($add).
  creating $macc model for $verific$mult_23$rgb2ycrcb.v:114$82 ($mul).
  creating $macc model for $verific$mult_25$rgb2ycrcb.v:115$84 ($mul).
  creating $macc model for $verific$mult_39$rgb2ycrcb.v:126$97 ($mul).
  creating $macc model for $verific$mult_4$rgb2ycrcb.v:100$64 ($mul).
  creating $macc model for $verific$mult_41$rgb2ycrcb.v:127$99 ($mul).
  creating $macc model for $verific$mult_6$rgb2ycrcb.v:101$66 ($mul).
  creating $macc model for $verific$mult_8$rgb2ycrcb.v:102$68 ($mul).
  creating $macc model for $verific$sub_27$rgb2ycrcb.v:117$86 ($sub).
  creating $macc model for $verific$sub_28$rgb2ycrcb.v:117$87 ($sub).
  creating $macc model for $verific$sub_44$rgb2ycrcb.v:130$102 ($sub).
  creating $macc model for $verific$sub_45$rgb2ycrcb.v:130$103 ($sub).
  merging $macc model for $verific$add_10$rgb2ycrcb.v:104$70 into $verific$add_11$rgb2ycrcb.v:104$71.
  creating $alu model for $macc $verific$sub_44$rgb2ycrcb.v:130$102.
  creating $alu model for $macc $verific$sub_28$rgb2ycrcb.v:117$87.
  creating $alu model for $macc $verific$sub_27$rgb2ycrcb.v:117$86.
  creating $alu model for $macc $verific$sub_45$rgb2ycrcb.v:130$103.
  creating $macc cell for $verific$mult_6$rgb2ycrcb.v:101$66: $auto$alumacc.cc:365:replace_macc$164
  creating $macc cell for $verific$mult_41$rgb2ycrcb.v:127$99: $auto$alumacc.cc:365:replace_macc$165
  creating $macc cell for $verific$mult_4$rgb2ycrcb.v:100$64: $auto$alumacc.cc:365:replace_macc$166
  creating $macc cell for $verific$mult_39$rgb2ycrcb.v:126$97: $auto$alumacc.cc:365:replace_macc$167
  creating $macc cell for $verific$mult_25$rgb2ycrcb.v:115$84: $auto$alumacc.cc:365:replace_macc$168
  creating $macc cell for $verific$mult_23$rgb2ycrcb.v:114$82: $auto$alumacc.cc:365:replace_macc$169
  creating $macc cell for $verific$add_11$rgb2ycrcb.v:104$71: $auto$alumacc.cc:365:replace_macc$170
  creating $macc cell for $verific$mult_8$rgb2ycrcb.v:102$68: $auto$alumacc.cc:365:replace_macc$171
  creating $alu cell for $verific$sub_45$rgb2ycrcb.v:130$103: $auto$alumacc.cc:485:replace_alu$172
  creating $alu cell for $verific$sub_27$rgb2ycrcb.v:117$86: $auto$alumacc.cc:485:replace_alu$175
  creating $alu cell for $verific$sub_28$rgb2ycrcb.v:117$87: $auto$alumacc.cc:485:replace_alu$178
  creating $alu cell for $verific$sub_44$rgb2ycrcb.v:130$102: $auto$alumacc.cc:485:replace_alu$181
  created 4 $alu and 8 $macc cells.

19. Executing OPT pass (performing simple optimizations).

19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

19.6. Executing OPT_DFF pass (perform DFF optimizations).

19.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 1 unused cells and 2 unused wires.
<suppressed ~2 debug messages>

19.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

19.9. Rerunning OPT passes. (Maybe there is more to do..)

19.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

19.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

19.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

19.13. Executing OPT_DFF pass (perform DFF optimizations).

19.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

19.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

19.16. Finished OPT passes. (There is nothing left to do.)

20. Executing MEMORY pass.

20.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

20.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

20.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

20.4. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

20.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

20.6. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

20.7. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

20.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

20.9. Executing MEMORY_COLLECT pass (generating $mem cells).

21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

22. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

23. Executing SIMPLEMAP pass (map simple cells to gate primitives).
Mapping top.$auto$ff.cc:262:slice$132 ($dffe).
Mapping top.$auto$ff.cc:262:slice$134 ($dffe).
Mapping top.$auto$ff.cc:262:slice$135 ($dffe).
Mapping top.$auto$ff.cc:262:slice$139 ($dffe).
Mapping top.$auto$ff.cc:262:slice$140 ($dffe).
Mapping top.$auto$ff.cc:262:slice$144 ($dffe).
Mapping top.$auto$ff.cc:262:slice$145 ($dffe).
Mapping top.$auto$ff.cc:262:slice$146 ($dffe).
Mapping top.$auto$ff.cc:262:slice$147 ($dffe).
Mapping top.$auto$ff.cc:262:slice$148 ($dffe).
Mapping top.$auto$ff.cc:262:slice$149 ($dffe).
Mapping top.$auto$ff.cc:262:slice$150 ($dffe).
Mapping top.$auto$ff.cc:262:slice$151 ($dffe).
Mapping top.$auto$ff.cc:262:slice$152 ($dffe).
Mapping top.$auto$ff.cc:262:slice$153 ($dffe).
Mapping top.$verific$and_80$rgb2ycrcb.v:140$130 ($and).
Mapping top.$verific$and_81$rgb2ycrcb.v:143$114 ($and).
Mapping top.$verific$and_82$rgb2ycrcb.v:146$118 ($and).
Mapping top.$verific$i57$rgb2ycrcb.v:140$113 ($not).
Mapping top.$verific$i63$rgb2ycrcb.v:143$117 ($not).
Mapping top.$verific$i69$rgb2ycrcb.v:146$121 ($not).
Mapping top.$verific$or_60$rgb2ycrcb.v:140$115 ($or).
Mapping top.$verific$or_66$rgb2ycrcb.v:143$119 ($or).
Mapping top.$verific$or_72$rgb2ycrcb.v:146$122 ($or).

24. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

25. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

26. Executing OPT_DFF pass (perform DFF optimizations).

27. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 30 unused cells and 0 unused wires.
<suppressed ~30 debug messages>

28. Executing OPT pass (performing simple optimizations).

28.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

28.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

28.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

28.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

28.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

28.6. Executing OPT_DFF pass (perform DFF optimizations).

28.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

28.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

28.9. Finished OPT passes. (There is nothing left to do.)

29. Executing OPT pass (performing simple optimizations).

29.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~21 debug messages>

29.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

29.3. Executing OPT_DFF pass (perform DFF optimizations).

29.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

29.5. Finished fast OPT passes.

30. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

31. Executing OPT pass (performing simple optimizations).

31.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

31.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

31.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

31.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

31.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

31.6. Executing OPT_SHARE pass.

31.7. Executing OPT_DFF pass (perform DFF optimizations).

31.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

31.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

31.10. Finished OPT passes. (There is nothing left to do.)

32. Executing TECHMAP pass (map to technology primitives).

32.1. Executing Verilog-2005 frontend: /home/users/aram/Workspace/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/aram/Workspace/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

32.2. Continuing TECHMAP pass.
Using extmapper maccmap for cells of type $macc.
  add 10'1001011001 * \g (10x10 bits, unsigned)
  add \r * 8'10101101 (10x8 bits, unsigned)
  add \g * 9'101010011 (10x9 bits, unsigned)
Using template $paramod$3f130b1307126b2ad59695abd14050e58a80d0ee\_90_alu for cells of type $alu.
Using template $paramod$6307e5ce3d533ec50c4ecf347391090fef570026\_90_alu for cells of type $alu.
  add \b * 5'11101 (10x5 bits, unsigned)
  add { \yr [18:1] 1'0 } (19 bits, unsigned)
  add { \yb [16:2] 2'00 } (17 bits, unsigned)
  add \yg (20 bits, unsigned)
  add \g * 9'110101101 (10x9 bits, unsigned)
Using template $paramod$aac77111ec976962096d49169906492758c7e4cd\_90_alu for cells of type $alu.
Using template $paramod$61903aa0d8c74376e6a0d884440167125cba3a00\_90_alu for cells of type $alu.
  add \b * 7'1010011 (10x7 bits, unsigned)
  add \r * 8'10011001 (10x8 bits, unsigned)
Using extmapper simplemap for cells of type $and.
Using template $paramod\_90_fa\WIDTH=32'00000000000000000000000000010100 for cells of type $fa.
Using template $paramod$6fc37af1c109ae54e8aed83fcd995c12d378ce93\_90_alu for cells of type $alu.
Using template $paramod\_90_fa\WIDTH=32'00000000000000000000000000010010 for cells of type $fa.
Using template $paramod$12350b8c8422a70d10b7db4eaae1202a7148b784\_90_alu for cells of type $alu.
Using template $paramod\_90_fa\WIDTH=32'00000000000000000000000000010011 for cells of type $fa.
Using template $paramod$4e6ee5eb737cf7428f8e246e911ae1dac9ae2979\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010100 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $not.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010110 for cells of type $lcu.
Using template $paramod\_90_fa\WIDTH=32'00000000000000000000000000001111 for cells of type $fa.
Using template $paramod$67e8f4b8dba01cd3d8fc718acd02276257d102de\_90_alu for cells of type $alu.
Using template $paramod$e161c1674351796cd6dd381e70ff05458bfe7755\_90_alu for cells of type $alu.
Using template $paramod\_90_fa\WIDTH=32'00000000000000000000000000010001 for cells of type $fa.
Using template $paramod$3bb72ad0665cdca279bbc49ed6a39f403f16497f\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $or.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010010 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010011 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001111 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010001 for cells of type $lcu.
No more expansions possible.
<suppressed ~2383 debug messages>

33. Executing OPT pass (performing simple optimizations).

33.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~4582 debug messages>

33.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~426 debug messages>
Removed a total of 142 cells.

33.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

33.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

33.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

33.6. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$235 ($_DFFE_PP_) from module top.

33.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 197 unused cells and 1105 unused wires.
<suppressed ~198 debug messages>

33.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~12 debug messages>

33.9. Rerunning OPT passes. (Maybe there is more to do..)

33.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

33.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

33.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

33.13. Executing OPT_DFF pass (perform DFF optimizations).

33.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

33.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

33.16. Rerunning OPT passes. (Maybe there is more to do..)

33.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

33.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

33.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

33.20. Executing OPT_DFF pass (perform DFF optimizations).

33.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

33.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

33.23. Finished OPT passes. (There is nothing left to do.)

34. Executing ABC pass (technology mapping using ABC).

34.1. Extracting gate netlist of module `\top' to `<abc-temp-dir>/input.blif'..
Extracted 2241 gates and 2441 wires to a netlist network with 200 inputs and 177 outputs.

34.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + source /home/users/aram/Workspace/yosys_verific_rs/scripts/synth/abc/abc_base6.a21.scr 
ABC: netlist  : i/o =    200/    177  and =    6908  lev =   51 (21.53)  mem = 0.09 MB
ABC: Mapping (K=6)  :  lut =    581  edge =    2411  lev =   14 (6.38)  mem = 0.04 MB
ABC: netlist  : i/o =    200/    177  and =    6864  lev =   53 (20.81)  mem = 0.09 MB
ABC: Mapping (K=6)  :  lut =    526  edge =    2225  lev =   15 (6.37)  mem = 0.04 MB
ABC: netlist  : i/o =    200/    177  and =    6854  lev =   53 (21.08)  mem = 0.09 MB
ABC: Mapping (K=6)  :  lut =    507  edge =    2187  lev =   15 (5.98)  mem = 0.04 MB
ABC: netlist  : i/o =    200/    177  and =    5152  lev =   47 (18.92)  mem = 0.07 MB
ABC: Mapping (K=6)  :  lut =    503  edge =    2185  lev =   15 (6.05)  mem = 0.03 MB
ABC: netlist  : i/o =    200/    177  and =    6734  lev =   58 (21.82)  mem = 0.09 MB
ABC: Mapping (K=6)  :  lut =    512  edge =    2202  lev =   15 (6.11)  mem = 0.04 MB
ABC: netlist  : i/o =    200/    177  and =    6762  lev =   54 (21.12)  mem = 0.11 MB
ABC: Mapping (K=6)  :  lut =    486  edge =    2153  lev =   15 (5.53)  mem = 0.04 MB
ABC: netlist  : i/o =    200/    177  and =    6791  lev =   54 (20.85)  mem = 0.11 MB
ABC: Mapping (K=6)  :  lut =    479  edge =    2149  lev =   15 (5.44)  mem = 0.04 MB
ABC: netlist  : i/o =    200/    177  and =    6924  lev =   54 (21.21)  mem = 0.12 MB
ABC: Mapping (K=6)  :  lut =    480  edge =    2160  lev =   14 (5.56)  mem = 0.04 MB
ABC: netlist  : i/o =    200/    177  and =    5695  lev =   44 (17.96)  mem = 0.10 MB
ABC: Mapping (K=6)  :  lut =    476  edge =    2180  lev =   15 (5.47)  mem = 0.04 MB
ABC: netlist  : i/o =    200/    177  and =    6805  lev =   55 (21.50)  mem = 0.12 MB
ABC: Mapping (K=6)  :  lut =    470  edge =    2141  lev =   14 (5.45)  mem = 0.04 MB
ABC: netlist  : i/o =    200/    177  and =    6843  lev =   55 (21.08)  mem = 0.12 MB
ABC: Mapping (K=6)  :  lut =    475  edge =    2143  lev =   15 (5.59)  mem = 0.04 MB
ABC: netlist  : i/o =    200/    177  and =    6824  lev =   55 (21.39)  mem = 0.12 MB
ABC: Mapping (K=6)  :  lut =    471  edge =    2133  lev =   15 (5.46)  mem = 0.04 MB
ABC: netlist  : i/o =    200/    177  and =    6823  lev =   55 (21.47)  mem = 0.12 MB
ABC: Mapping (K=6)  :  lut =    473  edge =    2140  lev =   15 (5.52)  mem = 0.04 MB
ABC: netlist  : i/o =    200/    177  and =    6805  lev =   55 (21.50)  mem = 0.09 MB
ABC: Mapping (K=6)  :  lut =    470  edge =    2141  lev =   14 (5.45)  mem = 0.04 MB
ABC: netlist  : i/o =    200/    177  and =    6805  lev =   55 (21.50)  mem = 0.12 MB
ABC: Mapping (K=6)  :  lut =    470  edge =    2141  lev =   14 (5.45)  mem = 0.04 MB
ABC: netlist  : i/o =    200/    177  and =    6832  lev =   55 (21.92)  mem = 0.09 MB
ABC: Mapping (K=6)  :  lut =    470  edge =    2141  lev =   14 (5.45)  mem = 0.04 MB
ABC: + write_blif <abc-temp-dir>/output.blif 

34.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:      470
ABC RESULTS:        internal signals:     2064
ABC RESULTS:           input signals:      200
ABC RESULTS:          output signals:      177
Removing temp directory.

35. Executing OPT pass (performing simple optimizations).

35.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

35.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~12 debug messages>
Removed a total of 4 cells.

35.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

35.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

35.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

35.6. Executing OPT_DFF pass (perform DFF optimizations).

35.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 961 unused wires.
<suppressed ~1 debug messages>

35.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

35.9. Rerunning OPT passes. (Maybe there is more to do..)

35.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

35.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

35.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

35.13. Executing OPT_DFF pass (perform DFF optimizations).

35.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

35.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

35.16. Finished OPT passes. (There is nothing left to do.)

36. Executing HIERARCHY pass (managing design hierarchy).

36.1. Analyzing design hierarchy..
Top module:  \top

36.2. Analyzing design hierarchy..
Top module:  \top
Removed 0 unused modules.

37. Printing statistics.

=== top ===

   Number of wires:                388
   Number of wire bits:           1449
   Number of public wires:          20
   Number of public wire bits:     295
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                666
     $_DFFE_PP_                    198
     $lut                          468

38. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

39. Executing BLIF backend.

Warnings: 15 unique messages, 15 total
End of script. Logfile hash: bc45d169cc, CPU: user 2.11s system 0.03s, MEM: 41.68 MB peak
Yosys 0.14+36 (git sha1 15a4e900b, gcc 7.1.0 -fPIC -Os)
Time spent: 87% 1x abc (13 sec), 4% 37x opt_expr (0 sec), ...
