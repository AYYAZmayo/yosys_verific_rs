
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.14+36 (git sha1 15a4e900b, gcc 7.1.0 -fPIC -Os)


-- Executing script file `yosys.ys' --

1. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Jan22_SW_Release, released at Sat Jan 29 02:42:49 2022.

2. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Jan22_SW_Release, released at Sat Jan 29 02:42:49 2022.
VERIFIC-INFO [VHDL-1504] default VHDL library search path is now "/home/users/aram/Workspace/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008"
VERIFIC-COMMENT [VHDL-1481] Analyzing VHDL file 'b14.vhd'
VERIFIC-COMMENT [VHDL-1493] Restoring VHDL unit 'std.standard' from file '/home/users/aram/Workspace/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008/std/standard.vdb'
VERIFIC-INFO [VHDL-1012] b14.vhd:1: analyzing entity 'b14'
VERIFIC-INFO [VHDL-1010] b14.vhd:11: analyzing architecture 'behav'

3. Executing HIERARCHY pass (managing design hierarchy).
VERIFIC-INFO [VHDL-1067] b14.vhd:1: processing 'b14(BEHAV)'
VERIFIC-INFO [VHDL-1172] b14.vhd:478: 'others' clause is never selected
Importing module standard.
Importing module b14.

3.1. Analyzing design hierarchy..
Top module:  \b14

3.2. Analyzing design hierarchy..
Top module:  \b14
Removing unused module `\standard'.
Removed 1 unused modules.

4. Executing PROC pass (convert processes to netlists).

4.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

4.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

4.4. Executing PROC_INIT pass (extract init attributes).

4.5. Executing PROC_ARST pass (detect async resets in processes).

4.6. Executing PROC_MUX pass (convert decision trees to multiplexers).

4.7. Executing PROC_DLATCH pass (convert process syncs to latches).

4.8. Executing PROC_DFF pass (convert process syncs to FFs).

4.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

4.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module b14.
<suppressed ~26 debug messages>

5. Executing FLATTEN pass (flatten design).

6. Executing TRIBUF pass.

7. Executing OPT_EXPR pass (perform const folding).
Optimizing module b14.
<suppressed ~7 debug messages>

8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b14..
Removed 7 unused cells and 160 unused wires.
<suppressed ~54 debug messages>

9. Executing CHECK pass (checking for obvious problems).
Checking module b14...
Found and reported 0 problems.

10. Executing DEMINOUT pass (demote inout ports to input or output).

11. Executing OPT pass (performing simple optimizations).

11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b14.

11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b14'.
Removed a total of 0 cells.

11.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b14..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $verific$i684$b14.vhd:501$469.
    dead port 2/2 on $mux $verific$mux_672$b14.vhd:501$460.
    dead port 2/2 on $mux $verific$mux_685$b14.vhd:501$471.
Removed 3 multiplexer ports.
<suppressed ~19 debug messages>

11.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b14.
    New ctrl vector for $pmux cell $verific$select_746$b14.vhd:486$422: { $verific$n2255$53 $auto$opt_reduce.cc:134:opt_pmux$513 }
    New ctrl vector for $pmux cell $verific$select_750$b14.vhd:486$363: { $verific$n2256$54 $auto$opt_reduce.cc:134:opt_pmux$515 }
    New ctrl vector for $pmux cell $verific$select_751$b14.vhd:486$440: { $verific$n2257$55 $auto$opt_reduce.cc:134:opt_pmux$517 }
    New ctrl vector for $pmux cell $verific$select_752$b14.vhd:486$441: { $verific$n2258$56 $auto$opt_reduce.cc:134:opt_pmux$519 }
  Optimizing cells in module \b14.
Performed a total of 4 changes.

11.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b14'.
Removed a total of 0 cells.

11.6. Executing OPT_DFF pass (perform DFF optimizations).
Changing const-value async load to async reset on $verific$wr_reg$b14.vhd:505$506 ($aldff) from module b14.
Changing const-value async load to async reset on $verific$state_reg$b14.vhd:505$508 ($aldff) from module b14.
Changing const-value async load to async reset on $verific$reg3_reg$b14.vhd:505$503 ($aldff) from module b14.
Changing const-value async load to async reset on $verific$reg2_reg$b14.vhd:505$502 ($aldff) from module b14.
Changing const-value async load to async reset on $verific$reg1_reg$b14.vhd:505$501 ($aldff) from module b14.
Changing const-value async load to async reset on $verific$reg0_reg$b14.vhd:505$500 ($aldff) from module b14.
Changing const-value async load to async reset on $verific$rd_reg$b14.vhd:505$505 ($aldff) from module b14.
Changing const-value async load to async reset on $verific$IR_reg$b14.vhd:505$497 ($aldff) from module b14.
Changing const-value async load to async reset on $verific$B_reg$b14.vhd:505$499 ($aldff) from module b14.
Changing const-value async load to async reset on $verific$datao_reg$b14.vhd:505$507 ($aldff) from module b14.
Changing const-value async load to async reset on $verific$d_reg$b14.vhd:505$498 ($aldff) from module b14.
Changing const-value async load to async reset on $verific$addr_reg$b14.vhd:505$504 ($aldff) from module b14.

11.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b14..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

11.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module b14.

11.9. Rerunning OPT passes. (Maybe there is more to do..)

11.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b14..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~19 debug messages>

11.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b14.
Performed a total of 0 changes.

11.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b14'.
Removed a total of 0 cells.

11.13. Executing OPT_DFF pass (perform DFF optimizations).

11.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b14..

11.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module b14.

11.16. Finished OPT passes. (There is nothing left to do.)

12. Executing FSM pass (extract and optimize FSM).

12.1. Executing FSM_DETECT pass (finding FSMs in design).
Found FSM state register b14.d.

12.2. Executing FSM_EXTRACT pass (extracting FSM from design).
Extracting FSM `\d' from module `\b14'.
  found $adff cell for state register: $verific$d_reg$b14.vhd:505$498
  root of input selection tree: $verific$n11472$303
  found reset state: 0 (from async reset)
  found ctrl input: \state
  found ctrl input: $verific$n341$149 [0]
  found ctrl input: $verific$n10346$120
  found ctrl input: $verific$n1405$47
  found ctrl input: $verific$n1440$48
  found ctrl input: $verific$n1474$49
  found ctrl input: $verific$n1475$50
  found ctrl input: $verific$n1476$51
  found ctrl input: $verific$n1477$52
  found state code: 1
  found state code: 2
  found state code: 3
  found ctrl input: \B
  ctrl inputs: { $verific$n341$149 [0] $verific$n10346$120 $verific$n1477$52 $verific$n1476$51 $verific$n1475$50 $verific$n1474$49 $verific$n1440$48 $verific$n1405$47 \state \B }
  ctrl outputs: $verific$n11472$303
  transition:          0 10'--------0- ->          0 0
  transition:          0 10'000000001- ->          0 0
  transition:          0 10'001000001- ->          0 0
  transition:          0 10'00-100001- ->          1 1
  transition:          0 10'00--10001- ->          2 2
  transition:          0 10'00---1001- ->          3 3
  transition:          0 10'00----1010 ->          0 0
  transition:          0 10'00----1011 ->          3 3
  transition:          0 10'00-----110 ->          3 3
  transition:          0 10'00-----111 ->          0 0
  transition:          0 10'01------1- ->          0 0
  transition:          0 10'1-------1- ->          0 0
  transition:          2 10'--------0- ->          2 2
  transition:          2 10'000000001- ->          2 2
  transition:          2 10'001000001- ->          0 0
  transition:          2 10'00-100001- ->          1 1
  transition:          2 10'00--10001- ->          2 2
  transition:          2 10'00---1001- ->          3 3
  transition:          2 10'00----1010 ->          2 2
  transition:          2 10'00----1011 ->          3 3
  transition:          2 10'00-----110 ->          3 3
  transition:          2 10'00-----111 ->          2 2
  transition:          2 10'01------1- ->          2 2
  transition:          2 10'1-------1- ->          2 2
  transition:          1 10'--------0- ->          1 1
  transition:          1 10'000000001- ->          1 1
  transition:          1 10'001000001- ->          0 0
  transition:          1 10'00-100001- ->          1 1
  transition:          1 10'00--10001- ->          2 2
  transition:          1 10'00---1001- ->          3 3
  transition:          1 10'00----1010 ->          1 1
  transition:          1 10'00----1011 ->          3 3
  transition:          1 10'00-----110 ->          3 3
  transition:          1 10'00-----111 ->          1 1
  transition:          1 10'01------1- ->          1 1
  transition:          1 10'1-------1- ->          1 1
  transition:          3 10'--------0- ->          3 3
  transition:          3 10'000000001- ->          3 3
  transition:          3 10'001000001- ->          0 0
  transition:          3 10'00-100001- ->          1 1
  transition:          3 10'00--10001- ->          2 2
  transition:          3 10'00---1001- ->          3 3
  transition:          3 10'00----1010 ->          3 3
  transition:          3 10'00----1011 ->          3 3
  transition:          3 10'00-----110 ->          3 3
  transition:          3 10'00-----111 ->          3 3
  transition:          3 10'01------1- ->          3 3
  transition:          3 10'1-------1- ->          3 3

12.3. Executing FSM_OPT pass (simple optimizations of FSMs).
Optimizing FSM `$fsm$\d$520' from module `\b14'.
  Merging pattern 10'000000001- and 10'001000001- from group (0 0 0).
  Merging pattern 10'001000001- and 10'000000001- from group (0 0 0).
  Merging pattern 10'00----1010 and 10'00----1011 from group (3 3 3).
  Merging pattern 10'00-----110 and 10'00-----111 from group (3 3 3).
  Merging pattern 10'00----1011 and 10'00----1010 from group (3 3 3).
  Merging pattern 10'00-----111 and 10'00-----110 from group (3 3 3).

12.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b14..
Removed 3 unused cells and 3 unused wires.
<suppressed ~4 debug messages>

12.5. Executing FSM_OPT pass (simple optimizations of FSMs).
Optimizing FSM `$fsm$\d$520' from module `\b14'.

12.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).
Recoding FSM `$fsm$\d$520' from module `\b14' using `auto' encoding:
  mapping auto encoding to `one-hot` for this FSM.
  00000000000000000000000000000000 -> ---1
  00000000000000000000000000000010 -> --1-
  00000000000000000000000000000001 -> -1--
  00000000000000000000000000000011 -> 1---

12.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

FSM `$fsm$\d$520' from module `b14':
-------------------------------------

  Information on FSM $fsm$\d$520 (\d):

  Number of input signals:   10
  Number of output signals:  32
  Number of state bits:       4

  Input signals:
    0: \B
    1: \state
    2: $verific$n1405$47
    3: $verific$n1440$48
    4: $verific$n1474$49
    5: $verific$n1475$50
    6: $verific$n1476$51
    7: $verific$n1477$52
    8: $verific$n10346$120
    9: $verific$n341$149 [0]

  Output signals:
    0: $verific$n11472$303 [0]
    1: $verific$n11472$303 [1]
    2: $verific$n11472$303 [2]
    3: $verific$n11472$303 [3]
    4: $verific$n11472$303 [4]
    5: $verific$n11472$303 [5]
    6: $verific$n11472$303 [6]
    7: $verific$n11472$303 [7]
    8: $verific$n11472$303 [8]
    9: $verific$n11472$303 [9]
   10: $verific$n11472$303 [10]
   11: $verific$n11472$303 [11]
   12: $verific$n11472$303 [12]
   13: $verific$n11472$303 [13]
   14: $verific$n11472$303 [14]
   15: $verific$n11472$303 [15]
   16: $verific$n11472$303 [16]
   17: $verific$n11472$303 [17]
   18: $verific$n11472$303 [18]
   19: $verific$n11472$303 [19]
   20: $verific$n11472$303 [20]
   21: $verific$n11472$303 [21]
   22: $verific$n11472$303 [22]
   23: $verific$n11472$303 [23]
   24: $verific$n11472$303 [24]
   25: $verific$n11472$303 [25]
   26: $verific$n11472$303 [26]
   27: $verific$n11472$303 [27]
   28: $verific$n11472$303 [28]
   29: $verific$n11472$303 [29]
   30: $verific$n11472$303 [30]
   31: $verific$n11472$303 [31]

  State encoding:
    0:     4'---1  <RESET STATE>
    1:     4'--1-
    2:     4'-1--
    3:     4'1---

  Transition Table (state_in, ctrl_in, state_out, ctrl_out):
      0:     0 10'00----1010   ->     0 0
      1:     0 10'00-----111   ->     0 0
      2:     0 10'--------0-   ->     0 0
      3:     0 10'00-000001-   ->     0 0
      4:     0 10'01------1-   ->     0 0
      5:     0 10'1-------1-   ->     0 0
      6:     0 10'00--10001-   ->     1 2
      7:     0 10'00-100001-   ->     2 1
      8:     0 10'00-----110   ->     3 3
      9:     0 10'00----1011   ->     3 3
     10:     0 10'00---1001-   ->     3 3
     11:     1 10'001000001-   ->     0 0
     12:     1 10'00----1010   ->     1 2
     13:     1 10'00-----111   ->     1 2
     14:     1 10'--------0-   ->     1 2
     15:     1 10'000000001-   ->     1 2
     16:     1 10'00--10001-   ->     1 2
     17:     1 10'01------1-   ->     1 2
     18:     1 10'1-------1-   ->     1 2
     19:     1 10'00-100001-   ->     2 1
     20:     1 10'00-----110   ->     3 3
     21:     1 10'00----1011   ->     3 3
     22:     1 10'00---1001-   ->     3 3
     23:     2 10'001000001-   ->     0 0
     24:     2 10'00--10001-   ->     1 2
     25:     2 10'00----1010   ->     2 1
     26:     2 10'00-----111   ->     2 1
     27:     2 10'--------0-   ->     2 1
     28:     2 10'000000001-   ->     2 1
     29:     2 10'00-100001-   ->     2 1
     30:     2 10'01------1-   ->     2 1
     31:     2 10'1-------1-   ->     2 1
     32:     2 10'00-----110   ->     3 3
     33:     2 10'00----1011   ->     3 3
     34:     2 10'00---1001-   ->     3 3
     35:     3 10'001000001-   ->     0 0
     36:     3 10'00--10001-   ->     1 2
     37:     3 10'00-100001-   ->     2 1
     38:     3 10'--------0-   ->     3 3
     39:     3 10'000000001-   ->     3 3
     40:     3 10'00---1001-   ->     3 3
     41:     3 10'00----101-   ->     3 3
     42:     3 10'00-----11-   ->     3 3
     43:     3 10'01------1-   ->     3 3
     44:     3 10'1-------1-   ->     3 3

-------------------------------------

12.8. Executing FSM_MAP pass (mapping FSMs to basic logic).
Mapping FSM `$fsm$\d$520' from module `\b14'.

13. Executing OPT pass (performing simple optimizations).

13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b14.
<suppressed ~6 debug messages>

13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b14'.
<suppressed ~162 debug messages>
Removed a total of 54 cells.

13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b14..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~18 debug messages>

13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b14.
Performed a total of 0 changes.

13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b14'.
Removed a total of 0 cells.

13.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $verific$reg3_reg$b14.vhd:505$503 ($adff) from module b14 (D = $verific$n11178$298 [31:3], Q = \reg3 [31:3]).
Adding EN signal on $verific$reg3_reg$b14.vhd:505$503 ($adff) from module b14 (D = $verific$n10312$273 [2:0], Q = \reg3 [2:0]).
Adding EN signal on $verific$reg2_reg$b14.vhd:505$502 ($adff) from module b14 (D = $verific$n10279$272, Q = \reg2).
Adding EN signal on $verific$reg1_reg$b14.vhd:505$501 ($adff) from module b14 (D = $verific$n10246$271, Q = \reg1).
Adding EN signal on $verific$reg0_reg$b14.vhd:505$500 ($adff) from module b14 (D = $verific$n10213$270, Q = \reg0).
Adding EN signal on $verific$datao_reg$b14.vhd:505$507 ($adff) from module b14 (D = { $verific$add_570$b14.vhd:466$431 $verific$n10514$281 [0] }, Q = \datao).
Adding EN signal on $verific$B_reg$b14.vhd:505$499 ($adff) from module b14 (D = $verific$n10979$128, Q = \B).

13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b14..
Removed 14 unused cells and 70 unused wires.
<suppressed ~15 debug messages>

13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module b14.

13.9. Rerunning OPT passes. (Maybe there is more to do..)

13.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b14..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~14 debug messages>

13.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b14.
Performed a total of 0 changes.

13.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b14'.
<suppressed ~30 debug messages>
Removed a total of 10 cells.

13.13. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 2 on $verific$d_reg$b14.vhd:505$498 ($adff) from module b14.
Setting constant 0-bit at position 3 on $verific$d_reg$b14.vhd:505$498 ($adff) from module b14.
Setting constant 0-bit at position 4 on $verific$d_reg$b14.vhd:505$498 ($adff) from module b14.
Setting constant 0-bit at position 5 on $verific$d_reg$b14.vhd:505$498 ($adff) from module b14.
Setting constant 0-bit at position 6 on $verific$d_reg$b14.vhd:505$498 ($adff) from module b14.
Setting constant 0-bit at position 7 on $verific$d_reg$b14.vhd:505$498 ($adff) from module b14.
Setting constant 0-bit at position 8 on $verific$d_reg$b14.vhd:505$498 ($adff) from module b14.
Setting constant 0-bit at position 9 on $verific$d_reg$b14.vhd:505$498 ($adff) from module b14.
Setting constant 0-bit at position 10 on $verific$d_reg$b14.vhd:505$498 ($adff) from module b14.
Setting constant 0-bit at position 11 on $verific$d_reg$b14.vhd:505$498 ($adff) from module b14.
Setting constant 0-bit at position 12 on $verific$d_reg$b14.vhd:505$498 ($adff) from module b14.
Setting constant 0-bit at position 13 on $verific$d_reg$b14.vhd:505$498 ($adff) from module b14.
Setting constant 0-bit at position 14 on $verific$d_reg$b14.vhd:505$498 ($adff) from module b14.
Setting constant 0-bit at position 15 on $verific$d_reg$b14.vhd:505$498 ($adff) from module b14.
Setting constant 0-bit at position 16 on $verific$d_reg$b14.vhd:505$498 ($adff) from module b14.
Setting constant 0-bit at position 17 on $verific$d_reg$b14.vhd:505$498 ($adff) from module b14.
Setting constant 0-bit at position 18 on $verific$d_reg$b14.vhd:505$498 ($adff) from module b14.
Setting constant 0-bit at position 19 on $verific$d_reg$b14.vhd:505$498 ($adff) from module b14.
Setting constant 0-bit at position 20 on $verific$d_reg$b14.vhd:505$498 ($adff) from module b14.
Setting constant 0-bit at position 21 on $verific$d_reg$b14.vhd:505$498 ($adff) from module b14.
Setting constant 0-bit at position 22 on $verific$d_reg$b14.vhd:505$498 ($adff) from module b14.
Setting constant 0-bit at position 23 on $verific$d_reg$b14.vhd:505$498 ($adff) from module b14.
Setting constant 0-bit at position 24 on $verific$d_reg$b14.vhd:505$498 ($adff) from module b14.
Setting constant 0-bit at position 25 on $verific$d_reg$b14.vhd:505$498 ($adff) from module b14.
Setting constant 0-bit at position 26 on $verific$d_reg$b14.vhd:505$498 ($adff) from module b14.
Setting constant 0-bit at position 27 on $verific$d_reg$b14.vhd:505$498 ($adff) from module b14.
Setting constant 0-bit at position 28 on $verific$d_reg$b14.vhd:505$498 ($adff) from module b14.
Setting constant 0-bit at position 29 on $verific$d_reg$b14.vhd:505$498 ($adff) from module b14.
Setting constant 0-bit at position 30 on $verific$d_reg$b14.vhd:505$498 ($adff) from module b14.
Setting constant 0-bit at position 31 on $verific$d_reg$b14.vhd:505$498 ($adff) from module b14.

13.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b14..
Removed 0 unused cells and 10 unused wires.
<suppressed ~1 debug messages>

13.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module b14.

13.16. Rerunning OPT passes. (Maybe there is more to do..)

13.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b14..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~14 debug messages>

13.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b14.
Performed a total of 0 changes.

13.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b14'.
Removed a total of 0 cells.

13.20. Executing OPT_DFF pass (perform DFF optimizations).

13.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b14..

13.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module b14.

13.23. Finished OPT passes. (There is nothing left to do.)

14. Executing WREDUCE pass (reducing word size of cells).
Removed top 2 bits (of 8) from port B of cell b14.$auto$fsm_map.cc:77:implement_pattern_cache$663 ($eq).
Removed top 3 bits (of 29) from FF cell b14.$auto$ff.cc:262:slice$736 ($adffe).
Removed top 1 bits (of 2) from port B of cell b14.$auto$opt_dff.cc:195:make_patterns_logic$772 ($ne).
Removed top 7 bits (of 8) from port B of cell b14.$auto$fsm_map.cc:77:implement_pattern_cache$541 ($eq).
Removed top 2 bits (of 9) from port B of cell b14.$auto$fsm_map.cc:77:implement_pattern_cache$539 ($eq).
Removed top 1 bits (of 3) from port B of cell b14.$auto$fsm_map.cc:77:implement_pattern_cache$724 ($eq).
Removed top 2 bits (of 5) from port B of cell b14.$auto$fsm_map.cc:77:implement_pattern_cache$692 ($eq).
Removed top 2 bits (of 6) from port B of cell b14.$auto$fsm_map.cc:77:implement_pattern_cache$694 ($eq).
Removed top 1 bits (of 32) from port A of cell b14.$verific$LessThan_14$b14.vhd:83$320 ($lt).
Removed top 1 bits (of 33) from port Y of cell b14.$verific$unary_minus_15$b14.vhd:84$321 ($neg).
Removed top 1 bits (of 33) from port A of cell b14.$verific$unary_minus_15$b14.vhd:84$321 ($neg).
Removed top 2 bits (of 5) from port B of cell b14.$auto$fsm_map.cc:77:implement_pattern_cache$696 ($eq).
Removed top 3 bits (of 5) from port Y of cell b14.$verific$add_21$b14.vhd:86$327 ($add).
Removed top 3 bits (of 5) from port A of cell b14.$verific$add_21$b14.vhd:86$327 ($add).
Removed top 5 bits (of 8) from port Y of cell b14.$verific$add_26$b14.vhd:88$334 ($add).
Removed top 5 bits (of 8) from port A of cell b14.$verific$add_26$b14.vhd:88$334 ($add).
Removed top 9 bits (of 13) from port Y of cell b14.$verific$add_31$b14.vhd:90$341 ($add).
Removed top 9 bits (of 13) from port A of cell b14.$verific$add_31$b14.vhd:90$341 ($add).
Removed top 8 bits (of 9) from port Y of cell b14.$verific$add_36$b14.vhd:92$348 ($add).
Removed top 8 bits (of 9) from port A of cell b14.$verific$add_36$b14.vhd:92$348 ($add).
Removed top 25 bits (of 26) from port B of cell b14.$verific$add_39$b14.vhd:95$354 ($add).
Removed top 8 bits (of 9) from port B of cell b14.$auto$fsm_map.cc:77:implement_pattern_cache$706 ($eq).
Removed top 1 bits (of 3) from port Y of cell b14.$verific$add_44$b14.vhd:96$358 ($add).
Removed top 1 bits (of 3) from port A of cell b14.$verific$add_44$b14.vhd:96$358 ($add).
Removed top 12 bits (of 32) from port A of cell b14.$verific$add_56$b14.vhd:110$366 ($add).
Removed top 12 bits (of 32) from port Y of cell b14.$verific$add_56$b14.vhd:110$366 ($add).
Removed top 12 bits (of 32) from port B of cell b14.$verific$add_56$b14.vhd:110$366 ($add).
Removed top 12 bits (of 32) from port A of cell b14.$verific$add_61$b14.vhd:113$368 ($add).
Removed top 12 bits (of 32) from port Y of cell b14.$verific$add_61$b14.vhd:113$368 ($add).
Removed top 12 bits (of 32) from port B of cell b14.$verific$add_61$b14.vhd:113$368 ($add).
Removed top 1 bits (of 32) from port B of cell b14.$verific$LessThan_83$b14.vhd:148$380 ($lt).
Removed top 2 bits (of 33) from port B of cell b14.$verific$sub_84$b14.vhd:149$381 ($sub).
Removed top 1 bits (of 33) from port Y of cell b14.$verific$sub_84$b14.vhd:149$381 ($sub).
Removed top 1 bits (of 33) from port A of cell b14.$verific$sub_84$b14.vhd:149$381 ($sub).
Removed top 30 bits (of 32) from mux cell b14.$verific$mux_138$b14.vhd:216$399 ($mux).
Removed top 30 bits (of 32) from mux cell b14.$verific$mux_140$b14.vhd:220$401 ($mux).
Removed top 1 bits (of 3) from port A of cell b14.$verific$equal_141$b14.vhd:221$402 ($eq).
Removed top 1 bits (of 3) from port A of cell b14.$verific$equal_142$b14.vhd:223$403 ($eq).
Removed top 2 bits (of 3) from port A of cell b14.$verific$equal_143$b14.vhd:224$404 ($eq).
Removed top 30 bits (of 32) from mux cell b14.$verific$mux_145$b14.vhd:226$406 ($mux).
Removed top 30 bits (of 32) from mux cell b14.$verific$mux_146$b14.vhd:226$407 ($mux).
Removed top 30 bits (of 32) from mux cell b14.$verific$mux_147$b14.vhd:226$408 ($mux).
Removed top 30 bits (of 32) from mux cell b14.$verific$mux_148$b14.vhd:226$409 ($mux).
Removed top 30 bits (of 32) from mux cell b14.$verific$mux_149$b14.vhd:226$410 ($mux).
Removed top 30 bits (of 32) from mux cell b14.$verific$mux_150$b14.vhd:226$411 ($mux).
Removed top 32 bits (of 33) from port A of cell b14.$verific$sub_168$b14.vhd:243$412 ($sub).
Removed top 1 bits (of 33) from port Y of cell b14.$verific$sub_168$b14.vhd:243$412 ($sub).
Removed top 1 bits (of 33) from port B of cell b14.$verific$sub_168$b14.vhd:243$412 ($sub).
Removed top 31 bits (of 32) from port A of cell b14.$verific$equal_177$b14.vhd:244$415 ($eq).
Removed top 30 bits (of 32) from port B of cell b14.$verific$equal_177$b14.vhd:244$415 ($eq).
Removed top 30 bits (of 32) from port A of cell b14.$verific$equal_178$b14.vhd:245$416 ($eq).
Removed top 30 bits (of 32) from port B of cell b14.$verific$equal_178$b14.vhd:245$416 ($eq).
Removed top 30 bits (of 32) from port A of cell b14.$verific$equal_179$b14.vhd:246$417 ($eq).
Removed top 30 bits (of 32) from port B of cell b14.$verific$equal_179$b14.vhd:246$417 ($eq).
Removed top 2 bits (of 7) from port B of cell b14.$auto$fsm_map.cc:77:implement_pattern_cache$712 ($eq).
Removed top 2 bits (of 32) from port Y of cell b14.$verific$add_283$b14.vhd:318$423 ($add).
Removed top 2 bits (of 32) from port A of cell b14.$verific$add_283$b14.vhd:318$423 ($add).
Removed top 2 bits (of 32) from port B of cell b14.$verific$add_283$b14.vhd:318$423 ($add).
Removed top 3 bits (of 33) from port Y of cell b14.$verific$sub_365$b14.vhd:358$425 ($sub).
Removed top 3 bits (of 33) from port A of cell b14.$verific$sub_365$b14.vhd:358$425 ($sub).
Removed top 3 bits (of 33) from port B of cell b14.$verific$sub_365$b14.vhd:358$425 ($sub).
Removed top 2 bits (of 6) from port B of cell b14.$auto$fsm_map.cc:77:implement_pattern_cache$714 ($eq).
Removed top 2 bits (of 5) from port B of cell b14.$auto$fsm_map.cc:77:implement_pattern_cache$716 ($eq).
Removed top 2 bits (of 6) from port B of cell b14.$auto$fsm_map.cc:77:implement_pattern_cache$688 ($eq).
Removed top 2 bits (of 4) from port B of cell b14.$auto$fsm_map.cc:77:implement_pattern_cache$720 ($eq).
Removed top 3 bits (of 32) from mux cell b14.$verific$mux_698$b14.vhd:502$481 ($mux).
Removed top 3 bits (of 32) from mux cell b14.$verific$mux_679$b14.vhd:501$467 ($mux).
Removed top 30 bits (of 32) from wire b14.$fsm$oldstate\d.
Removed top 20 bits (of 21) from wire b14.$verific$n10477$278.
Removed top 3 bits (of 32) from wire b14.$verific$n10755$289.
Removed top 3 bits (of 32) from wire b14.$verific$n11178$298.
Removed top 30 bits (of 32) from wire b14.$verific$n11472$303.
Removed top 30 bits (of 32) from wire b14.$verific$n1407$171.
Removed top 30 bits (of 32) from wire b14.$verific$n1441$172.
Removed top 1 bits (of 33) from wire b14.$verific$n184$140.
Removed top 27 bits (of 30) from wire b14.$verific$n2703$198.
Removed top 9 bits (of 13) from wire b14.$verific$n318$147.
Removed top 8 bits (of 9) from wire b14.$verific$n341$149.
Removed top 2 bits (of 32) from wire b14.$verific$n4241$217.
Removed top 1 bits (of 3) from wire b14.$verific$n436$153.
Removed top 3 bits (of 33) from wire b14.$verific$n5666$231.
Removed top 1 bits (of 32) from wire b14.$verific$n862$166.
Removed top 1 bits (of 33) from wire b14.$verific$n933$168.
Removed top 3 bits (of 32) from wire b14.reg3.

15. Executing PEEPOPT pass (run peephole optimizers).

16. Executing PMUXTREE pass.

17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b14..
Removed 8 unused cells and 57 unused wires.
<suppressed ~9 debug messages>

18. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module b14:
  creating $macc model for $verific$add_21$b14.vhd:86$327 ($add).
  creating $macc model for $verific$add_26$b14.vhd:88$334 ($add).
  creating $macc model for $verific$add_283$b14.vhd:318$423 ($add).
  creating $macc model for $verific$add_31$b14.vhd:90$341 ($add).
  creating $macc model for $verific$add_36$b14.vhd:92$348 ($add).
  creating $macc model for $verific$add_39$b14.vhd:95$354 ($add).
  creating $macc model for $verific$add_44$b14.vhd:96$358 ($add).
  creating $macc model for $verific$add_56$b14.vhd:110$366 ($add).
  creating $macc model for $verific$add_570$b14.vhd:466$430 ($add).
  creating $macc model for $verific$add_61$b14.vhd:113$368 ($add).
  creating $macc model for $verific$add_662$b14.vhd:493$450 ($add).
  creating $macc model for $verific$add_664$b14.vhd:494$452 ($add).
  creating $macc model for $verific$mult_667$b14.vhd:497$456 ($mul).
  creating $macc model for $verific$sub_168$b14.vhd:243$412 ($sub).
  creating $macc model for $verific$sub_365$b14.vhd:358$425 ($sub).
  creating $macc model for $verific$sub_84$b14.vhd:149$381 ($sub).
  creating $macc model for $verific$unary_minus_15$b14.vhd:84$321 ($neg).
  creating $alu model for $macc $verific$unary_minus_15$b14.vhd:84$321.
  creating $alu model for $macc $verific$sub_84$b14.vhd:149$381.
  creating $alu model for $macc $verific$sub_365$b14.vhd:358$425.
  creating $alu model for $macc $verific$sub_168$b14.vhd:243$412.
  creating $alu model for $macc $verific$add_664$b14.vhd:494$452.
  creating $alu model for $macc $verific$add_662$b14.vhd:493$450.
  creating $alu model for $macc $verific$add_61$b14.vhd:113$368.
  creating $alu model for $macc $verific$add_570$b14.vhd:466$430.
  creating $alu model for $macc $verific$add_56$b14.vhd:110$366.
  creating $alu model for $macc $verific$add_44$b14.vhd:96$358.
  creating $alu model for $macc $verific$add_39$b14.vhd:95$354.
  creating $alu model for $macc $verific$add_36$b14.vhd:92$348.
  creating $alu model for $macc $verific$add_31$b14.vhd:90$341.
  creating $alu model for $macc $verific$add_283$b14.vhd:318$423.
  creating $alu model for $macc $verific$add_26$b14.vhd:88$334.
  creating $alu model for $macc $verific$add_21$b14.vhd:86$327.
  creating $macc cell for $verific$mult_667$b14.vhd:497$456: $auto$alumacc.cc:365:replace_macc$825
  creating $alu model for $verific$LessThan_14$b14.vhd:83$320 ($lt): new $alu
  creating $alu model for $verific$LessThan_68$b14.vhd:118$374 ($lt): new $alu
  creating $alu model for $verific$LessThan_78$b14.vhd:138$378 ($lt): merged with $verific$LessThan_68$b14.vhd:118$374.
  creating $alu model for $verific$LessThan_83$b14.vhd:148$380 ($lt): new $alu
  creating $alu model for $verific$LessThan_87$b14.vhd:151$385 ($lt): new $alu
  creating $alu cell for $verific$LessThan_87$b14.vhd:151$385: $auto$alumacc.cc:485:replace_alu$830
  creating $alu cell for $verific$LessThan_83$b14.vhd:148$380: $auto$alumacc.cc:485:replace_alu$835
  creating $alu cell for $verific$LessThan_68$b14.vhd:118$374, $verific$LessThan_78$b14.vhd:138$378: $auto$alumacc.cc:485:replace_alu$846
  creating $alu cell for $verific$LessThan_14$b14.vhd:83$320: $auto$alumacc.cc:485:replace_alu$857
  creating $alu cell for $verific$add_21$b14.vhd:86$327: $auto$alumacc.cc:485:replace_alu$862
  creating $alu cell for $verific$add_26$b14.vhd:88$334: $auto$alumacc.cc:485:replace_alu$865
  creating $alu cell for $verific$add_283$b14.vhd:318$423: $auto$alumacc.cc:485:replace_alu$868
  creating $alu cell for $verific$add_31$b14.vhd:90$341: $auto$alumacc.cc:485:replace_alu$871
  creating $alu cell for $verific$add_36$b14.vhd:92$348: $auto$alumacc.cc:485:replace_alu$874
  creating $alu cell for $verific$add_39$b14.vhd:95$354: $auto$alumacc.cc:485:replace_alu$877
  creating $alu cell for $verific$add_44$b14.vhd:96$358: $auto$alumacc.cc:485:replace_alu$880
  creating $alu cell for $verific$add_570$b14.vhd:466$430: $auto$alumacc.cc:485:replace_alu$883
  creating $alu cell for $verific$add_56$b14.vhd:110$366: $auto$alumacc.cc:485:replace_alu$886
  creating $alu cell for $verific$add_662$b14.vhd:493$450: $auto$alumacc.cc:485:replace_alu$889
  creating $alu cell for $verific$add_61$b14.vhd:113$368: $auto$alumacc.cc:485:replace_alu$892
  creating $alu cell for $verific$add_664$b14.vhd:494$452: $auto$alumacc.cc:485:replace_alu$895
  creating $alu cell for $verific$sub_168$b14.vhd:243$412: $auto$alumacc.cc:485:replace_alu$898
  creating $alu cell for $verific$sub_365$b14.vhd:358$425: $auto$alumacc.cc:485:replace_alu$901
  creating $alu cell for $verific$sub_84$b14.vhd:149$381: $auto$alumacc.cc:485:replace_alu$904
  creating $alu cell for $verific$unary_minus_15$b14.vhd:84$321: $auto$alumacc.cc:485:replace_alu$907
  created 20 $alu and 1 $macc cells.

19. Executing OPT pass (performing simple optimizations).

19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b14.
<suppressed ~5 debug messages>

19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b14'.
Removed a total of 0 cells.

19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b14..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~14 debug messages>

19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b14.
Performed a total of 0 changes.

19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b14'.
Removed a total of 0 cells.

19.6. Executing OPT_DFF pass (perform DFF optimizations).

19.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b14..
Removed 2 unused cells and 10 unused wires.
<suppressed ~3 debug messages>

19.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module b14.

19.9. Rerunning OPT passes. (Maybe there is more to do..)

19.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b14..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~14 debug messages>

19.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b14.
Performed a total of 0 changes.

19.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b14'.
Removed a total of 0 cells.

19.13. Executing OPT_DFF pass (perform DFF optimizations).

19.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b14..

19.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module b14.

19.16. Finished OPT passes. (There is nothing left to do.)

20. Executing MEMORY pass.

20.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

20.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

20.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

20.4. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

20.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b14..

20.6. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

20.7. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

20.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b14..

20.9. Executing MEMORY_COLLECT pass (generating $mem cells).

21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b14..

22. Executing OPT_EXPR pass (perform const folding).
Optimizing module b14.
<suppressed ~2 debug messages>

23. Executing SIMPLEMAP pass (map simple cells to gate primitives).
Mapping b14.$auto$alumacc.cc:67:get_gt$842 ($or).
Mapping b14.$auto$alumacc.cc:67:get_gt$853 ($or).
Mapping b14.$auto$alumacc.cc:68:get_gt$855 ($not).
Mapping b14.$auto$alumacc.cc:75:get_eq$840 ($reduce_and).
Mapping b14.$auto$alumacc.cc:75:get_eq$851 ($reduce_and).
Mapping b14.$auto$alumacc.cc:89:get_cf$833 ($not).
Mapping b14.$auto$alumacc.cc:89:get_cf$838 ($not).
Mapping b14.$auto$alumacc.cc:89:get_cf$849 ($not).
Mapping b14.$auto$ff.cc:262:slice$736 ($adffe).
Mapping b14.$auto$ff.cc:262:slice$737 ($adffe).
Mapping b14.$auto$ff.cc:262:slice$744 ($adffe).
Mapping b14.$auto$ff.cc:262:slice$751 ($adffe).
Mapping b14.$auto$ff.cc:262:slice$758 ($adffe).
Mapping b14.$auto$ff.cc:262:slice$765 ($adffe).
Mapping b14.$auto$ff.cc:262:slice$770 ($adffe).
Mapping b14.$auto$ff.cc:262:slice$775 ($adff).
Mapping b14.$auto$fsm_map.cc:105:implement_pattern_cache$683 ($reduce_or).
Mapping b14.$auto$fsm_map.cc:105:implement_pattern_cache$732 ($reduce_or).
Mapping b14.$auto$fsm_map.cc:121:implement_pattern_cache$529 ($and).
Mapping b14.$auto$fsm_map.cc:121:implement_pattern_cache$533 ($and).
Mapping b14.$auto$fsm_map.cc:121:implement_pattern_cache$537 ($and).
Mapping b14.$auto$fsm_map.cc:121:implement_pattern_cache$543 ($and).
Mapping b14.$auto$fsm_map.cc:121:implement_pattern_cache$547 ($and).
Mapping b14.$auto$fsm_map.cc:121:implement_pattern_cache$551 ($and).
Mapping b14.$auto$fsm_map.cc:121:implement_pattern_cache$564 ($and).
Mapping b14.$auto$fsm_map.cc:121:implement_pattern_cache$568 ($and).
Mapping b14.$auto$fsm_map.cc:121:implement_pattern_cache$574 ($and).
Mapping b14.$auto$fsm_map.cc:121:implement_pattern_cache$578 ($and).
Mapping b14.$auto$fsm_map.cc:121:implement_pattern_cache$587 ($and).
Mapping b14.$auto$fsm_map.cc:121:implement_pattern_cache$591 ($and).
Mapping b14.$auto$fsm_map.cc:121:implement_pattern_cache$595 ($and).
Mapping b14.$auto$fsm_map.cc:121:implement_pattern_cache$601 ($and).
Mapping b14.$auto$fsm_map.cc:121:implement_pattern_cache$605 ($and).
Mapping b14.$auto$fsm_map.cc:121:implement_pattern_cache$614 ($and).
Mapping b14.$auto$fsm_map.cc:121:implement_pattern_cache$618 ($and).
Mapping b14.$auto$fsm_map.cc:121:implement_pattern_cache$624 ($and).
Mapping b14.$auto$fsm_map.cc:121:implement_pattern_cache$628 ($and).
Mapping b14.$auto$fsm_map.cc:121:implement_pattern_cache$632 ($and).
Mapping b14.$auto$fsm_map.cc:121:implement_pattern_cache$636 ($and).
Mapping b14.$auto$fsm_map.cc:121:implement_pattern_cache$641 ($and).
Mapping b14.$auto$fsm_map.cc:121:implement_pattern_cache$655 ($and).
Mapping b14.$auto$fsm_map.cc:121:implement_pattern_cache$661 ($and).
Mapping b14.$auto$fsm_map.cc:121:implement_pattern_cache$679 ($and).
Mapping b14.$auto$fsm_map.cc:121:implement_pattern_cache$685 ($and).
Mapping b14.$auto$fsm_map.cc:121:implement_pattern_cache$690 ($and).
Mapping b14.$auto$fsm_map.cc:121:implement_pattern_cache$698 ($and).
Mapping b14.$auto$fsm_map.cc:121:implement_pattern_cache$704 ($and).
Mapping b14.$auto$fsm_map.cc:121:implement_pattern_cache$710 ($and).
Mapping b14.$auto$fsm_map.cc:121:implement_pattern_cache$728 ($and).
Mapping b14.$auto$fsm_map.cc:121:implement_pattern_cache$734 ($and).
Mapping b14.$auto$fsm_map.cc:144:implement_pattern_cache$552 ($reduce_or).
Mapping b14.$auto$fsm_map.cc:144:implement_pattern_cache$579 ($reduce_or).
Mapping b14.$auto$fsm_map.cc:144:implement_pattern_cache$606 ($reduce_or).
Mapping b14.$auto$fsm_map.cc:144:implement_pattern_cache$637 ($reduce_or).
Mapping b14.$auto$fsm_map.cc:144:implement_pattern_cache$686 ($reduce_or).
Mapping b14.$auto$fsm_map.cc:144:implement_pattern_cache$735 ($reduce_or).
Mapping b14.$auto$fsm_map.cc:172:map_fsm$523 ($adff).
Mapping b14.$auto$fsm_map.cc:77:implement_pattern_cache$539 ($eq).
Mapping b14.$auto$fsm_map.cc:77:implement_pattern_cache$541 ($eq).
Mapping b14.$auto$fsm_map.cc:77:implement_pattern_cache$663 ($eq).
Mapping b14.$auto$fsm_map.cc:77:implement_pattern_cache$688 ($eq).
Mapping b14.$auto$fsm_map.cc:77:implement_pattern_cache$692 ($eq).
Mapping b14.$auto$fsm_map.cc:77:implement_pattern_cache$694 ($eq).
Mapping b14.$auto$fsm_map.cc:77:implement_pattern_cache$696 ($eq).
Mapping b14.$auto$fsm_map.cc:77:implement_pattern_cache$700 ($not).
Mapping b14.$auto$fsm_map.cc:77:implement_pattern_cache$706 ($eq).
Mapping b14.$auto$fsm_map.cc:77:implement_pattern_cache$712 ($eq).
Mapping b14.$auto$fsm_map.cc:77:implement_pattern_cache$714 ($eq).
Mapping b14.$auto$fsm_map.cc:77:implement_pattern_cache$716 ($eq).
Mapping b14.$auto$fsm_map.cc:77:implement_pattern_cache$720 ($eq).
Mapping b14.$auto$fsm_map.cc:77:implement_pattern_cache$724 ($eq).
Mapping b14.$auto$fsm_map.cc:77:implement_pattern_cache$730 ($eq).
Mapping b14.$auto$opt_dff.cc:195:make_patterns_logic$772 ($ne).
Mapping b14.$auto$opt_dff.cc:210:make_patterns_logic$738 ($not).
Mapping b14.$auto$opt_dff.cc:210:make_patterns_logic$740 ($not).
Mapping b14.$auto$opt_dff.cc:220:make_patterns_logic$743 ($reduce_and).
Mapping b14.$auto$opt_dff.cc:220:make_patterns_logic$769 ($reduce_and).
Mapping b14.$auto$opt_dff.cc:220:make_patterns_logic$774 ($reduce_and).
Mapping b14.$auto$opt_reduce.cc:128:opt_pmux$512 ($reduce_or).
Mapping b14.$auto$opt_reduce.cc:128:opt_pmux$514 ($reduce_or).
Mapping b14.$auto$opt_reduce.cc:128:opt_pmux$516 ($reduce_or).
Mapping b14.$auto$opt_reduce.cc:128:opt_pmux$518 ($reduce_or).
Mapping b14.$auto$pmuxtree.cc:65:recursive_mux_generator$797 ($mux).
Mapping b14.$auto$pmuxtree.cc:65:recursive_mux_generator$799 ($mux).
Mapping b14.$auto$pmuxtree.cc:65:recursive_mux_generator$805 ($mux).
Mapping b14.$auto$pmuxtree.cc:65:recursive_mux_generator$807 ($mux).
Mapping b14.$auto$pmuxtree.cc:65:recursive_mux_generator$813 ($mux).
Mapping b14.$auto$pmuxtree.cc:65:recursive_mux_generator$815 ($mux).
Mapping b14.$auto$pmuxtree.cc:65:recursive_mux_generator$821 ($mux).
Mapping b14.$auto$pmuxtree.cc:65:recursive_mux_generator$823 ($mux).
Mapping b14.$verific$IR_reg$b14.vhd:505$497 ($adff).
Mapping b14.$verific$Mux_132$b14.vhd:210$395 ($bmux).
Mapping b14.$verific$Mux_637$b14.vhd:479$437 ($bmux).
Mapping b14.$verific$Mux_652$b14.vhd:488$443 ($bmux).
Mapping b14.$verific$Mux_658$b14.vhd:488$449 ($bmux).
Mapping b14.$verific$Mux_67$b14.vhd:116$373 ($bmux).
Mapping b14.$verific$addr_reg$b14.vhd:505$504 ($adff).
Mapping b14.$verific$equal_134$b14.vhd:212$396 ($eq).
Mapping b14.$verific$equal_136$b14.vhd:213$398 ($eq).
Mapping b14.$verific$equal_139$b14.vhd:217$400 ($eq).
Mapping b14.$verific$equal_141$b14.vhd:221$402 ($eq).
Mapping b14.$verific$equal_142$b14.vhd:223$403 ($eq).
Mapping b14.$verific$equal_143$b14.vhd:224$404 ($eq).
Mapping b14.$verific$equal_144$b14.vhd:225$405 ($logic_not).
Mapping b14.$verific$equal_176$b14.vhd:243$414 ($logic_not).
Mapping b14.$verific$equal_177$b14.vhd:244$415 ($eq).
Mapping b14.$verific$equal_178$b14.vhd:245$416 ($eq).
Mapping b14.$verific$equal_179$b14.vhd:246$417 ($eq).
Mapping b14.$verific$equal_73$b14.vhd:128$376 ($eq).
Mapping b14.$verific$i102$b14.vhd:169$388 ($or).
Mapping b14.$verific$i105$b14.vhd:174$389 ($or).
Mapping b14.$verific$i109$b14.vhd:179$390 ($or).
Mapping b14.$verific$i113$b14.vhd:184$391 ($or).
Mapping b14.$verific$i116$b14.vhd:189$392 ($or).
Mapping b14.$verific$i123$b14.vhd:197$393 ($or).
Mapping b14.$verific$i131$b14.vhd:205$394 ($or).
Mapping b14.$verific$i20$b14.vhd:86$326 ($and).
Mapping b14.$verific$i25$b14.vhd:88$333 ($and).
Mapping b14.$verific$i30$b14.vhd:90$340 ($and).
Mapping b14.$verific$i35$b14.vhd:92$347 ($and).
Mapping b14.$verific$i43$b14.vhd:96$357 ($and).
Mapping b14.$verific$i569$b14.vhd:466$429 ($and).
Mapping b14.$verific$i675$b14.vhd:501$462 ($mux).
Mapping b14.$verific$i691$b14.vhd:502$474 ($mux).
Mapping b14.$verific$i692$b14.vhd:502$475 ($mux).
Mapping b14.$verific$i700$b14.vhd:502$482 ($mux).
Mapping b14.$verific$i704$b14.vhd:504$486 ($mux).
Mapping b14.$verific$i723$b14.vhd:504$495 ($mux).
Mapping b14.$verific$i77$b14.vhd:133$377 ($not).
Mapping b14.$verific$i98$b14.vhd:164$387 ($or).
Mapping b14.$verific$mux_138$b14.vhd:216$399 ($mux).
Mapping b14.$verific$mux_140$b14.vhd:220$401 ($mux).
Mapping b14.$verific$mux_145$b14.vhd:226$406 ($mux).
Mapping b14.$verific$mux_146$b14.vhd:226$407 ($mux).
Mapping b14.$verific$mux_147$b14.vhd:226$408 ($mux).
Mapping b14.$verific$mux_148$b14.vhd:226$409 ($mux).
Mapping b14.$verific$mux_149$b14.vhd:226$410 ($mux).
Mapping b14.$verific$mux_150$b14.vhd:226$411 ($mux).
Mapping b14.$verific$mux_17$b14.vhd:85$324 ($mux).
Mapping b14.$verific$mux_50$b14.vhd:102$364 ($bmux).
Mapping b14.$verific$mux_577$b14.vhd:470$435 ($mux).
Mapping b14.$verific$mux_65$b14.vhd:116$371 ($bmux).
Mapping b14.$verific$mux_651$b14.vhd:488$442 ($bmux).
Mapping b14.$verific$mux_654$b14.vhd:488$445 ($bmux).
Mapping b14.$verific$mux_655$b14.vhd:488$446 ($bmux).
Mapping b14.$verific$mux_656$b14.vhd:488$447 ($bmux).
Mapping b14.$verific$mux_657$b14.vhd:488$448 ($bmux).
Mapping b14.$verific$mux_66$b14.vhd:116$372 ($bmux).
Mapping b14.$verific$mux_666$b14.vhd:497$454 ($bmux).
Mapping b14.$verific$mux_673$b14.vhd:501$461 ($mux).
Mapping b14.$verific$mux_679$b14.vhd:501$467 ($mux).
Mapping b14.$verific$mux_689$b14.vhd:502$473 ($mux).
Mapping b14.$verific$mux_698$b14.vhd:502$481 ($mux).
Mapping b14.$verific$mux_702$b14.vhd:504$485 ($mux).
Mapping b14.$verific$mux_705$b14.vhd:504$487 ($mux).
Mapping b14.$verific$mux_738$b14.vhd:456$511 ($bmux).
Mapping b14.$verific$mux_748$b14.vhd:479$438 ($bmux).
Mapping b14.$verific$mux_86$b14.vhd:150$384 ($mux).
Mapping b14.$verific$rd_reg$b14.vhd:505$505 ($adff).
Mapping b14.$verific$reduce_nor_180$b14.vhd:248$418 ($not).
Mapping b14.$verific$reduce_nor_180$b14.vhd:248$419 ($reduce_or).
Mapping b14.$verific$reduce_or_18$b14.vhd:86$325 ($reduce_or).
Mapping b14.$verific$reduce_or_23$b14.vhd:88$332 ($reduce_or).
Mapping b14.$verific$reduce_or_28$b14.vhd:90$339 ($reduce_or).
Mapping b14.$verific$reduce_or_33$b14.vhd:92$346 ($reduce_or).
Mapping b14.$verific$reduce_or_41$b14.vhd:96$356 ($reduce_or).
Mapping b14.$verific$state_reg$b14.vhd:505$508 ($adff).
Mapping b14.$verific$wr_reg$b14.vhd:505$506 ($adff).

24. Executing OPT_EXPR pass (perform const folding).
Optimizing module b14.
<suppressed ~1643 debug messages>

25. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b14'.
<suppressed ~3573 debug messages>
Removed a total of 1191 cells.

26. Executing OPT_DFF pass (perform DFF optimizations).

27. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b14..
Removed 108 unused cells and 181 unused wires.
<suppressed ~109 debug messages>

28. Executing OPT pass (performing simple optimizations).

28.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b14.
<suppressed ~197 debug messages>

28.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b14'.
Removed a total of 0 cells.

28.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b14..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

28.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b14.
Performed a total of 0 changes.

28.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b14'.
Removed a total of 0 cells.

28.6. Executing OPT_DFF pass (perform DFF optimizations).

28.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b14..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

28.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module b14.

28.9. Rerunning OPT passes. (Maybe there is more to do..)

28.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b14..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

28.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b14.
Performed a total of 0 changes.

28.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b14'.
Removed a total of 0 cells.

28.13. Executing OPT_DFF pass (perform DFF optimizations).

28.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b14..

28.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module b14.

28.16. Finished OPT passes. (There is nothing left to do.)

29. Executing OPT pass (performing simple optimizations).

29.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b14.
<suppressed ~76 debug messages>

29.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b14'.
Removed a total of 0 cells.

29.3. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $auto$ff.cc:262:slice$2947 ($_DFF_PP0_) from module b14 (D = $verific$n11246$300 [5], Q = \addr [5]).
Adding EN signal on $auto$ff.cc:262:slice$2946 ($_DFF_PP0_) from module b14 (D = $verific$n11246$300 [4], Q = \addr [4]).
Adding EN signal on $auto$ff.cc:262:slice$2945 ($_DFF_PP0_) from module b14 (D = $verific$n11246$300 [3], Q = \addr [3]).
Adding EN signal on $auto$ff.cc:262:slice$2944 ($_DFF_PP0_) from module b14 (D = $verific$n11246$300 [2], Q = \addr [2]).
Adding EN signal on $auto$ff.cc:262:slice$1145 ($_DFFE_PP0P_) from module b14 (D = $verific$n10979$128, Q = \B).
Adding EN signal on $auto$ff.cc:262:slice$1112 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4237 [31], Q = \reg0 [31]).
Adding EN signal on $auto$ff.cc:262:slice$1111 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4237 [30], Q = \reg0 [30]).
Adding EN signal on $auto$ff.cc:262:slice$1110 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4237 [29], Q = \reg0 [29]).
Adding EN signal on $auto$ff.cc:262:slice$1109 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4237 [28], Q = \reg0 [28]).
Adding EN signal on $auto$ff.cc:262:slice$1108 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4237 [27], Q = \reg0 [27]).
Adding EN signal on $auto$ff.cc:262:slice$1107 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4237 [26], Q = \reg0 [26]).
Adding EN signal on $auto$ff.cc:262:slice$1106 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4237 [25], Q = \reg0 [25]).
Adding EN signal on $auto$ff.cc:262:slice$1105 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4237 [24], Q = \reg0 [24]).
Adding EN signal on $auto$ff.cc:262:slice$1104 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4237 [23], Q = \reg0 [23]).
Adding EN signal on $auto$ff.cc:262:slice$1103 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4237 [22], Q = \reg0 [22]).
Adding EN signal on $auto$ff.cc:262:slice$1102 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4237 [21], Q = \reg0 [21]).
Adding EN signal on $auto$ff.cc:262:slice$1101 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4237 [20], Q = \reg0 [20]).
Adding EN signal on $auto$ff.cc:262:slice$1100 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4237 [19], Q = \reg0 [19]).
Adding EN signal on $auto$ff.cc:262:slice$1099 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4237 [18], Q = \reg0 [18]).
Adding EN signal on $auto$ff.cc:262:slice$1098 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4237 [17], Q = \reg0 [17]).
Adding EN signal on $auto$ff.cc:262:slice$1097 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4237 [16], Q = \reg0 [16]).
Adding EN signal on $auto$ff.cc:262:slice$1096 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4237 [15], Q = \reg0 [15]).
Adding EN signal on $auto$ff.cc:262:slice$1095 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4237 [14], Q = \reg0 [14]).
Adding EN signal on $auto$ff.cc:262:slice$1094 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4237 [13], Q = \reg0 [13]).
Adding EN signal on $auto$ff.cc:262:slice$1093 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4237 [12], Q = \reg0 [12]).
Adding EN signal on $auto$ff.cc:262:slice$1092 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4237 [11], Q = \reg0 [11]).
Adding EN signal on $auto$ff.cc:262:slice$1091 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4237 [10], Q = \reg0 [10]).
Adding EN signal on $auto$ff.cc:262:slice$1090 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4237 [9], Q = \reg0 [9]).
Adding EN signal on $auto$ff.cc:262:slice$1089 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4237 [8], Q = \reg0 [8]).
Adding EN signal on $auto$ff.cc:262:slice$1088 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4237 [7], Q = \reg0 [7]).
Adding EN signal on $auto$ff.cc:262:slice$1087 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4237 [6], Q = \reg0 [6]).
Adding EN signal on $auto$ff.cc:262:slice$1086 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4237 [5], Q = \reg0 [5]).
Adding EN signal on $auto$ff.cc:262:slice$1085 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4237 [4], Q = \reg0 [4]).
Adding EN signal on $auto$ff.cc:262:slice$1084 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4237 [3], Q = \reg0 [3]).
Adding EN signal on $auto$ff.cc:262:slice$1083 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4237 [2], Q = \reg0 [2]).
Adding EN signal on $auto$ff.cc:262:slice$1082 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4237 [1], Q = \reg0 [1]).
Adding EN signal on $auto$ff.cc:262:slice$1081 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4237 [0], Q = \reg0 [0]).
Adding EN signal on $auto$ff.cc:262:slice$1080 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4721 [31], Q = \reg1 [31]).
Adding EN signal on $auto$ff.cc:262:slice$1079 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4721 [30], Q = \reg1 [30]).
Adding EN signal on $auto$ff.cc:262:slice$1078 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4721 [29], Q = \reg1 [29]).
Adding EN signal on $auto$ff.cc:262:slice$1077 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4721 [28], Q = \reg1 [28]).
Adding EN signal on $auto$ff.cc:262:slice$1076 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4721 [27], Q = \reg1 [27]).
Adding EN signal on $auto$ff.cc:262:slice$1075 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4721 [26], Q = \reg1 [26]).
Adding EN signal on $auto$ff.cc:262:slice$1074 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4721 [25], Q = \reg1 [25]).
Adding EN signal on $auto$ff.cc:262:slice$1073 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4721 [24], Q = \reg1 [24]).
Adding EN signal on $auto$ff.cc:262:slice$1072 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4721 [23], Q = \reg1 [23]).
Adding EN signal on $auto$ff.cc:262:slice$1071 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4721 [22], Q = \reg1 [22]).
Adding EN signal on $auto$ff.cc:262:slice$1070 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4721 [21], Q = \reg1 [21]).
Adding EN signal on $auto$ff.cc:262:slice$1069 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4721 [20], Q = \reg1 [20]).
Adding EN signal on $auto$ff.cc:262:slice$1068 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4721 [19], Q = \reg1 [19]).
Adding EN signal on $auto$ff.cc:262:slice$1067 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4721 [18], Q = \reg1 [18]).
Adding EN signal on $auto$ff.cc:262:slice$1066 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4721 [17], Q = \reg1 [17]).
Adding EN signal on $auto$ff.cc:262:slice$1065 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4721 [16], Q = \reg1 [16]).
Adding EN signal on $auto$ff.cc:262:slice$1064 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4721 [15], Q = \reg1 [15]).
Adding EN signal on $auto$ff.cc:262:slice$1063 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4721 [14], Q = \reg1 [14]).
Adding EN signal on $auto$ff.cc:262:slice$1062 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4721 [13], Q = \reg1 [13]).
Adding EN signal on $auto$ff.cc:262:slice$1061 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4721 [12], Q = \reg1 [12]).
Adding EN signal on $auto$ff.cc:262:slice$1060 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4721 [11], Q = \reg1 [11]).
Adding EN signal on $auto$ff.cc:262:slice$1059 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4721 [10], Q = \reg1 [10]).
Adding EN signal on $auto$ff.cc:262:slice$1058 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4721 [9], Q = \reg1 [9]).
Adding EN signal on $auto$ff.cc:262:slice$1057 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4721 [8], Q = \reg1 [8]).
Adding EN signal on $auto$ff.cc:262:slice$1056 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4721 [7], Q = \reg1 [7]).
Adding EN signal on $auto$ff.cc:262:slice$1055 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4721 [6], Q = \reg1 [6]).
Adding EN signal on $auto$ff.cc:262:slice$1054 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4721 [5], Q = \reg1 [5]).
Adding EN signal on $auto$ff.cc:262:slice$1053 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4721 [4], Q = \reg1 [4]).
Adding EN signal on $auto$ff.cc:262:slice$1052 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4721 [3], Q = \reg1 [3]).
Adding EN signal on $auto$ff.cc:262:slice$1051 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4721 [2], Q = \reg1 [2]).
Adding EN signal on $auto$ff.cc:262:slice$1050 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4721 [1], Q = \reg1 [1]).
Adding EN signal on $auto$ff.cc:262:slice$1049 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$4721 [0], Q = \reg1 [0]).
Adding EN signal on $auto$ff.cc:262:slice$1048 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$5205 [31], Q = \reg2 [31]).
Adding EN signal on $auto$ff.cc:262:slice$1047 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$5205 [30], Q = \reg2 [30]).
Adding EN signal on $auto$ff.cc:262:slice$1046 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$5205 [29], Q = \reg2 [29]).
Adding EN signal on $auto$ff.cc:262:slice$1045 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$5205 [28], Q = \reg2 [28]).
Adding EN signal on $auto$ff.cc:262:slice$1044 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$5205 [27], Q = \reg2 [27]).
Adding EN signal on $auto$ff.cc:262:slice$1043 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$5205 [26], Q = \reg2 [26]).
Adding EN signal on $auto$ff.cc:262:slice$1042 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$5205 [25], Q = \reg2 [25]).
Adding EN signal on $auto$ff.cc:262:slice$1041 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$5205 [24], Q = \reg2 [24]).
Adding EN signal on $auto$ff.cc:262:slice$1040 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$5205 [23], Q = \reg2 [23]).
Adding EN signal on $auto$ff.cc:262:slice$1039 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$5205 [22], Q = \reg2 [22]).
Adding EN signal on $auto$ff.cc:262:slice$1038 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$5205 [21], Q = \reg2 [21]).
Adding EN signal on $auto$ff.cc:262:slice$1037 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$5205 [20], Q = \reg2 [20]).
Adding EN signal on $auto$ff.cc:262:slice$1036 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$5205 [19], Q = \reg2 [19]).
Adding EN signal on $auto$ff.cc:262:slice$1035 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$5205 [18], Q = \reg2 [18]).
Adding EN signal on $auto$ff.cc:262:slice$1034 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$5205 [17], Q = \reg2 [17]).
Adding EN signal on $auto$ff.cc:262:slice$1033 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$5205 [16], Q = \reg2 [16]).
Adding EN signal on $auto$ff.cc:262:slice$1032 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$5205 [15], Q = \reg2 [15]).
Adding EN signal on $auto$ff.cc:262:slice$1031 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$5205 [14], Q = \reg2 [14]).
Adding EN signal on $auto$ff.cc:262:slice$1030 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$5205 [13], Q = \reg2 [13]).
Adding EN signal on $auto$ff.cc:262:slice$1029 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$5205 [12], Q = \reg2 [12]).
Adding EN signal on $auto$ff.cc:262:slice$1028 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$5205 [11], Q = \reg2 [11]).
Adding EN signal on $auto$ff.cc:262:slice$1027 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$5205 [10], Q = \reg2 [10]).
Adding EN signal on $auto$ff.cc:262:slice$1026 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$5205 [9], Q = \reg2 [9]).
Adding EN signal on $auto$ff.cc:262:slice$1025 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$5205 [8], Q = \reg2 [8]).
Adding EN signal on $auto$ff.cc:262:slice$1024 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$5205 [7], Q = \reg2 [7]).
Adding EN signal on $auto$ff.cc:262:slice$1023 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$5205 [6], Q = \reg2 [6]).
Adding EN signal on $auto$ff.cc:262:slice$1022 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$5205 [5], Q = \reg2 [5]).
Adding EN signal on $auto$ff.cc:262:slice$1021 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$5205 [4], Q = \reg2 [4]).
Adding EN signal on $auto$ff.cc:262:slice$1020 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$5205 [3], Q = \reg2 [3]).
Adding EN signal on $auto$ff.cc:262:slice$1019 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$5205 [2], Q = \reg2 [2]).
Adding EN signal on $auto$ff.cc:262:slice$1018 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$5205 [1], Q = \reg2 [1]).
Adding EN signal on $auto$ff.cc:262:slice$1017 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$5205 [0], Q = \reg2 [0]).
Adding EN signal on $auto$ff.cc:262:slice$1016 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$5689 [2], Q = \reg3 [2]).
Adding EN signal on $auto$ff.cc:262:slice$1015 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$5689 [1], Q = \reg3 [1]).
Adding EN signal on $auto$ff.cc:262:slice$1014 ($_DFFE_PP0P_) from module b14 (D = $auto$simplemap.cc:309:simplemap_bmux$5689 [0], Q = \reg3 [0]).

29.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b14..
Removed 61 unused cells and 730 unused wires.
<suppressed ~62 debug messages>

29.5. Rerunning OPT passes. (Removed registers in this run.)

29.6. Executing OPT_EXPR pass (perform const folding).
Optimizing module b14.
<suppressed ~2955 debug messages>

29.7. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b14'.
<suppressed ~10746 debug messages>
Removed a total of 3582 cells.

29.8. Executing OPT_DFF pass (perform DFF optimizations).

29.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b14..
Removed 0 unused cells and 3434 unused wires.
<suppressed ~1 debug messages>

29.10. Finished fast OPT passes.

30. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

31. Executing OPT pass (performing simple optimizations).

31.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b14.
<suppressed ~1 debug messages>

31.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b14'.
Removed a total of 0 cells.

31.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b14..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

31.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b14.
Performed a total of 0 changes.

31.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b14'.
Removed a total of 0 cells.

31.6. Executing OPT_SHARE pass.
    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$2880 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$3186
        $auto$simplemap.cc:86:simplemap_bitop$3206

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$2881 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$3188
        $auto$simplemap.cc:86:simplemap_bitop$3187

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$2882 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$3190
        $auto$simplemap.cc:86:simplemap_bitop$3189

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$2883 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$3192
        $auto$simplemap.cc:86:simplemap_bitop$3191

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$5806 in front of them:
        $auto$alumacc.cc:485:replace_alu$895
        $auto$alumacc.cc:485:replace_alu$889

31.7. Executing OPT_DFF pass (perform DFF optimizations).

31.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b14..
Removed 0 unused cells and 16 unused wires.
<suppressed ~1 debug messages>

31.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module b14.
<suppressed ~5 debug messages>

31.10. Rerunning OPT passes. (Maybe there is more to do..)

31.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b14..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

31.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b14.
Performed a total of 0 changes.

31.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b14'.
Removed a total of 0 cells.

31.14. Executing OPT_SHARE pass.
    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$2887 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$3188
        $auto$simplemap.cc:86:simplemap_bitop$3186

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$2888 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$3192
        $auto$simplemap.cc:86:simplemap_bitop$3190

31.15. Executing OPT_DFF pass (perform DFF optimizations).

31.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b14..
Removed 0 unused cells and 4 unused wires.
<suppressed ~1 debug messages>

31.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module b14.
<suppressed ~2 debug messages>

31.18. Rerunning OPT passes. (Maybe there is more to do..)

31.19. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b14..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

31.20. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b14.
Performed a total of 0 changes.

31.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b14'.
Removed a total of 0 cells.

31.22. Executing OPT_SHARE pass.
    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$2891 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$3192
        $auto$simplemap.cc:86:simplemap_bitop$3188

31.23. Executing OPT_DFF pass (perform DFF optimizations).

31.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b14..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

31.25. Executing OPT_EXPR pass (perform const folding).
Optimizing module b14.
<suppressed ~1 debug messages>

31.26. Rerunning OPT passes. (Maybe there is more to do..)

31.27. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b14..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

31.28. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b14.
Performed a total of 0 changes.

31.29. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b14'.
Removed a total of 0 cells.

31.30. Executing OPT_SHARE pass.

31.31. Executing OPT_DFF pass (perform DFF optimizations).

31.32. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b14..

31.33. Executing OPT_EXPR pass (perform const folding).
Optimizing module b14.

31.34. Finished OPT passes. (There is nothing left to do.)

32. Executing TECHMAP pass (map to technology primitives).

32.1. Executing Verilog-2005 frontend: /home/users/aram/Workspace/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/aram/Workspace/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

32.2. Continuing TECHMAP pass.
Using extmapper maccmap for cells of type $macc.
  add 3'101 * $auto$simplemap.cc:309:simplemap_bmux$5827 [0] (3x1 bits, unsigned)
Using template $paramod$175e67c02b86e96b1288b9dc100122520d7240d8\_90_alu for cells of type $alu.
Using template $paramod$3ef7d3dd227da7627a99c5e5a6a4deb817573e39\_90_alu for cells of type $alu.
Using template $paramod$403d07c18de10cda2ac652a859c56aea81aaf9b5\_90_alu for cells of type $alu.
Using template $paramod$fc972a7a46956c1788f3cb5257b53c8f1df2d0cc\_90_alu for cells of type $alu.
Using template $paramod$83784888def4f70dbbded37c6d05d2ea1157c936\_90_alu for cells of type $alu.
Using template $paramod$788c3d57e5abb3a3f89aea6d4acd665be37f4e9b\_90_alu for cells of type $alu.
Using template $paramod$bfd924274384262bad5ce2d9fd5238108bec6022\_90_alu for cells of type $alu.
Using template $paramod$adbaf76fa5a3091a329503792521395f8ff4d1a4\_90_alu for cells of type $alu.
Using template $paramod$fbc7873bff55778c0b3173955b7e4bce1d9d6834\_90_alu for cells of type $alu.
Using template $paramod$c6baa65225090ac0a120feab1b920965244aa496\_90_alu for cells of type $alu.
Using template $paramod$e891e6b399cf52748460a311fafe476815d24bd7\_90_alu for cells of type $alu.
Using template $paramod$32a7b7b86c07519b7537abc18e96f0331f97914d\_90_alu for cells of type $alu.
Using template $paramod$ba698a254f9a5947e85cbe7beae6b161eefc5386\_90_alu for cells of type $alu.
Using template $paramod$6fc37af1c109ae54e8aed83fcd995c12d378ce93\_90_alu for cells of type $alu.
Using template $paramod$6a42b6fefed750f8a1c58eab59479d960557103c\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011110 for cells of type $lcu.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011011 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000001 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010100 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000100000 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000010 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000100 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011111 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000011 for cells of type $lcu.
Using extmapper simplemap for cells of type $or.
No more expansions possible.
<suppressed ~2987 debug messages>

33. Executing OPT pass (performing simple optimizations).

33.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b14.
<suppressed ~1202 debug messages>

33.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b14'.
<suppressed ~1398 debug messages>
Removed a total of 466 cells.

33.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b14..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

33.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b14.
Performed a total of 0 changes.

33.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b14'.
Removed a total of 0 cells.

33.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $auto$ff.cc:262:slice$2843 ($_DFF_PP0_) from module b14 (D = $verific$n11301$301 [0], Q = \IR [0]).

33.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b14..
Removed 265 unused cells and 1109 unused wires.
<suppressed ~266 debug messages>

33.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module b14.
<suppressed ~4 debug messages>

33.9. Rerunning OPT passes. (Maybe there is more to do..)

33.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b14..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

33.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b14.
Performed a total of 0 changes.

33.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b14'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

33.13. Executing OPT_DFF pass (perform DFF optimizations).

33.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b14..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

33.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module b14.

33.16. Rerunning OPT passes. (Maybe there is more to do..)

33.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b14..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

33.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b14.
Performed a total of 0 changes.

33.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b14'.
Removed a total of 0 cells.

33.20. Executing OPT_DFF pass (perform DFF optimizations).

33.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b14..

33.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module b14.

33.23. Finished OPT passes. (There is nothing left to do.)

34. Executing ABC pass (technology mapping using ABC).

34.1. Extracting gate netlist of module `\b14' to `<abc-temp-dir>/input.blif'..
Extracted 3942 gates and 4161 wires to a netlist network with 216 inputs and 225 outputs.

34.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + source /home/users/aram/Workspace/yosys_verific_rs/scripts/synth/abc/abc_base6.a21.scr 
ABC: netlist  : i/o =    216/    225  and =    6313  lev =   76 (41.44)  mem = 0.09 MB
ABC: Mapping (K=6)  :  lut =   1124  edge =    4840  lev =   30 (17.44)  mem = 0.05 MB
ABC: netlist  : i/o =    216/    225  and =    5970  lev =   82 (45.87)  mem = 0.08 MB
ABC: Mapping (K=6)  :  lut =    977  edge =    4261  lev =   33 (19.68)  mem = 0.05 MB
ABC: netlist  : i/o =    216/    225  and =    5968  lev =   87 (41.41)  mem = 0.08 MB
ABC: Mapping (K=6)  :  lut =    949  edge =    4200  lev =   35 (19.23)  mem = 0.05 MB
ABC: netlist  : i/o =    216/    225  and =    5912  lev =   84 (42.72)  mem = 0.08 MB
ABC: Mapping (K=6)  :  lut =    929  edge =    4117  lev =   35 (19.49)  mem = 0.05 MB
ABC: netlist  : i/o =    216/    225  and =    5604  lev =   86 (43.04)  mem = 0.08 MB
ABC: Mapping (K=6)  :  lut =    902  edge =    3971  lev =   36 (18.81)  mem = 0.05 MB
ABC: netlist  : i/o =    216/    225  and =    5682  lev =   86 (43.56)  mem = 0.10 MB
ABC: Mapping (K=6)  :  lut =    850  edge =    3950  lev =   36 (18.45)  mem = 0.04 MB
ABC: netlist  : i/o =    216/    225  and =    5705  lev =   83 (42.85)  mem = 0.10 MB
ABC: Mapping (K=6)  :  lut =    846  edge =    3934  lev =   34 (17.94)  mem = 0.04 MB
ABC: netlist  : i/o =    216/    225  and =    5634  lev =   89 (44.12)  mem = 0.10 MB
ABC: Mapping (K=6)  :  lut =    835  edge =    3886  lev =   34 (17.91)  mem = 0.04 MB
ABC: netlist  : i/o =    216/    225  and =    5438  lev =   92 (47.17)  mem = 0.10 MB
ABC: Mapping (K=6)  :  lut =    814  edge =    3778  lev =   33 (18.00)  mem = 0.04 MB
ABC: netlist  : i/o =    216/    225  and =    5563  lev =   97 (51.60)  mem = 0.10 MB
ABC: Mapping (K=6)  :  lut =    801  edge =    3701  lev =   34 (18.70)  mem = 0.04 MB
ABC: netlist  : i/o =    216/    225  and =    5369  lev =   88 (44.44)  mem = 0.10 MB
ABC: Mapping (K=6)  :  lut =    790  edge =    3662  lev =   34 (18.24)  mem = 0.04 MB
ABC: netlist  : i/o =    216/    225  and =    5673  lev =   96 (51.29)  mem = 0.10 MB
ABC: Mapping (K=6)  :  lut =    776  edge =    3649  lev =   34 (18.09)  mem = 0.04 MB
ABC: netlist  : i/o =    216/    225  and =    5408  lev =   89 (43.95)  mem = 0.10 MB
ABC: Mapping (K=6)  :  lut =    773  edge =    3640  lev =   36 (18.39)  mem = 0.04 MB
ABC: netlist  : i/o =    216/    225  and =    5408  lev =   89 (43.95)  mem = 0.08 MB
ABC: Mapping (K=6)  :  lut =    773  edge =    3640  lev =   36 (18.39)  mem = 0.04 MB
ABC: netlist  : i/o =    216/    225  and =    5408  lev =   89 (43.95)  mem = 0.10 MB
ABC: Mapping (K=6)  :  lut =    773  edge =    3640  lev =   36 (18.39)  mem = 0.04 MB
ABC: netlist  : i/o =    216/    225  and =    5485  lev =   90 (44.59)  mem = 0.08 MB
ABC: Mapping (K=6)  :  lut =    773  edge =    3640  lev =   36 (18.39)  mem = 0.04 MB
ABC: + write_blif <abc-temp-dir>/output.blif 

34.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:      775
ABC RESULTS:        internal signals:     3720
ABC RESULTS:           input signals:      216
ABC RESULTS:          output signals:      225
Removing temp directory.

35. Executing OPT pass (performing simple optimizations).

35.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b14.

35.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b14'.
Removed a total of 0 cells.

35.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b14..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

35.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b14.
Performed a total of 0 changes.

35.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b14'.
Removed a total of 0 cells.

35.6. Executing OPT_DFF pass (perform DFF optimizations).

35.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b14..
Removed 0 unused cells and 1071 unused wires.
<suppressed ~1 debug messages>

35.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module b14.

35.9. Rerunning OPT passes. (Maybe there is more to do..)

35.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b14..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

35.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b14.
Performed a total of 0 changes.

35.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b14'.
Removed a total of 0 cells.

35.13. Executing OPT_DFF pass (perform DFF optimizations).

35.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b14..

35.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module b14.

35.16. Finished OPT passes. (There is nothing left to do.)

36. Executing HIERARCHY pass (managing design hierarchy).

36.1. Analyzing design hierarchy..
Top module:  \b14

36.2. Analyzing design hierarchy..
Top module:  \b14
Removed 0 unused modules.

37. Printing statistics.

=== b14 ===

   Number of wires:                762
   Number of wire bits:           1090
   Number of public wires:          15
   Number of public wire bits:     251
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                992
     $_DFFE_PP0N_                    1
     $_DFFE_PP0P_                  162
     $_DFF_PP0_                     55
     $lut                          774

38. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b14..

39. Executing BLIF backend.

End of script. Logfile hash: 8c403b9a4e, CPU: user 10.18s system 0.06s, MEM: 44.86 MB peak
Yosys 0.14+36 (git sha1 15a4e900b, gcc 7.1.0 -fPIC -Os)
Time spent: 70% 1x abc (23 sec), 10% 49x opt_expr (3 sec), ...
