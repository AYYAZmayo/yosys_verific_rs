
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.14+36 (git sha1 15a4e900b, gcc 7.1.0 -fPIC -Os)


-- Executing script file `yosys.ys' --

1. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Jan22_SW_Release, released at Sat Jan 29 02:42:49 2022.

2. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Jan22_SW_Release, released at Sat Jan 29 02:42:49 2022.
VERIFIC-INFO [VHDL-1504] default VHDL library search path is now "/home/users/aram/Workspace/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008"
VERIFIC-COMMENT [VHDL-1481] Analyzing VHDL file 'b21.vhd'
VERIFIC-COMMENT [VHDL-1493] Restoring VHDL unit 'ieee.std_logic_1164' from file '/home/users/aram/Workspace/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008/ieee/std_logic_1164.vdb'
VERIFIC-COMMENT [VHDL-1493] Restoring VHDL unit 'std.standard' from file '/home/users/aram/Workspace/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008/std/standard.vdb'
VERIFIC-COMMENT [VHDL-1493] Restoring VHDL unit 'std.textio' from file '/home/users/aram/Workspace/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008/std/textio.vdb'
VERIFIC-COMMENT [VHDL-1493] Restoring VHDL unit 'ieee.std_logic_arith' from file '/home/users/aram/Workspace/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008/ieee/std_logic_arith.vdb'
VERIFIC-INFO [VHDL-1012] b21.vhd:5: analyzing entity 'b14'
VERIFIC-INFO [VHDL-1010] b21.vhd:15: analyzing architecture 'behav'
VERIFIC-INFO [VHDL-1012] b21.vhd:515: analyzing entity 'b14_1'
VERIFIC-INFO [VHDL-1010] b21.vhd:525: analyzing architecture 'behav'
VERIFIC-INFO [VHDL-1012] b21.vhd:1026: analyzing entity 'b21'
VERIFIC-INFO [VHDL-1010] b21.vhd:1034: analyzing architecture 'behav'

3. Executing HIERARCHY pass (managing design hierarchy).
VERIFIC-INFO [VHDL-1067] b21.vhd:1026: processing 'b21(BEHAV)'
VERIFIC-INFO [VHDL-1067] b21.vhd:5: processing 'b14(BEHAV)'
VERIFIC-INFO [VHDL-1172] b21.vhd:482: 'others' clause is never selected
VERIFIC-INFO [VHDL-1067] b21.vhd:515: processing 'b14_1(BEHAV)'
VERIFIC-INFO [VHDL-1172] b21.vhd:992: 'others' clause is never selected
Importing module std_logic_arith.
Importing module standard.
Importing module b21.
Importing module b14(BEHAV).
Importing module TEXTIO.
Importing module std_logic_1164.
Importing module b14_1(BEHAV).

3.1. Analyzing design hierarchy..
Top module:  \b21
Used module:     \b14_1(BEHAV)
Used module:     \b14(BEHAV)

3.2. Analyzing design hierarchy..
Top module:  \b21
Used module:     \b14_1(BEHAV)
Used module:     \b14(BEHAV)
Removing unused module `\std_logic_1164'.
Removing unused module `\TEXTIO'.
Removing unused module `\standard'.
Removing unused module `\std_logic_arith'.
Removed 4 unused modules.

4. Executing PROC pass (convert processes to netlists).

4.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

4.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

4.4. Executing PROC_INIT pass (extract init attributes).

4.5. Executing PROC_ARST pass (detect async resets in processes).

4.6. Executing PROC_MUX pass (convert decision trees to multiplexers).

4.7. Executing PROC_DLATCH pass (convert process syncs to latches).

4.8. Executing PROC_DFF pass (convert process syncs to FFs).

4.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

4.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module b21.
Optimizing module b14_1(BEHAV).
<suppressed ~26 debug messages>
Optimizing module b14(BEHAV).
<suppressed ~26 debug messages>

5. Executing FLATTEN pass (flatten design).
Deleting now unused module b14_1(BEHAV).
Deleting now unused module b14(BEHAV).
<suppressed ~2 debug messages>

6. Executing TRIBUF pass.

7. Executing OPT_EXPR pass (perform const folding).
Optimizing module b21.
<suppressed ~13 debug messages>

8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b21..
Removed 14 unused cells and 347 unused wires.
<suppressed ~113 debug messages>

9. Executing CHECK pass (checking for obvious problems).
Checking module b21...
Found and reported 0 problems.

10. Executing DEMINOUT pass (demote inout ports to input or output).

11. Executing OPT pass (performing simple optimizations).

11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b21.

11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b21'.
Removed a total of 0 cells.

11.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b21..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $flatten\P1.$verific$i684$b21.vhd:505$540.
    dead port 2/2 on $mux $flatten\P1.$verific$mux_672$b21.vhd:505$531.
    dead port 2/2 on $mux $flatten\P1.$verific$mux_685$b21.vhd:505$542.
    dead port 2/2 on $mux $flatten\P2.$verific$i683$b21.vhd:1015$1062.
    dead port 2/2 on $mux $flatten\P2.$verific$mux_671$b21.vhd:1015$1053.
    dead port 2/2 on $mux $flatten\P2.$verific$mux_684$b21.vhd:1015$1064.
Removed 6 multiplexer ports.
<suppressed ~40 debug messages>

11.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b21.
    New ctrl vector for $pmux cell $flatten\P1.$verific$select_746$b21.vhd:490$493: { $flatten\P1.$verific$n2255$124 $auto$opt_reduce.cc:134:opt_pmux$1106 }
    New ctrl vector for $pmux cell $flatten\P1.$verific$select_750$b21.vhd:490$434: { $flatten\P1.$verific$n2256$125 $auto$opt_reduce.cc:134:opt_pmux$1108 }
    New ctrl vector for $pmux cell $flatten\P1.$verific$select_751$b21.vhd:490$511: { $flatten\P1.$verific$n2257$126 $auto$opt_reduce.cc:134:opt_pmux$1110 }
    New ctrl vector for $pmux cell $flatten\P1.$verific$select_752$b21.vhd:490$512: { $flatten\P1.$verific$n2258$127 $auto$opt_reduce.cc:134:opt_pmux$1112 }
    New ctrl vector for $pmux cell $flatten\P2.$verific$select_746$b21.vhd:1000$1013: { $flatten\P2.$verific$n2255$643 $auto$opt_reduce.cc:134:opt_pmux$1114 }
    New ctrl vector for $pmux cell $flatten\P2.$verific$select_750$b21.vhd:1000$954: { $flatten\P2.$verific$n2256$644 $auto$opt_reduce.cc:134:opt_pmux$1116 }
    New ctrl vector for $pmux cell $flatten\P2.$verific$select_751$b21.vhd:1000$1031: { $flatten\P2.$verific$n2257$645 $auto$opt_reduce.cc:134:opt_pmux$1118 }
    New ctrl vector for $pmux cell $flatten\P2.$verific$select_752$b21.vhd:1000$1032: { $flatten\P2.$verific$n2258$646 $auto$opt_reduce.cc:134:opt_pmux$1120 }
  Optimizing cells in module \b21.
Performed a total of 8 changes.

11.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b21'.
Removed a total of 0 cells.

11.6. Executing OPT_DFF pass (perform DFF optimizations).
Changing const-value async load to async reset on $flatten\P2.$verific$wr_reg$b21.vhd:1019$1099 ($aldff) from module b21.
Changing const-value async load to async reset on $flatten\P2.$verific$state_reg$b21.vhd:1019$1101 ($aldff) from module b21.
Changing const-value async load to async reset on $flatten\P2.$verific$reg3_reg$b21.vhd:1019$1096 ($aldff) from module b21.
Changing const-value async load to async reset on $flatten\P2.$verific$reg2_reg$b21.vhd:1019$1095 ($aldff) from module b21.
Changing const-value async load to async reset on $flatten\P2.$verific$reg1_reg$b21.vhd:1019$1094 ($aldff) from module b21.
Changing const-value async load to async reset on $flatten\P2.$verific$reg0_reg$b21.vhd:1019$1093 ($aldff) from module b21.
Changing const-value async load to async reset on $flatten\P2.$verific$rd_reg$b21.vhd:1019$1098 ($aldff) from module b21.
Changing const-value async load to async reset on $flatten\P2.$verific$datao_reg$b21.vhd:1019$1100 ($aldff) from module b21.
Changing const-value async load to async reset on $flatten\P2.$verific$d_reg$b21.vhd:1019$1091 ($aldff) from module b21.
Changing const-value async load to async reset on $flatten\P2.$verific$addr_reg$b21.vhd:1019$1097 ($aldff) from module b21.
Changing const-value async load to async reset on $flatten\P2.$verific$IR_reg$b21.vhd:1019$1090 ($aldff) from module b21.
Changing const-value async load to async reset on $flatten\P2.$verific$B_reg$b21.vhd:1019$1092 ($aldff) from module b21.
Changing const-value async load to async reset on $flatten\P1.$verific$wr_reg$b21.vhd:509$577 ($aldff) from module b21.
Changing const-value async load to async reset on $flatten\P1.$verific$state_reg$b21.vhd:509$579 ($aldff) from module b21.
Changing const-value async load to async reset on $flatten\P1.$verific$reg3_reg$b21.vhd:509$574 ($aldff) from module b21.
Changing const-value async load to async reset on $flatten\P1.$verific$reg2_reg$b21.vhd:509$573 ($aldff) from module b21.
Changing const-value async load to async reset on $flatten\P1.$verific$reg1_reg$b21.vhd:509$572 ($aldff) from module b21.
Changing const-value async load to async reset on $flatten\P1.$verific$reg0_reg$b21.vhd:509$571 ($aldff) from module b21.
Changing const-value async load to async reset on $flatten\P1.$verific$rd_reg$b21.vhd:509$576 ($aldff) from module b21.
Changing const-value async load to async reset on $flatten\P1.$verific$IR_reg$b21.vhd:509$568 ($aldff) from module b21.
Changing const-value async load to async reset on $flatten\P1.$verific$B_reg$b21.vhd:509$570 ($aldff) from module b21.
Changing const-value async load to async reset on $flatten\P1.$verific$datao_reg$b21.vhd:509$578 ($aldff) from module b21.
Changing const-value async load to async reset on $flatten\P1.$verific$d_reg$b21.vhd:509$569 ($aldff) from module b21.
Changing const-value async load to async reset on $flatten\P1.$verific$addr_reg$b21.vhd:509$575 ($aldff) from module b21.

11.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b21..
Removed 0 unused cells and 6 unused wires.
<suppressed ~1 debug messages>

11.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module b21.

11.9. Rerunning OPT passes. (Maybe there is more to do..)

11.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b21..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~40 debug messages>

11.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b21.
Performed a total of 0 changes.

11.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b21'.
Removed a total of 0 cells.

11.13. Executing OPT_DFF pass (perform DFF optimizations).

11.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b21..

11.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module b21.

11.16. Finished OPT passes. (There is nothing left to do.)

12. Executing FSM pass (extract and optimize FSM).

12.1. Executing FSM_DETECT pass (finding FSMs in design).
Found FSM state register b21.P1.d.
Found FSM state register b21.P2.d.

12.2. Executing FSM_EXTRACT pass (extracting FSM from design).
Extracting FSM `\P1.d' from module `\b21'.
  found $adff cell for state register: $flatten\P1.$verific$d_reg$b21.vhd:509$569
  root of input selection tree: $flatten\P1.$verific$n11472$374
  found reset state: 0 (from async reset)
  found ctrl input: \P1.state
  found ctrl input: $flatten\P1.$verific$n341$220 [0]
  found ctrl input: $flatten\P1.$verific$n10346$191
  found ctrl input: $flatten\P1.$verific$n1405$118
  found ctrl input: $flatten\P1.$verific$n1440$119
  found ctrl input: $flatten\P1.$verific$n1474$120
  found ctrl input: $flatten\P1.$verific$n1475$121
  found ctrl input: $flatten\P1.$verific$n1476$122
  found ctrl input: $flatten\P1.$verific$n1477$123
  found state code: 1
  found state code: 2
  found state code: 3
  found ctrl input: \P1.B
  ctrl inputs: { \P1.B \P1.state $flatten\P1.$verific$n1405$118 $flatten\P1.$verific$n1440$119 $flatten\P1.$verific$n1474$120 $flatten\P1.$verific$n1475$121 $flatten\P1.$verific$n1476$122 $flatten\P1.$verific$n1477$123 $flatten\P1.$verific$n10346$191 $flatten\P1.$verific$n341$220 [0] }
  ctrl outputs: $flatten\P1.$verific$n11472$374
  transition:          0 10'-0-------- ->          0 0
  transition:          0 10'-100000000 ->          0 0
  transition:          0 10'-100000100 ->          0 0
  transition:          0 10'-100001-00 ->          1 1
  transition:          0 10'-10001--00 ->          2 2
  transition:          0 10'-1001---00 ->          3 3
  transition:          0 10'0101----00 ->          0 0
  transition:          0 10'1101----00 ->          3 3
  transition:          0 10'011-----00 ->          3 3
  transition:          0 10'111-----00 ->          0 0
  transition:          0 10'-1------10 ->          0 0
  transition:          0 10'-1-------1 ->          0 0
  transition:          2 10'-0-------- ->          2 2
  transition:          2 10'-100000000 ->          2 2
  transition:          2 10'-100000100 ->          0 0
  transition:          2 10'-100001-00 ->          1 1
  transition:          2 10'-10001--00 ->          2 2
  transition:          2 10'-1001---00 ->          3 3
  transition:          2 10'0101----00 ->          2 2
  transition:          2 10'1101----00 ->          3 3
  transition:          2 10'011-----00 ->          3 3
  transition:          2 10'111-----00 ->          2 2
  transition:          2 10'-1------10 ->          2 2
  transition:          2 10'-1-------1 ->          2 2
  transition:          1 10'-0-------- ->          1 1
  transition:          1 10'-100000000 ->          1 1
  transition:          1 10'-100000100 ->          0 0
  transition:          1 10'-100001-00 ->          1 1
  transition:          1 10'-10001--00 ->          2 2
  transition:          1 10'-1001---00 ->          3 3
  transition:          1 10'0101----00 ->          1 1
  transition:          1 10'1101----00 ->          3 3
  transition:          1 10'011-----00 ->          3 3
  transition:          1 10'111-----00 ->          1 1
  transition:          1 10'-1------10 ->          1 1
  transition:          1 10'-1-------1 ->          1 1
  transition:          3 10'-0-------- ->          3 3
  transition:          3 10'-100000000 ->          3 3
  transition:          3 10'-100000100 ->          0 0
  transition:          3 10'-100001-00 ->          1 1
  transition:          3 10'-10001--00 ->          2 2
  transition:          3 10'-1001---00 ->          3 3
  transition:          3 10'0101----00 ->          3 3
  transition:          3 10'1101----00 ->          3 3
  transition:          3 10'011-----00 ->          3 3
  transition:          3 10'111-----00 ->          3 3
  transition:          3 10'-1------10 ->          3 3
  transition:          3 10'-1-------1 ->          3 3
Extracting FSM `\P2.d' from module `\b21'.
  found $adff cell for state register: $flatten\P2.$verific$d_reg$b21.vhd:1019$1091
  root of input selection tree: $flatten\P2.$verific$n11479$894
  found reset state: 0 (from async reset)
  found ctrl input: \P2.state
  found ctrl input: $flatten\P2.$verific$n341$739 [0]
  found ctrl input: $flatten\P2.$verific$n10346$710
  found ctrl input: $flatten\P2.$verific$n1405$637
  found ctrl input: $flatten\P2.$verific$n1440$638
  found ctrl input: $flatten\P2.$verific$n1474$639
  found ctrl input: $flatten\P2.$verific$n1475$640
  found ctrl input: $flatten\P2.$verific$n1476$641
  found ctrl input: $flatten\P2.$verific$n1477$642
  found state code: 1
  found state code: 2
  found state code: 3
  found ctrl input: \P2.B
  ctrl inputs: { \P2.B \P2.state $flatten\P2.$verific$n1405$637 $flatten\P2.$verific$n1440$638 $flatten\P2.$verific$n1474$639 $flatten\P2.$verific$n1475$640 $flatten\P2.$verific$n1476$641 $flatten\P2.$verific$n1477$642 $flatten\P2.$verific$n10346$710 $flatten\P2.$verific$n341$739 [0] }
  ctrl outputs: $flatten\P2.$verific$n11479$894
  transition:          0 10'-0-------- ->          0 0
  transition:          0 10'-100000000 ->          0 0
  transition:          0 10'-100000100 ->          0 0
  transition:          0 10'-100001-00 ->          1 1
  transition:          0 10'-10001--00 ->          2 2
  transition:          0 10'-1001---00 ->          3 3
  transition:          0 10'0101----00 ->          0 0
  transition:          0 10'1101----00 ->          3 3
  transition:          0 10'011-----00 ->          3 3
  transition:          0 10'111-----00 ->          0 0
  transition:          0 10'-1------10 ->          0 0
  transition:          0 10'-1-------1 ->          0 0
  transition:          2 10'-0-------- ->          2 2
  transition:          2 10'-100000000 ->          2 2
  transition:          2 10'-100000100 ->          0 0
  transition:          2 10'-100001-00 ->          1 1
  transition:          2 10'-10001--00 ->          2 2
  transition:          2 10'-1001---00 ->          3 3
  transition:          2 10'0101----00 ->          2 2
  transition:          2 10'1101----00 ->          3 3
  transition:          2 10'011-----00 ->          3 3
  transition:          2 10'111-----00 ->          2 2
  transition:          2 10'-1------10 ->          2 2
  transition:          2 10'-1-------1 ->          2 2
  transition:          1 10'-0-------- ->          1 1
  transition:          1 10'-100000000 ->          1 1
  transition:          1 10'-100000100 ->          0 0
  transition:          1 10'-100001-00 ->          1 1
  transition:          1 10'-10001--00 ->          2 2
  transition:          1 10'-1001---00 ->          3 3
  transition:          1 10'0101----00 ->          1 1
  transition:          1 10'1101----00 ->          3 3
  transition:          1 10'011-----00 ->          3 3
  transition:          1 10'111-----00 ->          1 1
  transition:          1 10'-1------10 ->          1 1
  transition:          1 10'-1-------1 ->          1 1
  transition:          3 10'-0-------- ->          3 3
  transition:          3 10'-100000000 ->          3 3
  transition:          3 10'-100000100 ->          0 0
  transition:          3 10'-100001-00 ->          1 1
  transition:          3 10'-10001--00 ->          2 2
  transition:          3 10'-1001---00 ->          3 3
  transition:          3 10'0101----00 ->          3 3
  transition:          3 10'1101----00 ->          3 3
  transition:          3 10'011-----00 ->          3 3
  transition:          3 10'111-----00 ->          3 3
  transition:          3 10'-1------10 ->          3 3
  transition:          3 10'-1-------1 ->          3 3

12.3. Executing FSM_OPT pass (simple optimizations of FSMs).
Optimizing FSM `$fsm$\P2.d$1123' from module `\b21'.
  Merging pattern 10'-100000000 and 10'-100000100 from group (0 0 0).
  Merging pattern 10'-100000100 and 10'-100000000 from group (0 0 0).
  Merging pattern 10'0101----00 and 10'1101----00 from group (3 3 3).
  Merging pattern 10'1101----00 and 10'0101----00 from group (3 3 3).
  Merging pattern 10'011-----00 and 10'111-----00 from group (3 3 3).
  Merging pattern 10'111-----00 and 10'011-----00 from group (3 3 3).
Optimizing FSM `$fsm$\P1.d$1121' from module `\b21'.
  Merging pattern 10'-100000000 and 10'-100000100 from group (0 0 0).
  Merging pattern 10'-100000100 and 10'-100000000 from group (0 0 0).
  Merging pattern 10'0101----00 and 10'1101----00 from group (3 3 3).
  Merging pattern 10'1101----00 and 10'0101----00 from group (3 3 3).
  Merging pattern 10'011-----00 and 10'111-----00 from group (3 3 3).
  Merging pattern 10'111-----00 and 10'011-----00 from group (3 3 3).

12.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b21..
Removed 6 unused cells and 6 unused wires.
<suppressed ~7 debug messages>

12.5. Executing FSM_OPT pass (simple optimizations of FSMs).
Optimizing FSM `$fsm$\P1.d$1121' from module `\b21'.
Optimizing FSM `$fsm$\P2.d$1123' from module `\b21'.

12.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).
Recoding FSM `$fsm$\P1.d$1121' from module `\b21' using `auto' encoding:
  mapping auto encoding to `one-hot` for this FSM.
  00000000000000000000000000000000 -> ---1
  00000000000000000000000000000010 -> --1-
  00000000000000000000000000000001 -> -1--
  00000000000000000000000000000011 -> 1---
Recoding FSM `$fsm$\P2.d$1123' from module `\b21' using `auto' encoding:
  mapping auto encoding to `one-hot` for this FSM.
  00000000000000000000000000000000 -> ---1
  00000000000000000000000000000010 -> --1-
  00000000000000000000000000000001 -> -1--
  00000000000000000000000000000011 -> 1---

12.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

FSM `$fsm$\P1.d$1121' from module `b21':
-------------------------------------

  Information on FSM $fsm$\P1.d$1121 (\P1.d):

  Number of input signals:   10
  Number of output signals:  32
  Number of state bits:       4

  Input signals:
    0: $flatten\P1.$verific$n341$220 [0]
    1: $flatten\P1.$verific$n10346$191
    2: $flatten\P1.$verific$n1477$123
    3: $flatten\P1.$verific$n1476$122
    4: $flatten\P1.$verific$n1475$121
    5: $flatten\P1.$verific$n1474$120
    6: $flatten\P1.$verific$n1440$119
    7: $flatten\P1.$verific$n1405$118
    8: \P1.state
    9: \P1.B

  Output signals:
    0: $flatten\P1.$verific$n11472$374 [0]
    1: $flatten\P1.$verific$n11472$374 [1]
    2: $flatten\P1.$verific$n11472$374 [2]
    3: $flatten\P1.$verific$n11472$374 [3]
    4: $flatten\P1.$verific$n11472$374 [4]
    5: $flatten\P1.$verific$n11472$374 [5]
    6: $flatten\P1.$verific$n11472$374 [6]
    7: $flatten\P1.$verific$n11472$374 [7]
    8: $flatten\P1.$verific$n11472$374 [8]
    9: $flatten\P1.$verific$n11472$374 [9]
   10: $flatten\P1.$verific$n11472$374 [10]
   11: $flatten\P1.$verific$n11472$374 [11]
   12: $flatten\P1.$verific$n11472$374 [12]
   13: $flatten\P1.$verific$n11472$374 [13]
   14: $flatten\P1.$verific$n11472$374 [14]
   15: $flatten\P1.$verific$n11472$374 [15]
   16: $flatten\P1.$verific$n11472$374 [16]
   17: $flatten\P1.$verific$n11472$374 [17]
   18: $flatten\P1.$verific$n11472$374 [18]
   19: $flatten\P1.$verific$n11472$374 [19]
   20: $flatten\P1.$verific$n11472$374 [20]
   21: $flatten\P1.$verific$n11472$374 [21]
   22: $flatten\P1.$verific$n11472$374 [22]
   23: $flatten\P1.$verific$n11472$374 [23]
   24: $flatten\P1.$verific$n11472$374 [24]
   25: $flatten\P1.$verific$n11472$374 [25]
   26: $flatten\P1.$verific$n11472$374 [26]
   27: $flatten\P1.$verific$n11472$374 [27]
   28: $flatten\P1.$verific$n11472$374 [28]
   29: $flatten\P1.$verific$n11472$374 [29]
   30: $flatten\P1.$verific$n11472$374 [30]
   31: $flatten\P1.$verific$n11472$374 [31]

  State encoding:
    0:     4'---1  <RESET STATE>
    1:     4'--1-
    2:     4'-1--
    3:     4'1---

  Transition Table (state_in, ctrl_in, state_out, ctrl_out):
      0:     0 10'-100000-00   ->     0 0
      1:     0 10'0101----00   ->     0 0
      2:     0 10'111-----00   ->     0 0
      3:     0 10'-1------10   ->     0 0
      4:     0 10'-1-------1   ->     0 0
      5:     0 10'-0--------   ->     0 0
      6:     0 10'-10001--00   ->     1 2
      7:     0 10'-100001-00   ->     2 1
      8:     0 10'-1001---00   ->     3 3
      9:     0 10'1101----00   ->     3 3
     10:     0 10'011-----00   ->     3 3
     11:     1 10'-100000100   ->     0 0
     12:     1 10'-100000000   ->     1 2
     13:     1 10'-10001--00   ->     1 2
     14:     1 10'0101----00   ->     1 2
     15:     1 10'111-----00   ->     1 2
     16:     1 10'-1------10   ->     1 2
     17:     1 10'-1-------1   ->     1 2
     18:     1 10'-0--------   ->     1 2
     19:     1 10'-100001-00   ->     2 1
     20:     1 10'-1001---00   ->     3 3
     21:     1 10'1101----00   ->     3 3
     22:     1 10'011-----00   ->     3 3
     23:     2 10'-100000100   ->     0 0
     24:     2 10'-10001--00   ->     1 2
     25:     2 10'-100000000   ->     2 1
     26:     2 10'-100001-00   ->     2 1
     27:     2 10'0101----00   ->     2 1
     28:     2 10'111-----00   ->     2 1
     29:     2 10'-1------10   ->     2 1
     30:     2 10'-1-------1   ->     2 1
     31:     2 10'-0--------   ->     2 1
     32:     2 10'-1001---00   ->     3 3
     33:     2 10'1101----00   ->     3 3
     34:     2 10'011-----00   ->     3 3
     35:     3 10'-100000100   ->     0 0
     36:     3 10'-10001--00   ->     1 2
     37:     3 10'-100001-00   ->     2 1
     38:     3 10'-100000000   ->     3 3
     39:     3 10'-1001---00   ->     3 3
     40:     3 10'-101----00   ->     3 3
     41:     3 10'-11-----00   ->     3 3
     42:     3 10'-1------10   ->     3 3
     43:     3 10'-1-------1   ->     3 3
     44:     3 10'-0--------   ->     3 3

-------------------------------------

FSM `$fsm$\P2.d$1123' from module `b21':
-------------------------------------

  Information on FSM $fsm$\P2.d$1123 (\P2.d):

  Number of input signals:   10
  Number of output signals:  32
  Number of state bits:       4

  Input signals:
    0: $flatten\P2.$verific$n341$739 [0]
    1: $flatten\P2.$verific$n10346$710
    2: $flatten\P2.$verific$n1477$642
    3: $flatten\P2.$verific$n1476$641
    4: $flatten\P2.$verific$n1475$640
    5: $flatten\P2.$verific$n1474$639
    6: $flatten\P2.$verific$n1440$638
    7: $flatten\P2.$verific$n1405$637
    8: \P2.state
    9: \P2.B

  Output signals:
    0: $flatten\P2.$verific$n11479$894 [0]
    1: $flatten\P2.$verific$n11479$894 [1]
    2: $flatten\P2.$verific$n11479$894 [2]
    3: $flatten\P2.$verific$n11479$894 [3]
    4: $flatten\P2.$verific$n11479$894 [4]
    5: $flatten\P2.$verific$n11479$894 [5]
    6: $flatten\P2.$verific$n11479$894 [6]
    7: $flatten\P2.$verific$n11479$894 [7]
    8: $flatten\P2.$verific$n11479$894 [8]
    9: $flatten\P2.$verific$n11479$894 [9]
   10: $flatten\P2.$verific$n11479$894 [10]
   11: $flatten\P2.$verific$n11479$894 [11]
   12: $flatten\P2.$verific$n11479$894 [12]
   13: $flatten\P2.$verific$n11479$894 [13]
   14: $flatten\P2.$verific$n11479$894 [14]
   15: $flatten\P2.$verific$n11479$894 [15]
   16: $flatten\P2.$verific$n11479$894 [16]
   17: $flatten\P2.$verific$n11479$894 [17]
   18: $flatten\P2.$verific$n11479$894 [18]
   19: $flatten\P2.$verific$n11479$894 [19]
   20: $flatten\P2.$verific$n11479$894 [20]
   21: $flatten\P2.$verific$n11479$894 [21]
   22: $flatten\P2.$verific$n11479$894 [22]
   23: $flatten\P2.$verific$n11479$894 [23]
   24: $flatten\P2.$verific$n11479$894 [24]
   25: $flatten\P2.$verific$n11479$894 [25]
   26: $flatten\P2.$verific$n11479$894 [26]
   27: $flatten\P2.$verific$n11479$894 [27]
   28: $flatten\P2.$verific$n11479$894 [28]
   29: $flatten\P2.$verific$n11479$894 [29]
   30: $flatten\P2.$verific$n11479$894 [30]
   31: $flatten\P2.$verific$n11479$894 [31]

  State encoding:
    0:     4'---1  <RESET STATE>
    1:     4'--1-
    2:     4'-1--
    3:     4'1---

  Transition Table (state_in, ctrl_in, state_out, ctrl_out):
      0:     0 10'-100000-00   ->     0 0
      1:     0 10'0101----00   ->     0 0
      2:     0 10'111-----00   ->     0 0
      3:     0 10'-1------10   ->     0 0
      4:     0 10'-1-------1   ->     0 0
      5:     0 10'-0--------   ->     0 0
      6:     0 10'-10001--00   ->     1 2
      7:     0 10'-100001-00   ->     2 1
      8:     0 10'-1001---00   ->     3 3
      9:     0 10'1101----00   ->     3 3
     10:     0 10'011-----00   ->     3 3
     11:     1 10'-100000100   ->     0 0
     12:     1 10'-100000000   ->     1 2
     13:     1 10'-10001--00   ->     1 2
     14:     1 10'0101----00   ->     1 2
     15:     1 10'111-----00   ->     1 2
     16:     1 10'-1------10   ->     1 2
     17:     1 10'-1-------1   ->     1 2
     18:     1 10'-0--------   ->     1 2
     19:     1 10'-100001-00   ->     2 1
     20:     1 10'-1001---00   ->     3 3
     21:     1 10'1101----00   ->     3 3
     22:     1 10'011-----00   ->     3 3
     23:     2 10'-100000100   ->     0 0
     24:     2 10'-10001--00   ->     1 2
     25:     2 10'-100000000   ->     2 1
     26:     2 10'-100001-00   ->     2 1
     27:     2 10'0101----00   ->     2 1
     28:     2 10'111-----00   ->     2 1
     29:     2 10'-1------10   ->     2 1
     30:     2 10'-1-------1   ->     2 1
     31:     2 10'-0--------   ->     2 1
     32:     2 10'-1001---00   ->     3 3
     33:     2 10'1101----00   ->     3 3
     34:     2 10'011-----00   ->     3 3
     35:     3 10'-100000100   ->     0 0
     36:     3 10'-10001--00   ->     1 2
     37:     3 10'-100001-00   ->     2 1
     38:     3 10'-100000000   ->     3 3
     39:     3 10'-1001---00   ->     3 3
     40:     3 10'-101----00   ->     3 3
     41:     3 10'-11-----00   ->     3 3
     42:     3 10'-1------10   ->     3 3
     43:     3 10'-1-------1   ->     3 3
     44:     3 10'-0--------   ->     3 3

-------------------------------------

12.8. Executing FSM_MAP pass (mapping FSMs to basic logic).
Mapping FSM `$fsm$\P1.d$1121' from module `\b21'.
Mapping FSM `$fsm$\P2.d$1123' from module `\b21'.

13. Executing OPT pass (performing simple optimizations).

13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b21.
<suppressed ~12 debug messages>

13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b21'.
<suppressed ~324 debug messages>
Removed a total of 108 cells.

13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b21..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~38 debug messages>

13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b21.
Performed a total of 0 changes.

13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b21'.
Removed a total of 0 cells.

13.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $flatten\P2.$verific$reg3_reg$b21.vhd:1019$1096 ($adff) from module b21 (D = $flatten\P2.$verific$n10312$863 [2:0], Q = \P2.reg3 [2:0]).
Adding EN signal on $flatten\P2.$verific$reg3_reg$b21.vhd:1019$1096 ($adff) from module b21 (D = $flatten\P2.$verific$n11185$889 [31:3], Q = \P2.reg3 [31:3]).
Adding EN signal on $flatten\P2.$verific$reg2_reg$b21.vhd:1019$1095 ($adff) from module b21 (D = $flatten\P2.$verific$n10279$862, Q = \P2.reg2).
Adding EN signal on $flatten\P2.$verific$reg1_reg$b21.vhd:1019$1094 ($adff) from module b21 (D = $flatten\P2.$verific$n10246$861, Q = \P2.reg1).
Adding EN signal on $flatten\P2.$verific$reg0_reg$b21.vhd:1019$1093 ($adff) from module b21 (D = $flatten\P2.$verific$n10213$860, Q = \P2.reg0).
Adding EN signal on $flatten\P2.$verific$datao_reg$b21.vhd:1019$1100 ($adff) from module b21 (D = { $flatten\P2.$verific$add_570$b21.vhd:980$1022 $flatten\P2.$verific$n10521$872 [0] }, Q = \P2.datao).
Adding EN signal on $flatten\P2.$verific$B_reg$b21.vhd:1019$1092 ($adff) from module b21 (D = $flatten\P2.$verific$n10986$718, Q = \P2.B).
Adding EN signal on $flatten\P1.$verific$reg3_reg$b21.vhd:509$574 ($adff) from module b21 (D = $flatten\P1.$verific$n10312$344 [2:0], Q = \P1.reg3 [2:0]).
Adding EN signal on $flatten\P1.$verific$reg3_reg$b21.vhd:509$574 ($adff) from module b21 (D = $flatten\P1.$verific$n11178$369 [31:3], Q = \P1.reg3 [31:3]).
Adding EN signal on $flatten\P1.$verific$reg2_reg$b21.vhd:509$573 ($adff) from module b21 (D = $flatten\P1.$verific$n10279$343, Q = \P1.reg2).
Adding EN signal on $flatten\P1.$verific$reg1_reg$b21.vhd:509$572 ($adff) from module b21 (D = $flatten\P1.$verific$n10246$342, Q = \P1.reg1).
Adding EN signal on $flatten\P1.$verific$reg0_reg$b21.vhd:509$571 ($adff) from module b21 (D = $flatten\P1.$verific$n10213$341, Q = \P1.reg0).
Adding EN signal on $flatten\P1.$verific$datao_reg$b21.vhd:509$578 ($adff) from module b21 (D = { $flatten\P1.$verific$add_570$b21.vhd:470$502 $flatten\P1.$verific$n10514$352 [0] }, Q = \P1.datao).
Adding EN signal on $flatten\P1.$verific$B_reg$b21.vhd:509$570 ($adff) from module b21 (D = $flatten\P1.$verific$n10979$199, Q = \P1.B).

13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b21..
Removed 28 unused cells and 140 unused wires.
<suppressed ~29 debug messages>

13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module b21.

13.9. Rerunning OPT passes. (Maybe there is more to do..)

13.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b21..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~30 debug messages>

13.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b21.
Performed a total of 0 changes.

13.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b21'.
<suppressed ~60 debug messages>
Removed a total of 20 cells.

13.13. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 2 on $flatten\P1.$verific$d_reg$b21.vhd:509$569 ($adff) from module b21.
Setting constant 0-bit at position 3 on $flatten\P1.$verific$d_reg$b21.vhd:509$569 ($adff) from module b21.
Setting constant 0-bit at position 4 on $flatten\P1.$verific$d_reg$b21.vhd:509$569 ($adff) from module b21.
Setting constant 0-bit at position 5 on $flatten\P1.$verific$d_reg$b21.vhd:509$569 ($adff) from module b21.
Setting constant 0-bit at position 6 on $flatten\P1.$verific$d_reg$b21.vhd:509$569 ($adff) from module b21.
Setting constant 0-bit at position 7 on $flatten\P1.$verific$d_reg$b21.vhd:509$569 ($adff) from module b21.
Setting constant 0-bit at position 8 on $flatten\P1.$verific$d_reg$b21.vhd:509$569 ($adff) from module b21.
Setting constant 0-bit at position 9 on $flatten\P1.$verific$d_reg$b21.vhd:509$569 ($adff) from module b21.
Setting constant 0-bit at position 10 on $flatten\P1.$verific$d_reg$b21.vhd:509$569 ($adff) from module b21.
Setting constant 0-bit at position 11 on $flatten\P1.$verific$d_reg$b21.vhd:509$569 ($adff) from module b21.
Setting constant 0-bit at position 12 on $flatten\P1.$verific$d_reg$b21.vhd:509$569 ($adff) from module b21.
Setting constant 0-bit at position 13 on $flatten\P1.$verific$d_reg$b21.vhd:509$569 ($adff) from module b21.
Setting constant 0-bit at position 14 on $flatten\P1.$verific$d_reg$b21.vhd:509$569 ($adff) from module b21.
Setting constant 0-bit at position 15 on $flatten\P1.$verific$d_reg$b21.vhd:509$569 ($adff) from module b21.
Setting constant 0-bit at position 16 on $flatten\P1.$verific$d_reg$b21.vhd:509$569 ($adff) from module b21.
Setting constant 0-bit at position 17 on $flatten\P1.$verific$d_reg$b21.vhd:509$569 ($adff) from module b21.
Setting constant 0-bit at position 18 on $flatten\P1.$verific$d_reg$b21.vhd:509$569 ($adff) from module b21.
Setting constant 0-bit at position 19 on $flatten\P1.$verific$d_reg$b21.vhd:509$569 ($adff) from module b21.
Setting constant 0-bit at position 20 on $flatten\P1.$verific$d_reg$b21.vhd:509$569 ($adff) from module b21.
Setting constant 0-bit at position 21 on $flatten\P1.$verific$d_reg$b21.vhd:509$569 ($adff) from module b21.
Setting constant 0-bit at position 22 on $flatten\P1.$verific$d_reg$b21.vhd:509$569 ($adff) from module b21.
Setting constant 0-bit at position 23 on $flatten\P1.$verific$d_reg$b21.vhd:509$569 ($adff) from module b21.
Setting constant 0-bit at position 24 on $flatten\P1.$verific$d_reg$b21.vhd:509$569 ($adff) from module b21.
Setting constant 0-bit at position 25 on $flatten\P1.$verific$d_reg$b21.vhd:509$569 ($adff) from module b21.
Setting constant 0-bit at position 26 on $flatten\P1.$verific$d_reg$b21.vhd:509$569 ($adff) from module b21.
Setting constant 0-bit at position 27 on $flatten\P1.$verific$d_reg$b21.vhd:509$569 ($adff) from module b21.
Setting constant 0-bit at position 28 on $flatten\P1.$verific$d_reg$b21.vhd:509$569 ($adff) from module b21.
Setting constant 0-bit at position 29 on $flatten\P1.$verific$d_reg$b21.vhd:509$569 ($adff) from module b21.
Setting constant 0-bit at position 30 on $flatten\P1.$verific$d_reg$b21.vhd:509$569 ($adff) from module b21.
Setting constant 0-bit at position 31 on $flatten\P1.$verific$d_reg$b21.vhd:509$569 ($adff) from module b21.
Setting constant 0-bit at position 2 on $flatten\P2.$verific$d_reg$b21.vhd:1019$1091 ($adff) from module b21.
Setting constant 0-bit at position 3 on $flatten\P2.$verific$d_reg$b21.vhd:1019$1091 ($adff) from module b21.
Setting constant 0-bit at position 4 on $flatten\P2.$verific$d_reg$b21.vhd:1019$1091 ($adff) from module b21.
Setting constant 0-bit at position 5 on $flatten\P2.$verific$d_reg$b21.vhd:1019$1091 ($adff) from module b21.
Setting constant 0-bit at position 6 on $flatten\P2.$verific$d_reg$b21.vhd:1019$1091 ($adff) from module b21.
Setting constant 0-bit at position 7 on $flatten\P2.$verific$d_reg$b21.vhd:1019$1091 ($adff) from module b21.
Setting constant 0-bit at position 8 on $flatten\P2.$verific$d_reg$b21.vhd:1019$1091 ($adff) from module b21.
Setting constant 0-bit at position 9 on $flatten\P2.$verific$d_reg$b21.vhd:1019$1091 ($adff) from module b21.
Setting constant 0-bit at position 10 on $flatten\P2.$verific$d_reg$b21.vhd:1019$1091 ($adff) from module b21.
Setting constant 0-bit at position 11 on $flatten\P2.$verific$d_reg$b21.vhd:1019$1091 ($adff) from module b21.
Setting constant 0-bit at position 12 on $flatten\P2.$verific$d_reg$b21.vhd:1019$1091 ($adff) from module b21.
Setting constant 0-bit at position 13 on $flatten\P2.$verific$d_reg$b21.vhd:1019$1091 ($adff) from module b21.
Setting constant 0-bit at position 14 on $flatten\P2.$verific$d_reg$b21.vhd:1019$1091 ($adff) from module b21.
Setting constant 0-bit at position 15 on $flatten\P2.$verific$d_reg$b21.vhd:1019$1091 ($adff) from module b21.
Setting constant 0-bit at position 16 on $flatten\P2.$verific$d_reg$b21.vhd:1019$1091 ($adff) from module b21.
Setting constant 0-bit at position 17 on $flatten\P2.$verific$d_reg$b21.vhd:1019$1091 ($adff) from module b21.
Setting constant 0-bit at position 18 on $flatten\P2.$verific$d_reg$b21.vhd:1019$1091 ($adff) from module b21.
Setting constant 0-bit at position 19 on $flatten\P2.$verific$d_reg$b21.vhd:1019$1091 ($adff) from module b21.
Setting constant 0-bit at position 20 on $flatten\P2.$verific$d_reg$b21.vhd:1019$1091 ($adff) from module b21.
Setting constant 0-bit at position 21 on $flatten\P2.$verific$d_reg$b21.vhd:1019$1091 ($adff) from module b21.
Setting constant 0-bit at position 22 on $flatten\P2.$verific$d_reg$b21.vhd:1019$1091 ($adff) from module b21.
Setting constant 0-bit at position 23 on $flatten\P2.$verific$d_reg$b21.vhd:1019$1091 ($adff) from module b21.
Setting constant 0-bit at position 24 on $flatten\P2.$verific$d_reg$b21.vhd:1019$1091 ($adff) from module b21.
Setting constant 0-bit at position 25 on $flatten\P2.$verific$d_reg$b21.vhd:1019$1091 ($adff) from module b21.
Setting constant 0-bit at position 26 on $flatten\P2.$verific$d_reg$b21.vhd:1019$1091 ($adff) from module b21.
Setting constant 0-bit at position 27 on $flatten\P2.$verific$d_reg$b21.vhd:1019$1091 ($adff) from module b21.
Setting constant 0-bit at position 28 on $flatten\P2.$verific$d_reg$b21.vhd:1019$1091 ($adff) from module b21.
Setting constant 0-bit at position 29 on $flatten\P2.$verific$d_reg$b21.vhd:1019$1091 ($adff) from module b21.
Setting constant 0-bit at position 30 on $flatten\P2.$verific$d_reg$b21.vhd:1019$1091 ($adff) from module b21.
Setting constant 0-bit at position 31 on $flatten\P2.$verific$d_reg$b21.vhd:1019$1091 ($adff) from module b21.

13.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b21..
Removed 0 unused cells and 20 unused wires.
<suppressed ~1 debug messages>

13.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module b21.

13.16. Rerunning OPT passes. (Maybe there is more to do..)

13.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b21..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~30 debug messages>

13.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b21.
Performed a total of 0 changes.

13.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b21'.
Removed a total of 0 cells.

13.20. Executing OPT_DFF pass (perform DFF optimizations).

13.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b21..

13.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module b21.

13.23. Finished OPT passes. (There is nothing left to do.)

14. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 20) from port A of cell b21.$verific$LessThan_16$b21.vhd:1080$69 ($lt).
Removed top 1 bits (of 20) from port A of cell b21.$verific$LessThan_17$b21.vhd:1080$70 ($lt).
Removed top 1 bits (of 5) from port B of cell b21.$auto$fsm_map.cc:77:implement_pattern_cache$1311 ($eq).
Removed top 1 bits (of 6) from port B of cell b21.$auto$fsm_map.cc:77:implement_pattern_cache$1301 ($eq).
Removed top 3 bits (of 33) from port Y of cell b21.$flatten\P1.$verific$sub_365$b21.vhd:362$496 ($sub).
Removed top 3 bits (of 33) from port A of cell b21.$flatten\P1.$verific$sub_365$b21.vhd:362$496 ($sub).
Removed top 3 bits (of 33) from port B of cell b21.$flatten\P1.$verific$sub_365$b21.vhd:362$496 ($sub).
Removed top 2 bits (of 32) from port Y of cell b21.$flatten\P1.$verific$add_283$b21.vhd:322$494 ($add).
Removed top 2 bits (of 32) from port A of cell b21.$flatten\P1.$verific$add_283$b21.vhd:322$494 ($add).
Removed top 2 bits (of 32) from port B of cell b21.$flatten\P1.$verific$add_283$b21.vhd:322$494 ($add).
Removed top 30 bits (of 32) from port A of cell b21.$flatten\P1.$verific$equal_179$b21.vhd:250$488 ($eq).
Removed top 30 bits (of 32) from port A of cell b21.$flatten\P1.$verific$equal_178$b21.vhd:249$487 ($eq).
Removed top 31 bits (of 32) from port A of cell b21.$flatten\P1.$verific$equal_177$b21.vhd:248$486 ($eq).
Removed top 32 bits (of 33) from port A of cell b21.$flatten\P1.$verific$sub_168$b21.vhd:247$483 ($sub).
Removed top 1 bits (of 33) from port Y of cell b21.$flatten\P1.$verific$sub_168$b21.vhd:247$483 ($sub).
Removed top 1 bits (of 33) from port B of cell b21.$flatten\P1.$verific$sub_168$b21.vhd:247$483 ($sub).
Removed top 30 bits (of 32) from mux cell b21.$flatten\P1.$verific$mux_145$b21.vhd:230$477 ($mux).
Removed top 2 bits (of 3) from port A of cell b21.$flatten\P1.$verific$equal_143$b21.vhd:228$475 ($eq).
Removed top 1 bits (of 3) from port A of cell b21.$flatten\P1.$verific$equal_142$b21.vhd:227$474 ($eq).
Removed top 1 bits (of 3) from port A of cell b21.$flatten\P1.$verific$equal_141$b21.vhd:225$473 ($eq).
Removed top 30 bits (of 32) from mux cell b21.$flatten\P1.$verific$mux_140$b21.vhd:224$472 ($mux).
Removed top 30 bits (of 32) from mux cell b21.$flatten\P1.$verific$mux_138$b21.vhd:220$470 ($mux).
Removed top 2 bits (of 33) from port B of cell b21.$flatten\P1.$verific$sub_84$b21.vhd:153$452 ($sub).
Removed top 1 bits (of 33) from port Y of cell b21.$flatten\P1.$verific$sub_84$b21.vhd:153$452 ($sub).
Removed top 1 bits (of 33) from port A of cell b21.$flatten\P1.$verific$sub_84$b21.vhd:153$452 ($sub).
Removed top 1 bits (of 32) from port B of cell b21.$flatten\P1.$verific$LessThan_83$b21.vhd:152$451 ($lt).
Removed top 12 bits (of 32) from port A of cell b21.$flatten\P1.$verific$add_61$b21.vhd:117$439 ($add).
Removed top 12 bits (of 32) from port Y of cell b21.$flatten\P1.$verific$add_61$b21.vhd:117$439 ($add).
Removed top 12 bits (of 32) from port B of cell b21.$flatten\P1.$verific$add_61$b21.vhd:117$439 ($add).
Removed top 12 bits (of 32) from port A of cell b21.$flatten\P1.$verific$add_56$b21.vhd:114$437 ($add).
Removed top 12 bits (of 32) from port Y of cell b21.$flatten\P1.$verific$add_56$b21.vhd:114$437 ($add).
Removed top 12 bits (of 32) from port B of cell b21.$flatten\P1.$verific$add_56$b21.vhd:114$437 ($add).
Removed top 1 bits (of 3) from port Y of cell b21.$flatten\P1.$verific$add_44$b21.vhd:100$429 ($add).
Removed top 1 bits (of 3) from port A of cell b21.$flatten\P1.$verific$add_44$b21.vhd:100$429 ($add).
Removed top 25 bits (of 26) from port B of cell b21.$flatten\P1.$verific$add_39$b21.vhd:99$425 ($add).
Removed top 8 bits (of 9) from port Y of cell b21.$flatten\P1.$verific$add_36$b21.vhd:96$419 ($add).
Removed top 8 bits (of 9) from port A of cell b21.$flatten\P1.$verific$add_36$b21.vhd:96$419 ($add).
Removed top 1 bits (of 6) from port B of cell b21.$auto$fsm_map.cc:77:implement_pattern_cache$1515 ($eq).
Removed top 9 bits (of 13) from port Y of cell b21.$flatten\P1.$verific$add_31$b21.vhd:94$412 ($add).
Removed top 9 bits (of 13) from port A of cell b21.$flatten\P1.$verific$add_31$b21.vhd:94$412 ($add).
Removed top 5 bits (of 8) from port Y of cell b21.$flatten\P1.$verific$add_26$b21.vhd:92$405 ($add).
Removed top 5 bits (of 8) from port A of cell b21.$flatten\P1.$verific$add_26$b21.vhd:92$405 ($add).
Removed top 3 bits (of 5) from port Y of cell b21.$flatten\P1.$verific$add_21$b21.vhd:90$398 ($add).
Removed top 3 bits (of 5) from port A of cell b21.$flatten\P1.$verific$add_21$b21.vhd:90$398 ($add).
Removed top 1 bits (of 33) from port Y of cell b21.$flatten\P1.$verific$unary_minus_15$b21.vhd:88$392 ($neg).
Removed top 1 bits (of 33) from port A of cell b21.$flatten\P1.$verific$unary_minus_15$b21.vhd:88$392 ($neg).
Removed top 1 bits (of 32) from port A of cell b21.$flatten\P1.$verific$LessThan_14$b21.vhd:87$391 ($lt).
Removed top 1 bits (of 5) from port B of cell b21.$auto$fsm_map.cc:77:implement_pattern_cache$1525 ($eq).
Removed top 3 bits (of 29) from FF cell b21.$auto$ff.cc:262:slice$1599 ($adffe).
Removed top 3 bits (of 29) from FF cell b21.$auto$ff.cc:262:slice$1560 ($adffe).
Removed top 3 bits (of 32) from mux cell b21.$flatten\P2.$verific$mux_697$b21.vhd:1016$1074 ($mux).
Removed top 3 bits (of 32) from mux cell b21.$flatten\P2.$verific$mux_678$b21.vhd:1015$1060 ($mux).
Removed top 3 bits (of 33) from port Y of cell b21.$flatten\P2.$verific$sub_365$b21.vhd:872$1016 ($sub).
Removed top 3 bits (of 33) from port A of cell b21.$flatten\P2.$verific$sub_365$b21.vhd:872$1016 ($sub).
Removed top 3 bits (of 33) from port B of cell b21.$flatten\P2.$verific$sub_365$b21.vhd:872$1016 ($sub).
Removed top 2 bits (of 32) from port Y of cell b21.$flatten\P2.$verific$add_283$b21.vhd:832$1014 ($add).
Removed top 2 bits (of 32) from port A of cell b21.$flatten\P2.$verific$add_283$b21.vhd:832$1014 ($add).
Removed top 2 bits (of 32) from port B of cell b21.$flatten\P2.$verific$add_283$b21.vhd:832$1014 ($add).
Removed top 30 bits (of 32) from port A of cell b21.$flatten\P2.$verific$equal_179$b21.vhd:760$1008 ($eq).
Removed top 30 bits (of 32) from port A of cell b21.$flatten\P2.$verific$equal_178$b21.vhd:759$1007 ($eq).
Removed top 31 bits (of 32) from port A of cell b21.$flatten\P2.$verific$equal_177$b21.vhd:758$1006 ($eq).
Removed top 32 bits (of 33) from port A of cell b21.$flatten\P2.$verific$sub_168$b21.vhd:757$1003 ($sub).
Removed top 1 bits (of 33) from port Y of cell b21.$flatten\P2.$verific$sub_168$b21.vhd:757$1003 ($sub).
Removed top 1 bits (of 33) from port B of cell b21.$flatten\P2.$verific$sub_168$b21.vhd:757$1003 ($sub).
Removed top 30 bits (of 32) from mux cell b21.$flatten\P2.$verific$mux_145$b21.vhd:740$997 ($mux).
Removed top 2 bits (of 3) from port A of cell b21.$flatten\P2.$verific$equal_143$b21.vhd:738$995 ($eq).
Removed top 1 bits (of 3) from port A of cell b21.$flatten\P2.$verific$equal_142$b21.vhd:737$994 ($eq).
Removed top 1 bits (of 3) from port A of cell b21.$flatten\P2.$verific$equal_141$b21.vhd:735$993 ($eq).
Removed top 30 bits (of 32) from mux cell b21.$flatten\P2.$verific$mux_140$b21.vhd:734$992 ($mux).
Removed top 30 bits (of 32) from mux cell b21.$flatten\P2.$verific$mux_138$b21.vhd:730$990 ($mux).
Removed top 2 bits (of 33) from port B of cell b21.$flatten\P2.$verific$sub_84$b21.vhd:663$972 ($sub).
Removed top 1 bits (of 33) from port Y of cell b21.$flatten\P2.$verific$sub_84$b21.vhd:663$972 ($sub).
Removed top 1 bits (of 33) from port A of cell b21.$flatten\P2.$verific$sub_84$b21.vhd:663$972 ($sub).
Removed top 1 bits (of 32) from port B of cell b21.$flatten\P2.$verific$LessThan_83$b21.vhd:662$971 ($lt).
Removed top 12 bits (of 32) from port A of cell b21.$flatten\P2.$verific$add_61$b21.vhd:627$959 ($add).
Removed top 12 bits (of 32) from port Y of cell b21.$flatten\P2.$verific$add_61$b21.vhd:627$959 ($add).
Removed top 12 bits (of 32) from port B of cell b21.$flatten\P2.$verific$add_61$b21.vhd:627$959 ($add).
Removed top 12 bits (of 32) from port A of cell b21.$flatten\P2.$verific$add_56$b21.vhd:624$957 ($add).
Removed top 12 bits (of 32) from port Y of cell b21.$flatten\P2.$verific$add_56$b21.vhd:624$957 ($add).
Removed top 12 bits (of 32) from port B of cell b21.$flatten\P2.$verific$add_56$b21.vhd:624$957 ($add).
Removed top 1 bits (of 3) from port Y of cell b21.$flatten\P2.$verific$add_44$b21.vhd:610$949 ($add).
Removed top 1 bits (of 3) from port A of cell b21.$flatten\P2.$verific$add_44$b21.vhd:610$949 ($add).
Removed top 25 bits (of 26) from port B of cell b21.$flatten\P2.$verific$add_39$b21.vhd:609$945 ($add).
Removed top 8 bits (of 9) from port Y of cell b21.$flatten\P2.$verific$add_36$b21.vhd:606$939 ($add).
Removed top 8 bits (of 9) from port A of cell b21.$flatten\P2.$verific$add_36$b21.vhd:606$939 ($add).
Removed top 9 bits (of 13) from port Y of cell b21.$flatten\P2.$verific$add_31$b21.vhd:604$932 ($add).
Removed top 9 bits (of 13) from port A of cell b21.$flatten\P2.$verific$add_31$b21.vhd:604$932 ($add).
Removed top 5 bits (of 8) from port Y of cell b21.$flatten\P2.$verific$add_26$b21.vhd:602$925 ($add).
Removed top 5 bits (of 8) from port A of cell b21.$flatten\P2.$verific$add_26$b21.vhd:602$925 ($add).
Removed top 3 bits (of 5) from port Y of cell b21.$flatten\P2.$verific$add_21$b21.vhd:600$918 ($add).
Removed top 3 bits (of 5) from port A of cell b21.$flatten\P2.$verific$add_21$b21.vhd:600$918 ($add).
Removed top 1 bits (of 33) from port Y of cell b21.$flatten\P2.$verific$unary_minus_15$b21.vhd:598$912 ($neg).
Removed top 1 bits (of 33) from port A of cell b21.$flatten\P2.$verific$unary_minus_15$b21.vhd:598$912 ($neg).
Removed top 1 bits (of 32) from port A of cell b21.$flatten\P2.$verific$LessThan_14$b21.vhd:597$911 ($lt).
Removed top 3 bits (of 32) from mux cell b21.$flatten\P1.$verific$mux_698$b21.vhd:506$552 ($mux).
Removed top 3 bits (of 32) from mux cell b21.$flatten\P1.$verific$mux_679$b21.vhd:505$538 ($mux).
Removed top 20 bits (of 21) from wire b21.$flatten\P1.$verific$n10477$349.
Removed top 3 bits (of 32) from wire b21.$flatten\P1.$verific$n10755$360.
Removed top 3 bits (of 32) from wire b21.$flatten\P1.$verific$n11178$369.
Removed top 30 bits (of 32) from wire b21.$flatten\P1.$verific$n11472$374.
Removed top 30 bits (of 32) from wire b21.$flatten\P1.$verific$n1407$242.
Removed top 30 bits (of 32) from wire b21.$flatten\P1.$verific$n1441$243.
Removed top 30 bits (of 32) from wire b21.$flatten\P1.$verific$n1478$244.
Removed top 1 bits (of 33) from wire b21.$flatten\P1.$verific$n184$211.
Removed top 1 bits (of 33) from wire b21.$flatten\P1.$verific$n1987$255.
Removed top 3 bits (of 5) from wire b21.$flatten\P1.$verific$n288$214.
Removed top 5 bits (of 8) from wire b21.$flatten\P1.$verific$n301$216.
Removed top 9 bits (of 13) from wire b21.$flatten\P1.$verific$n318$218.
Removed top 8 bits (of 9) from wire b21.$flatten\P1.$verific$n341$220.
Removed top 2 bits (of 32) from wire b21.$flatten\P1.$verific$n4241$288.
Removed top 1 bits (of 3) from wire b21.$flatten\P1.$verific$n436$224.
Removed top 3 bits (of 33) from wire b21.$flatten\P1.$verific$n5666$302.
Removed top 1 bits (of 32) from wire b21.$flatten\P1.$verific$n862$237.
Removed top 1 bits (of 33) from wire b21.$flatten\P1.$verific$n933$239.
Removed top 1 bits (of 21) from wire b21.$flatten\P2.$verific$n10477$870.
Removed top 3 bits (of 32) from wire b21.$flatten\P2.$verific$n10762$880.
Removed top 1 bits (of 20) from wire b21.$flatten\P2.$verific$n10964$883.
Removed top 4 bits (of 32) from wire b21.$flatten\P2.$verific$n11185$889.
Removed top 30 bits (of 32) from wire b21.$flatten\P2.$verific$n11479$894.
Removed top 30 bits (of 32) from wire b21.$flatten\P2.$verific$n1407$761.
Removed top 30 bits (of 32) from wire b21.$flatten\P2.$verific$n1441$762.
Removed top 30 bits (of 32) from wire b21.$flatten\P2.$verific$n1478$763.
Removed top 1 bits (of 32) from wire b21.$flatten\P2.$verific$n1511$764.
Removed top 1 bits (of 32) from wire b21.$flatten\P2.$verific$n1544$765.
Removed top 1 bits (of 32) from wire b21.$flatten\P2.$verific$n1577$766.
Removed top 1 bits (of 32) from wire b21.$flatten\P2.$verific$n1610$767.
Removed top 1 bits (of 32) from wire b21.$flatten\P2.$verific$n1643$768.
Removed top 1 bits (of 20) from wire b21.$flatten\P2.$verific$n1787$770.
Removed top 1 bits (of 33) from wire b21.$flatten\P2.$verific$n1987$774.
Removed top 2 bits (of 32) from wire b21.$flatten\P2.$verific$n4241$807.

15. Executing PEEPOPT pass (run peephole optimizers).

16. Executing PMUXTREE pass.

17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b21..
Removed 16 unused cells and 114 unused wires.
<suppressed ~17 debug messages>

18. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module b21:
  creating $macc model for $flatten\P1.$verific$add_21$b21.vhd:90$398 ($add).
  creating $macc model for $flatten\P1.$verific$add_26$b21.vhd:92$405 ($add).
  creating $macc model for $flatten\P1.$verific$add_283$b21.vhd:322$494 ($add).
  creating $macc model for $flatten\P1.$verific$add_31$b21.vhd:94$412 ($add).
  creating $macc model for $flatten\P1.$verific$add_36$b21.vhd:96$419 ($add).
  creating $macc model for $flatten\P1.$verific$add_39$b21.vhd:99$425 ($add).
  creating $macc model for $flatten\P1.$verific$add_44$b21.vhd:100$429 ($add).
  creating $macc model for $flatten\P1.$verific$add_56$b21.vhd:114$437 ($add).
  creating $macc model for $flatten\P1.$verific$add_570$b21.vhd:470$501 ($add).
  creating $macc model for $flatten\P1.$verific$add_61$b21.vhd:117$439 ($add).
  creating $macc model for $flatten\P1.$verific$add_662$b21.vhd:497$521 ($add).
  creating $macc model for $flatten\P1.$verific$add_664$b21.vhd:498$523 ($add).
  creating $macc model for $flatten\P1.$verific$mult_667$b21.vhd:501$527 ($mul).
  creating $macc model for $flatten\P1.$verific$sub_168$b21.vhd:247$483 ($sub).
  creating $macc model for $flatten\P1.$verific$sub_365$b21.vhd:362$496 ($sub).
  creating $macc model for $flatten\P1.$verific$sub_84$b21.vhd:153$452 ($sub).
  creating $macc model for $flatten\P1.$verific$unary_minus_15$b21.vhd:88$392 ($neg).
  creating $macc model for $flatten\P2.$verific$add_21$b21.vhd:600$918 ($add).
  creating $macc model for $flatten\P2.$verific$add_26$b21.vhd:602$925 ($add).
  creating $macc model for $flatten\P2.$verific$add_283$b21.vhd:832$1014 ($add).
  creating $macc model for $flatten\P2.$verific$add_31$b21.vhd:604$932 ($add).
  creating $macc model for $flatten\P2.$verific$add_36$b21.vhd:606$939 ($add).
  creating $macc model for $flatten\P2.$verific$add_39$b21.vhd:609$945 ($add).
  creating $macc model for $flatten\P2.$verific$add_44$b21.vhd:610$949 ($add).
  creating $macc model for $flatten\P2.$verific$add_56$b21.vhd:624$957 ($add).
  creating $macc model for $flatten\P2.$verific$add_570$b21.vhd:980$1021 ($add).
  creating $macc model for $flatten\P2.$verific$add_61$b21.vhd:627$959 ($add).
  creating $macc model for $flatten\P2.$verific$add_662$b21.vhd:1007$1042 ($add).
  creating $macc model for $flatten\P2.$verific$add_664$b21.vhd:1008$1045 ($add).
  creating $macc model for $flatten\P2.$verific$sub_168$b21.vhd:757$1003 ($sub).
  creating $macc model for $flatten\P2.$verific$sub_365$b21.vhd:872$1016 ($sub).
  creating $macc model for $flatten\P2.$verific$sub_84$b21.vhd:663$972 ($sub).
  creating $macc model for $flatten\P2.$verific$unary_minus_15$b21.vhd:598$912 ($neg).
  creating $macc model for $verific$add_24$b21.vhd:1081$74 ($add).
  creating $macc model for $verific$add_3$b21.vhd:1071$56 ($add).
  creating $macc model for $verific$add_30$b21.vhd:1085$76 ($add).
  creating $alu model for $macc $verific$add_30$b21.vhd:1085$76.
  creating $alu model for $macc $verific$add_3$b21.vhd:1071$56.
  creating $alu model for $macc $verific$add_24$b21.vhd:1081$74.
  creating $alu model for $macc $flatten\P2.$verific$unary_minus_15$b21.vhd:598$912.
  creating $alu model for $macc $flatten\P2.$verific$sub_84$b21.vhd:663$972.
  creating $alu model for $macc $flatten\P2.$verific$sub_365$b21.vhd:872$1016.
  creating $alu model for $macc $flatten\P2.$verific$sub_168$b21.vhd:757$1003.
  creating $alu model for $macc $flatten\P2.$verific$add_664$b21.vhd:1008$1045.
  creating $alu model for $macc $flatten\P2.$verific$add_662$b21.vhd:1007$1042.
  creating $alu model for $macc $flatten\P2.$verific$add_61$b21.vhd:627$959.
  creating $alu model for $macc $flatten\P2.$verific$add_570$b21.vhd:980$1021.
  creating $alu model for $macc $flatten\P2.$verific$add_56$b21.vhd:624$957.
  creating $alu model for $macc $flatten\P2.$verific$add_44$b21.vhd:610$949.
  creating $alu model for $macc $flatten\P2.$verific$add_39$b21.vhd:609$945.
  creating $alu model for $macc $flatten\P2.$verific$add_36$b21.vhd:606$939.
  creating $alu model for $macc $flatten\P2.$verific$add_31$b21.vhd:604$932.
  creating $alu model for $macc $flatten\P2.$verific$add_283$b21.vhd:832$1014.
  creating $alu model for $macc $flatten\P2.$verific$add_26$b21.vhd:602$925.
  creating $alu model for $macc $flatten\P2.$verific$add_21$b21.vhd:600$918.
  creating $alu model for $macc $flatten\P1.$verific$unary_minus_15$b21.vhd:88$392.
  creating $alu model for $macc $flatten\P1.$verific$sub_84$b21.vhd:153$452.
  creating $alu model for $macc $flatten\P1.$verific$sub_365$b21.vhd:362$496.
  creating $alu model for $macc $flatten\P1.$verific$sub_168$b21.vhd:247$483.
  creating $alu model for $macc $flatten\P1.$verific$add_664$b21.vhd:498$523.
  creating $alu model for $macc $flatten\P1.$verific$add_662$b21.vhd:497$521.
  creating $alu model for $macc $flatten\P1.$verific$add_61$b21.vhd:117$439.
  creating $alu model for $macc $flatten\P1.$verific$add_570$b21.vhd:470$501.
  creating $alu model for $macc $flatten\P1.$verific$add_56$b21.vhd:114$437.
  creating $alu model for $macc $flatten\P1.$verific$add_44$b21.vhd:100$429.
  creating $alu model for $macc $flatten\P1.$verific$add_39$b21.vhd:99$425.
  creating $alu model for $macc $flatten\P1.$verific$add_36$b21.vhd:96$419.
  creating $alu model for $macc $flatten\P1.$verific$add_31$b21.vhd:94$412.
  creating $alu model for $macc $flatten\P1.$verific$add_283$b21.vhd:322$494.
  creating $alu model for $macc $flatten\P1.$verific$add_26$b21.vhd:92$405.
  creating $alu model for $macc $flatten\P1.$verific$add_21$b21.vhd:90$398.
  creating $macc cell for $flatten\P1.$verific$mult_667$b21.vhd:501$527: $auto$alumacc.cc:365:replace_macc$1731
  creating $alu model for $flatten\P1.$verific$LessThan_14$b21.vhd:87$391 ($lt): new $alu
  creating $alu model for $flatten\P1.$verific$LessThan_68$b21.vhd:122$445 ($lt): new $alu
  creating $alu model for $flatten\P1.$verific$LessThan_78$b21.vhd:142$449 ($lt): merged with $flatten\P1.$verific$LessThan_68$b21.vhd:122$445.
  creating $alu model for $flatten\P1.$verific$LessThan_83$b21.vhd:152$451 ($lt): new $alu
  creating $alu model for $flatten\P1.$verific$LessThan_87$b21.vhd:155$456 ($lt): new $alu
  creating $alu model for $flatten\P2.$verific$LessThan_14$b21.vhd:597$911 ($lt): new $alu
  creating $alu model for $flatten\P2.$verific$LessThan_68$b21.vhd:632$965 ($lt): new $alu
  creating $alu model for $flatten\P2.$verific$LessThan_78$b21.vhd:652$969 ($lt): merged with $flatten\P2.$verific$LessThan_68$b21.vhd:632$965.
  creating $alu model for $flatten\P2.$verific$LessThan_83$b21.vhd:662$971 ($lt): new $alu
  creating $alu model for $flatten\P2.$verific$LessThan_87$b21.vhd:665$976 ($lt): new $alu
  creating $alu model for $verific$LessThan_11$b21.vhd:1079$64 ($lt): new $alu
  creating $alu model for $verific$LessThan_12$b21.vhd:1079$65 ($lt): new $alu
  creating $alu model for $verific$LessThan_16$b21.vhd:1080$69 ($lt): new $alu
  creating $alu model for $verific$LessThan_17$b21.vhd:1080$70 ($lt): new $alu
  creating $alu cell for $verific$LessThan_17$b21.vhd:1080$70: $auto$alumacc.cc:485:replace_alu$1744
  creating $alu cell for $verific$LessThan_16$b21.vhd:1080$69: $auto$alumacc.cc:485:replace_alu$1749
  creating $alu cell for $verific$LessThan_12$b21.vhd:1079$65: $auto$alumacc.cc:485:replace_alu$1754
  creating $alu cell for $verific$LessThan_11$b21.vhd:1079$64: $auto$alumacc.cc:485:replace_alu$1759
  creating $alu cell for $flatten\P2.$verific$LessThan_87$b21.vhd:665$976: $auto$alumacc.cc:485:replace_alu$1764
  creating $alu cell for $flatten\P2.$verific$LessThan_83$b21.vhd:662$971: $auto$alumacc.cc:485:replace_alu$1775
  creating $alu cell for $flatten\P2.$verific$LessThan_68$b21.vhd:632$965, $flatten\P2.$verific$LessThan_78$b21.vhd:652$969: $auto$alumacc.cc:485:replace_alu$1786
  creating $alu cell for $flatten\P2.$verific$LessThan_14$b21.vhd:597$911: $auto$alumacc.cc:485:replace_alu$1797
  creating $alu cell for $flatten\P1.$verific$LessThan_87$b21.vhd:155$456: $auto$alumacc.cc:485:replace_alu$1802
  creating $alu cell for $flatten\P1.$verific$LessThan_83$b21.vhd:152$451: $auto$alumacc.cc:485:replace_alu$1807
  creating $alu cell for $flatten\P1.$verific$LessThan_68$b21.vhd:122$445, $flatten\P1.$verific$LessThan_78$b21.vhd:142$449: $auto$alumacc.cc:485:replace_alu$1818
  creating $alu cell for $flatten\P1.$verific$LessThan_14$b21.vhd:87$391: $auto$alumacc.cc:485:replace_alu$1829
  creating $alu cell for $flatten\P1.$verific$add_21$b21.vhd:90$398: $auto$alumacc.cc:485:replace_alu$1834
  creating $alu cell for $flatten\P1.$verific$add_26$b21.vhd:92$405: $auto$alumacc.cc:485:replace_alu$1837
  creating $alu cell for $flatten\P1.$verific$add_283$b21.vhd:322$494: $auto$alumacc.cc:485:replace_alu$1840
  creating $alu cell for $flatten\P1.$verific$add_31$b21.vhd:94$412: $auto$alumacc.cc:485:replace_alu$1843
  creating $alu cell for $flatten\P1.$verific$add_36$b21.vhd:96$419: $auto$alumacc.cc:485:replace_alu$1846
  creating $alu cell for $flatten\P1.$verific$add_39$b21.vhd:99$425: $auto$alumacc.cc:485:replace_alu$1849
  creating $alu cell for $flatten\P1.$verific$add_44$b21.vhd:100$429: $auto$alumacc.cc:485:replace_alu$1852
  creating $alu cell for $flatten\P1.$verific$add_570$b21.vhd:470$501: $auto$alumacc.cc:485:replace_alu$1855
  creating $alu cell for $flatten\P1.$verific$add_56$b21.vhd:114$437: $auto$alumacc.cc:485:replace_alu$1858
  creating $alu cell for $flatten\P1.$verific$add_662$b21.vhd:497$521: $auto$alumacc.cc:485:replace_alu$1861
  creating $alu cell for $flatten\P1.$verific$add_61$b21.vhd:117$439: $auto$alumacc.cc:485:replace_alu$1864
  creating $alu cell for $flatten\P1.$verific$add_664$b21.vhd:498$523: $auto$alumacc.cc:485:replace_alu$1867
  creating $alu cell for $flatten\P1.$verific$sub_168$b21.vhd:247$483: $auto$alumacc.cc:485:replace_alu$1870
  creating $alu cell for $flatten\P1.$verific$sub_365$b21.vhd:362$496: $auto$alumacc.cc:485:replace_alu$1873
  creating $alu cell for $flatten\P1.$verific$sub_84$b21.vhd:153$452: $auto$alumacc.cc:485:replace_alu$1876
  creating $alu cell for $flatten\P1.$verific$unary_minus_15$b21.vhd:88$392: $auto$alumacc.cc:485:replace_alu$1879
  creating $alu cell for $flatten\P2.$verific$add_21$b21.vhd:600$918: $auto$alumacc.cc:485:replace_alu$1882
  creating $alu cell for $flatten\P2.$verific$add_26$b21.vhd:602$925: $auto$alumacc.cc:485:replace_alu$1885
  creating $alu cell for $flatten\P2.$verific$add_283$b21.vhd:832$1014: $auto$alumacc.cc:485:replace_alu$1888
  creating $alu cell for $flatten\P2.$verific$add_31$b21.vhd:604$932: $auto$alumacc.cc:485:replace_alu$1891
  creating $alu cell for $flatten\P2.$verific$add_36$b21.vhd:606$939: $auto$alumacc.cc:485:replace_alu$1894
  creating $alu cell for $flatten\P2.$verific$add_39$b21.vhd:609$945: $auto$alumacc.cc:485:replace_alu$1897
  creating $alu cell for $flatten\P2.$verific$add_44$b21.vhd:610$949: $auto$alumacc.cc:485:replace_alu$1900
  creating $alu cell for $flatten\P2.$verific$add_570$b21.vhd:980$1021: $auto$alumacc.cc:485:replace_alu$1903
  creating $alu cell for $flatten\P2.$verific$add_56$b21.vhd:624$957: $auto$alumacc.cc:485:replace_alu$1906
  creating $alu cell for $flatten\P2.$verific$add_662$b21.vhd:1007$1042: $auto$alumacc.cc:485:replace_alu$1909
  creating $alu cell for $flatten\P2.$verific$add_61$b21.vhd:627$959: $auto$alumacc.cc:485:replace_alu$1912
  creating $alu cell for $flatten\P2.$verific$add_664$b21.vhd:1008$1045: $auto$alumacc.cc:485:replace_alu$1915
  creating $alu cell for $flatten\P2.$verific$sub_168$b21.vhd:757$1003: $auto$alumacc.cc:485:replace_alu$1918
  creating $alu cell for $flatten\P2.$verific$sub_365$b21.vhd:872$1016: $auto$alumacc.cc:485:replace_alu$1921
  creating $alu cell for $flatten\P2.$verific$sub_84$b21.vhd:663$972: $auto$alumacc.cc:485:replace_alu$1924
  creating $alu cell for $flatten\P2.$verific$unary_minus_15$b21.vhd:598$912: $auto$alumacc.cc:485:replace_alu$1927
  creating $alu cell for $verific$add_24$b21.vhd:1081$74: $auto$alumacc.cc:485:replace_alu$1930
  creating $alu cell for $verific$add_3$b21.vhd:1071$56: $auto$alumacc.cc:485:replace_alu$1933
  creating $alu cell for $verific$add_30$b21.vhd:1085$76: $auto$alumacc.cc:485:replace_alu$1936
  created 47 $alu and 1 $macc cells.

19. Executing OPT pass (performing simple optimizations).

19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b21.
<suppressed ~10 debug messages>

19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b21'.
Removed a total of 0 cells.

19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b21..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~30 debug messages>

19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b21.
Performed a total of 0 changes.

19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b21'.
Removed a total of 0 cells.

19.6. Executing OPT_DFF pass (perform DFF optimizations).

19.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b21..
Removed 4 unused cells and 24 unused wires.
<suppressed ~5 debug messages>

19.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module b21.

19.9. Rerunning OPT passes. (Maybe there is more to do..)

19.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b21..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~30 debug messages>

19.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b21.
Performed a total of 0 changes.

19.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b21'.
Removed a total of 0 cells.

19.13. Executing OPT_DFF pass (perform DFF optimizations).

19.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b21..

19.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module b21.

19.16. Finished OPT passes. (There is nothing left to do.)

20. Executing MEMORY pass.

20.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

20.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

20.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

20.4. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

20.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b21..

20.6. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

20.7. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

20.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b21..

20.9. Executing MEMORY_COLLECT pass (generating $mem cells).

21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b21..

22. Executing OPT_EXPR pass (perform const folding).
Optimizing module b21.
<suppressed ~4 debug messages>

23. Executing SIMPLEMAP pass (map simple cells to gate primitives).
Mapping b21.$auto$alumacc.cc:67:get_gt$1771 ($or).
Mapping b21.$auto$alumacc.cc:67:get_gt$1782 ($or).
Mapping b21.$auto$alumacc.cc:67:get_gt$1793 ($or).
Mapping b21.$auto$alumacc.cc:67:get_gt$1814 ($or).
Mapping b21.$auto$alumacc.cc:67:get_gt$1825 ($or).
Mapping b21.$auto$alumacc.cc:68:get_gt$1773 ($not).
Mapping b21.$auto$alumacc.cc:68:get_gt$1795 ($not).
Mapping b21.$auto$alumacc.cc:68:get_gt$1827 ($not).
Mapping b21.$auto$alumacc.cc:75:get_eq$1769 ($reduce_and).
Mapping b21.$auto$alumacc.cc:75:get_eq$1780 ($reduce_and).
Mapping b21.$auto$alumacc.cc:75:get_eq$1791 ($reduce_and).
Mapping b21.$auto$alumacc.cc:75:get_eq$1812 ($reduce_and).
Mapping b21.$auto$alumacc.cc:75:get_eq$1823 ($reduce_and).
Mapping b21.$auto$alumacc.cc:89:get_cf$1747 ($not).
Mapping b21.$auto$alumacc.cc:89:get_cf$1752 ($not).
Mapping b21.$auto$alumacc.cc:89:get_cf$1757 ($not).
Mapping b21.$auto$alumacc.cc:89:get_cf$1762 ($not).
Mapping b21.$auto$alumacc.cc:89:get_cf$1767 ($not).
Mapping b21.$auto$alumacc.cc:89:get_cf$1778 ($not).
Mapping b21.$auto$alumacc.cc:89:get_cf$1789 ($not).
Mapping b21.$auto$alumacc.cc:89:get_cf$1805 ($not).
Mapping b21.$auto$alumacc.cc:89:get_cf$1810 ($not).
Mapping b21.$auto$alumacc.cc:89:get_cf$1821 ($not).
Mapping b21.$auto$ff.cc:262:slice$1553 ($adffe).
Mapping b21.$auto$ff.cc:262:slice$1560 ($adffe).
Mapping b21.$auto$ff.cc:262:slice$1561 ($adffe).
Mapping b21.$auto$ff.cc:262:slice$1568 ($adffe).
Mapping b21.$auto$ff.cc:262:slice$1575 ($adffe).
Mapping b21.$auto$ff.cc:262:slice$1582 ($adffe).
Mapping b21.$auto$ff.cc:262:slice$1587 ($adffe).
Mapping b21.$auto$ff.cc:262:slice$1592 ($adffe).
Mapping b21.$auto$ff.cc:262:slice$1599 ($adffe).
Mapping b21.$auto$ff.cc:262:slice$1600 ($adffe).
Mapping b21.$auto$ff.cc:262:slice$1607 ($adffe).
Mapping b21.$auto$ff.cc:262:slice$1614 ($adffe).
Mapping b21.$auto$ff.cc:262:slice$1621 ($adffe).
Mapping b21.$auto$ff.cc:262:slice$1626 ($adffe).
Mapping b21.$auto$ff.cc:262:slice$1631 ($adff).
Mapping b21.$auto$ff.cc:262:slice$1632 ($adff).
Mapping b21.$auto$fsm_map.cc:105:implement_pattern_cache$1286 ($reduce_or).
Mapping b21.$auto$fsm_map.cc:105:implement_pattern_cache$1335 ($reduce_or).
Mapping b21.$auto$fsm_map.cc:105:implement_pattern_cache$1500 ($reduce_or).
Mapping b21.$auto$fsm_map.cc:105:implement_pattern_cache$1549 ($reduce_or).
Mapping b21.$auto$fsm_map.cc:121:implement_pattern_cache$1134 ($and).
Mapping b21.$auto$fsm_map.cc:121:implement_pattern_cache$1138 ($and).
Mapping b21.$auto$fsm_map.cc:121:implement_pattern_cache$1142 ($and).
Mapping b21.$auto$fsm_map.cc:121:implement_pattern_cache$1146 ($and).
Mapping b21.$auto$fsm_map.cc:121:implement_pattern_cache$1150 ($and).
Mapping b21.$auto$fsm_map.cc:121:implement_pattern_cache$1154 ($and).
Mapping b21.$auto$fsm_map.cc:121:implement_pattern_cache$1159 ($and).
Mapping b21.$auto$fsm_map.cc:121:implement_pattern_cache$1173 ($and).
Mapping b21.$auto$fsm_map.cc:121:implement_pattern_cache$1177 ($and).
Mapping b21.$auto$fsm_map.cc:121:implement_pattern_cache$1181 ($and).
Mapping b21.$auto$fsm_map.cc:121:implement_pattern_cache$1186 ($and).
Mapping b21.$auto$fsm_map.cc:121:implement_pattern_cache$1200 ($and).
Mapping b21.$auto$fsm_map.cc:121:implement_pattern_cache$1204 ($and).
Mapping b21.$auto$fsm_map.cc:121:implement_pattern_cache$1208 ($and).
Mapping b21.$auto$fsm_map.cc:121:implement_pattern_cache$1213 ($and).
Mapping b21.$auto$fsm_map.cc:121:implement_pattern_cache$1231 ($and).
Mapping b21.$auto$fsm_map.cc:121:implement_pattern_cache$1235 ($and).
Mapping b21.$auto$fsm_map.cc:121:implement_pattern_cache$1239 ($and).
Mapping b21.$auto$fsm_map.cc:121:implement_pattern_cache$1246 ($and).
Mapping b21.$auto$fsm_map.cc:121:implement_pattern_cache$1254 ($and).
Mapping b21.$auto$fsm_map.cc:121:implement_pattern_cache$1266 ($and).
Mapping b21.$auto$fsm_map.cc:121:implement_pattern_cache$1276 ($and).
Mapping b21.$auto$fsm_map.cc:121:implement_pattern_cache$1282 ($and).
Mapping b21.$auto$fsm_map.cc:121:implement_pattern_cache$1288 ($and).
Mapping b21.$auto$fsm_map.cc:121:implement_pattern_cache$1295 ($and).
Mapping b21.$auto$fsm_map.cc:121:implement_pattern_cache$1303 ($and).
Mapping b21.$auto$fsm_map.cc:121:implement_pattern_cache$1309 ($and).
Mapping b21.$auto$fsm_map.cc:121:implement_pattern_cache$1315 ($and).
Mapping b21.$auto$fsm_map.cc:121:implement_pattern_cache$1319 ($and).
Mapping b21.$auto$fsm_map.cc:121:implement_pattern_cache$1325 ($and).
Mapping b21.$auto$fsm_map.cc:121:implement_pattern_cache$1331 ($and).
Mapping b21.$auto$fsm_map.cc:121:implement_pattern_cache$1337 ($and).
Mapping b21.$auto$fsm_map.cc:121:implement_pattern_cache$1348 ($and).
Mapping b21.$auto$fsm_map.cc:121:implement_pattern_cache$1352 ($and).
Mapping b21.$auto$fsm_map.cc:121:implement_pattern_cache$1356 ($and).
Mapping b21.$auto$fsm_map.cc:121:implement_pattern_cache$1360 ($and).
Mapping b21.$auto$fsm_map.cc:121:implement_pattern_cache$1364 ($and).
Mapping b21.$auto$fsm_map.cc:121:implement_pattern_cache$1368 ($and).
Mapping b21.$auto$fsm_map.cc:121:implement_pattern_cache$1373 ($and).
Mapping b21.$auto$fsm_map.cc:121:implement_pattern_cache$1387 ($and).
Mapping b21.$auto$fsm_map.cc:121:implement_pattern_cache$1391 ($and).
Mapping b21.$auto$fsm_map.cc:121:implement_pattern_cache$1395 ($and).
Mapping b21.$auto$fsm_map.cc:121:implement_pattern_cache$1400 ($and).
Mapping b21.$auto$fsm_map.cc:121:implement_pattern_cache$1410 ($and).
Mapping b21.$auto$fsm_map.cc:121:implement_pattern_cache$1414 ($and).
Mapping b21.$auto$fsm_map.cc:121:implement_pattern_cache$1418 ($and).
Mapping b21.$auto$fsm_map.cc:121:implement_pattern_cache$1422 ($and).
Mapping b21.$auto$fsm_map.cc:121:implement_pattern_cache$1427 ($and).
Mapping b21.$auto$fsm_map.cc:121:implement_pattern_cache$1441 ($and).
Mapping b21.$auto$fsm_map.cc:121:implement_pattern_cache$1445 ($and).
Mapping b21.$auto$fsm_map.cc:121:implement_pattern_cache$1449 ($and).
Mapping b21.$auto$fsm_map.cc:121:implement_pattern_cache$1453 ($and).
Mapping b21.$auto$fsm_map.cc:121:implement_pattern_cache$1460 ($and).
Mapping b21.$auto$fsm_map.cc:121:implement_pattern_cache$1468 ($and).
Mapping b21.$auto$fsm_map.cc:121:implement_pattern_cache$1474 ($and).
Mapping b21.$auto$fsm_map.cc:121:implement_pattern_cache$1490 ($and).
Mapping b21.$auto$fsm_map.cc:121:implement_pattern_cache$1496 ($and).
Mapping b21.$auto$fsm_map.cc:121:implement_pattern_cache$1502 ($and).
Mapping b21.$auto$fsm_map.cc:121:implement_pattern_cache$1509 ($and).
Mapping b21.$auto$fsm_map.cc:121:implement_pattern_cache$1517 ($and).
Mapping b21.$auto$fsm_map.cc:121:implement_pattern_cache$1529 ($and).
Mapping b21.$auto$fsm_map.cc:121:implement_pattern_cache$1539 ($and).
Mapping b21.$auto$fsm_map.cc:121:implement_pattern_cache$1545 ($and).
Mapping b21.$auto$fsm_map.cc:121:implement_pattern_cache$1551 ($and).
Mapping b21.$auto$fsm_map.cc:144:implement_pattern_cache$1155 ($reduce_or).
Mapping b21.$auto$fsm_map.cc:144:implement_pattern_cache$1182 ($reduce_or).
Mapping b21.$auto$fsm_map.cc:144:implement_pattern_cache$1209 ($reduce_or).
Mapping b21.$auto$fsm_map.cc:144:implement_pattern_cache$1240 ($reduce_or).
Mapping b21.$auto$fsm_map.cc:144:implement_pattern_cache$1289 ($reduce_or).
Mapping b21.$auto$fsm_map.cc:144:implement_pattern_cache$1338 ($reduce_or).
Mapping b21.$auto$fsm_map.cc:144:implement_pattern_cache$1369 ($reduce_or).
Mapping b21.$auto$fsm_map.cc:144:implement_pattern_cache$1396 ($reduce_or).
Mapping b21.$auto$fsm_map.cc:144:implement_pattern_cache$1423 ($reduce_or).
Mapping b21.$auto$fsm_map.cc:144:implement_pattern_cache$1454 ($reduce_or).
Mapping b21.$auto$fsm_map.cc:144:implement_pattern_cache$1503 ($reduce_or).
Mapping b21.$auto$fsm_map.cc:144:implement_pattern_cache$1552 ($reduce_or).
Mapping b21.$auto$fsm_map.cc:172:map_fsm$1126 ($adff).
Mapping b21.$auto$fsm_map.cc:172:map_fsm$1340 ($adff).
Mapping b21.$auto$fsm_map.cc:77:implement_pattern_cache$1130 ($eq).
Mapping b21.$auto$fsm_map.cc:77:implement_pattern_cache$1132 ($eq).
Mapping b21.$auto$fsm_map.cc:77:implement_pattern_cache$1248 ($eq).
Mapping b21.$auto$fsm_map.cc:77:implement_pattern_cache$1291 ($eq).
Mapping b21.$auto$fsm_map.cc:77:implement_pattern_cache$1297 ($eq).
Mapping b21.$auto$fsm_map.cc:77:implement_pattern_cache$1299 ($eq).
Mapping b21.$auto$fsm_map.cc:77:implement_pattern_cache$1301 ($eq).
Mapping b21.$auto$fsm_map.cc:77:implement_pattern_cache$1305 ($eq).
Mapping b21.$auto$fsm_map.cc:77:implement_pattern_cache$1307 ($eq).
Mapping b21.$auto$fsm_map.cc:77:implement_pattern_cache$1311 ($eq).
Mapping b21.$auto$fsm_map.cc:77:implement_pattern_cache$1313 ($eq).
Mapping b21.$auto$fsm_map.cc:77:implement_pattern_cache$1317 ($eq).
Mapping b21.$auto$fsm_map.cc:77:implement_pattern_cache$1321 ($eq).
Mapping b21.$auto$fsm_map.cc:77:implement_pattern_cache$1327 ($eq).
Mapping b21.$auto$fsm_map.cc:77:implement_pattern_cache$1333 ($not).
Mapping b21.$auto$fsm_map.cc:77:implement_pattern_cache$1344 ($eq).
Mapping b21.$auto$fsm_map.cc:77:implement_pattern_cache$1346 ($eq).
Mapping b21.$auto$fsm_map.cc:77:implement_pattern_cache$1462 ($eq).
Mapping b21.$auto$fsm_map.cc:77:implement_pattern_cache$1505 ($eq).
Mapping b21.$auto$fsm_map.cc:77:implement_pattern_cache$1511 ($eq).
Mapping b21.$auto$fsm_map.cc:77:implement_pattern_cache$1513 ($eq).
Mapping b21.$auto$fsm_map.cc:77:implement_pattern_cache$1515 ($eq).
Mapping b21.$auto$fsm_map.cc:77:implement_pattern_cache$1519 ($eq).
Mapping b21.$auto$fsm_map.cc:77:implement_pattern_cache$1521 ($eq).
Mapping b21.$auto$fsm_map.cc:77:implement_pattern_cache$1525 ($eq).
Mapping b21.$auto$fsm_map.cc:77:implement_pattern_cache$1527 ($eq).
Mapping b21.$auto$fsm_map.cc:77:implement_pattern_cache$1531 ($eq).
Mapping b21.$auto$fsm_map.cc:77:implement_pattern_cache$1535 ($eq).
Mapping b21.$auto$fsm_map.cc:77:implement_pattern_cache$1541 ($eq).
Mapping b21.$auto$fsm_map.cc:77:implement_pattern_cache$1547 ($not).
Mapping b21.$auto$opt_dff.cc:195:make_patterns_logic$1589 ($ne).
Mapping b21.$auto$opt_dff.cc:195:make_patterns_logic$1628 ($ne).
Mapping b21.$auto$opt_dff.cc:210:make_patterns_logic$1554 ($not).
Mapping b21.$auto$opt_dff.cc:210:make_patterns_logic$1556 ($not).
Mapping b21.$auto$opt_dff.cc:210:make_patterns_logic$1593 ($not).
Mapping b21.$auto$opt_dff.cc:210:make_patterns_logic$1595 ($not).
Mapping b21.$auto$opt_dff.cc:220:make_patterns_logic$1559 ($reduce_and).
Mapping b21.$auto$opt_dff.cc:220:make_patterns_logic$1586 ($reduce_and).
Mapping b21.$auto$opt_dff.cc:220:make_patterns_logic$1591 ($reduce_and).
Mapping b21.$auto$opt_dff.cc:220:make_patterns_logic$1598 ($reduce_and).
Mapping b21.$auto$opt_dff.cc:220:make_patterns_logic$1625 ($reduce_and).
Mapping b21.$auto$opt_dff.cc:220:make_patterns_logic$1630 ($reduce_and).
Mapping b21.$auto$opt_reduce.cc:128:opt_pmux$1105 ($reduce_or).
Mapping b21.$auto$opt_reduce.cc:128:opt_pmux$1107 ($reduce_or).
Mapping b21.$auto$opt_reduce.cc:128:opt_pmux$1109 ($reduce_or).
Mapping b21.$auto$opt_reduce.cc:128:opt_pmux$1111 ($reduce_or).
Mapping b21.$auto$opt_reduce.cc:128:opt_pmux$1113 ($reduce_or).
Mapping b21.$auto$opt_reduce.cc:128:opt_pmux$1115 ($reduce_or).
Mapping b21.$auto$opt_reduce.cc:128:opt_pmux$1117 ($reduce_or).
Mapping b21.$auto$opt_reduce.cc:128:opt_pmux$1119 ($reduce_or).
Mapping b21.$auto$pmuxtree.cc:65:recursive_mux_generator$1671 ($mux).
Mapping b21.$auto$pmuxtree.cc:65:recursive_mux_generator$1673 ($mux).
Mapping b21.$auto$pmuxtree.cc:65:recursive_mux_generator$1679 ($mux).
Mapping b21.$auto$pmuxtree.cc:65:recursive_mux_generator$1681 ($mux).
Mapping b21.$auto$pmuxtree.cc:65:recursive_mux_generator$1687 ($mux).
Mapping b21.$auto$pmuxtree.cc:65:recursive_mux_generator$1689 ($mux).
Mapping b21.$auto$pmuxtree.cc:65:recursive_mux_generator$1695 ($mux).
Mapping b21.$auto$pmuxtree.cc:65:recursive_mux_generator$1697 ($mux).
Mapping b21.$auto$pmuxtree.cc:65:recursive_mux_generator$1703 ($mux).
Mapping b21.$auto$pmuxtree.cc:65:recursive_mux_generator$1705 ($mux).
Mapping b21.$auto$pmuxtree.cc:65:recursive_mux_generator$1711 ($mux).
Mapping b21.$auto$pmuxtree.cc:65:recursive_mux_generator$1713 ($mux).
Mapping b21.$auto$pmuxtree.cc:65:recursive_mux_generator$1719 ($mux).
Mapping b21.$auto$pmuxtree.cc:65:recursive_mux_generator$1721 ($mux).
Mapping b21.$auto$pmuxtree.cc:65:recursive_mux_generator$1727 ($mux).
Mapping b21.$auto$pmuxtree.cc:65:recursive_mux_generator$1729 ($mux).
Mapping b21.$flatten\P1.$verific$IR_reg$b21.vhd:509$568 ($adff).
Mapping b21.$flatten\P1.$verific$Mux_132$b21.vhd:214$466 ($bmux).
Mapping b21.$flatten\P1.$verific$Mux_637$b21.vhd:483$508 ($bmux).
Mapping b21.$flatten\P1.$verific$Mux_652$b21.vhd:492$514 ($bmux).
Mapping b21.$flatten\P1.$verific$Mux_658$b21.vhd:492$520 ($bmux).
Mapping b21.$flatten\P1.$verific$Mux_67$b21.vhd:120$444 ($bmux).
Mapping b21.$flatten\P1.$verific$addr_reg$b21.vhd:509$575 ($adff).
Mapping b21.$flatten\P1.$verific$equal_134$b21.vhd:216$467 ($eq).
Mapping b21.$flatten\P1.$verific$equal_136$b21.vhd:217$469 ($eq).
Mapping b21.$flatten\P1.$verific$equal_139$b21.vhd:221$471 ($eq).
Mapping b21.$flatten\P1.$verific$equal_141$b21.vhd:225$473 ($eq).
Mapping b21.$flatten\P1.$verific$equal_142$b21.vhd:227$474 ($eq).
Mapping b21.$flatten\P1.$verific$equal_143$b21.vhd:228$475 ($eq).
Mapping b21.$flatten\P1.$verific$equal_144$b21.vhd:229$476 ($logic_not).
Mapping b21.$flatten\P1.$verific$equal_176$b21.vhd:247$485 ($logic_not).
Mapping b21.$flatten\P1.$verific$equal_177$b21.vhd:248$486 ($eq).
Mapping b21.$flatten\P1.$verific$equal_178$b21.vhd:249$487 ($eq).
Mapping b21.$flatten\P1.$verific$equal_179$b21.vhd:250$488 ($eq).
Mapping b21.$flatten\P1.$verific$equal_73$b21.vhd:132$447 ($eq).
Mapping b21.$flatten\P1.$verific$i102$b21.vhd:173$459 ($or).
Mapping b21.$flatten\P1.$verific$i105$b21.vhd:178$460 ($or).
Mapping b21.$flatten\P1.$verific$i109$b21.vhd:183$461 ($or).
Mapping b21.$flatten\P1.$verific$i113$b21.vhd:188$462 ($or).
Mapping b21.$flatten\P1.$verific$i116$b21.vhd:193$463 ($or).
Mapping b21.$flatten\P1.$verific$i123$b21.vhd:201$464 ($or).
Mapping b21.$flatten\P1.$verific$i131$b21.vhd:209$465 ($or).
Mapping b21.$flatten\P1.$verific$i20$b21.vhd:90$397 ($and).
Mapping b21.$flatten\P1.$verific$i25$b21.vhd:92$404 ($and).
Mapping b21.$flatten\P1.$verific$i30$b21.vhd:94$411 ($and).
Mapping b21.$flatten\P1.$verific$i35$b21.vhd:96$418 ($and).
Mapping b21.$flatten\P1.$verific$i43$b21.vhd:100$428 ($and).
Mapping b21.$flatten\P1.$verific$i569$b21.vhd:470$500 ($and).
Mapping b21.$flatten\P1.$verific$i675$b21.vhd:505$533 ($mux).
Mapping b21.$flatten\P1.$verific$i691$b21.vhd:506$545 ($mux).
Mapping b21.$flatten\P1.$verific$i692$b21.vhd:506$546 ($mux).
Mapping b21.$flatten\P1.$verific$i700$b21.vhd:506$553 ($mux).
Mapping b21.$flatten\P1.$verific$i704$b21.vhd:508$557 ($mux).
Mapping b21.$flatten\P1.$verific$i723$b21.vhd:508$566 ($mux).
Mapping b21.$flatten\P1.$verific$i77$b21.vhd:137$448 ($not).
Mapping b21.$flatten\P1.$verific$i98$b21.vhd:168$458 ($or).
Mapping b21.$flatten\P1.$verific$mux_138$b21.vhd:220$470 ($mux).
Mapping b21.$flatten\P1.$verific$mux_140$b21.vhd:224$472 ($mux).
Mapping b21.$flatten\P1.$verific$mux_145$b21.vhd:230$477 ($mux).
Mapping b21.$flatten\P1.$verific$mux_146$b21.vhd:230$478 ($mux).
Mapping b21.$flatten\P1.$verific$mux_147$b21.vhd:230$479 ($mux).
Mapping b21.$flatten\P1.$verific$mux_148$b21.vhd:230$480 ($mux).
Mapping b21.$flatten\P1.$verific$mux_149$b21.vhd:230$481 ($mux).
Mapping b21.$flatten\P1.$verific$mux_150$b21.vhd:230$482 ($mux).
Mapping b21.$flatten\P1.$verific$mux_17$b21.vhd:89$395 ($mux).
Mapping b21.$flatten\P1.$verific$mux_50$b21.vhd:106$435 ($bmux).
Mapping b21.$flatten\P1.$verific$mux_577$b21.vhd:474$506 ($mux).
Mapping b21.$flatten\P1.$verific$mux_65$b21.vhd:120$442 ($bmux).
Mapping b21.$flatten\P1.$verific$mux_651$b21.vhd:492$513 ($bmux).
Mapping b21.$flatten\P1.$verific$mux_654$b21.vhd:492$516 ($bmux).
Mapping b21.$flatten\P1.$verific$mux_655$b21.vhd:492$517 ($bmux).
Mapping b21.$flatten\P1.$verific$mux_656$b21.vhd:492$518 ($bmux).
Mapping b21.$flatten\P1.$verific$mux_657$b21.vhd:492$519 ($bmux).
Mapping b21.$flatten\P1.$verific$mux_66$b21.vhd:120$443 ($bmux).
Mapping b21.$flatten\P1.$verific$mux_666$b21.vhd:501$525 ($bmux).
Mapping b21.$flatten\P1.$verific$mux_673$b21.vhd:505$532 ($mux).
Mapping b21.$flatten\P1.$verific$mux_679$b21.vhd:505$538 ($mux).
Mapping b21.$flatten\P1.$verific$mux_689$b21.vhd:506$544 ($mux).
Mapping b21.$flatten\P1.$verific$mux_698$b21.vhd:506$552 ($mux).
Mapping b21.$flatten\P1.$verific$mux_702$b21.vhd:508$556 ($mux).
Mapping b21.$flatten\P1.$verific$mux_705$b21.vhd:508$558 ($mux).
Mapping b21.$flatten\P1.$verific$mux_738$b21.vhd:460$582 ($bmux).
Mapping b21.$flatten\P1.$verific$mux_748$b21.vhd:483$509 ($bmux).
Mapping b21.$flatten\P1.$verific$mux_86$b21.vhd:154$455 ($mux).
Mapping b21.$flatten\P1.$verific$rd_reg$b21.vhd:509$576 ($adff).
Mapping b21.$flatten\P1.$verific$reduce_nor_180$b21.vhd:252$489 ($not).
Mapping b21.$flatten\P1.$verific$reduce_nor_180$b21.vhd:252$490 ($reduce_or).
Mapping b21.$flatten\P1.$verific$reduce_or_18$b21.vhd:90$396 ($reduce_or).
Mapping b21.$flatten\P1.$verific$reduce_or_23$b21.vhd:92$403 ($reduce_or).
Mapping b21.$flatten\P1.$verific$reduce_or_28$b21.vhd:94$410 ($reduce_or).
Mapping b21.$flatten\P1.$verific$reduce_or_33$b21.vhd:96$417 ($reduce_or).
Mapping b21.$flatten\P1.$verific$reduce_or_41$b21.vhd:100$427 ($reduce_or).
Mapping b21.$flatten\P1.$verific$state_reg$b21.vhd:509$579 ($adff).
Mapping b21.$flatten\P1.$verific$wr_reg$b21.vhd:509$577 ($adff).
Mapping b21.$flatten\P2.$verific$IR_reg$b21.vhd:1019$1090 ($adff).
Mapping b21.$flatten\P2.$verific$Mux_132$b21.vhd:724$986 ($bmux).
Mapping b21.$flatten\P2.$verific$Mux_637$b21.vhd:993$1028 ($bmux).
Mapping b21.$flatten\P2.$verific$Mux_652$b21.vhd:1002$1034 ($bmux).
Mapping b21.$flatten\P2.$verific$Mux_658$b21.vhd:1002$1040 ($bmux).
Mapping b21.$flatten\P2.$verific$Mux_67$b21.vhd:630$964 ($bmux).
Mapping b21.$flatten\P2.$verific$addr_reg$b21.vhd:1019$1097 ($adff).
Mapping b21.$flatten\P2.$verific$equal_134$b21.vhd:726$987 ($eq).
Mapping b21.$flatten\P2.$verific$equal_136$b21.vhd:727$989 ($eq).
Mapping b21.$flatten\P2.$verific$equal_139$b21.vhd:731$991 ($eq).
Mapping b21.$flatten\P2.$verific$equal_141$b21.vhd:735$993 ($eq).
Mapping b21.$flatten\P2.$verific$equal_142$b21.vhd:737$994 ($eq).
Mapping b21.$flatten\P2.$verific$equal_143$b21.vhd:738$995 ($eq).
Mapping b21.$flatten\P2.$verific$equal_144$b21.vhd:739$996 ($logic_not).
Mapping b21.$flatten\P2.$verific$equal_176$b21.vhd:757$1005 ($logic_not).
Mapping b21.$flatten\P2.$verific$equal_177$b21.vhd:758$1006 ($eq).
Mapping b21.$flatten\P2.$verific$equal_178$b21.vhd:759$1007 ($eq).
Mapping b21.$flatten\P2.$verific$equal_179$b21.vhd:760$1008 ($eq).
Mapping b21.$flatten\P2.$verific$equal_73$b21.vhd:642$967 ($eq).
Mapping b21.$flatten\P2.$verific$i102$b21.vhd:683$979 ($or).
Mapping b21.$flatten\P2.$verific$i105$b21.vhd:688$980 ($or).
Mapping b21.$flatten\P2.$verific$i109$b21.vhd:693$981 ($or).
Mapping b21.$flatten\P2.$verific$i113$b21.vhd:698$982 ($or).
Mapping b21.$flatten\P2.$verific$i116$b21.vhd:703$983 ($or).
Mapping b21.$flatten\P2.$verific$i123$b21.vhd:711$984 ($or).
Mapping b21.$flatten\P2.$verific$i131$b21.vhd:719$985 ($or).
Mapping b21.$flatten\P2.$verific$i20$b21.vhd:600$917 ($and).
Mapping b21.$flatten\P2.$verific$i25$b21.vhd:602$924 ($and).
Mapping b21.$flatten\P2.$verific$i30$b21.vhd:604$931 ($and).
Mapping b21.$flatten\P2.$verific$i35$b21.vhd:606$938 ($and).
Mapping b21.$flatten\P2.$verific$i43$b21.vhd:610$948 ($and).
Mapping b21.$flatten\P2.$verific$i569$b21.vhd:980$1020 ($and).
Mapping b21.$flatten\P2.$verific$i674$b21.vhd:1015$1055 ($mux).
Mapping b21.$flatten\P2.$verific$i690$b21.vhd:1016$1067 ($mux).
Mapping b21.$flatten\P2.$verific$i691$b21.vhd:1016$1068 ($mux).
Mapping b21.$flatten\P2.$verific$i699$b21.vhd:1016$1075 ($mux).
Mapping b21.$flatten\P2.$verific$i703$b21.vhd:1018$1079 ($mux).
Mapping b21.$flatten\P2.$verific$i722$b21.vhd:1018$1088 ($mux).
Mapping b21.$flatten\P2.$verific$i77$b21.vhd:647$968 ($not).
Mapping b21.$flatten\P2.$verific$i98$b21.vhd:678$978 ($or).
Mapping b21.$flatten\P2.$verific$mux_138$b21.vhd:730$990 ($mux).
Mapping b21.$flatten\P2.$verific$mux_140$b21.vhd:734$992 ($mux).
Mapping b21.$flatten\P2.$verific$mux_145$b21.vhd:740$997 ($mux).
Mapping b21.$flatten\P2.$verific$mux_146$b21.vhd:740$998 ($mux).
Mapping b21.$flatten\P2.$verific$mux_147$b21.vhd:740$999 ($mux).
Mapping b21.$flatten\P2.$verific$mux_148$b21.vhd:740$1000 ($mux).
Mapping b21.$flatten\P2.$verific$mux_149$b21.vhd:740$1001 ($mux).
Mapping b21.$flatten\P2.$verific$mux_150$b21.vhd:740$1002 ($mux).
Mapping b21.$flatten\P2.$verific$mux_17$b21.vhd:599$915 ($mux).
Mapping b21.$flatten\P2.$verific$mux_50$b21.vhd:616$955 ($bmux).
Mapping b21.$flatten\P2.$verific$mux_577$b21.vhd:984$1026 ($mux).
Mapping b21.$flatten\P2.$verific$mux_65$b21.vhd:630$962 ($bmux).
Mapping b21.$flatten\P2.$verific$mux_651$b21.vhd:1002$1033 ($bmux).
Mapping b21.$flatten\P2.$verific$mux_654$b21.vhd:1002$1036 ($bmux).
Mapping b21.$flatten\P2.$verific$mux_655$b21.vhd:1002$1037 ($bmux).
Mapping b21.$flatten\P2.$verific$mux_656$b21.vhd:1002$1038 ($bmux).
Mapping b21.$flatten\P2.$verific$mux_657$b21.vhd:1002$1039 ($bmux).
Mapping b21.$flatten\P2.$verific$mux_66$b21.vhd:630$963 ($bmux).
Mapping b21.$flatten\P2.$verific$mux_666$b21.vhd:1009$1048 ($bmux).
Mapping b21.$flatten\P2.$verific$mux_672$b21.vhd:1015$1054 ($mux).
Mapping b21.$flatten\P2.$verific$mux_678$b21.vhd:1015$1060 ($mux).
Mapping b21.$flatten\P2.$verific$mux_688$b21.vhd:1016$1066 ($mux).
Mapping b21.$flatten\P2.$verific$mux_697$b21.vhd:1016$1074 ($mux).
Mapping b21.$flatten\P2.$verific$mux_701$b21.vhd:1018$1078 ($mux).
Mapping b21.$flatten\P2.$verific$mux_704$b21.vhd:1018$1080 ($mux).
Mapping b21.$flatten\P2.$verific$mux_738$b21.vhd:970$1041 ($bmux).
Mapping b21.$flatten\P2.$verific$mux_748$b21.vhd:993$1029 ($bmux).
Mapping b21.$flatten\P2.$verific$mux_86$b21.vhd:664$975 ($mux).
Mapping b21.$flatten\P2.$verific$rd_reg$b21.vhd:1019$1098 ($adff).
Mapping b21.$flatten\P2.$verific$reduce_nor_180$b21.vhd:762$1009 ($not).
Mapping b21.$flatten\P2.$verific$reduce_nor_180$b21.vhd:762$1010 ($reduce_or).
Mapping b21.$flatten\P2.$verific$reduce_or_18$b21.vhd:600$916 ($reduce_or).
Mapping b21.$flatten\P2.$verific$reduce_or_23$b21.vhd:602$923 ($reduce_or).
Mapping b21.$flatten\P2.$verific$reduce_or_28$b21.vhd:604$930 ($reduce_or).
Mapping b21.$flatten\P2.$verific$reduce_or_33$b21.vhd:606$937 ($reduce_or).
Mapping b21.$flatten\P2.$verific$reduce_or_41$b21.vhd:610$947 ($reduce_or).
Mapping b21.$flatten\P2.$verific$state_reg$b21.vhd:1019$1101 ($adff).
Mapping b21.$flatten\P2.$verific$wr_reg$b21.vhd:1019$1099 ($adff).
Mapping b21.$verific$i10$b21.vhd:1075$62 ($xor).
Mapping b21.$verific$i14$b21.vhd:1079$66 ($not).
Mapping b21.$verific$i15$b21.vhd:1079$67 ($and).
Mapping b21.$verific$i16$b21.vhd:1079$68 ($and).
Mapping b21.$verific$i20$b21.vhd:1080$71 ($and).
Mapping b21.$verific$i21$b21.vhd:1080$72 ($and).
Mapping b21.$verific$i22$b21.vhd:1080$73 ($or).
Mapping b21.$verific$i6$b21.vhd:1074$58 ($not).
Mapping b21.$verific$i7$b21.vhd:1074$59 ($xor).
Mapping b21.$verific$i9$b21.vhd:1075$61 ($not).
Mapping b21.$verific$mux_32$b21.vhd:1086$77 ($mux).
Mapping b21.$verific$mux_33$b21.vhd:1086$78 ($mux).

24. Executing OPT_EXPR pass (perform const folding).
Optimizing module b21.
<suppressed ~4246 debug messages>

25. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b21'.
<suppressed ~7059 debug messages>
Removed a total of 2353 cells.

26. Executing OPT_DFF pass (perform DFF optimizations).

27. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b21..
Removed 180 unused cells and 401 unused wires.
<suppressed ~181 debug messages>

28. Executing OPT pass (performing simple optimizations).

28.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b21.
<suppressed ~394 debug messages>

28.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b21'.
Removed a total of 0 cells.

28.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b21..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

28.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b21.
Performed a total of 0 changes.

28.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b21'.
Removed a total of 0 cells.

28.6. Executing OPT_DFF pass (perform DFF optimizations).

28.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b21..
Removed 0 unused cells and 4 unused wires.
<suppressed ~1 debug messages>

28.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module b21.

28.9. Rerunning OPT passes. (Maybe there is more to do..)

28.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b21..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

28.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b21.
Performed a total of 0 changes.

28.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b21'.
Removed a total of 0 cells.

28.13. Executing OPT_DFF pass (perform DFF optimizations).

28.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b21..

28.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module b21.

28.16. Finished OPT passes. (There is nothing left to do.)

29. Executing OPT pass (performing simple optimizations).

29.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b21.
<suppressed ~146 debug messages>

29.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b21'.
<suppressed ~114 debug messages>
Removed a total of 38 cells.

29.3. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $auto$ff.cc:262:slice$5951 ($_DFF_PP0_) from module b21 (D = $flatten\P1.$verific$n11246$371 [5], Q = \P1.addr [5]).
Adding EN signal on $auto$ff.cc:262:slice$5950 ($_DFF_PP0_) from module b21 (D = $flatten\P1.$verific$n11246$371 [4], Q = \P1.addr [4]).
Adding EN signal on $auto$ff.cc:262:slice$5949 ($_DFF_PP0_) from module b21 (D = $flatten\P1.$verific$n11246$371 [3], Q = \P1.addr [3]).
Adding EN signal on $auto$ff.cc:262:slice$5948 ($_DFF_PP0_) from module b21 (D = $flatten\P1.$verific$n11246$371 [2], Q = \P1.addr [2]).
Adding EN signal on $auto$ff.cc:262:slice$2452 ($_DFFE_PP0P_) from module b21 (D = $flatten\P1.$verific$n10979$199, Q = \P1.B).
Adding EN signal on $auto$ff.cc:262:slice$2419 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$7583 [31], Q = \P1.reg0 [31]).
Adding EN signal on $auto$ff.cc:262:slice$2418 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$7583 [30], Q = \P1.reg0 [30]).
Adding EN signal on $auto$ff.cc:262:slice$2417 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$7583 [29], Q = \P1.reg0 [29]).
Adding EN signal on $auto$ff.cc:262:slice$2416 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$7583 [28], Q = \P1.reg0 [28]).
Adding EN signal on $auto$ff.cc:262:slice$2415 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$7583 [27], Q = \P1.reg0 [27]).
Adding EN signal on $auto$ff.cc:262:slice$2414 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$7583 [26], Q = \P1.reg0 [26]).
Adding EN signal on $auto$ff.cc:262:slice$2413 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$7583 [25], Q = \P1.reg0 [25]).
Adding EN signal on $auto$ff.cc:262:slice$2412 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$7583 [24], Q = \P1.reg0 [24]).
Adding EN signal on $auto$ff.cc:262:slice$2411 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$7583 [23], Q = \P1.reg0 [23]).
Adding EN signal on $auto$ff.cc:262:slice$2410 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$7583 [22], Q = \P1.reg0 [22]).
Adding EN signal on $auto$ff.cc:262:slice$2409 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$7583 [21], Q = \P1.reg0 [21]).
Adding EN signal on $auto$ff.cc:262:slice$2408 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$7583 [20], Q = \P1.reg0 [20]).
Adding EN signal on $auto$ff.cc:262:slice$2407 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$7583 [19], Q = \P1.reg0 [19]).
Adding EN signal on $auto$ff.cc:262:slice$2406 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$7583 [18], Q = \P1.reg0 [18]).
Adding EN signal on $auto$ff.cc:262:slice$2405 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$7583 [17], Q = \P1.reg0 [17]).
Adding EN signal on $auto$ff.cc:262:slice$2404 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$7583 [16], Q = \P1.reg0 [16]).
Adding EN signal on $auto$ff.cc:262:slice$2403 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$7583 [15], Q = \P1.reg0 [15]).
Adding EN signal on $auto$ff.cc:262:slice$2402 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$7583 [14], Q = \P1.reg0 [14]).
Adding EN signal on $auto$ff.cc:262:slice$2401 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$7583 [13], Q = \P1.reg0 [13]).
Adding EN signal on $auto$ff.cc:262:slice$2400 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$7583 [12], Q = \P1.reg0 [12]).
Adding EN signal on $auto$ff.cc:262:slice$2399 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$7583 [11], Q = \P1.reg0 [11]).
Adding EN signal on $auto$ff.cc:262:slice$2398 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$7583 [10], Q = \P1.reg0 [10]).
Adding EN signal on $auto$ff.cc:262:slice$2397 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$7583 [9], Q = \P1.reg0 [9]).
Adding EN signal on $auto$ff.cc:262:slice$2396 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$7583 [8], Q = \P1.reg0 [8]).
Adding EN signal on $auto$ff.cc:262:slice$2395 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$7583 [7], Q = \P1.reg0 [7]).
Adding EN signal on $auto$ff.cc:262:slice$2394 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$7583 [6], Q = \P1.reg0 [6]).
Adding EN signal on $auto$ff.cc:262:slice$2393 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$7583 [5], Q = \P1.reg0 [5]).
Adding EN signal on $auto$ff.cc:262:slice$2392 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$7583 [4], Q = \P1.reg0 [4]).
Adding EN signal on $auto$ff.cc:262:slice$2391 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$7583 [3], Q = \P1.reg0 [3]).
Adding EN signal on $auto$ff.cc:262:slice$2390 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$7583 [2], Q = \P1.reg0 [2]).
Adding EN signal on $auto$ff.cc:262:slice$2389 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$7583 [1], Q = \P1.reg0 [1]).
Adding EN signal on $auto$ff.cc:262:slice$2388 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$7583 [0], Q = \P1.reg0 [0]).
Adding EN signal on $auto$ff.cc:262:slice$2387 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$8067 [31], Q = \P1.reg1 [31]).
Adding EN signal on $auto$ff.cc:262:slice$2386 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$8067 [30], Q = \P1.reg1 [30]).
Adding EN signal on $auto$ff.cc:262:slice$2385 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$8067 [29], Q = \P1.reg1 [29]).
Adding EN signal on $auto$ff.cc:262:slice$2384 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$8067 [28], Q = \P1.reg1 [28]).
Adding EN signal on $auto$ff.cc:262:slice$2383 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$8067 [27], Q = \P1.reg1 [27]).
Adding EN signal on $auto$ff.cc:262:slice$2382 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$8067 [26], Q = \P1.reg1 [26]).
Adding EN signal on $auto$ff.cc:262:slice$2381 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$8067 [25], Q = \P1.reg1 [25]).
Adding EN signal on $auto$ff.cc:262:slice$2380 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$8067 [24], Q = \P1.reg1 [24]).
Adding EN signal on $auto$ff.cc:262:slice$2379 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$8067 [23], Q = \P1.reg1 [23]).
Adding EN signal on $auto$ff.cc:262:slice$2378 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$8067 [22], Q = \P1.reg1 [22]).
Adding EN signal on $auto$ff.cc:262:slice$2377 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$8067 [21], Q = \P1.reg1 [21]).
Adding EN signal on $auto$ff.cc:262:slice$2376 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$8067 [20], Q = \P1.reg1 [20]).
Adding EN signal on $auto$ff.cc:262:slice$2375 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$8067 [19], Q = \P1.reg1 [19]).
Adding EN signal on $auto$ff.cc:262:slice$2374 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$8067 [18], Q = \P1.reg1 [18]).
Adding EN signal on $auto$ff.cc:262:slice$2373 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$8067 [17], Q = \P1.reg1 [17]).
Adding EN signal on $auto$ff.cc:262:slice$2372 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$8067 [16], Q = \P1.reg1 [16]).
Adding EN signal on $auto$ff.cc:262:slice$2371 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$8067 [15], Q = \P1.reg1 [15]).
Adding EN signal on $auto$ff.cc:262:slice$2370 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$8067 [14], Q = \P1.reg1 [14]).
Adding EN signal on $auto$ff.cc:262:slice$2369 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$8067 [13], Q = \P1.reg1 [13]).
Adding EN signal on $auto$ff.cc:262:slice$2368 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$8067 [12], Q = \P1.reg1 [12]).
Adding EN signal on $auto$ff.cc:262:slice$2367 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$8067 [11], Q = \P1.reg1 [11]).
Adding EN signal on $auto$ff.cc:262:slice$2366 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$8067 [10], Q = \P1.reg1 [10]).
Adding EN signal on $auto$ff.cc:262:slice$2365 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$8067 [9], Q = \P1.reg1 [9]).
Adding EN signal on $auto$ff.cc:262:slice$2364 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$8067 [8], Q = \P1.reg1 [8]).
Adding EN signal on $auto$ff.cc:262:slice$2363 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$8067 [7], Q = \P1.reg1 [7]).
Adding EN signal on $auto$ff.cc:262:slice$2362 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$8067 [6], Q = \P1.reg1 [6]).
Adding EN signal on $auto$ff.cc:262:slice$2361 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$8067 [5], Q = \P1.reg1 [5]).
Adding EN signal on $auto$ff.cc:262:slice$2360 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$8067 [4], Q = \P1.reg1 [4]).
Adding EN signal on $auto$ff.cc:262:slice$2359 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$8067 [3], Q = \P1.reg1 [3]).
Adding EN signal on $auto$ff.cc:262:slice$2358 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$8067 [2], Q = \P1.reg1 [2]).
Adding EN signal on $auto$ff.cc:262:slice$2357 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$8067 [1], Q = \P1.reg1 [1]).
Adding EN signal on $auto$ff.cc:262:slice$2356 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$8067 [0], Q = \P1.reg1 [0]).
Adding EN signal on $auto$ff.cc:262:slice$2355 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$8551 [31], Q = \P1.reg2 [31]).
Adding EN signal on $auto$ff.cc:262:slice$2354 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$8551 [30], Q = \P1.reg2 [30]).
Adding EN signal on $auto$ff.cc:262:slice$2353 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$8551 [29], Q = \P1.reg2 [29]).
Adding EN signal on $auto$ff.cc:262:slice$2352 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$8551 [28], Q = \P1.reg2 [28]).
Adding EN signal on $auto$ff.cc:262:slice$2351 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$8551 [27], Q = \P1.reg2 [27]).
Adding EN signal on $auto$ff.cc:262:slice$2350 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$8551 [26], Q = \P1.reg2 [26]).
Adding EN signal on $auto$ff.cc:262:slice$2349 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$8551 [25], Q = \P1.reg2 [25]).
Adding EN signal on $auto$ff.cc:262:slice$2348 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$8551 [24], Q = \P1.reg2 [24]).
Adding EN signal on $auto$ff.cc:262:slice$2347 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$8551 [23], Q = \P1.reg2 [23]).
Adding EN signal on $auto$ff.cc:262:slice$2346 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$8551 [22], Q = \P1.reg2 [22]).
Adding EN signal on $auto$ff.cc:262:slice$2345 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$8551 [21], Q = \P1.reg2 [21]).
Adding EN signal on $auto$ff.cc:262:slice$2344 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$8551 [20], Q = \P1.reg2 [20]).
Adding EN signal on $auto$ff.cc:262:slice$2343 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$8551 [19], Q = \P1.reg2 [19]).
Adding EN signal on $auto$ff.cc:262:slice$2342 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$8551 [18], Q = \P1.reg2 [18]).
Adding EN signal on $auto$ff.cc:262:slice$2341 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$8551 [17], Q = \P1.reg2 [17]).
Adding EN signal on $auto$ff.cc:262:slice$2340 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$8551 [16], Q = \P1.reg2 [16]).
Adding EN signal on $auto$ff.cc:262:slice$2339 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$8551 [15], Q = \P1.reg2 [15]).
Adding EN signal on $auto$ff.cc:262:slice$2338 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$8551 [14], Q = \P1.reg2 [14]).
Adding EN signal on $auto$ff.cc:262:slice$2337 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$8551 [13], Q = \P1.reg2 [13]).
Adding EN signal on $auto$ff.cc:262:slice$2336 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$8551 [12], Q = \P1.reg2 [12]).
Adding EN signal on $auto$ff.cc:262:slice$2335 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$8551 [11], Q = \P1.reg2 [11]).
Adding EN signal on $auto$ff.cc:262:slice$2334 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$8551 [10], Q = \P1.reg2 [10]).
Adding EN signal on $auto$ff.cc:262:slice$2333 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$8551 [9], Q = \P1.reg2 [9]).
Adding EN signal on $auto$ff.cc:262:slice$2332 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$8551 [8], Q = \P1.reg2 [8]).
Adding EN signal on $auto$ff.cc:262:slice$2331 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$8551 [7], Q = \P1.reg2 [7]).
Adding EN signal on $auto$ff.cc:262:slice$2330 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$8551 [6], Q = \P1.reg2 [6]).
Adding EN signal on $auto$ff.cc:262:slice$2329 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$8551 [5], Q = \P1.reg2 [5]).
Adding EN signal on $auto$ff.cc:262:slice$2328 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$8551 [4], Q = \P1.reg2 [4]).
Adding EN signal on $auto$ff.cc:262:slice$2327 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$8551 [3], Q = \P1.reg2 [3]).
Adding EN signal on $auto$ff.cc:262:slice$2326 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$8551 [2], Q = \P1.reg2 [2]).
Adding EN signal on $auto$ff.cc:262:slice$2325 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$8551 [1], Q = \P1.reg2 [1]).
Adding EN signal on $auto$ff.cc:262:slice$2324 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$8551 [0], Q = \P1.reg2 [0]).
Adding EN signal on $auto$ff.cc:262:slice$2297 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$9035 [2], Q = \P1.reg3 [2]).
Adding EN signal on $auto$ff.cc:262:slice$2296 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$9035 [1], Q = \P1.reg3 [1]).
Adding EN signal on $auto$ff.cc:262:slice$2295 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$9035 [0], Q = \P1.reg3 [0]).
Adding EN signal on $auto$ff.cc:262:slice$2294 ($_DFFE_PP0P_) from module b21 (D = $flatten\P2.$verific$n10986$718, Q = \P2.B).
Adding EN signal on $auto$ff.cc:262:slice$2261 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$12177 [31], Q = \P2.reg0 [31]).
Adding EN signal on $auto$ff.cc:262:slice$2260 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$12177 [30], Q = \P2.reg0 [30]).
Adding EN signal on $auto$ff.cc:262:slice$2259 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$12177 [29], Q = \P2.reg0 [29]).
Adding EN signal on $auto$ff.cc:262:slice$2258 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$12177 [28], Q = \P2.reg0 [28]).
Adding EN signal on $auto$ff.cc:262:slice$2257 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$12177 [27], Q = \P2.reg0 [27]).
Adding EN signal on $auto$ff.cc:262:slice$2256 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$12177 [26], Q = \P2.reg0 [26]).
Adding EN signal on $auto$ff.cc:262:slice$2255 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$12177 [25], Q = \P2.reg0 [25]).
Adding EN signal on $auto$ff.cc:262:slice$2254 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$12177 [24], Q = \P2.reg0 [24]).
Adding EN signal on $auto$ff.cc:262:slice$2253 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$12177 [23], Q = \P2.reg0 [23]).
Adding EN signal on $auto$ff.cc:262:slice$2252 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$12177 [22], Q = \P2.reg0 [22]).
Adding EN signal on $auto$ff.cc:262:slice$2251 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$12177 [21], Q = \P2.reg0 [21]).
Adding EN signal on $auto$ff.cc:262:slice$2250 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$12177 [20], Q = \P2.reg0 [20]).
Adding EN signal on $auto$ff.cc:262:slice$2249 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$12177 [19], Q = \P2.reg0 [19]).
Adding EN signal on $auto$ff.cc:262:slice$2248 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$12177 [18], Q = \P2.reg0 [18]).
Adding EN signal on $auto$ff.cc:262:slice$2247 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$12177 [17], Q = \P2.reg0 [17]).
Adding EN signal on $auto$ff.cc:262:slice$2246 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$12177 [16], Q = \P2.reg0 [16]).
Adding EN signal on $auto$ff.cc:262:slice$2245 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$12177 [15], Q = \P2.reg0 [15]).
Adding EN signal on $auto$ff.cc:262:slice$2244 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$12177 [14], Q = \P2.reg0 [14]).
Adding EN signal on $auto$ff.cc:262:slice$2243 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$12177 [13], Q = \P2.reg0 [13]).
Adding EN signal on $auto$ff.cc:262:slice$2242 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$12177 [12], Q = \P2.reg0 [12]).
Adding EN signal on $auto$ff.cc:262:slice$2241 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$12177 [11], Q = \P2.reg0 [11]).
Adding EN signal on $auto$ff.cc:262:slice$2240 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$12177 [10], Q = \P2.reg0 [10]).
Adding EN signal on $auto$ff.cc:262:slice$2239 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$12177 [9], Q = \P2.reg0 [9]).
Adding EN signal on $auto$ff.cc:262:slice$2238 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$12177 [8], Q = \P2.reg0 [8]).
Adding EN signal on $auto$ff.cc:262:slice$2237 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$12177 [7], Q = \P2.reg0 [7]).
Adding EN signal on $auto$ff.cc:262:slice$2236 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$12177 [6], Q = \P2.reg0 [6]).
Adding EN signal on $auto$ff.cc:262:slice$2235 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$12177 [5], Q = \P2.reg0 [5]).
Adding EN signal on $auto$ff.cc:262:slice$2234 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$12177 [4], Q = \P2.reg0 [4]).
Adding EN signal on $auto$ff.cc:262:slice$2233 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$12177 [3], Q = \P2.reg0 [3]).
Adding EN signal on $auto$ff.cc:262:slice$2232 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$12177 [2], Q = \P2.reg0 [2]).
Adding EN signal on $auto$ff.cc:262:slice$2231 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$12177 [1], Q = \P2.reg0 [1]).
Adding EN signal on $auto$ff.cc:262:slice$2230 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$12177 [0], Q = \P2.reg0 [0]).
Adding EN signal on $auto$ff.cc:262:slice$2229 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$12661 [31], Q = \P2.reg1 [31]).
Adding EN signal on $auto$ff.cc:262:slice$2228 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$12661 [30], Q = \P2.reg1 [30]).
Adding EN signal on $auto$ff.cc:262:slice$2227 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$12661 [29], Q = \P2.reg1 [29]).
Adding EN signal on $auto$ff.cc:262:slice$2226 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$12661 [28], Q = \P2.reg1 [28]).
Adding EN signal on $auto$ff.cc:262:slice$2225 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$12661 [27], Q = \P2.reg1 [27]).
Adding EN signal on $auto$ff.cc:262:slice$2224 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$12661 [26], Q = \P2.reg1 [26]).
Adding EN signal on $auto$ff.cc:262:slice$2223 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$12661 [25], Q = \P2.reg1 [25]).
Adding EN signal on $auto$ff.cc:262:slice$2222 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$12661 [24], Q = \P2.reg1 [24]).
Adding EN signal on $auto$ff.cc:262:slice$2221 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$12661 [23], Q = \P2.reg1 [23]).
Adding EN signal on $auto$ff.cc:262:slice$2220 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$12661 [22], Q = \P2.reg1 [22]).
Adding EN signal on $auto$ff.cc:262:slice$2219 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$12661 [21], Q = \P2.reg1 [21]).
Adding EN signal on $auto$ff.cc:262:slice$2218 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$12661 [20], Q = \P2.reg1 [20]).
Adding EN signal on $auto$ff.cc:262:slice$2217 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$12661 [19], Q = \P2.reg1 [19]).
Adding EN signal on $auto$ff.cc:262:slice$2216 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$12661 [18], Q = \P2.reg1 [18]).
Adding EN signal on $auto$ff.cc:262:slice$2215 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$12661 [17], Q = \P2.reg1 [17]).
Adding EN signal on $auto$ff.cc:262:slice$2214 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$12661 [16], Q = \P2.reg1 [16]).
Adding EN signal on $auto$ff.cc:262:slice$2213 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$12661 [15], Q = \P2.reg1 [15]).
Adding EN signal on $auto$ff.cc:262:slice$2212 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$12661 [14], Q = \P2.reg1 [14]).
Adding EN signal on $auto$ff.cc:262:slice$2211 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$12661 [13], Q = \P2.reg1 [13]).
Adding EN signal on $auto$ff.cc:262:slice$2210 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$12661 [12], Q = \P2.reg1 [12]).
Adding EN signal on $auto$ff.cc:262:slice$2209 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$12661 [11], Q = \P2.reg1 [11]).
Adding EN signal on $auto$ff.cc:262:slice$2208 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$12661 [10], Q = \P2.reg1 [10]).
Adding EN signal on $auto$ff.cc:262:slice$2207 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$12661 [9], Q = \P2.reg1 [9]).
Adding EN signal on $auto$ff.cc:262:slice$2206 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$12661 [8], Q = \P2.reg1 [8]).
Adding EN signal on $auto$ff.cc:262:slice$2205 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$12661 [7], Q = \P2.reg1 [7]).
Adding EN signal on $auto$ff.cc:262:slice$2204 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$12661 [6], Q = \P2.reg1 [6]).
Adding EN signal on $auto$ff.cc:262:slice$2203 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$12661 [5], Q = \P2.reg1 [5]).
Adding EN signal on $auto$ff.cc:262:slice$2202 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$12661 [4], Q = \P2.reg1 [4]).
Adding EN signal on $auto$ff.cc:262:slice$2201 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$12661 [3], Q = \P2.reg1 [3]).
Adding EN signal on $auto$ff.cc:262:slice$2200 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$12661 [2], Q = \P2.reg1 [2]).
Adding EN signal on $auto$ff.cc:262:slice$2199 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$12661 [1], Q = \P2.reg1 [1]).
Adding EN signal on $auto$ff.cc:262:slice$2198 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$12661 [0], Q = \P2.reg1 [0]).
Adding EN signal on $auto$ff.cc:262:slice$2197 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$13145 [31], Q = \P2.reg2 [31]).
Adding EN signal on $auto$ff.cc:262:slice$2196 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$13145 [30], Q = \P2.reg2 [30]).
Adding EN signal on $auto$ff.cc:262:slice$2195 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$13145 [29], Q = \P2.reg2 [29]).
Adding EN signal on $auto$ff.cc:262:slice$2194 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$13145 [28], Q = \P2.reg2 [28]).
Adding EN signal on $auto$ff.cc:262:slice$2193 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$13145 [27], Q = \P2.reg2 [27]).
Adding EN signal on $auto$ff.cc:262:slice$2192 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$13145 [26], Q = \P2.reg2 [26]).
Adding EN signal on $auto$ff.cc:262:slice$2191 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$13145 [25], Q = \P2.reg2 [25]).
Adding EN signal on $auto$ff.cc:262:slice$2190 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$13145 [24], Q = \P2.reg2 [24]).
Adding EN signal on $auto$ff.cc:262:slice$2189 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$13145 [23], Q = \P2.reg2 [23]).
Adding EN signal on $auto$ff.cc:262:slice$2188 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$13145 [22], Q = \P2.reg2 [22]).
Adding EN signal on $auto$ff.cc:262:slice$2187 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$13145 [21], Q = \P2.reg2 [21]).
Adding EN signal on $auto$ff.cc:262:slice$2186 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$13145 [20], Q = \P2.reg2 [20]).
Adding EN signal on $auto$ff.cc:262:slice$2185 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$13145 [19], Q = \P2.reg2 [19]).
Adding EN signal on $auto$ff.cc:262:slice$2184 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$13145 [18], Q = \P2.reg2 [18]).
Adding EN signal on $auto$ff.cc:262:slice$2183 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$13145 [17], Q = \P2.reg2 [17]).
Adding EN signal on $auto$ff.cc:262:slice$2182 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$13145 [16], Q = \P2.reg2 [16]).
Adding EN signal on $auto$ff.cc:262:slice$2181 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$13145 [15], Q = \P2.reg2 [15]).
Adding EN signal on $auto$ff.cc:262:slice$2180 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$13145 [14], Q = \P2.reg2 [14]).
Adding EN signal on $auto$ff.cc:262:slice$2179 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$13145 [13], Q = \P2.reg2 [13]).
Adding EN signal on $auto$ff.cc:262:slice$2178 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$13145 [12], Q = \P2.reg2 [12]).
Adding EN signal on $auto$ff.cc:262:slice$2177 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$13145 [11], Q = \P2.reg2 [11]).
Adding EN signal on $auto$ff.cc:262:slice$2176 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$13145 [10], Q = \P2.reg2 [10]).
Adding EN signal on $auto$ff.cc:262:slice$2175 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$13145 [9], Q = \P2.reg2 [9]).
Adding EN signal on $auto$ff.cc:262:slice$2174 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$13145 [8], Q = \P2.reg2 [8]).
Adding EN signal on $auto$ff.cc:262:slice$2173 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$13145 [7], Q = \P2.reg2 [7]).
Adding EN signal on $auto$ff.cc:262:slice$2172 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$13145 [6], Q = \P2.reg2 [6]).
Adding EN signal on $auto$ff.cc:262:slice$2171 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$13145 [5], Q = \P2.reg2 [5]).
Adding EN signal on $auto$ff.cc:262:slice$2170 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$13145 [4], Q = \P2.reg2 [4]).
Adding EN signal on $auto$ff.cc:262:slice$2169 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$13145 [3], Q = \P2.reg2 [3]).
Adding EN signal on $auto$ff.cc:262:slice$2168 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$13145 [2], Q = \P2.reg2 [2]).
Adding EN signal on $auto$ff.cc:262:slice$2167 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$13145 [1], Q = \P2.reg2 [1]).
Adding EN signal on $auto$ff.cc:262:slice$2166 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$13145 [0], Q = \P2.reg2 [0]).
Adding EN signal on $auto$ff.cc:262:slice$2139 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$13629 [2], Q = \P2.reg3 [2]).
Adding EN signal on $auto$ff.cc:262:slice$2138 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$13629 [1], Q = \P2.reg3 [1]).
Adding EN signal on $auto$ff.cc:262:slice$2137 ($_DFFE_PP0P_) from module b21 (D = $auto$simplemap.cc:309:simplemap_bmux$13629 [0], Q = \P2.reg3 [0]).
Adding EN signal on $auto$ff.cc:262:slice$10559 ($_DFF_PP0_) from module b21 (D = $flatten\P2.$verific$n11253$891 [19], Q = \P2.addr [19]).
Adding EN signal on $auto$ff.cc:262:slice$10558 ($_DFF_PP0_) from module b21 (D = $flatten\P2.$verific$n11253$891 [18], Q = \P2.addr [18]).
Adding EN signal on $auto$ff.cc:262:slice$10557 ($_DFF_PP0_) from module b21 (D = $flatten\P2.$verific$n11253$891 [17], Q = \P2.addr [17]).
Adding EN signal on $auto$ff.cc:262:slice$10556 ($_DFF_PP0_) from module b21 (D = $flatten\P2.$verific$n11253$891 [16], Q = \P2.addr [16]).
Adding EN signal on $auto$ff.cc:262:slice$10555 ($_DFF_PP0_) from module b21 (D = $flatten\P2.$verific$n11253$891 [15], Q = \P2.addr [15]).
Adding EN signal on $auto$ff.cc:262:slice$10554 ($_DFF_PP0_) from module b21 (D = $flatten\P2.$verific$n11253$891 [14], Q = \P2.addr [14]).
Adding EN signal on $auto$ff.cc:262:slice$10553 ($_DFF_PP0_) from module b21 (D = $flatten\P2.$verific$n11253$891 [13], Q = \P2.addr [13]).
Adding EN signal on $auto$ff.cc:262:slice$10552 ($_DFF_PP0_) from module b21 (D = $flatten\P2.$verific$n11253$891 [12], Q = \P2.addr [12]).
Adding EN signal on $auto$ff.cc:262:slice$10551 ($_DFF_PP0_) from module b21 (D = $flatten\P2.$verific$n11253$891 [11], Q = \P2.addr [11]).
Adding EN signal on $auto$ff.cc:262:slice$10550 ($_DFF_PP0_) from module b21 (D = $flatten\P2.$verific$n11253$891 [10], Q = \P2.addr [10]).
Adding EN signal on $auto$ff.cc:262:slice$10549 ($_DFF_PP0_) from module b21 (D = $flatten\P2.$verific$n11253$891 [9], Q = \P2.addr [9]).
Adding EN signal on $auto$ff.cc:262:slice$10548 ($_DFF_PP0_) from module b21 (D = $flatten\P2.$verific$n11253$891 [8], Q = \P2.addr [8]).
Adding EN signal on $auto$ff.cc:262:slice$10547 ($_DFF_PP0_) from module b21 (D = $flatten\P2.$verific$n11253$891 [7], Q = \P2.addr [7]).
Adding EN signal on $auto$ff.cc:262:slice$10546 ($_DFF_PP0_) from module b21 (D = $flatten\P2.$verific$n11253$891 [6], Q = \P2.addr [6]).
Adding EN signal on $auto$ff.cc:262:slice$10545 ($_DFF_PP0_) from module b21 (D = $flatten\P2.$verific$n11253$891 [5], Q = \P2.addr [5]).
Adding EN signal on $auto$ff.cc:262:slice$10544 ($_DFF_PP0_) from module b21 (D = $flatten\P2.$verific$n11253$891 [4], Q = \P2.addr [4]).
Adding EN signal on $auto$ff.cc:262:slice$10543 ($_DFF_PP0_) from module b21 (D = $flatten\P2.$verific$n11253$891 [3], Q = \P2.addr [3]).
Adding EN signal on $auto$ff.cc:262:slice$10542 ($_DFF_PP0_) from module b21 (D = $flatten\P2.$verific$n11253$891 [2], Q = \P2.addr [2]).
Adding EN signal on $auto$ff.cc:262:slice$10541 ($_DFF_PP0_) from module b21 (D = $flatten\P2.$verific$n11253$891 [1], Q = \P2.addr [1]).
Adding EN signal on $auto$ff.cc:262:slice$10540 ($_DFF_PP0_) from module b21 (D = $flatten\P2.$verific$n11253$891 [0], Q = \P2.addr [0]).

29.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b21..
Removed 160 unused cells and 1552 unused wires.
<suppressed ~161 debug messages>

29.5. Rerunning OPT passes. (Removed registers in this run.)

29.6. Executing OPT_EXPR pass (perform const folding).
Optimizing module b21.
<suppressed ~6022 debug messages>

29.7. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b21'.
<suppressed ~21819 debug messages>
Removed a total of 7273 cells.

29.8. Executing OPT_DFF pass (perform DFF optimizations).

29.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b21..
Removed 0 unused cells and 6984 unused wires.
<suppressed ~1 debug messages>

29.10. Finished fast OPT passes.

30. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

31. Executing OPT pass (performing simple optimizations).

31.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b21.
<suppressed ~2 debug messages>

31.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b21'.
Removed a total of 0 cells.

31.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b21..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

31.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b21.
Performed a total of 0 changes.

31.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b21'.
Removed a total of 0 cells.

31.6. Executing OPT_SHARE pass.
    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$10478 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$10976
        $auto$simplemap.cc:86:simplemap_bitop$10996

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$10479 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$10978
        $auto$simplemap.cc:86:simplemap_bitop$10977

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$10480 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$10980
        $auto$simplemap.cc:86:simplemap_bitop$10979

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$10481 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$10982
        $auto$simplemap.cc:86:simplemap_bitop$10981

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$5884 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$6382
        $auto$simplemap.cc:86:simplemap_bitop$6402

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$5885 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$6384
        $auto$simplemap.cc:86:simplemap_bitop$6383

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$5886 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$6386
        $auto$simplemap.cc:86:simplemap_bitop$6385

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$5887 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$6388
        $auto$simplemap.cc:86:simplemap_bitop$6387

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$9152 in front of them:
        $auto$alumacc.cc:485:replace_alu$1867
        $auto$alumacc.cc:485:replace_alu$1861

31.7. Executing OPT_DFF pass (perform DFF optimizations).

31.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b21..
Removed 0 unused cells and 24 unused wires.
<suppressed ~1 debug messages>

31.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module b21.
<suppressed ~9 debug messages>

31.10. Rerunning OPT passes. (Maybe there is more to do..)

31.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b21..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~9 debug messages>

31.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b21.
Performed a total of 0 changes.

31.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b21'.
Removed a total of 0 cells.

31.14. Executing OPT_SHARE pass.
    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$10485 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$10978
        $auto$simplemap.cc:86:simplemap_bitop$10976

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$10486 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$10982
        $auto$simplemap.cc:86:simplemap_bitop$10980

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$5891 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$6384
        $auto$simplemap.cc:86:simplemap_bitop$6382

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$5892 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$6388
        $auto$simplemap.cc:86:simplemap_bitop$6386

31.15. Executing OPT_DFF pass (perform DFF optimizations).

31.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b21..
Removed 0 unused cells and 8 unused wires.
<suppressed ~1 debug messages>

31.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module b21.
<suppressed ~4 debug messages>

31.18. Rerunning OPT passes. (Maybe there is more to do..)

31.19. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b21..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

31.20. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b21.
Performed a total of 0 changes.

31.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b21'.
Removed a total of 0 cells.

31.22. Executing OPT_SHARE pass.
    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$10489 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$10982
        $auto$simplemap.cc:86:simplemap_bitop$10978

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$5895 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$6388
        $auto$simplemap.cc:86:simplemap_bitop$6384

31.23. Executing OPT_DFF pass (perform DFF optimizations).

31.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b21..
Removed 0 unused cells and 4 unused wires.
<suppressed ~1 debug messages>

31.25. Executing OPT_EXPR pass (perform const folding).
Optimizing module b21.
<suppressed ~2 debug messages>

31.26. Rerunning OPT passes. (Maybe there is more to do..)

31.27. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b21..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

31.28. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b21.
Performed a total of 0 changes.

31.29. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b21'.
Removed a total of 0 cells.

31.30. Executing OPT_SHARE pass.

31.31. Executing OPT_DFF pass (perform DFF optimizations).

31.32. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b21..

31.33. Executing OPT_EXPR pass (perform const folding).
Optimizing module b21.

31.34. Finished OPT passes. (There is nothing left to do.)

32. Executing TECHMAP pass (map to technology primitives).

32.1. Executing Verilog-2005 frontend: /home/users/aram/Workspace/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/aram/Workspace/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

32.2. Continuing TECHMAP pass.
Using template $paramod$fbc7873bff55778c0b3173955b7e4bce1d9d6834\_90_alu for cells of type $alu.
Using template $paramod$fc972a7a46956c1788f3cb5257b53c8f1df2d0cc\_90_alu for cells of type $alu.
Using template $paramod$adbaf76fa5a3091a329503792521395f8ff4d1a4\_90_alu for cells of type $alu.
Using template $paramod$6fc37af1c109ae54e8aed83fcd995c12d378ce93\_90_alu for cells of type $alu.
Using extmapper maccmap for cells of type $macc.
  add 3'101 * $auto$simplemap.cc:309:simplemap_bmux$9173 [0] (3x1 bits, unsigned)
Using template $paramod$6a42b6fefed750f8a1c58eab59479d960557103c\_90_alu for cells of type $alu.
Using template $paramod$ba698a254f9a5947e85cbe7beae6b161eefc5386\_90_alu for cells of type $alu.
Using template $paramod$32a7b7b86c07519b7537abc18e96f0331f97914d\_90_alu for cells of type $alu.
Using template $paramod$403d07c18de10cda2ac652a859c56aea81aaf9b5\_90_alu for cells of type $alu.
Using template $paramod$e891e6b399cf52748460a311fafe476815d24bd7\_90_alu for cells of type $alu.
Using template $paramod$c6baa65225090ac0a120feab1b920965244aa496\_90_alu for cells of type $alu.
Using template $paramod$bfd924274384262bad5ce2d9fd5238108bec6022\_90_alu for cells of type $alu.
Using template $paramod$788c3d57e5abb3a3f89aea6d4acd665be37f4e9b\_90_alu for cells of type $alu.
Using template $paramod$175e67c02b86e96b1288b9dc100122520d7240d8\_90_alu for cells of type $alu.
Using template $paramod$83784888def4f70dbbded37c6d05d2ea1157c936\_90_alu for cells of type $alu.
Using template $paramod$3ef7d3dd227da7627a99c5e5a6a4deb817573e39\_90_alu for cells of type $alu.
Using template $paramod$a7926d38756e33b5022e02ebfd484599309272c7\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000100000 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000001 for cells of type $lcu.
Using extmapper simplemap for cells of type $not.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000010 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000011 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011110 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011011 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011111 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010101 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000100 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010100 for cells of type $lcu.
Using extmapper simplemap for cells of type $or.
No more expansions possible.
<suppressed ~5317 debug messages>

33. Executing OPT pass (performing simple optimizations).

33.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b21.
<suppressed ~2587 debug messages>

33.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b21'.
<suppressed ~3915 debug messages>
Removed a total of 1305 cells.

33.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b21..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

33.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b21.
Performed a total of 0 changes.

33.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b21'.
Removed a total of 0 cells.

33.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $auto$ff.cc:262:slice$5847 ($_DFF_PP0_) from module b21 (D = $flatten\P1.$verific$n11301$372 [0], Q = \P1.IR [0]).
Adding EN signal on $auto$ff.cc:262:slice$10441 ($_DFF_PP0_) from module b21 (D = $flatten\P2.$verific$n11308$892 [0], Q = \P2.IR [0]).

33.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b21..
Removed 635 unused cells and 2605 unused wires.
<suppressed ~636 debug messages>

33.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module b21.
<suppressed ~8 debug messages>

33.9. Rerunning OPT passes. (Maybe there is more to do..)

33.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b21..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

33.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b21.
Performed a total of 0 changes.

33.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b21'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

33.13. Executing OPT_DFF pass (perform DFF optimizations).

33.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b21..
Removed 0 unused cells and 4 unused wires.
<suppressed ~1 debug messages>

33.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module b21.

33.16. Rerunning OPT passes. (Maybe there is more to do..)

33.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b21..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

33.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b21.
Performed a total of 0 changes.

33.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b21'.
Removed a total of 0 cells.

33.20. Executing OPT_DFF pass (perform DFF optimizations).

33.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b21..

33.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module b21.

33.23. Finished OPT passes. (There is nothing left to do.)

34. Executing ABC pass (technology mapping using ABC).

34.1. Extracting gate netlist of module `\b21' to `<abc-temp-dir>/input.blif'..
Extracted 8560 gates and 9031 wires to a netlist network with 468 inputs and 472 outputs.

34.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + source /home/users/aram/Workspace/yosys_verific_rs/scripts/synth/abc/abc_base6.a21.scr 
ABC: netlist  : i/o =    468/    472  and =   14970  lev =   82 (40.29)  mem = 0.20 MB
ABC: Mapping (K=6)  :  lut =   2519  edge =   10751  lev =   35 (16.90)  mem = 0.12 MB
ABC: netlist  : i/o =    468/    472  and =   14000  lev =   84 (42.38)  mem = 0.19 MB
ABC: Mapping (K=6)  :  lut =   2104  edge =    9213  lev =   36 (17.86)  mem = 0.11 MB
ABC: netlist  : i/o =    468/    472  and =   13655  lev =   85 (42.50)  mem = 0.18 MB
ABC: Mapping (K=6)  :  lut =   1976  edge =    8845  lev =   37 (17.93)  mem = 0.10 MB
ABC: netlist  : i/o =    468/    472  and =   14186  lev =   88 (43.96)  mem = 0.19 MB
ABC: Mapping (K=6)  :  lut =   1946  edge =    8777  lev =   36 (17.95)  mem = 0.11 MB
ABC: netlist  : i/o =    468/    472  and =   12949  lev =   92 (45.90)  mem = 0.18 MB
ABC: Mapping (K=6)  :  lut =   1877  edge =    8372  lev =   40 (20.43)  mem = 0.10 MB
ABC: netlist  : i/o =    468/    472  and =   13073  lev =   93 (45.59)  mem = 0.23 MB
ABC: Mapping (K=6)  :  lut =   1788  edge =    8347  lev =   35 (17.75)  mem = 0.10 MB
ABC: netlist  : i/o =    468/    472  and =   13164  lev =   90 (45.01)  mem = 0.23 MB
ABC: Mapping (K=6)  :  lut =   1791  edge =    8366  lev =   36 (18.15)  mem = 0.10 MB
ABC: netlist  : i/o =    468/    472  and =   13230  lev =   93 (45.23)  mem = 0.23 MB
ABC: Mapping (K=6)  :  lut =   1779  edge =    8393  lev =   36 (18.22)  mem = 0.10 MB
ABC: netlist  : i/o =    468/    472  and =   13086  lev =   94 (47.71)  mem = 0.23 MB
ABC: Mapping (K=6)  :  lut =   1755  edge =    8173  lev =   36 (18.19)  mem = 0.10 MB
ABC: netlist  : i/o =    468/    472  and =   12765  lev =   98 (51.19)  mem = 0.23 MB
ABC: Mapping (K=6)  :  lut =   1739  edge =    8118  lev =   35 (17.97)  mem = 0.10 MB
ABC: netlist  : i/o =    468/    472  and =   12430  lev =   91 (45.48)  mem = 0.22 MB
ABC: Mapping (K=6)  :  lut =   1726  edge =    8045  lev =   36 (18.28)  mem = 0.09 MB
ABC: netlist  : i/o =    468/    472  and =   13057  lev =  100 (51.20)  mem = 0.23 MB
ABC: Mapping (K=6)  :  lut =   1712  edge =    8027  lev =   35 (17.91)  mem = 0.10 MB
ABC: netlist  : i/o =    468/    472  and =   12651  lev =   92 (45.83)  mem = 0.22 MB
ABC: Mapping (K=6)  :  lut =   1712  edge =    8036  lev =   36 (18.12)  mem = 0.10 MB
ABC: netlist  : i/o =    468/    472  and =   13057  lev =  100 (51.20)  mem = 0.18 MB
ABC: Mapping (K=6)  :  lut =   1712  edge =    8027  lev =   35 (17.91)  mem = 0.10 MB
ABC: netlist  : i/o =    468/    472  and =   13057  lev =  100 (51.20)  mem = 0.23 MB
ABC: Mapping (K=6)  :  lut =   1712  edge =    8027  lev =   35 (17.91)  mem = 0.10 MB
ABC: netlist  : i/o =    468/    472  and =   12795  lev =   94 (46.04)  mem = 0.17 MB
ABC: Mapping (K=6)  :  lut =   1712  edge =    8027  lev =   35 (17.91)  mem = 0.10 MB
ABC: + write_blif <abc-temp-dir>/output.blif 

34.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:     1716
ABC RESULTS:        internal signals:     8091
ABC RESULTS:           input signals:      468
ABC RESULTS:          output signals:      472
Removing temp directory.

35. Executing OPT pass (performing simple optimizations).

35.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b21.

35.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b21'.
Removed a total of 0 cells.

35.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b21..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

35.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b21.
Performed a total of 0 changes.

35.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b21'.
Removed a total of 0 cells.

35.6. Executing OPT_DFF pass (perform DFF optimizations).

35.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b21..
Removed 0 unused cells and 2470 unused wires.
<suppressed ~5 debug messages>

35.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module b21.

35.9. Rerunning OPT passes. (Maybe there is more to do..)

35.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b21..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

35.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b21.
Performed a total of 0 changes.

35.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b21'.
Removed a total of 0 cells.

35.13. Executing OPT_DFF pass (perform DFF optimizations).

35.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b21..

35.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module b21.

35.16. Finished OPT passes. (There is nothing left to do.)

36. Executing HIERARCHY pass (managing design hierarchy).

36.1. Analyzing design hierarchy..
Top module:  \b21

36.2. Analyzing design hierarchy..
Top module:  \b21
Removed 0 unused modules.

37. Printing statistics.

=== b21 ===

   Number of wires:               1678
   Number of wire bits:           2490
   Number of public wires:          42
   Number of public wire bits:     608
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               2150
     $_DFFE_PP0N_                    2
     $_DFFE_PP0P_                  340
     $_DFF_PP0_                     94
     $lut                         1714

38. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b21..
Removed 0 unused cells and 12 unused wires.
<suppressed ~12 debug messages>

39. Executing BLIF backend.

End of script. Logfile hash: 61b0c8dad8, CPU: user 24.05s system 0.10s, MEM: 77.35 MB peak
Yosys 0.14+36 (git sha1 15a4e900b, gcc 7.1.0 -fPIC -Os)
Time spent: 68% 1x abc (49 sec), 11% 31x opt_dff (8 sec), ...
