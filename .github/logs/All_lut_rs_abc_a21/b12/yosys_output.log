
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.14+36 (git sha1 15a4e900b, gcc 7.1.0 -fPIC -Os)


-- Executing script file `yosys.ys' --

1. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Jan22_SW_Release, released at Sat Jan 29 02:42:49 2022.

2. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Jan22_SW_Release, released at Sat Jan 29 02:42:49 2022.
VERIFIC-INFO [VHDL-1504] default VHDL library search path is now "/home/users/aram/Workspace/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008"
VERIFIC-COMMENT [VHDL-1481] Analyzing VHDL file 'b12.vhd'
VERIFIC-COMMENT [VHDL-1493] Restoring VHDL unit 'std.standard' from file '/home/users/aram/Workspace/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008/std/standard.vdb'
VERIFIC-INFO [VHDL-1012] b12.vhd:1: analyzing entity 'b12'
VERIFIC-INFO [VHDL-1010] b12.vhd:12: analyzing architecture 'behav'

3. Executing HIERARCHY pass (managing design hierarchy).
VERIFIC-INFO [VHDL-1067] b12.vhd:1: processing 'b12(BEHAV)'
Importing module standard.
Importing module b12.

3.1. Analyzing design hierarchy..
Top module:  \b12

3.2. Analyzing design hierarchy..
Top module:  \b12
Removing unused module `\standard'.
Removed 1 unused modules.

4. Executing PROC pass (convert processes to netlists).

4.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

4.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

4.4. Executing PROC_INIT pass (extract init attributes).

4.5. Executing PROC_ARST pass (detect async resets in processes).

4.6. Executing PROC_MUX pass (convert decision trees to multiplexers).

4.7. Executing PROC_DLATCH pass (convert process syncs to latches).

4.8. Executing PROC_DFF pass (convert process syncs to FFs).

4.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

4.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.
<suppressed ~9 debug messages>

5. Executing FLATTEN pass (flatten design).

6. Executing TRIBUF pass.

7. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.

8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..
Removed 0 unused cells and 46 unused wires.
<suppressed ~19 debug messages>

9. Executing CHECK pass (checking for obvious problems).
Checking module b12...
Found and reported 0 problems.

10. Executing DEMINOUT pass (demote inout ports to input or output).

11. Executing OPT pass (performing simple optimizations).

11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.

11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

11.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~76 debug messages>

11.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

11.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

11.6. Executing OPT_DFF pass (perform DFF optimizations).
Changing const-value async load to async reset on $verific$wr_reg$b12.vhd:564$550 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$timebase_reg$b12.vhd:564$554 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$speaker_reg$b12.vhd:144$312 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$sound_reg$b12.vhd:564$556 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$scan_reg$b12.vhd:564$551 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$s_reg$b12.vhd:144$311 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$play_reg$b12.vhd:564$549 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$nloss_reg$b12.vhd:564$547 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$nl_reg$b12.vhd:564$548 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_9$b12.vhd:184$399 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_8$b12.vhd:184$398 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_7$b12.vhd:184$397 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_6$b12.vhd:184$396 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_5$b12.vhd:184$395 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_4$b12.vhd:184$394 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_32$b12.vhd:184$422 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_31$b12.vhd:184$421 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_30$b12.vhd:184$420 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_3$b12.vhd:184$393 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_29$b12.vhd:184$419 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_28$b12.vhd:184$418 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_27$b12.vhd:184$417 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_26$b12.vhd:184$416 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_25$b12.vhd:184$415 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_24$b12.vhd:184$414 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_23$b12.vhd:184$413 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_22$b12.vhd:184$412 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_21$b12.vhd:184$411 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_20$b12.vhd:184$410 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_2$b12.vhd:184$392 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_19$b12.vhd:184$409 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_18$b12.vhd:184$408 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_17$b12.vhd:184$407 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_16$b12.vhd:184$406 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_15$b12.vhd:184$405 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_14$b12.vhd:184$404 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_13$b12.vhd:184$403 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_12$b12.vhd:184$402 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_11$b12.vhd:184$401 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_10$b12.vhd:184$400 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg$b12.vhd:184$423 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$max_reg$b12.vhd:564$552 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$ind_reg$b12.vhd:564$553 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$gamma_reg$b12.vhd:564$559 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$data_out_reg$b12.vhd:184$391 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$data_in_reg$b12.vhd:564$558 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$counter_reg$b12.vhd:144$313 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$count_reg_2$b12.vhd:164$319 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$count_reg$b12.vhd:564$555 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$address_reg$b12.vhd:564$557 ($aldff) from module b12.

11.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..

11.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.

11.9. Rerunning OPT passes. (Maybe there is more to do..)

11.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~76 debug messages>

11.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

11.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

11.13. Executing OPT_DFF pass (perform DFF optimizations).

11.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..

11.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.

11.16. Finished OPT passes. (There is nothing left to do.)

12. Executing FSM pass (extract and optimize FSM).

12.1. Executing FSM_DETECT pass (finding FSMs in design).

12.2. Executing FSM_EXTRACT pass (extracting FSM from design).

12.3. Executing FSM_OPT pass (simple optimizations of FSMs).

12.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..

12.5. Executing FSM_OPT pass (simple optimizations of FSMs).

12.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

12.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

12.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

13. Executing OPT pass (performing simple optimizations).

13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.

13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~76 debug messages>

13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

13.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $verific$s_reg$b12.vhd:144$311 ($adff) from module b12 (D = $verific$n125$35, Q = \s).
Adding EN signal on $verific$memory_reg_9$b12.vhd:184$399 ($adff) from module b12 (D = \data_in, Q = \memory[24]).
Adding EN signal on $verific$memory_reg_8$b12.vhd:184$398 ($adff) from module b12 (D = \data_in, Q = \memory[25]).
Adding EN signal on $verific$memory_reg_7$b12.vhd:184$397 ($adff) from module b12 (D = \data_in, Q = \memory[26]).
Adding EN signal on $verific$memory_reg_6$b12.vhd:184$396 ($adff) from module b12 (D = \data_in, Q = \memory[27]).
Adding EN signal on $verific$memory_reg_5$b12.vhd:184$395 ($adff) from module b12 (D = \data_in, Q = \memory[28]).
Adding EN signal on $verific$memory_reg_4$b12.vhd:184$394 ($adff) from module b12 (D = \data_in, Q = \memory[29]).
Adding EN signal on $verific$memory_reg_32$b12.vhd:184$422 ($adff) from module b12 (D = \data_in, Q = \memory[1]).
Adding EN signal on $verific$memory_reg_31$b12.vhd:184$421 ($adff) from module b12 (D = \data_in, Q = \memory[2]).
Adding EN signal on $verific$memory_reg_30$b12.vhd:184$420 ($adff) from module b12 (D = \data_in, Q = \memory[3]).
Adding EN signal on $verific$memory_reg_3$b12.vhd:184$393 ($adff) from module b12 (D = \data_in, Q = \memory[30]).
Adding EN signal on $verific$memory_reg_29$b12.vhd:184$419 ($adff) from module b12 (D = \data_in, Q = \memory[4]).
Adding EN signal on $verific$memory_reg_28$b12.vhd:184$418 ($adff) from module b12 (D = \data_in, Q = \memory[5]).
Adding EN signal on $verific$memory_reg_27$b12.vhd:184$417 ($adff) from module b12 (D = \data_in, Q = \memory[6]).
Adding EN signal on $verific$memory_reg_26$b12.vhd:184$416 ($adff) from module b12 (D = \data_in, Q = \memory[7]).
Adding EN signal on $verific$memory_reg_25$b12.vhd:184$415 ($adff) from module b12 (D = \data_in, Q = \memory[8]).
Adding EN signal on $verific$memory_reg_24$b12.vhd:184$414 ($adff) from module b12 (D = \data_in, Q = \memory[9]).
Adding EN signal on $verific$memory_reg_23$b12.vhd:184$413 ($adff) from module b12 (D = \data_in, Q = \memory[10]).
Adding EN signal on $verific$memory_reg_22$b12.vhd:184$412 ($adff) from module b12 (D = \data_in, Q = \memory[11]).
Adding EN signal on $verific$memory_reg_21$b12.vhd:184$411 ($adff) from module b12 (D = \data_in, Q = \memory[12]).
Adding EN signal on $verific$memory_reg_20$b12.vhd:184$410 ($adff) from module b12 (D = \data_in, Q = \memory[13]).
Adding EN signal on $verific$memory_reg_2$b12.vhd:184$392 ($adff) from module b12 (D = \data_in, Q = \memory[31]).
Adding EN signal on $verific$memory_reg_19$b12.vhd:184$409 ($adff) from module b12 (D = \data_in, Q = \memory[14]).
Adding EN signal on $verific$memory_reg_18$b12.vhd:184$408 ($adff) from module b12 (D = \data_in, Q = \memory[15]).
Adding EN signal on $verific$memory_reg_17$b12.vhd:184$407 ($adff) from module b12 (D = \data_in, Q = \memory[16]).
Adding EN signal on $verific$memory_reg_16$b12.vhd:184$406 ($adff) from module b12 (D = \data_in, Q = \memory[17]).
Adding EN signal on $verific$memory_reg_15$b12.vhd:184$405 ($adff) from module b12 (D = \data_in, Q = \memory[18]).
Adding EN signal on $verific$memory_reg_14$b12.vhd:184$404 ($adff) from module b12 (D = \data_in, Q = \memory[19]).
Adding EN signal on $verific$memory_reg_13$b12.vhd:184$403 ($adff) from module b12 (D = \data_in, Q = \memory[20]).
Adding EN signal on $verific$memory_reg_12$b12.vhd:184$402 ($adff) from module b12 (D = \data_in, Q = \memory[21]).
Adding EN signal on $verific$memory_reg_11$b12.vhd:184$401 ($adff) from module b12 (D = \data_in, Q = \memory[22]).
Adding EN signal on $verific$memory_reg_10$b12.vhd:184$400 ($adff) from module b12 (D = \data_in, Q = \memory[23]).
Adding EN signal on $verific$memory_reg$b12.vhd:184$423 ($adff) from module b12 (D = \data_in, Q = \memory[0]).

13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..
Removed 65 unused cells and 65 unused wires.
<suppressed ~66 debug messages>

13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.

13.9. Rerunning OPT passes. (Maybe there is more to do..)

13.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~43 debug messages>

13.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

13.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

13.13. Executing OPT_DFF pass (perform DFF optimizations).

13.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..

13.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.

13.16. Finished OPT passes. (There is nothing left to do.)

14. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 3) from port A of cell b12.$verific$LessThan_4$b12.vhd:80$275 ($lt).
Removed top 2 bits (of 3) from port B of cell b12.$verific$add_8$b12.vhd:85$279 ($add).
Removed top 1 bits (of 4) from port Y of cell b12.$verific$add_8$b12.vhd:85$279 ($add).
Removed top 1 bits (of 3) from port A of cell b12.$verific$LessThan_13$b12.vhd:88$285 ($lt).
Removed top 2 bits (of 3) from port A of cell b12.$verific$LessThan_49$b12.vhd:125$301 ($lt).
Removed top 1 bits (of 2) from port B of cell b12.$verific$add_69$b12.vhd:159$316 ($add).
Removed top 31 bits (of 32) from port A of cell b12.$verific$Decoder_79$b12.vhd:182$326 ($shl).
Removed top 3 bits (of 4) from port A of cell b12.$verific$Decoder_195$b12.vhd:284$428 ($shl).
Removed top 1 bits (of 7) from port A of cell b12.$verific$sub_207$b12.vhd:298$435 ($sub).
Removed top 6 bits (of 7) from port B of cell b12.$verific$sub_207$b12.vhd:298$435 ($sub).
Removed top 1 bits (of 7) from port Y of cell b12.$verific$sub_207$b12.vhd:298$435 ($sub).
Removed top 4 bits (of 5) from port B of cell b12.$verific$add_215$b12.vhd:306$440 ($add).
Removed top 1 bits (of 6) from port Y of cell b12.$verific$add_215$b12.vhd:306$440 ($add).
Removed top 1 bits (of 2) from port A of cell b12.$verific$equal_239$b12.vhd:358$450 ($eq).
Removed top 1 bits (of 4) from mux cell b12.$verific$mux_273$b12.vhd:394$479 ($mux).
Removed top 1 bits (of 4) from mux cell b12.$verific$mux_274$b12.vhd:394$480 ($mux).
Removed top 1 bits (of 4) from mux cell b12.$verific$mux_275$b12.vhd:394$481 ($mux).
Removed top 1 bits (of 4) from mux cell b12.$verific$mux_276$b12.vhd:394$482 ($mux).
Removed top 3 bits (of 4) from port A of cell b12.$verific$Decoder_289$b12.vhd:400$490 ($shl).
Removed top 4 bits (of 5) from port B of cell b12.$verific$add_309$b12.vhd:423$496 ($add).
Removed top 1 bits (of 6) from port Y of cell b12.$verific$add_309$b12.vhd:423$496 ($add).
Removed top 1 bits (of 7) from port A of cell b12.$verific$sub_311$b12.vhd:424$499 ($sub).
Removed top 6 bits (of 7) from port B of cell b12.$verific$sub_311$b12.vhd:424$499 ($sub).
Removed top 1 bits (of 7) from port Y of cell b12.$verific$sub_311$b12.vhd:424$499 ($sub).
Removed top 2 bits (of 19) from mux cell b12.$verific$mux_503$b12.vhd:510$502 ($mux).
Removed top 1 bits (of 4) from wire b12.$verific$n1024$192.
Removed top 1 bits (of 4) from wire b12.$verific$n1073$194.
Removed top 1 bits (of 4) from wire b12.$verific$n1139$207.
Removed top 1 bits (of 4) from wire b12.$verific$n1144$208.
Removed top 1 bits (of 4) from wire b12.$verific$n1149$209.
Removed top 1 bits (of 4) from wire b12.$verific$n1154$210.
Removed top 1 bits (of 7) from wire b12.$verific$n1280$219.
Removed top 1 bits (of 5) from wire b12.$verific$n1336$223.
Removed top 3 bits (of 5) from wire b12.$verific$n1688$245.
Removed top 2 bits (of 5) from wire b12.$verific$n1733$250.
Removed top 4 bits (of 5) from wire b12.$verific$n1997$260.
Removed top 1 bits (of 7) from wire b12.$verific$n765$175.
Removed top 1 bits (of 4) from wire b12.$verific$n926$188.
Removed top 1 bits (of 4) from wire b12.$verific$n975$190.

15. Executing PEEPOPT pass (run peephole optimizers).

16. Executing PMUXTREE pass.

17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..
Removed 0 unused cells and 19 unused wires.
<suppressed ~1 debug messages>

18. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module b12:
  creating $macc model for $verific$add_215$b12.vhd:306$440 ($add).
  creating $macc model for $verific$add_309$b12.vhd:423$496 ($add).
  creating $macc model for $verific$add_69$b12.vhd:159$316 ($add).
  creating $macc model for $verific$add_8$b12.vhd:85$279 ($add).
  creating $macc model for $verific$sub_207$b12.vhd:298$435 ($sub).
  creating $macc model for $verific$sub_311$b12.vhd:424$499 ($sub).
  creating $alu model for $macc $verific$sub_311$b12.vhd:424$499.
  creating $alu model for $macc $verific$sub_207$b12.vhd:298$435.
  creating $alu model for $macc $verific$add_8$b12.vhd:85$279.
  creating $alu model for $macc $verific$add_69$b12.vhd:159$316.
  creating $alu model for $macc $verific$add_309$b12.vhd:423$496.
  creating $alu model for $macc $verific$add_215$b12.vhd:306$440.
  creating $alu model for $verific$LessThan_13$b12.vhd:88$285 ($lt): new $alu
  creating $alu model for $verific$LessThan_22$b12.vhd:98$289 ($lt): new $alu
  creating $alu model for $verific$LessThan_31$b12.vhd:107$293 ($lt): new $alu
  creating $alu model for $verific$LessThan_4$b12.vhd:80$275 ($lt): new $alu
  creating $alu model for $verific$LessThan_40$b12.vhd:116$297 ($lt): new $alu
  creating $alu model for $verific$LessThan_49$b12.vhd:125$301 ($lt): new $alu
  creating $alu cell for $verific$LessThan_40$b12.vhd:116$297: $auto$alumacc.cc:485:replace_alu$678
  creating $alu cell for $verific$LessThan_4$b12.vhd:80$275: $auto$alumacc.cc:485:replace_alu$683
  creating $alu cell for $verific$LessThan_31$b12.vhd:107$293: $auto$alumacc.cc:485:replace_alu$688
  creating $alu cell for $verific$LessThan_22$b12.vhd:98$289: $auto$alumacc.cc:485:replace_alu$693
  creating $alu cell for $verific$LessThan_13$b12.vhd:88$285: $auto$alumacc.cc:485:replace_alu$698
  creating $alu cell for $verific$add_215$b12.vhd:306$440: $auto$alumacc.cc:485:replace_alu$703
  creating $alu cell for $verific$add_309$b12.vhd:423$496: $auto$alumacc.cc:485:replace_alu$706
  creating $alu cell for $verific$add_69$b12.vhd:159$316: $auto$alumacc.cc:485:replace_alu$709
  creating $alu cell for $verific$LessThan_49$b12.vhd:125$301: $auto$alumacc.cc:485:replace_alu$712
  creating $alu cell for $verific$add_8$b12.vhd:85$279: $auto$alumacc.cc:485:replace_alu$717
  creating $alu cell for $verific$sub_207$b12.vhd:298$435: $auto$alumacc.cc:485:replace_alu$720
  creating $alu cell for $verific$sub_311$b12.vhd:424$499: $auto$alumacc.cc:485:replace_alu$723
  created 12 $alu and 0 $macc cells.

19. Executing OPT pass (performing simple optimizations).

19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.
<suppressed ~18 debug messages>

19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~43 debug messages>

19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

19.6. Executing OPT_DFF pass (perform DFF optimizations).

19.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..
Removed 6 unused cells and 12 unused wires.
<suppressed ~7 debug messages>

19.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.

19.9. Rerunning OPT passes. (Maybe there is more to do..)

19.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~43 debug messages>

19.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

19.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

19.13. Executing OPT_DFF pass (perform DFF optimizations).

19.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..

19.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.

19.16. Finished OPT passes. (There is nothing left to do.)

20. Executing MEMORY pass.

20.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

20.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

20.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

20.4. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

20.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..

20.6. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

20.7. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

20.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..

20.9. Executing MEMORY_COLLECT pass (generating $mem cells).

21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..

22. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.

23. Executing SIMPLEMAP pass (map simple cells to gate primitives).
Mapping b12.$auto$ff.cc:262:slice$561 ($adffe).
Mapping b12.$auto$ff.cc:262:slice$562 ($adffe).
Mapping b12.$auto$ff.cc:262:slice$565 ($adffe).
Mapping b12.$auto$ff.cc:262:slice$568 ($adffe).
Mapping b12.$auto$ff.cc:262:slice$571 ($adffe).
Mapping b12.$auto$ff.cc:262:slice$574 ($adffe).
Mapping b12.$auto$ff.cc:262:slice$577 ($adffe).
Mapping b12.$auto$ff.cc:262:slice$580 ($adffe).
Mapping b12.$auto$ff.cc:262:slice$583 ($adffe).
Mapping b12.$auto$ff.cc:262:slice$586 ($adffe).
Mapping b12.$auto$ff.cc:262:slice$589 ($adffe).
Mapping b12.$auto$ff.cc:262:slice$592 ($adffe).
Mapping b12.$auto$ff.cc:262:slice$595 ($adffe).
Mapping b12.$auto$ff.cc:262:slice$598 ($adffe).
Mapping b12.$auto$ff.cc:262:slice$601 ($adffe).
Mapping b12.$auto$ff.cc:262:slice$604 ($adffe).
Mapping b12.$auto$ff.cc:262:slice$607 ($adffe).
Mapping b12.$auto$ff.cc:262:slice$610 ($adffe).
Mapping b12.$auto$ff.cc:262:slice$613 ($adffe).
Mapping b12.$auto$ff.cc:262:slice$616 ($adffe).
Mapping b12.$auto$ff.cc:262:slice$619 ($adffe).
Mapping b12.$auto$ff.cc:262:slice$622 ($adffe).
Mapping b12.$auto$ff.cc:262:slice$625 ($adffe).
Mapping b12.$auto$ff.cc:262:slice$628 ($adffe).
Mapping b12.$auto$ff.cc:262:slice$631 ($adffe).
Mapping b12.$auto$ff.cc:262:slice$634 ($adffe).
Mapping b12.$auto$ff.cc:262:slice$637 ($adffe).
Mapping b12.$auto$ff.cc:262:slice$640 ($adffe).
Mapping b12.$auto$ff.cc:262:slice$643 ($adffe).
Mapping b12.$auto$ff.cc:262:slice$646 ($adffe).
Mapping b12.$auto$ff.cc:262:slice$649 ($adffe).
Mapping b12.$auto$ff.cc:262:slice$652 ($adffe).
Mapping b12.$auto$ff.cc:262:slice$655 ($adffe).
Mapping b12.$auto$opt_dff.cc:220:make_patterns_logic$564 ($reduce_and).
Mapping b12.$auto$opt_dff.cc:220:make_patterns_logic$567 ($reduce_and).
Mapping b12.$auto$opt_dff.cc:220:make_patterns_logic$570 ($reduce_and).
Mapping b12.$auto$opt_dff.cc:220:make_patterns_logic$573 ($reduce_and).
Mapping b12.$auto$opt_dff.cc:220:make_patterns_logic$576 ($reduce_and).
Mapping b12.$auto$opt_dff.cc:220:make_patterns_logic$579 ($reduce_and).
Mapping b12.$auto$opt_dff.cc:220:make_patterns_logic$582 ($reduce_and).
Mapping b12.$auto$opt_dff.cc:220:make_patterns_logic$585 ($reduce_and).
Mapping b12.$auto$opt_dff.cc:220:make_patterns_logic$588 ($reduce_and).
Mapping b12.$auto$opt_dff.cc:220:make_patterns_logic$591 ($reduce_and).
Mapping b12.$auto$opt_dff.cc:220:make_patterns_logic$594 ($reduce_and).
Mapping b12.$auto$opt_dff.cc:220:make_patterns_logic$597 ($reduce_and).
Mapping b12.$auto$opt_dff.cc:220:make_patterns_logic$600 ($reduce_and).
Mapping b12.$auto$opt_dff.cc:220:make_patterns_logic$603 ($reduce_and).
Mapping b12.$auto$opt_dff.cc:220:make_patterns_logic$606 ($reduce_and).
Mapping b12.$auto$opt_dff.cc:220:make_patterns_logic$609 ($reduce_and).
Mapping b12.$auto$opt_dff.cc:220:make_patterns_logic$612 ($reduce_and).
Mapping b12.$auto$opt_dff.cc:220:make_patterns_logic$615 ($reduce_and).
Mapping b12.$auto$opt_dff.cc:220:make_patterns_logic$618 ($reduce_and).
Mapping b12.$auto$opt_dff.cc:220:make_patterns_logic$621 ($reduce_and).
Mapping b12.$auto$opt_dff.cc:220:make_patterns_logic$624 ($reduce_and).
Mapping b12.$auto$opt_dff.cc:220:make_patterns_logic$627 ($reduce_and).
Mapping b12.$auto$opt_dff.cc:220:make_patterns_logic$630 ($reduce_and).
Mapping b12.$auto$opt_dff.cc:220:make_patterns_logic$633 ($reduce_and).
Mapping b12.$auto$opt_dff.cc:220:make_patterns_logic$636 ($reduce_and).
Mapping b12.$auto$opt_dff.cc:220:make_patterns_logic$639 ($reduce_and).
Mapping b12.$auto$opt_dff.cc:220:make_patterns_logic$642 ($reduce_and).
Mapping b12.$auto$opt_dff.cc:220:make_patterns_logic$645 ($reduce_and).
Mapping b12.$auto$opt_dff.cc:220:make_patterns_logic$648 ($reduce_and).
Mapping b12.$auto$opt_dff.cc:220:make_patterns_logic$651 ($reduce_and).
Mapping b12.$auto$opt_dff.cc:220:make_patterns_logic$654 ($reduce_and).
Mapping b12.$auto$opt_dff.cc:220:make_patterns_logic$657 ($reduce_and).
Mapping b12.$verific$Mux_451$b12.vhd:562$535 ($bmux).
Mapping b12.$verific$Mux_453$b12.vhd:562$537 ($bmux).
Mapping b12.$verific$Mux_454$b12.vhd:562$538 ($bmux).
Mapping b12.$verific$Mux_58$b12.vhd:135$305 ($bmux).
Mapping b12.$verific$Mux_59$b12.vhd:135$306 ($bmux).
Mapping b12.$verific$address_reg$b12.vhd:564$557 ($adff).
Mapping b12.$verific$count_reg$b12.vhd:564$555 ($adff).
Mapping b12.$verific$count_reg_2$b12.vhd:164$319 ($adff).
Mapping b12.$verific$counter_reg$b12.vhd:144$313 ($adff).
Mapping b12.$verific$data_in_reg$b12.vhd:564$558 ($adff).
Mapping b12.$verific$data_out_reg$b12.vhd:184$391 ($adff).
Mapping b12.$verific$equal_203$b12.vhd:292$433 ($logic_not).
Mapping b12.$verific$equal_232$b12.vhd:344$445 ($logic_not).
Mapping b12.$verific$equal_239$b12.vhd:358$450 ($eq).
Mapping b12.$verific$equal_246$b12.vhd:372$455 ($eq).
Mapping b12.$verific$equal_253$b12.vhd:386$460 ($eq).
Mapping b12.$verific$gamma_reg$b12.vhd:564$559 ($adff).
Mapping b12.$verific$i11$b12.vhd:86$282 ($mux).
Mapping b12.$verific$i12$b12.vhd:86$283 ($mux).
Mapping b12.$verific$i197$b12.vhd:284$429 ($mux).
Mapping b12.$verific$i198$b12.vhd:284$430 ($mux).
Mapping b12.$verific$i199$b12.vhd:284$431 ($mux).
Mapping b12.$verific$i20$b12.vhd:95$286 ($mux).
Mapping b12.$verific$i200$b12.vhd:284$432 ($mux).
Mapping b12.$verific$i21$b12.vhd:95$287 ($mux).
Mapping b12.$verific$i211$b12.vhd:300$438 ($mux).
Mapping b12.$verific$i236$b12.vhd:349$447 ($mux).
Mapping b12.$verific$i243$b12.vhd:363$452 ($mux).
Mapping b12.$verific$i250$b12.vhd:377$457 ($mux).
Mapping b12.$verific$i257$b12.vhd:391$462 ($mux).
Mapping b12.$verific$i266$b12.vhd:394$471 ($mux).
Mapping b12.$verific$i267$b12.vhd:394$472 ($mux).
Mapping b12.$verific$i268$b12.vhd:394$473 ($mux).
Mapping b12.$verific$i269$b12.vhd:394$474 ($mux).
Mapping b12.$verific$i278$b12.vhd:394$483 ($mux).
Mapping b12.$verific$i279$b12.vhd:394$484 ($mux).
Mapping b12.$verific$i280$b12.vhd:394$485 ($mux).
Mapping b12.$verific$i281$b12.vhd:394$486 ($mux).
Mapping b12.$verific$i282$b12.vhd:396$487 ($mux).
Mapping b12.$verific$i288$b12.vhd:396$489 ($mux).
Mapping b12.$verific$i29$b12.vhd:104$290 ($mux).
Mapping b12.$verific$i291$b12.vhd:400$491 ($mux).
Mapping b12.$verific$i292$b12.vhd:400$492 ($mux).
Mapping b12.$verific$i293$b12.vhd:400$493 ($mux).
Mapping b12.$verific$i294$b12.vhd:400$494 ($mux).
Mapping b12.$verific$i30$b12.vhd:104$291 ($mux).
Mapping b12.$verific$i323$b12.vhd:431$509 ($mux).
Mapping b12.$verific$i324$b12.vhd:431$510 ($mux).
Mapping b12.$verific$i335$b12.vhd:436$517 ($mux).
Mapping b12.$verific$i38$b12.vhd:113$294 ($mux).
Mapping b12.$verific$i39$b12.vhd:113$295 ($mux).
Mapping b12.$verific$i395$b12.vhd:506$524 ($mux).
Mapping b12.$verific$i403$b12.vhd:510$529 ($mux).
Mapping b12.$verific$i427$b12.vhd:535$531 ($mux).
Mapping b12.$verific$i47$b12.vhd:122$298 ($mux).
Mapping b12.$verific$i48$b12.vhd:122$299 ($mux).
Mapping b12.$verific$i486$b12.vhd:349$443 ($not).
Mapping b12.$verific$i487$b12.vhd:363$446 ($not).
Mapping b12.$verific$i488$b12.vhd:377$451 ($not).
Mapping b12.$verific$i489$b12.vhd:391$456 ($not).
Mapping b12.$verific$i491$b12.vhd:431$461 ($not).
Mapping b12.$verific$i499$b12.vhd:560$532 ($not).
Mapping b12.$verific$i56$b12.vhd:131$302 ($mux).
Mapping b12.$verific$i57$b12.vhd:131$303 ($mux).
Mapping b12.$verific$i6$b12.vhd:81$276 ($not).
Mapping b12.$verific$i64$b12.vhd:142$309 ($mux).
Mapping b12.$verific$ind_reg$b12.vhd:564$553 ($adff).
Mapping b12.$verific$inv_504$b12.vhd:506$528 ($not).
Mapping b12.$verific$max_reg$b12.vhd:564$552 ($adff).
Mapping b12.$verific$mux_12$b12.vhd:86$284 ($mux).
Mapping b12.$verific$mux_184$b12.vhd:247$425 ($mux).
Mapping b12.$verific$mux_21$b12.vhd:95$288 ($mux).
Mapping b12.$verific$mux_257$b12.vhd:394$463 ($mux).
Mapping b12.$verific$mux_258$b12.vhd:394$464 ($mux).
Mapping b12.$verific$mux_259$b12.vhd:394$465 ($mux).
Mapping b12.$verific$mux_260$b12.vhd:394$466 ($mux).
Mapping b12.$verific$mux_261$b12.vhd:394$467 ($mux).
Mapping b12.$verific$mux_262$b12.vhd:394$468 ($mux).
Mapping b12.$verific$mux_263$b12.vhd:394$469 ($mux).
Mapping b12.$verific$mux_264$b12.vhd:394$470 ($mux).
Mapping b12.$verific$mux_269$b12.vhd:394$475 ($mux).
Mapping b12.$verific$mux_270$b12.vhd:394$476 ($mux).
Mapping b12.$verific$mux_271$b12.vhd:394$477 ($mux).
Mapping b12.$verific$mux_272$b12.vhd:394$478 ($mux).
Mapping b12.$verific$mux_273$b12.vhd:394$479 ($mux).
Mapping b12.$verific$mux_274$b12.vhd:394$480 ($mux).
Mapping b12.$verific$mux_275$b12.vhd:394$481 ($mux).
Mapping b12.$verific$mux_276$b12.vhd:394$482 ($mux).
Mapping b12.$verific$mux_285$b12.vhd:396$488 ($mux).
Mapping b12.$verific$mux_30$b12.vhd:104$292 ($mux).
Mapping b12.$verific$mux_317$b12.vhd:431$504 ($mux).
Mapping b12.$verific$mux_318$b12.vhd:431$505 ($mux).
Mapping b12.$verific$mux_319$b12.vhd:431$506 ($mux).
Mapping b12.$verific$mux_320$b12.vhd:431$507 ($mux).
Mapping b12.$verific$mux_321$b12.vhd:431$508 ($mux).
Mapping b12.$verific$mux_324$b12.vhd:431$511 ($mux).
Mapping b12.$verific$mux_325$b12.vhd:431$512 ($mux).
Mapping b12.$verific$mux_326$b12.vhd:431$513 ($mux).
Mapping b12.$verific$mux_327$b12.vhd:431$514 ($mux).
Mapping b12.$verific$mux_333$b12.vhd:436$516 ($mux).
Mapping b12.$verific$mux_39$b12.vhd:113$296 ($mux).
Mapping b12.$verific$mux_391$b12.vhd:506$522 ($mux).
Mapping b12.$verific$mux_393$b12.vhd:506$523 ($mux).
Mapping b12.$verific$mux_395$b12.vhd:506$525 ($mux).
Mapping b12.$verific$mux_396$b12.vhd:506$526 ($mux).
Mapping b12.$verific$mux_450$b12.vhd:562$534 ($bmux).
Mapping b12.$verific$mux_452$b12.vhd:562$536 ($bmux).
Mapping b12.$verific$mux_455$b12.vhd:562$539 ($bmux).
Mapping b12.$verific$mux_456$b12.vhd:562$540 ($bmux).
Mapping b12.$verific$mux_457$b12.vhd:562$541 ($bmux).
Mapping b12.$verific$mux_458$b12.vhd:562$542 ($bmux).
Mapping b12.$verific$mux_459$b12.vhd:562$543 ($bmux).
Mapping b12.$verific$mux_460$b12.vhd:562$544 ($bmux).
Mapping b12.$verific$mux_461$b12.vhd:562$545 ($bmux).
Mapping b12.$verific$mux_462$b12.vhd:562$546 ($bmux).
Mapping b12.$verific$mux_48$b12.vhd:122$300 ($mux).
Mapping b12.$verific$mux_499$b12.vhd:300$520 ($mux).
Mapping b12.$verific$mux_501$b12.vhd:560$424 ($mux).
Mapping b12.$verific$mux_503$b12.vhd:510$502 ($mux).
Mapping b12.$verific$mux_505$b12.vhd:436$518 ($mux).
Mapping b12.$verific$mux_506$b12.vhd:431$515 ($mux).
Mapping b12.$verific$mux_507$b12.vhd:510$503 ($mux).
Mapping b12.$verific$mux_508$b12.vhd:522$527 ($mux).
Mapping b12.$verific$mux_57$b12.vhd:131$304 ($mux).
Mapping b12.$verific$mux_60$b12.vhd:135$307 ($bmux).
Mapping b12.$verific$mux_64$b12.vhd:142$310 ($mux).
Mapping b12.$verific$mux_76$b12.vhd:180$323 ($bmux).
Mapping b12.$verific$nl_reg$b12.vhd:564$548 ($adff).
Mapping b12.$verific$nloss_reg$b12.vhd:564$547 ($adff).
Mapping b12.$verific$not_equal_214$b12.vhd:305$439 ($ne).
Mapping b12.$verific$not_equal_308$b12.vhd:422$495 ($ne).
Mapping b12.$verific$not_equal_380$b12.vhd:497$521 ($ne).
Mapping b12.$verific$play_reg$b12.vhd:564$549 ($adff).
Mapping b12.$verific$scan_reg$b12.vhd:564$551 ($adff).
Mapping b12.$verific$sound_reg$b12.vhd:564$556 ($adff).
Mapping b12.$verific$speaker_reg$b12.vhd:144$312 ($adff).
Mapping b12.$verific$timebase_reg$b12.vhd:564$554 ($adff).
Mapping b12.$verific$wr_reg$b12.vhd:564$550 ($adff).

24. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.
<suppressed ~839 debug messages>

25. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
<suppressed ~198 debug messages>
Removed a total of 66 cells.

26. Executing OPT_DFF pass (perform DFF optimizations).

27. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..
Removed 0 unused cells and 74 unused wires.
<suppressed ~1 debug messages>

28. Executing OPT pass (performing simple optimizations).

28.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.
<suppressed ~1 debug messages>

28.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

28.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

28.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

28.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

28.6. Executing OPT_DFF pass (perform DFF optimizations).

28.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..

28.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.

28.9. Finished OPT passes. (There is nothing left to do.)

29. Executing OPT pass (performing simple optimizations).

29.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.
<suppressed ~226 debug messages>

29.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

29.3. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $auto$ff.cc:262:slice$726 ($_DFFE_PP0P_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$971, Q = \s).
Adding EN signal on $auto$ff.cc:262:slice$2920 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$961, Q = \wr).
Adding EN signal on $auto$ff.cc:262:slice$2919 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$1885 [5], Q = \timebase [5]).
Adding EN signal on $auto$ff.cc:262:slice$2918 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$1885 [4], Q = \timebase [4]).
Adding EN signal on $auto$ff.cc:262:slice$2917 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$1885 [3], Q = \timebase [3]).
Adding EN signal on $auto$ff.cc:262:slice$2916 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$1885 [2], Q = \timebase [2]).
Adding EN signal on $auto$ff.cc:262:slice$2915 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$1885 [1], Q = \timebase [1]).
Adding EN signal on $auto$ff.cc:262:slice$2914 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$1885 [0], Q = \timebase [0]).
Adding EN signal on $auto$ff.cc:262:slice$2912 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$2564 [2], Q = \sound [2]).
Adding EN signal on $auto$ff.cc:262:slice$2911 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$2564 [1], Q = \sound [1]).
Adding EN signal on $auto$ff.cc:262:slice$2910 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$2564 [0], Q = \sound [0]).
Adding EN signal on $auto$ff.cc:262:slice$2909 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$2046 [4], Q = \scan [4]).
Adding EN signal on $auto$ff.cc:262:slice$2908 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$2046 [3], Q = \scan [3]).
Adding EN signal on $auto$ff.cc:262:slice$2907 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$2046 [2], Q = \scan [2]).
Adding EN signal on $auto$ff.cc:262:slice$2906 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$2046 [1], Q = \scan [1]).
Adding EN signal on $auto$ff.cc:262:slice$2905 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$2046 [0], Q = \scan [0]).
Adding EN signal on $auto$ff.cc:262:slice$2904 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$925, Q = \play).
Adding EN signal on $auto$ff.cc:262:slice$2858 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$889, Q = \nloss).
Adding EN signal on $auto$ff.cc:262:slice$2857 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$1536 [3], Q = \nl [3]).
Adding EN signal on $auto$ff.cc:262:slice$2856 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$1536 [2], Q = \nl [2]).
Adding EN signal on $auto$ff.cc:262:slice$2855 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$1536 [1], Q = \nl [1]).
Adding EN signal on $auto$ff.cc:262:slice$2854 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$1536 [0], Q = \nl [0]).
Adding EN signal on $auto$ff.cc:262:slice$1107 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$1695 [4], Q = \max [4]).
Adding EN signal on $auto$ff.cc:262:slice$1106 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$1695 [3], Q = \max [3]).
Adding EN signal on $auto$ff.cc:262:slice$1105 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$1695 [2], Q = \max [2]).
Adding EN signal on $auto$ff.cc:262:slice$1104 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$1695 [1], Q = \max [1]).
Adding EN signal on $auto$ff.cc:262:slice$1103 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$1695 [0], Q = \max [0]).
Adding EN signal on $auto$ff.cc:262:slice$1100 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$2632 [1], Q = \ind [1]).
Adding EN signal on $auto$ff.cc:262:slice$1099 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$2632 [0], Q = \ind [0]).
Adding EN signal on $auto$ff.cc:262:slice$1000 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$2276 [1], Q = \data_in [1]).
Adding EN signal on $auto$ff.cc:262:slice$999 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$2276 [0], Q = \data_in [0]).
Adding EN signal on $auto$ff.cc:262:slice$993 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$2463 [5], Q = \count [5]).
Adding EN signal on $auto$ff.cc:262:slice$992 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$2463 [4], Q = \count [4]).
Adding EN signal on $auto$ff.cc:262:slice$991 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$2463 [3], Q = \count [3]).
Adding EN signal on $auto$ff.cc:262:slice$990 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$2463 [2], Q = \count [2]).
Adding EN signal on $auto$ff.cc:262:slice$989 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$2463 [1], Q = \count [1]).
Adding EN signal on $auto$ff.cc:262:slice$988 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$2463 [0], Q = \count [0]).
Adding EN signal on $auto$ff.cc:262:slice$987 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$2206 [4], Q = \address [4]).
Adding EN signal on $auto$ff.cc:262:slice$986 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$2206 [3], Q = \address [3]).
Adding EN signal on $auto$ff.cc:262:slice$985 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$2206 [2], Q = \address [2]).
Adding EN signal on $auto$ff.cc:262:slice$984 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$2206 [1], Q = \address [1]).
Adding EN signal on $auto$ff.cc:262:slice$983 ($_DFF_PP0_) from module b12 (D = $auto$simplemap.cc:309:simplemap_bmux$2206 [0], Q = \address [0]).

29.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..
Removed 2 unused cells and 447 unused wires.
<suppressed ~3 debug messages>

29.5. Rerunning OPT passes. (Removed registers in this run.)

29.6. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.
<suppressed ~2268 debug messages>

29.7. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
<suppressed ~7317 debug messages>
Removed a total of 2439 cells.

29.8. Executing OPT_DFF pass (perform DFF optimizations).

29.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..
Removed 0 unused cells and 2289 unused wires.
<suppressed ~1 debug messages>

29.10. Finished fast OPT passes.

30. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

31. Executing OPT pass (performing simple optimizations).

31.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.
<suppressed ~22 debug messages>

31.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

31.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

31.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

31.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

31.6. Executing OPT_SHARE pass.
    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$1068 in front of them:
        $auto$simplemap.cc:278:simplemap_mux$1061
        $auto$simplemap.cc:278:simplemap_mux$1062

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$1353 in front of them:
        $auto$simplemap.cc:312:simplemap_bmux$1292
        $auto$simplemap.cc:312:simplemap_bmux$1287

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$2761 in front of them:
        $auto$simplemap.cc:278:simplemap_mux$1116
        $auto$simplemap.cc:278:simplemap_mux$1108

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$2762 in front of them:
        $auto$simplemap.cc:278:simplemap_mux$1117
        $auto$simplemap.cc:278:simplemap_mux$1109

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$2763 in front of them:
        $auto$simplemap.cc:278:simplemap_mux$1118
        $auto$simplemap.cc:278:simplemap_mux$1110

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$2764 in front of them:
        $auto$simplemap.cc:278:simplemap_mux$1231
        $auto$simplemap.cc:278:simplemap_mux$1177

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$2765 in front of them:
        $auto$simplemap.cc:278:simplemap_mux$1232
        $auto$simplemap.cc:278:simplemap_mux$1178

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$2766 in front of them:
        $auto$simplemap.cc:278:simplemap_mux$1233
        $auto$simplemap.cc:278:simplemap_mux$1179

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$2767 in front of them:
        $auto$simplemap.cc:278:simplemap_mux$2757
        $auto$simplemap.cc:278:simplemap_mux$2635

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$2768 in front of them:
        $auto$simplemap.cc:278:simplemap_mux$2758
        $auto$simplemap.cc:278:simplemap_mux$2636

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$2769 in front of them:
        $auto$simplemap.cc:278:simplemap_mux$2759
        $auto$simplemap.cc:278:simplemap_mux$2637

31.7. Executing OPT_DFF pass (perform DFF optimizations).

31.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..
Removed 0 unused cells and 9 unused wires.
<suppressed ~1 debug messages>

31.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.
<suppressed ~11 debug messages>

31.10. Rerunning OPT passes. (Maybe there is more to do..)

31.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~11 debug messages>

31.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

31.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
<suppressed ~18 debug messages>
Removed a total of 6 cells.

31.14. Executing OPT_SHARE pass.
    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$1069 in front of them:
        $auto$simplemap.cc:278:simplemap_mux$1060
        $auto$simplemap.cc:278:simplemap_mux$1061

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$2774 in front of them:
        $auto$simplemap.cc:278:simplemap_mux$1231
        $auto$simplemap.cc:278:simplemap_mux$1116

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$2775 in front of them:
        $auto$simplemap.cc:278:simplemap_mux$1232
        $auto$simplemap.cc:278:simplemap_mux$1117

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$2776 in front of them:
        $auto$simplemap.cc:278:simplemap_mux$1233
        $auto$simplemap.cc:278:simplemap_mux$1118

31.15. Executing OPT_DFF pass (perform DFF optimizations).

31.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..
Removed 0 unused cells and 16 unused wires.
<suppressed ~1 debug messages>

31.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.
<suppressed ~4 debug messages>

31.18. Rerunning OPT passes. (Maybe there is more to do..)

31.19. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~8 debug messages>

31.20. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

31.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

31.22. Executing OPT_SHARE pass.
    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:278:simplemap_mux$1070 in front of them:
        $auto$simplemap.cc:278:simplemap_mux$1059
        $auto$simplemap.cc:278:simplemap_mux$1060

31.23. Executing OPT_DFF pass (perform DFF optimizations).

31.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..
Removed 0 unused cells and 5 unused wires.
<suppressed ~1 debug messages>

31.25. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.
<suppressed ~1 debug messages>

31.26. Rerunning OPT passes. (Maybe there is more to do..)

31.27. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

31.28. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

31.29. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

31.30. Executing OPT_SHARE pass.

31.31. Executing OPT_DFF pass (perform DFF optimizations).

31.32. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

31.33. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.

31.34. Rerunning OPT passes. (Maybe there is more to do..)

31.35. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

31.36. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

31.37. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

31.38. Executing OPT_SHARE pass.

31.39. Executing OPT_DFF pass (perform DFF optimizations).

31.40. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..

31.41. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.

31.42. Finished OPT passes. (There is nothing left to do.)

32. Executing TECHMAP pass (map to technology primitives).

32.1. Executing Verilog-2005 frontend: /home/users/aram/Workspace/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/aram/Workspace/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

32.2. Continuing TECHMAP pass.
Using template $paramod$78e969f2586efcf3a5b0b0440bcca0db83d5cca2\_90_alu for cells of type $alu.
Using template $paramod$7e708ae28ab761f11d0fb59d3ffc72f6a4baf5d9\_90_alu for cells of type $alu.
Using template $paramod$a04dd9d4d8b430140c4ff94b50470fb380fda2a0\_90_alu for cells of type $alu.
Using template $paramod$672a140277c71df8314410f22acc08d55222c3c7\_90_alu for cells of type $alu.
Using template $paramod$adbaf76fa5a3091a329503792521395f8ff4d1a4\_90_alu for cells of type $alu.
Using template $paramod$79fc7abbb3333dbd5736999d565fd903198fb1eb\_90_alu for cells of type $alu.
Using template $paramod$3ef7d3dd227da7627a99c5e5a6a4deb817573e39\_90_alu for cells of type $alu.
Using template $paramod$d1615bf4e5e328245ffd1550e5fe105901cda77b\_90_alu for cells of type $alu.
Using template $paramod$constmap:dbcddb7b4524c1c5fa25e15435f3b9049e3d7d7a$paramod$3bf4391c2edcd7fdc564361d03ba2cf3a33c67d4\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using template $paramod$constmap:66d421c313e4e958be776b99540ac2de3b59fdbc$paramod$77562a466236eb4a6d905351a0995599b75075cb\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using template $paramod$175e67c02b86e96b1288b9dc100122520d7240d8\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000110 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000101 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000010 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000011 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000001 for cells of type $lcu.
Using extmapper simplemap for cells of type $or.
No more expansions possible.
<suppressed ~1479 debug messages>

33. Executing OPT pass (performing simple optimizations).

33.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.
<suppressed ~214 debug messages>

33.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
<suppressed ~81 debug messages>
Removed a total of 27 cells.

33.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

33.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

33.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

33.6. Executing OPT_DFF pass (perform DFF optimizations).

33.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..
Removed 26 unused cells and 394 unused wires.
<suppressed ~27 debug messages>

33.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.

33.9. Rerunning OPT passes. (Maybe there is more to do..)

33.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

33.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

33.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

33.13. Executing OPT_DFF pass (perform DFF optimizations).

33.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..

33.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.

33.16. Finished OPT passes. (There is nothing left to do.)

34. Executing ABC pass (technology mapping using ABC).

34.1. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Extracted 984 gates and 1108 wires to a netlist network with 122 inputs and 103 outputs.

34.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + source /home/users/aram/Workspace/yosys_verific_rs/scripts/synth/abc/abc_base6.a21.scr 
ABC: netlist  : i/o =    122/    103  and =    1443  lev =   18 (8.42)  mem = 0.02 MB
ABC: Mapping (K=6)  :  lut =    264  edge =    1233  lev =    7 (2.77)  mem = 0.01 MB
ABC: netlist  : i/o =    122/    103  and =    1447  lev =   17 (7.62)  mem = 0.02 MB
ABC: Mapping (K=6)  :  lut =    246  edge =    1192  lev =    7 (3.08)  mem = 0.01 MB
ABC: netlist  : i/o =    122/    103  and =    1449  lev =   15 (7.64)  mem = 0.02 MB
ABC: Mapping (K=6)  :  lut =    255  edge =    1220  lev =    7 (3.18)  mem = 0.01 MB
ABC: netlist  : i/o =    122/    103  and =    1464  lev =   17 (6.90)  mem = 0.02 MB
ABC: Mapping (K=6)  :  lut =    248  edge =    1198  lev =    7 (3.12)  mem = 0.01 MB
ABC: netlist  : i/o =    122/    103  and =    1429  lev =   15 (7.60)  mem = 0.02 MB
ABC: Mapping (K=6)  :  lut =    243  edge =    1174  lev =    7 (3.12)  mem = 0.01 MB
ABC: netlist  : i/o =    122/    103  and =    1450  lev =   15 (8.06)  mem = 0.03 MB
ABC: Mapping (K=6)  :  lut =    237  edge =    1179  lev =    7 (2.98)  mem = 0.01 MB
ABC: netlist  : i/o =    122/    103  and =    1453  lev =   17 (7.62)  mem = 0.03 MB
ABC: Mapping (K=6)  :  lut =    241  edge =    1176  lev =    7 (2.98)  mem = 0.01 MB
ABC: netlist  : i/o =    122/    103  and =    1443  lev =   15 (7.70)  mem = 0.03 MB
ABC: Mapping (K=6)  :  lut =    240  edge =    1174  lev =    7 (3.08)  mem = 0.01 MB
ABC: netlist  : i/o =    122/    103  and =    1455  lev =   15 (7.42)  mem = 0.03 MB
ABC: Mapping (K=6)  :  lut =    241  edge =    1179  lev =    8 (3.43)  mem = 0.01 MB
ABC: netlist  : i/o =    122/    103  and =    1437  lev =   18 (8.11)  mem = 0.03 MB
ABC: Mapping (K=6)  :  lut =    238  edge =    1182  lev =    8 (3.45)  mem = 0.01 MB
ABC: netlist  : i/o =    122/    103  and =    1443  lev =   16 (8.17)  mem = 0.03 MB
ABC: Mapping (K=6)  :  lut =    237  edge =    1171  lev =   10 (3.98)  mem = 0.01 MB
ABC: netlist  : i/o =    122/    103  and =    1464  lev =   17 (8.25)  mem = 0.03 MB
ABC: Mapping (K=6)  :  lut =    236  edge =    1175  lev =    9 (3.84)  mem = 0.01 MB
ABC: netlist  : i/o =    122/    103  and =    1460  lev =   17 (8.29)  mem = 0.03 MB
ABC: Mapping (K=6)  :  lut =    233  edge =    1170  lev =    9 (3.86)  mem = 0.01 MB
ABC: netlist  : i/o =    122/    103  and =    1460  lev =   17 (8.29)  mem = 0.02 MB
ABC: Mapping (K=6)  :  lut =    233  edge =    1170  lev =    9 (3.86)  mem = 0.01 MB
ABC: netlist  : i/o =    122/    103  and =    1460  lev =   17 (8.29)  mem = 0.03 MB
ABC: Mapping (K=6)  :  lut =    233  edge =    1170  lev =    9 (3.86)  mem = 0.01 MB
ABC: netlist  : i/o =    122/    103  and =    1447  lev =   17 (8.28)  mem = 0.02 MB
ABC: Mapping (K=6)  :  lut =    233  edge =    1170  lev =    9 (3.86)  mem = 0.01 MB
ABC: + write_blif <abc-temp-dir>/output.blif 

34.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:      235
ABC RESULTS:        internal signals:      883
ABC RESULTS:           input signals:      122
ABC RESULTS:          output signals:      103
Removing temp directory.

35. Executing OPT pass (performing simple optimizations).

35.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.

35.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

35.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

35.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

35.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

35.6. Executing OPT_DFF pass (perform DFF optimizations).

35.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..
Removed 0 unused cells and 493 unused wires.
<suppressed ~1 debug messages>

35.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.

35.9. Rerunning OPT passes. (Maybe there is more to do..)

35.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

35.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

35.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

35.13. Executing OPT_DFF pass (perform DFF optimizations).

35.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..

35.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.

35.16. Finished OPT passes. (There is nothing left to do.)

36. Executing HIERARCHY pass (managing design hierarchy).

36.1. Analyzing design hierarchy..
Top module:  \b12

36.2. Analyzing design hierarchy..
Top module:  \b12
Removed 0 unused modules.

37. Printing statistics.

=== b12 ===

   Number of wires:                291
   Number of wire bits:            370
   Number of public wires:          56
   Number of public wire bits:     133
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                354
     $_DFFE_PP0P_                  106
     $_DFF_PP0_                     13
     $lut                          235

38. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..
Removed 0 unused cells and 2 unused wires.
<suppressed ~2 debug messages>

39. Executing BLIF backend.

End of script. Logfile hash: 1241d04c30, CPU: user 3.19s system 0.04s, MEM: 26.66 MB peak
Yosys 0.14+36 (git sha1 15a4e900b, gcc 7.1.0 -fPIC -Os)
Time spent: 55% 1x abc (3 sec), 19% 43x opt_expr (1 sec), ...
