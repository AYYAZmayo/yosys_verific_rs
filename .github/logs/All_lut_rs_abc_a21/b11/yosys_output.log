
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.14+36 (git sha1 15a4e900b, gcc 7.1.0 -fPIC -Os)


-- Executing script file `yosys.ys' --

1. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Jan22_SW_Release, released at Sat Jan 29 02:42:49 2022.

2. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Jan22_SW_Release, released at Sat Jan 29 02:42:49 2022.
VERIFIC-INFO [VHDL-1504] default VHDL library search path is now "/home/users/aram/Workspace/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008"
VERIFIC-COMMENT [VHDL-1481] Analyzing VHDL file 'b11.vhd'
VERIFIC-COMMENT [VHDL-1493] Restoring VHDL unit 'std.standard' from file '/home/users/aram/Workspace/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008/std/standard.vdb'
VERIFIC-INFO [VHDL-1012] b11.vhd:1: analyzing entity 'b11'
VERIFIC-INFO [VHDL-1010] b11.vhd:11: analyzing architecture 'behav'

3. Executing HIERARCHY pass (managing design hierarchy).
VERIFIC-INFO [VHDL-1067] b11.vhd:1: processing 'b11(BEHAV)'
Importing module standard.
Importing module b11.

3.1. Analyzing design hierarchy..
Top module:  \b11

3.2. Analyzing design hierarchy..
Top module:  \b11
Removing unused module `\standard'.
Removed 1 unused modules.

4. Executing PROC pass (convert processes to netlists).

4.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

4.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

4.4. Executing PROC_INIT pass (extract init attributes).

4.5. Executing PROC_ARST pass (detect async resets in processes).

4.6. Executing PROC_MUX pass (convert decision trees to multiplexers).

4.7. Executing PROC_DLATCH pass (convert process syncs to latches).

4.8. Executing PROC_DFF pass (convert process syncs to FFs).

4.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

4.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module b11.
<suppressed ~3 debug messages>

5. Executing FLATTEN pass (flatten design).

6. Executing TRIBUF pass.

7. Executing OPT_EXPR pass (perform const folding).
Optimizing module b11.

8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b11..
Removed 1 unused cells and 29 unused wires.
<suppressed ~13 debug messages>

9. Executing CHECK pass (checking for obvious problems).
Checking module b11...
Found and reported 0 problems.

10. Executing DEMINOUT pass (demote inout ports to input or output).

11. Executing OPT pass (performing simple optimizations).

11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b11.

11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b11'.
Removed a total of 0 cells.

11.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b11..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~9 debug messages>

11.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b11.
Performed a total of 0 changes.

11.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b11'.
Removed a total of 0 cells.

11.6. Executing OPT_DFF pass (perform DFF optimizations).
Changing const-value async load to async reset on $verific$x_out_reg$b11.vhd:116$145 ($aldff) from module b11.
Changing const-value async load to async reset on $verific$stato_reg$b11.vhd:116$141 ($aldff) from module b11.
Changing const-value async load to async reset on $verific$r_in_reg$b11.vhd:116$142 ($aldff) from module b11.
Changing const-value async load to async reset on $verific$cont_reg$b11.vhd:116$143 ($aldff) from module b11.
Changing const-value async load to async reset on $verific$cont1_reg$b11.vhd:116$144 ($aldff) from module b11.

11.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b11..

11.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module b11.

11.9. Rerunning OPT passes. (Maybe there is more to do..)

11.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b11..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~9 debug messages>

11.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b11.
Performed a total of 0 changes.

11.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b11'.
Removed a total of 0 cells.

11.13. Executing OPT_DFF pass (perform DFF optimizations).

11.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b11..

11.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module b11.

11.16. Finished OPT passes. (There is nothing left to do.)

12. Executing FSM pass (extract and optimize FSM).

12.1. Executing FSM_DETECT pass (finding FSMs in design).

12.2. Executing FSM_EXTRACT pass (extracting FSM from design).

12.3. Executing FSM_OPT pass (simple optimizations of FSMs).

12.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b11..

12.5. Executing FSM_OPT pass (simple optimizations of FSMs).

12.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

12.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

12.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

13. Executing OPT pass (performing simple optimizations).

13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b11.

13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b11'.
Removed a total of 0 cells.

13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b11..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~9 debug messages>

13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b11.
Performed a total of 0 changes.

13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b11'.
Removed a total of 0 cells.

13.6. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 5 on $verific$cont_reg$b11.vhd:116$143 ($adff) from module b11.

13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b11..

13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module b11.

13.9. Rerunning OPT passes. (Maybe there is more to do..)

13.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b11..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~9 debug messages>

13.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b11.
Performed a total of 0 changes.

13.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b11'.
Removed a total of 0 cells.

13.13. Executing OPT_DFF pass (perform DFF optimizations).

13.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b11..

13.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module b11.

13.16. Finished OPT passes. (There is nothing left to do.)

14. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 6) from port A of cell b11.$verific$LessThan_11$b11.vhd:52$90 ($lt).
Removed top 1 bits (of 6) from port B of cell b11.$verific$LessThan_11$b11.vhd:52$90 ($lt).
Removed top 1 bits (of 6) from port A of cell b11.$verific$add_12$b11.vhd:53$91 ($add).
Removed top 5 bits (of 6) from port B of cell b11.$verific$add_12$b11.vhd:53$91 ($add).
Removed top 1 bits (of 7) from port Y of cell b11.$verific$add_12$b11.vhd:53$91 ($add).
Removed top 1 bits (of 6) from port B of cell b11.$verific$LessThan_16$b11.vhd:59$96 ($le).
Removed top 1 bits (of 7) from mux cell b11.$verific$mux_28$b11.vhd:69$100 ($mux).
Removed top 3 bits (of 9) from port A of cell b11.$verific$add_30$b11.vhd:73$101 ($add).
Removed top 4 bits (of 10) from port A of cell b11.$verific$sub_32$b11.vhd:76$102 ($sub).
Removed top 1 bits (of 10) from port Y of cell b11.$verific$sub_32$b11.vhd:76$102 ($sub).
Removed top 1 bits (of 10) from port B of cell b11.$verific$sub_32$b11.vhd:76$102 ($sub).
Removed top 1 bits (of 9) from port B of cell b11.$verific$LessThan_36$b11.vhd:80$105 ($lt).
Removed top 5 bits (of 10) from port B of cell b11.$verific$sub_37$b11.vhd:81$106 ($sub).
Removed top 1 bits (of 10) from port Y of cell b11.$verific$sub_37$b11.vhd:81$106 ($sub).
Removed top 1 bits (of 10) from port A of cell b11.$verific$sub_37$b11.vhd:81$106 ($sub).
Removed top 1 bits (of 9) from port B of cell b11.$verific$LessThan_41$b11.vhd:87$110 ($lt).
Removed top 4 bits (of 8) from port B of cell b11.$verific$add_43$b11.vhd:88$112 ($add).
Removed top 1 bits (of 9) from port Y of cell b11.$verific$add_43$b11.vhd:88$112 ($add).
Removed top 5 bits (of 10) from port B of cell b11.$verific$sub_48$b11.vhd:95$117 ($sub).
Removed top 1 bits (of 10) from port Y of cell b11.$verific$sub_48$b11.vhd:95$117 ($sub).
Removed top 1 bits (of 10) from port A of cell b11.$verific$sub_48$b11.vhd:95$117 ($sub).
Removed top 1 bits (of 2) from port A of cell b11.$verific$equal_50$b11.vhd:96$120 ($eq).
Removed top 4 bits (of 10) from port B of cell b11.$verific$sub_51$b11.vhd:97$121 ($sub).
Removed top 1 bits (of 10) from port Y of cell b11.$verific$sub_51$b11.vhd:97$121 ($sub).
Removed top 1 bits (of 10) from port A of cell b11.$verific$sub_51$b11.vhd:97$121 ($sub).
Removed top 6 bits (of 9) from port B of cell b11.$verific$add_55$b11.vhd:99$125 ($add).
Removed top 4 bits (of 7) from port B of cell b11.$verific$add_58$b11.vhd:101$126 ($add).
Removed top 1 bits (of 9) from port A of cell b11.$verific$LessThan_63$b11.vhd:105$130 ($lt).
Removed top 4 bits (of 10) from port Y of cell b11.$verific$unary_minus_64$b11.vhd:108$131 ($neg).
Removed top 4 bits (of 10) from port A of cell b11.$verific$unary_minus_64$b11.vhd:108$131 ($neg).
Removed top 1 bits (of 7) from wire b11.$verific$n160$44.
Removed top 1 bits (of 10) from wire b11.$verific$n191$47.
Removed top 1 bits (of 3) from wire b11.$verific$n223$50.
Removed top 1 bits (of 10) from wire b11.$verific$n228$51.
Removed top 1 bits (of 3) from wire b11.$verific$n260$54.
Removed top 2 bits (of 3) from wire b11.$verific$n297$58.
Removed top 1 bits (of 10) from wire b11.$verific$n302$59.
Removed top 4 bits (of 10) from wire b11.$verific$n423$70.
Removed top 1 bits (of 6) from wire b11.cont.

15. Executing PEEPOPT pass (run peephole optimizers).

16. Executing PMUXTREE pass.

17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b11..
Removed 0 unused cells and 16 unused wires.
<suppressed ~1 debug messages>

18. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module b11:
  creating $macc model for $verific$add_12$b11.vhd:53$91 ($add).
  creating $macc model for $verific$add_30$b11.vhd:73$101 ($add).
  creating $macc model for $verific$add_43$b11.vhd:88$112 ($add).
  creating $macc model for $verific$add_55$b11.vhd:99$125 ($add).
  creating $macc model for $verific$add_58$b11.vhd:101$126 ($add).
  creating $macc model for $verific$sub_32$b11.vhd:76$102 ($sub).
  creating $macc model for $verific$sub_37$b11.vhd:81$106 ($sub).
  creating $macc model for $verific$sub_48$b11.vhd:95$117 ($sub).
  creating $macc model for $verific$sub_51$b11.vhd:97$121 ($sub).
  creating $macc model for $verific$unary_minus_64$b11.vhd:108$131 ($neg).
  creating $alu model for $macc $verific$unary_minus_64$b11.vhd:108$131.
  creating $alu model for $macc $verific$sub_51$b11.vhd:97$121.
  creating $alu model for $macc $verific$sub_48$b11.vhd:95$117.
  creating $alu model for $macc $verific$sub_37$b11.vhd:81$106.
  creating $alu model for $macc $verific$sub_32$b11.vhd:76$102.
  creating $alu model for $macc $verific$add_58$b11.vhd:101$126.
  creating $alu model for $macc $verific$add_55$b11.vhd:99$125.
  creating $alu model for $macc $verific$add_43$b11.vhd:88$112.
  creating $alu model for $macc $verific$add_30$b11.vhd:73$101.
  creating $alu model for $macc $verific$add_12$b11.vhd:53$91.
  creating $alu model for $verific$LessThan_11$b11.vhd:52$90 ($lt): new $alu
  creating $alu model for $verific$LessThan_16$b11.vhd:59$96 ($le): new $alu
  creating $alu model for $verific$LessThan_36$b11.vhd:80$105 ($lt): new $alu
  creating $alu model for $verific$LessThan_41$b11.vhd:87$110 ($lt): new $alu
  creating $alu model for $verific$LessThan_63$b11.vhd:105$130 ($lt): new $alu
  creating $alu cell for $verific$LessThan_63$b11.vhd:105$130: $auto$alumacc.cc:485:replace_alu$162
  creating $alu cell for $verific$LessThan_41$b11.vhd:87$110: $auto$alumacc.cc:485:replace_alu$167
  creating $alu cell for $verific$LessThan_36$b11.vhd:80$105: $auto$alumacc.cc:485:replace_alu$178
  creating $alu cell for $verific$LessThan_16$b11.vhd:59$96: $auto$alumacc.cc:485:replace_alu$189
  creating $alu cell for $verific$LessThan_11$b11.vhd:52$90: $auto$alumacc.cc:485:replace_alu$202
  creating $alu cell for $verific$add_12$b11.vhd:53$91: $auto$alumacc.cc:485:replace_alu$213
  creating $alu cell for $verific$add_43$b11.vhd:88$112: $auto$alumacc.cc:485:replace_alu$216
  creating $alu cell for $verific$add_55$b11.vhd:99$125: $auto$alumacc.cc:485:replace_alu$219
  creating $alu cell for $verific$add_58$b11.vhd:101$126: $auto$alumacc.cc:485:replace_alu$222
  creating $alu cell for $verific$add_30$b11.vhd:73$101: $auto$alumacc.cc:485:replace_alu$225
  creating $alu cell for $verific$sub_32$b11.vhd:76$102: $auto$alumacc.cc:485:replace_alu$228
  creating $alu cell for $verific$sub_37$b11.vhd:81$106: $auto$alumacc.cc:485:replace_alu$231
  creating $alu cell for $verific$sub_48$b11.vhd:95$117: $auto$alumacc.cc:485:replace_alu$234
  creating $alu cell for $verific$sub_51$b11.vhd:97$121: $auto$alumacc.cc:485:replace_alu$237
  creating $alu cell for $verific$unary_minus_64$b11.vhd:108$131: $auto$alumacc.cc:485:replace_alu$240
  created 15 $alu and 0 $macc cells.

19. Executing OPT pass (performing simple optimizations).

19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b11.
<suppressed ~4 debug messages>

19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b11'.
Removed a total of 0 cells.

19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b11..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~9 debug messages>

19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b11.
Performed a total of 0 changes.

19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b11'.
Removed a total of 0 cells.

19.6. Executing OPT_DFF pass (perform DFF optimizations).

19.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b11..
Removed 2 unused cells and 7 unused wires.
<suppressed ~3 debug messages>

19.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module b11.

19.9. Rerunning OPT passes. (Maybe there is more to do..)

19.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b11..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~9 debug messages>

19.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b11.
Performed a total of 0 changes.

19.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b11'.
Removed a total of 0 cells.

19.13. Executing OPT_DFF pass (perform DFF optimizations).

19.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b11..

19.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module b11.

19.16. Finished OPT passes. (There is nothing left to do.)

20. Executing MEMORY pass.

20.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

20.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

20.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

20.4. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

20.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b11..

20.6. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

20.7. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

20.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b11..

20.9. Executing MEMORY_COLLECT pass (generating $mem cells).

21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b11..

22. Executing OPT_EXPR pass (perform const folding).
Optimizing module b11.

23. Executing SIMPLEMAP pass (map simple cells to gate primitives).
Mapping b11.$auto$alumacc.cc:520:replace_alu$200 ($reduce_or).
Mapping b11.$auto$alumacc.cc:67:get_gt$174 ($or).
Mapping b11.$auto$alumacc.cc:67:get_gt$185 ($or).
Mapping b11.$auto$alumacc.cc:67:get_gt$196 ($or).
Mapping b11.$auto$alumacc.cc:67:get_gt$209 ($or).
Mapping b11.$auto$alumacc.cc:68:get_gt$176 ($not).
Mapping b11.$auto$alumacc.cc:68:get_gt$187 ($not).
Mapping b11.$auto$alumacc.cc:68:get_gt$198 ($not).
Mapping b11.$auto$alumacc.cc:75:get_eq$172 ($reduce_and).
Mapping b11.$auto$alumacc.cc:75:get_eq$183 ($reduce_and).
Mapping b11.$auto$alumacc.cc:75:get_eq$194 ($reduce_and).
Mapping b11.$auto$alumacc.cc:75:get_eq$207 ($reduce_and).
Mapping b11.$auto$alumacc.cc:89:get_cf$170 ($not).
Mapping b11.$auto$alumacc.cc:89:get_cf$181 ($not).
Mapping b11.$auto$alumacc.cc:89:get_cf$192 ($not).
Mapping b11.$auto$alumacc.cc:89:get_cf$205 ($not).
Mapping b11.$auto$ff.cc:262:slice$147 ($adff).
Mapping b11.$verific$cont1_reg$b11.vhd:116$144 ($adff).
Mapping b11.$verific$equal_47$b11.vhd:94$116 ($logic_not).
Mapping b11.$verific$equal_50$b11.vhd:96$120 ($eq).
Mapping b11.$verific$equal_53$b11.vhd:98$124 ($eq).
Mapping b11.$verific$equal_8$b11.vhd:51$87 ($logic_not).
Mapping b11.$verific$equal_9$b11.vhd:51$88 ($eq).
Mapping b11.$verific$i11$b11.vhd:51$89 ($or).
Mapping b11.$verific$inv_87$b11.vhd:92$85 ($not).
Mapping b11.$verific$mux_14$b11.vhd:56$94 ($mux).
Mapping b11.$verific$mux_17$b11.vhd:63$97 ($mux).
Mapping b11.$verific$mux_18$b11.vhd:63$98 ($mux).
Mapping b11.$verific$mux_20$b11.vhd:63$99 ($mux).
Mapping b11.$verific$mux_28$b11.vhd:69$100 ($mux).
Mapping b11.$verific$mux_34$b11.vhd:78$104 ($mux).
Mapping b11.$verific$mux_39$b11.vhd:85$109 ($mux).
Mapping b11.$verific$mux_45$b11.vhd:92$115 ($mux).
Mapping b11.$verific$mux_60$b11.vhd:102$127 ($mux).
Mapping b11.$verific$mux_61$b11.vhd:102$128 ($mux).
Mapping b11.$verific$mux_62$b11.vhd:102$129 ($mux).
Mapping b11.$verific$mux_67$b11.vhd:113$135 ($mux).
Mapping b11.$verific$mux_68$b11.vhd:115$136 ($bmux).
Mapping b11.$verific$mux_69$b11.vhd:115$137 ($bmux).
Mapping b11.$verific$mux_70$b11.vhd:115$138 ($bmux).
Mapping b11.$verific$mux_71$b11.vhd:115$139 ($bmux).
Mapping b11.$verific$mux_72$b11.vhd:115$140 ($bmux).
Mapping b11.$verific$r_in_reg$b11.vhd:116$142 ($adff).
Mapping b11.$verific$stato_reg$b11.vhd:116$141 ($adff).
Mapping b11.$verific$x_out_reg$b11.vhd:116$145 ($adff).

24. Executing OPT_EXPR pass (perform const folding).
Optimizing module b11.
<suppressed ~254 debug messages>

25. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b11'.
<suppressed ~45 debug messages>
Removed a total of 15 cells.

26. Executing OPT_DFF pass (perform DFF optimizations).

27. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b11..
Removed 11 unused cells and 27 unused wires.
<suppressed ~12 debug messages>

28. Executing OPT pass (performing simple optimizations).

28.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b11.

28.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b11'.
Removed a total of 0 cells.

28.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b11..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

28.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b11.
Performed a total of 0 changes.

28.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b11'.
Removed a total of 0 cells.

28.6. Executing OPT_DFF pass (perform DFF optimizations).

28.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b11..

28.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module b11.

28.9. Finished OPT passes. (There is nothing left to do.)

29. Executing OPT pass (performing simple optimizations).

29.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b11.
<suppressed ~106 debug messages>

29.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b11'.
<suppressed ~9 debug messages>
Removed a total of 3 cells.

29.3. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $auto$ff.cc:262:slice$957 ($_DFF_PP0_) from module b11 (D = $auto$simplemap.cc:309:simplemap_bmux$732 [5], Q = \x_out [5]).
Adding EN signal on $auto$ff.cc:262:slice$956 ($_DFF_PP0_) from module b11 (D = $auto$simplemap.cc:309:simplemap_bmux$732 [4], Q = \x_out [4]).
Adding EN signal on $auto$ff.cc:262:slice$955 ($_DFF_PP0_) from module b11 (D = $auto$simplemap.cc:309:simplemap_bmux$732 [3], Q = \x_out [3]).
Adding EN signal on $auto$ff.cc:262:slice$954 ($_DFF_PP0_) from module b11 (D = $auto$simplemap.cc:309:simplemap_bmux$732 [2], Q = \x_out [2]).
Adding EN signal on $auto$ff.cc:262:slice$953 ($_DFF_PP0_) from module b11 (D = $auto$simplemap.cc:309:simplemap_bmux$732 [1], Q = \x_out [1]).
Adding EN signal on $auto$ff.cc:262:slice$952 ($_DFF_PP0_) from module b11 (D = $auto$simplemap.cc:309:simplemap_bmux$732 [0], Q = \x_out [0]).
Adding EN signal on $auto$ff.cc:262:slice$947 ($_DFF_PP0_) from module b11 (D = $auto$simplemap.cc:309:simplemap_bmux$638 [5], Q = \r_in [5]).
Adding EN signal on $auto$ff.cc:262:slice$946 ($_DFF_PP0_) from module b11 (D = $auto$simplemap.cc:309:simplemap_bmux$638 [4], Q = \r_in [4]).
Adding EN signal on $auto$ff.cc:262:slice$945 ($_DFF_PP0_) from module b11 (D = $auto$simplemap.cc:309:simplemap_bmux$638 [3], Q = \r_in [3]).
Adding EN signal on $auto$ff.cc:262:slice$944 ($_DFF_PP0_) from module b11 (D = $auto$simplemap.cc:309:simplemap_bmux$638 [2], Q = \r_in [2]).
Adding EN signal on $auto$ff.cc:262:slice$943 ($_DFF_PP0_) from module b11 (D = $auto$simplemap.cc:309:simplemap_bmux$638 [1], Q = \r_in [1]).
Adding EN signal on $auto$ff.cc:262:slice$942 ($_DFF_PP0_) from module b11 (D = $auto$simplemap.cc:309:simplemap_bmux$638 [0], Q = \r_in [0]).
Adding EN signal on $auto$ff.cc:262:slice$308 ($_DFF_PP0_) from module b11 (D = $auto$simplemap.cc:309:simplemap_bmux$932 [8], Q = \cont1 [8]).
Adding EN signal on $auto$ff.cc:262:slice$307 ($_DFF_PP0_) from module b11 (D = $auto$simplemap.cc:309:simplemap_bmux$932 [7], Q = \cont1 [7]).
Adding EN signal on $auto$ff.cc:262:slice$306 ($_DFF_PP0_) from module b11 (D = $auto$simplemap.cc:309:simplemap_bmux$932 [6], Q = \cont1 [6]).
Adding EN signal on $auto$ff.cc:262:slice$305 ($_DFF_PP0_) from module b11 (D = $auto$simplemap.cc:309:simplemap_bmux$932 [5], Q = \cont1 [5]).
Adding EN signal on $auto$ff.cc:262:slice$304 ($_DFF_PP0_) from module b11 (D = $auto$simplemap.cc:309:simplemap_bmux$932 [4], Q = \cont1 [4]).
Adding EN signal on $auto$ff.cc:262:slice$303 ($_DFF_PP0_) from module b11 (D = $auto$simplemap.cc:309:simplemap_bmux$932 [3], Q = \cont1 [3]).
Adding EN signal on $auto$ff.cc:262:slice$302 ($_DFF_PP0_) from module b11 (D = $auto$simplemap.cc:309:simplemap_bmux$932 [2], Q = \cont1 [2]).
Adding EN signal on $auto$ff.cc:262:slice$301 ($_DFF_PP0_) from module b11 (D = $auto$simplemap.cc:309:simplemap_bmux$932 [1], Q = \cont1 [1]).
Adding EN signal on $auto$ff.cc:262:slice$300 ($_DFF_PP0_) from module b11 (D = $auto$simplemap.cc:309:simplemap_bmux$932 [0], Q = \cont1 [0]).
Adding EN signal on $auto$ff.cc:262:slice$299 ($_DFF_PP0_) from module b11 (D = $auto$simplemap.cc:309:simplemap_bmux$544 [4], Q = \cont [4]).
Adding EN signal on $auto$ff.cc:262:slice$298 ($_DFF_PP0_) from module b11 (D = $auto$simplemap.cc:309:simplemap_bmux$544 [3], Q = \cont [3]).
Adding EN signal on $auto$ff.cc:262:slice$297 ($_DFF_PP0_) from module b11 (D = $auto$simplemap.cc:309:simplemap_bmux$544 [2], Q = \cont [2]).
Adding EN signal on $auto$ff.cc:262:slice$296 ($_DFF_PP0_) from module b11 (D = $auto$simplemap.cc:309:simplemap_bmux$544 [1], Q = \cont [1]).
Adding EN signal on $auto$ff.cc:262:slice$295 ($_DFF_PP0_) from module b11 (D = $auto$simplemap.cc:309:simplemap_bmux$544 [0], Q = \cont [0]).

29.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b11..
Removed 8 unused cells and 138 unused wires.
<suppressed ~9 debug messages>

29.5. Rerunning OPT passes. (Removed registers in this run.)

29.6. Executing OPT_EXPR pass (perform const folding).
Optimizing module b11.
<suppressed ~417 debug messages>

29.7. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b11'.
<suppressed ~1134 debug messages>
Removed a total of 378 cells.

29.8. Executing OPT_DFF pass (perform DFF optimizations).

29.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b11..
Removed 0 unused cells and 435 unused wires.
<suppressed ~1 debug messages>

29.10. Finished fast OPT passes.

30. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

31. Executing OPT pass (performing simple optimizations).

31.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b11.
<suppressed ~3 debug messages>

31.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b11'.
Removed a total of 0 cells.

31.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b11..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

31.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b11.
Performed a total of 0 changes.

31.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b11'.
Removed a total of 0 cells.

31.6. Executing OPT_SHARE pass.

31.7. Executing OPT_DFF pass (perform DFF optimizations).

31.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b11..

31.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module b11.

31.10. Finished OPT passes. (There is nothing left to do.)

32. Executing TECHMAP pass (map to technology primitives).

32.1. Executing Verilog-2005 frontend: /home/users/aram/Workspace/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/aram/Workspace/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

32.2. Continuing TECHMAP pass.
Using template $paramod$adbaf76fa5a3091a329503792521395f8ff4d1a4\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $not.
Using template $paramod$5e23d2e0f07f5403e3d2c5b606bab0c16e4174c1\_90_alu for cells of type $alu.
Using template $paramod$b9513f2555ba02118b069422fea717af39120cf7\_90_alu for cells of type $alu.
Using template $paramod$740b056ede97228d3eae64ea2fdc81f0a33e0fe7\_90_alu for cells of type $alu.
Using template $paramod$8ffc13f158d9c4b92f6c17114e5b147ae5ead21a\_90_alu for cells of type $alu.
Using template $paramod$50421b562f8eb1318d93ca56f0d931d9bef85d75\_90_alu for cells of type $alu.
Using template $paramod$e04283ca12514baf3d204c6994bec8f178dd89f8\_90_alu for cells of type $alu.
Using template $paramod$3fe4bdf8d597404bdd222c1fea42f692fdc77de4\_90_alu for cells of type $alu.
Using template $paramod$dfca81329cbbac01700318224209a5f2318c7128\_90_alu for cells of type $alu.
Using template $paramod$c6b63e723603573fdc33dc74600fd0455fbbc6dc\_90_alu for cells of type $alu.
Using template $paramod$5d2e07eca6b9fbd538aff231e6f05d9604b7a77e\_90_alu for cells of type $alu.
Using template $paramod$821d2886e47353e724eaca46af4992e9c3e6ac1d\_90_alu for cells of type $alu.
Using template $paramod$08b2a3505d8f2cd2b03f068ccaf5ce95d4eb0556\_90_alu for cells of type $alu.
Using template $paramod$78464f9f65d57061f7490f3fe5dd257e4a61e2b7\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001000 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000110 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000100 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000001 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001001 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000111 for cells of type $lcu.
Using extmapper simplemap for cells of type $or.
No more expansions possible.
<suppressed ~1457 debug messages>

33. Executing OPT pass (performing simple optimizations).

33.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b11.
<suppressed ~511 debug messages>

33.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b11'.
<suppressed ~459 debug messages>
Removed a total of 153 cells.

33.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b11..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

33.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b11.
Performed a total of 0 changes.

33.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b11'.
Removed a total of 0 cells.

33.6. Executing OPT_DFF pass (perform DFF optimizations).

33.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b11..
Removed 46 unused cells and 602 unused wires.
<suppressed ~47 debug messages>

33.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module b11.
<suppressed ~1 debug messages>

33.9. Rerunning OPT passes. (Maybe there is more to do..)

33.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b11..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

33.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b11.
Performed a total of 0 changes.

33.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b11'.
Removed a total of 0 cells.

33.13. Executing OPT_DFF pass (perform DFF optimizations).

33.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b11..

33.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module b11.

33.16. Finished OPT passes. (There is nothing left to do.)

34. Executing ABC pass (technology mapping using ABC).

34.1. Extracting gate netlist of module `\b11' to `<abc-temp-dir>/input.blif'..
Extracted 489 gates and 522 wires to a netlist network with 31 inputs and 30 outputs.

34.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + source /home/users/aram/Workspace/yosys_verific_rs/scripts/synth/abc/abc_base6.a21.scr 
ABC: netlist  : i/o =     31/     30  and =     651  lev =   23 (10.00)  mem = 0.01 MB
ABC: Mapping (K=6)  :  lut =     93  edge =     434  lev =    6 (3.13)  mem = 0.01 MB
ABC: netlist  : i/o =     31/     30  and =     566  lev =   25 (10.07)  mem = 0.01 MB
ABC: Mapping (K=6)  :  lut =     88  edge =     408  lev =    7 (3.17)  mem = 0.00 MB
ABC: netlist  : i/o =     31/     30  and =     564  lev =   26 (10.50)  mem = 0.01 MB
ABC: Mapping (K=6)  :  lut =     87  edge =     412  lev =    6 (2.97)  mem = 0.00 MB
ABC: netlist  : i/o =     31/     30  and =     525  lev =   23 (9.93)  mem = 0.01 MB
ABC: Mapping (K=6)  :  lut =     87  edge =     412  lev =    6 (2.93)  mem = 0.00 MB
ABC: netlist  : i/o =     31/     30  and =     575  lev =   26 (10.47)  mem = 0.01 MB
ABC: Mapping (K=6)  :  lut =     84  edge =     402  lev =    6 (2.87)  mem = 0.00 MB
ABC: netlist  : i/o =     31/     30  and =     575  lev =   26 (10.53)  mem = 0.01 MB
ABC: Mapping (K=6)  :  lut =     83  edge =     402  lev =    6 (2.83)  mem = 0.00 MB
ABC: netlist  : i/o =     31/     30  and =     590  lev =   26 (10.50)  mem = 0.01 MB
ABC: Mapping (K=6)  :  lut =     83  edge =     404  lev =    6 (2.83)  mem = 0.00 MB
ABC: netlist  : i/o =     31/     30  and =     580  lev =   26 (10.50)  mem = 0.01 MB
ABC: Mapping (K=6)  :  lut =     83  edge =     404  lev =    6 (2.87)  mem = 0.00 MB
ABC: netlist  : i/o =     31/     30  and =     595  lev =   25 (10.43)  mem = 0.01 MB
ABC: Mapping (K=6)  :  lut =     82  edge =     394  lev =    6 (2.87)  mem = 0.00 MB
ABC: netlist  : i/o =     31/     30  and =     572  lev =   26 (10.70)  mem = 0.01 MB
ABC: Mapping (K=6)  :  lut =     81  edge =     393  lev =    6 (2.83)  mem = 0.00 MB
ABC: netlist  : i/o =     31/     30  and =     577  lev =   26 (10.67)  mem = 0.01 MB
ABC: Mapping (K=6)  :  lut =     80  edge =     389  lev =    6 (2.80)  mem = 0.00 MB
ABC: netlist  : i/o =     31/     30  and =     586  lev =   25 (10.47)  mem = 0.01 MB
ABC: Mapping (K=6)  :  lut =     79  edge =     385  lev =    6 (2.77)  mem = 0.00 MB
ABC: netlist  : i/o =     31/     30  and =     576  lev =   26 (10.70)  mem = 0.01 MB
ABC: Mapping (K=6)  :  lut =     79  edge =     385  lev =    6 (2.77)  mem = 0.00 MB
ABC: netlist  : i/o =     31/     30  and =     586  lev =   25 (10.47)  mem = 0.01 MB
ABC: Mapping (K=6)  :  lut =     79  edge =     385  lev =    6 (2.77)  mem = 0.00 MB
ABC: netlist  : i/o =     31/     30  and =     586  lev =   25 (10.47)  mem = 0.01 MB
ABC: Mapping (K=6)  :  lut =     79  edge =     385  lev =    6 (2.77)  mem = 0.00 MB
ABC: netlist  : i/o =     31/     30  and =     576  lev =   27 (10.77)  mem = 0.01 MB
ABC: Mapping (K=6)  :  lut =     79  edge =     385  lev =    6 (2.77)  mem = 0.00 MB
ABC: + write_blif <abc-temp-dir>/output.blif 

34.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:       79
ABC RESULTS:        internal signals:      461
ABC RESULTS:           input signals:       31
ABC RESULTS:          output signals:       30
Removing temp directory.

35. Executing OPT pass (performing simple optimizations).

35.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b11.

35.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b11'.
Removed a total of 0 cells.

35.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b11..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

35.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b11.
Performed a total of 0 changes.

35.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b11'.
Removed a total of 0 cells.

35.6. Executing OPT_DFF pass (perform DFF optimizations).

35.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b11..
Removed 0 unused cells and 240 unused wires.
<suppressed ~1 debug messages>

35.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module b11.

35.9. Rerunning OPT passes. (Maybe there is more to do..)

35.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b11..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

35.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b11.
Performed a total of 0 changes.

35.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b11'.
Removed a total of 0 cells.

35.13. Executing OPT_DFF pass (perform DFF optimizations).

35.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b11..

35.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module b11.

35.16. Finished OPT passes. (There is nothing left to do.)

36. Executing HIERARCHY pass (managing design hierarchy).

36.1. Analyzing design hierarchy..
Top module:  \b11

36.2. Analyzing design hierarchy..
Top module:  \b11
Removed 0 unused modules.

37. Printing statistics.

=== b11 ===

   Number of wires:                 88
   Number of wire bits:            118
   Number of public wires:           9
   Number of public wire bits:      39
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                109
     $_DFFE_PP0P_                   26
     $_DFF_PP0_                      4
     $lut                           79

38. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b11..

39. Executing BLIF backend.

End of script. Logfile hash: cfefa7c1d2, CPU: user 0.98s system 0.01s, MEM: 24.26 MB peak
Yosys 0.14+36 (git sha1 15a4e900b, gcc 7.1.0 -fPIC -Os)
Time spent: 59% 1x abc (1 sec), 14% 37x opt_expr (0 sec), ...
