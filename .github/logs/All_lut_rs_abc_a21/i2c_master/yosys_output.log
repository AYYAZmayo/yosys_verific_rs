
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.14+36 (git sha1 15a4e900b, gcc 7.1.0 -fPIC -Os)


-- Executing script file `yosys.ys' --

1. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Jan22_SW_Release, released at Sat Jan 29 02:42:49 2022.

2. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Jan22_SW_Release, released at Sat Jan 29 02:42:49 2022.
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'i2c_master_defines.vh'
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'StateMachine.v'
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'i2c_master.v'
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'i2c_master_bit_ctrl.v'
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'i2c_master_byte_ctrl.v'

3. Executing HIERARCHY pass (managing design hierarchy).
VERIFIC-INFO [VERI-1018] i2c_master.v:81: compiling module 'i2c_master'
VERIFIC-WARNING [VERI-2371] i2c_master.v:174: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master.v:180: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master.v:181: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master.v:182: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master.v:183: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master.v:184: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master.v:185: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master.v:186: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master.v:187: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master.v:197: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master.v:198: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master.v:199: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master.v:205: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master.v:206: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master.v:207: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master.v:215: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master.v:222: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master.v:224: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master.v:228: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master.v:233: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master.v:235: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master.v:236: delay control is not supported for synthesis
VERIFIC-INFO [VERI-1018] i2c_master_byte_ctrl.v:83: compiling module 'i2c_master_byte_ctrl'
VERIFIC-INFO [VERI-1018] i2c_master_bit_ctrl.v:152: compiling module 'i2c_master_bit_ctrl'
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:207: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:224: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:225: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:229: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:230: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:234: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:235: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:239: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:240: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:251: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:252: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:256: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:257: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-1209] i2c_master_bit_ctrl.v:271: expression size 32 truncated to fit in target size 14
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:296: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:297: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:299: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:300: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:304: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:305: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:307: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:308: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:312: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:313: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:315: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:316: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:326: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:327: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:331: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:332: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:336: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:337: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:343: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:344: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:345: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:355: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:357: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:359: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:363: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:365: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:373: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:401: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:402: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:403: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:404: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:405: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:409: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:410: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:411: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:412: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:413: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:417: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:425: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:426: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:427: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:428: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:429: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:432: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:433: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:434: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:440: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:441: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:442: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:443: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:448: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:449: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:450: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:451: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:456: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:457: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:458: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:459: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:464: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:465: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:466: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:467: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:468: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:473: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:474: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:475: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:476: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:477: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:478: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:484: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:485: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:486: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:487: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:492: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:493: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:494: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:495: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:500: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:501: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:502: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:503: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:504: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:509: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:510: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:511: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:512: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:513: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:519: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:520: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:521: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:522: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:527: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:528: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:529: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:530: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:535: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:536: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:537: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:538: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:539: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:544: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:545: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:546: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:547: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:548: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:549: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:555: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:556: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:557: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:558: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:563: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:564: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:565: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:566: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:572: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:573: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:574: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:575: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:576: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:581: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:582: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:583: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:584: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:585: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_bit_ctrl.v:586: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-1173] i2c_master_bit_ctrl.v:420: synthesis - simulation differences may occur when using full_case directive
VERIFIC-WARNING [VERI-2371] i2c_master_byte_ctrl.v:214: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_byte_ctrl.v:216: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_byte_ctrl.v:218: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_byte_ctrl.v:220: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_byte_ctrl.v:227: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_byte_ctrl.v:228: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_byte_ctrl.v:229: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_byte_ctrl.v:230: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_byte_ctrl.v:231: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_byte_ctrl.v:232: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_byte_ctrl.v:233: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_byte_ctrl.v:234: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_byte_ctrl.v:238: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_byte_ctrl.v:239: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_byte_ctrl.v:240: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_byte_ctrl.v:241: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_byte_ctrl.v:242: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_byte_ctrl.v:243: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_byte_ctrl.v:244: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_byte_ctrl.v:245: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_byte_ctrl.v:250: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_byte_ctrl.v:252: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_byte_ctrl.v:254: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_byte_ctrl.v:256: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_byte_ctrl.v:257: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_byte_ctrl.v:258: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_byte_ctrl.v:259: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_byte_ctrl.v:267: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_byte_ctrl.v:268: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_byte_ctrl.v:272: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_byte_ctrl.v:273: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_byte_ctrl.v:277: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_byte_ctrl.v:278: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_byte_ctrl.v:282: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_byte_ctrl.v:283: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_byte_ctrl.v:286: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_byte_ctrl.v:294: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_byte_ctrl.v:295: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_byte_ctrl.v:299: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_byte_ctrl.v:300: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_byte_ctrl.v:303: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_byte_ctrl.v:308: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_byte_ctrl.v:309: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_byte_ctrl.v:316: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_byte_ctrl.v:317: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_byte_ctrl.v:321: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_byte_ctrl.v:322: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_byte_ctrl.v:323: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_byte_ctrl.v:324: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_byte_ctrl.v:332: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_byte_ctrl.v:333: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_byte_ctrl.v:337: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_byte_ctrl.v:338: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_byte_ctrl.v:341: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_byte_ctrl.v:343: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_byte_ctrl.v:351: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_byte_ctrl.v:352: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_byte_ctrl.v:356: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_byte_ctrl.v:357: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_byte_ctrl.v:360: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_byte_ctrl.v:364: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_byte_ctrl.v:366: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_byte_ctrl.v:368: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_byte_ctrl.v:371: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_byte_ctrl.v:376: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_byte_ctrl.v:377: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master_byte_ctrl.v:380: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-1173] i2c_master_byte_ctrl.v:261: synthesis - simulation differences may occur when using full_case directive
VERIFIC-WARNING [VERI-2371] i2c_master.v:285: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master.v:286: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master.v:287: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master.v:288: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master.v:292: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master.v:293: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master.v:294: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master.v:295: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master.v:299: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master.v:300: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master.v:301: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master.v:302: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master.v:308: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master.v:310: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] i2c_master.v:312: delay control is not supported for synthesis
Importing module i2c_master.
Importing module i2c_master_byte_ctrl.
Importing module i2c_master_bit_ctrl.

3.1. Analyzing design hierarchy..
Top module:  \i2c_master
Used module:     \i2c_master_byte_ctrl
Used module:         \i2c_master_bit_ctrl

3.2. Analyzing design hierarchy..
Top module:  \i2c_master
Used module:     \i2c_master_byte_ctrl
Used module:         \i2c_master_bit_ctrl
Removed 0 unused modules.

4. Executing PROC pass (convert processes to netlists).

4.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

4.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

4.4. Executing PROC_INIT pass (extract init attributes).

4.5. Executing PROC_ARST pass (detect async resets in processes).

4.6. Executing PROC_MUX pass (convert decision trees to multiplexers).

4.7. Executing PROC_DLATCH pass (convert process syncs to latches).

4.8. Executing PROC_DFF pass (convert process syncs to FFs).

4.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

4.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_master_bit_ctrl.
<suppressed ~12 debug messages>
Optimizing module i2c_master_byte_ctrl.
<suppressed ~22 debug messages>
Optimizing module i2c_master.
<suppressed ~5 debug messages>

5. Executing FLATTEN pass (flatten design).
Deleting now unused module i2c_master_bit_ctrl.
Deleting now unused module i2c_master_byte_ctrl.
<suppressed ~2 debug messages>

6. Executing TRIBUF pass.

7. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_master.

8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i2c_master..
Removed 8 unused cells and 225 unused wires.
<suppressed ~71 debug messages>

9. Executing CHECK pass (checking for obvious problems).
Checking module i2c_master...
Found and reported 0 problems.

10. Executing DEMINOUT pass (demote inout ports to input or output).
Demoting inout port i2c_master.wb_ack_o to output.

11. Executing OPT pass (performing simple optimizations).

11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_master.
<suppressed ~4 debug messages>

11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i2c_master'.
<suppressed ~9 debug messages>
Removed a total of 3 cells.

11.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \i2c_master..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~39 debug messages>

11.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \i2c_master.
    New ctrl vector for $pmux cell $flatten\byte_controller.$verific$Select_157$i2c_master_byte_ctrl.v:383$450: { $flatten\byte_controller.$verific$n577$221 $flatten\byte_controller.$verific$n578$222 }
    New ctrl vector for $pmux cell $flatten\byte_controller.$verific$select_153$i2c_master_byte_ctrl.v:383$446: { $flatten\byte_controller.$verific$n575$219 $auto$opt_reduce.cc:134:opt_pmux$810 }
    New ctrl vector for $pmux cell $flatten\byte_controller.\bit_controller.$verific$Select_298$i2c_master_bit_ctrl.v:589$783: { $flatten\byte_controller.\bit_controller.$verific$n1061$560 $flatten\byte_controller.\bit_controller.$verific$n1062$561 }
    New ctrl vector for $pmux cell $flatten\byte_controller.\bit_controller.$verific$Select_302$i2c_master_bit_ctrl.v:589$787: { $flatten\byte_controller.\bit_controller.$verific$n1024$542 $flatten\byte_controller.\bit_controller.$verific$n1065$564 $flatten\byte_controller.\bit_controller.$verific$n1067$566 }
    New ctrl vector for $pmux cell $flatten\byte_controller.\bit_controller.$verific$Select_305$i2c_master_bit_ctrl.v:589$790: { $flatten\byte_controller.\bit_controller.$verific$n1032$550 $auto$opt_reduce.cc:134:opt_pmux$814 $auto$opt_reduce.cc:134:opt_pmux$812 }
    New ctrl vector for $pmux cell $flatten\byte_controller.$verific$Select_150$i2c_master_byte_ctrl.v:383$443: { $flatten\byte_controller.$verific$n572$216 $flatten\byte_controller.$verific$n573$217 }
    New ctrl vector for $pmux cell $flatten\byte_controller.$verific$Select_152$i2c_master_byte_ctrl.v:383$445: { $flatten\byte_controller.$verific$n575$219 $flatten\byte_controller.$verific$n576$220 $flatten\byte_controller.$verific$n577$221 }
    New ctrl vector for $pmux cell $flatten\byte_controller.\bit_controller.$verific$select_181$i2c_master_bit_ctrl.v:430$755: { $flatten\byte_controller.\bit_controller.$verific$n600$533 $flatten\byte_controller.\bit_controller.$verific$n439$525 $flatten\byte_controller.\bit_controller.$verific$n602$534 $flatten\byte_controller.\bit_controller.$verific$n603$535 }
    New ctrl vector for $pmux cell $flatten\byte_controller.\bit_controller.$verific$select_294$i2c_master_bit_ctrl.v:589$779: { $flatten\byte_controller.\bit_controller.$verific$n1024$542 $flatten\byte_controller.\bit_controller.$verific$n1025$543 $flatten\byte_controller.\bit_controller.$verific$n1026$544 $flatten\byte_controller.\bit_controller.$verific$n1027$545 $flatten\byte_controller.\bit_controller.$verific$n1028$546 $flatten\byte_controller.\bit_controller.$verific$n1030$548 $flatten\byte_controller.\bit_controller.$verific$n1031$549 $flatten\byte_controller.\bit_controller.$verific$n1032$550 $flatten\byte_controller.\bit_controller.$verific$n1034$552 $flatten\byte_controller.\bit_controller.$verific$n1035$553 $flatten\byte_controller.\bit_controller.$verific$n1036$554 $flatten\byte_controller.\bit_controller.$verific$n1038$556 $flatten\byte_controller.\bit_controller.$verific$n1039$557 $flatten\byte_controller.\bit_controller.$verific$n1040$558 }
  Optimizing cells in module \i2c_master.
Performed a total of 9 changes.

11.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i2c_master'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

11.6. Executing OPT_DFF pass (perform DFF optimizations).
Changing const-value async load to async reset on $verific$wb_inta_o_reg$i2c_master.v:312$183 ($aldff) from module i2c_master.
Removing never-active async load on $verific$wb_dat_o_reg$i2c_master.v:189$73 ($aldff) from module i2c_master.
Changing const-value async load to async reset on $verific$txr_reg$i2c_master.v:217$87 ($aldff) from module i2c_master.
Changing const-value async load to async reset on $verific$tip_reg$i2c_master.v:303$178 ($aldff) from module i2c_master.
Changing const-value async load to async reset on $verific$rxack_reg$i2c_master.v:303$177 ($aldff) from module i2c_master.
Changing const-value async load to async reset on $verific$prer_reg$i2c_master.v:217$85 ($aldff) from module i2c_master.
Changing const-value async load to async reset on $verific$irq_flag_reg$i2c_master.v:303$179 ($aldff) from module i2c_master.
Changing const-value async load to async reset on $verific$ctr_reg$i2c_master.v:217$86 ($aldff) from module i2c_master.
Changing const-value async load to async reset on $verific$cr_reg$i2c_master.v:237$97 ($aldff) from module i2c_master.
Changing const-value async load to async reset on $verific$al_reg$i2c_master.v:303$176 ($aldff) from module i2c_master.
Changing const-value async load to async reset on $flatten\byte_controller.\bit_controller.$verific$sto_condition_reg$i2c_master_bit_ctrl.v:338$729 ($aldff) from module i2c_master.
Changing const-value async load to async reset on $flatten\byte_controller.\bit_controller.$verific$sta_condition_reg$i2c_master_bit_ctrl.v:338$728 ($aldff) from module i2c_master.
Changing const-value async load to async reset on $flatten\byte_controller.\bit_controller.$verific$slave_wait_reg$i2c_master_bit_ctrl.v:213$648 ($aldff) from module i2c_master.
Changing const-value async load to async reset on $flatten\byte_controller.\bit_controller.$verific$sda_oen_reg$i2c_master_bit_ctrl.v:590$804 ($aldff) from module i2c_master.
Changing const-value async load to async reset on $flatten\byte_controller.\bit_controller.$verific$scl_oen_reg$i2c_master_bit_ctrl.v:590$803 ($aldff) from module i2c_master.
Changing const-value async load to async reset on $flatten\byte_controller.\bit_controller.$verific$sSDA_reg$i2c_master_bit_ctrl.v:317$715 ($aldff) from module i2c_master.
Changing const-value async load to async reset on $flatten\byte_controller.\bit_controller.$verific$sSCL_reg$i2c_master_bit_ctrl.v:317$714 ($aldff) from module i2c_master.
Changing const-value async load to async reset on $flatten\byte_controller.\bit_controller.$verific$filter_cnt_reg$i2c_master_bit_ctrl.v:271$686 ($aldff) from module i2c_master.
Changing const-value async load to async reset on $flatten\byte_controller.\bit_controller.$verific$fSDA_reg$i2c_master_bit_ctrl.v:289$695 ($aldff) from module i2c_master.
Changing const-value async load to async reset on $flatten\byte_controller.\bit_controller.$verific$fSCL_reg$i2c_master_bit_ctrl.v:289$694 ($aldff) from module i2c_master.
Changing const-value async load to async reset on $flatten\byte_controller.\bit_controller.$verific$dSDA_reg$i2c_master_bit_ctrl.v:317$717 ($aldff) from module i2c_master.
Changing const-value async load to async reset on $flatten\byte_controller.\bit_controller.$verific$dSCL_reg$i2c_master_bit_ctrl.v:317$716 ($aldff) from module i2c_master.
Changing const-value async load to async reset on $flatten\byte_controller.\bit_controller.$verific$cnt_reg$i2c_master_bit_ctrl.v:241$667 ($aldff) from module i2c_master.
Changing const-value async load to async reset on $flatten\byte_controller.\bit_controller.$verific$cmd_ack_reg$i2c_master_bit_ctrl.v:590$802 ($aldff) from module i2c_master.
Changing const-value async load to async reset on $flatten\byte_controller.\bit_controller.$verific$clk_en_reg$i2c_master_bit_ctrl.v:241$668 ($aldff) from module i2c_master.
Changing const-value async load to async reset on $flatten\byte_controller.\bit_controller.$verific$c_state_reg$i2c_master_bit_ctrl.v:590$801 ($aldff) from module i2c_master.
Changing const-value async load to async reset on $flatten\byte_controller.\bit_controller.$verific$cSDA_reg$i2c_master_bit_ctrl.v:263$675 ($aldff) from module i2c_master.
Changing const-value async load to async reset on $flatten\byte_controller.\bit_controller.$verific$cSCL_reg$i2c_master_bit_ctrl.v:263$674 ($aldff) from module i2c_master.
Changing const-value async load to async reset on $flatten\byte_controller.\bit_controller.$verific$busy_reg$i2c_master_bit_ctrl.v:345$735 ($aldff) from module i2c_master.
Changing const-value async load to async reset on $flatten\byte_controller.\bit_controller.$verific$al_reg$i2c_master_bit_ctrl.v:367$741 ($aldff) from module i2c_master.
Changing const-value async load to async reset on $flatten\byte_controller.$verific$sr_reg$i2c_master_byte_ctrl.v:384$460 ($aldff) from module i2c_master.
Changing const-value async load to async reset on $flatten\byte_controller.$verific$shift_reg$i2c_master_byte_ctrl.v:384$463 ($aldff) from module i2c_master.
Changing const-value async load to async reset on $flatten\byte_controller.$verific$ld_reg$i2c_master_byte_ctrl.v:384$464 ($aldff) from module i2c_master.
Changing const-value async load to async reset on $flatten\byte_controller.$verific$dcnt_reg$i2c_master_byte_ctrl.v:220$367 ($aldff) from module i2c_master.
Changing const-value async load to async reset on $flatten\byte_controller.$verific$core_txd_reg$i2c_master_byte_ctrl.v:384$462 ($aldff) from module i2c_master.
Changing const-value async load to async reset on $flatten\byte_controller.$verific$core_cmd_reg$i2c_master_byte_ctrl.v:384$461 ($aldff) from module i2c_master.
Changing const-value async load to async reset on $flatten\byte_controller.$verific$cmd_ack_reg$i2c_master_byte_ctrl.v:384$465 ($aldff) from module i2c_master.
Changing const-value async load to async reset on $flatten\byte_controller.$verific$c_state_reg$i2c_master_byte_ctrl.v:384$466 ($aldff) from module i2c_master.
Changing const-value async load to async reset on $flatten\byte_controller.$verific$ack_out_reg$i2c_master_byte_ctrl.v:384$467 ($aldff) from module i2c_master.
Setting constant 0-bit at position 0 on $flatten\byte_controller.\bit_controller.$verific$al_reg$i2c_master_bit_ctrl.v:367$741 ($adff) from module i2c_master.

11.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i2c_master..
Removed 9 unused cells and 13 unused wires.
<suppressed ~11 debug messages>

11.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_master.
<suppressed ~3 debug messages>

11.9. Rerunning OPT passes. (Maybe there is more to do..)

11.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \i2c_master..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~40 debug messages>

11.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \i2c_master.
Performed a total of 0 changes.

11.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i2c_master'.
Removed a total of 0 cells.

11.13. Executing OPT_DFF pass (perform DFF optimizations).

11.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i2c_master..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

11.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_master.

11.16. Rerunning OPT passes. (Maybe there is more to do..)

11.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \i2c_master..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~40 debug messages>

11.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \i2c_master.
Performed a total of 0 changes.

11.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i2c_master'.
Removed a total of 0 cells.

11.20. Executing OPT_DFF pass (perform DFF optimizations).

11.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i2c_master..

11.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_master.

11.23. Finished OPT passes. (There is nothing left to do.)

12. Executing FSM pass (extract and optimize FSM).

12.1. Executing FSM_DETECT pass (finding FSMs in design).
Found FSM state register i2c_master.byte_controller.bit_controller.c_state.
Not marking i2c_master.ctr as FSM state register:
    Users of register don't seem to benefit from recoding.
Not marking i2c_master.prer as FSM state register:
    Users of register don't seem to benefit from recoding.

12.2. Executing FSM_EXTRACT pass (extracting FSM from design).
Extracting FSM `\byte_controller.bit_controller.c_state' from module `\i2c_master'.
  found $adff cell for state register: $flatten\byte_controller.\bit_controller.$verific$c_state_reg$i2c_master_bit_ctrl.v:590$801
  root of input selection tree: $flatten\byte_controller.\bit_controller.$verific$n1095$632
  found reset state: 18'000000000000000000 (from async reset)
  found ctrl input: \wb_rst_i
  found ctrl input: \byte_controller.bit_controller.clk_en
  found ctrl input: $flatten\byte_controller.\bit_controller.$verific$n1040$558
  found ctrl input: $flatten\byte_controller.\bit_controller.$verific$n1039$557
  found ctrl input: $flatten\byte_controller.\bit_controller.$verific$n1038$556
  found ctrl input: $flatten\byte_controller.\bit_controller.$verific$n1036$554
  found ctrl input: $flatten\byte_controller.\bit_controller.$verific$n1035$553
  found ctrl input: $flatten\byte_controller.\bit_controller.$verific$n1034$552
  found ctrl input: $flatten\byte_controller.\bit_controller.$verific$n1032$550
  found ctrl input: $flatten\byte_controller.\bit_controller.$verific$n1031$549
  found ctrl input: $flatten\byte_controller.\bit_controller.$verific$n1030$548
  found ctrl input: $flatten\byte_controller.\bit_controller.$verific$n1028$546
  found ctrl input: $flatten\byte_controller.\bit_controller.$verific$n1027$545
  found ctrl input: $flatten\byte_controller.\bit_controller.$verific$n1026$544
  found ctrl input: $flatten\byte_controller.\bit_controller.$verific$n1025$543
  found ctrl input: $flatten\byte_controller.\bit_controller.$verific$n1024$542
  found state code: 18'010000000000000000
  found state code: 18'001000000000000000
  found state code: 18'000100000000000000
  found state code: 18'000001000000000000
  found state code: 18'000000100000000000
  found state code: 18'000000010000000000
  found state code: 18'000000000100000000
  found state code: 18'000000000010000000
  found state code: 18'000000000001000000
  found state code: 18'000000000000010000
  found state code: 18'000000000000001000
  found state code: 18'000000000000000100
  found state code: 18'000000000000000010
  found ctrl input: $flatten\byte_controller.\bit_controller.$verific$n603$535
  found ctrl input: $flatten\byte_controller.\bit_controller.$verific$n602$534
  found ctrl input: $flatten\byte_controller.\bit_controller.$verific$n439$525
  found ctrl input: $flatten\byte_controller.\bit_controller.$verific$n600$533
  found state code: 18'000000001000000000
  found state code: 18'000010000000000000
  found state code: 18'000000000000100000
  found state code: 18'000000000000000001
  found ctrl output: $flatten\byte_controller.\bit_controller.$verific$n1024$542
  found ctrl output: $flatten\byte_controller.\bit_controller.$verific$n1025$543
  found ctrl output: $flatten\byte_controller.\bit_controller.$verific$n1026$544
  found ctrl output: $flatten\byte_controller.\bit_controller.$verific$n1027$545
  found ctrl output: $flatten\byte_controller.\bit_controller.$verific$n1028$546
  found ctrl output: $flatten\byte_controller.\bit_controller.$verific$n1029$547
  found ctrl output: $flatten\byte_controller.\bit_controller.$verific$n1030$548
  found ctrl output: $flatten\byte_controller.\bit_controller.$verific$n1031$549
  found ctrl output: $flatten\byte_controller.\bit_controller.$verific$n1032$550
  found ctrl output: $flatten\byte_controller.\bit_controller.$verific$n1033$551
  found ctrl output: $flatten\byte_controller.\bit_controller.$verific$n1034$552
  found ctrl output: $flatten\byte_controller.\bit_controller.$verific$n1035$553
  found ctrl output: $flatten\byte_controller.\bit_controller.$verific$n1036$554
  found ctrl output: $flatten\byte_controller.\bit_controller.$verific$n1037$555
  found ctrl output: $flatten\byte_controller.\bit_controller.$verific$n1038$556
  found ctrl output: $flatten\byte_controller.\bit_controller.$verific$n1039$557
  found ctrl output: $flatten\byte_controller.\bit_controller.$verific$n1040$558
  found ctrl output: $flatten\byte_controller.\bit_controller.$verific$n1041$559
  ctrl inputs: { $flatten\byte_controller.\bit_controller.$verific$n603$535 $flatten\byte_controller.\bit_controller.$verific$n602$534 $flatten\byte_controller.\bit_controller.$verific$n600$533 $flatten\byte_controller.\bit_controller.$verific$n439$525 \byte_controller.bit_controller.clk_en \wb_rst_i }
  ctrl outputs: { $flatten\byte_controller.\bit_controller.$verific$n1095$632 $flatten\byte_controller.\bit_controller.$verific$n1041$559 $flatten\byte_controller.\bit_controller.$verific$n1040$558 $flatten\byte_controller.\bit_controller.$verific$n1039$557 $flatten\byte_controller.\bit_controller.$verific$n1038$556 $flatten\byte_controller.\bit_controller.$verific$n1037$555 $flatten\byte_controller.\bit_controller.$verific$n1036$554 $flatten\byte_controller.\bit_controller.$verific$n1035$553 $flatten\byte_controller.\bit_controller.$verific$n1034$552 $flatten\byte_controller.\bit_controller.$verific$n1033$551 $flatten\byte_controller.\bit_controller.$verific$n1032$550 $flatten\byte_controller.\bit_controller.$verific$n1031$549 $flatten\byte_controller.\bit_controller.$verific$n1030$548 $flatten\byte_controller.\bit_controller.$verific$n1029$547 $flatten\byte_controller.\bit_controller.$verific$n1028$546 $flatten\byte_controller.\bit_controller.$verific$n1027$545 $flatten\byte_controller.\bit_controller.$verific$n1026$544 $flatten\byte_controller.\bit_controller.$verific$n1025$543 $flatten\byte_controller.\bit_controller.$verific$n1024$542 }
  transition: 18'000000000000000000 6'----00 -> 18'000000000000000000 36'000000000000000000000000000000000001
  transition: 18'000000000000000000 6'000010 -> 18'000000000000000000 36'000000000000000000000000000000000001
  transition: 18'000000000000000000 6'--1-10 -> 18'000000000000000001 36'000000000000000001000000000000000001
  transition: 18'000000000000000000 6'---110 -> 18'000000000000100000 36'000000000000100000000000000000000001
  transition: 18'000000000000000000 6'-1--10 -> 18'000010000000000000 36'000010000000000000000000000000000001
  transition: 18'000000000000000000 6'1---10 -> 18'000000001000000000 36'000000001000000000000000000000000001
  transition: 18'000000000000000000 6'-----1 -> 18'000000000000000000 36'000000000000000000000000000000000001
  transition: 18'010000000000000000 6'----00 -> 18'010000000000000000 36'010000000000000000100000000000000000
  transition: 18'010000000000000000 6'----10 -> 18'000000000000000000 36'000000000000000000100000000000000000
  transition: 18'010000000000000000 6'-----1 -> 18'000000000000000000 36'000000000000000000100000000000000000
  transition: 18'001000000000000000 6'----00 -> 18'001000000000000000 36'001000000000000000010000000000000000
  transition: 18'001000000000000000 6'----10 -> 18'010000000000000000 36'010000000000000000010000000000000000
  transition: 18'001000000000000000 6'-----1 -> 18'000000000000000000 36'000000000000000000010000000000000000
  transition: 18'000100000000000000 6'----00 -> 18'000100000000000000 36'000100000000000000001000000000000000
  transition: 18'000100000000000000 6'----10 -> 18'001000000000000000 36'001000000000000000001000000000000000
  transition: 18'000100000000000000 6'-----1 -> 18'000000000000000000 36'000000000000000000001000000000000000
  transition: 18'000010000000000000 6'----00 -> 18'000010000000000000 36'000010000000000000000100000000000000
  transition: 18'000010000000000000 6'----10 -> 18'000100000000000000 36'000100000000000000000100000000000000
  transition: 18'000010000000000000 6'-----1 -> 18'000000000000000000 36'000000000000000000000100000000000000
  transition: 18'000001000000000000 6'----00 -> 18'000001000000000000 36'000001000000000000000010000000000000
  transition: 18'000001000000000000 6'----10 -> 18'000000000000000000 36'000000000000000000000010000000000000
  transition: 18'000001000000000000 6'-----1 -> 18'000000000000000000 36'000000000000000000000010000000000000
  transition: 18'000000100000000000 6'----00 -> 18'000000100000000000 36'000000100000000000000001000000000000
  transition: 18'000000100000000000 6'----10 -> 18'000001000000000000 36'000001000000000000000001000000000000
  transition: 18'000000100000000000 6'-----1 -> 18'000000000000000000 36'000000000000000000000001000000000000
  transition: 18'000000010000000000 6'----00 -> 18'000000010000000000 36'000000010000000000000000100000000000
  transition: 18'000000010000000000 6'----10 -> 18'000000100000000000 36'000000100000000000000000100000000000
  transition: 18'000000010000000000 6'-----1 -> 18'000000000000000000 36'000000000000000000000000100000000000
  transition: 18'000000001000000000 6'----00 -> 18'000000001000000000 36'000000001000000000000000010000000000
  transition: 18'000000001000000000 6'----10 -> 18'000000010000000000 36'000000010000000000000000010000000000
  transition: 18'000000001000000000 6'-----1 -> 18'000000000000000000 36'000000000000000000000000010000000000
  transition: 18'000000000100000000 6'----00 -> 18'000000000100000000 36'000000000100000000000000001000000000
  transition: 18'000000000100000000 6'----10 -> 18'000000000000000000 36'000000000000000000000000001000000000
  transition: 18'000000000100000000 6'-----1 -> 18'000000000000000000 36'000000000000000000000000001000000000
  transition: 18'000000000010000000 6'----00 -> 18'000000000010000000 36'000000000010000000000000000100000000
  transition: 18'000000000010000000 6'----10 -> 18'000000000100000000 36'000000000100000000000000000100000000
  transition: 18'000000000010000000 6'-----1 -> 18'000000000000000000 36'000000000000000000000000000100000000
  transition: 18'000000000001000000 6'----00 -> 18'000000000001000000 36'000000000001000000000000000010000000
  transition: 18'000000000001000000 6'----10 -> 18'000000000010000000 36'000000000010000000000000000010000000
  transition: 18'000000000001000000 6'-----1 -> 18'000000000000000000 36'000000000000000000000000000010000000
  transition: 18'000000000000100000 6'----00 -> 18'000000000000100000 36'000000000000100000000000000001000000
  transition: 18'000000000000100000 6'----10 -> 18'000000000001000000 36'000000000001000000000000000001000000
  transition: 18'000000000000100000 6'-----1 -> 18'000000000000000000 36'000000000000000000000000000001000000
  transition: 18'000000000000010000 6'----00 -> 18'000000000000010000 36'000000000000010000000000000000100000
  transition: 18'000000000000010000 6'----10 -> 18'000000000000000000 36'000000000000000000000000000000100000
  transition: 18'000000000000010000 6'-----1 -> 18'000000000000000000 36'000000000000000000000000000000100000
  transition: 18'000000000000001000 6'----00 -> 18'000000000000001000 36'000000000000001000000000000000010000
  transition: 18'000000000000001000 6'----10 -> 18'000000000000010000 36'000000000000010000000000000000010000
  transition: 18'000000000000001000 6'-----1 -> 18'000000000000000000 36'000000000000000000000000000000010000
  transition: 18'000000000000000100 6'----00 -> 18'000000000000000100 36'000000000000000100000000000000001000
  transition: 18'000000000000000100 6'----10 -> 18'000000000000001000 36'000000000000001000000000000000001000
  transition: 18'000000000000000100 6'-----1 -> 18'000000000000000000 36'000000000000000000000000000000001000
  transition: 18'000000000000000010 6'----00 -> 18'000000000000000010 36'000000000000000010000000000000000100
  transition: 18'000000000000000010 6'----10 -> 18'000000000000000100 36'000000000000000100000000000000000100
  transition: 18'000000000000000010 6'-----1 -> 18'000000000000000000 36'000000000000000000000000000000000100
  transition: 18'000000000000000001 6'----00 -> 18'000000000000000001 36'000000000000000001000000000000000010
  transition: 18'000000000000000001 6'----10 -> 18'000000000000000010 36'000000000000000010000000000000000010
  transition: 18'000000000000000001 6'-----1 -> 18'000000000000000000 36'000000000000000000000000000000000010

12.3. Executing FSM_OPT pass (simple optimizations of FSMs).
Optimizing FSM `$fsm$\byte_controller.bit_controller.c_state$815' from module `\i2c_master'.

12.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i2c_master..
Removed 23 unused cells and 23 unused wires.
<suppressed ~24 debug messages>

12.5. Executing FSM_OPT pass (simple optimizations of FSMs).
Optimizing FSM `$fsm$\byte_controller.bit_controller.c_state$815' from module `\i2c_master'.
  Removing unused output signal $flatten\byte_controller.\bit_controller.$verific$n1030$548.
  Removing unused output signal $flatten\byte_controller.\bit_controller.$verific$n1095$632 [0].
  Removing unused output signal $flatten\byte_controller.\bit_controller.$verific$n1095$632 [1].
  Removing unused output signal $flatten\byte_controller.\bit_controller.$verific$n1095$632 [2].
  Removing unused output signal $flatten\byte_controller.\bit_controller.$verific$n1095$632 [3].
  Removing unused output signal $flatten\byte_controller.\bit_controller.$verific$n1095$632 [4].
  Removing unused output signal $flatten\byte_controller.\bit_controller.$verific$n1095$632 [5].
  Removing unused output signal $flatten\byte_controller.\bit_controller.$verific$n1095$632 [6].
  Removing unused output signal $flatten\byte_controller.\bit_controller.$verific$n1095$632 [7].
  Removing unused output signal $flatten\byte_controller.\bit_controller.$verific$n1095$632 [8].
  Removing unused output signal $flatten\byte_controller.\bit_controller.$verific$n1095$632 [9].
  Removing unused output signal $flatten\byte_controller.\bit_controller.$verific$n1095$632 [10].
  Removing unused output signal $flatten\byte_controller.\bit_controller.$verific$n1095$632 [11].
  Removing unused output signal $flatten\byte_controller.\bit_controller.$verific$n1095$632 [12].
  Removing unused output signal $flatten\byte_controller.\bit_controller.$verific$n1095$632 [13].
  Removing unused output signal $flatten\byte_controller.\bit_controller.$verific$n1095$632 [14].
  Removing unused output signal $flatten\byte_controller.\bit_controller.$verific$n1095$632 [15].
  Removing unused output signal $flatten\byte_controller.\bit_controller.$verific$n1095$632 [16].
  Removing unused output signal $flatten\byte_controller.\bit_controller.$verific$n1095$632 [17].

12.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).
Recoding FSM `$fsm$\byte_controller.bit_controller.c_state$815' from module `\i2c_master' using `auto' encoding:
  mapping auto encoding to `one-hot` for this FSM.
  000000000000000000 -> -----------------1
  010000000000000000 -> ----------------1-
  001000000000000000 -> ---------------1--
  000100000000000000 -> --------------1---
  000010000000000000 -> -------------1----
  000001000000000000 -> ------------1-----
  000000100000000000 -> -----------1------
  000000010000000000 -> ----------1-------
  000000001000000000 -> ---------1--------
  000000000100000000 -> --------1---------
  000000000010000000 -> -------1----------
  000000000001000000 -> ------1-----------
  000000000000100000 -> -----1------------
  000000000000010000 -> ----1-------------
  000000000000001000 -> ---1--------------
  000000000000000100 -> --1---------------
  000000000000000010 -> -1----------------
  000000000000000001 -> 1-----------------

12.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

FSM `$fsm$\byte_controller.bit_controller.c_state$815' from module `i2c_master':
-------------------------------------

  Information on FSM $fsm$\byte_controller.bit_controller.c_state$815 (\byte_controller.bit_controller.c_state):

  Number of input signals:    6
  Number of output signals:  17
  Number of state bits:      18

  Input signals:
    0: \wb_rst_i
    1: \byte_controller.bit_controller.clk_en
    2: $flatten\byte_controller.\bit_controller.$verific$n439$525
    3: $flatten\byte_controller.\bit_controller.$verific$n600$533
    4: $flatten\byte_controller.\bit_controller.$verific$n602$534
    5: $flatten\byte_controller.\bit_controller.$verific$n603$535

  Output signals:
    0: $flatten\byte_controller.\bit_controller.$verific$n1024$542
    1: $flatten\byte_controller.\bit_controller.$verific$n1025$543
    2: $flatten\byte_controller.\bit_controller.$verific$n1026$544
    3: $flatten\byte_controller.\bit_controller.$verific$n1027$545
    4: $flatten\byte_controller.\bit_controller.$verific$n1028$546
    5: $flatten\byte_controller.\bit_controller.$verific$n1029$547
    6: $flatten\byte_controller.\bit_controller.$verific$n1031$549
    7: $flatten\byte_controller.\bit_controller.$verific$n1032$550
    8: $flatten\byte_controller.\bit_controller.$verific$n1033$551
    9: $flatten\byte_controller.\bit_controller.$verific$n1034$552
   10: $flatten\byte_controller.\bit_controller.$verific$n1035$553
   11: $flatten\byte_controller.\bit_controller.$verific$n1036$554
   12: $flatten\byte_controller.\bit_controller.$verific$n1037$555
   13: $flatten\byte_controller.\bit_controller.$verific$n1038$556
   14: $flatten\byte_controller.\bit_controller.$verific$n1039$557
   15: $flatten\byte_controller.\bit_controller.$verific$n1040$558
   16: $flatten\byte_controller.\bit_controller.$verific$n1041$559

  State encoding:
    0: 18'-----------------1  <RESET STATE>
    1: 18'----------------1-
    2: 18'---------------1--
    3: 18'--------------1---
    4: 18'-------------1----
    5: 18'------------1-----
    6: 18'-----------1------
    7: 18'----------1-------
    8: 18'---------1--------
    9: 18'--------1---------
   10: 18'-------1----------
   11: 18'------1-----------
   12: 18'-----1------------
   13: 18'----1-------------
   14: 18'---1--------------
   15: 18'--1---------------
   16: 18'-1----------------
   17: 18'1-----------------

  Transition Table (state_in, ctrl_in, state_out, ctrl_out):
      0:     0 6'----00   ->     0 17'00000000000000001
      1:     0 6'000010   ->     0 17'00000000000000001
      2:     0 6'-----1   ->     0 17'00000000000000001
      3:     0 6'-1--10   ->     4 17'00000000000000001
      4:     0 6'1---10   ->     8 17'00000000000000001
      5:     0 6'---110   ->    12 17'00000000000000001
      6:     0 6'--1-10   ->    17 17'00000000000000001
      7:     1 6'----10   ->     0 17'10000000000000000
      8:     1 6'-----1   ->     0 17'10000000000000000
      9:     1 6'----00   ->     1 17'10000000000000000
     10:     2 6'-----1   ->     0 17'01000000000000000
     11:     2 6'----10   ->     1 17'01000000000000000
     12:     2 6'----00   ->     2 17'01000000000000000
     13:     3 6'-----1   ->     0 17'00100000000000000
     14:     3 6'----10   ->     2 17'00100000000000000
     15:     3 6'----00   ->     3 17'00100000000000000
     16:     4 6'-----1   ->     0 17'00010000000000000
     17:     4 6'----10   ->     3 17'00010000000000000
     18:     4 6'----00   ->     4 17'00010000000000000
     19:     5 6'----10   ->     0 17'00001000000000000
     20:     5 6'-----1   ->     0 17'00001000000000000
     21:     5 6'----00   ->     5 17'00001000000000000
     22:     6 6'-----1   ->     0 17'00000100000000000
     23:     6 6'----10   ->     5 17'00000100000000000
     24:     6 6'----00   ->     6 17'00000100000000000
     25:     7 6'-----1   ->     0 17'00000010000000000
     26:     7 6'----10   ->     6 17'00000010000000000
     27:     7 6'----00   ->     7 17'00000010000000000
     28:     8 6'-----1   ->     0 17'00000001000000000
     29:     8 6'----10   ->     7 17'00000001000000000
     30:     8 6'----00   ->     8 17'00000001000000000
     31:     9 6'----10   ->     0 17'00000000100000000
     32:     9 6'-----1   ->     0 17'00000000100000000
     33:     9 6'----00   ->     9 17'00000000100000000
     34:    10 6'-----1   ->     0 17'00000000010000000
     35:    10 6'----10   ->     9 17'00000000010000000
     36:    10 6'----00   ->    10 17'00000000010000000
     37:    11 6'-----1   ->     0 17'00000000001000000
     38:    11 6'----10   ->    10 17'00000000001000000
     39:    11 6'----00   ->    11 17'00000000001000000
     40:    12 6'-----1   ->     0 17'00000000000000000
     41:    12 6'----10   ->    11 17'00000000000000000
     42:    12 6'----00   ->    12 17'00000000000000000
     43:    13 6'----10   ->     0 17'00000000000100000
     44:    13 6'-----1   ->     0 17'00000000000100000
     45:    13 6'----00   ->    13 17'00000000000100000
     46:    14 6'-----1   ->     0 17'00000000000010000
     47:    14 6'----10   ->    13 17'00000000000010000
     48:    14 6'----00   ->    14 17'00000000000010000
     49:    15 6'-----1   ->     0 17'00000000000001000
     50:    15 6'----10   ->    14 17'00000000000001000
     51:    15 6'----00   ->    15 17'00000000000001000
     52:    16 6'-----1   ->     0 17'00000000000000100
     53:    16 6'----10   ->    15 17'00000000000000100
     54:    16 6'----00   ->    16 17'00000000000000100
     55:    17 6'-----1   ->     0 17'00000000000000010
     56:    17 6'----10   ->    16 17'00000000000000010
     57:    17 6'----00   ->    17 17'00000000000000010

-------------------------------------

12.8. Executing FSM_MAP pass (mapping FSMs to basic logic).
Mapping FSM `$fsm$\byte_controller.bit_controller.c_state$815' from module `\i2c_master'.

13. Executing OPT pass (performing simple optimizations).

13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_master.
<suppressed ~19 debug messages>

13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i2c_master'.
<suppressed ~90 debug messages>
Removed a total of 30 cells.

13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \i2c_master..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~39 debug messages>

13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \i2c_master.
Performed a total of 0 changes.

13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i2c_master'.
Removed a total of 0 cells.

13.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $verific$txr_reg$i2c_master.v:217$87 ($adff) from module i2c_master (D = $verific$n232$51, Q = \txr).
Adding EN signal on $verific$prer_reg$i2c_master.v:217$85 ($adff) from module i2c_master (D = 16'0000000000000000, Q = \prer).
Adding EN signal on $verific$ctr_reg$i2c_master.v:217$86 ($adff) from module i2c_master (D = 8'10000000, Q = \ctr).
Adding EN signal on $verific$cr_reg$i2c_master.v:237$97 ($adff) from module i2c_master (D = $verific$n338$56 [3], Q = \cr [3]).
Adding EN signal on $verific$cr_reg$i2c_master.v:237$97 ($adff) from module i2c_master (D = $verific$n338$56 [7:4], Q = \cr [7:4]).
Adding EN signal on $verific$cr_reg$i2c_master.v:237$97 ($adff) from module i2c_master (D = $verific$n338$56 [2:0], Q = \cr [2:0]).
Adding EN signal on $flatten\byte_controller.\bit_controller.$verific$sda_oen_reg$i2c_master_bit_ctrl.v:590$804 ($adff) from module i2c_master (D = $flatten\byte_controller.\bit_controller.$verific$n1116$577, Q = \byte_controller.bit_controller.sda_oen).
Adding EN signal on $flatten\byte_controller.\bit_controller.$verific$scl_oen_reg$i2c_master_bit_ctrl.v:590$803 ($adff) from module i2c_master (D = $flatten\byte_controller.\bit_controller.$verific$n1115$576, Q = \byte_controller.bit_controller.scl_oen).
Adding EN signal on $flatten\byte_controller.\bit_controller.$verific$fSDA_reg$i2c_master_bit_ctrl.v:289$695 ($adff) from module i2c_master (D = $flatten\byte_controller.\bit_controller.$verific$n367$605, Q = \byte_controller.bit_controller.fSDA).
Adding EN signal on $flatten\byte_controller.\bit_controller.$verific$fSCL_reg$i2c_master_bit_ctrl.v:289$694 ($adff) from module i2c_master (D = $flatten\byte_controller.\bit_controller.$verific$n363$604, Q = \byte_controller.bit_controller.fSCL).
Adding EN signal on $flatten\byte_controller.\bit_controller.$verific$dout_reg$i2c_master_bit_ctrl.v:373$745 ($dff) from module i2c_master (D = \byte_controller.bit_controller.sSDA, Q = \byte_controller.bit_controller.dout).
Adding EN signal on $flatten\byte_controller.\bit_controller.$verific$cnt_reg$i2c_master_bit_ctrl.v:241$667 ($adff) from module i2c_master (D = $flatten\byte_controller.\bit_controller.$verific$n137$585, Q = \byte_controller.bit_controller.cnt).
Adding EN signal on $flatten\byte_controller.$verific$dcnt_reg$i2c_master_byte_ctrl.v:220$367 ($adff) from module i2c_master (D = $flatten\byte_controller.$verific$n59$243, Q = \byte_controller.dcnt).
Adding EN signal on $flatten\byte_controller.$verific$core_cmd_reg$i2c_master_byte_ctrl.v:384$461 ($adff) from module i2c_master (D = $flatten\byte_controller.$verific$n618$311, Q = \byte_controller.core_cmd).
Adding EN signal on $flatten\byte_controller.$verific$c_state_reg$i2c_master_byte_ctrl.v:384$466 ($adff) from module i2c_master (D = $flatten\byte_controller.$verific$n627$312, Q = \byte_controller.c_state).
Adding EN signal on $flatten\byte_controller.$verific$ack_out_reg$i2c_master_byte_ctrl.v:384$467 ($adff) from module i2c_master (D = $flatten\byte_controller.$verific$n634$236, Q = \byte_controller.ack_out).
Setting constant 0-bit at position 0 on $verific$al_reg$i2c_master.v:303$176 ($adff) from module i2c_master.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$1017 ($adffe) from module i2c_master.
Setting constant 0-bit at position 1 on $auto$ff.cc:262:slice$1017 ($adffe) from module i2c_master.
Setting constant 0-bit at position 2 on $auto$ff.cc:262:slice$1017 ($adffe) from module i2c_master.
Setting constant 0-bit at position 3 on $auto$ff.cc:262:slice$1017 ($adffe) from module i2c_master.
Setting constant 0-bit at position 4 on $auto$ff.cc:262:slice$1017 ($adffe) from module i2c_master.
Setting constant 0-bit at position 5 on $auto$ff.cc:262:slice$1017 ($adffe) from module i2c_master.
Setting constant 0-bit at position 6 on $auto$ff.cc:262:slice$1017 ($adffe) from module i2c_master.
Setting constant 1-bit at position 7 on $auto$ff.cc:262:slice$1017 ($adffe) from module i2c_master.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$1016 ($adffe) from module i2c_master.
Setting constant 0-bit at position 1 on $auto$ff.cc:262:slice$1016 ($adffe) from module i2c_master.
Setting constant 0-bit at position 2 on $auto$ff.cc:262:slice$1016 ($adffe) from module i2c_master.
Setting constant 0-bit at position 3 on $auto$ff.cc:262:slice$1016 ($adffe) from module i2c_master.
Setting constant 0-bit at position 4 on $auto$ff.cc:262:slice$1016 ($adffe) from module i2c_master.
Setting constant 0-bit at position 5 on $auto$ff.cc:262:slice$1016 ($adffe) from module i2c_master.
Setting constant 0-bit at position 6 on $auto$ff.cc:262:slice$1016 ($adffe) from module i2c_master.
Setting constant 0-bit at position 7 on $auto$ff.cc:262:slice$1016 ($adffe) from module i2c_master.
Setting constant 0-bit at position 8 on $auto$ff.cc:262:slice$1016 ($adffe) from module i2c_master.
Setting constant 0-bit at position 9 on $auto$ff.cc:262:slice$1016 ($adffe) from module i2c_master.
Setting constant 0-bit at position 10 on $auto$ff.cc:262:slice$1016 ($adffe) from module i2c_master.
Setting constant 0-bit at position 11 on $auto$ff.cc:262:slice$1016 ($adffe) from module i2c_master.
Setting constant 0-bit at position 12 on $auto$ff.cc:262:slice$1016 ($adffe) from module i2c_master.
Setting constant 0-bit at position 13 on $auto$ff.cc:262:slice$1016 ($adffe) from module i2c_master.
Setting constant 0-bit at position 14 on $auto$ff.cc:262:slice$1016 ($adffe) from module i2c_master.
Setting constant 0-bit at position 15 on $auto$ff.cc:262:slice$1016 ($adffe) from module i2c_master.

13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i2c_master..
Removed 6 unused cells and 58 unused wires.
<suppressed ~7 debug messages>

13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_master.
<suppressed ~20 debug messages>

13.9. Rerunning OPT passes. (Maybe there is more to do..)

13.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \i2c_master..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~33 debug messages>

13.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \i2c_master.
    New ctrl vector for $pmux cell $flatten\byte_controller.\bit_controller.$verific$Select_305$i2c_master_bit_ctrl.v:589$790: $auto$opt_reduce.cc:134:opt_pmux$1100
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$1099: { \byte_controller.bit_controller.c_state [14] \byte_controller.bit_controller.c_state [10] \byte_controller.bit_controller.c_state [6] \byte_controller.bit_controller.c_state [2] }
  Optimizing cells in module \i2c_master.
Performed a total of 2 changes.

13.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i2c_master'.
<suppressed ~42 debug messages>
Removed a total of 14 cells.

13.13. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 15 on $auto$ff.cc:262:slice$1056 ($adffe) from module i2c_master.
Setting constant 0-bit at position 13 on $flatten\byte_controller.\bit_controller.$verific$filter_cnt_reg$i2c_master_bit_ctrl.v:271$686 ($adff) from module i2c_master.
Setting constant 0-bit at position 0 on $verific$wb_inta_o_reg$i2c_master.v:312$183 ($adff) from module i2c_master.

13.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i2c_master..
Removed 2 unused cells and 29 unused wires.
<suppressed ~3 debug messages>

13.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_master.

13.16. Rerunning OPT passes. (Maybe there is more to do..)

13.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \i2c_master..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~33 debug messages>

13.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \i2c_master.
    New input vector for $reduce_or cell $flatten\byte_controller.\bit_controller.$verific$reduce_nor_60$i2c_master_bit_ctrl.v:270$679: \byte_controller.bit_controller.filter_cnt [12:0]
    New input vector for $reduce_or cell $flatten\byte_controller.\bit_controller.$verific$reduce_nor_26$i2c_master_bit_ctrl.v:227$655: \byte_controller.bit_controller.cnt [14:0]
    New ctrl vector for $pmux cell $flatten\byte_controller.$verific$Select_152$i2c_master_byte_ctrl.v:383$445: { $flatten\byte_controller.$verific$n575$219 $auto$opt_reduce.cc:134:opt_pmux$1104 }
  Optimizing cells in module \i2c_master.
Performed a total of 3 changes.

13.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i2c_master'.
Removed a total of 0 cells.

13.20. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 14 on $auto$ff.cc:262:slice$1101 ($adffe) from module i2c_master.
Setting constant 0-bit at position 12 on $auto$ff.cc:262:slice$1102 ($adff) from module i2c_master.

13.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i2c_master..

13.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_master.

13.23. Rerunning OPT passes. (Maybe there is more to do..)

13.24. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \i2c_master..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~33 debug messages>

13.25. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \i2c_master.
    New input vector for $reduce_or cell $flatten\byte_controller.\bit_controller.$verific$reduce_nor_60$i2c_master_bit_ctrl.v:270$679: \byte_controller.bit_controller.filter_cnt [11:0]
    New input vector for $reduce_or cell $flatten\byte_controller.\bit_controller.$verific$reduce_nor_26$i2c_master_bit_ctrl.v:227$655: \byte_controller.bit_controller.cnt [13:0]
  Optimizing cells in module \i2c_master.
Performed a total of 2 changes.

13.26. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i2c_master'.
Removed a total of 0 cells.

13.27. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 13 on $auto$ff.cc:262:slice$1105 ($adffe) from module i2c_master.
Setting constant 0-bit at position 11 on $auto$ff.cc:262:slice$1106 ($adff) from module i2c_master.

13.28. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i2c_master..

13.29. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_master.

13.30. Rerunning OPT passes. (Maybe there is more to do..)

13.31. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \i2c_master..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~33 debug messages>

13.32. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \i2c_master.
    New input vector for $reduce_or cell $flatten\byte_controller.\bit_controller.$verific$reduce_nor_60$i2c_master_bit_ctrl.v:270$679: \byte_controller.bit_controller.filter_cnt [10:0]
    New input vector for $reduce_or cell $flatten\byte_controller.\bit_controller.$verific$reduce_nor_26$i2c_master_bit_ctrl.v:227$655: \byte_controller.bit_controller.cnt [12:0]
  Optimizing cells in module \i2c_master.
Performed a total of 2 changes.

13.33. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i2c_master'.
Removed a total of 0 cells.

13.34. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 12 on $auto$ff.cc:262:slice$1107 ($adffe) from module i2c_master.
Setting constant 0-bit at position 10 on $auto$ff.cc:262:slice$1108 ($adff) from module i2c_master.

13.35. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i2c_master..

13.36. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_master.

13.37. Rerunning OPT passes. (Maybe there is more to do..)

13.38. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \i2c_master..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~33 debug messages>

13.39. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \i2c_master.
    New input vector for $reduce_or cell $flatten\byte_controller.\bit_controller.$verific$reduce_nor_60$i2c_master_bit_ctrl.v:270$679: \byte_controller.bit_controller.filter_cnt [9:0]
    New input vector for $reduce_or cell $flatten\byte_controller.\bit_controller.$verific$reduce_nor_26$i2c_master_bit_ctrl.v:227$655: \byte_controller.bit_controller.cnt [11:0]
  Optimizing cells in module \i2c_master.
Performed a total of 2 changes.

13.40. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i2c_master'.
Removed a total of 0 cells.

13.41. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 11 on $auto$ff.cc:262:slice$1109 ($adffe) from module i2c_master.
Setting constant 0-bit at position 9 on $auto$ff.cc:262:slice$1110 ($adff) from module i2c_master.

13.42. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i2c_master..

13.43. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_master.

13.44. Rerunning OPT passes. (Maybe there is more to do..)

13.45. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \i2c_master..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~33 debug messages>

13.46. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \i2c_master.
    New input vector for $reduce_or cell $flatten\byte_controller.\bit_controller.$verific$reduce_nor_60$i2c_master_bit_ctrl.v:270$679: \byte_controller.bit_controller.filter_cnt [8:0]
    New input vector for $reduce_or cell $flatten\byte_controller.\bit_controller.$verific$reduce_nor_26$i2c_master_bit_ctrl.v:227$655: \byte_controller.bit_controller.cnt [10:0]
  Optimizing cells in module \i2c_master.
Performed a total of 2 changes.

13.47. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i2c_master'.
Removed a total of 0 cells.

13.48. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 10 on $auto$ff.cc:262:slice$1111 ($adffe) from module i2c_master.
Setting constant 0-bit at position 8 on $auto$ff.cc:262:slice$1112 ($adff) from module i2c_master.

13.49. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i2c_master..

13.50. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_master.

13.51. Rerunning OPT passes. (Maybe there is more to do..)

13.52. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \i2c_master..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~33 debug messages>

13.53. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \i2c_master.
    New input vector for $reduce_or cell $flatten\byte_controller.\bit_controller.$verific$reduce_nor_60$i2c_master_bit_ctrl.v:270$679: \byte_controller.bit_controller.filter_cnt [7:0]
    New input vector for $reduce_or cell $flatten\byte_controller.\bit_controller.$verific$reduce_nor_26$i2c_master_bit_ctrl.v:227$655: \byte_controller.bit_controller.cnt [9:0]
  Optimizing cells in module \i2c_master.
Performed a total of 2 changes.

13.54. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i2c_master'.
Removed a total of 0 cells.

13.55. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 9 on $auto$ff.cc:262:slice$1113 ($adffe) from module i2c_master.
Setting constant 0-bit at position 7 on $auto$ff.cc:262:slice$1114 ($adff) from module i2c_master.

13.56. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i2c_master..

13.57. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_master.

13.58. Rerunning OPT passes. (Maybe there is more to do..)

13.59. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \i2c_master..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~33 debug messages>

13.60. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \i2c_master.
    New input vector for $reduce_or cell $flatten\byte_controller.\bit_controller.$verific$reduce_nor_60$i2c_master_bit_ctrl.v:270$679: \byte_controller.bit_controller.filter_cnt [6:0]
    New input vector for $reduce_or cell $flatten\byte_controller.\bit_controller.$verific$reduce_nor_26$i2c_master_bit_ctrl.v:227$655: \byte_controller.bit_controller.cnt [8:0]
  Optimizing cells in module \i2c_master.
Performed a total of 2 changes.

13.61. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i2c_master'.
Removed a total of 0 cells.

13.62. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 8 on $auto$ff.cc:262:slice$1115 ($adffe) from module i2c_master.
Setting constant 0-bit at position 6 on $auto$ff.cc:262:slice$1116 ($adff) from module i2c_master.

13.63. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i2c_master..

13.64. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_master.

13.65. Rerunning OPT passes. (Maybe there is more to do..)

13.66. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \i2c_master..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~33 debug messages>

13.67. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \i2c_master.
    New input vector for $reduce_or cell $flatten\byte_controller.\bit_controller.$verific$reduce_nor_60$i2c_master_bit_ctrl.v:270$679: \byte_controller.bit_controller.filter_cnt [5:0]
    New input vector for $reduce_or cell $flatten\byte_controller.\bit_controller.$verific$reduce_nor_26$i2c_master_bit_ctrl.v:227$655: \byte_controller.bit_controller.cnt [7:0]
  Optimizing cells in module \i2c_master.
Performed a total of 2 changes.

13.68. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i2c_master'.
Removed a total of 0 cells.

13.69. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 7 on $auto$ff.cc:262:slice$1117 ($adffe) from module i2c_master.
Setting constant 0-bit at position 5 on $auto$ff.cc:262:slice$1118 ($adff) from module i2c_master.

13.70. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i2c_master..

13.71. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_master.

13.72. Rerunning OPT passes. (Maybe there is more to do..)

13.73. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \i2c_master..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~33 debug messages>

13.74. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \i2c_master.
    New input vector for $reduce_or cell $flatten\byte_controller.\bit_controller.$verific$reduce_nor_60$i2c_master_bit_ctrl.v:270$679: \byte_controller.bit_controller.filter_cnt [4:0]
    New input vector for $reduce_or cell $flatten\byte_controller.\bit_controller.$verific$reduce_nor_26$i2c_master_bit_ctrl.v:227$655: \byte_controller.bit_controller.cnt [6:0]
  Optimizing cells in module \i2c_master.
Performed a total of 2 changes.

13.75. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i2c_master'.
Removed a total of 0 cells.

13.76. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 6 on $auto$ff.cc:262:slice$1119 ($adffe) from module i2c_master.
Setting constant 0-bit at position 4 on $auto$ff.cc:262:slice$1120 ($adff) from module i2c_master.

13.77. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i2c_master..

13.78. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_master.

13.79. Rerunning OPT passes. (Maybe there is more to do..)

13.80. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \i2c_master..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~33 debug messages>

13.81. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \i2c_master.
    New input vector for $reduce_or cell $flatten\byte_controller.\bit_controller.$verific$reduce_nor_60$i2c_master_bit_ctrl.v:270$679: \byte_controller.bit_controller.filter_cnt [3:0]
    New input vector for $reduce_or cell $flatten\byte_controller.\bit_controller.$verific$reduce_nor_26$i2c_master_bit_ctrl.v:227$655: \byte_controller.bit_controller.cnt [5:0]
  Optimizing cells in module \i2c_master.
Performed a total of 2 changes.

13.82. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i2c_master'.
Removed a total of 0 cells.

13.83. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 5 on $auto$ff.cc:262:slice$1121 ($adffe) from module i2c_master.
Setting constant 0-bit at position 3 on $auto$ff.cc:262:slice$1122 ($adff) from module i2c_master.

13.84. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i2c_master..

13.85. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_master.

13.86. Rerunning OPT passes. (Maybe there is more to do..)

13.87. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \i2c_master..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~33 debug messages>

13.88. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \i2c_master.
    New input vector for $reduce_or cell $flatten\byte_controller.\bit_controller.$verific$reduce_nor_60$i2c_master_bit_ctrl.v:270$679: \byte_controller.bit_controller.filter_cnt [2:0]
    New input vector for $reduce_or cell $flatten\byte_controller.\bit_controller.$verific$reduce_nor_26$i2c_master_bit_ctrl.v:227$655: \byte_controller.bit_controller.cnt [4:0]
  Optimizing cells in module \i2c_master.
Performed a total of 2 changes.

13.89. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i2c_master'.
Removed a total of 0 cells.

13.90. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 4 on $auto$ff.cc:262:slice$1123 ($adffe) from module i2c_master.
Setting constant 0-bit at position 2 on $auto$ff.cc:262:slice$1124 ($adff) from module i2c_master.

13.91. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i2c_master..

13.92. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_master.

13.93. Rerunning OPT passes. (Maybe there is more to do..)

13.94. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \i2c_master..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~33 debug messages>

13.95. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \i2c_master.
    New input vector for $reduce_or cell $flatten\byte_controller.\bit_controller.$verific$reduce_nor_60$i2c_master_bit_ctrl.v:270$679: \byte_controller.bit_controller.filter_cnt [1:0]
    New input vector for $reduce_or cell $flatten\byte_controller.\bit_controller.$verific$reduce_nor_26$i2c_master_bit_ctrl.v:227$655: \byte_controller.bit_controller.cnt [3:0]
  Optimizing cells in module \i2c_master.
Performed a total of 2 changes.

13.96. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i2c_master'.
Removed a total of 0 cells.

13.97. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 3 on $auto$ff.cc:262:slice$1125 ($adffe) from module i2c_master.
Setting constant 0-bit at position 1 on $auto$ff.cc:262:slice$1126 ($adff) from module i2c_master.

13.98. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i2c_master..

13.99. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_master.
<suppressed ~1 debug messages>

13.100. Rerunning OPT passes. (Maybe there is more to do..)

13.101. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \i2c_master..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~33 debug messages>

13.102. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \i2c_master.
    New input vector for $reduce_or cell $flatten\byte_controller.\bit_controller.$verific$reduce_nor_26$i2c_master_bit_ctrl.v:227$655: \byte_controller.bit_controller.cnt [2:0]
  Optimizing cells in module \i2c_master.
Performed a total of 1 changes.

13.103. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i2c_master'.
Removed a total of 0 cells.

13.104. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 2 on $auto$ff.cc:262:slice$1127 ($adffe) from module i2c_master.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$1128 ($adff) from module i2c_master.

13.105. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i2c_master..
Removed 3 unused cells and 5 unused wires.
<suppressed ~4 debug messages>

13.106. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_master.
<suppressed ~3 debug messages>

13.107. Rerunning OPT passes. (Maybe there is more to do..)

13.108. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \i2c_master..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~32 debug messages>

13.109. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \i2c_master.
    New input vector for $reduce_or cell $flatten\byte_controller.\bit_controller.$verific$reduce_nor_26$i2c_master_bit_ctrl.v:227$655: \byte_controller.bit_controller.cnt [1:0]
  Optimizing cells in module \i2c_master.
Performed a total of 1 changes.

13.110. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i2c_master'.
Removed a total of 0 cells.

13.111. Executing OPT_DFF pass (perform DFF optimizations).
Removing always-active EN on $auto$ff.cc:262:slice$1052 ($adffe) from module i2c_master.
Removing always-active EN on $auto$ff.cc:262:slice$1049 ($adffe) from module i2c_master.
Setting constant 0-bit at position 1 on $auto$ff.cc:262:slice$1129 ($adffe) from module i2c_master.

13.112. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i2c_master..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

13.113. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_master.
<suppressed ~1 debug messages>

13.114. Rerunning OPT passes. (Maybe there is more to do..)

13.115. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \i2c_master..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~32 debug messages>

13.116. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \i2c_master.
Performed a total of 0 changes.

13.117. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i2c_master'.
Removed a total of 0 cells.

13.118. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$1130 ($adffe) from module i2c_master.

13.119. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i2c_master..
Removed 11 unused cells and 12 unused wires.
<suppressed ~14 debug messages>

13.120. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_master.
<suppressed ~4 debug messages>

13.121. Rerunning OPT passes. (Maybe there is more to do..)

13.122. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \i2c_master..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~30 debug messages>

13.123. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \i2c_master.
Performed a total of 0 changes.

13.124. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i2c_master'.
Removed a total of 0 cells.

13.125. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 1-bit at position 0 on $flatten\byte_controller.\bit_controller.$verific$clk_en_reg$i2c_master_bit_ctrl.v:241$668 ($adff) from module i2c_master.

13.126. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i2c_master..
Removed 3 unused cells and 7 unused wires.
<suppressed ~5 debug messages>

13.127. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_master.
<suppressed ~8 debug messages>

13.128. Rerunning OPT passes. (Maybe there is more to do..)

13.129. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \i2c_master..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~30 debug messages>

13.130. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \i2c_master.
Performed a total of 0 changes.

13.131. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i2c_master'.
Removed a total of 0 cells.

13.132. Executing OPT_DFF pass (perform DFF optimizations).

13.133. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i2c_master..
Removed 0 unused cells and 6 unused wires.
<suppressed ~1 debug messages>

13.134. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_master.

13.135. Rerunning OPT passes. (Maybe there is more to do..)

13.136. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \i2c_master..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~30 debug messages>

13.137. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \i2c_master.
Performed a total of 0 changes.

13.138. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i2c_master'.
Removed a total of 0 cells.

13.139. Executing OPT_DFF pass (perform DFF optimizations).

13.140. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i2c_master..

13.141. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_master.

13.142. Finished OPT passes. (There is nothing left to do.)

14. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 3) from port B of cell i2c_master.$verific$equal_33$i2c_master.v:215$78 ($eq).
Removed top 1 bits (of 3) from port B of cell i2c_master.$auto$opt_dff.cc:195:make_patterns_logic$1074 ($ne).
Removed top 1 bits (of 3) from port B of cell i2c_master.$auto$opt_dff.cc:195:make_patterns_logic$1022 ($ne).
Removed top 2 bits (of 4) from port B of cell i2c_master.$flatten\byte_controller.\bit_controller.$verific$equal_141$i2c_master_bit_ctrl.v:359$736 ($eq).
Removed top 3 bits (of 4) from port B of cell i2c_master.$flatten\byte_controller.\bit_controller.$verific$equal_176$i2c_master_bit_ctrl.v:425$749 ($eq).
Removed top 1 bits (of 4) from port B of cell i2c_master.$flatten\byte_controller.\bit_controller.$verific$equal_178$i2c_master_bit_ctrl.v:427$750 ($eq).
Removed top 1 bits (of 6) from port B of cell i2c_master.$flatten\byte_controller.$verific$equal_146$i2c_master_byte_ctrl.v:373$439 ($eq).
Removed top 2 bits (of 6) from port B of cell i2c_master.$flatten\byte_controller.$verific$equal_145$i2c_master_byte_ctrl.v:346$438 ($eq).
Removed top 4 bits (of 6) from port B of cell i2c_master.$flatten\byte_controller.$verific$equal_144$i2c_master_byte_ctrl.v:327$437 ($eq).
Removed top 3 bits (of 6) from port B of cell i2c_master.$flatten\byte_controller.$verific$equal_143$i2c_master_byte_ctrl.v:312$436 ($eq).
Removed top 5 bits (of 6) from port B of cell i2c_master.$flatten\byte_controller.$verific$equal_141$i2c_master_byte_ctrl.v:289$434 ($eq).
Removed top 2 bits (of 4) from mux cell i2c_master.$flatten\byte_controller.$verific$mux_120$i2c_master_byte_ctrl.v:361$425 ($mux).
Removed top 1 bits (of 6) from mux cell i2c_master.$flatten\byte_controller.$verific$mux_119$i2c_master_byte_ctrl.v:361$424 ($mux).
Removed top 3 bits (of 6) from mux cell i2c_master.$flatten\byte_controller.$verific$mux_78$i2c_master_byte_ctrl.v:301$404 ($mux).
Removed top 2 bits (of 12) from mux cell i2c_master.$flatten\byte_controller.$verific$mux_184$i2c_master_byte_ctrl.v:325$402 ($mux).
Removed top 2 bits (of 4) from mux cell i2c_master.$flatten\byte_controller.$verific$mux_65$i2c_master_byte_ctrl.v:284$393 ($mux).
Removed top 3 bits (of 6) from port B of cell i2c_master.$flatten\byte_controller.$verific$not_equal_46$i2c_master_byte_ctrl.v:253$380 ($ne).
Removed top 2 bits (of 3) from port B of cell i2c_master.$flatten\byte_controller.$verific$sub_15$i2c_master_byte_ctrl.v:220$362 ($sub).
Removed top 2 bits (of 4) from wire i2c_master.$flatten\byte_controller.$verific$n241$261.
Removed top 1 bits (of 6) from wire i2c_master.$flatten\byte_controller.$verific$n246$262.
Removed top 1 bits (of 4) from wire i2c_master.$flatten\byte_controller.$verific$n253$263.
Removed top 1 bits (of 6) from wire i2c_master.$flatten\byte_controller.$verific$n258$264.
Removed top 3 bits (of 4) from wire i2c_master.$flatten\byte_controller.$verific$n265$265.
Removed top 3 bits (of 6) from wire i2c_master.$flatten\byte_controller.$verific$n308$272.
Removed top 1 bits (of 4) from wire i2c_master.$flatten\byte_controller.$verific$n315$273.
Removed top 2 bits (of 6) from wire i2c_master.$flatten\byte_controller.$verific$n390$283.
Removed top 1 bits (of 6) from wire i2c_master.$flatten\byte_controller.$verific$n511$301.
Removed top 2 bits (of 4) from wire i2c_master.$flatten\byte_controller.$verific$n518$302.
Removed top 1 bits (of 6) from wire i2c_master.$flatten\byte_controller.$verific$n530$303.
Removed top 1 bits (of 4) from wire i2c_master.$flatten\byte_controller.$verific$n537$304.
Removed top 1 bits (of 6) from wire i2c_master.$flatten\byte_controller.$verific$n559$305.
Removed top 1 bits (of 4) from wire i2c_master.$flatten\byte_controller.$verific$n566$306.
Removed top 1 bits (of 6) from wire i2c_master.$flatten\byte_controller.$verific$n579$307.
Removed top 3 bits (of 4) from wire i2c_master.$flatten\byte_controller.$verific$n586$308.

15. Executing PEEPOPT pass (run peephole optimizers).

16. Executing PMUXTREE pass.

17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i2c_master..
Removed 20 unused cells and 46 unused wires.
<suppressed ~21 debug messages>

18. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module i2c_master:
  creating $macc model for $flatten\byte_controller.$verific$sub_15$i2c_master_byte_ctrl.v:220$362 ($sub).
  creating $alu model for $macc $flatten\byte_controller.$verific$sub_15$i2c_master_byte_ctrl.v:220$362.
  creating $alu cell for $flatten\byte_controller.$verific$sub_15$i2c_master_byte_ctrl.v:220$362: $auto$alumacc.cc:485:replace_alu$1267
  created 1 $alu and 0 $macc cells.

19. Executing OPT pass (performing simple optimizations).

19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_master.
<suppressed ~1 debug messages>

19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i2c_master'.
<suppressed ~9 debug messages>
Removed a total of 3 cells.

19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \i2c_master..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $auto$pmuxtree.cc:65:recursive_mux_generator$1263.
Removed 1 multiplexer ports.
<suppressed ~32 debug messages>

19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \i2c_master.
Performed a total of 0 changes.

19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i2c_master'.
Removed a total of 0 cells.

19.6. Executing OPT_DFF pass (perform DFF optimizations).

19.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i2c_master..
Removed 0 unused cells and 4 unused wires.
<suppressed ~1 debug messages>

19.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_master.

19.9. Rerunning OPT passes. (Maybe there is more to do..)

19.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \i2c_master..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~32 debug messages>

19.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \i2c_master.
Performed a total of 0 changes.

19.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i2c_master'.
Removed a total of 0 cells.

19.13. Executing OPT_DFF pass (perform DFF optimizations).

19.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i2c_master..

19.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_master.

19.16. Finished OPT passes. (There is nothing left to do.)

20. Executing MEMORY pass.

20.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

20.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

20.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

20.4. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

20.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i2c_master..

20.6. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

20.7. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

20.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i2c_master..

20.9. Executing MEMORY_COLLECT pass (generating $mem cells).

21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i2c_master..

22. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_master.
<suppressed ~17 debug messages>

23. Executing SIMPLEMAP pass (map simple cells to gate primitives).
Mapping i2c_master.$auto$fsm_map.cc:121:implement_pattern_cache$842 ($and).
Mapping i2c_master.$auto$fsm_map.cc:121:implement_pattern_cache$846 ($and).
Mapping i2c_master.$auto$fsm_map.cc:121:implement_pattern_cache$852 ($and).
Mapping i2c_master.$auto$fsm_map.cc:121:implement_pattern_cache$859 ($and).
Mapping i2c_master.$auto$fsm_map.cc:121:implement_pattern_cache$863 ($and).
Mapping i2c_master.$auto$fsm_map.cc:121:implement_pattern_cache$868 ($and).
Mapping i2c_master.$auto$fsm_map.cc:121:implement_pattern_cache$872 ($and).
Mapping i2c_master.$auto$fsm_map.cc:121:implement_pattern_cache$877 ($and).
Mapping i2c_master.$auto$fsm_map.cc:121:implement_pattern_cache$881 ($and).
Mapping i2c_master.$auto$fsm_map.cc:121:implement_pattern_cache$886 ($and).
Mapping i2c_master.$auto$fsm_map.cc:121:implement_pattern_cache$890 ($and).
Mapping i2c_master.$auto$fsm_map.cc:121:implement_pattern_cache$895 ($and).
Mapping i2c_master.$auto$fsm_map.cc:121:implement_pattern_cache$899 ($and).
Mapping i2c_master.$auto$fsm_map.cc:121:implement_pattern_cache$904 ($and).
Mapping i2c_master.$auto$fsm_map.cc:121:implement_pattern_cache$908 ($and).
Mapping i2c_master.$auto$fsm_map.cc:121:implement_pattern_cache$913 ($and).
Mapping i2c_master.$auto$fsm_map.cc:121:implement_pattern_cache$917 ($and).
Mapping i2c_master.$auto$fsm_map.cc:121:implement_pattern_cache$922 ($and).
Mapping i2c_master.$auto$fsm_map.cc:121:implement_pattern_cache$926 ($and).
Mapping i2c_master.$auto$fsm_map.cc:121:implement_pattern_cache$931 ($and).
Mapping i2c_master.$auto$fsm_map.cc:121:implement_pattern_cache$935 ($and).
Mapping i2c_master.$auto$fsm_map.cc:121:implement_pattern_cache$940 ($and).
Mapping i2c_master.$auto$fsm_map.cc:121:implement_pattern_cache$944 ($and).
Mapping i2c_master.$auto$fsm_map.cc:121:implement_pattern_cache$949 ($and).
Mapping i2c_master.$auto$fsm_map.cc:121:implement_pattern_cache$953 ($and).
Mapping i2c_master.$auto$fsm_map.cc:121:implement_pattern_cache$958 ($and).
Mapping i2c_master.$auto$fsm_map.cc:121:implement_pattern_cache$962 ($and).
Mapping i2c_master.$auto$fsm_map.cc:121:implement_pattern_cache$967 ($and).
Mapping i2c_master.$auto$fsm_map.cc:121:implement_pattern_cache$971 ($and).
Mapping i2c_master.$auto$fsm_map.cc:121:implement_pattern_cache$976 ($and).
Mapping i2c_master.$auto$fsm_map.cc:121:implement_pattern_cache$980 ($and).
Mapping i2c_master.$auto$fsm_map.cc:121:implement_pattern_cache$985 ($and).
Mapping i2c_master.$auto$fsm_map.cc:121:implement_pattern_cache$989 ($and).
Mapping i2c_master.$auto$fsm_map.cc:121:implement_pattern_cache$994 ($and).
Mapping i2c_master.$auto$fsm_map.cc:121:implement_pattern_cache$998 ($and).
Mapping i2c_master.$auto$fsm_map.cc:144:implement_pattern_cache$1008 ($reduce_or).
Mapping i2c_master.$auto$fsm_map.cc:144:implement_pattern_cache$855 ($reduce_or).
Mapping i2c_master.$auto$fsm_map.cc:144:implement_pattern_cache$864 ($reduce_or).
Mapping i2c_master.$auto$fsm_map.cc:144:implement_pattern_cache$873 ($reduce_or).
Mapping i2c_master.$auto$fsm_map.cc:144:implement_pattern_cache$882 ($reduce_or).
Mapping i2c_master.$auto$fsm_map.cc:144:implement_pattern_cache$891 ($reduce_or).
Mapping i2c_master.$auto$fsm_map.cc:144:implement_pattern_cache$900 ($reduce_or).
Mapping i2c_master.$auto$fsm_map.cc:144:implement_pattern_cache$909 ($reduce_or).
Mapping i2c_master.$auto$fsm_map.cc:144:implement_pattern_cache$918 ($reduce_or).
Mapping i2c_master.$auto$fsm_map.cc:144:implement_pattern_cache$927 ($reduce_or).
Mapping i2c_master.$auto$fsm_map.cc:144:implement_pattern_cache$936 ($reduce_or).
Mapping i2c_master.$auto$fsm_map.cc:144:implement_pattern_cache$945 ($reduce_or).
Mapping i2c_master.$auto$fsm_map.cc:144:implement_pattern_cache$954 ($reduce_or).
Mapping i2c_master.$auto$fsm_map.cc:144:implement_pattern_cache$963 ($reduce_or).
Mapping i2c_master.$auto$fsm_map.cc:144:implement_pattern_cache$972 ($reduce_or).
Mapping i2c_master.$auto$fsm_map.cc:144:implement_pattern_cache$981 ($reduce_or).
Mapping i2c_master.$auto$fsm_map.cc:144:implement_pattern_cache$990 ($reduce_or).
Mapping i2c_master.$auto$fsm_map.cc:144:implement_pattern_cache$999 ($reduce_or).
Mapping i2c_master.$auto$fsm_map.cc:172:map_fsm$836 ($adff).
Mapping i2c_master.$auto$fsm_map.cc:77:implement_pattern_cache$1001 ($logic_not).
Mapping i2c_master.$auto$fsm_map.cc:77:implement_pattern_cache$1005 ($eq).
Mapping i2c_master.$auto$fsm_map.cc:77:implement_pattern_cache$844 ($logic_not).
Mapping i2c_master.$auto$fsm_map.cc:77:implement_pattern_cache$888 ($eq).
Mapping i2c_master.$auto$fsm_map.cc:77:implement_pattern_cache$924 ($eq).
Mapping i2c_master.$auto$fsm_map.cc:77:implement_pattern_cache$960 ($eq).
Mapping i2c_master.$auto$fsm_map.cc:77:implement_pattern_cache$996 ($not).
Mapping i2c_master.$auto$opt_dff.cc:195:make_patterns_logic$1011 ($reduce_bool).
Mapping i2c_master.$auto$opt_dff.cc:195:make_patterns_logic$1013 ($ne).
Mapping i2c_master.$auto$opt_dff.cc:195:make_patterns_logic$1022 ($ne).
Mapping i2c_master.$auto$opt_dff.cc:195:make_patterns_logic$1027 ($reduce_bool).
Mapping i2c_master.$auto$opt_dff.cc:195:make_patterns_logic$1039 ($ne).
Mapping i2c_master.$auto$opt_dff.cc:195:make_patterns_logic$1046 ($ne).
Mapping i2c_master.$auto$opt_dff.cc:195:make_patterns_logic$1061 ($reduce_bool).
Mapping i2c_master.$auto$opt_dff.cc:195:make_patterns_logic$1064 ($ne).
Mapping i2c_master.$auto$opt_dff.cc:195:make_patterns_logic$1066 ($ne).
Mapping i2c_master.$auto$opt_dff.cc:195:make_patterns_logic$1068 ($ne).
Mapping i2c_master.$auto$opt_dff.cc:195:make_patterns_logic$1070 ($ne).
Mapping i2c_master.$auto$opt_dff.cc:195:make_patterns_logic$1072 ($ne).
Mapping i2c_master.$auto$opt_dff.cc:195:make_patterns_logic$1074 ($ne).
Mapping i2c_master.$auto$opt_dff.cc:195:make_patterns_logic$1096 ($reduce_bool).
Mapping i2c_master.$auto$opt_dff.cc:220:make_patterns_logic$1015 ($reduce_and).
Mapping i2c_master.$auto$opt_dff.cc:220:make_patterns_logic$1024 ($reduce_and).
Mapping i2c_master.$auto$opt_dff.cc:220:make_patterns_logic$1031 ($reduce_and).
Mapping i2c_master.$auto$opt_dff.cc:220:make_patterns_logic$1076 ($reduce_and).
Mapping i2c_master.$auto$opt_dff.cc:220:make_patterns_logic$1098 ($reduce_and).
Mapping i2c_master.$auto$opt_reduce.cc:128:opt_pmux$1099 ($reduce_or).
Mapping i2c_master.$auto$opt_reduce.cc:128:opt_pmux$1103 ($reduce_or).
Mapping i2c_master.$auto$opt_reduce.cc:128:opt_pmux$809 ($reduce_or).
Mapping i2c_master.$auto$pmuxtree.cc:35:or_generator$1171 ($or).
Mapping i2c_master.$auto$pmuxtree.cc:35:or_generator$1191 ($or).
Mapping i2c_master.$auto$pmuxtree.cc:35:or_generator$1199 ($or).
Mapping i2c_master.$auto$pmuxtree.cc:35:or_generator$1255 ($or).
Mapping i2c_master.$auto$pmuxtree.cc:37:or_generator$1203 ($reduce_or).
Mapping i2c_master.$auto$pmuxtree.cc:65:recursive_mux_generator$1151 ($mux).
Mapping i2c_master.$auto$pmuxtree.cc:65:recursive_mux_generator$1153 ($mux).
Mapping i2c_master.$auto$pmuxtree.cc:65:recursive_mux_generator$1159 ($mux).
Mapping i2c_master.$auto$pmuxtree.cc:65:recursive_mux_generator$1161 ($mux).
Mapping i2c_master.$auto$pmuxtree.cc:65:recursive_mux_generator$1167 ($mux).
Mapping i2c_master.$auto$pmuxtree.cc:65:recursive_mux_generator$1169 ($mux).
Mapping i2c_master.$auto$pmuxtree.cc:65:recursive_mux_generator$1173 ($mux).
Mapping i2c_master.$auto$pmuxtree.cc:65:recursive_mux_generator$1179 ($mux).
Mapping i2c_master.$auto$pmuxtree.cc:65:recursive_mux_generator$1181 ($mux).
Mapping i2c_master.$auto$pmuxtree.cc:65:recursive_mux_generator$1187 ($mux).
Mapping i2c_master.$auto$pmuxtree.cc:65:recursive_mux_generator$1189 ($mux).
Mapping i2c_master.$auto$pmuxtree.cc:65:recursive_mux_generator$1193 ($mux).
Mapping i2c_master.$auto$pmuxtree.cc:65:recursive_mux_generator$1195 ($mux).
Mapping i2c_master.$auto$pmuxtree.cc:65:recursive_mux_generator$1197 ($mux).
Mapping i2c_master.$auto$pmuxtree.cc:65:recursive_mux_generator$1201 ($mux).
Mapping i2c_master.$auto$pmuxtree.cc:65:recursive_mux_generator$1205 ($mux).
Mapping i2c_master.$auto$pmuxtree.cc:65:recursive_mux_generator$1211 ($mux).
Mapping i2c_master.$auto$pmuxtree.cc:65:recursive_mux_generator$1213 ($mux).
Mapping i2c_master.$auto$pmuxtree.cc:65:recursive_mux_generator$1217 ($mux).
Mapping i2c_master.$auto$pmuxtree.cc:65:recursive_mux_generator$1219 ($mux).
Mapping i2c_master.$auto$pmuxtree.cc:65:recursive_mux_generator$1221 ($mux).
Mapping i2c_master.$auto$pmuxtree.cc:65:recursive_mux_generator$1225 ($mux).
Mapping i2c_master.$auto$pmuxtree.cc:65:recursive_mux_generator$1229 ($mux).
Mapping i2c_master.$auto$pmuxtree.cc:65:recursive_mux_generator$1235 ($mux).
Mapping i2c_master.$auto$pmuxtree.cc:65:recursive_mux_generator$1237 ($mux).
Mapping i2c_master.$auto$ff.cc:262:slice$1042 ($adffe).
Mapping i2c_master.$auto$pmuxtree.cc:65:recursive_mux_generator$1245 ($mux).
Mapping i2c_master.$auto$pmuxtree.cc:65:recursive_mux_generator$1251 ($mux).
Mapping i2c_master.$auto$ff.cc:262:slice$1077 ($adffe).
Mapping i2c_master.$auto$pmuxtree.cc:65:recursive_mux_generator$1257 ($mux).
Mapping i2c_master.$auto$ff.cc:262:slice$1025 ($adffe).
Mapping i2c_master.$flatten\byte_controller.$verific$cmd_ack_reg$i2c_master_byte_ctrl.v:384$465 ($adff).
Mapping i2c_master.$flatten\byte_controller.$verific$core_txd_reg$i2c_master_byte_ctrl.v:384$462 ($adff).
Mapping i2c_master.$flatten\byte_controller.$verific$equal_140$i2c_master_byte_ctrl.v:262$433 ($logic_not).
Mapping i2c_master.$flatten\byte_controller.$verific$equal_141$i2c_master_byte_ctrl.v:289$434 ($eq).
Mapping i2c_master.$flatten\byte_controller.$verific$equal_142$i2c_master_byte_ctrl.v:306$435 ($eq).
Mapping i2c_master.$flatten\byte_controller.$verific$equal_143$i2c_master_byte_ctrl.v:312$436 ($eq).
Mapping i2c_master.$flatten\byte_controller.$verific$equal_144$i2c_master_byte_ctrl.v:327$437 ($eq).
Mapping i2c_master.$flatten\byte_controller.$verific$equal_145$i2c_master_byte_ctrl.v:346$438 ($eq).
Mapping i2c_master.$flatten\byte_controller.$verific$equal_146$i2c_master_byte_ctrl.v:373$439 ($eq).
Mapping i2c_master.$flatten\byte_controller.$verific$i101$i2c_master_byte_ctrl.v:325$419 ($mux).
Mapping i2c_master.$flatten\byte_controller.$verific$i114$i2c_master_byte_ctrl.v:344$422 ($mux).
Mapping i2c_master.$flatten\byte_controller.$verific$i122$i2c_master_byte_ctrl.v:361$426 ($mux).
Mapping i2c_master.$flatten\byte_controller.$verific$i131$i2c_master_byte_ctrl.v:371$429 ($mux).
Mapping i2c_master.$auto$fsm_map.cc:105:implement_pattern_cache$850 ($reduce_or).
Mapping i2c_master.$flatten\byte_controller.$verific$i133$i2c_master_byte_ctrl.v:371$431 ($mux).
Mapping i2c_master.$auto$ff.cc:262:slice$1059 ($adffe).
Mapping i2c_master.$auto$fsm_map.cc:121:implement_pattern_cache$1003 ($and).
Mapping i2c_master.$flatten\byte_controller.$verific$i162$i2c_master_byte_ctrl.v:384$454 ($mux).
Mapping i2c_master.$flatten\byte_controller.$verific$i163$i2c_master_byte_ctrl.v:384$455 ($mux).
Mapping i2c_master.$flatten\byte_controller.$verific$i164$i2c_master_byte_ctrl.v:384$456 ($mux).
Mapping i2c_master.$flatten\byte_controller.$verific$i165$i2c_master_byte_ctrl.v:384$457 ($mux).
Mapping i2c_master.$flatten\byte_controller.$verific$i167$i2c_master_byte_ctrl.v:384$459 ($mux).
Mapping i2c_master.$flatten\byte_controller.$verific$i48$i2c_master_byte_ctrl.v:253$381 ($and).
Mapping i2c_master.$flatten\byte_controller.$verific$i6$i2c_master_byte_ctrl.v:188$354 ($or).
Mapping i2c_master.$flatten\byte_controller.$verific$i7$i2c_master_byte_ctrl.v:188$355 ($or).
Mapping i2c_master.$auto$ff.cc:262:slice$1062 ($adffe).
Mapping i2c_master.$flatten\byte_controller.$verific$i8$i2c_master_byte_ctrl.v:188$356 ($not).
Mapping i2c_master.$flatten\byte_controller.$verific$i9$i2c_master_byte_ctrl.v:188$357 ($and).
Mapping i2c_master.$auto$ff.cc:262:slice$1049 ($adff).
Mapping i2c_master.$flatten\byte_controller.$verific$ld_reg$i2c_master_byte_ctrl.v:384$464 ($adff).
Mapping i2c_master.$flatten\byte_controller.$verific$mux_101$i2c_master_byte_ctrl.v:325$420 ($mux).
Mapping i2c_master.$flatten\byte_controller.$verific$mux_119$i2c_master_byte_ctrl.v:361$424 ($mux).
Mapping i2c_master.$flatten\byte_controller.$verific$mux_120$i2c_master_byte_ctrl.v:361$425 ($mux).
Mapping i2c_master.$flatten\byte_controller.$verific$mux_159$i2c_master_byte_ctrl.v:384$452 ($mux).
Mapping i2c_master.$flatten\byte_controller.$verific$mux_160$i2c_master_byte_ctrl.v:384$453 ($mux).
Mapping i2c_master.$flatten\byte_controller.$verific$mux_165$i2c_master_byte_ctrl.v:384$458 ($mux).
Mapping i2c_master.$auto$fsm_map.cc:121:implement_pattern_cache$1007 ($and).
Mapping i2c_master.$auto$ff.cc:262:slice$1009 ($adffe).
Mapping i2c_master.$flatten\byte_controller.$verific$mux_178$i2c_master_byte_ctrl.v:325$403 ($mux).
Mapping i2c_master.$flatten\byte_controller.$verific$mux_18$i2c_master_byte_ctrl.v:220$365 ($mux).
Mapping i2c_master.$auto$ff.cc:262:slice$1052 ($adff).
Mapping i2c_master.$flatten\byte_controller.$verific$mux_184$i2c_master_byte_ctrl.v:325$402 ($mux).
Mapping i2c_master.$flatten\byte_controller.$verific$mux_19$i2c_master_byte_ctrl.v:220$366 ($mux).
Mapping i2c_master.$flatten\byte_controller.$verific$mux_49$i2c_master_byte_ctrl.v:254$382 ($mux).
Mapping i2c_master.$flatten\byte_controller.$verific$mux_51$i2c_master_byte_ctrl.v:254$384 ($mux).
Mapping i2c_master.$flatten\byte_controller.$verific$mux_64$i2c_master_byte_ctrl.v:284$392 ($mux).
Mapping i2c_master.$flatten\byte_controller.$verific$mux_65$i2c_master_byte_ctrl.v:284$393 ($mux).
Mapping i2c_master.$flatten\byte_controller.$verific$mux_66$i2c_master_byte_ctrl.v:284$394 ($mux).
Mapping i2c_master.$flatten\byte_controller.$verific$mux_67$i2c_master_byte_ctrl.v:284$395 ($mux).
Mapping i2c_master.$flatten\byte_controller.$verific$mux_68$i2c_master_byte_ctrl.v:284$396 ($mux).
Mapping i2c_master.$flatten\byte_controller.$verific$mux_69$i2c_master_byte_ctrl.v:284$397 ($mux).
Mapping i2c_master.$auto$ff.cc:262:slice$1055 ($dffe).
Mapping i2c_master.$flatten\byte_controller.$verific$mux_78$i2c_master_byte_ctrl.v:301$404 ($mux).
Mapping i2c_master.$flatten\byte_controller.$verific$mux_79$i2c_master_byte_ctrl.v:301$405 ($mux).
Mapping i2c_master.$flatten\byte_controller.$verific$mux_97$i2c_master_byte_ctrl.v:325$418 ($mux).
Mapping i2c_master.$flatten\byte_controller.$verific$not_equal_3$i2c_master_byte_ctrl.v:162$315 ($ne).
Mapping i2c_master.$flatten\byte_controller.$verific$not_equal_46$i2c_master_byte_ctrl.v:253$380 ($ne).
Mapping i2c_master.$flatten\byte_controller.$verific$reduce_or_154$i2c_master_byte_ctrl.v:383$447 ($reduce_or).
Mapping i2c_master.$flatten\byte_controller.$verific$reduce_or_21$i2c_master_byte_ctrl.v:222$368 ($reduce_or).
Mapping i2c_master.$flatten\byte_controller.$verific$shift_reg$i2c_master_byte_ctrl.v:384$463 ($adff).
Mapping i2c_master.$flatten\byte_controller.$verific$sr_reg$i2c_master_byte_ctrl.v:384$460 ($adff).
Mapping i2c_master.$auto$ff.cc:262:slice$1092 ($adffe).
Mapping i2c_master.$flatten\byte_controller.\bit_controller.$verific$busy_reg$i2c_master_bit_ctrl.v:345$735 ($adff).
Mapping i2c_master.$flatten\byte_controller.\bit_controller.$verific$cSCL_reg$i2c_master_bit_ctrl.v:263$674 ($adff).
Mapping i2c_master.$flatten\byte_controller.\bit_controller.$verific$cSDA_reg$i2c_master_bit_ctrl.v:263$675 ($adff).
Mapping i2c_master.$flatten\byte_controller.\bit_controller.$verific$cmd_ack_reg$i2c_master_bit_ctrl.v:590$802 ($adff).
Mapping i2c_master.$flatten\byte_controller.\bit_controller.$verific$dSCL_reg$i2c_master_bit_ctrl.v:317$716 ($adff).
Mapping i2c_master.$flatten\byte_controller.\bit_controller.$verific$dSDA_reg$i2c_master_bit_ctrl.v:317$717 ($adff).
Mapping i2c_master.$flatten\byte_controller.\bit_controller.$verific$equal_141$i2c_master_bit_ctrl.v:359$736 ($eq).
Mapping i2c_master.$flatten\byte_controller.\bit_controller.$verific$equal_176$i2c_master_bit_ctrl.v:425$749 ($eq).
Mapping i2c_master.$flatten\byte_controller.\bit_controller.$verific$equal_178$i2c_master_bit_ctrl.v:427$750 ($eq).
Mapping i2c_master.$flatten\byte_controller.\bit_controller.$verific$equal_179$i2c_master_bit_ctrl.v:428$751 ($eq).
Mapping i2c_master.$flatten\byte_controller.\bit_controller.$verific$i100$i2c_master_bit_ctrl.v:313$705 ($and).
Mapping i2c_master.$flatten\byte_controller.\bit_controller.$verific$i101$i2c_master_bit_ctrl.v:313$706 ($or).
Mapping i2c_master.$flatten\byte_controller.\bit_controller.$verific$i105$i2c_master_bit_ctrl.v:317$710 ($mux).
Mapping i2c_master.$flatten\byte_controller.\bit_controller.$verific$i106$i2c_master_bit_ctrl.v:317$711 ($mux).
Mapping i2c_master.$flatten\byte_controller.\bit_controller.$verific$i107$i2c_master_bit_ctrl.v:317$712 ($mux).
Mapping i2c_master.$flatten\byte_controller.\bit_controller.$verific$i108$i2c_master_bit_ctrl.v:317$713 ($mux).
Mapping i2c_master.$flatten\byte_controller.\bit_controller.$verific$i118$i2c_master_bit_ctrl.v:336$718 ($not).
Mapping i2c_master.$flatten\byte_controller.\bit_controller.$verific$i119$i2c_master_bit_ctrl.v:336$719 ($and).
Mapping i2c_master.$flatten\byte_controller.\bit_controller.$verific$i120$i2c_master_bit_ctrl.v:336$720 ($and).
Mapping i2c_master.$flatten\byte_controller.\bit_controller.$verific$i122$i2c_master_bit_ctrl.v:337$722 ($not).
Mapping i2c_master.$flatten\byte_controller.\bit_controller.$verific$i123$i2c_master_bit_ctrl.v:337$723 ($and).
Mapping i2c_master.$flatten\byte_controller.\bit_controller.$verific$i124$i2c_master_bit_ctrl.v:337$724 ($and).
Mapping i2c_master.$flatten\byte_controller.\bit_controller.$verific$i126$i2c_master_bit_ctrl.v:338$726 ($mux).
Mapping i2c_master.$flatten\byte_controller.\bit_controller.$verific$i127$i2c_master_bit_ctrl.v:338$727 ($mux).
Mapping i2c_master.$flatten\byte_controller.\bit_controller.$verific$i133$i2c_master_bit_ctrl.v:345$730 ($or).
Mapping i2c_master.$flatten\byte_controller.\bit_controller.$verific$i134$i2c_master_bit_ctrl.v:345$731 ($not).
Mapping i2c_master.$flatten\byte_controller.\bit_controller.$verific$i135$i2c_master_bit_ctrl.v:345$732 ($and).
Mapping i2c_master.$flatten\byte_controller.\bit_controller.$verific$i137$i2c_master_bit_ctrl.v:345$734 ($mux).
Mapping i2c_master.$flatten\byte_controller.\bit_controller.$verific$i154$i2c_master_bit_ctrl.v:373$742 ($not).
Mapping i2c_master.$flatten\byte_controller.\bit_controller.$verific$i155$i2c_master_bit_ctrl.v:373$743 ($and).
Mapping i2c_master.$flatten\byte_controller.\bit_controller.$verific$i296$i2c_master_bit_ctrl.v:589$780 ($or).
Mapping i2c_master.$flatten\byte_controller.\bit_controller.$verific$i313$i2c_master_bit_ctrl.v:590$797 ($mux).
Mapping i2c_master.$flatten\byte_controller.\bit_controller.$verific$i314$i2c_master_bit_ctrl.v:590$798 ($mux).
Mapping i2c_master.$flatten\byte_controller.\bit_controller.$verific$i315$i2c_master_bit_ctrl.v:590$799 ($mux).
Mapping i2c_master.$flatten\byte_controller.\bit_controller.$verific$i93$i2c_master_bit_ctrl.v:312$698 ($or).
Mapping i2c_master.$flatten\byte_controller.\bit_controller.$verific$i94$i2c_master_bit_ctrl.v:312$699 ($and).
Mapping i2c_master.$flatten\byte_controller.\bit_controller.$verific$i95$i2c_master_bit_ctrl.v:312$700 ($or).
Mapping i2c_master.$flatten\byte_controller.\bit_controller.$verific$i99$i2c_master_bit_ctrl.v:313$704 ($or).
Mapping i2c_master.$flatten\byte_controller.\bit_controller.$verific$mux_51$i2c_master_bit_ctrl.v:263$672 ($mux).
Mapping i2c_master.$flatten\byte_controller.\bit_controller.$verific$mux_52$i2c_master_bit_ctrl.v:263$673 ($mux).
Mapping i2c_master.$flatten\byte_controller.\bit_controller.$verific$mux_77$i2c_master_bit_ctrl.v:289$692 ($mux).
Mapping i2c_master.$flatten\byte_controller.\bit_controller.$verific$mux_78$i2c_master_bit_ctrl.v:289$693 ($mux).
Mapping i2c_master.$flatten\byte_controller.\bit_controller.$verific$reduce_and_90$i2c_master_bit_ctrl.v:312$696 ($reduce_and).
Mapping i2c_master.$flatten\byte_controller.\bit_controller.$verific$reduce_and_91$i2c_master_bit_ctrl.v:312$697 ($reduce_and).
Mapping i2c_master.$flatten\byte_controller.\bit_controller.$verific$reduce_and_96$i2c_master_bit_ctrl.v:313$702 ($reduce_and).
Mapping i2c_master.$flatten\byte_controller.\bit_controller.$verific$reduce_and_97$i2c_master_bit_ctrl.v:313$703 ($reduce_and).
Mapping i2c_master.$flatten\byte_controller.\bit_controller.$verific$reduce_or_296$i2c_master_bit_ctrl.v:589$781 ($reduce_or).
Mapping i2c_master.$flatten\byte_controller.\bit_controller.$verific$reduce_or_299$i2c_master_bit_ctrl.v:589$784 ($reduce_or).
Mapping i2c_master.$flatten\byte_controller.\bit_controller.$verific$reduce_or_301$i2c_master_bit_ctrl.v:589$786 ($reduce_or).
Mapping i2c_master.$flatten\byte_controller.\bit_controller.$verific$sSCL_reg$i2c_master_bit_ctrl.v:317$714 ($adff).
Mapping i2c_master.$flatten\byte_controller.\bit_controller.$verific$sSDA_reg$i2c_master_bit_ctrl.v:317$715 ($adff).
Mapping i2c_master.$flatten\byte_controller.\bit_controller.$verific$sta_condition_reg$i2c_master_bit_ctrl.v:338$728 ($adff).
Mapping i2c_master.$flatten\byte_controller.\bit_controller.$verific$sto_condition_reg$i2c_master_bit_ctrl.v:338$729 ($adff).
Mapping i2c_master.$verific$equal_33$i2c_master.v:215$78 ($eq).
Mapping i2c_master.$verific$equal_46$i2c_master.v:227$88 ($eq).
Mapping i2c_master.$verific$i10$i2c_master.v:174$66 ($and).
Mapping i2c_master.$verific$i11$i2c_master.v:174$67 ($not).
Mapping i2c_master.$verific$i12$i2c_master.v:174$68 ($and).
Mapping i2c_master.$verific$i35$i2c_master.v:217$79 ($not).
Mapping i2c_master.$verific$i7$i2c_master.v:170$64 ($and).
Mapping i2c_master.$verific$i87$i2c_master.v:302$168 ($or).
Mapping i2c_master.$verific$i88$i2c_master.v:302$169 ($not).
Mapping i2c_master.$verific$i89$i2c_master.v:302$170 ($and).
Mapping i2c_master.$verific$i92$i2c_master.v:303$173 ($mux).
Mapping i2c_master.$verific$i93$i2c_master.v:303$174 ($mux).
Mapping i2c_master.$verific$i94$i2c_master.v:303$175 ($mux).
Mapping i2c_master.$verific$irq_flag_reg$i2c_master.v:303$179 ($adff).
Mapping i2c_master.$auto$ff.cc:262:slice$1018 ($adffe).
Mapping i2c_master.$verific$mux_23$i2c_master.v:188$72 ($bmux).
Mapping i2c_master.$auto$ff.cc:262:slice$1032 ($adffe).
Mapping i2c_master.$verific$mux_39$i2c_master.v:217$84 ($mux).
Mapping i2c_master.$auto$ff.cc:262:slice$1035 ($adffe).
Mapping i2c_master.$verific$mux_58$i2c_master.v:237$95 ($mux).
Mapping i2c_master.$verific$mux_59$i2c_master.v:237$96 ($mux).
Mapping i2c_master.$verific$rxack_reg$i2c_master.v:303$177 ($adff).
Mapping i2c_master.$verific$tip_reg$i2c_master.v:303$178 ($adff).
Mapping i2c_master.$verific$wb_ack_i_reg$i2c_master.v:174$70 ($dff).
Mapping i2c_master.$verific$wb_dat_o_reg$i2c_master.v:189$73 ($dff).

24. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_master.
<suppressed ~286 debug messages>

25. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i2c_master'.
<suppressed ~192 debug messages>
Removed a total of 64 cells.

26. Executing OPT_DFF pass (perform DFF optimizations).

27. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i2c_master..
Removed 0 unused cells and 190 unused wires.
<suppressed ~1 debug messages>

28. Executing OPT pass (performing simple optimizations).

28.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_master.
<suppressed ~1 debug messages>

28.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i2c_master'.
Removed a total of 0 cells.

28.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \i2c_master..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

28.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \i2c_master.
Performed a total of 0 changes.

28.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i2c_master'.
Removed a total of 0 cells.

28.6. Executing OPT_DFF pass (perform DFF optimizations).

28.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i2c_master..

28.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_master.

28.9. Finished OPT passes. (There is nothing left to do.)

29. Executing OPT pass (performing simple optimizations).

29.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_master.
<suppressed ~53 debug messages>

29.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i2c_master'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

29.3. Executing OPT_DFF pass (perform DFF optimizations).

29.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i2c_master..

29.5. Finished fast OPT passes.

30. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

31. Executing OPT pass (performing simple optimizations).

31.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_master.

31.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i2c_master'.
Removed a total of 0 cells.

31.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \i2c_master..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

31.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \i2c_master.
Performed a total of 0 changes.

31.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i2c_master'.
Removed a total of 0 cells.

31.6. Executing OPT_SHARE pass.

31.7. Executing OPT_DFF pass (perform DFF optimizations).

31.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i2c_master..

31.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_master.

31.10. Finished OPT passes. (There is nothing left to do.)

32. Executing TECHMAP pass (map to technology primitives).

32.1. Executing Verilog-2005 frontend: /home/users/aram/Workspace/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/aram/Workspace/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

32.2. Continuing TECHMAP pass.
Using template $paramod$b8c0a997bce700f23568a5ada79cc6781d1f5ca0\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $and.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000011 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $or.
No more expansions possible.
<suppressed ~208 debug messages>

33. Executing OPT pass (performing simple optimizations).

33.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_master.
<suppressed ~16 debug messages>

33.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i2c_master'.
Removed a total of 0 cells.

33.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \i2c_master..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

33.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \i2c_master.
Performed a total of 0 changes.

33.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i2c_master'.
Removed a total of 0 cells.

33.6. Executing OPT_DFF pass (perform DFF optimizations).

33.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i2c_master..
Removed 2 unused cells and 30 unused wires.
<suppressed ~3 debug messages>

33.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_master.

33.9. Rerunning OPT passes. (Maybe there is more to do..)

33.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \i2c_master..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

33.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \i2c_master.
Performed a total of 0 changes.

33.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i2c_master'.
Removed a total of 0 cells.

33.13. Executing OPT_DFF pass (perform DFF optimizations).

33.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i2c_master..

33.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_master.

33.16. Finished OPT passes. (There is nothing left to do.)

34. Executing ABC pass (technology mapping using ABC).

34.1. Extracting gate netlist of module `\i2c_master' to `<abc-temp-dir>/input.blif'..
Extracted 426 gates and 526 wires to a netlist network with 98 inputs and 100 outputs.

34.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + source /home/users/aram/Workspace/yosys_verific_rs/scripts/synth/abc/abc_base6.a21.scr 
ABC: netlist  : i/o =     98/    100  and =     468  lev =   15 (4.57)  mem = 0.01 MB
ABC: Mapping (K=6)  :  lut =    137  edge =     507  lev =    6 (1.82)  mem = 0.01 MB
ABC: netlist  : i/o =     98/    100  and =     464  lev =   14 (4.36)  mem = 0.01 MB
ABC: Mapping (K=6)  :  lut =    137  edge =     493  lev =    5 (1.91)  mem = 0.01 MB
ABC: netlist  : i/o =     98/    100  and =     464  lev =   14 (4.35)  mem = 0.01 MB
ABC: Mapping (K=6)  :  lut =    137  edge =     493  lev =    5 (1.90)  mem = 0.01 MB
ABC: netlist  : i/o =     98/    100  and =     464  lev =   11 (3.64)  mem = 0.01 MB
ABC: Mapping (K=6)  :  lut =    137  edge =     493  lev =    5 (1.90)  mem = 0.01 MB
ABC: netlist  : i/o =     98/    100  and =     441  lev =   12 (4.25)  mem = 0.01 MB
ABC: Mapping (K=6)  :  lut =    128  edge =     478  lev =    4 (1.67)  mem = 0.01 MB
ABC: netlist  : i/o =     98/    100  and =     438  lev =   16 (4.27)  mem = 0.01 MB
ABC: Mapping (K=6)  :  lut =    126  edge =     470  lev =    4 (1.67)  mem = 0.01 MB
ABC: netlist  : i/o =     98/    100  and =     439  lev =   16 (4.27)  mem = 0.01 MB
ABC: Mapping (K=6)  :  lut =    126  edge =     473  lev =    4 (1.67)  mem = 0.01 MB
ABC: netlist  : i/o =     98/    100  and =     437  lev =   15 (4.26)  mem = 0.01 MB
ABC: Mapping (K=6)  :  lut =    126  edge =     470  lev =    4 (1.67)  mem = 0.01 MB
ABC: netlist  : i/o =     98/    100  and =     451  lev =   12 (3.81)  mem = 0.01 MB
ABC: Mapping (K=6)  :  lut =    126  edge =     465  lev =    5 (1.72)  mem = 0.01 MB
ABC: netlist  : i/o =     98/    100  and =     438  lev =   15 (4.13)  mem = 0.01 MB
ABC: Mapping (K=6)  :  lut =    124  edge =     468  lev =    4 (1.63)  mem = 0.01 MB
ABC: netlist  : i/o =     98/    100  and =     443  lev =   14 (4.17)  mem = 0.01 MB
ABC: Mapping (K=6)  :  lut =    124  edge =     468  lev =    4 (1.63)  mem = 0.01 MB
ABC: netlist  : i/o =     98/    100  and =     442  lev =   14 (4.16)  mem = 0.01 MB
ABC: Mapping (K=6)  :  lut =    124  edge =     470  lev =    3 (1.61)  mem = 0.01 MB
ABC: netlist  : i/o =     98/    100  and =     439  lev =   14 (4.17)  mem = 0.01 MB
ABC: Mapping (K=6)  :  lut =    124  edge =     466  lev =    3 (1.61)  mem = 0.01 MB
ABC: netlist  : i/o =     98/    100  and =     442  lev =   14 (4.16)  mem = 0.01 MB
ABC: Mapping (K=6)  :  lut =    124  edge =     470  lev =    3 (1.61)  mem = 0.01 MB
ABC: netlist  : i/o =     98/    100  and =     442  lev =   14 (4.16)  mem = 0.01 MB
ABC: Mapping (K=6)  :  lut =    124  edge =     470  lev =    3 (1.61)  mem = 0.01 MB
ABC: netlist  : i/o =     98/    100  and =     438  lev =   13 (4.16)  mem = 0.01 MB
ABC: Mapping (K=6)  :  lut =    124  edge =     470  lev =    3 (1.61)  mem = 0.01 MB
ABC: + write_blif <abc-temp-dir>/output.blif 

34.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:      124
ABC RESULTS:        internal signals:      328
ABC RESULTS:           input signals:       98
ABC RESULTS:          output signals:      100
Removing temp directory.

35. Executing OPT pass (performing simple optimizations).

35.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_master.

35.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i2c_master'.
Removed a total of 0 cells.

35.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \i2c_master..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

35.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \i2c_master.
Performed a total of 0 changes.

35.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i2c_master'.
Removed a total of 0 cells.

35.6. Executing OPT_DFF pass (perform DFF optimizations).

35.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i2c_master..
Removed 0 unused cells and 348 unused wires.
<suppressed ~3 debug messages>

35.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_master.

35.9. Rerunning OPT passes. (Maybe there is more to do..)

35.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \i2c_master..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

35.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \i2c_master.
Performed a total of 0 changes.

35.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i2c_master'.
Removed a total of 0 cells.

35.13. Executing OPT_DFF pass (perform DFF optimizations).

35.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i2c_master..

35.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_master.

35.16. Finished OPT passes. (There is nothing left to do.)

36. Executing HIERARCHY pass (managing design hierarchy).

36.1. Analyzing design hierarchy..
Top module:  \i2c_master

36.2. Analyzing design hierarchy..
Top module:  \i2c_master
Removed 0 unused modules.

37. Printing statistics.

=== i2c_master ===

   Number of wires:                235
   Number of wire bits:            416
   Number of public wires:         112
   Number of public wire bits:     293
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                215
     $_DFFE_PP0P_                   28
     $_DFFE_PP1P_                    2
     $_DFFE_PP_                      1
     $_DFF_PP0_                     40
     $_DFF_PP1_                     11
     $_DFF_P_                        9
     $lut                          124

38. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i2c_master..
Removed 0 unused cells and 58 unused wires.
<suppressed ~58 debug messages>

39. Executing BLIF backend.

Warnings: 245 unique messages, 245 total
End of script. Logfile hash: abdb6ff7bc, CPU: user 2.62s system 0.02s, MEM: 19.61 MB peak
Yosys 0.14+36 (git sha1 15a4e900b, gcc 7.1.0 -fPIC -Os)
Time spent: 31% 34x opt_dff (1 sec), 27% 1x abc (0 sec), ...
