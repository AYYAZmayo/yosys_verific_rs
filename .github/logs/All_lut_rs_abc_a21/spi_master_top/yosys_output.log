
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.14+36 (git sha1 15a4e900b, gcc 7.1.0 -fPIC -Os)


-- Executing script file `yosys.ys' --

1. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Jan22_SW_Release, released at Sat Jan 29 02:42:49 2022.

2. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Jan22_SW_Release, released at Sat Jan 29 02:42:49 2022.
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'baud_generator.v'
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'ql_clkgate_x4.v'
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'ql_mux2_x2.v'
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'registers.v'
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'serializer_deserializer.v'
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'spi_master_top.v'

3. Executing HIERARCHY pass (managing design hierarchy).
VERIFIC-INFO [VERI-1018] spi_master_top.v:26: compiling module 'spi_master_top'
VERIFIC-WARNING [VERI-2371] spi_master_top.v:109: delay control is not supported for synthesis
VERIFIC-INFO [VERI-1018] registers.v:15: compiling module 'registers'
VERIFIC-WARNING [VERI-1209] registers.v:104: expression size 8 truncated to fit in target size 3
VERIFIC-WARNING [VERI-2371] registers.v:205: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] registers.v:206: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] registers.v:207: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] registers.v:208: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] registers.v:209: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] registers.v:210: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] registers.v:211: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] registers.v:221: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] registers.v:224: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] registers.v:229: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] registers.v:234: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] registers.v:241: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] registers.v:244: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] registers.v:249: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] registers.v:254: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] registers.v:261: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] registers.v:264: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] registers.v:269: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] registers.v:274: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] registers.v:282: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] registers.v:285: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] registers.v:290: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] registers.v:295: delay control is not supported for synthesis
VERIFIC-INFO [VERI-1018] serializer_deserializer.v:16: compiling module 'serializer_deserializer'
VERIFIC-INFO [VERI-1018] ql_mux2_x2.v:1: compiling module 'ql_mux2_x2'
VERIFIC-INFO [VERI-1018] ql_clkgate_x4.v:1: compiling module 'ql_clkgate_x4'
VERIFIC-INFO [VERI-1018] baud_generator.v:14: compiling module 'baud_generator'
VERIFIC-WARNING [VERI-1209] baud_generator.v:45: expression size 18 truncated to fit in target size 17
VERIFIC-WARNING [VERI-1209] serializer_deserializer.v:130: expression size 4 truncated to fit in target size 3
Importing module spi_master_top.
Importing module registers.
Importing module serializer_deserializer.
Importing module ql_mux2_x2.
Importing module ql_clkgate_x4.
Importing module baud_generator.

3.1. Analyzing design hierarchy..
Top module:  \spi_master_top
Used module:     \serializer_deserializer
Used module:         \baud_generator
Used module:         \ql_clkgate_x4
Used module:         \ql_mux2_x2
Used module:     \registers

3.2. Analyzing design hierarchy..
Top module:  \spi_master_top
Used module:     \serializer_deserializer
Used module:         \baud_generator
Used module:         \ql_clkgate_x4
Used module:         \ql_mux2_x2
Used module:     \registers
Removed 0 unused modules.

4. Executing PROC pass (convert processes to netlists).

4.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

4.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

4.4. Executing PROC_INIT pass (extract init attributes).

4.5. Executing PROC_ARST pass (detect async resets in processes).

4.6. Executing PROC_MUX pass (convert decision trees to multiplexers).

4.7. Executing PROC_DLATCH pass (convert process syncs to latches).

4.8. Executing PROC_DFF pass (convert process syncs to FFs).

4.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

4.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module baud_generator.
<suppressed ~2 debug messages>
Optimizing module ql_clkgate_x4.
Optimizing module ql_mux2_x2.
Optimizing module serializer_deserializer.
<suppressed ~10 debug messages>
Optimizing module registers.
<suppressed ~4 debug messages>
Optimizing module spi_master_top.

5. Executing FLATTEN pass (flatten design).
Deleting now unused module baud_generator.
Deleting now unused module ql_clkgate_x4.
Deleting now unused module ql_mux2_x2.
Deleting now unused module serializer_deserializer.
Deleting now unused module registers.
<suppressed ~5 debug messages>

6. Executing TRIBUF pass.

7. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_master_top.
<suppressed ~1 debug messages>

8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_master_top..
Removed 0 unused cells and 290 unused wires.
<suppressed ~86 debug messages>

9. Executing CHECK pass (checking for obvious problems).
Checking module spi_master_top...
Found and reported 0 problems.

10. Executing DEMINOUT pass (demote inout ports to input or output).

11. Executing OPT pass (performing simple optimizations).

11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_master_top.

11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_master_top'.
Removed a total of 0 cells.

11.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \spi_master_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~35 debug messages>

11.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \spi_master_top.
Performed a total of 0 changes.

11.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_master_top'.
Removed a total of 0 cells.

11.6. Executing OPT_DFF pass (perform DFF optimizations).
Changing const-value async load to async reset on $verific$wb_ack_i_reg$spi_master_top.v:109$19 ($aldff) from module spi_master_top.
Changing const-value async load to async reset on $flatten\spi_register.$verific$tx_reg_reg$registers.v:214$362 ($aldff) from module spi_master_top.
Changing const-value async load to async reset on $flatten\spi_register.$verific$ss_reg_reg$registers.v:214$363 ($aldff) from module spi_master_top.
Changing const-value async load to async reset on $flatten\spi_register.$verific$spi_ctrl_reg_reg$registers.v:214$364 ($aldff) from module spi_master_top.
Changing const-value async load to async reset on $flatten\spi_register.$verific$spi_clk_cnt_reg_reg$registers.v:214$365 ($aldff) from module spi_master_top.
Changing const-value async load to async reset on $flatten\spi_register.$verific$irq_wr2_reg$registers.v:132$309 ($aldff) from module spi_master_top.
Changing const-value async load to async reset on $flatten\spi_register.$verific$irq_wr1_reg$registers.v:132$308 ($aldff) from module spi_master_top.
Changing const-value async load to async reset on $flatten\spi_register.$verific$irq_rd2_reg$registers.v:132$307 ($aldff) from module spi_master_top.
Changing const-value async load to async reset on $flatten\spi_register.$verific$irq_rd1_reg$registers.v:132$306 ($aldff) from module spi_master_top.
Changing const-value async load to async reset on $flatten\spi_register.$verific$cmd_reg7_reg$registers.v:296$396 ($aldff) from module spi_master_top.
Changing const-value async load to async reset on $flatten\spi_register.$verific$cmd_reg32_reg$registers.v:275$387 ($aldff) from module spi_master_top.
Changing const-value async load to async reset on $flatten\spi_register.$verific$cmd_reg1_reg$registers.v:255$380 ($aldff) from module spi_master_top.
Changing const-value async load to async reset on $flatten\spi_register.$verific$cmd_reg0_reg$registers.v:235$374 ($aldff) from module spi_master_top.
Changing const-value async load to async reset on $flatten\spi_register.$verific$TIP_reg$registers.v:174$328 ($aldff) from module spi_master_top.
Changing const-value async load to async reset on $flatten\spi_register.$verific$SPICR1_reg$registers.v:214$361 ($aldff) from module spi_master_top.
Changing const-value async load to async reset on $flatten\spi_register.$verific$SPIBR_reg$registers.v:214$360 ($aldff) from module spi_master_top.
Changing const-value async load to async reset on $flatten\spi_register.$verific$INTR_write_reg$registers.v:163$324 ($aldff) from module spi_master_top.
Changing const-value async load to async reset on $flatten\spi_register.$verific$INTR_read_reg$registers.v:149$320 ($aldff) from module spi_master_top.
Removing never-active async load on $flatten\spi_register.$verific$Data_out_r_reg$registers.v:316$399 ($aldff) from module spi_master_top.
Changing const-value async load to async reset on $flatten\ser_des.\BG.$verific$count16_reg$baud_generator.v:46$699 ($aldff) from module spi_master_top.
Changing const-value async load to async reset on $flatten\ser_des.\BG.$verific$Baud_Rate_r_reg$baud_generator.v:62$706 ($aldff) from module spi_master_top.
Changing const-value async load to async reset on $flatten\ser_des.$verific$trnsfer_done_reg$serializer_deserializer.v:196$606 ($aldff) from module spi_master_top.
Changing const-value async load to async reset on $flatten\ser_des.$verific$bit_count_reg$serializer_deserializer.v:132$562 ($aldff) from module spi_master_top.
Changing const-value async load to async reset on $flatten\ser_des.$verific$Shift_Reg_reg$serializer_deserializer.v:302$643 ($aldff) from module spi_master_top.
Changing const-value async load to async reset on $flatten\ser_des.$verific$SS_bar_reg$serializer_deserializer.v:153$572 ($aldff) from module spi_master_top.
Changing const-value async load to async reset on $flatten\ser_des.$verific$SPI_Read_Data_reg$serializer_deserializer.v:338$662 ($aldff) from module spi_master_top.
Changing const-value async load to async reset on $flatten\ser_des.$verific$IRQ_read_reg$serializer_deserializer.v:179$602 ($aldff) from module spi_master_top.
Changing const-value async load to async reset on $flatten\ser_des.$verific$FSM_spi_state_reg$serializer_deserializer.v:283$636 ($aldff) from module spi_master_top.

11.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_master_top..

11.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_master_top.

11.9. Rerunning OPT passes. (Maybe there is more to do..)

11.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \spi_master_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~35 debug messages>

11.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \spi_master_top.
Performed a total of 0 changes.

11.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_master_top'.
Removed a total of 0 cells.

11.13. Executing OPT_DFF pass (perform DFF optimizations).

11.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_master_top..

11.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_master_top.

11.16. Finished OPT passes. (There is nothing left to do.)

12. Executing FSM pass (extract and optimize FSM).

12.1. Executing FSM_DETECT pass (finding FSMs in design).

12.2. Executing FSM_EXTRACT pass (extracting FSM from design).

12.3. Executing FSM_OPT pass (simple optimizations of FSMs).

12.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_master_top..

12.5. Executing FSM_OPT pass (simple optimizations of FSMs).

12.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

12.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

12.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

13. Executing OPT pass (performing simple optimizations).

13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_master_top.

13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_master_top'.
Removed a total of 0 cells.

13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \spi_master_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~35 debug messages>

13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \spi_master_top.
Performed a total of 0 changes.

13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_master_top'.
Removed a total of 0 cells.

13.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $flatten\spi_register.$verific$tx_reg_reg$registers.v:214$362 ($adff) from module spi_master_top (D = $flatten\spi_register.$verific$n439$256, Q = \spi_register.tx_reg).
Adding EN signal on $flatten\spi_register.$verific$ss_reg_reg$registers.v:214$363 ($adff) from module spi_master_top (D = $flatten\spi_register.$verific$n448$257, Q = \spi_register.ss_reg).
Adding EN signal on $flatten\spi_register.$verific$spi_ctrl_reg_reg$registers.v:214$364 ($adff) from module spi_master_top (D = $flatten\spi_register.$verific$n457$258, Q = \spi_register.spi_ctrl_reg).
Adding EN signal on $flatten\spi_register.$verific$spi_clk_cnt_reg_reg$registers.v:214$365 ($adff) from module spi_master_top (D = $flatten\spi_register.$verific$n461$259, Q = \spi_register.spi_clk_cnt_reg).
Adding EN signal on $flatten\spi_register.$verific$cmd_reg7_reg$registers.v:296$396 ($adff) from module spi_master_top (D = $flatten\spi_register.$verific$n596$232, Q = \spi_register.cmd_reg7).
Adding EN signal on $flatten\spi_register.$verific$cmd_reg32_reg$registers.v:275$387 ($adff) from module spi_master_top (D = $flatten\spi_register.$verific$n577$265, Q = \spi_register.cmd_reg32).
Adding EN signal on $flatten\spi_register.$verific$cmd_reg1_reg$registers.v:255$380 ($adff) from module spi_master_top (D = $flatten\spi_register.$verific$n550$224, Q = \spi_register.cmd_reg1).
Adding EN signal on $flatten\spi_register.$verific$cmd_reg0_reg$registers.v:235$374 ($adff) from module spi_master_top (D = $flatten\spi_register.$verific$n538$219, Q = \spi_register.cmd_reg0).
Adding EN signal on $flatten\spi_register.$verific$SPICR1_reg$registers.v:214$361 ($adff) from module spi_master_top (D = $flatten\spi_register.$verific$n430$255, Q = \spi_register.SPICR1).
Adding EN signal on $flatten\spi_register.$verific$SPIBR_reg$registers.v:214$360 ($adff) from module spi_master_top (D = $flatten\spi_register.$verific$n413$254, Q = \spi_register.SPIBR).
Adding EN signal on $flatten\spi_register.$verific$INTR_write_reg$registers.v:163$324 ($adff) from module spi_master_top (D = $flatten\spi_register.$verific$n112$205, Q = \spi_register.INTR_write).
Adding EN signal on $flatten\spi_register.$verific$INTR_read_reg$registers.v:149$320 ($adff) from module spi_master_top (D = $flatten\spi_register.$verific$n103$202, Q = \spi_register.INTR_read).
Adding EN signal on $flatten\ser_des.\BG.$verific$Baud_Rate_r_reg$baud_generator.v:62$706 ($adff) from module spi_master_top (D = $flatten\ser_des.\BG.$verific$n162$682, Q = \ser_des.BG.Baud_Rate_r).
Adding EN signal on $flatten\ser_des.$verific$bit_count_reg$serializer_deserializer.v:132$562 ($adff) from module spi_master_top (D = $flatten\ser_des.$verific$n59$469, Q = \ser_des.bit_count).
Adding EN signal on $flatten\ser_des.$verific$SS_bar_reg$serializer_deserializer.v:153$572 ($adff) from module spi_master_top (D = $flatten\ser_des.$verific$n90$419, Q = \ser_des.SS_bar).
Adding EN signal on $flatten\ser_des.$verific$SPI_Read_Data_reg$serializer_deserializer.v:338$662 ($adff) from module spi_master_top (D = $flatten\ser_des.$verific$n473$512, Q = \ser_des.SPI_Read_Data).
Setting constant 0-bit at position 1 on $auto$ff.cc:262:slice$748 ($adffe) from module spi_master_top.
Setting constant 0-bit at position 3 on $auto$ff.cc:262:slice$717 ($adffe) from module spi_master_top.
Setting constant 0-bit at position 4 on $auto$ff.cc:262:slice$717 ($adffe) from module spi_master_top.
Setting constant 0-bit at position 5 on $auto$ff.cc:262:slice$717 ($adffe) from module spi_master_top.
Setting constant 0-bit at position 6 on $auto$ff.cc:262:slice$717 ($adffe) from module spi_master_top.

13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_master_top..

13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_master_top.
<suppressed ~16 debug messages>

13.9. Rerunning OPT passes. (Maybe there is more to do..)

13.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \spi_master_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~35 debug messages>

13.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \spi_master_top.
Performed a total of 0 changes.

13.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_master_top'.
<suppressed ~33 debug messages>
Removed a total of 11 cells.

13.13. Executing OPT_DFF pass (perform DFF optimizations).

13.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_master_top..
Removed 0 unused cells and 11 unused wires.
<suppressed ~1 debug messages>

13.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_master_top.

13.16. Rerunning OPT passes. (Maybe there is more to do..)

13.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \spi_master_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~36 debug messages>

13.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \spi_master_top.
Performed a total of 0 changes.

13.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_master_top'.
Removed a total of 0 cells.

13.20. Executing OPT_DFF pass (perform DFF optimizations).

13.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_master_top..

13.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_master_top.

13.23. Finished OPT passes. (There is nothing left to do.)

14. Executing WREDUCE pass (reducing word size of cells).
Removed top 16 bits (of 17) from port B of cell spi_master_top.$flatten\ser_des.\BG.$verific$add_12$baud_generator.v:45$697 ($add).
Removed top 1 bits (of 17) from port B of cell spi_master_top.$flatten\ser_des.\BG.$verific$equal_20$baud_generator.v:58$701 ($eq).
Removed top 1 bits (of 6) from mux cell spi_master_top.$flatten\ser_des.$verific$mux_220$serializer_deserializer.v:261$632 ($mux).
Removed top 1 bits (of 3) from mux cell spi_master_top.$flatten\ser_des.$verific$mux_113$serializer_deserializer.v:219$621 ($mux).
Removed top 2 bits (of 3) from port B of cell spi_master_top.$flatten\ser_des.$verific$equal_90$serializer_deserializer.v:201$609 ($eq).
Removed top 2 bits (of 3) from port B of cell spi_master_top.$flatten\ser_des.$verific$add_19$serializer_deserializer.v:130$556 ($add).
Removed top 1 bits (of 3) from port B of cell spi_master_top.$flatten\ser_des.$verific$equal_14$serializer_deserializer.v:129$551 ($eq).
Removed top 1 bits (of 3) from port B of cell spi_master_top.$flatten\ser_des.$verific$equal_5$serializer_deserializer.v:95$517 ($eq).
Removed top 1 bits (of 3) from wire spi_master_top.$flatten\ser_des.$verific$n176$473.
Removed top 1 bits (of 3) from wire spi_master_top.$flatten\ser_des.$verific$n251$491.

15. Executing PEEPOPT pass (run peephole optimizers).

16. Executing PMUXTREE pass.

17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_master_top..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

18. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module spi_master_top:
  creating $macc model for $flatten\ser_des.$verific$add_19$serializer_deserializer.v:130$556 ($add).
  creating $macc model for $flatten\ser_des.\BG.$verific$add_12$baud_generator.v:45$697 ($add).
  creating $alu model for $macc $flatten\ser_des.\BG.$verific$add_12$baud_generator.v:45$697.
  creating $alu model for $macc $flatten\ser_des.$verific$add_19$serializer_deserializer.v:130$556.
  creating $alu cell for $flatten\ser_des.$verific$add_19$serializer_deserializer.v:130$556: $auto$alumacc.cc:485:replace_alu$776
  creating $alu cell for $flatten\ser_des.\BG.$verific$add_12$baud_generator.v:45$697: $auto$alumacc.cc:485:replace_alu$779
  created 2 $alu and 0 $macc cells.

19. Executing OPT pass (performing simple optimizations).

19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_master_top.

19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_master_top'.
Removed a total of 0 cells.

19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \spi_master_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~36 debug messages>

19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \spi_master_top.
Performed a total of 0 changes.

19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_master_top'.
Removed a total of 0 cells.

19.6. Executing OPT_DFF pass (perform DFF optimizations).

19.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_master_top..

19.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_master_top.

19.9. Finished OPT passes. (There is nothing left to do.)

20. Executing MEMORY pass.

20.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

20.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

20.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

20.4. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

20.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_master_top..

20.6. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

20.7. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

20.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_master_top..

20.9. Executing MEMORY_COLLECT pass (generating $mem cells).

21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_master_top..

22. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_master_top.
<suppressed ~20 debug messages>

23. Executing SIMPLEMAP pass (map simple cells to gate primitives).
Mapping spi_master_top.$auto$opt_dff.cc:195:make_patterns_logic$724 ($ne).
Mapping spi_master_top.$auto$opt_dff.cc:195:make_patterns_logic$729 ($reduce_bool).
Mapping spi_master_top.$auto$opt_dff.cc:195:make_patterns_logic$738 ($reduce_bool).
Mapping spi_master_top.$auto$opt_dff.cc:195:make_patterns_logic$756 ($reduce_bool).
Mapping spi_master_top.$auto$opt_dff.cc:195:make_patterns_logic$759 ($reduce_bool).
Mapping spi_master_top.$auto$opt_dff.cc:195:make_patterns_logic$762 ($reduce_bool).
Mapping spi_master_top.$auto$opt_dff.cc:195:make_patterns_logic$765 ($reduce_bool).
Mapping spi_master_top.$auto$opt_dff.cc:195:make_patterns_logic$768 ($reduce_bool).
Mapping spi_master_top.$auto$opt_dff.cc:195:make_patterns_logic$771 ($reduce_bool).
Mapping spi_master_top.$auto$opt_dff.cc:220:make_patterns_logic$726 ($reduce_and).
Mapping spi_master_top.$auto$opt_dff.cc:220:make_patterns_logic$733 ($reduce_and).
Mapping spi_master_top.$auto$opt_dff.cc:220:make_patterns_logic$740 ($reduce_and).
Mapping spi_master_top.$flatten\ser_des.$verific$FSM_spi_state_reg$serializer_deserializer.v:283$636 ($adff).
Mapping spi_master_top.$flatten\ser_des.$verific$IRQ_read_reg$serializer_deserializer.v:179$602 ($adff).
Mapping spi_master_top.$flatten\ser_des.$verific$Shift_Reg_reg$serializer_deserializer.v:302$643 ($adff).
Mapping spi_master_top.$flatten\ser_des.$verific$equal_139$serializer_deserializer.v:272$631 ($eq).
Mapping spi_master_top.$flatten\ser_des.$verific$equal_14$serializer_deserializer.v:129$551 ($eq).
Mapping spi_master_top.$flatten\ser_des.$verific$equal_15$serializer_deserializer.v:129$552 ($eq).
Mapping spi_master_top.$flatten\ser_des.$verific$equal_17$serializer_deserializer.v:129$554 ($eq).
Mapping spi_master_top.$flatten\ser_des.$verific$equal_21$serializer_deserializer.v:131$558 ($logic_not).
Mapping spi_master_top.$flatten\ser_des.$verific$equal_5$serializer_deserializer.v:95$517 ($eq).
Mapping spi_master_top.$flatten\ser_des.$verific$equal_68$serializer_deserializer.v:165$596 ($eq).
Mapping spi_master_top.$flatten\ser_des.$verific$equal_74$serializer_deserializer.v:178$599 ($eq).
Mapping spi_master_top.$flatten\ser_des.$verific$equal_81$serializer_deserializer.v:192$603 ($eq).
Mapping spi_master_top.$flatten\ser_des.$verific$equal_90$serializer_deserializer.v:201$609 ($eq).
Mapping spi_master_top.$flatten\ser_des.$verific$i10$serializer_deserializer.v:119$548 ($and).
Mapping spi_master_top.$flatten\ser_des.$verific$i101$serializer_deserializer.v:202$614 ($and).
Mapping spi_master_top.$flatten\ser_des.$verific$i102$serializer_deserializer.v:202$615 ($or).
Mapping spi_master_top.$flatten\ser_des.$verific$i104$serializer_deserializer.v:202$616 ($not).
Mapping spi_master_top.$flatten\ser_des.$verific$i105$serializer_deserializer.v:202$617 ($mux).
Mapping spi_master_top.$flatten\ser_des.$verific$i106$serializer_deserializer.v:202$618 ($mux).
Mapping spi_master_top.$flatten\ser_des.$verific$i160$serializer_deserializer.v:306$644 ($and).
Mapping spi_master_top.$flatten\ser_des.$verific$i161$serializer_deserializer.v:306$645 ($mux).
Mapping spi_master_top.$flatten\ser_des.$verific$i17$serializer_deserializer.v:129$553 ($or).
Mapping spi_master_top.$flatten\ser_des.$verific$i173$serializer_deserializer.v:316$647 ($or).
Mapping spi_master_top.$flatten\ser_des.$verific$i174$serializer_deserializer.v:316$648 ($not).
Mapping spi_master_top.$flatten\ser_des.$verific$i176$serializer_deserializer.v:316$649 ($and).
Mapping spi_master_top.$flatten\ser_des.$verific$i177$serializer_deserializer.v:316$650 ($or).
Mapping spi_master_top.$flatten\ser_des.$verific$i178$serializer_deserializer.v:317$651 ($mux).
Mapping spi_master_top.$flatten\ser_des.$verific$i179$serializer_deserializer.v:317$652 ($mux).
Mapping spi_master_top.$flatten\ser_des.$verific$i185$serializer_deserializer.v:319$654 ($and).
Mapping spi_master_top.$flatten\ser_des.$verific$i19$serializer_deserializer.v:129$555 ($or).
Mapping spi_master_top.$flatten\ser_des.$verific$i211$serializer_deserializer.v:156$656 ($not).
Mapping spi_master_top.$flatten\ser_des.$verific$i212$serializer_deserializer.v:157$574 ($not).
Mapping spi_master_top.$flatten\ser_des.$verific$i213$serializer_deserializer.v:158$577 ($not).
Mapping spi_master_top.$flatten\ser_des.$verific$i214$serializer_deserializer.v:159$580 ($not).
Mapping spi_master_top.$flatten\ser_des.$verific$i215$serializer_deserializer.v:160$583 ($not).
Mapping spi_master_top.$flatten\ser_des.$verific$i216$serializer_deserializer.v:161$586 ($not).
Mapping spi_master_top.$flatten\ser_des.$verific$i217$serializer_deserializer.v:162$589 ($not).
Mapping spi_master_top.$flatten\ser_des.$verific$i218$serializer_deserializer.v:163$592 ($not).
Mapping spi_master_top.$flatten\ser_des.$verific$i34$serializer_deserializer.v:147$565 ($and).
Mapping spi_master_top.$flatten\ser_des.$verific$i38$serializer_deserializer.v:149$567 ($and).
Mapping spi_master_top.$auto$opt_dff.cc:195:make_patterns_logic$710 ($reduce_bool).
Mapping spi_master_top.$flatten\ser_des.$verific$i42$serializer_deserializer.v:152$570 ($mux).
Mapping spi_master_top.$flatten\ser_des.$verific$i43$serializer_deserializer.v:153$571 ($mux).
Mapping spi_master_top.$flatten\ser_des.$verific$i45$serializer_deserializer.v:156$573 ($and).
Mapping spi_master_top.$flatten\ser_des.$verific$i48$serializer_deserializer.v:157$576 ($and).
Mapping spi_master_top.$flatten\ser_des.$verific$i51$serializer_deserializer.v:158$579 ($and).
Mapping spi_master_top.$flatten\ser_des.$verific$i54$serializer_deserializer.v:159$582 ($and).
Mapping spi_master_top.$flatten\ser_des.$verific$i57$serializer_deserializer.v:160$585 ($and).
Mapping spi_master_top.$flatten\ser_des.$verific$i60$serializer_deserializer.v:161$588 ($and).
Mapping spi_master_top.$flatten\ser_des.$verific$i63$serializer_deserializer.v:162$591 ($and).
Mapping spi_master_top.$flatten\ser_des.$verific$i66$serializer_deserializer.v:163$594 ($and).
Mapping spi_master_top.$flatten\ser_des.$verific$i77$serializer_deserializer.v:179$601 ($mux).
Mapping spi_master_top.$flatten\ser_des.$verific$i8$serializer_deserializer.v:118$546 ($and).
Mapping spi_master_top.$auto$ff.cc:262:slice$773 ($adffe).
Mapping spi_master_top.$flatten\ser_des.$verific$i86$serializer_deserializer.v:196$605 ($mux).
Mapping spi_master_top.$flatten\ser_des.$verific$i88$serializer_deserializer.v:200$607 ($xor).
Mapping spi_master_top.$flatten\ser_des.$verific$i92$serializer_deserializer.v:201$610 ($or).
Mapping spi_master_top.$flatten\ser_des.$verific$i94$serializer_deserializer.v:201$611 ($or).
Mapping spi_master_top.$flatten\ser_des.$verific$i96$serializer_deserializer.v:201$612 ($or).
Mapping spi_master_top.$flatten\ser_des.$verific$i98$serializer_deserializer.v:202$613 ($or).
Mapping spi_master_top.$flatten\ser_des.$verific$mux_113$serializer_deserializer.v:219$621 ($mux).
Mapping spi_master_top.$flatten\ser_des.$verific$mux_118$serializer_deserializer.v:228$624 ($mux).
Mapping spi_master_top.$flatten\ser_des.$verific$mux_119$serializer_deserializer.v:228$625 ($mux).
Mapping spi_master_top.$flatten\ser_des.$verific$mux_122$serializer_deserializer.v:236$627 ($mux).
Mapping spi_master_top.$flatten\ser_des.$verific$mux_142$serializer_deserializer.v:277$633 ($mux).
Mapping spi_master_top.$flatten\ser_des.$verific$mux_143$serializer_deserializer.v:282$634 ($bmux).
Mapping spi_master_top.$flatten\ser_des.$verific$mux_144$serializer_deserializer.v:283$635 ($mux).
Mapping spi_master_top.$flatten\ser_des.$verific$mux_154$serializer_deserializer.v:298$639 ($mux).
Mapping spi_master_top.$flatten\ser_des.$verific$mux_156$serializer_deserializer.v:302$641 ($mux).
Mapping spi_master_top.$flatten\ser_des.$verific$mux_157$serializer_deserializer.v:302$642 ($mux).
Mapping spi_master_top.$flatten\ser_des.$verific$mux_195$serializer_deserializer.v:334$658 ($mux).
Mapping spi_master_top.$auto$ff.cc:262:slice$772 ($adffe).
Mapping spi_master_top.$flatten\ser_des.$verific$mux_198$serializer_deserializer.v:338$661 ($mux).
Mapping spi_master_top.$flatten\ser_des.$verific$mux_218$serializer_deserializer.v:268$657 ($mux).
Mapping spi_master_top.$flatten\ser_des.$verific$mux_220$serializer_deserializer.v:261$632 ($mux).
Mapping spi_master_top.$auto$opt_dff.cc:195:make_patterns_logic$722 ($reduce_bool).
Mapping spi_master_top.$flatten\ser_des.$verific$mux_24$serializer_deserializer.v:132$560 ($mux).
Mapping spi_master_top.$flatten\ser_des.$verific$mux_25$serializer_deserializer.v:132$561 ($mux).
Mapping spi_master_top.$flatten\ser_des.$verific$trnsfer_done_reg$serializer_deserializer.v:196$606 ($adff).
Mapping spi_master_top.$flatten\ser_des.\BG.$verific$count16_reg$baud_generator.v:46$699 ($adff).
Mapping spi_master_top.$flatten\ser_des.\BG.$verific$equal_10$baud_generator.v:42$696 ($eq).
Mapping spi_master_top.$flatten\ser_des.\BG.$verific$equal_20$baud_generator.v:58$701 ($eq).
Mapping spi_master_top.$flatten\ser_des.\BG.$verific$equal_3$baud_generator.v:31$690 ($logic_not).
Mapping spi_master_top.$auto$ff.cc:262:slice$769 ($adffe).
Mapping spi_master_top.$flatten\ser_des.\BG.$verific$i25$baud_generator.v:61$705 ($mux).
Mapping spi_master_top.$flatten\ser_des.\BG.$verific$i5$baud_generator.v:31$691 ($mux).
Mapping spi_master_top.$flatten\ser_des.\BG.$verific$mux_14$baud_generator.v:45$698 ($mux).
Mapping spi_master_top.$flatten\ser_des.\ql_mux2_x2_INST_C01.$verific$i4$ql_mux2_x2.v:8$665 ($mux).
Mapping spi_master_top.$flatten\spi_register.$verific$Data_out_r_reg$registers.v:316$399 ($dff).
Mapping spi_master_top.$flatten\spi_register.$verific$TIP_reg$registers.v:174$328 ($adff).
Mapping spi_master_top.$flatten\spi_register.$verific$equal_126$registers.v:228$366 ($eq).
Mapping spi_master_top.$flatten\spi_register.$verific$i128$registers.v:228$367 ($and).
Mapping spi_master_top.$auto$ff.cc:262:slice$734 ($adffe).
Mapping spi_master_top.$flatten\spi_register.$verific$i131$registers.v:233$370 ($or).
Mapping spi_master_top.$auto$ff.cc:262:slice$727 ($adffe).
Mapping spi_master_top.$flatten\spi_register.$verific$i134$registers.v:235$372 ($mux).
Mapping spi_master_top.$flatten\spi_register.$verific$i135$registers.v:235$373 ($mux).
Mapping spi_master_top.$auto$ff.cc:262:slice$720 ($adffe).
Mapping spi_master_top.$auto$ff.cc:262:slice$714 ($adffe).
Mapping spi_master_top.$flatten\spi_register.$verific$i146$registers.v:255$378 ($mux).
Mapping spi_master_top.$flatten\spi_register.$verific$i147$registers.v:255$379 ($mux).
Mapping spi_master_top.$flatten\spi_register.$verific$i169$registers.v:294$390 ($not).
Mapping spi_master_top.$flatten\spi_register.$verific$i170$registers.v:294$391 ($not).
Mapping spi_master_top.$flatten\spi_register.$verific$i171$registers.v:294$392 ($and).
Mapping spi_master_top.$flatten\spi_register.$verific$i174$registers.v:296$394 ($mux).
Mapping spi_master_top.$flatten\spi_register.$verific$i175$registers.v:296$395 ($mux).
Mapping spi_master_top.$flatten\spi_register.$verific$i36$registers.v:132$302 ($mux).
Mapping spi_master_top.$flatten\spi_register.$verific$i37$registers.v:132$303 ($mux).
Mapping spi_master_top.$flatten\spi_register.$verific$i38$registers.v:132$304 ($mux).
Mapping spi_master_top.$flatten\spi_register.$verific$i39$registers.v:132$305 ($mux).
Mapping spi_master_top.$flatten\spi_register.$verific$i44$registers.v:134$310 ($not).
Mapping spi_master_top.$flatten\spi_register.$verific$i45$registers.v:134$311 ($and).
Mapping spi_master_top.$flatten\spi_register.$verific$i47$registers.v:135$313 ($not).
Mapping spi_master_top.$flatten\spi_register.$verific$i48$registers.v:135$314 ($and).
Mapping spi_master_top.$auto$ff.cc:262:slice$766 ($adffe).
Mapping spi_master_top.$flatten\spi_register.$verific$i56$registers.v:148$318 ($mux).
Mapping spi_master_top.$flatten\spi_register.$verific$i57$registers.v:149$319 ($mux).
Mapping spi_master_top.$flatten\spi_register.$verific$i65$registers.v:162$322 ($mux).
Mapping spi_master_top.$flatten\spi_register.$verific$i66$registers.v:163$323 ($mux).
Mapping spi_master_top.$flatten\spi_register.$verific$i71$registers.v:173$325 ($or).
Mapping spi_master_top.$flatten\spi_register.$verific$i73$registers.v:174$327 ($mux).
Mapping spi_master_top.$flatten\spi_register.$verific$i75$registers.v:176$329 ($or).
Mapping spi_master_top.$flatten\spi_register.$verific$i76$registers.v:176$330 ($and).
Mapping spi_master_top.$flatten\spi_register.$verific$i77$registers.v:176$331 ($and).
Mapping spi_master_top.$flatten\spi_register.$verific$irq_rd1_reg$registers.v:132$306 ($adff).
Mapping spi_master_top.$flatten\spi_register.$verific$irq_rd2_reg$registers.v:132$307 ($adff).
Mapping spi_master_top.$flatten\spi_register.$verific$irq_wr1_reg$registers.v:132$308 ($adff).
Mapping spi_master_top.$flatten\spi_register.$verific$irq_wr2_reg$registers.v:132$309 ($adff).
Mapping spi_master_top.$flatten\spi_register.$verific$mux_100$registers.v:213$343 ($bmux).
Mapping spi_master_top.$flatten\spi_register.$verific$mux_101$registers.v:213$344 ($bmux).
Mapping spi_master_top.$flatten\spi_register.$verific$mux_102$registers.v:213$345 ($bmux).
Mapping spi_master_top.$flatten\spi_register.$verific$mux_103$registers.v:213$346 ($bmux).
Mapping spi_master_top.$flatten\spi_register.$verific$mux_104$registers.v:213$347 ($bmux).
Mapping spi_master_top.$auto$ff.cc:262:slice$741 ($adffe).
Mapping spi_master_top.$auto$ff.cc:262:slice$751 ($adffe).
Mapping spi_master_top.$auto$ff.cc:262:slice$754 ($adffe).
Mapping spi_master_top.$auto$ff.cc:262:slice$757 ($adffe).
Mapping spi_master_top.$auto$ff.cc:262:slice$760 ($adffe).
Mapping spi_master_top.$auto$ff.cc:262:slice$763 ($adffe).
Mapping spi_master_top.$flatten\spi_register.$verific$mux_111$registers.v:214$354 ($mux).
Mapping spi_master_top.$flatten\spi_register.$verific$mux_112$registers.v:214$355 ($mux).
Mapping spi_master_top.$flatten\spi_register.$verific$mux_113$registers.v:214$356 ($mux).
Mapping spi_master_top.$flatten\spi_register.$verific$mux_114$registers.v:214$357 ($mux).
Mapping spi_master_top.$flatten\spi_register.$verific$mux_115$registers.v:214$358 ($mux).
Mapping spi_master_top.$flatten\spi_register.$verific$mux_116$registers.v:214$359 ($mux).
Mapping spi_master_top.$auto$ff.cc:262:slice$711 ($adffe).
Mapping spi_master_top.$auto$ff.cc:262:slice$708 ($adffe).
Mapping spi_master_top.$flatten\spi_register.$verific$mux_158$registers.v:275$385 ($mux).
Mapping spi_master_top.$flatten\spi_register.$verific$mux_159$registers.v:275$386 ($mux).
Mapping spi_master_top.$flatten\spi_register.$verific$mux_186$registers.v:315$398 ($bmux).
Mapping spi_master_top.$flatten\spi_register.$verific$mux_99$registers.v:213$342 ($bmux).
Mapping spi_master_top.$verific$i10$spi_master_top.v:109$14 ($and).
Mapping spi_master_top.$verific$i11$spi_master_top.v:109$15 ($not).
Mapping spi_master_top.$verific$i12$spi_master_top.v:109$16 ($and).
Mapping spi_master_top.$verific$i14$spi_master_top.v:109$18 ($mux).
Mapping spi_master_top.$verific$i5$spi_master_top.v:100$11 ($and).
Mapping spi_master_top.$verific$wb_ack_i_reg$spi_master_top.v:109$19 ($adff).

24. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_master_top.
<suppressed ~311 debug messages>

25. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_master_top'.
<suppressed ~51 debug messages>
Removed a total of 17 cells.

26. Executing OPT_DFF pass (perform DFF optimizations).

27. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_master_top..
Removed 2 unused cells and 90 unused wires.
<suppressed ~3 debug messages>

28. Executing OPT pass (performing simple optimizations).

28.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_master_top.

28.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_master_top'.
Removed a total of 0 cells.

28.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \spi_master_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

28.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \spi_master_top.
Performed a total of 0 changes.

28.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_master_top'.
Removed a total of 0 cells.

28.6. Executing OPT_DFF pass (perform DFF optimizations).

28.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_master_top..

28.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_master_top.

28.9. Finished OPT passes. (There is nothing left to do.)

29. Executing OPT pass (performing simple optimizations).

29.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_master_top.
<suppressed ~42 debug messages>

29.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_master_top'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

29.3. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $auto$ff.cc:262:slice$1744 ($_DFFE_PP0P_) from module spi_master_top (D = $flatten\spi_register.$verific$n439$256 [7], Q = \spi_register.tx_reg [7]).
Adding EN signal on $auto$ff.cc:262:slice$1743 ($_DFFE_PP0P_) from module spi_master_top (D = $flatten\spi_register.$verific$n439$256 [6], Q = \spi_register.tx_reg [6]).
Adding EN signal on $auto$ff.cc:262:slice$1742 ($_DFFE_PP0P_) from module spi_master_top (D = $flatten\spi_register.$verific$n439$256 [5], Q = \spi_register.tx_reg [5]).
Adding EN signal on $auto$ff.cc:262:slice$1741 ($_DFFE_PP0P_) from module spi_master_top (D = $flatten\spi_register.$verific$n439$256 [4], Q = \spi_register.tx_reg [4]).
Adding EN signal on $auto$ff.cc:262:slice$1740 ($_DFFE_PP0P_) from module spi_master_top (D = $flatten\spi_register.$verific$n439$256 [3], Q = \spi_register.tx_reg [3]).
Adding EN signal on $auto$ff.cc:262:slice$1739 ($_DFFE_PP0P_) from module spi_master_top (D = $flatten\spi_register.$verific$n439$256 [2], Q = \spi_register.tx_reg [2]).
Adding EN signal on $auto$ff.cc:262:slice$1738 ($_DFFE_PP0P_) from module spi_master_top (D = $flatten\spi_register.$verific$n439$256 [1], Q = \spi_register.tx_reg [1]).
Adding EN signal on $auto$ff.cc:262:slice$1737 ($_DFFE_PP0P_) from module spi_master_top (D = $flatten\spi_register.$verific$n439$256 [0], Q = \spi_register.tx_reg [0]).
Adding EN signal on $auto$ff.cc:262:slice$1736 ($_DFFE_PP0P_) from module spi_master_top (D = $flatten\spi_register.$verific$n448$257 [7], Q = \spi_register.ss_reg [7]).
Adding EN signal on $auto$ff.cc:262:slice$1735 ($_DFFE_PP0P_) from module spi_master_top (D = $flatten\spi_register.$verific$n448$257 [6], Q = \spi_register.ss_reg [6]).
Adding EN signal on $auto$ff.cc:262:slice$1734 ($_DFFE_PP0P_) from module spi_master_top (D = $flatten\spi_register.$verific$n448$257 [5], Q = \spi_register.ss_reg [5]).
Adding EN signal on $auto$ff.cc:262:slice$1733 ($_DFFE_PP0P_) from module spi_master_top (D = $flatten\spi_register.$verific$n448$257 [4], Q = \spi_register.ss_reg [4]).
Adding EN signal on $auto$ff.cc:262:slice$1732 ($_DFFE_PP0P_) from module spi_master_top (D = $flatten\spi_register.$verific$n448$257 [3], Q = \spi_register.ss_reg [3]).
Adding EN signal on $auto$ff.cc:262:slice$1731 ($_DFFE_PP0P_) from module spi_master_top (D = $flatten\spi_register.$verific$n448$257 [2], Q = \spi_register.ss_reg [2]).
Adding EN signal on $auto$ff.cc:262:slice$1730 ($_DFFE_PP0P_) from module spi_master_top (D = $flatten\spi_register.$verific$n448$257 [1], Q = \spi_register.ss_reg [1]).
Adding EN signal on $auto$ff.cc:262:slice$1729 ($_DFFE_PP0P_) from module spi_master_top (D = $flatten\spi_register.$verific$n448$257 [0], Q = \spi_register.ss_reg [0]).
Adding EN signal on $auto$ff.cc:262:slice$1671 ($_DFFE_PP0P_) from module spi_master_top (D = $flatten\spi_register.$verific$n413$254 [15], Q = \spi_register.SPIBR [15]).
Adding EN signal on $auto$ff.cc:262:slice$1670 ($_DFFE_PP0P_) from module spi_master_top (D = $flatten\spi_register.$verific$n413$254 [14], Q = \spi_register.SPIBR [14]).
Adding EN signal on $auto$ff.cc:262:slice$1669 ($_DFFE_PP0P_) from module spi_master_top (D = $flatten\spi_register.$verific$n413$254 [13], Q = \spi_register.SPIBR [13]).
Adding EN signal on $auto$ff.cc:262:slice$1668 ($_DFFE_PP0P_) from module spi_master_top (D = $flatten\spi_register.$verific$n413$254 [12], Q = \spi_register.SPIBR [12]).
Adding EN signal on $auto$ff.cc:262:slice$1667 ($_DFFE_PP0P_) from module spi_master_top (D = $flatten\spi_register.$verific$n413$254 [11], Q = \spi_register.SPIBR [11]).
Adding EN signal on $auto$ff.cc:262:slice$1666 ($_DFFE_PP0P_) from module spi_master_top (D = $flatten\spi_register.$verific$n413$254 [10], Q = \spi_register.SPIBR [10]).
Adding EN signal on $auto$ff.cc:262:slice$1665 ($_DFFE_PP0P_) from module spi_master_top (D = $flatten\spi_register.$verific$n413$254 [9], Q = \spi_register.SPIBR [9]).
Adding EN signal on $auto$ff.cc:262:slice$1664 ($_DFFE_PP0P_) from module spi_master_top (D = $flatten\spi_register.$verific$n413$254 [8], Q = \spi_register.SPIBR [8]).
Adding EN signal on $auto$ff.cc:262:slice$1663 ($_DFFE_PP0P_) from module spi_master_top (D = $flatten\spi_register.$verific$n413$254 [7], Q = \spi_register.SPIBR [7]).
Adding EN signal on $auto$ff.cc:262:slice$1662 ($_DFFE_PP0P_) from module spi_master_top (D = $flatten\spi_register.$verific$n413$254 [6], Q = \spi_register.SPIBR [6]).
Adding EN signal on $auto$ff.cc:262:slice$1661 ($_DFFE_PP0P_) from module spi_master_top (D = $flatten\spi_register.$verific$n413$254 [5], Q = \spi_register.SPIBR [5]).
Adding EN signal on $auto$ff.cc:262:slice$1660 ($_DFFE_PP0P_) from module spi_master_top (D = $flatten\spi_register.$verific$n413$254 [4], Q = \spi_register.SPIBR [4]).
Adding EN signal on $auto$ff.cc:262:slice$1659 ($_DFFE_PP0P_) from module spi_master_top (D = $flatten\spi_register.$verific$n413$254 [3], Q = \spi_register.SPIBR [3]).
Adding EN signal on $auto$ff.cc:262:slice$1658 ($_DFFE_PP0P_) from module spi_master_top (D = $flatten\spi_register.$verific$n413$254 [2], Q = \spi_register.SPIBR [2]).
Adding EN signal on $auto$ff.cc:262:slice$1657 ($_DFFE_PP0P_) from module spi_master_top (D = $flatten\spi_register.$verific$n413$254 [1], Q = \spi_register.SPIBR [1]).
Adding EN signal on $auto$ff.cc:262:slice$1090 ($_DFFE_PP0P_) from module spi_master_top (D = $flatten\spi_register.$verific$n430$255 [7], Q = \spi_register.SPICR1 [7]).
Adding EN signal on $auto$ff.cc:262:slice$1089 ($_DFFE_PP0P_) from module spi_master_top (D = $flatten\spi_register.$verific$n430$255 [6], Q = \spi_register.SPICR1 [6]).
Adding EN signal on $auto$ff.cc:262:slice$1088 ($_DFFE_PP0P_) from module spi_master_top (D = $flatten\spi_register.$verific$n430$255 [5], Q = \spi_register.SPICR1 [5]).
Adding EN signal on $auto$ff.cc:262:slice$1087 ($_DFFE_PP0P_) from module spi_master_top (D = $flatten\spi_register.$verific$n430$255 [4], Q = \spi_register.SPICR1 [4]).
Adding EN signal on $auto$ff.cc:262:slice$1086 ($_DFFE_PP0P_) from module spi_master_top (D = $flatten\spi_register.$verific$n430$255 [3], Q = \spi_register.SPICR1 [3]).
Adding EN signal on $auto$ff.cc:262:slice$1085 ($_DFFE_PP0P_) from module spi_master_top (D = $flatten\spi_register.$verific$n430$255 [2], Q = \spi_register.SPICR1 [2]).
Adding EN signal on $auto$ff.cc:262:slice$1084 ($_DFFE_PP0P_) from module spi_master_top (D = $flatten\spi_register.$verific$n430$255 [0], Q = \spi_register.SPICR1 [0]).
Adding EN signal on $auto$ff.cc:262:slice$1004 ($_DFFE_PP0P_) from module spi_master_top (D = $flatten\spi_register.$verific$n461$259 [7], Q = \spi_register.spi_clk_cnt_reg [7]).
Adding EN signal on $auto$ff.cc:262:slice$1003 ($_DFFE_PP0P_) from module spi_master_top (D = $flatten\spi_register.$verific$n461$259 [2], Q = \spi_register.spi_clk_cnt_reg [2]).
Adding EN signal on $auto$ff.cc:262:slice$1002 ($_DFFE_PP0P_) from module spi_master_top (D = $flatten\spi_register.$verific$n461$259 [1], Q = \spi_register.spi_clk_cnt_reg [1]).
Adding EN signal on $auto$ff.cc:262:slice$1001 ($_DFFE_PP0P_) from module spi_master_top (D = $flatten\spi_register.$verific$n461$259 [0], Q = \spi_register.spi_clk_cnt_reg [0]).

29.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_master_top..
Removed 0 unused cells and 169 unused wires.
<suppressed ~1 debug messages>

29.5. Rerunning OPT passes. (Removed registers in this run.)

29.6. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_master_top.
<suppressed ~504 debug messages>

29.7. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_master_top'.
<suppressed ~1458 debug messages>
Removed a total of 486 cells.

29.8. Executing OPT_DFF pass (perform DFF optimizations).

29.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_master_top..
Removed 0 unused cells and 513 unused wires.
<suppressed ~1 debug messages>

29.10. Finished fast OPT passes.

30. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

31. Executing OPT pass (performing simple optimizations).

31.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_master_top.

31.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_master_top'.
Removed a total of 0 cells.

31.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \spi_master_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

31.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \spi_master_top.
Performed a total of 0 changes.

31.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_master_top'.
Removed a total of 0 cells.

31.6. Executing OPT_SHARE pass.
    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$1042 in front of them:
        $auto$simplemap.cc:312:simplemap_bmux$1035
        $auto$simplemap.cc:312:simplemap_bmux$1032

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$1798 in front of them:
        $auto$simplemap.cc:312:simplemap_bmux$1781
        $auto$simplemap.cc:312:simplemap_bmux$1773

31.7. Executing OPT_DFF pass (perform DFF optimizations).

31.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_master_top..

31.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_master_top.
<suppressed ~2 debug messages>

31.10. Rerunning OPT passes. (Maybe there is more to do..)

31.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \spi_master_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

31.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \spi_master_top.
Performed a total of 0 changes.

31.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_master_top'.
Removed a total of 0 cells.

31.14. Executing OPT_SHARE pass.

31.15. Executing OPT_DFF pass (perform DFF optimizations).

31.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_master_top..

31.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_master_top.

31.18. Finished OPT passes. (There is nothing left to do.)

32. Executing TECHMAP pass (map to technology primitives).

32.1. Executing Verilog-2005 frontend: /home/users/aram/Workspace/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/aram/Workspace/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

32.2. Continuing TECHMAP pass.
Using template $paramod$3ef7d3dd227da7627a99c5e5a6a4deb817573e39\_90_alu for cells of type $alu.
Using template $paramod$18205a5da979f93ffab44671dcc4a48cf14e25e2\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010001 for cells of type $lcu.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $and.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000011 for cells of type $lcu.
Using extmapper simplemap for cells of type $or.
No more expansions possible.
<suppressed ~422 debug messages>

33. Executing OPT pass (performing simple optimizations).

33.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_master_top.
<suppressed ~108 debug messages>

33.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_master_top'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

33.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \spi_master_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

33.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \spi_master_top.
Performed a total of 0 changes.

33.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_master_top'.
Removed a total of 0 cells.

33.6. Executing OPT_DFF pass (perform DFF optimizations).

33.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_master_top..
Removed 20 unused cells and 94 unused wires.
<suppressed ~21 debug messages>

33.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_master_top.

33.9. Rerunning OPT passes. (Maybe there is more to do..)

33.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \spi_master_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

33.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \spi_master_top.
Performed a total of 0 changes.

33.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_master_top'.
Removed a total of 0 cells.

33.13. Executing OPT_DFF pass (perform DFF optimizations).

33.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_master_top..

33.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_master_top.

33.16. Finished OPT passes. (There is nothing left to do.)

34. Executing ABC pass (technology mapping using ABC).

34.1. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Extracted 467 gates and 590 wires to a netlist network with 121 inputs and 105 outputs.

34.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + source /home/users/aram/Workspace/yosys_verific_rs/scripts/synth/abc/abc_base6.a21.scr 
ABC: netlist  : i/o =    121/    105  and =     768  lev =   16 (5.27)  mem = 0.02 MB
ABC: Mapping (K=6)  :  lut =    157  edge =     669  lev =    6 (2.24)  mem = 0.01 MB
ABC: netlist  : i/o =    121/    105  and =     760  lev =   16 (5.19)  mem = 0.02 MB
ABC: Mapping (K=6)  :  lut =    156  edge =     662  lev =    6 (2.25)  mem = 0.01 MB
ABC: netlist  : i/o =    121/    105  and =     755  lev =   16 (5.16)  mem = 0.02 MB
ABC: Mapping (K=6)  :  lut =    154  edge =     654  lev =    5 (2.27)  mem = 0.01 MB
ABC: netlist  : i/o =    121/    105  and =     721  lev =   12 (4.65)  mem = 0.02 MB
ABC: Mapping (K=6)  :  lut =    154  edge =     654  lev =    5 (2.27)  mem = 0.01 MB
ABC: netlist  : i/o =    121/    105  and =     754  lev =   16 (5.22)  mem = 0.02 MB
ABC: Mapping (K=6)  :  lut =    150  edge =     650  lev =    5 (2.10)  mem = 0.01 MB
ABC: netlist  : i/o =    121/    105  and =     757  lev =   16 (5.25)  mem = 0.02 MB
ABC: Mapping (K=6)  :  lut =    150  edge =     653  lev =    5 (2.09)  mem = 0.01 MB
ABC: netlist  : i/o =    121/    105  and =     754  lev =   16 (5.21)  mem = 0.02 MB
ABC: Mapping (K=6)  :  lut =    150  edge =     647  lev =    5 (2.10)  mem = 0.01 MB
ABC: netlist  : i/o =    121/    105  and =     758  lev =   16 (5.21)  mem = 0.02 MB
ABC: Mapping (K=6)  :  lut =    150  edge =     651  lev =    5 (2.09)  mem = 0.01 MB
ABC: netlist  : i/o =    121/    105  and =     753  lev =   16 (5.14)  mem = 0.02 MB
ABC: Mapping (K=6)  :  lut =    149  edge =     646  lev =    5 (2.27)  mem = 0.01 MB
ABC: netlist  : i/o =    121/    105  and =     756  lev =   17 (5.25)  mem = 0.02 MB
ABC: Mapping (K=6)  :  lut =    149  edge =     650  lev =    5 (2.25)  mem = 0.01 MB
ABC: netlist  : i/o =    121/    105  and =     752  lev =   17 (5.33)  mem = 0.02 MB
ABC: Mapping (K=6)  :  lut =    150  edge =     647  lev =    5 (2.10)  mem = 0.01 MB
ABC: netlist  : i/o =    121/    105  and =     752  lev =   17 (5.35)  mem = 0.02 MB
ABC: Mapping (K=6)  :  lut =    148  edge =     645  lev =    5 (2.25)  mem = 0.01 MB
ABC: netlist  : i/o =    121/    105  and =     752  lev =   19 (5.39)  mem = 0.02 MB
ABC: Mapping (K=6)  :  lut =    148  edge =     645  lev =    5 (2.25)  mem = 0.01 MB
ABC: netlist  : i/o =    121/    105  and =     752  lev =   17 (5.35)  mem = 0.02 MB
ABC: Mapping (K=6)  :  lut =    148  edge =     645  lev =    5 (2.25)  mem = 0.01 MB
ABC: netlist  : i/o =    121/    105  and =     752  lev =   17 (5.35)  mem = 0.02 MB
ABC: Mapping (K=6)  :  lut =    148  edge =     645  lev =    5 (2.25)  mem = 0.01 MB
ABC: netlist  : i/o =    121/    105  and =     752  lev =   19 (5.39)  mem = 0.02 MB
ABC: Mapping (K=6)  :  lut =    148  edge =     645  lev =    5 (2.25)  mem = 0.01 MB
ABC: + write_blif <abc-temp-dir>/output.blif 

34.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:      149
ABC RESULTS:        internal signals:      364
ABC RESULTS:           input signals:      121
ABC RESULTS:          output signals:      105
Removing temp directory.

35. Executing OPT pass (performing simple optimizations).

35.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_master_top.

35.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_master_top'.
Removed a total of 0 cells.

35.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \spi_master_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

35.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \spi_master_top.
Performed a total of 0 changes.

35.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_master_top'.
Removed a total of 0 cells.

35.6. Executing OPT_DFF pass (perform DFF optimizations).

35.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_master_top..
Removed 0 unused cells and 357 unused wires.
<suppressed ~15 debug messages>

35.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_master_top.

35.9. Rerunning OPT passes. (Maybe there is more to do..)

35.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \spi_master_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

35.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \spi_master_top.
Performed a total of 0 changes.

35.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_master_top'.
Removed a total of 0 cells.

35.13. Executing OPT_DFF pass (perform DFF optimizations).

35.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_master_top..

35.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_master_top.

35.16. Finished OPT passes. (There is nothing left to do.)

36. Executing HIERARCHY pass (managing design hierarchy).

36.1. Analyzing design hierarchy..
Top module:  \spi_master_top

36.2. Analyzing design hierarchy..
Top module:  \spi_master_top
Removed 0 unused modules.

37. Printing statistics.

=== spi_master_top ===

   Number of wires:                292
   Number of wire bits:            585
   Number of public wires:         156
   Number of public wire bits:     449
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                259
     $_DFFE_PP0P_                   62
     $_DFFE_PP1P_                    4
     $_DFF_PP0_                     36
     $_DFF_P_                        8
     $lut                          149

38. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_master_top..
Removed 0 unused cells and 96 unused wires.
<suppressed ~96 debug messages>

39. Executing BLIF backend.

Warnings: 27 unique messages, 27 total
End of script. Logfile hash: 62011b2652, CPU: user 1.38s system 0.02s, MEM: 20.92 MB peak
Yosys 0.14+36 (git sha1 15a4e900b, gcc 7.1.0 -fPIC -Os)
Time spent: 49% 1x abc (1 sec), 17% 30x opt_expr (0 sec), ...
