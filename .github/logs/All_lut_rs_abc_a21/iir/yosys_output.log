
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.14+36 (git sha1 15a4e900b, gcc 7.1.0 -fPIC -Os)


-- Executing script file `yosys.ys' --

1. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Jan22_SW_Release, released at Sat Jan 29 02:42:49 2022.

2. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Jan22_SW_Release, released at Sat Jan 29 02:42:49 2022.
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'iir.v'

3. Executing HIERARCHY pass (managing design hierarchy).
VERIFIC-INFO [VERI-1018] iir.v:1: compiling module 'top'
VERIFIC-WARNING [VERI-1221] iir.v:62: 'params' should be on the sensitivity list
VERIFIC-WARNING [VERI-1221] iir.v:67: 'params' should be on the sensitivity list
VERIFIC-WARNING [VERI-1221] iir.v:72: 'params' should be on the sensitivity list
VERIFIC-WARNING [VERI-1221] iir.v:77: 'params' should be on the sensitivity list
VERIFIC-WARNING [VERI-1221] iir.v:82: 'params' should be on the sensitivity list
VERIFIC-WARNING [VERI-1221] iir.v:94: 'uk' should be on the sensitivity list
VERIFIC-WARNING [VERI-1209] iir.v:96: expression size 3 truncated to fit in target size 1
VERIFIC-WARNING [VERI-1221] iir.v:106: 'yo1' should be on the sensitivity list
VERIFIC-WARNING [VERI-1221] iir.v:106: 'yo2' should be on the sensitivity list
VERIFIC-WARNING [VERI-1221] iir.v:113: 'b0t' should be on the sensitivity list
VERIFIC-WARNING [VERI-1221] iir.v:113: 'b1t' should be on the sensitivity list
VERIFIC-WARNING [VERI-1221] iir.v:113: 'b2t' should be on the sensitivity list
VERIFIC-WARNING [VERI-1221] iir.v:118: 'uk' should be on the sensitivity list
VERIFIC-WARNING [VERI-1221] iir.v:119: 'uk1' should be on the sensitivity list
VERIFIC-WARNING [VERI-1221] iir.v:120: 'ysum' should be on the sensitivity list
VERIFIC-WARNING [VERI-1221] iir.v:120: 'utmp' should be on the sensitivity list
VERIFIC-WARNING [VERI-1221] iir.v:120: 'utmp' should be on the sensitivity list
VERIFIC-WARNING [VERI-1221] iir.v:120: 'utmp' should be on the sensitivity list
VERIFIC-WARNING [VERI-1221] iir.v:120: 'utmp' should be on the sensitivity list
VERIFIC-WARNING [VERI-1221] iir.v:120: 'utmp' should be on the sensitivity list
VERIFIC-WARNING [VERI-1221] iir.v:130: 'yk' should be on the sensitivity list
VERIFIC-WARNING [VERI-1221] iir.v:131: 'yk' should be on the sensitivity list
VERIFIC-WARNING [VERI-1221] iir.v:132: 'yk1' should be on the sensitivity list
VERIFIC-WARNING [VERI-1221] iir.v:137: 'dout' should be on the sensitivity list
VERIFIC-WARNING [VERI-1221] iir.v:138: 'yk1' should be on the sensitivity list
VERIFIC-WARNING [VERI-1209] iir.v:142: expression size 32 truncated to fit in target size 4
VERIFIC-WARNING [VERI-2580] iir.v:150: latch inferred for net 'obf_next_state[3]'
VERIFIC-WARNING [VERI-1209] iir.v:225: expression size 32 truncated to fit in target size 7
Importing module top.

3.1. Analyzing design hierarchy..
Top module:  \top

3.2. Analyzing design hierarchy..
Top module:  \top
Removed 0 unused modules.

4. Executing PROC pass (convert processes to netlists).

4.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

4.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

4.4. Executing PROC_INIT pass (extract init attributes).

4.5. Executing PROC_ARST pass (detect async resets in processes).

4.6. Executing PROC_MUX pass (convert decision trees to multiplexers).

4.7. Executing PROC_DLATCH pass (convert process syncs to latches).

4.8. Executing PROC_DFF pass (convert process syncs to FFs).

4.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

4.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~58 debug messages>

5. Executing FLATTEN pass (flatten design).

6. Executing TRIBUF pass.

7. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 101 unused wires.
<suppressed ~40 debug messages>

9. Executing CHECK pass (checking for obvious problems).
Checking module top...
Found and reported 0 problems.

10. Executing DEMINOUT pass (demote inout ports to input or output).

11. Executing OPT pass (performing simple optimizations).

11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

11.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

11.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

11.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

11.6. Executing OPT_DFF pass (perform DFF optimizations).
Changing const-value async load to async reset on $verific$ysum_reg$iir.v:206$280 ($aldff) from module top.
Changing const-value async load to async reset on $verific$yk_reg$iir.v:206$279 ($aldff) from module top.
Changing const-value async load to async reset on $verific$yk2_reg$iir.v:206$278 ($aldff) from module top.
Changing const-value async load to async reset on $verific$yk1_reg$iir.v:206$277 ($aldff) from module top.
Changing const-value async load to async reset on $verific$wait_counter_reg$iir.v:217$292 ($aldff) from module top.
Changing const-value async load to async reset on $verific$utmp_reg$iir.v:206$281 ($aldff) from module top.
Changing const-value async load to async reset on $verific$uk_reg$iir.v:206$274 ($aldff) from module top.
Changing const-value async load to async reset on $verific$uk2_reg$iir.v:206$276 ($aldff) from module top.
Changing const-value async load to async reset on $verific$uk1_reg$iir.v:206$275 ($aldff) from module top.
Removing never-active CLR on $verific$temp_ysum_reg$iir.v:150$145 ($dlatchsr) from module top.
Removing never-active ARST on $verific$temp_ysum_reg$iir.v:150$145 ($dlatchsr) from module top.
Removing never-active CLR on $verific$temp_yk_reg$iir.v:150$185 ($dlatchsr) from module top.
Removing never-active ARST on $verific$temp_yk_reg$iir.v:150$185 ($dlatchsr) from module top.
Removing never-active CLR on $verific$temp_yk2_reg$iir.v:150$137 ($dlatchsr) from module top.
Removing never-active ARST on $verific$temp_yk2_reg$iir.v:150$137 ($dlatchsr) from module top.
Removing never-active CLR on $verific$temp_yk1_reg$iir.v:150$106 ($dlatchsr) from module top.
Removing never-active ARST on $verific$temp_yk1_reg$iir.v:150$106 ($dlatchsr) from module top.
Removing never-active CLR on $verific$temp_wait_counter_reg$iir.v:150$152 ($dlatchsr) from module top.
Removing never-active ARST on $verific$temp_wait_counter_reg$iir.v:150$152 ($dlatchsr) from module top.
Removing never-active CLR on $verific$temp_utmp_reg$iir.v:150$175 ($dlatchsr) from module top.
Removing never-active ARST on $verific$temp_utmp_reg$iir.v:150$175 ($dlatchsr) from module top.
Removing never-active CLR on $verific$temp_uk_reg$iir.v:150$89 ($dlatchsr) from module top.
Removing never-active ARST on $verific$temp_uk_reg$iir.v:150$89 ($dlatchsr) from module top.
Removing never-active CLR on $verific$temp_uk2_reg$iir.v:150$161 ($dlatchsr) from module top.
Removing never-active ARST on $verific$temp_uk2_reg$iir.v:150$161 ($dlatchsr) from module top.
Removing never-active CLR on $verific$temp_uk1_reg$iir.v:150$193 ($dlatchsr) from module top.
Removing never-active ARST on $verific$temp_uk1_reg$iir.v:150$193 ($dlatchsr) from module top.
Removing never-active CLR on $verific$temp_dout_reg$iir.v:150$113 ($dlatchsr) from module top.
Removing never-active ARST on $verific$temp_dout_reg$iir.v:150$113 ($dlatchsr) from module top.
Removing never-active CLR on $verific$temp_b2_reg$iir.v:150$204 ($dlatchsr) from module top.
Removing never-active ARST on $verific$temp_b2_reg$iir.v:150$204 ($dlatchsr) from module top.
Removing never-active CLR on $verific$temp_b1_reg$iir.v:150$212 ($dlatchsr) from module top.
Removing never-active ARST on $verific$temp_b1_reg$iir.v:150$212 ($dlatchsr) from module top.
Removing never-active CLR on $verific$temp_b0_reg$iir.v:150$220 ($dlatchsr) from module top.
Removing never-active ARST on $verific$temp_b0_reg$iir.v:150$220 ($dlatchsr) from module top.
Removing never-active CLR on $verific$temp_a2_reg$iir.v:150$228 ($dlatchsr) from module top.
Removing never-active ARST on $verific$temp_a2_reg$iir.v:150$228 ($dlatchsr) from module top.
Removing never-active CLR on $verific$temp_a1_reg$iir.v:150$168 ($dlatchsr) from module top.
Removing never-active ARST on $verific$temp_a1_reg$iir.v:150$168 ($dlatchsr) from module top.
Changing const-value async load to async reset on $verific$ready_reg$iir.v:206$289 ($aldff) from module top.
Changing const-value async load to async reset on $verific$obf_state_reg$iir.v:206$288 ($aldff) from module top.
Removing never-active CLR on $verific$obf_next_state_reg$iir.v:150$120 ($dlatchsr) from module top.
Removing never-active ARST on $verific$obf_next_state_reg$iir.v:150$120 ($dlatchsr) from module top.
Removing never-active async load on $verific$finite_counter_reg$iir.v:228$299 ($aldff) from module top.
Changing const-value async load to async reset on $verific$dout_reg$iir.v:206$287 ($aldff) from module top.
Changing const-value async load to async reset on $verific$b2_reg$iir.v:206$286 ($aldff) from module top.
Changing const-value async load to async reset on $verific$b1_reg$iir.v:206$285 ($aldff) from module top.
Changing const-value async load to async reset on $verific$b0_reg$iir.v:206$284 ($aldff) from module top.
Changing const-value async load to async reset on $verific$a2_reg$iir.v:206$283 ($aldff) from module top.
Changing const-value async load to async reset on $verific$a1_reg$iir.v:206$282 ($aldff) from module top.
Setting constant 0-bit at position 0 on $verific$temp_ready_reg$iir.v:150$200 ($dlatch) from module top.

11.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

11.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

11.9. Rerunning OPT passes. (Maybe there is more to do..)

11.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

11.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

11.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

11.13. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on $verific$ready_reg$iir.v:206$289 ($adff) from module top.

11.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

11.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

11.16. Rerunning OPT passes. (Maybe there is more to do..)

11.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

11.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

11.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

11.20. Executing OPT_DFF pass (perform DFF optimizations).

11.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

11.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

11.23. Finished OPT passes. (There is nothing left to do.)

12. Executing FSM pass (extract and optimize FSM).

12.1. Executing FSM_DETECT pass (finding FSMs in design).

12.2. Executing FSM_EXTRACT pass (extracting FSM from design).

12.3. Executing FSM_OPT pass (simple optimizations of FSMs).

12.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

12.5. Executing FSM_OPT pass (simple optimizations of FSMs).

12.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

12.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

12.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

13. Executing OPT pass (performing simple optimizations).

13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

13.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $verific$finite_counter_reg$iir.v:228$299 ($dff) from module top (D = $verific$n2523$82, Q = \finite_counter, rval = 7'1100100).
Adding EN signal on $auto$ff.cc:262:slice$308 ($sdff) from module top (D = $verific$n2498$79 [6:0], Q = \finite_counter).

13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 2 unused cells and 2 unused wires.
<suppressed ~3 debug messages>

13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

13.9. Rerunning OPT passes. (Maybe there is more to do..)

13.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

13.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

13.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

13.13. Executing OPT_DFF pass (perform DFF optimizations).

13.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

13.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

13.16. Finished OPT passes. (There is nothing left to do.)

14. Executing WREDUCE pass (reducing word size of cells).
Removed top 15 bits (of 29) from port A of cell top.$verific$add_13$iir.v:106$97 ($add).
Removed top 15 bits (of 29) from port B of cell top.$verific$add_13$iir.v:106$97 ($add).
Removed top 14 bits (of 29) from port Y of cell top.$verific$add_13$iir.v:106$97 ($add).
Removed top 1 bits (of 5) from port A of cell top.$verific$sub_32$iir.v:142$129 ($sub).
Removed top 4 bits (of 5) from port B of cell top.$verific$sub_32$iir.v:142$129 ($sub).
Removed top 1 bits (of 5) from port Y of cell top.$verific$sub_32$iir.v:142$129 ($sub).
Removed top 14 bits (of 29) from FF cell top.$verific$temp_ysum_reg$iir.v:150$145 ($dlatch).
Removed top 1 bits (of 24) from port Y of cell top.$verific$mult_768$iir.v:161$239 ($mul).
Removed top 1 bits (of 24) from port Y of cell top.$verific$mult_770$iir.v:162$242 ($mul).
Removed top 1 bits (of 24) from port Y of cell top.$verific$mult_772$iir.v:163$245 ($mul).
Removed top 14 bits (of 29) from FF cell top.$verific$ysum_reg$iir.v:206$280 ($adff).
Removed top 1 bits (of 8) from port A of cell top.$verific$sub_832$iir.v:225$295 ($sub).
Removed top 7 bits (of 8) from port B of cell top.$verific$sub_832$iir.v:225$295 ($sub).
Removed top 1 bits (of 8) from port Y of cell top.$verific$sub_832$iir.v:225$295 ($sub).
Removed top 12 bits (of 27) from port A of cell top.$verific$add_20$iir.v:120$103 ($add).
Removed top 14 bits (of 29) from wire top.$verific$n121$31.
Removed top 1 bits (of 8) from wire top.$verific$n2498$79.
Removed top 1 bits (of 2) from wire top.$verific$n4$26.
Removed top 2 bits (of 3) from wire top.$verific$n400$43.
Removed top 1 bits (of 5) from wire top.$verific$n447$46.
Removed top 14 bits (of 29) from wire top.temp_ysum.
Removed top 15 bits (of 32) from wire top.yo1.
Removed top 15 bits (of 32) from wire top.yo2.
Removed top 14 bits (of 29) from wire top.ysum.

15. Executing PEEPOPT pass (run peephole optimizers).

16. Executing PMUXTREE pass.

17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 14 unused wires.
<suppressed ~1 debug messages>

18. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module top:
  creating $macc model for $verific$add_13$iir.v:106$97 ($add).
  creating $macc model for $verific$add_15$iir.v:113$99 ($add).
  creating $macc model for $verific$add_16$iir.v:113$100 ($add).
  creating $macc model for $verific$add_20$iir.v:120$103 ($add).
  creating $macc model for $verific$add_764$iir.v:155$235 ($add).
  creating $macc model for $verific$add_766$iir.v:157$237 ($add).
  creating $macc model for $verific$mult_768$iir.v:161$239 ($mul).
  creating $macc model for $verific$mult_770$iir.v:162$242 ($mul).
  creating $macc model for $verific$mult_772$iir.v:163$245 ($mul).
  creating $macc model for $verific$sub_32$iir.v:142$129 ($sub).
  creating $macc model for $verific$sub_832$iir.v:225$295 ($sub).
  merging $macc model for $verific$add_15$iir.v:113$99 into $verific$add_16$iir.v:113$100.
  merging $macc model for $verific$mult_768$iir.v:161$239 into $verific$add_16$iir.v:113$100.
  merging $macc model for $verific$mult_772$iir.v:163$245 into $verific$add_16$iir.v:113$100.
  merging $macc model for $verific$mult_770$iir.v:162$242 into $verific$add_16$iir.v:113$100.
  creating $alu model for $macc $verific$sub_32$iir.v:142$129.
  creating $alu model for $macc $verific$add_766$iir.v:157$237.
  creating $alu model for $macc $verific$add_764$iir.v:155$235.
  creating $alu model for $macc $verific$add_20$iir.v:120$103.
  creating $alu model for $macc $verific$sub_832$iir.v:225$295.
  creating $alu model for $macc $verific$add_13$iir.v:106$97.
  creating $macc cell for $verific$add_16$iir.v:113$100: $auto$alumacc.cc:365:replace_macc$319
  creating $alu cell for $verific$add_13$iir.v:106$97: $auto$alumacc.cc:485:replace_alu$320
  creating $alu cell for $verific$sub_832$iir.v:225$295: $auto$alumacc.cc:485:replace_alu$323
  creating $alu cell for $verific$add_20$iir.v:120$103: $auto$alumacc.cc:485:replace_alu$326
  creating $alu cell for $verific$add_764$iir.v:155$235: $auto$alumacc.cc:485:replace_alu$329
  creating $alu cell for $verific$add_766$iir.v:157$237: $auto$alumacc.cc:485:replace_alu$332
  creating $alu cell for $verific$sub_32$iir.v:142$129: $auto$alumacc.cc:485:replace_alu$335
  created 6 $alu and 1 $macc cells.

19. Executing OPT pass (performing simple optimizations).

19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

19.6. Executing OPT_DFF pass (perform DFF optimizations).

19.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 4 unused cells and 7 unused wires.
<suppressed ~11 debug messages>

19.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

19.9. Rerunning OPT passes. (Maybe there is more to do..)

19.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

19.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

19.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

19.13. Executing OPT_DFF pass (perform DFF optimizations).

19.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

19.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

19.16. Finished OPT passes. (There is nothing left to do.)

20. Executing MEMORY pass.

20.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

20.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

20.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

20.4. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

20.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

20.6. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

20.7. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

20.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

20.9. Executing MEMORY_COLLECT pass (generating $mem cells).

21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

22. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

23. Executing SIMPLEMAP pass (map simple cells to gate primitives).
Mapping top.$auto$ff.cc:262:slice$309 ($sdffe).
Mapping top.$verific$Mux_138$iir.v:149$144 ($bmux).
Mapping top.$verific$Mux_201$iir.v:149$159 ($bmux).
Mapping top.$verific$Mux_213$iir.v:149$160 ($bmux).
Mapping top.$verific$Mux_342$iir.v:149$182 ($bmux).
Mapping top.$verific$Mux_411$iir.v:149$184 ($bmux).
Mapping top.$verific$Mux_498$iir.v:149$192 ($bmux).
Mapping top.$verific$Mux_525$iir.v:149$201 ($bmux).
Mapping top.$verific$Mux_53$iir.v:149$133 ($bmux).
Mapping top.$verific$Mux_573$iir.v:149$203 ($bmux).
Mapping top.$verific$Mux_621$iir.v:149$211 ($bmux).
Mapping top.$verific$Mux_65$iir.v:149$135 ($bmux).
Mapping top.$verific$Mux_669$iir.v:149$219 ($bmux).
Mapping top.$verific$Mux_717$iir.v:149$227 ($bmux).
Mapping top.$verific$a1_reg$iir.v:206$282 ($adff).
Mapping top.$verific$a2_reg$iir.v:206$283 ($adff).
Mapping top.$verific$b0_reg$iir.v:206$284 ($adff).
Mapping top.$verific$b1_reg$iir.v:206$285 ($adff).
Mapping top.$verific$b2_reg$iir.v:206$286 ($adff).
Mapping top.$verific$del_count0_reg$iir.v:234$303 ($dff).
Mapping top.$verific$dout_reg$iir.v:206$287 ($adff).
Mapping top.$verific$equal_22$iir.v:126$105 ($logic_not).
Mapping top.$verific$equal_838$iir.v:230$300 ($logic_not).
Mapping top.$verific$i844$iir.v:236$304 ($not).
Mapping top.$verific$i845$iir.v:236$305 ($and).
Mapping top.$verific$inv_853$iir.v:148$132 ($not).
Mapping top.$verific$mux_12$iir.v:95$96 ($mux).
Mapping top.$verific$mux_29$iir.v:140$127 ($mux).
Mapping top.$verific$mux_30$iir.v:140$128 ($mux).
Mapping top.$verific$mux_852$iir.v:149$293 ($bmux).
Mapping top.$verific$mux_872$iir.v:149$136 ($bmux).
Mapping top.$verific$obf_next_state_reg$iir.v:150$120 ($dlatch).
Mapping top.$verific$obf_state_reg$iir.v:206$288 ($adff).
Mapping top.$verific$temp_a1_reg$iir.v:150$168 ($dlatch).
Mapping top.$verific$temp_a2_reg$iir.v:150$228 ($dlatch).
Mapping top.$verific$temp_b0_reg$iir.v:150$220 ($dlatch).
Mapping top.$verific$temp_b1_reg$iir.v:150$212 ($dlatch).
Mapping top.$verific$temp_b2_reg$iir.v:150$204 ($dlatch).
Mapping top.$verific$temp_dout_reg$iir.v:150$113 ($dlatch).
Mapping top.$verific$temp_uk1_reg$iir.v:150$193 ($dlatch).
Mapping top.$verific$temp_uk2_reg$iir.v:150$161 ($dlatch).
Mapping top.$verific$temp_uk_reg$iir.v:150$89 ($dlatch).
Mapping top.$verific$temp_utmp_reg$iir.v:150$175 ($dlatch).
Mapping top.$verific$temp_wait_counter_reg$iir.v:150$152 ($dlatch).
Mapping top.$verific$temp_yk1_reg$iir.v:150$106 ($dlatch).
Mapping top.$verific$temp_yk2_reg$iir.v:150$137 ($dlatch).
Mapping top.$verific$temp_yk_reg$iir.v:150$185 ($dlatch).
Mapping top.$verific$temp_ysum_reg$iir.v:150$145 ($dlatch).
Mapping top.$verific$uk1_reg$iir.v:206$275 ($adff).
Mapping top.$verific$uk2_reg$iir.v:206$276 ($adff).
Mapping top.$verific$uk_reg$iir.v:206$274 ($adff).
Mapping top.$verific$utmp_reg$iir.v:206$281 ($adff).
Mapping top.$verific$wait_counter_reg$iir.v:217$292 ($adff).
Mapping top.$verific$yk1_reg$iir.v:206$277 ($adff).
Mapping top.$verific$yk2_reg$iir.v:206$278 ($adff).
Mapping top.$verific$yk_reg$iir.v:206$279 ($adff).
Mapping top.$verific$ysum_reg$iir.v:206$280 ($adff).

24. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~233 debug messages>

25. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~84 debug messages>
Removed a total of 28 cells.

26. Executing OPT_DFF pass (perform DFF optimizations).

27. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 22 unused cells and 38 unused wires.
<suppressed ~23 debug messages>

28. Executing OPT pass (performing simple optimizations).

28.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

28.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

28.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

28.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

28.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

28.6. Executing OPT_DFF pass (perform DFF optimizations).

28.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

28.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

28.9. Finished OPT passes. (There is nothing left to do.)

29. Executing OPT pass (performing simple optimizations).

29.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~54 debug messages>

29.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

29.3. Executing OPT_DFF pass (perform DFF optimizations).

29.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 4 unused wires.
<suppressed ~1 debug messages>

29.5. Finished fast OPT passes.

30. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

31. Executing OPT pass (performing simple optimizations).

31.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~2 debug messages>

31.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

31.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

31.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

31.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

31.6. Executing OPT_SHARE pass.

31.7. Executing OPT_DFF pass (perform DFF optimizations).

31.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

31.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

31.10. Finished OPT passes. (There is nothing left to do.)

32. Executing TECHMAP pass (map to technology primitives).

32.1. Executing Verilog-2005 frontend: /home/users/aram/Workspace/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/aram/Workspace/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

32.2. Continuing TECHMAP pass.
Using template $paramod$10ed987432f06055e5279101f9ec60a49861b43c\_90_alu for cells of type $alu.
Using template $paramod$081ba1a4a7201ecdb44563d3c3bd7013d1ebf4eb\_90_alu for cells of type $alu.
Using template $paramod$b6ce0c8955977b221a89650d58ba8da4bf595cb5\_90_alu for cells of type $alu.
Using extmapper maccmap for cells of type $macc.
  add \b0 * \uk (16x8 bits, unsigned)
  add \b2 * \uk2 (16x8 bits, unsigned)
  add \b1 * \uk1 (16x8 bits, unsigned)
Using template $paramod$8742280fdebca84e1c87f2a86ed84f62d558f4cc\_90_alu for cells of type $alu.
Using template $paramod$ce2c825c700802cb47978a6b7889f198e64340ac\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $and.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010001 for cells of type $lcu.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000111 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001111 for cells of type $lcu.
Using template $paramod\_90_fa\WIDTH=32'00000000000000000000000000010111 for cells of type $fa.
Using template $paramod\_90_fa\WIDTH=32'00000000000000000000000000010110 for cells of type $fa.
Using template $paramod$448756c9a9dfaa49080ce4b90c6cc182883e181f\_90_alu for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000100 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011011 for cells of type $lcu.
Using extmapper simplemap for cells of type $or.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010111 for cells of type $lcu.
No more expansions possible.
<suppressed ~1541 debug messages>

33. Executing OPT pass (performing simple optimizations).

33.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~1153 debug messages>

33.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~24 debug messages>
Removed a total of 8 cells.

33.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

33.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

33.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

33.6. Executing OPT_DFF pass (perform DFF optimizations).

33.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 146 unused cells and 459 unused wires.
<suppressed ~147 debug messages>

33.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

33.9. Rerunning OPT passes. (Maybe there is more to do..)

33.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

33.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

33.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

33.13. Executing OPT_DFF pass (perform DFF optimizations).

33.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

33.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

33.16. Finished OPT passes. (There is nothing left to do.)

34. Executing ABC pass (technology mapping using ABC).

34.1. Extracting gate netlist of module `\top' to `<abc-temp-dir>/input.blif'..
Extracted 2864 gates and 3089 wires to a netlist network with 223 inputs and 115 outputs.

34.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + source /home/users/aram/Workspace/yosys_verific_rs/scripts/synth/abc/abc_base6.a21.scr 
ABC: netlist  : i/o =    223/    115  and =    7764  lev =   58 (18.97)  mem = 0.10 MB
ABC: Mapping (K=6)  :  lut =    935  edge =    3783  lev =   16 (6.03)  mem = 0.05 MB
ABC: netlist  : i/o =    223/    115  and =    7899  lev =   70 (19.19)  mem = 0.10 MB
ABC: Mapping (K=6)  :  lut =    905  edge =    3745  lev =   22 (6.02)  mem = 0.05 MB
ABC: netlist  : i/o =    223/    115  and =    7933  lev =   76 (20.01)  mem = 0.10 MB
ABC: Mapping (K=6)  :  lut =    889  edge =    3682  lev =   24 (5.88)  mem = 0.05 MB
ABC: netlist  : i/o =    223/    115  and =    5881  lev =   63 (19.11)  mem = 0.08 MB
ABC: Mapping (K=6)  :  lut =    892  edge =    3697  lev =   24 (6.01)  mem = 0.04 MB
ABC: netlist  : i/o =    223/    115  and =    7884  lev =   70 (19.30)  mem = 0.10 MB
ABC: Mapping (K=6)  :  lut =    919  edge =    3750  lev =   24 (6.47)  mem = 0.05 MB
ABC: netlist  : i/o =    223/    115  and =    7954  lev =   74 (19.75)  mem = 0.13 MB
ABC: Mapping (K=6)  :  lut =    805  edge =    3802  lev =   21 (5.57)  mem = 0.05 MB
ABC: netlist  : i/o =    223/    115  and =    8058  lev =   76 (19.77)  mem = 0.14 MB
ABC: Mapping (K=6)  :  lut =    805  edge =    3776  lev =   18 (5.28)  mem = 0.05 MB
ABC: netlist  : i/o =    223/    115  and =    8114  lev =   75 (20.01)  mem = 0.14 MB
ABC: Mapping (K=6)  :  lut =    808  edge =    3779  lev =   20 (5.52)  mem = 0.05 MB
ABC: netlist  : i/o =    223/    115  and =    6346  lev =   66 (17.74)  mem = 0.11 MB
ABC: Mapping (K=6)  :  lut =    798  edge =    3810  lev =   17 (5.23)  mem = 0.05 MB
ABC: netlist  : i/o =    223/    115  and =    8212  lev =   77 (20.28)  mem = 0.14 MB
ABC: Mapping (K=6)  :  lut =    791  edge =    3757  lev =   17 (5.23)  mem = 0.05 MB
ABC: netlist  : i/o =    223/    115  and =    8194  lev =   79 (20.56)  mem = 0.14 MB
ABC: Mapping (K=6)  :  lut =    790  edge =    3762  lev =   17 (5.23)  mem = 0.05 MB
ABC: netlist  : i/o =    223/    115  and =    8493  lev =   77 (20.12)  mem = 0.14 MB
ABC: Mapping (K=6)  :  lut =    795  edge =    3780  lev =   17 (5.25)  mem = 0.05 MB
ABC: netlist  : i/o =    223/    115  and =    8495  lev =   77 (20.12)  mem = 0.14 MB
ABC: Mapping (K=6)  :  lut =    794  edge =    3772  lev =   17 (5.25)  mem = 0.05 MB
ABC: netlist  : i/o =    223/    115  and =    8194  lev =   79 (20.56)  mem = 0.10 MB
ABC: Mapping (K=6)  :  lut =    790  edge =    3762  lev =   17 (5.23)  mem = 0.05 MB
ABC: netlist  : i/o =    223/    115  and =    8194  lev =   79 (20.56)  mem = 0.14 MB
ABC: Mapping (K=6)  :  lut =    790  edge =    3762  lev =   17 (5.23)  mem = 0.05 MB
ABC: netlist  : i/o =    223/    115  and =    8898  lev =   80 (20.98)  mem = 0.11 MB
ABC: Mapping (K=6)  :  lut =    790  edge =    3762  lev =   17 (5.23)  mem = 0.06 MB
ABC: + write_blif <abc-temp-dir>/output.blif 

34.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:      793
ABC RESULTS:        internal signals:     2751
ABC RESULTS:           input signals:      223
ABC RESULTS:          output signals:      115
Removing temp directory.

35. Executing OPT pass (performing simple optimizations).

35.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

35.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~12 debug messages>
Removed a total of 4 cells.

35.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

35.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

35.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

35.6. Executing OPT_DFF pass (perform DFF optimizations).

35.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 735 unused wires.
<suppressed ~3 debug messages>

35.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

35.9. Rerunning OPT passes. (Maybe there is more to do..)

35.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

35.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

35.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

35.13. Executing OPT_DFF pass (perform DFF optimizations).

35.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

35.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

35.16. Finished OPT passes. (There is nothing left to do.)

36. Executing HIERARCHY pass (managing design hierarchy).

36.1. Analyzing design hierarchy..
Top module:  \top

36.2. Analyzing design hierarchy..
Top module:  \top
Removed 0 unused modules.

37. Printing statistics.

=== top ===

   Number of wires:                785
   Number of wire bits:           1399
   Number of public wires:          44
   Number of public wire bits:     474
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1205
     $_DFF_PP0_                    202
     $_DFF_PP1_                      1
     $_DFF_P_                        1
     $_DLATCH_P_                   203
     $_SDFFE_PP0P_                   4
     $_SDFFE_PP1P_                   3
     $lut                          791

38. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

39. Executing BLIF backend.

Warnings: 24 unique messages, 28 total
End of script. Logfile hash: c804caaeca, CPU: user 2.09s system 0.04s, MEM: 32.83 MB peak
Yosys 0.14+36 (git sha1 15a4e900b, gcc 7.1.0 -fPIC -Os)
Time spent: 93% 1x abc (28 sec), 2% 37x opt_expr (0 sec), ...
