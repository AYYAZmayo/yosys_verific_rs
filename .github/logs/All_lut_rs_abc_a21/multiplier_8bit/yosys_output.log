
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.14+36 (git sha1 15a4e900b, gcc 7.1.0 -fPIC -Os)


-- Executing script file `yosys.ys' --

1. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Jan22_SW_Release, released at Sat Jan 29 02:42:49 2022.

2. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Jan22_SW_Release, released at Sat Jan 29 02:42:49 2022.
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'multiplier_8bit.v'

3. Executing HIERARCHY pass (managing design hierarchy).
VERIFIC-INFO [VERI-1018] multiplier_8bit.v:1: compiling module 'multiplier_8bit'
Importing module multiplier_8bit.

3.1. Analyzing design hierarchy..
Top module:  \multiplier_8bit

3.2. Analyzing design hierarchy..
Top module:  \multiplier_8bit
Removed 0 unused modules.

4. Executing PROC pass (convert processes to netlists).

4.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

4.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

4.4. Executing PROC_INIT pass (extract init attributes).

4.5. Executing PROC_ARST pass (detect async resets in processes).

4.6. Executing PROC_MUX pass (convert decision trees to multiplexers).

4.7. Executing PROC_DLATCH pass (convert process syncs to latches).

4.8. Executing PROC_DFF pass (convert process syncs to FFs).

4.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

4.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module multiplier_8bit.

5. Executing FLATTEN pass (flatten design).

6. Executing TRIBUF pass.

7. Executing OPT_EXPR pass (perform const folding).
Optimizing module multiplier_8bit.

8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \multiplier_8bit..
Removed 0 unused cells and 1 unused wires.
<suppressed ~2 debug messages>

9. Executing CHECK pass (checking for obvious problems).
Checking module multiplier_8bit...
Found and reported 0 problems.

10. Executing DEMINOUT pass (demote inout ports to input or output).

11. Executing OPT pass (performing simple optimizations).

11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module multiplier_8bit.

11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\multiplier_8bit'.
Removed a total of 0 cells.

11.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \multiplier_8bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

11.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \multiplier_8bit.
Performed a total of 0 changes.

11.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\multiplier_8bit'.
Removed a total of 0 cells.

11.6. Executing OPT_DFF pass (perform DFF optimizations).

11.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \multiplier_8bit..

11.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module multiplier_8bit.

11.9. Finished OPT passes. (There is nothing left to do.)

12. Executing FSM pass (extract and optimize FSM).

12.1. Executing FSM_DETECT pass (finding FSMs in design).

12.2. Executing FSM_EXTRACT pass (extracting FSM from design).

12.3. Executing FSM_OPT pass (simple optimizations of FSMs).

12.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \multiplier_8bit..

12.5. Executing FSM_OPT pass (simple optimizations of FSMs).

12.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

12.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

12.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

13. Executing OPT pass (performing simple optimizations).

13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module multiplier_8bit.

13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\multiplier_8bit'.
Removed a total of 0 cells.

13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \multiplier_8bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \multiplier_8bit.
Performed a total of 0 changes.

13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\multiplier_8bit'.
Removed a total of 0 cells.

13.6. Executing OPT_DFF pass (perform DFF optimizations).

13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \multiplier_8bit..

13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module multiplier_8bit.

13.9. Finished OPT passes. (There is nothing left to do.)

14. Executing WREDUCE pass (reducing word size of cells).

15. Executing PEEPOPT pass (run peephole optimizers).

16. Executing PMUXTREE pass.

17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \multiplier_8bit..

18. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module multiplier_8bit:
  creating $macc model for $verific$mult_3$multiplier_8bit.v:6$2 ($mul).
  creating $macc cell for $verific$mult_3$multiplier_8bit.v:6$2: $auto$alumacc.cc:365:replace_macc$4
  created 0 $alu and 1 $macc cells.

19. Executing OPT pass (performing simple optimizations).

19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module multiplier_8bit.

19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\multiplier_8bit'.
Removed a total of 0 cells.

19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \multiplier_8bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \multiplier_8bit.
Performed a total of 0 changes.

19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\multiplier_8bit'.
Removed a total of 0 cells.

19.6. Executing OPT_DFF pass (perform DFF optimizations).

19.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \multiplier_8bit..

19.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module multiplier_8bit.

19.9. Finished OPT passes. (There is nothing left to do.)

20. Executing MEMORY pass.

20.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

20.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

20.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

20.4. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

20.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \multiplier_8bit..

20.6. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

20.7. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

20.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \multiplier_8bit..

20.9. Executing MEMORY_COLLECT pass (generating $mem cells).

21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \multiplier_8bit..

22. Executing OPT_EXPR pass (perform const folding).
Optimizing module multiplier_8bit.

23. Executing SIMPLEMAP pass (map simple cells to gate primitives).

24. Executing OPT_EXPR pass (perform const folding).
Optimizing module multiplier_8bit.

25. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\multiplier_8bit'.
Removed a total of 0 cells.

26. Executing OPT_DFF pass (perform DFF optimizations).

27. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \multiplier_8bit..

28. Executing OPT pass (performing simple optimizations).

28.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module multiplier_8bit.

28.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\multiplier_8bit'.
Removed a total of 0 cells.

28.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \multiplier_8bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

28.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \multiplier_8bit.
Performed a total of 0 changes.

28.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\multiplier_8bit'.
Removed a total of 0 cells.

28.6. Executing OPT_DFF pass (perform DFF optimizations).

28.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \multiplier_8bit..

28.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module multiplier_8bit.

28.9. Finished OPT passes. (There is nothing left to do.)

29. Executing OPT pass (performing simple optimizations).

29.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module multiplier_8bit.

29.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\multiplier_8bit'.
Removed a total of 0 cells.

29.3. Executing OPT_DFF pass (perform DFF optimizations).

29.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \multiplier_8bit..

29.5. Finished fast OPT passes.

30. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

31. Executing OPT pass (performing simple optimizations).

31.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module multiplier_8bit.

31.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\multiplier_8bit'.
Removed a total of 0 cells.

31.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \multiplier_8bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

31.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \multiplier_8bit.
Performed a total of 0 changes.

31.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\multiplier_8bit'.
Removed a total of 0 cells.

31.6. Executing OPT_SHARE pass.

31.7. Executing OPT_DFF pass (perform DFF optimizations).

31.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \multiplier_8bit..

31.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module multiplier_8bit.

31.10. Finished OPT passes. (There is nothing left to do.)

32. Executing TECHMAP pass (map to technology primitives).

32.1. Executing Verilog-2005 frontend: /home/users/aram/Workspace/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/aram/Workspace/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

32.2. Continuing TECHMAP pass.
Using extmapper maccmap for cells of type $macc.
  add \a_in * \b_in (8x8 bits, unsigned)
Using extmapper simplemap for cells of type $and.
Using template $paramod\_90_fa\WIDTH=32'00000000000000000000000000010000 for cells of type $fa.
Using template $paramod$6df0329addda9228fcc2546de2aaf14ad26c98e1\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010000 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $not.
No more expansions possible.
<suppressed ~336 debug messages>

33. Executing OPT pass (performing simple optimizations).

33.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module multiplier_8bit.
<suppressed ~383 debug messages>

33.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\multiplier_8bit'.
Removed a total of 0 cells.

33.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \multiplier_8bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

33.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \multiplier_8bit.
Performed a total of 0 changes.

33.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\multiplier_8bit'.
Removed a total of 0 cells.

33.6. Executing OPT_DFF pass (perform DFF optimizations).

33.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \multiplier_8bit..
Removed 24 unused cells and 110 unused wires.
<suppressed ~25 debug messages>

33.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module multiplier_8bit.

33.9. Rerunning OPT passes. (Maybe there is more to do..)

33.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \multiplier_8bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

33.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \multiplier_8bit.
Performed a total of 0 changes.

33.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\multiplier_8bit'.
Removed a total of 0 cells.

33.13. Executing OPT_DFF pass (perform DFF optimizations).

33.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \multiplier_8bit..

33.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module multiplier_8bit.

33.16. Finished OPT passes. (There is nothing left to do.)

34. Executing ABC pass (technology mapping using ABC).

34.1. Extracting gate netlist of module `\multiplier_8bit' to `<abc-temp-dir>/input.blif'..
Extracted 347 gates and 363 wires to a netlist network with 16 inputs and 16 outputs.

34.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + source /home/users/aram/Workspace/yosys_verific_rs/scripts/synth/abc/abc_base6.a21.scr 
ABC: netlist  : i/o =     16/     16  and =     977  lev =   41 (22.88)  mem = 0.01 MB
ABC: Mapping (K=6)  :  lut =    119  edge =     504  lev =   11 (6.62)  mem = 0.01 MB
ABC: netlist  : i/o =     16/     16  and =    1072  lev =   42 (23.31)  mem = 0.02 MB
ABC: Mapping (K=6)  :  lut =    107  edge =     463  lev =   13 (7.62)  mem = 0.01 MB
ABC: netlist  : i/o =     16/     16  and =    1110  lev =   41 (22.94)  mem = 0.02 MB
ABC: Mapping (K=6)  :  lut =    101  edge =     468  lev =   11 (5.94)  mem = 0.01 MB
ABC: netlist  : i/o =     16/     16  and =     781  lev =   33 (19.62)  mem = 0.01 MB
ABC: Mapping (K=6)  :  lut =    100  edge =     467  lev =   11 (6.00)  mem = 0.01 MB
ABC: netlist  : i/o =     16/     16  and =    1064  lev =   42 (23.25)  mem = 0.02 MB
ABC: Mapping (K=6)  :  lut =    103  edge =     480  lev =   11 (6.06)  mem = 0.01 MB
ABC: netlist  : i/o =     16/     16  and =    1083  lev =   40 (22.56)  mem = 0.02 MB
ABC: Mapping (K=6)  :  lut =     95  edge =     463  lev =   10 (5.38)  mem = 0.01 MB
ABC: netlist  : i/o =     16/     16  and =    1115  lev =   40 (22.56)  mem = 0.02 MB
ABC: Mapping (K=6)  :  lut =     94  edge =     461  lev =   10 (5.38)  mem = 0.01 MB
ABC: netlist  : i/o =     16/     16  and =    1166  lev =   45 (24.56)  mem = 0.02 MB
ABC: Mapping (K=6)  :  lut =     99  edge =     481  lev =   10 (5.38)  mem = 0.01 MB
ABC: netlist  : i/o =     16/     16  and =     906  lev =   34 (19.94)  mem = 0.02 MB
ABC: Mapping (K=6)  :  lut =     98  edge =     480  lev =   11 (6.00)  mem = 0.01 MB
ABC: netlist  : i/o =     16/     16  and =    1113  lev =   39 (22.50)  mem = 0.02 MB
ABC: Mapping (K=6)  :  lut =     97  edge =     473  lev =   10 (5.38)  mem = 0.01 MB
ABC: netlist  : i/o =     16/     16  and =    1128  lev =   46 (25.31)  mem = 0.02 MB
ABC: Mapping (K=6)  :  lut =     96  edge =     474  lev =   10 (5.38)  mem = 0.01 MB
ABC: netlist  : i/o =     16/     16  and =    1137  lev =   40 (23.00)  mem = 0.02 MB
ABC: Mapping (K=6)  :  lut =     96  edge =     474  lev =   10 (5.38)  mem = 0.01 MB
ABC: netlist  : i/o =     16/     16  and =    1141  lev =   40 (23.00)  mem = 0.02 MB
ABC: Mapping (K=6)  :  lut =     95  edge =     475  lev =   10 (5.38)  mem = 0.01 MB
ABC: netlist  : i/o =     16/     16  and =    1115  lev =   40 (22.56)  mem = 0.02 MB
ABC: Mapping (K=6)  :  lut =     94  edge =     461  lev =   10 (5.38)  mem = 0.01 MB
ABC: netlist  : i/o =     16/     16  and =    1115  lev =   40 (22.56)  mem = 0.02 MB
ABC: Mapping (K=6)  :  lut =     94  edge =     461  lev =   10 (5.38)  mem = 0.01 MB
ABC: netlist  : i/o =     16/     16  and =    1160  lev =   40 (22.56)  mem = 0.02 MB
ABC: Mapping (K=6)  :  lut =     94  edge =     461  lev =   10 (5.38)  mem = 0.01 MB
ABC: + write_blif <abc-temp-dir>/output.blif 

34.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:       94
ABC RESULTS:        internal signals:      331
ABC RESULTS:           input signals:       16
ABC RESULTS:          output signals:       16
Removing temp directory.

35. Executing OPT pass (performing simple optimizations).

35.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module multiplier_8bit.

35.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\multiplier_8bit'.
Removed a total of 0 cells.

35.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \multiplier_8bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

35.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \multiplier_8bit.
Performed a total of 0 changes.

35.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\multiplier_8bit'.
Removed a total of 0 cells.

35.6. Executing OPT_DFF pass (perform DFF optimizations).

35.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \multiplier_8bit..
Removed 0 unused cells and 97 unused wires.
<suppressed ~1 debug messages>

35.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module multiplier_8bit.

35.9. Rerunning OPT passes. (Maybe there is more to do..)

35.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \multiplier_8bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

35.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \multiplier_8bit.
Performed a total of 0 changes.

35.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\multiplier_8bit'.
Removed a total of 0 cells.

35.13. Executing OPT_DFF pass (perform DFF optimizations).

35.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \multiplier_8bit..

35.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module multiplier_8bit.

35.16. Finished OPT passes. (There is nothing left to do.)

36. Executing HIERARCHY pass (managing design hierarchy).

36.1. Analyzing design hierarchy..
Top module:  \multiplier_8bit

36.2. Analyzing design hierarchy..
Top module:  \multiplier_8bit
Removed 0 unused modules.

37. Printing statistics.

=== multiplier_8bit ===

   Number of wires:                 81
   Number of wire bits:            110
   Number of public wires:           3
   Number of public wire bits:      32
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 94
     $lut                           94

38. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \multiplier_8bit..

39. Executing BLIF backend.

End of script. Logfile hash: 3c0f969363, CPU: user 0.26s system 0.01s, MEM: 17.39 MB peak
Yosys 0.14+36 (git sha1 15a4e900b, gcc 7.1.0 -fPIC -Os)
Time spent: 92% 1x abc (3 sec), 2% 23x opt_expr (0 sec), ...
