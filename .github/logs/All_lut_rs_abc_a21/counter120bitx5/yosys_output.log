
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.14+36 (git sha1 15a4e900b, gcc 7.1.0 -fPIC -Os)


-- Executing script file `yosys.ys' --

1. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Jan22_SW_Release, released at Sat Jan 29 02:42:49 2022.

2. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Jan22_SW_Release, released at Sat Jan 29 02:42:49 2022.
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'counter120bitx5.v'

3. Executing HIERARCHY pass (managing design hierarchy).
VERIFIC-INFO [VERI-1018] counter120bitx5.v:7: compiling module 'counter120bitx5'
Importing module counter120bitx5.

3.1. Analyzing design hierarchy..
Top module:  \counter120bitx5

3.2. Analyzing design hierarchy..
Top module:  \counter120bitx5
Removed 0 unused modules.

4. Executing PROC pass (convert processes to netlists).

4.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

4.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

4.4. Executing PROC_INIT pass (extract init attributes).

4.5. Executing PROC_ARST pass (detect async resets in processes).

4.6. Executing PROC_MUX pass (convert decision trees to multiplexers).

4.7. Executing PROC_DLATCH pass (convert process syncs to latches).

4.8. Executing PROC_DFF pass (convert process syncs to FFs).

4.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

4.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module counter120bitx5.

5. Executing FLATTEN pass (flatten design).

6. Executing TRIBUF pass.

7. Executing OPT_EXPR pass (perform const folding).
Optimizing module counter120bitx5.

8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter120bitx5..
Removed 0 unused cells and 13 unused wires.
<suppressed ~11 debug messages>

9. Executing CHECK pass (checking for obvious problems).
Checking module counter120bitx5...
Found and reported 0 problems.

10. Executing DEMINOUT pass (demote inout ports to input or output).

11. Executing OPT pass (performing simple optimizations).

11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module counter120bitx5.

11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter120bitx5'.
Removed a total of 0 cells.

11.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \counter120bitx5..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

11.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \counter120bitx5.
Performed a total of 0 changes.

11.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter120bitx5'.
Removed a total of 0 cells.

11.6. Executing OPT_DFF pass (perform DFF optimizations).
Removing never-active async load on $verific$cnt5_reg$counter120bitx5.v:98$50 ($aldff) from module counter120bitx5.
Removing never-active async load on $verific$cnt4_reg$counter120bitx5.v:84$47 ($aldff) from module counter120bitx5.
Removing never-active async load on $verific$cnt3_reg$counter120bitx5.v:71$43 ($aldff) from module counter120bitx5.
Removing never-active async load on $verific$cnt2_reg$counter120bitx5.v:58$39 ($aldff) from module counter120bitx5.
Removing never-active async load on $verific$cnt1_reg$counter120bitx5.v:43$35 ($aldff) from module counter120bitx5.

11.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter120bitx5..

11.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module counter120bitx5.

11.9. Rerunning OPT passes. (Maybe there is more to do..)

11.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \counter120bitx5..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

11.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \counter120bitx5.
Performed a total of 0 changes.

11.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter120bitx5'.
Removed a total of 0 cells.

11.13. Executing OPT_DFF pass (perform DFF optimizations).

11.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter120bitx5..

11.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module counter120bitx5.

11.16. Finished OPT passes. (There is nothing left to do.)

12. Executing FSM pass (extract and optimize FSM).

12.1. Executing FSM_DETECT pass (finding FSMs in design).

12.2. Executing FSM_EXTRACT pass (extracting FSM from design).

12.3. Executing FSM_OPT pass (simple optimizations of FSMs).

12.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter120bitx5..

12.5. Executing FSM_OPT pass (simple optimizations of FSMs).

12.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

12.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

12.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

13. Executing OPT pass (performing simple optimizations).

13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module counter120bitx5.

13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter120bitx5'.
Removed a total of 0 cells.

13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \counter120bitx5..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \counter120bitx5.
Performed a total of 0 changes.

13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter120bitx5'.
Removed a total of 0 cells.

13.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $verific$cnt5_reg$counter120bitx5.v:98$50 ($dff) from module counter120bitx5 (D = $verific$n2651$21, Q = \cnt5, rval = 121'0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000).
Adding SRST signal on $verific$cnt4_reg$counter120bitx5.v:84$47 ($dff) from module counter120bitx5 (D = $verific$n2039$17, Q = \cnt4, rval = 121'0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000).
Adding SRST signal on $verific$cnt3_reg$counter120bitx5.v:71$43 ($dff) from module counter120bitx5 (D = $verific$n1427$13, Q = \cnt3, rval = 121'0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000).
Adding SRST signal on $verific$cnt2_reg$counter120bitx5.v:58$39 ($dff) from module counter120bitx5 (D = $verific$n815$9, Q = \cnt2, rval = 121'0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000).
Adding SRST signal on $verific$cnt1_reg$counter120bitx5.v:43$35 ($dff) from module counter120bitx5 (D = $verific$n203$5, Q = \cnt1, rval = 121'0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000).

13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter120bitx5..
Removed 5 unused cells and 5 unused wires.
<suppressed ~6 debug messages>

13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module counter120bitx5.

13.9. Rerunning OPT passes. (Maybe there is more to do..)

13.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \counter120bitx5..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

13.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \counter120bitx5.
Performed a total of 0 changes.

13.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter120bitx5'.
Removed a total of 0 cells.

13.13. Executing OPT_DFF pass (perform DFF optimizations).

13.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter120bitx5..

13.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module counter120bitx5.

13.16. Finished OPT passes. (There is nothing left to do.)

14. Executing WREDUCE pass (reducing word size of cells).
Removed top 120 bits (of 121) from port B of cell counter120bitx5.$verific$add_10$counter120bitx5.v:41$32 ($add).
Removed top 120 bits (of 121) from port B of cell counter120bitx5.$verific$add_16$counter120bitx5.v:56$36 ($add).
Removed top 120 bits (of 121) from port B of cell counter120bitx5.$verific$add_22$counter120bitx5.v:69$40 ($add).
Removed top 120 bits (of 121) from port B of cell counter120bitx5.$verific$add_28$counter120bitx5.v:82$44 ($add).
Removed top 120 bits (of 121) from port B of cell counter120bitx5.$verific$add_34$counter120bitx5.v:96$48 ($add).

15. Executing PEEPOPT pass (run peephole optimizers).

16. Executing PMUXTREE pass.

17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter120bitx5..

18. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module counter120bitx5:
  creating $macc model for $verific$add_10$counter120bitx5.v:41$32 ($add).
  creating $macc model for $verific$add_16$counter120bitx5.v:56$36 ($add).
  creating $macc model for $verific$add_22$counter120bitx5.v:69$40 ($add).
  creating $macc model for $verific$add_28$counter120bitx5.v:82$44 ($add).
  creating $macc model for $verific$add_34$counter120bitx5.v:96$48 ($add).
  creating $alu model for $macc $verific$add_34$counter120bitx5.v:96$48.
  creating $alu model for $macc $verific$add_28$counter120bitx5.v:82$44.
  creating $alu model for $macc $verific$add_22$counter120bitx5.v:69$40.
  creating $alu model for $macc $verific$add_16$counter120bitx5.v:56$36.
  creating $alu model for $macc $verific$add_10$counter120bitx5.v:41$32.
  creating $alu cell for $verific$add_10$counter120bitx5.v:41$32: $auto$alumacc.cc:485:replace_alu$57
  creating $alu cell for $verific$add_16$counter120bitx5.v:56$36: $auto$alumacc.cc:485:replace_alu$60
  creating $alu cell for $verific$add_22$counter120bitx5.v:69$40: $auto$alumacc.cc:485:replace_alu$63
  creating $alu cell for $verific$add_28$counter120bitx5.v:82$44: $auto$alumacc.cc:485:replace_alu$66
  creating $alu cell for $verific$add_34$counter120bitx5.v:96$48: $auto$alumacc.cc:485:replace_alu$69
  created 5 $alu and 0 $macc cells.

19. Executing OPT pass (performing simple optimizations).

19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module counter120bitx5.

19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter120bitx5'.
Removed a total of 0 cells.

19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \counter120bitx5..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \counter120bitx5.
Performed a total of 0 changes.

19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter120bitx5'.
Removed a total of 0 cells.

19.6. Executing OPT_DFF pass (perform DFF optimizations).

19.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter120bitx5..

19.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module counter120bitx5.

19.9. Finished OPT passes. (There is nothing left to do.)

20. Executing MEMORY pass.

20.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

20.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

20.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

20.4. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

20.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter120bitx5..

20.6. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

20.7. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

20.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter120bitx5..

20.9. Executing MEMORY_COLLECT pass (generating $mem cells).

21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter120bitx5..

22. Executing OPT_EXPR pass (perform const folding).
Optimizing module counter120bitx5.

23. Executing SIMPLEMAP pass (map simple cells to gate primitives).
Mapping counter120bitx5.$auto$ff.cc:262:slice$52 ($sdff).
Mapping counter120bitx5.$auto$ff.cc:262:slice$53 ($sdff).
Mapping counter120bitx5.$auto$ff.cc:262:slice$54 ($sdff).
Mapping counter120bitx5.$auto$ff.cc:262:slice$55 ($sdff).
Mapping counter120bitx5.$auto$ff.cc:262:slice$56 ($sdff).

24. Executing OPT_EXPR pass (perform const folding).
Optimizing module counter120bitx5.

25. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter120bitx5'.
Removed a total of 0 cells.

26. Executing OPT_DFF pass (perform DFF optimizations).

27. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter120bitx5..

28. Executing OPT pass (performing simple optimizations).

28.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module counter120bitx5.

28.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter120bitx5'.
Removed a total of 0 cells.

28.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \counter120bitx5..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

28.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \counter120bitx5.
Performed a total of 0 changes.

28.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter120bitx5'.
Removed a total of 0 cells.

28.6. Executing OPT_DFF pass (perform DFF optimizations).

28.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter120bitx5..

28.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module counter120bitx5.

28.9. Finished OPT passes. (There is nothing left to do.)

29. Executing OPT pass (performing simple optimizations).

29.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module counter120bitx5.

29.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter120bitx5'.
Removed a total of 0 cells.

29.3. Executing OPT_DFF pass (perform DFF optimizations).

29.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter120bitx5..

29.5. Finished fast OPT passes.

30. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

31. Executing OPT pass (performing simple optimizations).

31.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module counter120bitx5.

31.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter120bitx5'.
Removed a total of 0 cells.

31.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \counter120bitx5..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

31.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \counter120bitx5.
Performed a total of 0 changes.

31.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter120bitx5'.
Removed a total of 0 cells.

31.6. Executing OPT_SHARE pass.

31.7. Executing OPT_DFF pass (perform DFF optimizations).

31.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter120bitx5..

31.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module counter120bitx5.

31.10. Finished OPT passes. (There is nothing left to do.)

32. Executing TECHMAP pass (map to technology primitives).

32.1. Executing Verilog-2005 frontend: /home/users/aram/Workspace/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/aram/Workspace/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

32.2. Continuing TECHMAP pass.
Using template $paramod$92770b2082a374a9796ba79717ad10ca98abab30\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $and.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000001111001 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $or.
No more expansions possible.
<suppressed ~3216 debug messages>

33. Executing OPT pass (performing simple optimizations).

33.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module counter120bitx5.
<suppressed ~3535 debug messages>

33.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter120bitx5'.
<suppressed ~15 debug messages>
Removed a total of 5 cells.

33.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \counter120bitx5..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

33.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \counter120bitx5.
Performed a total of 0 changes.

33.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter120bitx5'.
Removed a total of 0 cells.

33.6. Executing OPT_DFF pass (perform DFF optimizations).

33.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter120bitx5..
Removed 605 unused cells and 1835 unused wires.
<suppressed ~606 debug messages>

33.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module counter120bitx5.

33.9. Rerunning OPT passes. (Maybe there is more to do..)

33.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \counter120bitx5..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

33.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \counter120bitx5.
Performed a total of 0 changes.

33.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter120bitx5'.
Removed a total of 0 cells.

33.13. Executing OPT_DFF pass (perform DFF optimizations).

33.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter120bitx5..

33.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module counter120bitx5.

33.16. Finished OPT passes. (There is nothing left to do.)

34. Executing ABC pass (technology mapping using ABC).

34.1. Extracting gate netlist of module `\counter120bitx5' to `<abc-temp-dir>/input.blif'..
Extracted 1750 gates and 2355 wires to a netlist network with 605 inputs and 605 outputs.

34.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + source /home/users/aram/Workspace/yosys_verific_rs/scripts/synth/abc/abc_base6.a21.scr 
ABC: netlist  : i/o =    605/    605  and =    4214  lev =   33 (21.45)  mem = 0.08 MB
ABC: Mapping (K=6)  :  lut =    913  edge =    3221  lev =    9 (6.40)  mem = 0.04 MB
ABC: netlist  : i/o =    605/    605  and =    4236  lev =   59 (28.60)  mem = 0.08 MB
ABC: Mapping (K=6)  :  lut =    842  edge =    3112  lev =   16 (8.29)  mem = 0.04 MB
ABC: netlist  : i/o =    605/    605  and =    4134  lev =   93 (41.11)  mem = 0.08 MB
ABC: Mapping (K=6)  :  lut =    804  edge =    2978  lev =   23 (11.32)  mem = 0.04 MB
ABC: netlist  : i/o =    605/    605  and =    4177  lev =   61 (27.66)  mem = 0.08 MB
ABC: Mapping (K=6)  :  lut =    782  edge =    2881  lev =   29 (13.46)  mem = 0.04 MB
ABC: netlist  : i/o =    605/    605  and =    4163  lev =  118 (51.54)  mem = 0.08 MB
ABC: Mapping (K=6)  :  lut =    826  edge =    3064  lev =   30 (13.84)  mem = 0.04 MB
ABC: netlist  : i/o =    605/    605  and =    4115  lev =  116 (53.31)  mem = 0.10 MB
ABC: Mapping (K=6)  :  lut =    777  edge =    2954  lev =   30 (13.98)  mem = 0.04 MB
ABC: netlist  : i/o =    605/    605  and =    4084  lev =  116 (54.73)  mem = 0.10 MB
ABC: Mapping (K=6)  :  lut =    767  edge =    2912  lev =   30 (14.56)  mem = 0.04 MB
ABC: netlist  : i/o =    605/    605  and =    4112  lev =  117 (55.76)  mem = 0.10 MB
ABC: Mapping (K=6)  :  lut =    759  edge =    2887  lev =   31 (14.75)  mem = 0.04 MB
ABC: netlist  : i/o =    605/    605  and =    4202  lev =   67 (32.43)  mem = 0.10 MB
ABC: Mapping (K=6)  :  lut =    754  edge =    2885  lev =   32 (15.20)  mem = 0.04 MB
ABC: netlist  : i/o =    605/    605  and =    4120  lev =  121 (58.30)  mem = 0.10 MB
ABC: Mapping (K=6)  :  lut =    756  edge =    2896  lev =   33 (15.07)  mem = 0.04 MB
ABC: netlist  : i/o =    605/    605  and =    4145  lev =  121 (57.94)  mem = 0.10 MB
ABC: Mapping (K=6)  :  lut =    757  edge =    2898  lev =   32 (15.04)  mem = 0.04 MB
ABC: netlist  : i/o =    605/    605  and =    4195  lev =  121 (58.10)  mem = 0.10 MB
ABC: Mapping (K=6)  :  lut =    754  edge =    2910  lev =   31 (14.85)  mem = 0.04 MB
ABC: netlist  : i/o =    605/    605  and =    4204  lev =  121 (58.09)  mem = 0.10 MB
ABC: Mapping (K=6)  :  lut =    754  edge =    2910  lev =   31 (14.85)  mem = 0.04 MB
ABC: netlist  : i/o =    605/    605  and =    4195  lev =  121 (58.10)  mem = 0.08 MB
ABC: Mapping (K=6)  :  lut =    754  edge =    2910  lev =   31 (14.85)  mem = 0.04 MB
ABC: netlist  : i/o =    605/    605  and =    4195  lev =  121 (58.10)  mem = 0.10 MB
ABC: Mapping (K=6)  :  lut =    754  edge =    2910  lev =   31 (14.85)  mem = 0.04 MB
ABC: netlist  : i/o =    605/    605  and =    4204  lev =  121 (57.72)  mem = 0.08 MB
ABC: Mapping (K=6)  :  lut =    754  edge =    2910  lev =   31 (14.85)  mem = 0.04 MB
ABC: + write_blif <abc-temp-dir>/output.blif 

34.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:      759
ABC RESULTS:        internal signals:     1145
ABC RESULTS:           input signals:      605
ABC RESULTS:          output signals:      605
Removing temp directory.

35. Executing OPT pass (performing simple optimizations).

35.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module counter120bitx5.

35.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter120bitx5'.
Removed a total of 0 cells.

35.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \counter120bitx5..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

35.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \counter120bitx5.
Performed a total of 0 changes.

35.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter120bitx5'.
Removed a total of 0 cells.

35.6. Executing OPT_DFF pass (perform DFF optimizations).

35.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter120bitx5..
Removed 0 unused cells and 1765 unused wires.
<suppressed ~1 debug messages>

35.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module counter120bitx5.

35.9. Rerunning OPT passes. (Maybe there is more to do..)

35.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \counter120bitx5..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

35.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \counter120bitx5.
Performed a total of 0 changes.

35.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter120bitx5'.
Removed a total of 0 cells.

35.13. Executing OPT_DFF pass (perform DFF optimizations).

35.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter120bitx5..

35.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module counter120bitx5.

35.16. Finished OPT passes. (There is nothing left to do.)

36. Executing HIERARCHY pass (managing design hierarchy).

36.1. Analyzing design hierarchy..
Top module:  \counter120bitx5

36.2. Analyzing design hierarchy..
Top module:  \counter120bitx5
Removed 0 unused modules.

37. Printing statistics.

=== counter120bitx5 ===

   Number of wires:                180
   Number of wire bits:           2045
   Number of public wires:          16
   Number of public wire bits:     681
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1364
     $_SDFF_PP0_                   605
     $lut                          759

38. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter120bitx5..

39. Executing BLIF backend.

End of script. Logfile hash: 236cdc76e3, CPU: user 2.61s system 0.03s, MEM: 44.38 MB peak
Yosys 0.14+36 (git sha1 15a4e900b, gcc 7.1.0 -fPIC -Os)
Time spent: 78% 1x abc (8 sec), 6% 14x opt_dff (0 sec), ...
