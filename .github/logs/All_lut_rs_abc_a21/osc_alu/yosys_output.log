
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.14+36 (git sha1 15a4e900b, gcc 7.1.0 -fPIC -Os)


-- Executing script file `yosys.ys' --

1. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Jan22_SW_Release, released at Sat Jan 29 02:42:49 2022.

2. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Jan22_SW_Release, released at Sat Jan 29 02:42:49 2022.
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'oc8051_alu.v'
VERIFIC-INFO [VERI-1328] oc8051_alu.v:50: analyzing included file 'oc8051_defines.v'
VERIFIC-INFO [VERI-2320] oc8051_alu.v:50: back to file 'oc8051_alu.v'
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'oc8051_defines.v'
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'oc8051_divide.v'
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'oc8051_multiply.v'
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'oc8051_timescale.v'

3. Executing HIERARCHY pass (managing design hierarchy).
VERIFIC-INFO [VERI-1018] oc8051_alu.v:54: compiling module 'top'
VERIFIC-INFO [VERI-1018] oc8051_multiply.v:53: compiling module 'oc8051_multiply'
VERIFIC-INFO [VERI-1018] oc8051_divide.v:51: compiling module 'oc8051_divide'
VERIFIC-WARNING [VERI-2580] oc8051_divide.v:177: latch inferred for net 'div2[8]'
VERIFIC-WARNING [VERI-2580] oc8051_alu.v:308: latch inferred for net 'da_tmp'
Importing module top.
Importing module oc8051_divide.
Importing module oc8051_multiply.

3.1. Analyzing design hierarchy..
Top module:  \top
Used module:     \oc8051_divide
Used module:     \oc8051_multiply

3.2. Analyzing design hierarchy..
Top module:  \top
Used module:     \oc8051_divide
Used module:     \oc8051_multiply
Removed 0 unused modules.

4. Executing PROC pass (convert processes to netlists).

4.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

4.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

4.4. Executing PROC_INIT pass (extract init attributes).

4.5. Executing PROC_ARST pass (detect async resets in processes).

4.6. Executing PROC_MUX pass (convert decision trees to multiplexers).

4.7. Executing PROC_DLATCH pass (convert process syncs to latches).

4.8. Executing PROC_DFF pass (convert process syncs to FFs).

4.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

4.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module oc8051_multiply.
<suppressed ~1 debug messages>
Optimizing module oc8051_divide.
<suppressed ~7 debug messages>
Optimizing module top.
<suppressed ~72 debug messages>

5. Executing FLATTEN pass (flatten design).
Deleting now unused module oc8051_multiply.
Deleting now unused module oc8051_divide.
<suppressed ~2 debug messages>

6. Executing TRIBUF pass.

7. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 35 unused cells and 364 unused wires.
<suppressed ~210 debug messages>

9. Executing CHECK pass (checking for obvious problems).
Checking module top...
Found and reported 0 problems.

10. Executing DEMINOUT pass (demote inout ports to input or output).

11. Executing OPT pass (performing simple optimizations).

11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

11.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~19 debug messages>

11.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

11.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

11.6. Executing OPT_DFF pass (perform DFF optimizations).

11.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

11.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

11.9. Finished OPT passes. (There is nothing left to do.)

12. Executing FSM pass (extract and optimize FSM).

12.1. Executing FSM_DETECT pass (finding FSMs in design).

12.2. Executing FSM_EXTRACT pass (extracting FSM from design).

12.3. Executing FSM_OPT pass (simple optimizations of FSMs).

12.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

12.5. Executing FSM_OPT pass (simple optimizations of FSMs).

12.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

12.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

12.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

13. Executing OPT pass (performing simple optimizations).

13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~19 debug messages>

13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

13.6. Executing OPT_DFF pass (perform DFF optimizations).

13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

13.9. Finished OPT passes. (There is nothing left to do.)

14. Executing WREDUCE pass (reducing word size of cells).
Removed top 4 bits (of 5) from port B of cell top.$verific$add_14$oc8051_alu.v:120$207 ($add).
Removed top 3 bits (of 4) from port B of cell top.$verific$add_24$oc8051_alu.v:125$225 ($add).
Removed top 1 bits (of 2) from port B of cell top.$verific$add_30$oc8051_alu.v:130$231 ($add).
Removed top 7 bits (of 8) from port B of cell top.$verific$add_33$oc8051_alu.v:133$233 ($add).
Removed top 1 bits (of 5) from port B of cell top.$verific$sub_48$oc8051_alu.v:145$237 ($sub).
Removed top 4 bits (of 5) from port B of cell top.$verific$sub_49$oc8051_alu.v:145$238 ($sub).
Removed top 1 bits (of 4) from port B of cell top.$verific$sub_59$oc8051_alu.v:150$242 ($sub).
Removed top 3 bits (of 4) from port B of cell top.$verific$sub_60$oc8051_alu.v:150$243 ($sub).
Removed top 1 bits (of 2) from port B of cell top.$verific$sub_66$oc8051_alu.v:155$247 ($sub).
Removed top 1 bits (of 2) from port B of cell top.$verific$sub_67$oc8051_alu.v:155$248 ($sub).
Removed top 1 bits (of 3) from port B of cell top.$verific$add_86$oc8051_alu.v:192$258 ($add).
Removed top 2 bits (of 4) from port B of cell top.$verific$add_100$oc8051_alu.v:195$266 ($add).
Removed top 4 bits (of 5) from port B of cell top.$verific$add_101$oc8051_alu.v:195$267 ($add).
Removed top 4 bits (of 5) from port B of cell top.$verific$add_103$oc8051_alu.v:196$270 ($add).
Removed top 8 bits (of 16) from port B of cell top.$verific$add_142$oc8051_alu.v:278$297 ($add).
Removed top 1 bits (of 9) from port B of cell top.$flatten\oc8051_div1.$verific$sub_179$oc8051_divide.v:166$753 ($sub).
Removed top 1 bits (of 8) from mux cell top.$flatten\oc8051_div1.$verific$mux_162$oc8051_divide.v:161$741 ($mux).
Removed top 1 bits (of 9) from port B of cell top.$flatten\oc8051_div1.$verific$sub_157$oc8051_divide.v:156$740 ($sub).
Removed top 1 bits (of 8) from mux cell top.$flatten\oc8051_div1.$verific$mux_140$oc8051_divide.v:151$728 ($mux).
Removed top 1 bits (of 9) from port B of cell top.$flatten\oc8051_div1.$verific$sub_135$oc8051_divide.v:146$727 ($sub).
Removed top 1 bits (of 8) from mux cell top.$flatten\oc8051_div1.$verific$mux_118$oc8051_divide.v:141$713 ($mux).
Removed top 1 bits (of 9) from port B of cell top.$flatten\oc8051_div1.$verific$sub_113$oc8051_divide.v:136$712 ($sub).
Removed top 1 bits (of 8) from mux cell top.$flatten\oc8051_div1.$verific$mux_96$oc8051_divide.v:131$697 ($mux).
Removed top 1 bits (of 9) from port B of cell top.$flatten\oc8051_div1.$verific$sub_91$oc8051_divide.v:126$696 ($sub).
Removed top 1 bits (of 8) from mux cell top.$flatten\oc8051_div1.$verific$mux_74$oc8051_divide.v:121$680 ($mux).
Removed top 1 bits (of 9) from port B of cell top.$flatten\oc8051_div1.$verific$sub_69$oc8051_divide.v:116$679 ($sub).
Removed top 1 bits (of 8) from mux cell top.$flatten\oc8051_div1.$verific$mux_52$oc8051_divide.v:111$662 ($mux).
Removed top 1 bits (of 9) from port B of cell top.$flatten\oc8051_div1.$verific$sub_47$oc8051_divide.v:106$661 ($sub).
Removed top 1 bits (of 8) from mux cell top.$flatten\oc8051_div1.$verific$mux_30$oc8051_divide.v:100$637 ($mux).
Removed top 1 bits (of 9) from port B of cell top.$flatten\oc8051_div1.$verific$sub_25$oc8051_divide.v:95$633 ($sub).
Removed top 1 bits (of 8) from wire top.$flatten\oc8051_div1.$verific$n137$568.
Removed top 1 bits (of 8) from wire top.$flatten\oc8051_div1.$verific$n201$573.
Removed top 1 bits (of 8) from wire top.$flatten\oc8051_div1.$verific$n265$578.
Removed top 1 bits (of 8) from wire top.$flatten\oc8051_div1.$verific$n329$583.
Removed top 1 bits (of 8) from wire top.$flatten\oc8051_div1.$verific$n393$588.
Removed top 1 bits (of 8) from wire top.$flatten\oc8051_div1.$verific$n457$593.
Removed top 1 bits (of 8) from wire top.$flatten\oc8051_div1.$verific$n73$563.

15. Executing PEEPOPT pass (run peephole optimizers).

16. Executing PMUXTREE pass.

17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 4 unused cells and 25 unused wires.
<suppressed ~5 debug messages>

18. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module top:
  creating $macc model for $flatten\oc8051_div1.$verific$sub_113$oc8051_divide.v:136$712 ($sub).
  creating $macc model for $flatten\oc8051_div1.$verific$sub_135$oc8051_divide.v:146$727 ($sub).
  creating $macc model for $flatten\oc8051_div1.$verific$sub_157$oc8051_divide.v:156$740 ($sub).
  creating $macc model for $flatten\oc8051_div1.$verific$sub_179$oc8051_divide.v:166$753 ($sub).
  creating $macc model for $flatten\oc8051_div1.$verific$sub_25$oc8051_divide.v:95$633 ($sub).
  creating $macc model for $flatten\oc8051_div1.$verific$sub_47$oc8051_divide.v:106$661 ($sub).
  creating $macc model for $flatten\oc8051_div1.$verific$sub_69$oc8051_divide.v:116$679 ($sub).
  creating $macc model for $flatten\oc8051_div1.$verific$sub_91$oc8051_divide.v:126$696 ($sub).
  creating $macc model for $flatten\oc8051_mul1.$verific$mult_3$oc8051_multiply.v:70$776 ($mul).
  creating $macc model for $verific$add_100$oc8051_alu.v:195$266 ($add).
  creating $macc model for $verific$add_101$oc8051_alu.v:195$267 ($add).
  creating $macc model for $verific$add_103$oc8051_alu.v:196$270 ($add).
  creating $macc model for $verific$add_13$oc8051_alu.v:120$206 ($add).
  creating $macc model for $verific$add_139$oc8051_alu.v:275$294 ($add).
  creating $macc model for $verific$add_14$oc8051_alu.v:120$207 ($add).
  creating $macc model for $verific$add_142$oc8051_alu.v:278$297 ($add).
  creating $macc model for $verific$add_23$oc8051_alu.v:125$224 ($add).
  creating $macc model for $verific$add_24$oc8051_alu.v:125$225 ($add).
  creating $macc model for $verific$add_29$oc8051_alu.v:130$230 ($add).
  creating $macc model for $verific$add_30$oc8051_alu.v:130$231 ($add).
  creating $macc model for $verific$add_33$oc8051_alu.v:133$233 ($add).
  creating $macc model for $verific$add_86$oc8051_alu.v:192$258 ($add).
  creating $macc model for $verific$sub_48$oc8051_alu.v:145$237 ($sub).
  creating $macc model for $verific$sub_49$oc8051_alu.v:145$238 ($sub).
  creating $macc model for $verific$sub_59$oc8051_alu.v:150$242 ($sub).
  creating $macc model for $verific$sub_60$oc8051_alu.v:150$243 ($sub).
  creating $macc model for $verific$sub_66$oc8051_alu.v:155$247 ($sub).
  creating $macc model for $verific$sub_67$oc8051_alu.v:155$248 ($sub).
  merging $macc model for $verific$sub_66$oc8051_alu.v:155$247 into $verific$sub_67$oc8051_alu.v:155$248.
  merging $macc model for $verific$sub_59$oc8051_alu.v:150$242 into $verific$sub_60$oc8051_alu.v:150$243.
  merging $macc model for $verific$sub_48$oc8051_alu.v:145$237 into $verific$sub_49$oc8051_alu.v:145$238.
  merging $macc model for $verific$add_29$oc8051_alu.v:130$230 into $verific$add_30$oc8051_alu.v:130$231.
  merging $macc model for $verific$add_23$oc8051_alu.v:125$224 into $verific$add_24$oc8051_alu.v:125$225.
  merging $macc model for $verific$add_13$oc8051_alu.v:120$206 into $verific$add_14$oc8051_alu.v:120$207.
  creating $alu model for $macc $verific$add_86$oc8051_alu.v:192$258.
  creating $alu model for $macc $verific$add_33$oc8051_alu.v:133$233.
  creating $alu model for $macc $verific$add_30$oc8051_alu.v:130$231.
  creating $alu model for $macc $verific$add_24$oc8051_alu.v:125$225.
  creating $alu model for $macc $verific$add_142$oc8051_alu.v:278$297.
  creating $alu model for $macc $verific$add_14$oc8051_alu.v:120$207.
  creating $alu model for $macc $verific$add_139$oc8051_alu.v:275$294.
  creating $alu model for $macc $verific$add_103$oc8051_alu.v:196$270.
  creating $alu model for $macc $verific$add_101$oc8051_alu.v:195$267.
  creating $alu model for $macc $verific$add_100$oc8051_alu.v:195$266.
  creating $alu model for $macc $flatten\oc8051_div1.$verific$sub_91$oc8051_divide.v:126$696.
  creating $alu model for $macc $flatten\oc8051_div1.$verific$sub_69$oc8051_divide.v:116$679.
  creating $alu model for $macc $flatten\oc8051_div1.$verific$sub_47$oc8051_divide.v:106$661.
  creating $alu model for $macc $flatten\oc8051_div1.$verific$sub_25$oc8051_divide.v:95$633.
  creating $alu model for $macc $flatten\oc8051_div1.$verific$sub_179$oc8051_divide.v:166$753.
  creating $alu model for $macc $flatten\oc8051_div1.$verific$sub_157$oc8051_divide.v:156$740.
  creating $alu model for $macc $flatten\oc8051_div1.$verific$sub_135$oc8051_divide.v:146$727.
  creating $alu model for $macc $flatten\oc8051_div1.$verific$sub_113$oc8051_divide.v:136$712.
  creating $macc cell for $verific$sub_60$oc8051_alu.v:150$243: $auto$alumacc.cc:365:replace_macc$803
  creating $macc cell for $flatten\oc8051_mul1.$verific$mult_3$oc8051_multiply.v:70$776: $auto$alumacc.cc:365:replace_macc$804
  creating $macc cell for $verific$sub_49$oc8051_alu.v:145$238: $auto$alumacc.cc:365:replace_macc$805
  creating $macc cell for $verific$sub_67$oc8051_alu.v:155$248: $auto$alumacc.cc:365:replace_macc$806
  creating $alu model for $flatten\oc8051_div1.$verific$LessThan_5$oc8051_divide.v:79$615 ($lt): new $alu
  creating $alu model for $verific$LessThan_84$oc8051_alu.v:192$256 ($lt): new $alu
  creating $alu model for $verific$LessThan_98$oc8051_alu.v:195$264 ($lt): new $alu
  creating $alu model for $flatten\oc8051_div1.$verific$equal_4$oc8051_divide.v:74$614 ($eq): merged with $flatten\oc8051_div1.$verific$LessThan_5$oc8051_divide.v:79$615.
  creating $alu cell for $verific$LessThan_98$oc8051_alu.v:195$264: $auto$alumacc.cc:485:replace_alu$810
  creating $alu cell for $verific$LessThan_84$oc8051_alu.v:192$256: $auto$alumacc.cc:485:replace_alu$821
  creating $alu cell for $flatten\oc8051_div1.$verific$sub_113$oc8051_divide.v:136$712: $auto$alumacc.cc:485:replace_alu$832
  creating $alu cell for $flatten\oc8051_div1.$verific$sub_135$oc8051_divide.v:146$727: $auto$alumacc.cc:485:replace_alu$835
  creating $alu cell for $flatten\oc8051_div1.$verific$sub_157$oc8051_divide.v:156$740: $auto$alumacc.cc:485:replace_alu$838
  creating $alu cell for $flatten\oc8051_div1.$verific$sub_179$oc8051_divide.v:166$753: $auto$alumacc.cc:485:replace_alu$841
  creating $alu cell for $flatten\oc8051_div1.$verific$sub_25$oc8051_divide.v:95$633: $auto$alumacc.cc:485:replace_alu$844
  creating $alu cell for $flatten\oc8051_div1.$verific$sub_47$oc8051_divide.v:106$661: $auto$alumacc.cc:485:replace_alu$847
  creating $alu cell for $flatten\oc8051_div1.$verific$sub_69$oc8051_divide.v:116$679: $auto$alumacc.cc:485:replace_alu$850
  creating $alu cell for $flatten\oc8051_div1.$verific$sub_91$oc8051_divide.v:126$696: $auto$alumacc.cc:485:replace_alu$853
  creating $alu cell for $verific$add_100$oc8051_alu.v:195$266: $auto$alumacc.cc:485:replace_alu$856
  creating $alu cell for $verific$add_101$oc8051_alu.v:195$267: $auto$alumacc.cc:485:replace_alu$859
  creating $alu cell for $verific$add_103$oc8051_alu.v:196$270: $auto$alumacc.cc:485:replace_alu$862
  creating $alu cell for $flatten\oc8051_div1.$verific$LessThan_5$oc8051_divide.v:79$615, $flatten\oc8051_div1.$verific$equal_4$oc8051_divide.v:74$614: $auto$alumacc.cc:485:replace_alu$865
  creating $alu cell for $verific$add_139$oc8051_alu.v:275$294: $auto$alumacc.cc:485:replace_alu$876
  creating $alu cell for $verific$add_14$oc8051_alu.v:120$207: $auto$alumacc.cc:485:replace_alu$879
  creating $alu cell for $verific$add_142$oc8051_alu.v:278$297: $auto$alumacc.cc:485:replace_alu$882
  creating $alu cell for $verific$add_24$oc8051_alu.v:125$225: $auto$alumacc.cc:485:replace_alu$885
  creating $alu cell for $verific$add_30$oc8051_alu.v:130$231: $auto$alumacc.cc:485:replace_alu$888
  creating $alu cell for $verific$add_33$oc8051_alu.v:133$233: $auto$alumacc.cc:485:replace_alu$891
  creating $alu cell for $verific$add_86$oc8051_alu.v:192$258: $auto$alumacc.cc:485:replace_alu$894
  created 21 $alu and 4 $macc cells.

19. Executing OPT pass (performing simple optimizations).

19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~4 debug messages>

19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $auto$pmuxtree.cc:65:recursive_mux_generator$791.
    dead port 2/2 on $mux $auto$pmuxtree.cc:65:recursive_mux_generator$799.
Removed 2 multiplexer ports.
<suppressed ~19 debug messages>

19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

19.6. Executing OPT_DFF pass (perform DFF optimizations).

19.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 8 unused cells and 17 unused wires.
<suppressed ~9 debug messages>

19.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

19.9. Rerunning OPT passes. (Maybe there is more to do..)

19.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~19 debug messages>

19.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

19.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

19.13. Executing OPT_DFF pass (perform DFF optimizations).

19.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

19.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

19.16. Finished OPT passes. (There is nothing left to do.)

20. Executing MEMORY pass.

20.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

20.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

20.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

20.4. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

20.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

20.6. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

20.7. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

20.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

20.9. Executing MEMORY_COLLECT pass (generating $mem cells).

21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

22. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~4 debug messages>

23. Executing SIMPLEMAP pass (map simple cells to gate primitives).
Mapping top.$auto$alumacc.cc:67:get_gt$817 ($or).
Mapping top.$auto$alumacc.cc:67:get_gt$828 ($or).
Mapping top.$auto$alumacc.cc:67:get_gt$872 ($or).
Mapping top.$auto$alumacc.cc:68:get_gt$819 ($not).
Mapping top.$auto$alumacc.cc:68:get_gt$830 ($not).
Mapping top.$auto$alumacc.cc:75:get_eq$815 ($reduce_and).
Mapping top.$auto$alumacc.cc:75:get_eq$826 ($reduce_and).
Mapping top.$auto$alumacc.cc:75:get_eq$870 ($reduce_and).
Mapping top.$auto$alumacc.cc:89:get_cf$813 ($not).
Mapping top.$auto$alumacc.cc:89:get_cf$824 ($not).
Mapping top.$auto$alumacc.cc:89:get_cf$868 ($not).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$793 ($mux).
Mapping top.$auto$pmuxtree.cc:65:recursive_mux_generator$801 ($mux).
Mapping top.$flatten\oc8051_div1.$verific$equal_3$oc8051_divide.v:69$613 ($logic_not).
Mapping top.$flatten\oc8051_div1.$verific$mux_118$oc8051_divide.v:141$713 ($mux).
Mapping top.$flatten\oc8051_div1.$verific$mux_140$oc8051_divide.v:151$728 ($mux).
Mapping top.$flatten\oc8051_div1.$verific$mux_162$oc8051_divide.v:161$741 ($mux).
Mapping top.$flatten\oc8051_div1.$verific$mux_184$oc8051_divide.v:171$754 ($mux).
Mapping top.$flatten\oc8051_div1.$verific$mux_185$oc8051_divide.v:176$755 ($mux).
Mapping top.$flatten\oc8051_div1.$verific$mux_186$oc8051_divide.v:176$756 ($mux).
Mapping top.$flatten\oc8051_div1.$verific$mux_189$oc8051_divide.v:176$757 ($mux).
Mapping top.$flatten\oc8051_div1.$verific$mux_190$oc8051_divide.v:176$758 ($mux).
Mapping top.$flatten\oc8051_div1.$verific$mux_30$oc8051_divide.v:100$637 ($mux).
Mapping top.$flatten\oc8051_div1.$verific$mux_52$oc8051_divide.v:111$662 ($mux).
Mapping top.$flatten\oc8051_div1.$verific$mux_74$oc8051_divide.v:121$680 ($mux).
Mapping top.$flatten\oc8051_div1.$verific$mux_96$oc8051_divide.v:131$697 ($mux).
Mapping top.$flatten\oc8051_mul1.$verific$not_equal_5$oc8051_multiply.v:71$778 ($reduce_bool).
Mapping top.$verific$Mux_160$oc8051_alu.v:306$308 ($bmux).
Mapping top.$verific$Mux_161$oc8051_alu.v:306$309 ($bmux).
Mapping top.$verific$Mux_162$oc8051_alu.v:306$310 ($bmux).
Mapping top.$verific$and_114$oc8051_alu.v:214$279 ($and).
Mapping top.$verific$i100$oc8051_alu.v:195$265 ($or).
Mapping top.$verific$i110$oc8051_alu.v:196$275 ($mux).
Mapping top.$verific$i113$oc8051_alu.v:207$277 ($not).
Mapping top.$verific$i117$oc8051_alu.v:216$280 ($and).
Mapping top.$verific$i121$oc8051_alu.v:225$283 ($xor).
Mapping top.$verific$i125$oc8051_alu.v:234$286 ($or).
Mapping top.$verific$i128$oc8051_alu.v:243$288 ($not).
Mapping top.$verific$i129$oc8051_alu.v:243$289 ($or).
Mapping top.$verific$i136$oc8051_alu.v:259$291 ($and).
Mapping top.$verific$i38$oc8051_alu.v:136$235 ($xor).
Mapping top.$verific$i58$oc8051_alu.v:149$240 ($not).
Mapping top.$verific$i65$oc8051_alu.v:154$245 ($not).
Mapping top.$verific$i71$oc8051_alu.v:159$250 ($not).
Mapping top.$verific$i76$oc8051_alu.v:161$252 ($xor).
Mapping top.$verific$i86$oc8051_alu.v:192$257 ($or).
Mapping top.$verific$i97$oc8051_alu.v:193$263 ($mux).
Mapping top.$verific$inv_110$oc8051_alu.v:205$276 ($not).
Mapping top.$verific$mux_152$oc8051_alu.v:294$303 ($mux).
Mapping top.$verific$mux_153$oc8051_alu.v:294$304 ($mux).
Mapping top.$verific$mux_158$oc8051_alu.v:306$306 ($bmux).
Mapping top.$verific$mux_159$oc8051_alu.v:306$307 ($bmux).
Mapping top.$verific$mux_456$oc8051_alu.v:196$301 ($mux).
Mapping top.$verific$mux_458$oc8051_alu.v:193$274 ($mux).
Mapping top.$verific$or_122$oc8051_alu.v:232$285 ($or).
Mapping top.$verific$xor_118$oc8051_alu.v:223$282 ($xor).

24. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~58 debug messages>

25. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~12 debug messages>
Removed a total of 4 cells.

26. Executing OPT_DFF pass (perform DFF optimizations).

27. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 13 unused wires.
<suppressed ~1 debug messages>

28. Executing OPT pass (performing simple optimizations).

28.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

28.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

28.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

28.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

28.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

28.6. Executing OPT_DFF pass (perform DFF optimizations).

28.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

28.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

28.9. Finished OPT passes. (There is nothing left to do.)

29. Executing OPT pass (performing simple optimizations).

29.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~56 debug messages>

29.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

29.3. Executing OPT_DFF pass (perform DFF optimizations).

29.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

29.5. Finished fast OPT passes.

30. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

31. Executing OPT pass (performing simple optimizations).

31.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

31.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

31.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

31.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

31.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

31.6. Executing OPT_SHARE pass.
    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$1387 in front of them:
        $auto$simplemap.cc:312:simplemap_bmux$1370
        $auto$simplemap.cc:312:simplemap_bmux$1362

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$1388 in front of them:
        $auto$simplemap.cc:312:simplemap_bmux$1371
        $auto$simplemap.cc:312:simplemap_bmux$1363

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$1389 in front of them:
        $auto$simplemap.cc:312:simplemap_bmux$1372
        $auto$simplemap.cc:312:simplemap_bmux$1364

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$1390 in front of them:
        $auto$simplemap.cc:312:simplemap_bmux$1373
        $auto$simplemap.cc:312:simplemap_bmux$1365

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$1391 in front of them:
        $auto$simplemap.cc:312:simplemap_bmux$1374
        $auto$simplemap.cc:312:simplemap_bmux$1366

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$1392 in front of them:
        $auto$simplemap.cc:312:simplemap_bmux$1375
        $auto$simplemap.cc:312:simplemap_bmux$1367

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$1393 in front of them:
        $auto$simplemap.cc:312:simplemap_bmux$1376
        $auto$simplemap.cc:312:simplemap_bmux$1368

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$1394 in front of them:
        $auto$simplemap.cc:312:simplemap_bmux$1377
        $auto$simplemap.cc:312:simplemap_bmux$1369

31.7. Executing OPT_DFF pass (perform DFF optimizations).

31.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

31.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~8 debug messages>

31.10. Rerunning OPT passes. (Maybe there is more to do..)

31.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~8 debug messages>

31.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

31.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

31.14. Executing OPT_SHARE pass.

31.15. Executing OPT_DFF pass (perform DFF optimizations).

31.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

31.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

31.18. Finished OPT passes. (There is nothing left to do.)

32. Executing TECHMAP pass (map to technology primitives).

32.1. Executing Verilog-2005 frontend: /home/users/aram/Workspace/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/aram/Workspace/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

32.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $mux.
Using template $paramod$1f812f0514ea3255703342654e053e2c502325cc\_90_alu for cells of type $alu.
Using template $paramod$b85fbb3374a1d9ba7ee4f4d6323c30f939df3ada\_90_alu for cells of type $alu.
Using template $paramod$0563fff2c395e9892f21c131fa33d5e0ad144e72\_90_alu for cells of type $alu.
Using template $paramod$1d1e68f77481583066c6d429218f48ea9d5739b3\_90_alu for cells of type $alu.
Using template $paramod$c3cd1564c35d873179656addd6052d7ea8b6d991\_90_alu for cells of type $alu.
Using template $paramod$aebc44f5eedf4f1603d7564e4920ac508059c773\_90_alu for cells of type $alu.
Using extmapper maccmap for cells of type $macc.
  add { 1'1 \src1 [7] } (2 bits, unsigned)
  sub $verific$n195$17 (1 bits, unsigned)
  sub \src2 [7] (1 bits, unsigned)
  packed 1 (1) bits / 1 words into adder tree
  add \src1 * \src2 (8x8 bits, unsigned)
Using template $paramod$cd54e322aa4265ca236096fe4bb634aaec4e39b4\_90_alu for cells of type $alu.
Using template $paramod$740b056ede97228d3eae64ea2fdc81f0a33e0fe7\_90_alu for cells of type $alu.
Using template $paramod$f85408ed1aa3d09e465edae8a7bf590332ae9f7b\_90_alu for cells of type $alu.
Using template $paramod$672a140277c71df8314410f22acc08d55222c3c7\_90_alu for cells of type $alu.
Using template $paramod$a1bc51c02ce12ac21eb18988e83292af48ed7d72\_90_alu for cells of type $alu.
  add { 1'1 \src1 [3:0] } (5 bits, unsigned)
  sub \srcCy (1 bits, unsigned)
  sub \src2 [3:0] (4 bits, unsigned)
  packed 2 (1) bits / 1 words into adder tree
  add { 1'1 \src1 [6:4] } (4 bits, unsigned)
  sub $auto$simplemap.cc:309:simplemap_bmux$1070 [1] (1 bits, unsigned)
  sub \src2 [6:4] (3 bits, unsigned)
  packed 2 (1) bits / 1 words into adder tree
Using extmapper simplemap for cells of type $and.
Using template $paramod\_90_fa\WIDTH=32'00000000000000000000000000010000 for cells of type $fa.
Using template $paramod\_90_fa\WIDTH=32'00000000000000000000000000000101 for cells of type $fa.
Using template $paramod$b18e16801adf491a64caa0542270798e5d4ac6b6\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000101 for cells of type $lcu.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010000 for cells of type $lcu.
Using template $paramod$7e708ae28ab761f11d0fb59d3ffc72f6a4baf5d9\_90_alu for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001000 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000010 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000100 for cells of type $lcu.
Using template $paramod$6df0329addda9228fcc2546de2aaf14ad26c98e1\_90_alu for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001001 for cells of type $lcu.
Using template $paramod\_90_fa\WIDTH=32'00000000000000000000000000000100 for cells of type $fa.
Using extmapper simplemap for cells of type $or.
No more expansions possible.
<suppressed ~1893 debug messages>

33. Executing OPT pass (performing simple optimizations).

33.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~918 debug messages>

33.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~744 debug messages>
Removed a total of 248 cells.

33.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

33.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

33.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

33.6. Executing OPT_DFF pass (perform DFF optimizations).

33.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 96 unused cells and 934 unused wires.
<suppressed ~97 debug messages>

33.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~9 debug messages>

33.9. Rerunning OPT passes. (Maybe there is more to do..)

33.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

33.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

33.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

33.13. Executing OPT_DFF pass (perform DFF optimizations).

33.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

33.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

33.16. Rerunning OPT passes. (Maybe there is more to do..)

33.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

33.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

33.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

33.20. Executing OPT_DFF pass (perform DFF optimizations).

33.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

33.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

33.23. Finished OPT passes. (There is nothing left to do.)

34. Executing ABC pass (technology mapping using ABC).

34.1. Extracting gate netlist of module `\top' to `<abc-temp-dir>/input.blif'..
Extracted 1341 gates and 1365 wires to a netlist network with 23 inputs and 19 outputs.

34.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + source /home/users/aram/Workspace/yosys_verific_rs/scripts/synth/abc/abc_base6.a21.scr 
ABC: netlist  : i/o =     23/     19  and =    2743  lev =  106 (69.42)  mem = 0.03 MB
ABC: Mapping (K=6)  :  lut =    316  edge =    1451  lev =   25 (17.26)  mem = 0.02 MB
ABC: netlist  : i/o =     23/     19  and =    2804  lev =  126 (79.95)  mem = 0.04 MB
ABC: Mapping (K=6)  :  lut =    301  edge =    1400  lev =   30 (20.37)  mem = 0.02 MB
ABC: netlist  : i/o =     23/     19  and =    2760  lev =  114 (73.21)  mem = 0.03 MB
ABC: Mapping (K=6)  :  lut =    302  edge =    1387  lev =   30 (20.37)  mem = 0.02 MB
ABC: netlist  : i/o =     23/     19  and =    2258  lev =  112 (74.32)  mem = 0.03 MB
ABC: Mapping (K=6)  :  lut =    299  edge =    1385  lev =   30 (20.26)  mem = 0.02 MB
ABC: netlist  : i/o =     23/     19  and =    2724  lev =  111 (71.42)  mem = 0.03 MB
ABC: Mapping (K=6)  :  lut =    307  edge =    1394  lev =   32 (20.68)  mem = 0.02 MB
ABC: netlist  : i/o =     23/     19  and =    2752  lev =  112 (71.79)  mem = 0.05 MB
ABC: Mapping (K=6)  :  lut =    288  edge =    1395  lev =   26 (18.05)  mem = 0.02 MB
ABC: netlist  : i/o =     23/     19  and =    2803  lev =  121 (76.47)  mem = 0.05 MB
ABC: Mapping (K=6)  :  lut =    287  edge =    1392  lev =   27 (18.47)  mem = 0.02 MB
ABC: netlist  : i/o =     23/     19  and =    2794  lev =  120 (75.79)  mem = 0.05 MB
ABC: Mapping (K=6)  :  lut =    285  edge =    1394  lev =   26 (17.95)  mem = 0.02 MB
ABC: netlist  : i/o =     23/     19  and =    2958  lev =  111 (70.89)  mem = 0.05 MB
ABC: Mapping (K=6)  :  lut =    291  edge =    1416  lev =   26 (18.00)  mem = 0.02 MB
ABC: netlist  : i/o =     23/     19  and =    2754  lev =  121 (75.68)  mem = 0.05 MB
ABC: Mapping (K=6)  :  lut =    292  edge =    1403  lev =   26 (17.89)  mem = 0.02 MB
ABC: netlist  : i/o =     23/     19  and =    2780  lev =  119 (75.11)  mem = 0.05 MB
ABC: Mapping (K=6)  :  lut =    290  edge =    1405  lev =   26 (18.00)  mem = 0.02 MB
ABC: netlist  : i/o =     23/     19  and =    2810  lev =  120 (75.79)  mem = 0.05 MB
ABC: Mapping (K=6)  :  lut =    291  edge =    1410  lev =   26 (17.89)  mem = 0.02 MB
ABC: netlist  : i/o =     23/     19  and =    2798  lev =  120 (75.84)  mem = 0.05 MB
ABC: Mapping (K=6)  :  lut =    290  edge =    1410  lev =   27 (18.00)  mem = 0.02 MB
ABC: netlist  : i/o =     23/     19  and =    2794  lev =  120 (75.79)  mem = 0.04 MB
ABC: Mapping (K=6)  :  lut =    285  edge =    1394  lev =   26 (17.95)  mem = 0.02 MB
ABC: netlist  : i/o =     23/     19  and =    2794  lev =  120 (75.79)  mem = 0.05 MB
ABC: Mapping (K=6)  :  lut =    285  edge =    1394  lev =   26 (17.95)  mem = 0.02 MB
ABC: netlist  : i/o =     23/     19  and =    2878  lev =  127 (78.89)  mem = 0.04 MB
ABC: Mapping (K=6)  :  lut =    285  edge =    1394  lev =   26 (17.95)  mem = 0.02 MB
ABC: + write_blif <abc-temp-dir>/output.blif 

34.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:      285
ABC RESULTS:        internal signals:     1323
ABC RESULTS:           input signals:       23
ABC RESULTS:          output signals:       19
Removing temp directory.

35. Executing OPT pass (performing simple optimizations).

35.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

35.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

35.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

35.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

35.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

35.6. Executing OPT_DFF pass (perform DFF optimizations).

35.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 469 unused wires.
<suppressed ~1 debug messages>

35.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

35.9. Rerunning OPT passes. (Maybe there is more to do..)

35.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

35.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

35.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

35.13. Executing OPT_DFF pass (perform DFF optimizations).

35.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

35.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

35.16. Finished OPT passes. (There is nothing left to do.)

36. Executing HIERARCHY pass (managing design hierarchy).

36.1. Analyzing design hierarchy..
Top module:  \top

36.2. Analyzing design hierarchy..
Top module:  \top
Removed 0 unused modules.

37. Printing statistics.

=== top ===

   Number of wires:                294
   Number of wire bits:            416
   Number of public wires:          28
   Number of public wire bits:     150
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                285
     $lut                          285

38. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 17 unused wires.
<suppressed ~17 debug messages>

39. Executing BLIF backend.

Warnings: 2 unique messages, 2 total
End of script. Logfile hash: 87c0d163d8, CPU: user 1.51s system 0.03s, MEM: 31.88 MB peak
Yosys 0.14+36 (git sha1 15a4e900b, gcc 7.1.0 -fPIC -Os)
Time spent: 85% 1x abc (8 sec), 5% 36x opt_expr (0 sec), ...
