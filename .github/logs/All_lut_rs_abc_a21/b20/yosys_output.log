
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.14+36 (git sha1 15a4e900b, gcc 7.1.0 -fPIC -Os)


-- Executing script file `yosys.ys' --

1. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Jan22_SW_Release, released at Sat Jan 29 02:42:49 2022.

2. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Jan22_SW_Release, released at Sat Jan 29 02:42:49 2022.
VERIFIC-INFO [VHDL-1504] default VHDL library search path is now "/home/users/aram/Workspace/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008"
VERIFIC-COMMENT [VHDL-1481] Analyzing VHDL file 'b20.vhd'
VERIFIC-COMMENT [VHDL-1493] Restoring VHDL unit 'std.standard' from file '/home/users/aram/Workspace/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008/std/standard.vdb'
VERIFIC-INFO [VHDL-1012] b20.vhd:1: analyzing entity 'b14'
VERIFIC-INFO [VHDL-1010] b20.vhd:11: analyzing architecture 'behav'
VERIFIC-INFO [VHDL-1012] b20.vhd:511: analyzing entity 'b14rev'
VERIFIC-INFO [VHDL-1010] b20.vhd:521: analyzing architecture 'behav'
VERIFIC-INFO [VHDL-1012] b20.vhd:1021: analyzing entity 'b20'
VERIFIC-INFO [VHDL-1010] b20.vhd:1029: analyzing architecture 'behav'

3. Executing HIERARCHY pass (managing design hierarchy).
VERIFIC-INFO [VHDL-1067] b20.vhd:1021: processing 'b20(BEHAV)'
VERIFIC-INFO [VHDL-1067] b20.vhd:1: processing 'b14(BEHAV)'
VERIFIC-INFO [VHDL-1172] b20.vhd:478: 'others' clause is never selected
VERIFIC-INFO [VHDL-1067] b20.vhd:511: processing 'b14rev(BEHAV)'
VERIFIC-INFO [VHDL-1172] b20.vhd:988: 'others' clause is never selected
Importing module standard.
Importing module b20.
Importing module b14(BEHAV).
Importing module b14rev(BEHAV).

3.1. Analyzing design hierarchy..
Top module:  \b20
Used module:     \b14rev(BEHAV)
Used module:     \b14(BEHAV)

3.2. Analyzing design hierarchy..
Top module:  \b20
Used module:     \b14rev(BEHAV)
Used module:     \b14(BEHAV)
Removing unused module `\standard'.
Removed 1 unused modules.

4. Executing PROC pass (convert processes to netlists).

4.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

4.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

4.4. Executing PROC_INIT pass (extract init attributes).

4.5. Executing PROC_ARST pass (detect async resets in processes).

4.6. Executing PROC_MUX pass (convert decision trees to multiplexers).

4.7. Executing PROC_DLATCH pass (convert process syncs to latches).

4.8. Executing PROC_DFF pass (convert process syncs to FFs).

4.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

4.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module b14(BEHAV).
<suppressed ~26 debug messages>
Optimizing module b20.
Optimizing module b14rev(BEHAV).
<suppressed ~26 debug messages>

5. Executing FLATTEN pass (flatten design).
Deleting now unused module b14(BEHAV).
Deleting now unused module b14rev(BEHAV).
<suppressed ~2 debug messages>

6. Executing TRIBUF pass.

7. Executing OPT_EXPR pass (perform const folding).
Optimizing module b20.
<suppressed ~13 debug messages>

8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b20..
Removed 14 unused cells and 343 unused wires.
<suppressed ~117 debug messages>

9. Executing CHECK pass (checking for obvious problems).
Checking module b20...
Found and reported 0 problems.

10. Executing DEMINOUT pass (demote inout ports to input or output).

11. Executing OPT pass (performing simple optimizations).

11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b20.

11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b20'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

11.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b20..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $flatten\P1.$verific$i684$b20.vhd:501$532.
    dead port 2/2 on $mux $flatten\P1.$verific$mux_672$b20.vhd:501$523.
    dead port 2/2 on $mux $flatten\P1.$verific$mux_685$b20.vhd:501$534.
    dead port 2/2 on $mux $flatten\P2.$verific$i653$b20.vhd:1011$1052.
    dead port 2/2 on $mux $flatten\P2.$verific$mux_641$b20.vhd:1011$1043.
    dead port 2/2 on $mux $flatten\P2.$verific$mux_654$b20.vhd:1011$1054.
Removed 6 multiplexer ports.
<suppressed ~52 debug messages>

11.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b20.
    New ctrl vector for $pmux cell $flatten\P1.$verific$select_746$b20.vhd:486$485: { $flatten\P1.$verific$n2255$116 $auto$opt_reduce.cc:134:opt_pmux$1096 }
    New ctrl vector for $pmux cell $flatten\P1.$verific$select_750$b20.vhd:486$426: { $flatten\P1.$verific$n2256$117 $auto$opt_reduce.cc:134:opt_pmux$1098 }
    New ctrl vector for $pmux cell $flatten\P1.$verific$select_751$b20.vhd:486$503: { $flatten\P1.$verific$n2257$118 $auto$opt_reduce.cc:134:opt_pmux$1100 }
    New ctrl vector for $pmux cell $flatten\P1.$verific$select_752$b20.vhd:486$504: { $flatten\P1.$verific$n2258$119 $auto$opt_reduce.cc:134:opt_pmux$1102 }
    New ctrl vector for $pmux cell $flatten\P2.$verific$select_494$b20.vhd:953$999: { $flatten\P2.$verific$n2118$618 $auto$opt_reduce.cc:134:opt_pmux$1104 }
    New ctrl vector for $pmux cell $flatten\P2.$verific$select_495$b20.vhd:953$1000: { $flatten\P2.$verific$n2120$620 $auto$opt_reduce.cc:134:opt_pmux$1106 }
    New ctrl vector for $pmux cell $flatten\P2.$verific$select_496$b20.vhd:953$1001: { $flatten\P2.$verific$n2119$619 $auto$opt_reduce.cc:134:opt_pmux$1108 }
    New ctrl vector for $pmux cell $flatten\P2.$verific$select_497$b20.vhd:953$1002: { $flatten\P2.$verific$n2121$621 $auto$opt_reduce.cc:134:opt_pmux$1110 }
    New ctrl vector for $pmux cell $flatten\P2.$verific$select_534$b20.vhd:973$1005: { $flatten\P2.$verific$n2121$621 $auto$opt_reduce.cc:134:opt_pmux$1112 }
    New ctrl vector for $pmux cell $flatten\P2.$verific$select_535$b20.vhd:973$1006: { $flatten\P2.$verific$n2119$619 $auto$opt_reduce.cc:134:opt_pmux$1114 }
    New ctrl vector for $pmux cell $flatten\P2.$verific$select_536$b20.vhd:973$1007: { $flatten\P2.$verific$n2120$620 $auto$opt_reduce.cc:134:opt_pmux$1116 }
    New ctrl vector for $pmux cell $flatten\P2.$verific$select_537$b20.vhd:973$1008: { $flatten\P2.$verific$n2118$618 $auto$opt_reduce.cc:134:opt_pmux$1118 }
    New ctrl vector for $pmux cell $flatten\P2.$verific$select_617$b20.vhd:996$1019: { $flatten\P2.$verific$n2121$621 $auto$opt_reduce.cc:134:opt_pmux$1120 }
    New ctrl vector for $pmux cell $flatten\P2.$verific$select_618$b20.vhd:996$1020: { $flatten\P2.$verific$n2120$620 $auto$opt_reduce.cc:134:opt_pmux$1122 }
    New ctrl vector for $pmux cell $flatten\P2.$verific$select_619$b20.vhd:996$1021: { $flatten\P2.$verific$n2119$619 $auto$opt_reduce.cc:134:opt_pmux$1124 }
    New ctrl vector for $pmux cell $flatten\P2.$verific$select_620$b20.vhd:996$1022: { $flatten\P2.$verific$n2118$618 $auto$opt_reduce.cc:134:opt_pmux$1126 }
    New ctrl vector for $pmux cell $flatten\P2.$verific$select_717$b20.vhd:873$990: { $flatten\P2.$verific$n2118$618 $auto$opt_reduce.cc:134:opt_pmux$1128 }
    New ctrl vector for $pmux cell $flatten\P2.$verific$select_718$b20.vhd:873$996: { $flatten\P2.$verific$n2119$619 $auto$opt_reduce.cc:134:opt_pmux$1130 }
    New ctrl vector for $pmux cell $flatten\P2.$verific$select_719$b20.vhd:873$997: { $flatten\P2.$verific$n2120$620 $auto$opt_reduce.cc:134:opt_pmux$1132 }
    New ctrl vector for $pmux cell $flatten\P2.$verific$select_720$b20.vhd:873$998: { $flatten\P2.$verific$n2121$621 $auto$opt_reduce.cc:134:opt_pmux$1134 }
  Optimizing cells in module \b20.
Performed a total of 20 changes.

11.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b20'.
<suppressed ~36 debug messages>
Removed a total of 12 cells.

11.6. Executing OPT_DFF pass (perform DFF optimizations).
Changing const-value async load to async reset on $flatten\P2.$verific$wr_reg$b20.vhd:1015$1089 ($aldff) from module b20.
Changing const-value async load to async reset on $flatten\P2.$verific$state_reg$b20.vhd:1015$1091 ($aldff) from module b20.
Changing const-value async load to async reset on $flatten\P2.$verific$reg3_reg$b20.vhd:1015$1086 ($aldff) from module b20.
Changing const-value async load to async reset on $flatten\P2.$verific$reg2_reg$b20.vhd:1015$1085 ($aldff) from module b20.
Changing const-value async load to async reset on $flatten\P2.$verific$reg1_reg$b20.vhd:1015$1084 ($aldff) from module b20.
Changing const-value async load to async reset on $flatten\P2.$verific$reg0_reg$b20.vhd:1015$1083 ($aldff) from module b20.
Changing const-value async load to async reset on $flatten\P2.$verific$rd_reg$b20.vhd:1015$1088 ($aldff) from module b20.
Changing const-value async load to async reset on $flatten\P1.$verific$B_reg$b20.vhd:505$562 ($aldff) from module b20.
Changing const-value async load to async reset on $flatten\P2.$verific$datao_reg$b20.vhd:1015$1090 ($aldff) from module b20.
Changing const-value async load to async reset on $flatten\P2.$verific$d_reg$b20.vhd:1015$1081 ($aldff) from module b20.
Changing const-value async load to async reset on $flatten\P2.$verific$addr_reg$b20.vhd:1015$1087 ($aldff) from module b20.
Changing const-value async load to async reset on $flatten\P2.$verific$IR_reg$b20.vhd:1015$1080 ($aldff) from module b20.
Changing const-value async load to async reset on $flatten\P2.$verific$B_reg$b20.vhd:1015$1082 ($aldff) from module b20.
Changing const-value async load to async reset on $flatten\P1.$verific$wr_reg$b20.vhd:505$569 ($aldff) from module b20.
Changing const-value async load to async reset on $flatten\P1.$verific$state_reg$b20.vhd:505$571 ($aldff) from module b20.
Changing const-value async load to async reset on $flatten\P1.$verific$reg3_reg$b20.vhd:505$566 ($aldff) from module b20.
Changing const-value async load to async reset on $flatten\P1.$verific$reg2_reg$b20.vhd:505$565 ($aldff) from module b20.
Changing const-value async load to async reset on $flatten\P1.$verific$reg1_reg$b20.vhd:505$564 ($aldff) from module b20.
Changing const-value async load to async reset on $flatten\P1.$verific$reg0_reg$b20.vhd:505$563 ($aldff) from module b20.
Changing const-value async load to async reset on $flatten\P1.$verific$rd_reg$b20.vhd:505$568 ($aldff) from module b20.
Changing const-value async load to async reset on $flatten\P1.$verific$IR_reg$b20.vhd:505$560 ($aldff) from module b20.
Changing const-value async load to async reset on $flatten\P1.$verific$datao_reg$b20.vhd:505$570 ($aldff) from module b20.
Changing const-value async load to async reset on $flatten\P1.$verific$d_reg$b20.vhd:505$561 ($aldff) from module b20.
Changing const-value async load to async reset on $flatten\P1.$verific$addr_reg$b20.vhd:505$567 ($aldff) from module b20.

11.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b20..
Removed 0 unused cells and 20 unused wires.
<suppressed ~1 debug messages>

11.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module b20.

11.9. Rerunning OPT passes. (Maybe there is more to do..)

11.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b20..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~52 debug messages>

11.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b20.
Performed a total of 0 changes.

11.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b20'.
Removed a total of 0 cells.

11.13. Executing OPT_DFF pass (perform DFF optimizations).

11.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b20..

11.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module b20.

11.16. Finished OPT passes. (There is nothing left to do.)

12. Executing FSM pass (extract and optimize FSM).

12.1. Executing FSM_DETECT pass (finding FSMs in design).
Found FSM state register b20.P1.d.
Found FSM state register b20.P2.d.

12.2. Executing FSM_EXTRACT pass (extracting FSM from design).
Extracting FSM `\P1.d' from module `\b20'.
  found $adff cell for state register: $flatten\P1.$verific$d_reg$b20.vhd:505$561
  root of input selection tree: $flatten\P1.$verific$n11472$366
  found reset state: 0 (from async reset)
  found ctrl input: \P1.state
  found ctrl input: $flatten\P1.$verific$n341$212 [0]
  found ctrl input: $flatten\P1.$verific$n10346$183
  found ctrl input: $flatten\P1.$verific$n1405$110
  found ctrl input: $flatten\P1.$verific$n1440$111
  found ctrl input: $flatten\P1.$verific$n1474$112
  found ctrl input: $flatten\P1.$verific$n1475$113
  found ctrl input: $flatten\P1.$verific$n1476$114
  found ctrl input: $flatten\P1.$verific$n1477$115
  found state code: 1
  found state code: 2
  found state code: 3
  found ctrl input: \P1.B
  ctrl inputs: { \P1.B \P1.state $flatten\P1.$verific$n1405$110 $flatten\P1.$verific$n1440$111 $flatten\P1.$verific$n1474$112 $flatten\P1.$verific$n1475$113 $flatten\P1.$verific$n1476$114 $flatten\P1.$verific$n1477$115 $flatten\P1.$verific$n10346$183 $flatten\P1.$verific$n341$212 [0] }
  ctrl outputs: $flatten\P1.$verific$n11472$366
  transition:          0 10'-0-------- ->          0 0
  transition:          0 10'-100000000 ->          0 0
  transition:          0 10'-100000100 ->          0 0
  transition:          0 10'-100001-00 ->          1 1
  transition:          0 10'-10001--00 ->          2 2
  transition:          0 10'-1001---00 ->          3 3
  transition:          0 10'0101----00 ->          0 0
  transition:          0 10'1101----00 ->          3 3
  transition:          0 10'011-----00 ->          3 3
  transition:          0 10'111-----00 ->          0 0
  transition:          0 10'-1------10 ->          0 0
  transition:          0 10'-1-------1 ->          0 0
  transition:          2 10'-0-------- ->          2 2
  transition:          2 10'-100000000 ->          2 2
  transition:          2 10'-100000100 ->          0 0
  transition:          2 10'-100001-00 ->          1 1
  transition:          2 10'-10001--00 ->          2 2
  transition:          2 10'-1001---00 ->          3 3
  transition:          2 10'0101----00 ->          2 2
  transition:          2 10'1101----00 ->          3 3
  transition:          2 10'011-----00 ->          3 3
  transition:          2 10'111-----00 ->          2 2
  transition:          2 10'-1------10 ->          2 2
  transition:          2 10'-1-------1 ->          2 2
  transition:          1 10'-0-------- ->          1 1
  transition:          1 10'-100000000 ->          1 1
  transition:          1 10'-100000100 ->          0 0
  transition:          1 10'-100001-00 ->          1 1
  transition:          1 10'-10001--00 ->          2 2
  transition:          1 10'-1001---00 ->          3 3
  transition:          1 10'0101----00 ->          1 1
  transition:          1 10'1101----00 ->          3 3
  transition:          1 10'011-----00 ->          3 3
  transition:          1 10'111-----00 ->          1 1
  transition:          1 10'-1------10 ->          1 1
  transition:          1 10'-1-------1 ->          1 1
  transition:          3 10'-0-------- ->          3 3
  transition:          3 10'-100000000 ->          3 3
  transition:          3 10'-100000100 ->          0 0
  transition:          3 10'-100001-00 ->          1 1
  transition:          3 10'-10001--00 ->          2 2
  transition:          3 10'-1001---00 ->          3 3
  transition:          3 10'0101----00 ->          3 3
  transition:          3 10'1101----00 ->          3 3
  transition:          3 10'011-----00 ->          3 3
  transition:          3 10'111-----00 ->          3 3
  transition:          3 10'-1------10 ->          3 3
  transition:          3 10'-1-------1 ->          3 3
Extracting FSM `\P2.d' from module `\b20'.
  found $adff cell for state register: $flatten\P2.$verific$d_reg$b20.vhd:1015$1081
  root of input selection tree: $flatten\P2.$verific$n11328$869
  found reset state: 0 (from async reset)
  found ctrl input: \P2.state
  found ctrl input: $flatten\P2.$verific$n341$712 [0]
  found ctrl input: $flatten\P2.$verific$n10195$685
  found ctrl input: $flatten\P2.$verific$n1406$612
  found ctrl input: $flatten\P2.$verific$n1441$613
  found ctrl input: $flatten\P2.$verific$n1475$614
  found ctrl input: $flatten\P2.$verific$n1476$615
  found ctrl input: $flatten\P2.$verific$n1477$616
  found ctrl input: $flatten\P2.$verific$n1478$617
  found state code: 1
  found state code: 2
  found state code: 3
  found ctrl input: \P2.B
  ctrl inputs: { \P2.B \P2.state $flatten\P2.$verific$n1406$612 $flatten\P2.$verific$n1441$613 $flatten\P2.$verific$n1475$614 $flatten\P2.$verific$n1476$615 $flatten\P2.$verific$n1477$616 $flatten\P2.$verific$n1478$617 $flatten\P2.$verific$n10195$685 $flatten\P2.$verific$n341$712 [0] }
  ctrl outputs: $flatten\P2.$verific$n11328$869
  transition:          0 10'-0-------- ->          0 0
  transition:          0 10'-100000000 ->          0 0
  transition:          0 10'-100000100 ->          0 0
  transition:          0 10'-100001-00 ->          1 1
  transition:          0 10'-10001--00 ->          2 2
  transition:          0 10'-1001---00 ->          3 3
  transition:          0 10'0101----00 ->          0 0
  transition:          0 10'1101----00 ->          3 3
  transition:          0 10'011-----00 ->          3 3
  transition:          0 10'111-----00 ->          0 0
  transition:          0 10'-1------10 ->          0 0
  transition:          0 10'-1-------1 ->          0 0
  transition:          2 10'-0-------- ->          2 2
  transition:          2 10'-100000000 ->          2 2
  transition:          2 10'-100000100 ->          0 0
  transition:          2 10'-100001-00 ->          1 1
  transition:          2 10'-10001--00 ->          2 2
  transition:          2 10'-1001---00 ->          3 3
  transition:          2 10'0101----00 ->          2 2
  transition:          2 10'1101----00 ->          3 3
  transition:          2 10'011-----00 ->          3 3
  transition:          2 10'111-----00 ->          2 2
  transition:          2 10'-1------10 ->          2 2
  transition:          2 10'-1-------1 ->          2 2
  transition:          1 10'-0-------- ->          1 1
  transition:          1 10'-100000000 ->          1 1
  transition:          1 10'-100000100 ->          0 0
  transition:          1 10'-100001-00 ->          1 1
  transition:          1 10'-10001--00 ->          2 2
  transition:          1 10'-1001---00 ->          3 3
  transition:          1 10'0101----00 ->          1 1
  transition:          1 10'1101----00 ->          3 3
  transition:          1 10'011-----00 ->          3 3
  transition:          1 10'111-----00 ->          1 1
  transition:          1 10'-1------10 ->          1 1
  transition:          1 10'-1-------1 ->          1 1
  transition:          3 10'-0-------- ->          3 3
  transition:          3 10'-100000000 ->          3 3
  transition:          3 10'-100000100 ->          0 0
  transition:          3 10'-100001-00 ->          1 1
  transition:          3 10'-10001--00 ->          2 2
  transition:          3 10'-1001---00 ->          3 3
  transition:          3 10'0101----00 ->          3 3
  transition:          3 10'1101----00 ->          3 3
  transition:          3 10'011-----00 ->          3 3
  transition:          3 10'111-----00 ->          3 3
  transition:          3 10'-1------10 ->          3 3
  transition:          3 10'-1-------1 ->          3 3

12.3. Executing FSM_OPT pass (simple optimizations of FSMs).
Optimizing FSM `$fsm$\P2.d$1137' from module `\b20'.
  Merging pattern 10'-100000000 and 10'-100000100 from group (0 0 0).
  Merging pattern 10'-100000100 and 10'-100000000 from group (0 0 0).
  Merging pattern 10'0101----00 and 10'1101----00 from group (3 3 3).
  Merging pattern 10'1101----00 and 10'0101----00 from group (3 3 3).
  Merging pattern 10'011-----00 and 10'111-----00 from group (3 3 3).
  Merging pattern 10'111-----00 and 10'011-----00 from group (3 3 3).
Optimizing FSM `$fsm$\P1.d$1135' from module `\b20'.
  Merging pattern 10'-100000000 and 10'-100000100 from group (0 0 0).
  Merging pattern 10'-100000100 and 10'-100000000 from group (0 0 0).
  Merging pattern 10'0101----00 and 10'1101----00 from group (3 3 3).
  Merging pattern 10'1101----00 and 10'0101----00 from group (3 3 3).
  Merging pattern 10'011-----00 and 10'111-----00 from group (3 3 3).
  Merging pattern 10'111-----00 and 10'011-----00 from group (3 3 3).

12.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b20..
Removed 6 unused cells and 6 unused wires.
<suppressed ~7 debug messages>

12.5. Executing FSM_OPT pass (simple optimizations of FSMs).
Optimizing FSM `$fsm$\P1.d$1135' from module `\b20'.
Optimizing FSM `$fsm$\P2.d$1137' from module `\b20'.

12.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).
Recoding FSM `$fsm$\P1.d$1135' from module `\b20' using `auto' encoding:
  mapping auto encoding to `one-hot` for this FSM.
  00000000000000000000000000000000 -> ---1
  00000000000000000000000000000010 -> --1-
  00000000000000000000000000000001 -> -1--
  00000000000000000000000000000011 -> 1---
Recoding FSM `$fsm$\P2.d$1137' from module `\b20' using `auto' encoding:
  mapping auto encoding to `one-hot` for this FSM.
  00000000000000000000000000000000 -> ---1
  00000000000000000000000000000010 -> --1-
  00000000000000000000000000000001 -> -1--
  00000000000000000000000000000011 -> 1---

12.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

FSM `$fsm$\P1.d$1135' from module `b20':
-------------------------------------

  Information on FSM $fsm$\P1.d$1135 (\P1.d):

  Number of input signals:   10
  Number of output signals:  32
  Number of state bits:       4

  Input signals:
    0: $flatten\P1.$verific$n341$212 [0]
    1: $flatten\P1.$verific$n10346$183
    2: $flatten\P1.$verific$n1477$115
    3: $flatten\P1.$verific$n1476$114
    4: $flatten\P1.$verific$n1475$113
    5: $flatten\P1.$verific$n1474$112
    6: $flatten\P1.$verific$n1440$111
    7: $flatten\P1.$verific$n1405$110
    8: \P1.state
    9: \P1.B

  Output signals:
    0: $flatten\P1.$verific$n11472$366 [0]
    1: $flatten\P1.$verific$n11472$366 [1]
    2: $flatten\P1.$verific$n11472$366 [2]
    3: $flatten\P1.$verific$n11472$366 [3]
    4: $flatten\P1.$verific$n11472$366 [4]
    5: $flatten\P1.$verific$n11472$366 [5]
    6: $flatten\P1.$verific$n11472$366 [6]
    7: $flatten\P1.$verific$n11472$366 [7]
    8: $flatten\P1.$verific$n11472$366 [8]
    9: $flatten\P1.$verific$n11472$366 [9]
   10: $flatten\P1.$verific$n11472$366 [10]
   11: $flatten\P1.$verific$n11472$366 [11]
   12: $flatten\P1.$verific$n11472$366 [12]
   13: $flatten\P1.$verific$n11472$366 [13]
   14: $flatten\P1.$verific$n11472$366 [14]
   15: $flatten\P1.$verific$n11472$366 [15]
   16: $flatten\P1.$verific$n11472$366 [16]
   17: $flatten\P1.$verific$n11472$366 [17]
   18: $flatten\P1.$verific$n11472$366 [18]
   19: $flatten\P1.$verific$n11472$366 [19]
   20: $flatten\P1.$verific$n11472$366 [20]
   21: $flatten\P1.$verific$n11472$366 [21]
   22: $flatten\P1.$verific$n11472$366 [22]
   23: $flatten\P1.$verific$n11472$366 [23]
   24: $flatten\P1.$verific$n11472$366 [24]
   25: $flatten\P1.$verific$n11472$366 [25]
   26: $flatten\P1.$verific$n11472$366 [26]
   27: $flatten\P1.$verific$n11472$366 [27]
   28: $flatten\P1.$verific$n11472$366 [28]
   29: $flatten\P1.$verific$n11472$366 [29]
   30: $flatten\P1.$verific$n11472$366 [30]
   31: $flatten\P1.$verific$n11472$366 [31]

  State encoding:
    0:     4'---1  <RESET STATE>
    1:     4'--1-
    2:     4'-1--
    3:     4'1---

  Transition Table (state_in, ctrl_in, state_out, ctrl_out):
      0:     0 10'-100000-00   ->     0 0
      1:     0 10'0101----00   ->     0 0
      2:     0 10'111-----00   ->     0 0
      3:     0 10'-1------10   ->     0 0
      4:     0 10'-1-------1   ->     0 0
      5:     0 10'-0--------   ->     0 0
      6:     0 10'-10001--00   ->     1 2
      7:     0 10'-100001-00   ->     2 1
      8:     0 10'-1001---00   ->     3 3
      9:     0 10'1101----00   ->     3 3
     10:     0 10'011-----00   ->     3 3
     11:     1 10'-100000100   ->     0 0
     12:     1 10'-100000000   ->     1 2
     13:     1 10'-10001--00   ->     1 2
     14:     1 10'0101----00   ->     1 2
     15:     1 10'111-----00   ->     1 2
     16:     1 10'-1------10   ->     1 2
     17:     1 10'-1-------1   ->     1 2
     18:     1 10'-0--------   ->     1 2
     19:     1 10'-100001-00   ->     2 1
     20:     1 10'-1001---00   ->     3 3
     21:     1 10'1101----00   ->     3 3
     22:     1 10'011-----00   ->     3 3
     23:     2 10'-100000100   ->     0 0
     24:     2 10'-10001--00   ->     1 2
     25:     2 10'-100000000   ->     2 1
     26:     2 10'-100001-00   ->     2 1
     27:     2 10'0101----00   ->     2 1
     28:     2 10'111-----00   ->     2 1
     29:     2 10'-1------10   ->     2 1
     30:     2 10'-1-------1   ->     2 1
     31:     2 10'-0--------   ->     2 1
     32:     2 10'-1001---00   ->     3 3
     33:     2 10'1101----00   ->     3 3
     34:     2 10'011-----00   ->     3 3
     35:     3 10'-100000100   ->     0 0
     36:     3 10'-10001--00   ->     1 2
     37:     3 10'-100001-00   ->     2 1
     38:     3 10'-100000000   ->     3 3
     39:     3 10'-1001---00   ->     3 3
     40:     3 10'-101----00   ->     3 3
     41:     3 10'-11-----00   ->     3 3
     42:     3 10'-1------10   ->     3 3
     43:     3 10'-1-------1   ->     3 3
     44:     3 10'-0--------   ->     3 3

-------------------------------------

FSM `$fsm$\P2.d$1137' from module `b20':
-------------------------------------

  Information on FSM $fsm$\P2.d$1137 (\P2.d):

  Number of input signals:   10
  Number of output signals:  32
  Number of state bits:       4

  Input signals:
    0: $flatten\P2.$verific$n341$712 [0]
    1: $flatten\P2.$verific$n10195$685
    2: $flatten\P2.$verific$n1478$617
    3: $flatten\P2.$verific$n1477$616
    4: $flatten\P2.$verific$n1476$615
    5: $flatten\P2.$verific$n1475$614
    6: $flatten\P2.$verific$n1441$613
    7: $flatten\P2.$verific$n1406$612
    8: \P2.state
    9: \P2.B

  Output signals:
    0: $flatten\P2.$verific$n11328$869 [0]
    1: $flatten\P2.$verific$n11328$869 [1]
    2: $flatten\P2.$verific$n11328$869 [2]
    3: $flatten\P2.$verific$n11328$869 [3]
    4: $flatten\P2.$verific$n11328$869 [4]
    5: $flatten\P2.$verific$n11328$869 [5]
    6: $flatten\P2.$verific$n11328$869 [6]
    7: $flatten\P2.$verific$n11328$869 [7]
    8: $flatten\P2.$verific$n11328$869 [8]
    9: $flatten\P2.$verific$n11328$869 [9]
   10: $flatten\P2.$verific$n11328$869 [10]
   11: $flatten\P2.$verific$n11328$869 [11]
   12: $flatten\P2.$verific$n11328$869 [12]
   13: $flatten\P2.$verific$n11328$869 [13]
   14: $flatten\P2.$verific$n11328$869 [14]
   15: $flatten\P2.$verific$n11328$869 [15]
   16: $flatten\P2.$verific$n11328$869 [16]
   17: $flatten\P2.$verific$n11328$869 [17]
   18: $flatten\P2.$verific$n11328$869 [18]
   19: $flatten\P2.$verific$n11328$869 [19]
   20: $flatten\P2.$verific$n11328$869 [20]
   21: $flatten\P2.$verific$n11328$869 [21]
   22: $flatten\P2.$verific$n11328$869 [22]
   23: $flatten\P2.$verific$n11328$869 [23]
   24: $flatten\P2.$verific$n11328$869 [24]
   25: $flatten\P2.$verific$n11328$869 [25]
   26: $flatten\P2.$verific$n11328$869 [26]
   27: $flatten\P2.$verific$n11328$869 [27]
   28: $flatten\P2.$verific$n11328$869 [28]
   29: $flatten\P2.$verific$n11328$869 [29]
   30: $flatten\P2.$verific$n11328$869 [30]
   31: $flatten\P2.$verific$n11328$869 [31]

  State encoding:
    0:     4'---1  <RESET STATE>
    1:     4'--1-
    2:     4'-1--
    3:     4'1---

  Transition Table (state_in, ctrl_in, state_out, ctrl_out):
      0:     0 10'-100000-00   ->     0 0
      1:     0 10'0101----00   ->     0 0
      2:     0 10'111-----00   ->     0 0
      3:     0 10'-1------10   ->     0 0
      4:     0 10'-1-------1   ->     0 0
      5:     0 10'-0--------   ->     0 0
      6:     0 10'-10001--00   ->     1 2
      7:     0 10'-100001-00   ->     2 1
      8:     0 10'-1001---00   ->     3 3
      9:     0 10'1101----00   ->     3 3
     10:     0 10'011-----00   ->     3 3
     11:     1 10'-100000100   ->     0 0
     12:     1 10'-100000000   ->     1 2
     13:     1 10'-10001--00   ->     1 2
     14:     1 10'0101----00   ->     1 2
     15:     1 10'111-----00   ->     1 2
     16:     1 10'-1------10   ->     1 2
     17:     1 10'-1-------1   ->     1 2
     18:     1 10'-0--------   ->     1 2
     19:     1 10'-100001-00   ->     2 1
     20:     1 10'-1001---00   ->     3 3
     21:     1 10'1101----00   ->     3 3
     22:     1 10'011-----00   ->     3 3
     23:     2 10'-100000100   ->     0 0
     24:     2 10'-10001--00   ->     1 2
     25:     2 10'-100000000   ->     2 1
     26:     2 10'-100001-00   ->     2 1
     27:     2 10'0101----00   ->     2 1
     28:     2 10'111-----00   ->     2 1
     29:     2 10'-1------10   ->     2 1
     30:     2 10'-1-------1   ->     2 1
     31:     2 10'-0--------   ->     2 1
     32:     2 10'-1001---00   ->     3 3
     33:     2 10'1101----00   ->     3 3
     34:     2 10'011-----00   ->     3 3
     35:     3 10'-100000100   ->     0 0
     36:     3 10'-10001--00   ->     1 2
     37:     3 10'-100001-00   ->     2 1
     38:     3 10'-100000000   ->     3 3
     39:     3 10'-1001---00   ->     3 3
     40:     3 10'-101----00   ->     3 3
     41:     3 10'-11-----00   ->     3 3
     42:     3 10'-1------10   ->     3 3
     43:     3 10'-1-------1   ->     3 3
     44:     3 10'-0--------   ->     3 3

-------------------------------------

12.8. Executing FSM_MAP pass (mapping FSMs to basic logic).
Mapping FSM `$fsm$\P1.d$1135' from module `\b20'.
Mapping FSM `$fsm$\P2.d$1137' from module `\b20'.

13. Executing OPT pass (performing simple optimizations).

13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b20.
<suppressed ~12 debug messages>

13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b20'.
<suppressed ~324 debug messages>
Removed a total of 108 cells.

13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b20..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~50 debug messages>

13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b20.
Performed a total of 0 changes.

13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b20'.
Removed a total of 0 cells.

13.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $flatten\P2.$verific$reg3_reg$b20.vhd:1015$1086 ($adff) from module b20 (D = $flatten\P2.$verific$n11034$864, Q = \P2.reg3).
Adding EN signal on $flatten\P2.$verific$reg2_reg$b20.vhd:1015$1085 ($adff) from module b20 (D = $flatten\P2.$verific$n10128$837, Q = \P2.reg2).
Adding EN signal on $flatten\P2.$verific$reg1_reg$b20.vhd:1015$1084 ($adff) from module b20 (D = $flatten\P2.$verific$n10095$836, Q = \P2.reg1).
Adding EN signal on $flatten\P2.$verific$reg0_reg$b20.vhd:1015$1083 ($adff) from module b20 (D = $flatten\P2.$verific$n10062$835, Q = \P2.reg0).
Adding EN signal on $flatten\P2.$verific$datao_reg$b20.vhd:1015$1090 ($adff) from module b20 (D = { $flatten\P2.$verific$add_540$b20.vhd:976$1011 $flatten\P2.$verific$n10370$847 [0] }, Q = \P2.datao).
Adding EN signal on $flatten\P2.$verific$B_reg$b20.vhd:1015$1082 ($adff) from module b20 (D = $flatten\P2.$verific$n10835$691, Q = \P2.B).
Adding EN signal on $flatten\P1.$verific$reg3_reg$b20.vhd:505$566 ($adff) from module b20 (D = $flatten\P1.$verific$n10312$336 [2:0], Q = \P1.reg3 [2:0]).
Adding EN signal on $flatten\P1.$verific$reg3_reg$b20.vhd:505$566 ($adff) from module b20 (D = $flatten\P1.$verific$n11178$361 [31:3], Q = \P1.reg3 [31:3]).
Adding EN signal on $flatten\P1.$verific$reg2_reg$b20.vhd:505$565 ($adff) from module b20 (D = $flatten\P1.$verific$n10279$335, Q = \P1.reg2).
Adding EN signal on $flatten\P1.$verific$reg1_reg$b20.vhd:505$564 ($adff) from module b20 (D = $flatten\P1.$verific$n10246$334, Q = \P1.reg1).
Adding EN signal on $flatten\P1.$verific$reg0_reg$b20.vhd:505$563 ($adff) from module b20 (D = $flatten\P1.$verific$n10213$333, Q = \P1.reg0).
Adding EN signal on $flatten\P1.$verific$datao_reg$b20.vhd:505$570 ($adff) from module b20 (D = { $flatten\P1.$verific$add_570$b20.vhd:466$494 $flatten\P1.$verific$n10514$344 [0] }, Q = \P1.datao).
Adding EN signal on $flatten\P1.$verific$B_reg$b20.vhd:505$562 ($adff) from module b20 (D = $flatten\P1.$verific$n10979$191, Q = \P1.B).

13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b20..
Removed 28 unused cells and 140 unused wires.
<suppressed ~29 debug messages>

13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module b20.

13.9. Rerunning OPT passes. (Maybe there is more to do..)

13.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b20..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~42 debug messages>

13.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b20.
Performed a total of 0 changes.

13.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b20'.
<suppressed ~51 debug messages>
Removed a total of 17 cells.

13.13. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 2 on $flatten\P1.$verific$d_reg$b20.vhd:505$561 ($adff) from module b20.
Setting constant 0-bit at position 3 on $flatten\P1.$verific$d_reg$b20.vhd:505$561 ($adff) from module b20.
Setting constant 0-bit at position 4 on $flatten\P1.$verific$d_reg$b20.vhd:505$561 ($adff) from module b20.
Setting constant 0-bit at position 5 on $flatten\P1.$verific$d_reg$b20.vhd:505$561 ($adff) from module b20.
Setting constant 0-bit at position 6 on $flatten\P1.$verific$d_reg$b20.vhd:505$561 ($adff) from module b20.
Setting constant 0-bit at position 7 on $flatten\P1.$verific$d_reg$b20.vhd:505$561 ($adff) from module b20.
Setting constant 0-bit at position 8 on $flatten\P1.$verific$d_reg$b20.vhd:505$561 ($adff) from module b20.
Setting constant 0-bit at position 9 on $flatten\P1.$verific$d_reg$b20.vhd:505$561 ($adff) from module b20.
Setting constant 0-bit at position 10 on $flatten\P1.$verific$d_reg$b20.vhd:505$561 ($adff) from module b20.
Setting constant 0-bit at position 11 on $flatten\P1.$verific$d_reg$b20.vhd:505$561 ($adff) from module b20.
Setting constant 0-bit at position 12 on $flatten\P1.$verific$d_reg$b20.vhd:505$561 ($adff) from module b20.
Setting constant 0-bit at position 13 on $flatten\P1.$verific$d_reg$b20.vhd:505$561 ($adff) from module b20.
Setting constant 0-bit at position 14 on $flatten\P1.$verific$d_reg$b20.vhd:505$561 ($adff) from module b20.
Setting constant 0-bit at position 15 on $flatten\P1.$verific$d_reg$b20.vhd:505$561 ($adff) from module b20.
Setting constant 0-bit at position 16 on $flatten\P1.$verific$d_reg$b20.vhd:505$561 ($adff) from module b20.
Setting constant 0-bit at position 17 on $flatten\P1.$verific$d_reg$b20.vhd:505$561 ($adff) from module b20.
Setting constant 0-bit at position 18 on $flatten\P1.$verific$d_reg$b20.vhd:505$561 ($adff) from module b20.
Setting constant 0-bit at position 19 on $flatten\P1.$verific$d_reg$b20.vhd:505$561 ($adff) from module b20.
Setting constant 0-bit at position 20 on $flatten\P1.$verific$d_reg$b20.vhd:505$561 ($adff) from module b20.
Setting constant 0-bit at position 21 on $flatten\P1.$verific$d_reg$b20.vhd:505$561 ($adff) from module b20.
Setting constant 0-bit at position 22 on $flatten\P1.$verific$d_reg$b20.vhd:505$561 ($adff) from module b20.
Setting constant 0-bit at position 23 on $flatten\P1.$verific$d_reg$b20.vhd:505$561 ($adff) from module b20.
Setting constant 0-bit at position 24 on $flatten\P1.$verific$d_reg$b20.vhd:505$561 ($adff) from module b20.
Setting constant 0-bit at position 25 on $flatten\P1.$verific$d_reg$b20.vhd:505$561 ($adff) from module b20.
Setting constant 0-bit at position 26 on $flatten\P1.$verific$d_reg$b20.vhd:505$561 ($adff) from module b20.
Setting constant 0-bit at position 27 on $flatten\P1.$verific$d_reg$b20.vhd:505$561 ($adff) from module b20.
Setting constant 0-bit at position 28 on $flatten\P1.$verific$d_reg$b20.vhd:505$561 ($adff) from module b20.
Setting constant 0-bit at position 29 on $flatten\P1.$verific$d_reg$b20.vhd:505$561 ($adff) from module b20.
Setting constant 0-bit at position 30 on $flatten\P1.$verific$d_reg$b20.vhd:505$561 ($adff) from module b20.
Setting constant 0-bit at position 31 on $flatten\P1.$verific$d_reg$b20.vhd:505$561 ($adff) from module b20.
Setting constant 0-bit at position 2 on $flatten\P2.$verific$d_reg$b20.vhd:1015$1081 ($adff) from module b20.
Setting constant 0-bit at position 3 on $flatten\P2.$verific$d_reg$b20.vhd:1015$1081 ($adff) from module b20.
Setting constant 0-bit at position 4 on $flatten\P2.$verific$d_reg$b20.vhd:1015$1081 ($adff) from module b20.
Setting constant 0-bit at position 5 on $flatten\P2.$verific$d_reg$b20.vhd:1015$1081 ($adff) from module b20.
Setting constant 0-bit at position 6 on $flatten\P2.$verific$d_reg$b20.vhd:1015$1081 ($adff) from module b20.
Setting constant 0-bit at position 7 on $flatten\P2.$verific$d_reg$b20.vhd:1015$1081 ($adff) from module b20.
Setting constant 0-bit at position 8 on $flatten\P2.$verific$d_reg$b20.vhd:1015$1081 ($adff) from module b20.
Setting constant 0-bit at position 9 on $flatten\P2.$verific$d_reg$b20.vhd:1015$1081 ($adff) from module b20.
Setting constant 0-bit at position 10 on $flatten\P2.$verific$d_reg$b20.vhd:1015$1081 ($adff) from module b20.
Setting constant 0-bit at position 11 on $flatten\P2.$verific$d_reg$b20.vhd:1015$1081 ($adff) from module b20.
Setting constant 0-bit at position 12 on $flatten\P2.$verific$d_reg$b20.vhd:1015$1081 ($adff) from module b20.
Setting constant 0-bit at position 13 on $flatten\P2.$verific$d_reg$b20.vhd:1015$1081 ($adff) from module b20.
Setting constant 0-bit at position 14 on $flatten\P2.$verific$d_reg$b20.vhd:1015$1081 ($adff) from module b20.
Setting constant 0-bit at position 15 on $flatten\P2.$verific$d_reg$b20.vhd:1015$1081 ($adff) from module b20.
Setting constant 0-bit at position 16 on $flatten\P2.$verific$d_reg$b20.vhd:1015$1081 ($adff) from module b20.
Setting constant 0-bit at position 17 on $flatten\P2.$verific$d_reg$b20.vhd:1015$1081 ($adff) from module b20.
Setting constant 0-bit at position 18 on $flatten\P2.$verific$d_reg$b20.vhd:1015$1081 ($adff) from module b20.
Setting constant 0-bit at position 19 on $flatten\P2.$verific$d_reg$b20.vhd:1015$1081 ($adff) from module b20.
Setting constant 0-bit at position 20 on $flatten\P2.$verific$d_reg$b20.vhd:1015$1081 ($adff) from module b20.
Setting constant 0-bit at position 21 on $flatten\P2.$verific$d_reg$b20.vhd:1015$1081 ($adff) from module b20.
Setting constant 0-bit at position 22 on $flatten\P2.$verific$d_reg$b20.vhd:1015$1081 ($adff) from module b20.
Setting constant 0-bit at position 23 on $flatten\P2.$verific$d_reg$b20.vhd:1015$1081 ($adff) from module b20.
Setting constant 0-bit at position 24 on $flatten\P2.$verific$d_reg$b20.vhd:1015$1081 ($adff) from module b20.
Setting constant 0-bit at position 25 on $flatten\P2.$verific$d_reg$b20.vhd:1015$1081 ($adff) from module b20.
Setting constant 0-bit at position 26 on $flatten\P2.$verific$d_reg$b20.vhd:1015$1081 ($adff) from module b20.
Setting constant 0-bit at position 27 on $flatten\P2.$verific$d_reg$b20.vhd:1015$1081 ($adff) from module b20.
Setting constant 0-bit at position 28 on $flatten\P2.$verific$d_reg$b20.vhd:1015$1081 ($adff) from module b20.
Setting constant 0-bit at position 29 on $flatten\P2.$verific$d_reg$b20.vhd:1015$1081 ($adff) from module b20.
Setting constant 0-bit at position 30 on $flatten\P2.$verific$d_reg$b20.vhd:1015$1081 ($adff) from module b20.
Setting constant 0-bit at position 31 on $flatten\P2.$verific$d_reg$b20.vhd:1015$1081 ($adff) from module b20.

13.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b20..
Removed 0 unused cells and 17 unused wires.
<suppressed ~1 debug messages>

13.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module b20.

13.16. Rerunning OPT passes. (Maybe there is more to do..)

13.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b20..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~42 debug messages>

13.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b20.
Performed a total of 0 changes.

13.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b20'.
Removed a total of 0 cells.

13.20. Executing OPT_DFF pass (perform DFF optimizations).

13.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b20..

13.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module b20.

13.23. Finished OPT passes. (There is nothing left to do.)

14. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 20) from port A of cell b20.$verific$LessThan_16$b20.vhd:1076$61 ($lt).
Removed top 1 bits (of 20) from port A of cell b20.$verific$LessThan_17$b20.vhd:1076$62 ($lt).
Removed top 1 bits (of 5) from port B of cell b20.$auto$fsm_map.cc:77:implement_pattern_cache$1325 ($eq).
Removed top 1 bits (of 6) from port B of cell b20.$auto$fsm_map.cc:77:implement_pattern_cache$1315 ($eq).
Removed top 3 bits (of 33) from port Y of cell b20.$flatten\P1.$verific$sub_365$b20.vhd:358$488 ($sub).
Removed top 3 bits (of 33) from port A of cell b20.$flatten\P1.$verific$sub_365$b20.vhd:358$488 ($sub).
Removed top 3 bits (of 33) from port B of cell b20.$flatten\P1.$verific$sub_365$b20.vhd:358$488 ($sub).
Removed top 2 bits (of 32) from port Y of cell b20.$flatten\P1.$verific$add_283$b20.vhd:318$486 ($add).
Removed top 2 bits (of 32) from port A of cell b20.$flatten\P1.$verific$add_283$b20.vhd:318$486 ($add).
Removed top 2 bits (of 32) from port B of cell b20.$flatten\P1.$verific$add_283$b20.vhd:318$486 ($add).
Removed top 30 bits (of 32) from port A of cell b20.$flatten\P1.$verific$equal_179$b20.vhd:246$480 ($eq).
Removed top 30 bits (of 32) from port A of cell b20.$flatten\P1.$verific$equal_178$b20.vhd:245$479 ($eq).
Removed top 31 bits (of 32) from port A of cell b20.$flatten\P1.$verific$equal_177$b20.vhd:244$478 ($eq).
Removed top 32 bits (of 33) from port A of cell b20.$flatten\P1.$verific$sub_168$b20.vhd:243$475 ($sub).
Removed top 1 bits (of 33) from port Y of cell b20.$flatten\P1.$verific$sub_168$b20.vhd:243$475 ($sub).
Removed top 1 bits (of 33) from port B of cell b20.$flatten\P1.$verific$sub_168$b20.vhd:243$475 ($sub).
Removed top 30 bits (of 32) from mux cell b20.$flatten\P1.$verific$mux_145$b20.vhd:226$469 ($mux).
Removed top 2 bits (of 3) from port A of cell b20.$flatten\P1.$verific$equal_143$b20.vhd:224$467 ($eq).
Removed top 1 bits (of 3) from port A of cell b20.$flatten\P1.$verific$equal_142$b20.vhd:223$466 ($eq).
Removed top 1 bits (of 3) from port A of cell b20.$flatten\P1.$verific$equal_141$b20.vhd:221$465 ($eq).
Removed top 30 bits (of 32) from mux cell b20.$flatten\P1.$verific$mux_140$b20.vhd:220$464 ($mux).
Removed top 30 bits (of 32) from mux cell b20.$flatten\P1.$verific$mux_138$b20.vhd:216$462 ($mux).
Removed top 2 bits (of 33) from port B of cell b20.$flatten\P1.$verific$sub_84$b20.vhd:149$444 ($sub).
Removed top 1 bits (of 33) from port Y of cell b20.$flatten\P1.$verific$sub_84$b20.vhd:149$444 ($sub).
Removed top 1 bits (of 33) from port A of cell b20.$flatten\P1.$verific$sub_84$b20.vhd:149$444 ($sub).
Removed top 1 bits (of 32) from port B of cell b20.$flatten\P1.$verific$LessThan_83$b20.vhd:148$443 ($lt).
Removed top 12 bits (of 32) from port A of cell b20.$flatten\P1.$verific$add_61$b20.vhd:113$431 ($add).
Removed top 12 bits (of 32) from port Y of cell b20.$flatten\P1.$verific$add_61$b20.vhd:113$431 ($add).
Removed top 12 bits (of 32) from port B of cell b20.$flatten\P1.$verific$add_61$b20.vhd:113$431 ($add).
Removed top 12 bits (of 32) from port A of cell b20.$flatten\P1.$verific$add_56$b20.vhd:110$429 ($add).
Removed top 12 bits (of 32) from port Y of cell b20.$flatten\P1.$verific$add_56$b20.vhd:110$429 ($add).
Removed top 12 bits (of 32) from port B of cell b20.$flatten\P1.$verific$add_56$b20.vhd:110$429 ($add).
Removed top 1 bits (of 3) from port Y of cell b20.$flatten\P1.$verific$add_44$b20.vhd:96$421 ($add).
Removed top 1 bits (of 3) from port A of cell b20.$flatten\P1.$verific$add_44$b20.vhd:96$421 ($add).
Removed top 25 bits (of 26) from port B of cell b20.$flatten\P1.$verific$add_39$b20.vhd:95$417 ($add).
Removed top 8 bits (of 9) from port Y of cell b20.$flatten\P1.$verific$add_36$b20.vhd:92$411 ($add).
Removed top 8 bits (of 9) from port A of cell b20.$flatten\P1.$verific$add_36$b20.vhd:92$411 ($add).
Removed top 1 bits (of 6) from port B of cell b20.$auto$fsm_map.cc:77:implement_pattern_cache$1529 ($eq).
Removed top 9 bits (of 13) from port Y of cell b20.$flatten\P1.$verific$add_31$b20.vhd:90$404 ($add).
Removed top 9 bits (of 13) from port A of cell b20.$flatten\P1.$verific$add_31$b20.vhd:90$404 ($add).
Removed top 5 bits (of 8) from port Y of cell b20.$flatten\P1.$verific$add_26$b20.vhd:88$397 ($add).
Removed top 5 bits (of 8) from port A of cell b20.$flatten\P1.$verific$add_26$b20.vhd:88$397 ($add).
Removed top 3 bits (of 5) from port Y of cell b20.$flatten\P1.$verific$add_21$b20.vhd:86$390 ($add).
Removed top 3 bits (of 5) from port A of cell b20.$flatten\P1.$verific$add_21$b20.vhd:86$390 ($add).
Removed top 1 bits (of 33) from port Y of cell b20.$flatten\P1.$verific$unary_minus_15$b20.vhd:84$384 ($neg).
Removed top 1 bits (of 33) from port A of cell b20.$flatten\P1.$verific$unary_minus_15$b20.vhd:84$384 ($neg).
Removed top 1 bits (of 32) from port A of cell b20.$flatten\P1.$verific$LessThan_14$b20.vhd:83$383 ($lt).
Removed top 1 bits (of 5) from port B of cell b20.$auto$fsm_map.cc:77:implement_pattern_cache$1539 ($eq).
Removed top 3 bits (of 29) from FF cell b20.$auto$ff.cc:262:slice$1606 ($adffe).
Removed top 1 bits (of 21) from port A of cell b20.$flatten\P2.$verific$sub_634$b20.vhd:1004$1035 ($sub).
Removed top 1 bits (of 21) from port B of cell b20.$flatten\P2.$verific$sub_634$b20.vhd:1004$1035 ($sub).
Removed top 1 bits (of 21) from port A of cell b20.$flatten\P2.$verific$sub_632$b20.vhd:1003$1032 ($sub).
Removed top 1 bits (of 21) from port B of cell b20.$flatten\P2.$verific$sub_632$b20.vhd:1003$1032 ($sub).
Removed top 3 bits (of 32) from FF cell b20.$auto$ff.cc:262:slice$1567 ($adffe).
Removed top 2 bits (of 32) from port Y of cell b20.$flatten\P2.$verific$add_331$b20.vhd:868$993 ($add).
Removed top 2 bits (of 32) from port A of cell b20.$flatten\P2.$verific$add_331$b20.vhd:868$993 ($add).
Removed top 2 bits (of 32) from port B of cell b20.$flatten\P2.$verific$add_331$b20.vhd:868$993 ($add).
Removed top 3 bits (of 33) from port Y of cell b20.$flatten\P2.$verific$sub_297$b20.vhd:848$991 ($sub).
Removed top 3 bits (of 33) from port A of cell b20.$flatten\P2.$verific$sub_297$b20.vhd:848$991 ($sub).
Removed top 3 bits (of 33) from port B of cell b20.$flatten\P2.$verific$sub_297$b20.vhd:848$991 ($sub).
Removed top 30 bits (of 32) from port A of cell b20.$flatten\P2.$verific$equal_171$b20.vhd:756$983 ($eq).
Removed top 30 bits (of 32) from port A of cell b20.$flatten\P2.$verific$equal_170$b20.vhd:755$982 ($eq).
Removed top 31 bits (of 32) from port A of cell b20.$flatten\P2.$verific$equal_169$b20.vhd:754$981 ($eq).
Removed top 30 bits (of 32) from mux cell b20.$flatten\P2.$verific$mux_143$b20.vhd:736$972 ($mux).
Removed top 2 bits (of 3) from port A of cell b20.$flatten\P2.$verific$equal_141$b20.vhd:734$970 ($eq).
Removed top 1 bits (of 3) from port A of cell b20.$flatten\P2.$verific$equal_140$b20.vhd:733$969 ($eq).
Removed top 1 bits (of 3) from port A of cell b20.$flatten\P2.$verific$equal_139$b20.vhd:731$968 ($eq).
Removed top 30 bits (of 32) from mux cell b20.$flatten\P2.$verific$mux_138$b20.vhd:730$967 ($mux).
Removed top 30 bits (of 32) from mux cell b20.$flatten\P2.$verific$mux_136$b20.vhd:726$965 ($mux).
Removed top 2 bits (of 33) from port B of cell b20.$flatten\P2.$verific$sub_82$b20.vhd:659$947 ($sub).
Removed top 1 bits (of 33) from port Y of cell b20.$flatten\P2.$verific$sub_82$b20.vhd:659$947 ($sub).
Removed top 1 bits (of 33) from port A of cell b20.$flatten\P2.$verific$sub_82$b20.vhd:659$947 ($sub).
Removed top 1 bits (of 32) from port B of cell b20.$flatten\P2.$verific$LessThan_81$b20.vhd:658$946 ($lt).
Removed top 13 bits (of 33) from port A of cell b20.$flatten\P2.$verific$sub_59$b20.vhd:623$934 ($sub).
Removed top 13 bits (of 33) from port Y of cell b20.$flatten\P2.$verific$sub_59$b20.vhd:623$934 ($sub).
Removed top 13 bits (of 33) from port B of cell b20.$flatten\P2.$verific$sub_59$b20.vhd:623$934 ($sub).
Removed top 13 bits (of 33) from port A of cell b20.$flatten\P2.$verific$sub_55$b20.vhd:620$932 ($sub).
Removed top 13 bits (of 33) from port Y of cell b20.$flatten\P2.$verific$sub_55$b20.vhd:620$932 ($sub).
Removed top 13 bits (of 33) from port B of cell b20.$flatten\P2.$verific$sub_55$b20.vhd:620$932 ($sub).
Removed top 1 bits (of 3) from port Y of cell b20.$flatten\P2.$verific$add_44$b20.vhd:606$924 ($add).
Removed top 1 bits (of 3) from port A of cell b20.$flatten\P2.$verific$add_44$b20.vhd:606$924 ($add).
Removed top 1 bits (of 30) from port A of cell b20.$flatten\P2.$verific$sub_39$b20.vhd:605$920 ($sub).
Removed top 26 bits (of 30) from port B of cell b20.$flatten\P2.$verific$sub_39$b20.vhd:605$920 ($sub).
Removed top 8 bits (of 9) from port Y of cell b20.$flatten\P2.$verific$add_36$b20.vhd:602$914 ($add).
Removed top 8 bits (of 9) from port A of cell b20.$flatten\P2.$verific$add_36$b20.vhd:602$914 ($add).
Removed top 9 bits (of 13) from port Y of cell b20.$flatten\P2.$verific$add_31$b20.vhd:600$907 ($add).
Removed top 9 bits (of 13) from port A of cell b20.$flatten\P2.$verific$add_31$b20.vhd:600$907 ($add).
Removed top 5 bits (of 8) from port Y of cell b20.$flatten\P2.$verific$add_26$b20.vhd:598$900 ($add).
Removed top 5 bits (of 8) from port A of cell b20.$flatten\P2.$verific$add_26$b20.vhd:598$900 ($add).
Removed top 3 bits (of 5) from port Y of cell b20.$flatten\P2.$verific$add_21$b20.vhd:596$893 ($add).
Removed top 3 bits (of 5) from port A of cell b20.$flatten\P2.$verific$add_21$b20.vhd:596$893 ($add).
Removed top 1 bits (of 33) from port Y of cell b20.$flatten\P2.$verific$unary_minus_15$b20.vhd:594$887 ($neg).
Removed top 1 bits (of 33) from port A of cell b20.$flatten\P2.$verific$unary_minus_15$b20.vhd:594$887 ($neg).
Removed top 1 bits (of 32) from port A of cell b20.$flatten\P2.$verific$LessThan_14$b20.vhd:593$886 ($lt).
Removed top 3 bits (of 32) from mux cell b20.$flatten\P1.$verific$mux_698$b20.vhd:502$544 ($mux).
Removed top 3 bits (of 32) from mux cell b20.$flatten\P2.$verific$mux_667$b20.vhd:1012$1064 ($mux).
Removed top 3 bits (of 32) from mux cell b20.$flatten\P1.$verific$mux_679$b20.vhd:501$530 ($mux).
Removed top 3 bits (of 32) from mux cell b20.$flatten\P2.$verific$mux_648$b20.vhd:1011$1050 ($mux).
Removed top 20 bits (of 21) from wire b20.$flatten\P1.$verific$n10477$341.
Removed top 3 bits (of 32) from wire b20.$flatten\P1.$verific$n10755$352.
Removed top 3 bits (of 32) from wire b20.$flatten\P1.$verific$n11178$361.
Removed top 30 bits (of 32) from wire b20.$flatten\P1.$verific$n11472$366.
Removed top 30 bits (of 32) from wire b20.$flatten\P1.$verific$n1407$234.
Removed top 30 bits (of 32) from wire b20.$flatten\P1.$verific$n1441$235.
Removed top 30 bits (of 32) from wire b20.$flatten\P1.$verific$n1478$236.
Removed top 1 bits (of 33) from wire b20.$flatten\P1.$verific$n184$203.
Removed top 1 bits (of 33) from wire b20.$flatten\P1.$verific$n1987$247.
Removed top 3 bits (of 5) from wire b20.$flatten\P1.$verific$n288$206.
Removed top 6 bits (of 8) from wire b20.$flatten\P1.$verific$n301$208.
Removed top 9 bits (of 13) from wire b20.$flatten\P1.$verific$n318$210.
Removed top 8 bits (of 9) from wire b20.$flatten\P1.$verific$n341$212.
Removed top 2 bits (of 32) from wire b20.$flatten\P1.$verific$n4241$280.
Removed top 1 bits (of 3) from wire b20.$flatten\P1.$verific$n436$216.
Removed top 3 bits (of 33) from wire b20.$flatten\P1.$verific$n5666$294.
Removed top 1 bits (of 32) from wire b20.$flatten\P1.$verific$n862$229.
Removed top 1 bits (of 33) from wire b20.$flatten\P1.$verific$n933$231.
Removed top 1 bits (of 21) from wire b20.$flatten\P2.$verific$n10326$845.
Removed top 3 bits (of 32) from wire b20.$flatten\P2.$verific$n10611$855.
Removed top 3 bits (of 32) from wire b20.$flatten\P2.$verific$n11034$864.
Removed top 30 bits (of 32) from wire b20.$flatten\P2.$verific$n11328$869.
Removed top 30 bits (of 32) from wire b20.$flatten\P2.$verific$n1408$734.
Removed top 31 bits (of 32) from wire b20.$flatten\P2.$verific$n1442$735.
Removed top 30 bits (of 32) from wire b20.$flatten\P2.$verific$n1479$736.
Removed top 1 bits (of 33) from wire b20.$flatten\P2.$verific$n184$703.
Removed top 1 bits (of 3) from wire b20.$flatten\P2.$verific$n439$716.
Removed top 3 bits (of 33) from wire b20.$flatten\P2.$verific$n4798$778.
Removed top 2 bits (of 32) from wire b20.$flatten\P2.$verific$n5506$788.
Removed top 1 bits (of 33) from wire b20.$flatten\P2.$verific$n934$731.

15. Executing PEEPOPT pass (run peephole optimizers).

16. Executing PMUXTREE pass.

17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b20..
Removed 40 unused cells and 137 unused wires.
<suppressed ~41 debug messages>

18. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module b20:
  creating $macc model for $flatten\P1.$verific$add_21$b20.vhd:86$390 ($add).
  creating $macc model for $flatten\P1.$verific$add_26$b20.vhd:88$397 ($add).
  creating $macc model for $flatten\P1.$verific$add_283$b20.vhd:318$486 ($add).
  creating $macc model for $flatten\P1.$verific$add_31$b20.vhd:90$404 ($add).
  creating $macc model for $flatten\P1.$verific$add_36$b20.vhd:92$411 ($add).
  creating $macc model for $flatten\P1.$verific$add_39$b20.vhd:95$417 ($add).
  creating $macc model for $flatten\P1.$verific$add_44$b20.vhd:96$421 ($add).
  creating $macc model for $flatten\P1.$verific$add_56$b20.vhd:110$429 ($add).
  creating $macc model for $flatten\P1.$verific$add_570$b20.vhd:466$493 ($add).
  creating $macc model for $flatten\P1.$verific$add_61$b20.vhd:113$431 ($add).
  creating $macc model for $flatten\P1.$verific$add_662$b20.vhd:493$513 ($add).
  creating $macc model for $flatten\P1.$verific$add_664$b20.vhd:494$515 ($add).
  creating $macc model for $flatten\P1.$verific$mult_667$b20.vhd:497$519 ($mul).
  creating $macc model for $flatten\P1.$verific$sub_168$b20.vhd:243$475 ($sub).
  creating $macc model for $flatten\P1.$verific$sub_365$b20.vhd:358$488 ($sub).
  creating $macc model for $flatten\P1.$verific$sub_84$b20.vhd:149$444 ($sub).
  creating $macc model for $flatten\P1.$verific$unary_minus_15$b20.vhd:84$384 ($neg).
  creating $macc model for $flatten\P2.$verific$add_21$b20.vhd:596$893 ($add).
  creating $macc model for $flatten\P2.$verific$add_26$b20.vhd:598$900 ($add).
  creating $macc model for $flatten\P2.$verific$add_31$b20.vhd:600$907 ($add).
  creating $macc model for $flatten\P2.$verific$add_331$b20.vhd:868$993 ($add).
  creating $macc model for $flatten\P2.$verific$add_36$b20.vhd:602$914 ($add).
  creating $macc model for $flatten\P2.$verific$add_44$b20.vhd:606$924 ($add).
  creating $macc model for $flatten\P2.$verific$add_540$b20.vhd:976$1010 ($add).
  creating $macc model for $flatten\P2.$verific$sub_297$b20.vhd:848$991 ($sub).
  creating $macc model for $flatten\P2.$verific$sub_39$b20.vhd:605$920 ($sub).
  creating $macc model for $flatten\P2.$verific$sub_55$b20.vhd:620$932 ($sub).
  creating $macc model for $flatten\P2.$verific$sub_59$b20.vhd:623$934 ($sub).
  creating $macc model for $flatten\P2.$verific$sub_632$b20.vhd:1003$1032 ($sub).
  creating $macc model for $flatten\P2.$verific$sub_634$b20.vhd:1004$1035 ($sub).
  creating $macc model for $flatten\P2.$verific$sub_82$b20.vhd:659$947 ($sub).
  creating $macc model for $flatten\P2.$verific$unary_minus_15$b20.vhd:594$887 ($neg).
  creating $macc model for $verific$add_24$b20.vhd:1077$66 ($add).
  creating $macc model for $verific$add_3$b20.vhd:1068$48 ($add).
  creating $macc model for $verific$add_30$b20.vhd:1081$68 ($add).
  creating $alu model for $macc $verific$add_30$b20.vhd:1081$68.
  creating $alu model for $macc $verific$add_3$b20.vhd:1068$48.
  creating $alu model for $macc $verific$add_24$b20.vhd:1077$66.
  creating $alu model for $macc $flatten\P2.$verific$unary_minus_15$b20.vhd:594$887.
  creating $alu model for $macc $flatten\P2.$verific$sub_82$b20.vhd:659$947.
  creating $alu model for $macc $flatten\P2.$verific$sub_634$b20.vhd:1004$1035.
  creating $alu model for $macc $flatten\P2.$verific$sub_632$b20.vhd:1003$1032.
  creating $alu model for $macc $flatten\P2.$verific$sub_59$b20.vhd:623$934.
  creating $alu model for $macc $flatten\P2.$verific$sub_55$b20.vhd:620$932.
  creating $alu model for $macc $flatten\P2.$verific$sub_39$b20.vhd:605$920.
  creating $alu model for $macc $flatten\P2.$verific$sub_297$b20.vhd:848$991.
  creating $alu model for $macc $flatten\P2.$verific$add_540$b20.vhd:976$1010.
  creating $alu model for $macc $flatten\P2.$verific$add_44$b20.vhd:606$924.
  creating $alu model for $macc $flatten\P2.$verific$add_36$b20.vhd:602$914.
  creating $alu model for $macc $flatten\P2.$verific$add_331$b20.vhd:868$993.
  creating $alu model for $macc $flatten\P2.$verific$add_31$b20.vhd:600$907.
  creating $alu model for $macc $flatten\P2.$verific$add_26$b20.vhd:598$900.
  creating $alu model for $macc $flatten\P2.$verific$add_21$b20.vhd:596$893.
  creating $alu model for $macc $flatten\P1.$verific$unary_minus_15$b20.vhd:84$384.
  creating $alu model for $macc $flatten\P1.$verific$sub_84$b20.vhd:149$444.
  creating $alu model for $macc $flatten\P1.$verific$sub_365$b20.vhd:358$488.
  creating $alu model for $macc $flatten\P1.$verific$sub_168$b20.vhd:243$475.
  creating $alu model for $macc $flatten\P1.$verific$add_664$b20.vhd:494$515.
  creating $alu model for $macc $flatten\P1.$verific$add_662$b20.vhd:493$513.
  creating $alu model for $macc $flatten\P1.$verific$add_61$b20.vhd:113$431.
  creating $alu model for $macc $flatten\P1.$verific$add_570$b20.vhd:466$493.
  creating $alu model for $macc $flatten\P1.$verific$add_56$b20.vhd:110$429.
  creating $alu model for $macc $flatten\P1.$verific$add_44$b20.vhd:96$421.
  creating $alu model for $macc $flatten\P1.$verific$add_39$b20.vhd:95$417.
  creating $alu model for $macc $flatten\P1.$verific$add_36$b20.vhd:92$411.
  creating $alu model for $macc $flatten\P1.$verific$add_31$b20.vhd:90$404.
  creating $alu model for $macc $flatten\P1.$verific$add_283$b20.vhd:318$486.
  creating $alu model for $macc $flatten\P1.$verific$add_26$b20.vhd:88$397.
  creating $alu model for $macc $flatten\P1.$verific$add_21$b20.vhd:86$390.
  creating $macc cell for $flatten\P1.$verific$mult_667$b20.vhd:497$519: $auto$alumacc.cc:365:replace_macc$1830
  creating $alu model for $flatten\P1.$verific$LessThan_14$b20.vhd:83$383 ($lt): new $alu
  creating $alu model for $flatten\P1.$verific$LessThan_68$b20.vhd:118$437 ($lt): new $alu
  creating $alu model for $flatten\P1.$verific$LessThan_78$b20.vhd:138$441 ($lt): merged with $flatten\P1.$verific$LessThan_68$b20.vhd:118$437.
  creating $alu model for $flatten\P1.$verific$LessThan_83$b20.vhd:148$443 ($lt): new $alu
  creating $alu model for $flatten\P1.$verific$LessThan_87$b20.vhd:151$448 ($lt): new $alu
  creating $alu model for $flatten\P2.$verific$LessThan_14$b20.vhd:593$886 ($lt): new $alu
  creating $alu model for $flatten\P2.$verific$LessThan_66$b20.vhd:628$940 ($lt): new $alu
  creating $alu model for $flatten\P2.$verific$LessThan_76$b20.vhd:648$944 ($lt): merged with $flatten\P2.$verific$LessThan_66$b20.vhd:628$940.
  creating $alu model for $flatten\P2.$verific$LessThan_81$b20.vhd:658$946 ($lt): new $alu
  creating $alu model for $flatten\P2.$verific$LessThan_85$b20.vhd:661$951 ($lt): new $alu
  creating $alu model for $verific$LessThan_11$b20.vhd:1075$56 ($lt): new $alu
  creating $alu model for $verific$LessThan_12$b20.vhd:1075$57 ($lt): new $alu
  creating $alu model for $verific$LessThan_16$b20.vhd:1076$61 ($lt): new $alu
  creating $alu model for $verific$LessThan_17$b20.vhd:1076$62 ($lt): new $alu
  creating $alu cell for $verific$LessThan_17$b20.vhd:1076$62: $auto$alumacc.cc:485:replace_alu$1843
  creating $alu cell for $verific$LessThan_16$b20.vhd:1076$61: $auto$alumacc.cc:485:replace_alu$1848
  creating $alu cell for $verific$LessThan_12$b20.vhd:1075$57: $auto$alumacc.cc:485:replace_alu$1853
  creating $alu cell for $verific$LessThan_11$b20.vhd:1075$56: $auto$alumacc.cc:485:replace_alu$1858
  creating $alu cell for $flatten\P2.$verific$LessThan_85$b20.vhd:661$951: $auto$alumacc.cc:485:replace_alu$1863
  creating $alu cell for $flatten\P2.$verific$LessThan_81$b20.vhd:658$946: $auto$alumacc.cc:485:replace_alu$1874
  creating $alu cell for $flatten\P2.$verific$LessThan_66$b20.vhd:628$940, $flatten\P2.$verific$LessThan_76$b20.vhd:648$944: $auto$alumacc.cc:485:replace_alu$1885
  creating $alu cell for $flatten\P2.$verific$LessThan_14$b20.vhd:593$886: $auto$alumacc.cc:485:replace_alu$1896
  creating $alu cell for $flatten\P1.$verific$LessThan_87$b20.vhd:151$448: $auto$alumacc.cc:485:replace_alu$1901
  creating $alu cell for $flatten\P1.$verific$LessThan_83$b20.vhd:148$443: $auto$alumacc.cc:485:replace_alu$1912
  creating $alu cell for $flatten\P1.$verific$LessThan_68$b20.vhd:118$437, $flatten\P1.$verific$LessThan_78$b20.vhd:138$441: $auto$alumacc.cc:485:replace_alu$1923
  creating $alu cell for $flatten\P1.$verific$LessThan_14$b20.vhd:83$383: $auto$alumacc.cc:485:replace_alu$1934
  creating $alu cell for $flatten\P1.$verific$add_21$b20.vhd:86$390: $auto$alumacc.cc:485:replace_alu$1939
  creating $alu cell for $flatten\P1.$verific$add_26$b20.vhd:88$397: $auto$alumacc.cc:485:replace_alu$1942
  creating $alu cell for $flatten\P1.$verific$add_283$b20.vhd:318$486: $auto$alumacc.cc:485:replace_alu$1945
  creating $alu cell for $flatten\P1.$verific$add_31$b20.vhd:90$404: $auto$alumacc.cc:485:replace_alu$1948
  creating $alu cell for $flatten\P1.$verific$add_36$b20.vhd:92$411: $auto$alumacc.cc:485:replace_alu$1951
  creating $alu cell for $flatten\P1.$verific$add_39$b20.vhd:95$417: $auto$alumacc.cc:485:replace_alu$1954
  creating $alu cell for $flatten\P1.$verific$add_44$b20.vhd:96$421: $auto$alumacc.cc:485:replace_alu$1957
  creating $alu cell for $flatten\P1.$verific$add_570$b20.vhd:466$493: $auto$alumacc.cc:485:replace_alu$1960
  creating $alu cell for $flatten\P1.$verific$add_56$b20.vhd:110$429: $auto$alumacc.cc:485:replace_alu$1963
  creating $alu cell for $flatten\P1.$verific$add_662$b20.vhd:493$513: $auto$alumacc.cc:485:replace_alu$1966
  creating $alu cell for $flatten\P1.$verific$add_61$b20.vhd:113$431: $auto$alumacc.cc:485:replace_alu$1969
  creating $alu cell for $flatten\P1.$verific$add_664$b20.vhd:494$515: $auto$alumacc.cc:485:replace_alu$1972
  creating $alu cell for $flatten\P1.$verific$sub_168$b20.vhd:243$475: $auto$alumacc.cc:485:replace_alu$1975
  creating $alu cell for $flatten\P1.$verific$sub_365$b20.vhd:358$488: $auto$alumacc.cc:485:replace_alu$1978
  creating $alu cell for $flatten\P1.$verific$sub_84$b20.vhd:149$444: $auto$alumacc.cc:485:replace_alu$1981
  creating $alu cell for $flatten\P1.$verific$unary_minus_15$b20.vhd:84$384: $auto$alumacc.cc:485:replace_alu$1984
  creating $alu cell for $flatten\P2.$verific$add_21$b20.vhd:596$893: $auto$alumacc.cc:485:replace_alu$1987
  creating $alu cell for $flatten\P2.$verific$add_26$b20.vhd:598$900: $auto$alumacc.cc:485:replace_alu$1990
  creating $alu cell for $flatten\P2.$verific$add_31$b20.vhd:600$907: $auto$alumacc.cc:485:replace_alu$1993
  creating $alu cell for $flatten\P2.$verific$add_331$b20.vhd:868$993: $auto$alumacc.cc:485:replace_alu$1996
  creating $alu cell for $flatten\P2.$verific$add_36$b20.vhd:602$914: $auto$alumacc.cc:485:replace_alu$1999
  creating $alu cell for $flatten\P2.$verific$add_44$b20.vhd:606$924: $auto$alumacc.cc:485:replace_alu$2002
  creating $alu cell for $flatten\P2.$verific$add_540$b20.vhd:976$1010: $auto$alumacc.cc:485:replace_alu$2005
  creating $alu cell for $flatten\P2.$verific$sub_297$b20.vhd:848$991: $auto$alumacc.cc:485:replace_alu$2008
  creating $alu cell for $flatten\P2.$verific$sub_39$b20.vhd:605$920: $auto$alumacc.cc:485:replace_alu$2011
  creating $alu cell for $flatten\P2.$verific$sub_55$b20.vhd:620$932: $auto$alumacc.cc:485:replace_alu$2014
  creating $alu cell for $flatten\P2.$verific$sub_59$b20.vhd:623$934: $auto$alumacc.cc:485:replace_alu$2017
  creating $alu cell for $flatten\P2.$verific$sub_632$b20.vhd:1003$1032: $auto$alumacc.cc:485:replace_alu$2020
  creating $alu cell for $flatten\P2.$verific$sub_634$b20.vhd:1004$1035: $auto$alumacc.cc:485:replace_alu$2023
  creating $alu cell for $flatten\P2.$verific$sub_82$b20.vhd:659$947: $auto$alumacc.cc:485:replace_alu$2026
  creating $alu cell for $flatten\P2.$verific$unary_minus_15$b20.vhd:594$887: $auto$alumacc.cc:485:replace_alu$2029
  creating $alu cell for $verific$add_24$b20.vhd:1077$66: $auto$alumacc.cc:485:replace_alu$2032
  creating $alu cell for $verific$add_3$b20.vhd:1068$48: $auto$alumacc.cc:485:replace_alu$2035
  creating $alu cell for $verific$add_30$b20.vhd:1081$68: $auto$alumacc.cc:485:replace_alu$2038
  created 46 $alu and 1 $macc cells.

19. Executing OPT pass (performing simple optimizations).

19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b20.
<suppressed ~10 debug messages>

19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b20'.
Removed a total of 0 cells.

19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b20..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~42 debug messages>

19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b20.
Performed a total of 0 changes.

19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b20'.
Removed a total of 0 cells.

19.6. Executing OPT_DFF pass (perform DFF optimizations).

19.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b20..
Removed 4 unused cells and 24 unused wires.
<suppressed ~5 debug messages>

19.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module b20.

19.9. Rerunning OPT passes. (Maybe there is more to do..)

19.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b20..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~42 debug messages>

19.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b20.
Performed a total of 0 changes.

19.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b20'.
Removed a total of 0 cells.

19.13. Executing OPT_DFF pass (perform DFF optimizations).

19.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b20..

19.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module b20.

19.16. Finished OPT passes. (There is nothing left to do.)

20. Executing MEMORY pass.

20.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

20.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

20.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

20.4. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

20.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b20..

20.6. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

20.7. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

20.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b20..

20.9. Executing MEMORY_COLLECT pass (generating $mem cells).

21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b20..

22. Executing OPT_EXPR pass (perform const folding).
Optimizing module b20.
<suppressed ~4 debug messages>

23. Executing SIMPLEMAP pass (map simple cells to gate primitives).
Mapping b20.$auto$alumacc.cc:67:get_gt$1870 ($or).
Mapping b20.$auto$alumacc.cc:67:get_gt$1881 ($or).
Mapping b20.$auto$alumacc.cc:67:get_gt$1892 ($or).
Mapping b20.$auto$alumacc.cc:67:get_gt$1908 ($or).
Mapping b20.$auto$alumacc.cc:67:get_gt$1919 ($or).
Mapping b20.$auto$alumacc.cc:67:get_gt$1930 ($or).
Mapping b20.$auto$alumacc.cc:68:get_gt$1872 ($not).
Mapping b20.$auto$alumacc.cc:68:get_gt$1894 ($not).
Mapping b20.$auto$alumacc.cc:68:get_gt$1910 ($not).
Mapping b20.$auto$alumacc.cc:68:get_gt$1932 ($not).
Mapping b20.$auto$alumacc.cc:75:get_eq$1868 ($reduce_and).
Mapping b20.$auto$alumacc.cc:75:get_eq$1879 ($reduce_and).
Mapping b20.$auto$alumacc.cc:75:get_eq$1890 ($reduce_and).
Mapping b20.$auto$alumacc.cc:75:get_eq$1906 ($reduce_and).
Mapping b20.$auto$alumacc.cc:75:get_eq$1917 ($reduce_and).
Mapping b20.$auto$alumacc.cc:75:get_eq$1928 ($reduce_and).
Mapping b20.$auto$alumacc.cc:89:get_cf$1846 ($not).
Mapping b20.$auto$alumacc.cc:89:get_cf$1851 ($not).
Mapping b20.$auto$alumacc.cc:89:get_cf$1856 ($not).
Mapping b20.$auto$alumacc.cc:89:get_cf$1861 ($not).
Mapping b20.$auto$alumacc.cc:89:get_cf$1866 ($not).
Mapping b20.$auto$alumacc.cc:89:get_cf$1877 ($not).
Mapping b20.$auto$alumacc.cc:89:get_cf$1888 ($not).
Mapping b20.$auto$alumacc.cc:89:get_cf$1904 ($not).
Mapping b20.$auto$alumacc.cc:89:get_cf$1915 ($not).
Mapping b20.$auto$alumacc.cc:89:get_cf$1926 ($not).
Mapping b20.$auto$ff.cc:262:slice$1567 ($adffe).
Mapping b20.$auto$ff.cc:262:slice$1568 ($adffe).
Mapping b20.$auto$ff.cc:262:slice$1575 ($adffe).
Mapping b20.$auto$ff.cc:262:slice$1582 ($adffe).
Mapping b20.$auto$ff.cc:262:slice$1589 ($adffe).
Mapping b20.$auto$ff.cc:262:slice$1594 ($adffe).
Mapping b20.$auto$ff.cc:262:slice$1599 ($adffe).
Mapping b20.$auto$ff.cc:262:slice$1606 ($adffe).
Mapping b20.$auto$ff.cc:262:slice$1607 ($adffe).
Mapping b20.$auto$ff.cc:262:slice$1614 ($adffe).
Mapping b20.$auto$ff.cc:262:slice$1621 ($adffe).
Mapping b20.$auto$ff.cc:262:slice$1628 ($adffe).
Mapping b20.$auto$ff.cc:262:slice$1633 ($adffe).
Mapping b20.$auto$ff.cc:262:slice$1638 ($adff).
Mapping b20.$auto$ff.cc:262:slice$1639 ($adff).
Mapping b20.$auto$fsm_map.cc:105:implement_pattern_cache$1300 ($reduce_or).
Mapping b20.$auto$fsm_map.cc:105:implement_pattern_cache$1349 ($reduce_or).
Mapping b20.$auto$fsm_map.cc:105:implement_pattern_cache$1514 ($reduce_or).
Mapping b20.$auto$fsm_map.cc:105:implement_pattern_cache$1563 ($reduce_or).
Mapping b20.$auto$fsm_map.cc:121:implement_pattern_cache$1148 ($and).
Mapping b20.$auto$fsm_map.cc:121:implement_pattern_cache$1152 ($and).
Mapping b20.$auto$fsm_map.cc:121:implement_pattern_cache$1156 ($and).
Mapping b20.$auto$fsm_map.cc:121:implement_pattern_cache$1160 ($and).
Mapping b20.$auto$fsm_map.cc:121:implement_pattern_cache$1164 ($and).
Mapping b20.$auto$fsm_map.cc:121:implement_pattern_cache$1168 ($and).
Mapping b20.$auto$fsm_map.cc:121:implement_pattern_cache$1173 ($and).
Mapping b20.$auto$fsm_map.cc:121:implement_pattern_cache$1187 ($and).
Mapping b20.$auto$fsm_map.cc:121:implement_pattern_cache$1191 ($and).
Mapping b20.$auto$fsm_map.cc:121:implement_pattern_cache$1195 ($and).
Mapping b20.$auto$fsm_map.cc:121:implement_pattern_cache$1200 ($and).
Mapping b20.$auto$fsm_map.cc:121:implement_pattern_cache$1214 ($and).
Mapping b20.$auto$fsm_map.cc:121:implement_pattern_cache$1218 ($and).
Mapping b20.$auto$fsm_map.cc:121:implement_pattern_cache$1222 ($and).
Mapping b20.$auto$fsm_map.cc:121:implement_pattern_cache$1227 ($and).
Mapping b20.$auto$fsm_map.cc:121:implement_pattern_cache$1245 ($and).
Mapping b20.$auto$fsm_map.cc:121:implement_pattern_cache$1249 ($and).
Mapping b20.$auto$fsm_map.cc:121:implement_pattern_cache$1253 ($and).
Mapping b20.$auto$fsm_map.cc:121:implement_pattern_cache$1260 ($and).
Mapping b20.$auto$fsm_map.cc:121:implement_pattern_cache$1268 ($and).
Mapping b20.$auto$fsm_map.cc:121:implement_pattern_cache$1280 ($and).
Mapping b20.$auto$fsm_map.cc:121:implement_pattern_cache$1290 ($and).
Mapping b20.$auto$fsm_map.cc:121:implement_pattern_cache$1296 ($and).
Mapping b20.$auto$fsm_map.cc:121:implement_pattern_cache$1302 ($and).
Mapping b20.$auto$fsm_map.cc:121:implement_pattern_cache$1309 ($and).
Mapping b20.$auto$fsm_map.cc:121:implement_pattern_cache$1317 ($and).
Mapping b20.$auto$fsm_map.cc:121:implement_pattern_cache$1323 ($and).
Mapping b20.$auto$fsm_map.cc:121:implement_pattern_cache$1329 ($and).
Mapping b20.$auto$fsm_map.cc:121:implement_pattern_cache$1333 ($and).
Mapping b20.$auto$fsm_map.cc:121:implement_pattern_cache$1339 ($and).
Mapping b20.$auto$fsm_map.cc:121:implement_pattern_cache$1345 ($and).
Mapping b20.$auto$fsm_map.cc:121:implement_pattern_cache$1351 ($and).
Mapping b20.$auto$fsm_map.cc:121:implement_pattern_cache$1362 ($and).
Mapping b20.$auto$fsm_map.cc:121:implement_pattern_cache$1366 ($and).
Mapping b20.$auto$fsm_map.cc:121:implement_pattern_cache$1370 ($and).
Mapping b20.$auto$fsm_map.cc:121:implement_pattern_cache$1374 ($and).
Mapping b20.$auto$fsm_map.cc:121:implement_pattern_cache$1378 ($and).
Mapping b20.$auto$fsm_map.cc:121:implement_pattern_cache$1382 ($and).
Mapping b20.$auto$fsm_map.cc:121:implement_pattern_cache$1387 ($and).
Mapping b20.$auto$fsm_map.cc:121:implement_pattern_cache$1401 ($and).
Mapping b20.$auto$fsm_map.cc:121:implement_pattern_cache$1405 ($and).
Mapping b20.$auto$fsm_map.cc:121:implement_pattern_cache$1409 ($and).
Mapping b20.$auto$fsm_map.cc:121:implement_pattern_cache$1414 ($and).
Mapping b20.$auto$fsm_map.cc:121:implement_pattern_cache$1424 ($and).
Mapping b20.$auto$fsm_map.cc:121:implement_pattern_cache$1428 ($and).
Mapping b20.$auto$fsm_map.cc:121:implement_pattern_cache$1432 ($and).
Mapping b20.$auto$fsm_map.cc:121:implement_pattern_cache$1436 ($and).
Mapping b20.$auto$fsm_map.cc:121:implement_pattern_cache$1441 ($and).
Mapping b20.$auto$fsm_map.cc:121:implement_pattern_cache$1455 ($and).
Mapping b20.$auto$fsm_map.cc:121:implement_pattern_cache$1459 ($and).
Mapping b20.$auto$fsm_map.cc:121:implement_pattern_cache$1463 ($and).
Mapping b20.$auto$fsm_map.cc:121:implement_pattern_cache$1467 ($and).
Mapping b20.$auto$fsm_map.cc:121:implement_pattern_cache$1474 ($and).
Mapping b20.$auto$fsm_map.cc:121:implement_pattern_cache$1482 ($and).
Mapping b20.$auto$fsm_map.cc:121:implement_pattern_cache$1488 ($and).
Mapping b20.$auto$fsm_map.cc:121:implement_pattern_cache$1504 ($and).
Mapping b20.$auto$fsm_map.cc:121:implement_pattern_cache$1510 ($and).
Mapping b20.$auto$fsm_map.cc:121:implement_pattern_cache$1516 ($and).
Mapping b20.$auto$fsm_map.cc:121:implement_pattern_cache$1523 ($and).
Mapping b20.$auto$fsm_map.cc:121:implement_pattern_cache$1531 ($and).
Mapping b20.$auto$fsm_map.cc:121:implement_pattern_cache$1543 ($and).
Mapping b20.$auto$fsm_map.cc:121:implement_pattern_cache$1553 ($and).
Mapping b20.$auto$fsm_map.cc:121:implement_pattern_cache$1559 ($and).
Mapping b20.$auto$fsm_map.cc:121:implement_pattern_cache$1565 ($and).
Mapping b20.$auto$fsm_map.cc:144:implement_pattern_cache$1169 ($reduce_or).
Mapping b20.$auto$fsm_map.cc:144:implement_pattern_cache$1196 ($reduce_or).
Mapping b20.$auto$fsm_map.cc:144:implement_pattern_cache$1223 ($reduce_or).
Mapping b20.$auto$fsm_map.cc:144:implement_pattern_cache$1254 ($reduce_or).
Mapping b20.$auto$fsm_map.cc:144:implement_pattern_cache$1303 ($reduce_or).
Mapping b20.$auto$fsm_map.cc:144:implement_pattern_cache$1352 ($reduce_or).
Mapping b20.$auto$fsm_map.cc:144:implement_pattern_cache$1383 ($reduce_or).
Mapping b20.$auto$fsm_map.cc:144:implement_pattern_cache$1410 ($reduce_or).
Mapping b20.$auto$fsm_map.cc:144:implement_pattern_cache$1437 ($reduce_or).
Mapping b20.$auto$fsm_map.cc:144:implement_pattern_cache$1468 ($reduce_or).
Mapping b20.$auto$fsm_map.cc:144:implement_pattern_cache$1517 ($reduce_or).
Mapping b20.$auto$fsm_map.cc:144:implement_pattern_cache$1566 ($reduce_or).
Mapping b20.$auto$fsm_map.cc:172:map_fsm$1140 ($adff).
Mapping b20.$auto$fsm_map.cc:172:map_fsm$1354 ($adff).
Mapping b20.$auto$fsm_map.cc:77:implement_pattern_cache$1144 ($eq).
Mapping b20.$auto$fsm_map.cc:77:implement_pattern_cache$1146 ($eq).
Mapping b20.$auto$fsm_map.cc:77:implement_pattern_cache$1262 ($eq).
Mapping b20.$auto$fsm_map.cc:77:implement_pattern_cache$1305 ($eq).
Mapping b20.$auto$fsm_map.cc:77:implement_pattern_cache$1311 ($eq).
Mapping b20.$auto$fsm_map.cc:77:implement_pattern_cache$1313 ($eq).
Mapping b20.$auto$fsm_map.cc:77:implement_pattern_cache$1315 ($eq).
Mapping b20.$auto$fsm_map.cc:77:implement_pattern_cache$1319 ($eq).
Mapping b20.$auto$fsm_map.cc:77:implement_pattern_cache$1321 ($eq).
Mapping b20.$auto$fsm_map.cc:77:implement_pattern_cache$1325 ($eq).
Mapping b20.$auto$fsm_map.cc:77:implement_pattern_cache$1327 ($eq).
Mapping b20.$auto$fsm_map.cc:77:implement_pattern_cache$1331 ($eq).
Mapping b20.$auto$fsm_map.cc:77:implement_pattern_cache$1335 ($eq).
Mapping b20.$auto$fsm_map.cc:77:implement_pattern_cache$1341 ($eq).
Mapping b20.$auto$fsm_map.cc:77:implement_pattern_cache$1347 ($not).
Mapping b20.$auto$fsm_map.cc:77:implement_pattern_cache$1358 ($eq).
Mapping b20.$auto$fsm_map.cc:77:implement_pattern_cache$1360 ($eq).
Mapping b20.$auto$fsm_map.cc:77:implement_pattern_cache$1476 ($eq).
Mapping b20.$auto$fsm_map.cc:77:implement_pattern_cache$1519 ($eq).
Mapping b20.$auto$fsm_map.cc:77:implement_pattern_cache$1525 ($eq).
Mapping b20.$auto$fsm_map.cc:77:implement_pattern_cache$1527 ($eq).
Mapping b20.$auto$fsm_map.cc:77:implement_pattern_cache$1529 ($eq).
Mapping b20.$auto$fsm_map.cc:77:implement_pattern_cache$1533 ($eq).
Mapping b20.$auto$fsm_map.cc:77:implement_pattern_cache$1535 ($eq).
Mapping b20.$auto$fsm_map.cc:77:implement_pattern_cache$1539 ($eq).
Mapping b20.$auto$fsm_map.cc:77:implement_pattern_cache$1541 ($eq).
Mapping b20.$auto$fsm_map.cc:77:implement_pattern_cache$1545 ($eq).
Mapping b20.$auto$fsm_map.cc:77:implement_pattern_cache$1549 ($eq).
Mapping b20.$auto$fsm_map.cc:77:implement_pattern_cache$1555 ($eq).
Mapping b20.$auto$fsm_map.cc:77:implement_pattern_cache$1561 ($not).
Mapping b20.$auto$opt_dff.cc:195:make_patterns_logic$1596 ($ne).
Mapping b20.$auto$opt_dff.cc:195:make_patterns_logic$1635 ($ne).
Mapping b20.$auto$opt_dff.cc:210:make_patterns_logic$1569 ($not).
Mapping b20.$auto$opt_dff.cc:210:make_patterns_logic$1571 ($not).
Mapping b20.$auto$opt_dff.cc:210:make_patterns_logic$1600 ($not).
Mapping b20.$auto$opt_dff.cc:210:make_patterns_logic$1602 ($not).
Mapping b20.$auto$opt_dff.cc:220:make_patterns_logic$1574 ($reduce_and).
Mapping b20.$auto$opt_dff.cc:220:make_patterns_logic$1593 ($reduce_and).
Mapping b20.$auto$opt_dff.cc:220:make_patterns_logic$1598 ($reduce_and).
Mapping b20.$auto$opt_dff.cc:220:make_patterns_logic$1605 ($reduce_and).
Mapping b20.$auto$opt_dff.cc:220:make_patterns_logic$1632 ($reduce_and).
Mapping b20.$auto$opt_dff.cc:220:make_patterns_logic$1637 ($reduce_and).
Mapping b20.$auto$opt_reduce.cc:128:opt_pmux$1095 ($reduce_or).
Mapping b20.$auto$opt_reduce.cc:128:opt_pmux$1097 ($reduce_or).
Mapping b20.$auto$opt_reduce.cc:128:opt_pmux$1099 ($reduce_or).
Mapping b20.$auto$opt_reduce.cc:128:opt_pmux$1101 ($reduce_or).
Mapping b20.$auto$opt_reduce.cc:128:opt_pmux$1127 ($reduce_or).
Mapping b20.$auto$opt_reduce.cc:128:opt_pmux$1129 ($reduce_or).
Mapping b20.$auto$opt_reduce.cc:128:opt_pmux$1131 ($reduce_or).
Mapping b20.$auto$opt_reduce.cc:128:opt_pmux$1133 ($reduce_or).
Mapping b20.$auto$pmuxtree.cc:65:recursive_mux_generator$1674 ($mux).
Mapping b20.$auto$pmuxtree.cc:65:recursive_mux_generator$1676 ($mux).
Mapping b20.$auto$pmuxtree.cc:65:recursive_mux_generator$1682 ($mux).
Mapping b20.$auto$pmuxtree.cc:65:recursive_mux_generator$1684 ($mux).
Mapping b20.$auto$pmuxtree.cc:65:recursive_mux_generator$1690 ($mux).
Mapping b20.$auto$pmuxtree.cc:65:recursive_mux_generator$1692 ($mux).
Mapping b20.$auto$pmuxtree.cc:65:recursive_mux_generator$1698 ($mux).
Mapping b20.$auto$pmuxtree.cc:65:recursive_mux_generator$1700 ($mux).
Mapping b20.$auto$pmuxtree.cc:65:recursive_mux_generator$1706 ($mux).
Mapping b20.$auto$pmuxtree.cc:65:recursive_mux_generator$1708 ($mux).
Mapping b20.$auto$pmuxtree.cc:65:recursive_mux_generator$1714 ($mux).
Mapping b20.$auto$pmuxtree.cc:65:recursive_mux_generator$1716 ($mux).
Mapping b20.$auto$pmuxtree.cc:65:recursive_mux_generator$1722 ($mux).
Mapping b20.$auto$pmuxtree.cc:65:recursive_mux_generator$1724 ($mux).
Mapping b20.$auto$pmuxtree.cc:65:recursive_mux_generator$1730 ($mux).
Mapping b20.$auto$pmuxtree.cc:65:recursive_mux_generator$1732 ($mux).
Mapping b20.$auto$pmuxtree.cc:65:recursive_mux_generator$1738 ($mux).
Mapping b20.$auto$pmuxtree.cc:65:recursive_mux_generator$1740 ($mux).
Mapping b20.$auto$pmuxtree.cc:65:recursive_mux_generator$1746 ($mux).
Mapping b20.$auto$pmuxtree.cc:65:recursive_mux_generator$1748 ($mux).
Mapping b20.$auto$pmuxtree.cc:65:recursive_mux_generator$1754 ($mux).
Mapping b20.$auto$pmuxtree.cc:65:recursive_mux_generator$1756 ($mux).
Mapping b20.$auto$pmuxtree.cc:65:recursive_mux_generator$1762 ($mux).
Mapping b20.$auto$pmuxtree.cc:65:recursive_mux_generator$1764 ($mux).
Mapping b20.$auto$pmuxtree.cc:65:recursive_mux_generator$1770 ($mux).
Mapping b20.$auto$pmuxtree.cc:65:recursive_mux_generator$1772 ($mux).
Mapping b20.$auto$pmuxtree.cc:65:recursive_mux_generator$1778 ($mux).
Mapping b20.$auto$pmuxtree.cc:65:recursive_mux_generator$1780 ($mux).
Mapping b20.$auto$pmuxtree.cc:65:recursive_mux_generator$1786 ($mux).
Mapping b20.$auto$pmuxtree.cc:65:recursive_mux_generator$1788 ($mux).
Mapping b20.$auto$pmuxtree.cc:65:recursive_mux_generator$1794 ($mux).
Mapping b20.$auto$pmuxtree.cc:65:recursive_mux_generator$1796 ($mux).
Mapping b20.$auto$pmuxtree.cc:65:recursive_mux_generator$1802 ($mux).
Mapping b20.$auto$pmuxtree.cc:65:recursive_mux_generator$1804 ($mux).
Mapping b20.$auto$pmuxtree.cc:65:recursive_mux_generator$1810 ($mux).
Mapping b20.$auto$pmuxtree.cc:65:recursive_mux_generator$1812 ($mux).
Mapping b20.$auto$pmuxtree.cc:65:recursive_mux_generator$1818 ($mux).
Mapping b20.$auto$pmuxtree.cc:65:recursive_mux_generator$1820 ($mux).
Mapping b20.$auto$pmuxtree.cc:65:recursive_mux_generator$1826 ($mux).
Mapping b20.$auto$pmuxtree.cc:65:recursive_mux_generator$1828 ($mux).
Mapping b20.$flatten\P1.$verific$IR_reg$b20.vhd:505$560 ($adff).
Mapping b20.$flatten\P1.$verific$Mux_132$b20.vhd:210$458 ($bmux).
Mapping b20.$flatten\P1.$verific$Mux_637$b20.vhd:479$500 ($bmux).
Mapping b20.$flatten\P1.$verific$Mux_652$b20.vhd:488$506 ($bmux).
Mapping b20.$flatten\P1.$verific$Mux_658$b20.vhd:488$512 ($bmux).
Mapping b20.$flatten\P1.$verific$Mux_67$b20.vhd:116$436 ($bmux).
Mapping b20.$flatten\P1.$verific$addr_reg$b20.vhd:505$567 ($adff).
Mapping b20.$flatten\P1.$verific$equal_134$b20.vhd:212$459 ($eq).
Mapping b20.$flatten\P1.$verific$equal_136$b20.vhd:213$461 ($eq).
Mapping b20.$flatten\P1.$verific$equal_139$b20.vhd:217$463 ($eq).
Mapping b20.$flatten\P1.$verific$equal_141$b20.vhd:221$465 ($eq).
Mapping b20.$flatten\P1.$verific$equal_142$b20.vhd:223$466 ($eq).
Mapping b20.$flatten\P1.$verific$equal_143$b20.vhd:224$467 ($eq).
Mapping b20.$flatten\P1.$verific$equal_144$b20.vhd:225$468 ($logic_not).
Mapping b20.$flatten\P1.$verific$equal_176$b20.vhd:243$477 ($logic_not).
Mapping b20.$flatten\P1.$verific$equal_177$b20.vhd:244$478 ($eq).
Mapping b20.$flatten\P1.$verific$equal_178$b20.vhd:245$479 ($eq).
Mapping b20.$flatten\P1.$verific$equal_179$b20.vhd:246$480 ($eq).
Mapping b20.$flatten\P1.$verific$equal_73$b20.vhd:128$439 ($eq).
Mapping b20.$flatten\P1.$verific$i102$b20.vhd:169$451 ($or).
Mapping b20.$flatten\P1.$verific$i105$b20.vhd:174$452 ($or).
Mapping b20.$flatten\P1.$verific$i109$b20.vhd:179$453 ($or).
Mapping b20.$flatten\P1.$verific$i113$b20.vhd:184$454 ($or).
Mapping b20.$flatten\P1.$verific$i116$b20.vhd:189$455 ($or).
Mapping b20.$flatten\P1.$verific$i123$b20.vhd:197$456 ($or).
Mapping b20.$flatten\P1.$verific$i131$b20.vhd:205$457 ($or).
Mapping b20.$flatten\P1.$verific$i20$b20.vhd:86$389 ($and).
Mapping b20.$flatten\P1.$verific$i25$b20.vhd:88$396 ($and).
Mapping b20.$flatten\P1.$verific$i30$b20.vhd:90$403 ($and).
Mapping b20.$flatten\P1.$verific$i35$b20.vhd:92$410 ($and).
Mapping b20.$flatten\P1.$verific$i43$b20.vhd:96$420 ($and).
Mapping b20.$flatten\P1.$verific$i569$b20.vhd:466$492 ($and).
Mapping b20.$flatten\P1.$verific$i675$b20.vhd:501$525 ($mux).
Mapping b20.$flatten\P1.$verific$i691$b20.vhd:502$537 ($mux).
Mapping b20.$flatten\P1.$verific$i692$b20.vhd:502$538 ($mux).
Mapping b20.$flatten\P1.$verific$i700$b20.vhd:502$545 ($mux).
Mapping b20.$flatten\P1.$verific$i704$b20.vhd:504$549 ($mux).
Mapping b20.$flatten\P1.$verific$i723$b20.vhd:504$558 ($mux).
Mapping b20.$flatten\P1.$verific$i77$b20.vhd:133$440 ($not).
Mapping b20.$flatten\P1.$verific$i98$b20.vhd:164$450 ($or).
Mapping b20.$flatten\P1.$verific$mux_138$b20.vhd:216$462 ($mux).
Mapping b20.$flatten\P1.$verific$mux_140$b20.vhd:220$464 ($mux).
Mapping b20.$flatten\P1.$verific$mux_145$b20.vhd:226$469 ($mux).
Mapping b20.$flatten\P1.$verific$mux_146$b20.vhd:226$470 ($mux).
Mapping b20.$flatten\P1.$verific$mux_147$b20.vhd:226$471 ($mux).
Mapping b20.$flatten\P1.$verific$mux_148$b20.vhd:226$472 ($mux).
Mapping b20.$flatten\P1.$verific$mux_149$b20.vhd:226$473 ($mux).
Mapping b20.$flatten\P1.$verific$mux_150$b20.vhd:226$474 ($mux).
Mapping b20.$flatten\P1.$verific$mux_17$b20.vhd:85$387 ($mux).
Mapping b20.$flatten\P1.$verific$mux_50$b20.vhd:102$427 ($bmux).
Mapping b20.$flatten\P1.$verific$mux_577$b20.vhd:470$498 ($mux).
Mapping b20.$flatten\P1.$verific$mux_65$b20.vhd:116$434 ($bmux).
Mapping b20.$flatten\P1.$verific$mux_651$b20.vhd:488$505 ($bmux).
Mapping b20.$flatten\P1.$verific$mux_654$b20.vhd:488$508 ($bmux).
Mapping b20.$flatten\P1.$verific$mux_655$b20.vhd:488$509 ($bmux).
Mapping b20.$flatten\P1.$verific$mux_656$b20.vhd:488$510 ($bmux).
Mapping b20.$flatten\P1.$verific$mux_657$b20.vhd:488$511 ($bmux).
Mapping b20.$flatten\P1.$verific$mux_66$b20.vhd:116$435 ($bmux).
Mapping b20.$flatten\P1.$verific$mux_666$b20.vhd:497$517 ($bmux).
Mapping b20.$flatten\P1.$verific$mux_673$b20.vhd:501$524 ($mux).
Mapping b20.$flatten\P1.$verific$mux_679$b20.vhd:501$530 ($mux).
Mapping b20.$flatten\P1.$verific$mux_689$b20.vhd:502$536 ($mux).
Mapping b20.$flatten\P1.$verific$mux_698$b20.vhd:502$544 ($mux).
Mapping b20.$flatten\P1.$verific$mux_702$b20.vhd:504$548 ($mux).
Mapping b20.$flatten\P1.$verific$mux_705$b20.vhd:504$550 ($mux).
Mapping b20.$flatten\P1.$verific$mux_738$b20.vhd:456$574 ($bmux).
Mapping b20.$flatten\P1.$verific$mux_748$b20.vhd:479$501 ($bmux).
Mapping b20.$flatten\P1.$verific$mux_86$b20.vhd:150$447 ($mux).
Mapping b20.$flatten\P1.$verific$rd_reg$b20.vhd:505$568 ($adff).
Mapping b20.$flatten\P1.$verific$reduce_nor_180$b20.vhd:248$481 ($not).
Mapping b20.$flatten\P1.$verific$reduce_nor_180$b20.vhd:248$482 ($reduce_or).
Mapping b20.$flatten\P1.$verific$reduce_or_18$b20.vhd:86$388 ($reduce_or).
Mapping b20.$flatten\P1.$verific$reduce_or_23$b20.vhd:88$395 ($reduce_or).
Mapping b20.$flatten\P1.$verific$reduce_or_28$b20.vhd:90$402 ($reduce_or).
Mapping b20.$flatten\P1.$verific$reduce_or_33$b20.vhd:92$409 ($reduce_or).
Mapping b20.$flatten\P1.$verific$reduce_or_41$b20.vhd:96$419 ($reduce_or).
Mapping b20.$flatten\P1.$verific$state_reg$b20.vhd:505$571 ($adff).
Mapping b20.$flatten\P1.$verific$wr_reg$b20.vhd:505$569 ($adff).
Mapping b20.$flatten\P2.$verific$IR_reg$b20.vhd:1015$1080 ($adff).
Mapping b20.$flatten\P2.$verific$Mux_130$b20.vhd:720$961 ($bmux).
Mapping b20.$flatten\P2.$verific$Mux_607$b20.vhd:989$1017 ($bmux).
Mapping b20.$flatten\P2.$verific$Mux_622$b20.vhd:998$1024 ($bmux).
Mapping b20.$flatten\P2.$verific$Mux_628$b20.vhd:998$1030 ($bmux).
Mapping b20.$flatten\P2.$verific$Mux_65$b20.vhd:626$939 ($bmux).
Mapping b20.$flatten\P2.$verific$addr_reg$b20.vhd:1015$1087 ($adff).
Mapping b20.$flatten\P2.$verific$equal_132$b20.vhd:722$962 ($eq).
Mapping b20.$flatten\P2.$verific$equal_134$b20.vhd:723$964 ($eq).
Mapping b20.$flatten\P2.$verific$equal_137$b20.vhd:727$966 ($eq).
Mapping b20.$flatten\P2.$verific$equal_139$b20.vhd:731$968 ($eq).
Mapping b20.$flatten\P2.$verific$equal_140$b20.vhd:733$969 ($eq).
Mapping b20.$flatten\P2.$verific$equal_141$b20.vhd:734$970 ($eq).
Mapping b20.$flatten\P2.$verific$equal_142$b20.vhd:735$971 ($logic_not).
Mapping b20.$flatten\P2.$verific$equal_168$b20.vhd:753$980 ($logic_not).
Mapping b20.$flatten\P2.$verific$equal_169$b20.vhd:754$981 ($eq).
Mapping b20.$flatten\P2.$verific$equal_170$b20.vhd:755$982 ($eq).
Mapping b20.$flatten\P2.$verific$equal_171$b20.vhd:756$983 ($eq).
Mapping b20.$flatten\P2.$verific$equal_71$b20.vhd:638$942 ($eq).
Mapping b20.$flatten\P2.$verific$i100$b20.vhd:679$954 ($or).
Mapping b20.$flatten\P2.$verific$i103$b20.vhd:684$955 ($or).
Mapping b20.$flatten\P2.$verific$i107$b20.vhd:689$956 ($or).
Mapping b20.$flatten\P2.$verific$i111$b20.vhd:694$957 ($or).
Mapping b20.$flatten\P2.$verific$i114$b20.vhd:699$958 ($or).
Mapping b20.$flatten\P2.$verific$i121$b20.vhd:707$959 ($or).
Mapping b20.$flatten\P2.$verific$i129$b20.vhd:715$960 ($or).
Mapping b20.$flatten\P2.$verific$i20$b20.vhd:596$892 ($and).
Mapping b20.$flatten\P2.$verific$i25$b20.vhd:598$899 ($and).
Mapping b20.$flatten\P2.$verific$i30$b20.vhd:600$906 ($and).
Mapping b20.$flatten\P2.$verific$i35$b20.vhd:602$913 ($and).
Mapping b20.$flatten\P2.$verific$i43$b20.vhd:606$923 ($and).
Mapping b20.$flatten\P2.$verific$i539$b20.vhd:976$1009 ($and).
Mapping b20.$flatten\P2.$verific$i644$b20.vhd:1011$1045 ($mux).
Mapping b20.$flatten\P2.$verific$i660$b20.vhd:1012$1057 ($mux).
Mapping b20.$flatten\P2.$verific$i661$b20.vhd:1012$1058 ($mux).
Mapping b20.$flatten\P2.$verific$i669$b20.vhd:1012$1065 ($mux).
Mapping b20.$flatten\P2.$verific$i673$b20.vhd:1014$1069 ($mux).
Mapping b20.$flatten\P2.$verific$i692$b20.vhd:1014$1078 ($mux).
Mapping b20.$flatten\P2.$verific$i75$b20.vhd:643$943 ($not).
Mapping b20.$flatten\P2.$verific$i96$b20.vhd:674$953 ($or).
Mapping b20.$flatten\P2.$verific$mux_136$b20.vhd:726$965 ($mux).
Mapping b20.$flatten\P2.$verific$mux_138$b20.vhd:730$967 ($mux).
Mapping b20.$flatten\P2.$verific$mux_143$b20.vhd:736$972 ($mux).
Mapping b20.$flatten\P2.$verific$mux_144$b20.vhd:736$973 ($mux).
Mapping b20.$flatten\P2.$verific$mux_145$b20.vhd:736$974 ($mux).
Mapping b20.$flatten\P2.$verific$mux_146$b20.vhd:736$975 ($mux).
Mapping b20.$flatten\P2.$verific$mux_147$b20.vhd:736$976 ($mux).
Mapping b20.$flatten\P2.$verific$mux_148$b20.vhd:736$977 ($mux).
Mapping b20.$flatten\P2.$verific$mux_17$b20.vhd:595$890 ($mux).
Mapping b20.$flatten\P2.$verific$mux_234$b20.vhd:806$988 ($bmux).
Mapping b20.$flatten\P2.$verific$mux_50$b20.vhd:612$930 ($bmux).
Mapping b20.$flatten\P2.$verific$mux_547$b20.vhd:980$1015 ($mux).
Mapping b20.$flatten\P2.$verific$mux_606$b20.vhd:989$1016 ($bmux).
Mapping b20.$flatten\P2.$verific$mux_621$b20.vhd:998$1023 ($bmux).
Mapping b20.$flatten\P2.$verific$mux_624$b20.vhd:998$1026 ($bmux).
Mapping b20.$flatten\P2.$verific$mux_625$b20.vhd:998$1027 ($bmux).
Mapping b20.$flatten\P2.$verific$mux_626$b20.vhd:998$1028 ($bmux).
Mapping b20.$flatten\P2.$verific$mux_627$b20.vhd:998$1029 ($bmux).
Mapping b20.$flatten\P2.$verific$mux_636$b20.vhd:1005$1038 ($bmux).
Mapping b20.$flatten\P2.$verific$mux_64$b20.vhd:626$938 ($bmux).
Mapping b20.$flatten\P2.$verific$mux_642$b20.vhd:1011$1044 ($mux).
Mapping b20.$flatten\P2.$verific$mux_648$b20.vhd:1011$1050 ($mux).
Mapping b20.$flatten\P2.$verific$mux_658$b20.vhd:1012$1056 ($mux).
Mapping b20.$flatten\P2.$verific$mux_667$b20.vhd:1012$1064 ($mux).
Mapping b20.$flatten\P2.$verific$mux_671$b20.vhd:1014$1068 ($mux).
Mapping b20.$flatten\P2.$verific$mux_674$b20.vhd:1014$1070 ($mux).
Mapping b20.$flatten\P2.$verific$mux_708$b20.vhd:966$1031 ($bmux).
Mapping b20.$flatten\P2.$verific$mux_84$b20.vhd:660$950 ($mux).
Mapping b20.$flatten\P2.$verific$rd_reg$b20.vhd:1015$1088 ($adff).
Mapping b20.$flatten\P2.$verific$reduce_nor_172$b20.vhd:758$984 ($not).
Mapping b20.$flatten\P2.$verific$reduce_nor_172$b20.vhd:758$985 ($reduce_or).
Mapping b20.$flatten\P2.$verific$reduce_or_18$b20.vhd:596$891 ($reduce_or).
Mapping b20.$flatten\P2.$verific$reduce_or_23$b20.vhd:598$898 ($reduce_or).
Mapping b20.$flatten\P2.$verific$reduce_or_28$b20.vhd:600$905 ($reduce_or).
Mapping b20.$flatten\P2.$verific$reduce_or_33$b20.vhd:602$912 ($reduce_or).
Mapping b20.$flatten\P2.$verific$reduce_or_41$b20.vhd:606$922 ($reduce_or).
Mapping b20.$flatten\P2.$verific$state_reg$b20.vhd:1015$1091 ($adff).
Mapping b20.$flatten\P2.$verific$wr_reg$b20.vhd:1015$1089 ($adff).
Mapping b20.$verific$i10$b20.vhd:1073$54 ($xor).
Mapping b20.$verific$i14$b20.vhd:1075$58 ($not).
Mapping b20.$verific$i15$b20.vhd:1075$59 ($and).
Mapping b20.$verific$i16$b20.vhd:1075$60 ($and).
Mapping b20.$verific$i20$b20.vhd:1076$63 ($and).
Mapping b20.$verific$i21$b20.vhd:1076$64 ($and).
Mapping b20.$verific$i22$b20.vhd:1076$65 ($or).
Mapping b20.$verific$i6$b20.vhd:1071$50 ($not).
Mapping b20.$verific$i7$b20.vhd:1071$51 ($xor).
Mapping b20.$verific$i9$b20.vhd:1073$53 ($not).
Mapping b20.$verific$mux_32$b20.vhd:1082$69 ($mux).
Mapping b20.$verific$mux_33$b20.vhd:1082$70 ($mux).

24. Executing OPT_EXPR pass (perform const folding).
Optimizing module b20.
<suppressed ~4290 debug messages>

25. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b20'.
<suppressed ~7617 debug messages>
Removed a total of 2539 cells.

26. Executing OPT_DFF pass (perform DFF optimizations).

27. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b20..
Removed 175 unused cells and 400 unused wires.
<suppressed ~176 debug messages>

28. Executing OPT pass (performing simple optimizations).

28.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b20.
<suppressed ~269 debug messages>

28.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b20'.
Removed a total of 0 cells.

28.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b20..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

28.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b20.
Performed a total of 0 changes.

28.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b20'.
Removed a total of 0 cells.

28.6. Executing OPT_DFF pass (perform DFF optimizations).

28.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b20..
Removed 0 unused cells and 4 unused wires.
<suppressed ~1 debug messages>

28.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module b20.

28.9. Rerunning OPT passes. (Maybe there is more to do..)

28.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b20..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

28.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b20.
Performed a total of 0 changes.

28.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b20'.
Removed a total of 0 cells.

28.13. Executing OPT_DFF pass (perform DFF optimizations).

28.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b20..

28.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module b20.

28.16. Finished OPT passes. (There is nothing left to do.)

29. Executing OPT pass (performing simple optimizations).

29.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b20.
<suppressed ~155 debug messages>

29.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b20'.
<suppressed ~114 debug messages>
Removed a total of 38 cells.

29.3. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $auto$ff.cc:262:slice$6347 ($_DFF_PP0_) from module b20 (D = $flatten\P1.$verific$n11246$363 [5], Q = \P1.addr [5]).
Adding EN signal on $auto$ff.cc:262:slice$6346 ($_DFF_PP0_) from module b20 (D = $flatten\P1.$verific$n11246$363 [4], Q = \P1.addr [4]).
Adding EN signal on $auto$ff.cc:262:slice$6345 ($_DFF_PP0_) from module b20 (D = $flatten\P1.$verific$n11246$363 [3], Q = \P1.addr [3]).
Adding EN signal on $auto$ff.cc:262:slice$6344 ($_DFF_PP0_) from module b20 (D = $flatten\P1.$verific$n11246$363 [2], Q = \P1.addr [2]).
Adding EN signal on $auto$ff.cc:262:slice$2592 ($_DFFE_PP0P_) from module b20 (D = $flatten\P1.$verific$n10979$191, Q = \P1.B).
Adding EN signal on $auto$ff.cc:262:slice$2559 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$7979 [31], Q = \P1.reg0 [31]).
Adding EN signal on $auto$ff.cc:262:slice$2558 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$7979 [30], Q = \P1.reg0 [30]).
Adding EN signal on $auto$ff.cc:262:slice$2557 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$7979 [29], Q = \P1.reg0 [29]).
Adding EN signal on $auto$ff.cc:262:slice$2556 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$7979 [28], Q = \P1.reg0 [28]).
Adding EN signal on $auto$ff.cc:262:slice$2555 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$7979 [27], Q = \P1.reg0 [27]).
Adding EN signal on $auto$ff.cc:262:slice$2554 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$7979 [26], Q = \P1.reg0 [26]).
Adding EN signal on $auto$ff.cc:262:slice$2553 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$7979 [25], Q = \P1.reg0 [25]).
Adding EN signal on $auto$ff.cc:262:slice$2552 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$7979 [24], Q = \P1.reg0 [24]).
Adding EN signal on $auto$ff.cc:262:slice$2551 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$7979 [23], Q = \P1.reg0 [23]).
Adding EN signal on $auto$ff.cc:262:slice$2550 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$7979 [22], Q = \P1.reg0 [22]).
Adding EN signal on $auto$ff.cc:262:slice$2549 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$7979 [21], Q = \P1.reg0 [21]).
Adding EN signal on $auto$ff.cc:262:slice$2548 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$7979 [20], Q = \P1.reg0 [20]).
Adding EN signal on $auto$ff.cc:262:slice$2547 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$7979 [19], Q = \P1.reg0 [19]).
Adding EN signal on $auto$ff.cc:262:slice$2546 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$7979 [18], Q = \P1.reg0 [18]).
Adding EN signal on $auto$ff.cc:262:slice$2545 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$7979 [17], Q = \P1.reg0 [17]).
Adding EN signal on $auto$ff.cc:262:slice$2544 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$7979 [16], Q = \P1.reg0 [16]).
Adding EN signal on $auto$ff.cc:262:slice$2543 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$7979 [15], Q = \P1.reg0 [15]).
Adding EN signal on $auto$ff.cc:262:slice$2542 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$7979 [14], Q = \P1.reg0 [14]).
Adding EN signal on $auto$ff.cc:262:slice$2541 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$7979 [13], Q = \P1.reg0 [13]).
Adding EN signal on $auto$ff.cc:262:slice$2540 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$7979 [12], Q = \P1.reg0 [12]).
Adding EN signal on $auto$ff.cc:262:slice$2539 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$7979 [11], Q = \P1.reg0 [11]).
Adding EN signal on $auto$ff.cc:262:slice$2538 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$7979 [10], Q = \P1.reg0 [10]).
Adding EN signal on $auto$ff.cc:262:slice$2537 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$7979 [9], Q = \P1.reg0 [9]).
Adding EN signal on $auto$ff.cc:262:slice$2536 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$7979 [8], Q = \P1.reg0 [8]).
Adding EN signal on $auto$ff.cc:262:slice$2535 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$7979 [7], Q = \P1.reg0 [7]).
Adding EN signal on $auto$ff.cc:262:slice$2534 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$7979 [6], Q = \P1.reg0 [6]).
Adding EN signal on $auto$ff.cc:262:slice$2533 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$7979 [5], Q = \P1.reg0 [5]).
Adding EN signal on $auto$ff.cc:262:slice$2532 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$7979 [4], Q = \P1.reg0 [4]).
Adding EN signal on $auto$ff.cc:262:slice$2531 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$7979 [3], Q = \P1.reg0 [3]).
Adding EN signal on $auto$ff.cc:262:slice$2530 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$7979 [2], Q = \P1.reg0 [2]).
Adding EN signal on $auto$ff.cc:262:slice$2529 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$7979 [1], Q = \P1.reg0 [1]).
Adding EN signal on $auto$ff.cc:262:slice$2528 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$7979 [0], Q = \P1.reg0 [0]).
Adding EN signal on $auto$ff.cc:262:slice$2527 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$8463 [31], Q = \P1.reg1 [31]).
Adding EN signal on $auto$ff.cc:262:slice$2526 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$8463 [30], Q = \P1.reg1 [30]).
Adding EN signal on $auto$ff.cc:262:slice$2525 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$8463 [29], Q = \P1.reg1 [29]).
Adding EN signal on $auto$ff.cc:262:slice$2524 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$8463 [28], Q = \P1.reg1 [28]).
Adding EN signal on $auto$ff.cc:262:slice$2523 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$8463 [27], Q = \P1.reg1 [27]).
Adding EN signal on $auto$ff.cc:262:slice$2522 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$8463 [26], Q = \P1.reg1 [26]).
Adding EN signal on $auto$ff.cc:262:slice$2521 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$8463 [25], Q = \P1.reg1 [25]).
Adding EN signal on $auto$ff.cc:262:slice$2520 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$8463 [24], Q = \P1.reg1 [24]).
Adding EN signal on $auto$ff.cc:262:slice$2519 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$8463 [23], Q = \P1.reg1 [23]).
Adding EN signal on $auto$ff.cc:262:slice$2518 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$8463 [22], Q = \P1.reg1 [22]).
Adding EN signal on $auto$ff.cc:262:slice$2517 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$8463 [21], Q = \P1.reg1 [21]).
Adding EN signal on $auto$ff.cc:262:slice$2516 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$8463 [20], Q = \P1.reg1 [20]).
Adding EN signal on $auto$ff.cc:262:slice$2515 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$8463 [19], Q = \P1.reg1 [19]).
Adding EN signal on $auto$ff.cc:262:slice$2514 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$8463 [18], Q = \P1.reg1 [18]).
Adding EN signal on $auto$ff.cc:262:slice$2513 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$8463 [17], Q = \P1.reg1 [17]).
Adding EN signal on $auto$ff.cc:262:slice$2512 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$8463 [16], Q = \P1.reg1 [16]).
Adding EN signal on $auto$ff.cc:262:slice$2511 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$8463 [15], Q = \P1.reg1 [15]).
Adding EN signal on $auto$ff.cc:262:slice$2510 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$8463 [14], Q = \P1.reg1 [14]).
Adding EN signal on $auto$ff.cc:262:slice$2509 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$8463 [13], Q = \P1.reg1 [13]).
Adding EN signal on $auto$ff.cc:262:slice$2508 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$8463 [12], Q = \P1.reg1 [12]).
Adding EN signal on $auto$ff.cc:262:slice$2507 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$8463 [11], Q = \P1.reg1 [11]).
Adding EN signal on $auto$ff.cc:262:slice$2506 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$8463 [10], Q = \P1.reg1 [10]).
Adding EN signal on $auto$ff.cc:262:slice$2505 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$8463 [9], Q = \P1.reg1 [9]).
Adding EN signal on $auto$ff.cc:262:slice$2504 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$8463 [8], Q = \P1.reg1 [8]).
Adding EN signal on $auto$ff.cc:262:slice$2503 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$8463 [7], Q = \P1.reg1 [7]).
Adding EN signal on $auto$ff.cc:262:slice$2502 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$8463 [6], Q = \P1.reg1 [6]).
Adding EN signal on $auto$ff.cc:262:slice$2501 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$8463 [5], Q = \P1.reg1 [5]).
Adding EN signal on $auto$ff.cc:262:slice$2500 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$8463 [4], Q = \P1.reg1 [4]).
Adding EN signal on $auto$ff.cc:262:slice$2499 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$8463 [3], Q = \P1.reg1 [3]).
Adding EN signal on $auto$ff.cc:262:slice$2498 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$8463 [2], Q = \P1.reg1 [2]).
Adding EN signal on $auto$ff.cc:262:slice$2497 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$8463 [1], Q = \P1.reg1 [1]).
Adding EN signal on $auto$ff.cc:262:slice$2496 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$8463 [0], Q = \P1.reg1 [0]).
Adding EN signal on $auto$ff.cc:262:slice$2495 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$8947 [31], Q = \P1.reg2 [31]).
Adding EN signal on $auto$ff.cc:262:slice$2494 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$8947 [30], Q = \P1.reg2 [30]).
Adding EN signal on $auto$ff.cc:262:slice$2493 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$8947 [29], Q = \P1.reg2 [29]).
Adding EN signal on $auto$ff.cc:262:slice$2492 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$8947 [28], Q = \P1.reg2 [28]).
Adding EN signal on $auto$ff.cc:262:slice$2491 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$8947 [27], Q = \P1.reg2 [27]).
Adding EN signal on $auto$ff.cc:262:slice$2490 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$8947 [26], Q = \P1.reg2 [26]).
Adding EN signal on $auto$ff.cc:262:slice$2489 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$8947 [25], Q = \P1.reg2 [25]).
Adding EN signal on $auto$ff.cc:262:slice$2488 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$8947 [24], Q = \P1.reg2 [24]).
Adding EN signal on $auto$ff.cc:262:slice$2487 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$8947 [23], Q = \P1.reg2 [23]).
Adding EN signal on $auto$ff.cc:262:slice$2486 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$8947 [22], Q = \P1.reg2 [22]).
Adding EN signal on $auto$ff.cc:262:slice$2485 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$8947 [21], Q = \P1.reg2 [21]).
Adding EN signal on $auto$ff.cc:262:slice$2484 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$8947 [20], Q = \P1.reg2 [20]).
Adding EN signal on $auto$ff.cc:262:slice$2483 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$8947 [19], Q = \P1.reg2 [19]).
Adding EN signal on $auto$ff.cc:262:slice$2482 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$8947 [18], Q = \P1.reg2 [18]).
Adding EN signal on $auto$ff.cc:262:slice$2481 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$8947 [17], Q = \P1.reg2 [17]).
Adding EN signal on $auto$ff.cc:262:slice$2480 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$8947 [16], Q = \P1.reg2 [16]).
Adding EN signal on $auto$ff.cc:262:slice$2479 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$8947 [15], Q = \P1.reg2 [15]).
Adding EN signal on $auto$ff.cc:262:slice$2478 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$8947 [14], Q = \P1.reg2 [14]).
Adding EN signal on $auto$ff.cc:262:slice$2477 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$8947 [13], Q = \P1.reg2 [13]).
Adding EN signal on $auto$ff.cc:262:slice$2476 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$8947 [12], Q = \P1.reg2 [12]).
Adding EN signal on $auto$ff.cc:262:slice$2475 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$8947 [11], Q = \P1.reg2 [11]).
Adding EN signal on $auto$ff.cc:262:slice$2474 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$8947 [10], Q = \P1.reg2 [10]).
Adding EN signal on $auto$ff.cc:262:slice$2473 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$8947 [9], Q = \P1.reg2 [9]).
Adding EN signal on $auto$ff.cc:262:slice$2472 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$8947 [8], Q = \P1.reg2 [8]).
Adding EN signal on $auto$ff.cc:262:slice$2471 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$8947 [7], Q = \P1.reg2 [7]).
Adding EN signal on $auto$ff.cc:262:slice$2470 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$8947 [6], Q = \P1.reg2 [6]).
Adding EN signal on $auto$ff.cc:262:slice$2469 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$8947 [5], Q = \P1.reg2 [5]).
Adding EN signal on $auto$ff.cc:262:slice$2468 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$8947 [4], Q = \P1.reg2 [4]).
Adding EN signal on $auto$ff.cc:262:slice$2467 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$8947 [3], Q = \P1.reg2 [3]).
Adding EN signal on $auto$ff.cc:262:slice$2466 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$8947 [2], Q = \P1.reg2 [2]).
Adding EN signal on $auto$ff.cc:262:slice$2465 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$8947 [1], Q = \P1.reg2 [1]).
Adding EN signal on $auto$ff.cc:262:slice$2464 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$8947 [0], Q = \P1.reg2 [0]).
Adding EN signal on $auto$ff.cc:262:slice$2437 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$9431 [2], Q = \P1.reg3 [2]).
Adding EN signal on $auto$ff.cc:262:slice$2436 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$9431 [1], Q = \P1.reg3 [1]).
Adding EN signal on $auto$ff.cc:262:slice$2435 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$9431 [0], Q = \P1.reg3 [0]).
Adding EN signal on $auto$ff.cc:262:slice$2434 ($_DFFE_PP0P_) from module b20 (D = $flatten\P2.$verific$n10835$691, Q = \P2.B).
Adding EN signal on $auto$ff.cc:262:slice$2401 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$12668 [31], Q = \P2.reg0 [31]).
Adding EN signal on $auto$ff.cc:262:slice$2400 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$12668 [30], Q = \P2.reg0 [30]).
Adding EN signal on $auto$ff.cc:262:slice$2399 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$12668 [29], Q = \P2.reg0 [29]).
Adding EN signal on $auto$ff.cc:262:slice$2398 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$12668 [28], Q = \P2.reg0 [28]).
Adding EN signal on $auto$ff.cc:262:slice$2397 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$12668 [27], Q = \P2.reg0 [27]).
Adding EN signal on $auto$ff.cc:262:slice$2396 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$12668 [26], Q = \P2.reg0 [26]).
Adding EN signal on $auto$ff.cc:262:slice$2395 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$12668 [25], Q = \P2.reg0 [25]).
Adding EN signal on $auto$ff.cc:262:slice$2394 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$12668 [24], Q = \P2.reg0 [24]).
Adding EN signal on $auto$ff.cc:262:slice$2393 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$12668 [23], Q = \P2.reg0 [23]).
Adding EN signal on $auto$ff.cc:262:slice$2392 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$12668 [22], Q = \P2.reg0 [22]).
Adding EN signal on $auto$ff.cc:262:slice$2391 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$12668 [21], Q = \P2.reg0 [21]).
Adding EN signal on $auto$ff.cc:262:slice$2390 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$12668 [20], Q = \P2.reg0 [20]).
Adding EN signal on $auto$ff.cc:262:slice$2389 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$12668 [19], Q = \P2.reg0 [19]).
Adding EN signal on $auto$ff.cc:262:slice$2388 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$12668 [18], Q = \P2.reg0 [18]).
Adding EN signal on $auto$ff.cc:262:slice$2387 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$12668 [17], Q = \P2.reg0 [17]).
Adding EN signal on $auto$ff.cc:262:slice$2386 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$12668 [16], Q = \P2.reg0 [16]).
Adding EN signal on $auto$ff.cc:262:slice$2385 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$12668 [15], Q = \P2.reg0 [15]).
Adding EN signal on $auto$ff.cc:262:slice$2384 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$12668 [14], Q = \P2.reg0 [14]).
Adding EN signal on $auto$ff.cc:262:slice$2383 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$12668 [13], Q = \P2.reg0 [13]).
Adding EN signal on $auto$ff.cc:262:slice$2382 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$12668 [12], Q = \P2.reg0 [12]).
Adding EN signal on $auto$ff.cc:262:slice$2381 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$12668 [11], Q = \P2.reg0 [11]).
Adding EN signal on $auto$ff.cc:262:slice$2380 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$12668 [10], Q = \P2.reg0 [10]).
Adding EN signal on $auto$ff.cc:262:slice$2379 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$12668 [9], Q = \P2.reg0 [9]).
Adding EN signal on $auto$ff.cc:262:slice$2378 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$12668 [8], Q = \P2.reg0 [8]).
Adding EN signal on $auto$ff.cc:262:slice$2377 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$12668 [7], Q = \P2.reg0 [7]).
Adding EN signal on $auto$ff.cc:262:slice$2376 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$12668 [6], Q = \P2.reg0 [6]).
Adding EN signal on $auto$ff.cc:262:slice$2375 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$12668 [5], Q = \P2.reg0 [5]).
Adding EN signal on $auto$ff.cc:262:slice$2374 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$12668 [4], Q = \P2.reg0 [4]).
Adding EN signal on $auto$ff.cc:262:slice$2373 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$12668 [3], Q = \P2.reg0 [3]).
Adding EN signal on $auto$ff.cc:262:slice$2372 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$12668 [2], Q = \P2.reg0 [2]).
Adding EN signal on $auto$ff.cc:262:slice$2371 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$12668 [1], Q = \P2.reg0 [1]).
Adding EN signal on $auto$ff.cc:262:slice$2370 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$12668 [0], Q = \P2.reg0 [0]).
Adding EN signal on $auto$ff.cc:262:slice$2369 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$13152 [31], Q = \P2.reg1 [31]).
Adding EN signal on $auto$ff.cc:262:slice$2368 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$13152 [30], Q = \P2.reg1 [30]).
Adding EN signal on $auto$ff.cc:262:slice$2367 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$13152 [29], Q = \P2.reg1 [29]).
Adding EN signal on $auto$ff.cc:262:slice$2366 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$13152 [28], Q = \P2.reg1 [28]).
Adding EN signal on $auto$ff.cc:262:slice$2365 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$13152 [27], Q = \P2.reg1 [27]).
Adding EN signal on $auto$ff.cc:262:slice$2364 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$13152 [26], Q = \P2.reg1 [26]).
Adding EN signal on $auto$ff.cc:262:slice$2363 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$13152 [25], Q = \P2.reg1 [25]).
Adding EN signal on $auto$ff.cc:262:slice$2362 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$13152 [24], Q = \P2.reg1 [24]).
Adding EN signal on $auto$ff.cc:262:slice$2361 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$13152 [23], Q = \P2.reg1 [23]).
Adding EN signal on $auto$ff.cc:262:slice$2360 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$13152 [22], Q = \P2.reg1 [22]).
Adding EN signal on $auto$ff.cc:262:slice$2359 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$13152 [21], Q = \P2.reg1 [21]).
Adding EN signal on $auto$ff.cc:262:slice$2358 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$13152 [20], Q = \P2.reg1 [20]).
Adding EN signal on $auto$ff.cc:262:slice$2357 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$13152 [19], Q = \P2.reg1 [19]).
Adding EN signal on $auto$ff.cc:262:slice$2356 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$13152 [18], Q = \P2.reg1 [18]).
Adding EN signal on $auto$ff.cc:262:slice$2355 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$13152 [17], Q = \P2.reg1 [17]).
Adding EN signal on $auto$ff.cc:262:slice$2354 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$13152 [16], Q = \P2.reg1 [16]).
Adding EN signal on $auto$ff.cc:262:slice$2353 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$13152 [15], Q = \P2.reg1 [15]).
Adding EN signal on $auto$ff.cc:262:slice$2352 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$13152 [14], Q = \P2.reg1 [14]).
Adding EN signal on $auto$ff.cc:262:slice$2351 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$13152 [13], Q = \P2.reg1 [13]).
Adding EN signal on $auto$ff.cc:262:slice$2350 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$13152 [12], Q = \P2.reg1 [12]).
Adding EN signal on $auto$ff.cc:262:slice$2349 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$13152 [11], Q = \P2.reg1 [11]).
Adding EN signal on $auto$ff.cc:262:slice$2348 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$13152 [10], Q = \P2.reg1 [10]).
Adding EN signal on $auto$ff.cc:262:slice$2347 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$13152 [9], Q = \P2.reg1 [9]).
Adding EN signal on $auto$ff.cc:262:slice$2346 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$13152 [8], Q = \P2.reg1 [8]).
Adding EN signal on $auto$ff.cc:262:slice$2345 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$13152 [7], Q = \P2.reg1 [7]).
Adding EN signal on $auto$ff.cc:262:slice$2344 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$13152 [6], Q = \P2.reg1 [6]).
Adding EN signal on $auto$ff.cc:262:slice$2343 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$13152 [5], Q = \P2.reg1 [5]).
Adding EN signal on $auto$ff.cc:262:slice$2342 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$13152 [4], Q = \P2.reg1 [4]).
Adding EN signal on $auto$ff.cc:262:slice$2341 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$13152 [3], Q = \P2.reg1 [3]).
Adding EN signal on $auto$ff.cc:262:slice$2340 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$13152 [2], Q = \P2.reg1 [2]).
Adding EN signal on $auto$ff.cc:262:slice$2339 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$13152 [1], Q = \P2.reg1 [1]).
Adding EN signal on $auto$ff.cc:262:slice$2338 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$13152 [0], Q = \P2.reg1 [0]).
Adding EN signal on $auto$ff.cc:262:slice$2337 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$13636 [31], Q = \P2.reg2 [31]).
Adding EN signal on $auto$ff.cc:262:slice$2336 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$13636 [30], Q = \P2.reg2 [30]).
Adding EN signal on $auto$ff.cc:262:slice$2335 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$13636 [29], Q = \P2.reg2 [29]).
Adding EN signal on $auto$ff.cc:262:slice$2334 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$13636 [28], Q = \P2.reg2 [28]).
Adding EN signal on $auto$ff.cc:262:slice$2333 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$13636 [27], Q = \P2.reg2 [27]).
Adding EN signal on $auto$ff.cc:262:slice$2332 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$13636 [26], Q = \P2.reg2 [26]).
Adding EN signal on $auto$ff.cc:262:slice$2331 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$13636 [25], Q = \P2.reg2 [25]).
Adding EN signal on $auto$ff.cc:262:slice$2330 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$13636 [24], Q = \P2.reg2 [24]).
Adding EN signal on $auto$ff.cc:262:slice$2329 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$13636 [23], Q = \P2.reg2 [23]).
Adding EN signal on $auto$ff.cc:262:slice$2328 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$13636 [22], Q = \P2.reg2 [22]).
Adding EN signal on $auto$ff.cc:262:slice$2327 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$13636 [21], Q = \P2.reg2 [21]).
Adding EN signal on $auto$ff.cc:262:slice$2326 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$13636 [20], Q = \P2.reg2 [20]).
Adding EN signal on $auto$ff.cc:262:slice$2325 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$13636 [19], Q = \P2.reg2 [19]).
Adding EN signal on $auto$ff.cc:262:slice$2324 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$13636 [18], Q = \P2.reg2 [18]).
Adding EN signal on $auto$ff.cc:262:slice$2323 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$13636 [17], Q = \P2.reg2 [17]).
Adding EN signal on $auto$ff.cc:262:slice$2322 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$13636 [16], Q = \P2.reg2 [16]).
Adding EN signal on $auto$ff.cc:262:slice$2321 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$13636 [15], Q = \P2.reg2 [15]).
Adding EN signal on $auto$ff.cc:262:slice$2320 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$13636 [14], Q = \P2.reg2 [14]).
Adding EN signal on $auto$ff.cc:262:slice$2319 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$13636 [13], Q = \P2.reg2 [13]).
Adding EN signal on $auto$ff.cc:262:slice$2318 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$13636 [12], Q = \P2.reg2 [12]).
Adding EN signal on $auto$ff.cc:262:slice$2317 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$13636 [11], Q = \P2.reg2 [11]).
Adding EN signal on $auto$ff.cc:262:slice$2316 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$13636 [10], Q = \P2.reg2 [10]).
Adding EN signal on $auto$ff.cc:262:slice$2315 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$13636 [9], Q = \P2.reg2 [9]).
Adding EN signal on $auto$ff.cc:262:slice$2314 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$13636 [8], Q = \P2.reg2 [8]).
Adding EN signal on $auto$ff.cc:262:slice$2313 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$13636 [7], Q = \P2.reg2 [7]).
Adding EN signal on $auto$ff.cc:262:slice$2312 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$13636 [6], Q = \P2.reg2 [6]).
Adding EN signal on $auto$ff.cc:262:slice$2311 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$13636 [5], Q = \P2.reg2 [5]).
Adding EN signal on $auto$ff.cc:262:slice$2310 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$13636 [4], Q = \P2.reg2 [4]).
Adding EN signal on $auto$ff.cc:262:slice$2309 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$13636 [3], Q = \P2.reg2 [3]).
Adding EN signal on $auto$ff.cc:262:slice$2308 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$13636 [2], Q = \P2.reg2 [2]).
Adding EN signal on $auto$ff.cc:262:slice$2307 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$13636 [1], Q = \P2.reg2 [1]).
Adding EN signal on $auto$ff.cc:262:slice$2306 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$13636 [0], Q = \P2.reg2 [0]).
Adding EN signal on $auto$ff.cc:262:slice$2279 ($_DFFE_PP0P_) from module b20 (D = $auto$wreduce.cc:454:run$1660 [2], Q = \P2.reg3 [2]).
Adding EN signal on $auto$ff.cc:262:slice$2278 ($_DFFE_PP0P_) from module b20 (D = $auto$wreduce.cc:454:run$1660 [1], Q = \P2.reg3 [1]).
Adding EN signal on $auto$ff.cc:262:slice$2277 ($_DFFE_PP0P_) from module b20 (D = $auto$wreduce.cc:454:run$1660 [0], Q = \P2.reg3 [0]).
Adding EN signal on $auto$ff.cc:262:slice$10955 ($_DFF_PP0_) from module b20 (D = $flatten\P2.$verific$n11102$866 [19], Q = \P2.addr [19]).
Adding EN signal on $auto$ff.cc:262:slice$10954 ($_DFF_PP0_) from module b20 (D = $flatten\P2.$verific$n11102$866 [18], Q = \P2.addr [18]).
Adding EN signal on $auto$ff.cc:262:slice$10953 ($_DFF_PP0_) from module b20 (D = $flatten\P2.$verific$n11102$866 [17], Q = \P2.addr [17]).
Adding EN signal on $auto$ff.cc:262:slice$10952 ($_DFF_PP0_) from module b20 (D = $flatten\P2.$verific$n11102$866 [16], Q = \P2.addr [16]).
Adding EN signal on $auto$ff.cc:262:slice$10951 ($_DFF_PP0_) from module b20 (D = $flatten\P2.$verific$n11102$866 [15], Q = \P2.addr [15]).
Adding EN signal on $auto$ff.cc:262:slice$10950 ($_DFF_PP0_) from module b20 (D = $flatten\P2.$verific$n11102$866 [14], Q = \P2.addr [14]).
Adding EN signal on $auto$ff.cc:262:slice$10949 ($_DFF_PP0_) from module b20 (D = $flatten\P2.$verific$n11102$866 [13], Q = \P2.addr [13]).
Adding EN signal on $auto$ff.cc:262:slice$10948 ($_DFF_PP0_) from module b20 (D = $flatten\P2.$verific$n11102$866 [12], Q = \P2.addr [12]).
Adding EN signal on $auto$ff.cc:262:slice$10947 ($_DFF_PP0_) from module b20 (D = $flatten\P2.$verific$n11102$866 [11], Q = \P2.addr [11]).
Adding EN signal on $auto$ff.cc:262:slice$10946 ($_DFF_PP0_) from module b20 (D = $flatten\P2.$verific$n11102$866 [10], Q = \P2.addr [10]).
Adding EN signal on $auto$ff.cc:262:slice$10945 ($_DFF_PP0_) from module b20 (D = $flatten\P2.$verific$n11102$866 [9], Q = \P2.addr [9]).
Adding EN signal on $auto$ff.cc:262:slice$10944 ($_DFF_PP0_) from module b20 (D = $flatten\P2.$verific$n11102$866 [8], Q = \P2.addr [8]).
Adding EN signal on $auto$ff.cc:262:slice$10943 ($_DFF_PP0_) from module b20 (D = $flatten\P2.$verific$n11102$866 [7], Q = \P2.addr [7]).
Adding EN signal on $auto$ff.cc:262:slice$10942 ($_DFF_PP0_) from module b20 (D = $flatten\P2.$verific$n11102$866 [6], Q = \P2.addr [6]).
Adding EN signal on $auto$ff.cc:262:slice$10941 ($_DFF_PP0_) from module b20 (D = $flatten\P2.$verific$n11102$866 [5], Q = \P2.addr [5]).
Adding EN signal on $auto$ff.cc:262:slice$10940 ($_DFF_PP0_) from module b20 (D = $flatten\P2.$verific$n11102$866 [4], Q = \P2.addr [4]).
Adding EN signal on $auto$ff.cc:262:slice$10939 ($_DFF_PP0_) from module b20 (D = $flatten\P2.$verific$n11102$866 [3], Q = \P2.addr [3]).
Adding EN signal on $auto$ff.cc:262:slice$10938 ($_DFF_PP0_) from module b20 (D = $flatten\P2.$verific$n11102$866 [2], Q = \P2.addr [2]).
Adding EN signal on $auto$ff.cc:262:slice$10937 ($_DFF_PP0_) from module b20 (D = $flatten\P2.$verific$n11102$866 [1], Q = \P2.addr [1]).
Adding EN signal on $auto$ff.cc:262:slice$10936 ($_DFF_PP0_) from module b20 (D = $flatten\P2.$verific$n11102$866 [0], Q = \P2.addr [0]).

29.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b20..
Removed 163 unused cells and 1455 unused wires.
<suppressed ~164 debug messages>

29.5. Rerunning OPT passes. (Removed registers in this run.)

29.6. Executing OPT_EXPR pass (perform const folding).
Optimizing module b20.
<suppressed ~5586 debug messages>

29.7. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b20'.
<suppressed ~20691 debug messages>
Removed a total of 6897 cells.

29.8. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $auto$ff.cc:262:slice$30899 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$13152 [0], Q = \P2.reg1 [0]).
Adding EN signal on $auto$ff.cc:262:slice$30814 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$13152 [1], Q = \P2.reg1 [1]).
Adding EN signal on $auto$ff.cc:262:slice$30729 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$13152 [2], Q = \P2.reg1 [2]).
Adding EN signal on $auto$ff.cc:262:slice$30644 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$13152 [3], Q = \P2.reg1 [3]).
Adding EN signal on $auto$ff.cc:262:slice$30559 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$13152 [4], Q = \P2.reg1 [4]).
Adding EN signal on $auto$ff.cc:262:slice$30474 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$13152 [5], Q = \P2.reg1 [5]).
Adding EN signal on $auto$ff.cc:262:slice$30389 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$13152 [6], Q = \P2.reg1 [6]).
Adding EN signal on $auto$ff.cc:262:slice$30304 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$13152 [7], Q = \P2.reg1 [7]).
Adding EN signal on $auto$ff.cc:262:slice$30219 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$13152 [8], Q = \P2.reg1 [8]).
Adding EN signal on $auto$ff.cc:262:slice$30134 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$13152 [9], Q = \P2.reg1 [9]).
Adding EN signal on $auto$ff.cc:262:slice$30049 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$13152 [10], Q = \P2.reg1 [10]).
Adding EN signal on $auto$ff.cc:262:slice$29964 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$13152 [11], Q = \P2.reg1 [11]).
Adding EN signal on $auto$ff.cc:262:slice$29879 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$13152 [12], Q = \P2.reg1 [12]).
Adding EN signal on $auto$ff.cc:262:slice$29794 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$13152 [13], Q = \P2.reg1 [13]).
Adding EN signal on $auto$ff.cc:262:slice$29709 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$13152 [14], Q = \P2.reg1 [14]).
Adding EN signal on $auto$ff.cc:262:slice$29624 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$13152 [15], Q = \P2.reg1 [15]).
Adding EN signal on $auto$ff.cc:262:slice$29539 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$13152 [16], Q = \P2.reg1 [16]).
Adding EN signal on $auto$ff.cc:262:slice$29454 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$13152 [17], Q = \P2.reg1 [17]).
Adding EN signal on $auto$ff.cc:262:slice$29369 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$13152 [18], Q = \P2.reg1 [18]).
Adding EN signal on $auto$ff.cc:262:slice$29284 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$13152 [19], Q = \P2.reg1 [19]).
Adding EN signal on $auto$ff.cc:262:slice$29199 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$13152 [20], Q = \P2.reg1 [20]).
Adding EN signal on $auto$ff.cc:262:slice$29114 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$13152 [21], Q = \P2.reg1 [21]).
Adding EN signal on $auto$ff.cc:262:slice$29029 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$13152 [22], Q = \P2.reg1 [22]).
Adding EN signal on $auto$ff.cc:262:slice$28944 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$13152 [23], Q = \P2.reg1 [23]).
Adding EN signal on $auto$ff.cc:262:slice$28859 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$13152 [24], Q = \P2.reg1 [24]).
Adding EN signal on $auto$ff.cc:262:slice$28774 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$13152 [25], Q = \P2.reg1 [25]).
Adding EN signal on $auto$ff.cc:262:slice$28689 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$13152 [26], Q = \P2.reg1 [26]).
Adding EN signal on $auto$ff.cc:262:slice$28604 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$13152 [27], Q = \P2.reg1 [27]).
Adding EN signal on $auto$ff.cc:262:slice$28519 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$13152 [28], Q = \P2.reg1 [28]).
Adding EN signal on $auto$ff.cc:262:slice$28434 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$13152 [29], Q = \P2.reg1 [29]).
Adding EN signal on $auto$ff.cc:262:slice$28367 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$13152 [30], Q = \P2.reg1 [30]).
Adding EN signal on $auto$ff.cc:262:slice$28300 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$13152 [31], Q = \P2.reg1 [31]).
Adding EN signal on $auto$ff.cc:262:slice$28215 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$12668 [0], Q = \P2.reg0 [0]).
Adding EN signal on $auto$ff.cc:262:slice$28130 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$12668 [1], Q = \P2.reg0 [1]).
Adding EN signal on $auto$ff.cc:262:slice$28045 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$12668 [2], Q = \P2.reg0 [2]).
Adding EN signal on $auto$ff.cc:262:slice$27960 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$12668 [3], Q = \P2.reg0 [3]).
Adding EN signal on $auto$ff.cc:262:slice$27875 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$12668 [4], Q = \P2.reg0 [4]).
Adding EN signal on $auto$ff.cc:262:slice$27790 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$12668 [5], Q = \P2.reg0 [5]).
Adding EN signal on $auto$ff.cc:262:slice$27705 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$12668 [6], Q = \P2.reg0 [6]).
Adding EN signal on $auto$ff.cc:262:slice$27620 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$12668 [7], Q = \P2.reg0 [7]).
Adding EN signal on $auto$ff.cc:262:slice$27535 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$12668 [8], Q = \P2.reg0 [8]).
Adding EN signal on $auto$ff.cc:262:slice$27450 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$12668 [9], Q = \P2.reg0 [9]).
Adding EN signal on $auto$ff.cc:262:slice$27365 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$12668 [10], Q = \P2.reg0 [10]).
Adding EN signal on $auto$ff.cc:262:slice$27280 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$12668 [11], Q = \P2.reg0 [11]).
Adding EN signal on $auto$ff.cc:262:slice$27195 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$12668 [12], Q = \P2.reg0 [12]).
Adding EN signal on $auto$ff.cc:262:slice$27110 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$12668 [13], Q = \P2.reg0 [13]).
Adding EN signal on $auto$ff.cc:262:slice$27025 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$12668 [14], Q = \P2.reg0 [14]).
Adding EN signal on $auto$ff.cc:262:slice$26940 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$12668 [15], Q = \P2.reg0 [15]).
Adding EN signal on $auto$ff.cc:262:slice$26855 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$12668 [16], Q = \P2.reg0 [16]).
Adding EN signal on $auto$ff.cc:262:slice$26770 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$12668 [17], Q = \P2.reg0 [17]).
Adding EN signal on $auto$ff.cc:262:slice$26685 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$12668 [18], Q = \P2.reg0 [18]).
Adding EN signal on $auto$ff.cc:262:slice$26600 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$12668 [19], Q = \P2.reg0 [19]).
Adding EN signal on $auto$ff.cc:262:slice$26515 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$12668 [20], Q = \P2.reg0 [20]).
Adding EN signal on $auto$ff.cc:262:slice$26430 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$12668 [21], Q = \P2.reg0 [21]).
Adding EN signal on $auto$ff.cc:262:slice$26260 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$12668 [23], Q = \P2.reg0 [23]).
Adding EN signal on $auto$ff.cc:262:slice$26175 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$12668 [24], Q = \P2.reg0 [24]).
Adding EN signal on $auto$ff.cc:262:slice$26090 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$12668 [25], Q = \P2.reg0 [25]).
Adding EN signal on $auto$ff.cc:262:slice$26005 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$12668 [26], Q = \P2.reg0 [26]).
Adding EN signal on $auto$ff.cc:262:slice$25920 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$12668 [27], Q = \P2.reg0 [27]).
Adding EN signal on $auto$ff.cc:262:slice$25835 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$12668 [28], Q = \P2.reg0 [28]).
Adding EN signal on $auto$ff.cc:262:slice$25750 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$12668 [29], Q = \P2.reg0 [29]).
Adding EN signal on $auto$ff.cc:262:slice$25683 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$12668 [30], Q = \P2.reg0 [30]).
Adding EN signal on $auto$ff.cc:262:slice$25616 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$12668 [31], Q = \P2.reg0 [31]).
Adding EN signal on $auto$ff.cc:262:slice$26345 ($_DFFE_PP0P_) from module b20 (D = $auto$simplemap.cc:309:simplemap_bmux$12668 [22], Q = \P2.reg0 [22]).

29.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b20..
Removed 0 unused cells and 6824 unused wires.
<suppressed ~1 debug messages>

29.10. Rerunning OPT passes. (Removed registers in this run.)

29.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module b20.
<suppressed ~257 debug messages>

29.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b20'.
<suppressed ~750 debug messages>
Removed a total of 250 cells.

29.13. Executing OPT_DFF pass (perform DFF optimizations).

29.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b20..
Removed 0 unused cells and 314 unused wires.
<suppressed ~1 debug messages>

29.15. Finished fast OPT passes.

30. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

31. Executing OPT pass (performing simple optimizations).

31.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b20.

31.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b20'.
Removed a total of 0 cells.

31.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b20..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

31.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b20.
Performed a total of 0 changes.

31.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b20'.
Removed a total of 0 cells.

31.6. Executing OPT_SHARE pass.
    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$10874 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$11372
        $auto$simplemap.cc:86:simplemap_bitop$11392

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$10875 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$11374
        $auto$simplemap.cc:86:simplemap_bitop$11373

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$10876 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$11376
        $auto$simplemap.cc:86:simplemap_bitop$11375

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$10877 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$11378
        $auto$simplemap.cc:86:simplemap_bitop$11377

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$6280 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$6778
        $auto$simplemap.cc:86:simplemap_bitop$6798

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$6281 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$6780
        $auto$simplemap.cc:86:simplemap_bitop$6779

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$6282 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$6782
        $auto$simplemap.cc:86:simplemap_bitop$6781

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$6283 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$6784
        $auto$simplemap.cc:86:simplemap_bitop$6783

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$9548 in front of them:
        $auto$alumacc.cc:485:replace_alu$1972
        $auto$alumacc.cc:485:replace_alu$1966

31.7. Executing OPT_DFF pass (perform DFF optimizations).

31.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b20..
Removed 0 unused cells and 24 unused wires.
<suppressed ~1 debug messages>

31.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module b20.
<suppressed ~9 debug messages>

31.10. Rerunning OPT passes. (Maybe there is more to do..)

31.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b20..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~9 debug messages>

31.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b20.
Performed a total of 0 changes.

31.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b20'.
Removed a total of 0 cells.

31.14. Executing OPT_SHARE pass.
    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$10881 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$11374
        $auto$simplemap.cc:86:simplemap_bitop$11372

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$10882 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$11378
        $auto$simplemap.cc:86:simplemap_bitop$11376

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$6287 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$6780
        $auto$simplemap.cc:86:simplemap_bitop$6778

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$6288 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$6784
        $auto$simplemap.cc:86:simplemap_bitop$6782

31.15. Executing OPT_DFF pass (perform DFF optimizations).

31.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b20..
Removed 0 unused cells and 8 unused wires.
<suppressed ~1 debug messages>

31.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module b20.
<suppressed ~4 debug messages>

31.18. Rerunning OPT passes. (Maybe there is more to do..)

31.19. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b20..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

31.20. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b20.
Performed a total of 0 changes.

31.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b20'.
Removed a total of 0 cells.

31.22. Executing OPT_SHARE pass.
    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$10885 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$11378
        $auto$simplemap.cc:86:simplemap_bitop$11374

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$simplemap.cc:312:simplemap_bmux$6291 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$6784
        $auto$simplemap.cc:86:simplemap_bitop$6780

31.23. Executing OPT_DFF pass (perform DFF optimizations).

31.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b20..
Removed 0 unused cells and 4 unused wires.
<suppressed ~1 debug messages>

31.25. Executing OPT_EXPR pass (perform const folding).
Optimizing module b20.
<suppressed ~2 debug messages>

31.26. Rerunning OPT passes. (Maybe there is more to do..)

31.27. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b20..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

31.28. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b20.
Performed a total of 0 changes.

31.29. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b20'.
Removed a total of 0 cells.

31.30. Executing OPT_SHARE pass.

31.31. Executing OPT_DFF pass (perform DFF optimizations).

31.32. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b20..

31.33. Executing OPT_EXPR pass (perform const folding).
Optimizing module b20.

31.34. Finished OPT passes. (There is nothing left to do.)

32. Executing TECHMAP pass (map to technology primitives).

32.1. Executing Verilog-2005 frontend: /home/users/aram/Workspace/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/users/aram/Workspace/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

32.2. Continuing TECHMAP pass.
Using template $paramod$fbc7873bff55778c0b3173955b7e4bce1d9d6834\_90_alu for cells of type $alu.
Using template $paramod$fc972a7a46956c1788f3cb5257b53c8f1df2d0cc\_90_alu for cells of type $alu.
Using template $paramod$adbaf76fa5a3091a329503792521395f8ff4d1a4\_90_alu for cells of type $alu.
Using template $paramod$6fc37af1c109ae54e8aed83fcd995c12d378ce93\_90_alu for cells of type $alu.
Using template $paramod$6a42b6fefed750f8a1c58eab59479d960557103c\_90_alu for cells of type $alu.
Using template $paramod$ba698a254f9a5947e85cbe7beae6b161eefc5386\_90_alu for cells of type $alu.
Using template $paramod$32a7b7b86c07519b7537abc18e96f0331f97914d\_90_alu for cells of type $alu.
Using template $paramod$403d07c18de10cda2ac652a859c56aea81aaf9b5\_90_alu for cells of type $alu.
Using template $paramod$e891e6b399cf52748460a311fafe476815d24bd7\_90_alu for cells of type $alu.
Using template $paramod$c6baa65225090ac0a120feab1b920965244aa496\_90_alu for cells of type $alu.
Using template $paramod$bfd924274384262bad5ce2d9fd5238108bec6022\_90_alu for cells of type $alu.
Using template $paramod$788c3d57e5abb3a3f89aea6d4acd665be37f4e9b\_90_alu for cells of type $alu.
Using template $paramod$175e67c02b86e96b1288b9dc100122520d7240d8\_90_alu for cells of type $alu.
Using template $paramod$83784888def4f70dbbded37c6d05d2ea1157c936\_90_alu for cells of type $alu.
Using template $paramod$3ef7d3dd227da7627a99c5e5a6a4deb817573e39\_90_alu for cells of type $alu.
Using extmapper maccmap for cells of type $macc.
  add 3'101 * $auto$simplemap.cc:309:simplemap_bmux$9569 [0] (3x1 bits, unsigned)
Using template $paramod$a7926d38756e33b5022e02ebfd484599309272c7\_90_alu for cells of type $alu.
Using template $paramod$c1c99333e5903a83e64c68a0adef06f97dd2bafc\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $mux.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010100 for cells of type $lcu.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $and.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000001 for cells of type $lcu.
Using extmapper simplemap for cells of type $not.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011110 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000010 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010101 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000100000 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011111 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011011 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000011 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000100 for cells of type $lcu.
Using extmapper simplemap for cells of type $or.
No more expansions possible.
<suppressed ~5185 debug messages>

33. Executing OPT pass (performing simple optimizations).

33.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b20.
<suppressed ~2362 debug messages>

33.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b20'.
<suppressed ~2883 debug messages>
Removed a total of 961 cells.

33.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b20..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

33.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b20.
Performed a total of 0 changes.

33.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b20'.
Removed a total of 0 cells.

33.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $auto$ff.cc:262:slice$6243 ($_DFF_PP0_) from module b20 (D = $flatten\P1.$verific$n11301$364 [0], Q = \P1.IR [0]).
Adding EN signal on $auto$ff.cc:262:slice$10837 ($_DFF_PP0_) from module b20 (D = $flatten\P2.$verific$n11157$867 [0], Q = \P2.IR [0]).

33.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b20..
Removed 610 unused cells and 2344 unused wires.
<suppressed ~611 debug messages>

33.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module b20.
<suppressed ~6 debug messages>

33.9. Rerunning OPT passes. (Maybe there is more to do..)

33.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b20..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

33.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b20.
Performed a total of 0 changes.

33.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b20'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

33.13. Executing OPT_DFF pass (perform DFF optimizations).

33.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b20..
Removed 0 unused cells and 4 unused wires.
<suppressed ~1 debug messages>

33.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module b20.

33.16. Rerunning OPT passes. (Maybe there is more to do..)

33.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b20..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

33.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b20.
Performed a total of 0 changes.

33.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b20'.
Removed a total of 0 cells.

33.20. Executing OPT_DFF pass (perform DFF optimizations).

33.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b20..

33.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module b20.

33.23. Finished OPT passes. (There is nothing left to do.)

34. Executing ABC pass (technology mapping using ABC).

34.1. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Extracted 9086 gates and 9557 wires to a netlist network with 468 inputs and 475 outputs.

34.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + source /home/users/aram/Workspace/yosys_verific_rs/scripts/synth/abc/abc_base6.a21.scr 
ABC: netlist  : i/o =    468/    475  and =   15917  lev =   86 (40.62)  mem = 0.21 MB
ABC: Mapping (K=6)  :  lut =   2539  edge =   11361  lev =   35 (16.82)  mem = 0.13 MB
ABC: netlist  : i/o =    468/    475  and =   15085  lev =   93 (43.81)  mem = 0.20 MB
ABC: Mapping (K=6)  :  lut =   2214  edge =   10035  lev =   37 (18.97)  mem = 0.12 MB
ABC: netlist  : i/o =    468/    475  and =   14920  lev =   89 (43.16)  mem = 0.20 MB
ABC: Mapping (K=6)  :  lut =   2149  edge =    9848  lev =   40 (19.07)  mem = 0.11 MB
ABC: netlist  : i/o =    468/    475  and =   15296  lev =   93 (45.92)  mem = 0.20 MB
ABC: Mapping (K=6)  :  lut =   2114  edge =    9798  lev =   39 (18.69)  mem = 0.12 MB
ABC: netlist  : i/o =    468/    475  and =   13693  lev =   91 (43.89)  mem = 0.18 MB
ABC: Mapping (K=6)  :  lut =   2113  edge =    9470  lev =   41 (19.33)  mem = 0.11 MB
ABC: netlist  : i/o =    468/    475  and =   13777  lev =   90 (43.83)  mem = 0.24 MB
ABC: Mapping (K=6)  :  lut =   1999  edge =    9379  lev =   35 (17.56)  mem = 0.11 MB
ABC: netlist  : i/o =    468/    475  and =   13919  lev =   93 (43.65)  mem = 0.24 MB
ABC: Mapping (K=6)  :  lut =   1985  edge =    9446  lev =   36 (17.35)  mem = 0.11 MB
ABC: netlist  : i/o =    468/    475  and =   13938  lev =   92 (43.91)  mem = 0.24 MB
ABC: Mapping (K=6)  :  lut =   1987  edge =    9401  lev =   36 (17.46)  mem = 0.11 MB
ABC: netlist  : i/o =    468/    475  and =   13894  lev =   98 (46.46)  mem = 0.24 MB
ABC: Mapping (K=6)  :  lut =   1966  edge =    9271  lev =   36 (17.38)  mem = 0.11 MB
ABC: netlist  : i/o =    468/    475  and =   13771  lev =  101 (50.51)  mem = 0.24 MB
ABC: Mapping (K=6)  :  lut =   1948  edge =    9179  lev =   36 (17.56)  mem = 0.11 MB
ABC: netlist  : i/o =    468/    475  and =   13540  lev =   88 (43.29)  mem = 0.24 MB
ABC: Mapping (K=6)  :  lut =   1929  edge =    9138  lev =   36 (17.63)  mem = 0.10 MB
ABC: netlist  : i/o =    468/    475  and =   14004  lev =   98 (49.98)  mem = 0.24 MB
ABC: Mapping (K=6)  :  lut =   1914  edge =    9139  lev =   36 (17.44)  mem = 0.11 MB
ABC: netlist  : i/o =    468/    475  and =   13525  lev =   89 (43.36)  mem = 0.24 MB
ABC: Mapping (K=6)  :  lut =   1909  edge =    9126  lev =   36 (17.48)  mem = 0.10 MB
ABC: netlist  : i/o =    468/    475  and =   13525  lev =   89 (43.36)  mem = 0.18 MB
ABC: Mapping (K=6)  :  lut =   1909  edge =    9126  lev =   36 (17.48)  mem = 0.10 MB
ABC: netlist  : i/o =    468/    475  and =   13525  lev =   89 (43.36)  mem = 0.24 MB
ABC: Mapping (K=6)  :  lut =   1907  edge =    9127  lev =   36 (17.47)  mem = 0.10 MB
ABC: netlist  : i/o =    468/    475  and =   13874  lev =   94 (44.09)  mem = 0.19 MB
ABC: Mapping (K=6)  :  lut =   1907  edge =    9127  lev =   36 (17.47)  mem = 0.11 MB
ABC: + write_blif <abc-temp-dir>/output.blif 

34.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:     1911
ABC RESULTS:        internal signals:     8614
ABC RESULTS:           input signals:      468
ABC RESULTS:          output signals:      475
Removing temp directory.

35. Executing OPT pass (performing simple optimizations).

35.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module b20.

35.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b20'.
Removed a total of 0 cells.

35.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b20..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

35.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b20.
Performed a total of 0 changes.

35.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b20'.
Removed a total of 0 cells.

35.6. Executing OPT_DFF pass (perform DFF optimizations).

35.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b20..
Removed 0 unused cells and 2664 unused wires.
<suppressed ~5 debug messages>

35.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module b20.

35.9. Rerunning OPT passes. (Maybe there is more to do..)

35.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b20..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

35.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b20.
Performed a total of 0 changes.

35.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b20'.
Removed a total of 0 cells.

35.13. Executing OPT_DFF pass (perform DFF optimizations).

35.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b20..

35.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module b20.

35.16. Finished OPT passes. (There is nothing left to do.)

36. Executing HIERARCHY pass (managing design hierarchy).

36.1. Analyzing design hierarchy..
Top module:  \b20

36.2. Analyzing design hierarchy..
Top module:  \b20
Removed 0 unused modules.

37. Printing statistics.

=== b20 ===

   Number of wires:               1873
   Number of wire bits:           2685
   Number of public wires:          42
   Number of public wire bits:     608
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               2345
     $_DFFE_PP0N_                    2
     $_DFFE_PP0P_                  340
     $_DFF_PP0_                     94
     $lut                         1909

38. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b20..
Removed 0 unused cells and 12 unused wires.
<suppressed ~12 debug messages>

39. Executing BLIF backend.

End of script. Logfile hash: 6e8451aed9, CPU: user 25.20s system 0.15s, MEM: 76.44 MB peak
Yosys 0.14+36 (git sha1 15a4e900b, gcc 7.1.0 -fPIC -Os)
Time spent: 69% 1x abc (56 sec), 10% 32x opt_dff (8 sec), ...
