# --------------------------------------
# Yosys synthesis script for ${TOP_MODULE}
# --------------------------------------
#
# Modified by Thierry on 02/11/2022 (see comments)
#

#########################
# Parse input files
#########################
# Read HDL files
${READ_HDL}

# Read technology library
#
# Commented by Thierry
#
##read_verilog -lib -specify ${YOSYS_CELL_SIM_VERILOG}

#########################
# Prepare for synthesis
#########################
# Identify top module from hierarchy
hierarchy -check -top ${TOP_MODULE}

# - Convert process blocks to AST
proc

# Flatten all the gates/primitives
flatten

# Identify tri-state buffers from 'z' signal in AST
# with follow-up optimizations to clean up AST
tribuf -logic
opt_expr
opt_clean
check

# demote inout ports to input or output port
# with follow-up optimizations to clean up AST
deminout
opt -nodffe -nosdff


# Thierry : moved "fsm" process earlier and performs "sat" based optimization
# Typical winner with 'sat' based optimization : design "IWLS/dma" from 4K Luts downto 2KLuts
fsm
opt -sat

# Thierry : comment original
#
##opt_expr
##opt_clean
##check
##opt -nodffe -nosdff

wreduce -keepdc
peepopt
pmuxtree
opt_clean

########################
# Map multipliers
# Inspired from synth_xilinx.cc
#########################
# Avoid merging any registers into DSP, reserve memory port registers first
#
# Thierry : comment original for now
#
##memory_dff
##wreduce t:$mul
##techmap -map +/mul2dsp.v -map ${YOSYS_DSP_MAP_VERILOG} ${YOSYS_DSP_MAP_PARAMETERS}
##select a:mul2dsp
##setattr -unset mul2dsp
##opt_expr -fine
##wreduce
##select -clear
##chtype -set $mul t:$__soft_mul# Extract arithmetic functions

#########################
# Run coarse synthesis
#########################
# Run a tech map with default library
# Thierry : comment original for now
##techmap
alumacc

# Thierry : comment original for now:
#     - do we do "share" ?
#     - move "fsm" processing earlier in the script
#
##share
##opt -nodffe -nosdff
##fsm
#
opt

# Run a quick follow-up optimization to sweep out unused nets/signals
#
# Thierry : comment original for now
#
##opt -fast -nodffe -nosdff

# Optimize any memory cells by merging share-able ports and collecting all the ports belonging to memorcy cells  
memory -nomap
opt_clean

#########################
# Map logics to BRAMs
#########################
#
# Thierry : comment original for now till supporting BRAMs
#
##memory_bram -rules ${YOSYS_BRAM_MAP_RULES}
##techmap -map ${YOSYS_BRAM_MAP_VERILOG}
##opt -fast -mux_undef -undriven -fine -nodffe -nosdff
##memory_map
##opt -undriven -fine -nodffe -nosdff

#########################
# Map flip-flops
#########################
#
# Thierry : comment original for now
#
##techmap -map ${YOSYS_DFF_MAP_VERILOG}
opt_expr -mux_undef
simplemap
opt_expr
opt_merge
opt_dff -nodffe -nosdff
opt_clean
opt -nodffe -nosdff

# Thierry : adding opt pass
#
opt -fast -full
memory_map
opt -full
techmap
opt


#########################
# Map LUTs
#########################
#
# Thierry : adding customized ABC mapping + opt
#
abc -script ${ABC_SCRIPT}
opt

#########################
# Check and show statisitics
#########################
hierarchy -check
stat

#########################
# Output netlists
#########################
opt_clean -purge
#write_edif netlist.edif
write_blif netlist.blif
